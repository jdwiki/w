<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel unity3d on </title>
    <link>https://www.wikiod.com/fr/docs/unity3d/</link>
    <description>Recent content in Tutoriel unity3d on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/unity3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec unity3d</title>
      <link>https://www.wikiod.com/fr/unity3d/premiers-pas-avec-unity3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/premiers-pas-avec-unity3d/</guid>
      <description>Installation ou configuration # Aperçu # Unity fonctionne sur Windows et Mac. Il existe également une version Linux alpha disponible.
Il existe 4 plans de paiement différents pour Unity :
Personnel - Gratuit (voir ci-dessous) Plus - 35 USD par mois et par siège (voir ci-dessous) Pro - 125 USD par mois et par siège - Après avoir souscrit au plan Pro pendant 24 mois consécutifs, vous avez la possibilité d&amp;rsquo;arrêter de vous abonner et de conserver la version dont vous disposez.</description>
    </item>
    
    <item>
      <title>Utilisation du contrôle de source Git avec Unity</title>
      <link>https://www.wikiod.com/fr/unity3d/utilisation-du-controle-de-source-git-avec-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/utilisation-du-controle-de-source-git-avec-unity/</guid>
      <description>## Configuration d&amp;rsquo;un référentiel Git pour Unity Lors de l&amp;rsquo;initialisation d&amp;rsquo;un référentiel Git pour le développement Unity, il y a quelques choses à faire.
Unity ignore les dossiers # Tout ne doit pas être versionné dans le référentiel. Vous pouvez ajouter le modèle ci-dessous à votre fichier .gitignore à la racine de votre référentiel. Ou bien, vous pouvez vérifier la source ouverte [Unity .gitignore sur GitHub][1] et en générer une alternativement en utilisant [gitignore.</description>
    </item>
    
    <item>
      <title>Extension de l&#39;éditeur</title>
      <link>https://www.wikiod.com/fr/unity3d/extension-de-lediteur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/extension-de-lediteur/</guid>
      <description>Syntaxe # [MenuItem(string itemName)] [MenuItem(string itemName, bool isValidateFunction)] [MenuItem(string itemName, bool isValidateFunction, int priority)] [ContextMenu (nom de la chaîne)] [ContextMenuItem (nom de chaîne, fonction de chaîne)] [DrawGizmo (Gizmo Type Gizmo)] [DrawGizmo(GizmoType Gizmo, Tapez drawGizmoType)] Paramètres # Paramètre Détails CommandeMenu MenuCommand est utilisé pour extraire le contexte d&amp;rsquo;un MenuItem MenuCommand.context L&amp;rsquo;objet qui est la cible de la commande de menu MenuCommand.userData Un entier pour transmettre des informations personnalisées à un élément de menu Inspecteur personnalisé # L&amp;rsquo;utilisation d&amp;rsquo;un inspecteur personnalisé vous permet de modifier la façon dont un script est dessiné dans l&amp;rsquo;inspecteur.</description>
    </item>
    
    <item>
      <title>Singletons dans l&#39;unité</title>
      <link>https://www.wikiod.com/fr/unity3d/singletons-dans-lunite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/singletons-dans-lunite/</guid>
      <description>Bien qu&amp;rsquo;il existe des écoles de pensée qui présentent des arguments convaincants expliquant pourquoi l&amp;rsquo;utilisation sans contrainte de Singletons est une mauvaise idée, par ex. [Singleton sur gameprogrammingpatterns.com][1], il peut arriver que vous souhaitiez conserver un GameObject dans Unity sur plusieurs scènes (par exemple, pour une musique de fond transparente) tout en vous assurant qu&amp;rsquo;il ne peut exister plus d&amp;rsquo;une instance ; un cas d&amp;rsquo;utilisation parfait pour un Singleton.
En ajoutant ce script à un GameObject, une fois qu&amp;rsquo;il a été instancié (par exemple en l&amp;rsquo;incluant n&amp;rsquo;importe où dans une scène), il restera actif dans toutes les scènes et une seule instance existera jamais.</description>
    </item>
    
    <item>
      <title>Coroutines</title>
      <link>https://www.wikiod.com/fr/unity3d/coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/coroutines/</guid>
      <description>Syntaxe # Coroutine publique StartCoroutine (routine IEnumerator); public Coroutine StartCoroutine(string methodName, object value = null); public void StopCoroutine(string methodName); public void StopCoroutine (routine IEnumerator); public void StopAllCoroutines(); Considérations relatives aux performances # Il est préférable d&amp;rsquo;utiliser les coroutines avec modération car la flexibilité a un coût de performance.
Les coroutines en grand nombre exigent plus du processeur que les méthodes de mise à jour standard. Il existe un problème dans certaines versions de Unity où les coroutines produisent des ordures à chaque cycle de mise à jour en raison du fait que Unity boxe la valeur de retour MoveNext.</description>
    </item>
    
    <item>
      <title>Optimisation</title>
      <link>https://www.wikiod.com/fr/unity3d/optimisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/optimisation/</guid>
      <description>Si possible, désactivez les scripts sur les objets lorsqu&amp;rsquo;ils ne sont pas nécessaires. Par exemple, si vous avez un script sur un objet ennemi qui recherche et tire sur le joueur, pensez à désactiver ce script lorsque l&amp;rsquo;ennemi est trop éloigné du joueur, par exemple. Puissance coroutine # Usage # Si vous avez une opération de longue durée qui s&amp;rsquo;appuie sur l&amp;rsquo;API Unity non thread-safe, utilisez [Coroutines][1] pour la diviser en plusieurs cadres et garder votre application réactive.</description>
    </item>
    
    <item>
      <title>La mise en réseau</title>
      <link>https://www.wikiod.com/fr/unity3d/la-mise-en-reseau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/la-mise-en-reseau/</guid>
      <description>Mode sans tête dans Unity # Si vous construisez un serveur à déployer sous Linux, les paramètres de construction ont une option &amp;ldquo;Mode sans tête&amp;rdquo;. Une application construite avec cette option n&amp;rsquo;affiche rien et ne lit pas les entrées de l&amp;rsquo;utilisateur, ce qui est généralement ce que nous voulons pour un serveur.
[![Mode sans tête dans les paramètres de construction][1]][1]
[1] : http://i.stack.imgur.com/iDxCm.png
Création d&amp;rsquo;un serveur, d&amp;rsquo;un client et envoi d&amp;rsquo;un message.</description>
    </item>
    
    <item>
      <title>Préfabriqués</title>
      <link>https://www.wikiod.com/fr/unity3d/prefabriques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/prefabriques/</guid>
      <description>Syntaxe # Objet statique public PrefabUtility.InstantiatePrefab (Object target); Public static Object AssetDatabase.LoadAssetAtPath(string assetPath, Type type); public static Object Object.Instantiate(Object original); Public static Object Resources.Load(string path); Introduction # [Prefabs] [1] sont un type d&amp;rsquo;actif qui permet le stockage d&amp;rsquo;un GameObject complet avec ses composants, ses propriétés, ses composants attachés et ses valeurs de propriété sérialisées. Il existe de nombreux scénarios où cela est utile, notamment :
Dupliquer des objets dans une scène Partage d&amp;rsquo;un objet commun sur plusieurs scènes Pouvoir modifier un préfabriqué une fois et appliquer les modifications sur plusieurs objets/scènes Création d&amp;rsquo;objets en double avec des modifications mineures, tout en ayant les éléments communs modifiables à partir d&amp;rsquo;un préfabriqué de base Instanciation de GameObjects lors de l&amp;rsquo;exécution Il y a une sorte de règle empirique dans Unity qui dit que &amp;ldquo;tout devrait être des préfabriqués&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Regroupement d&#39;objets</title>
      <link>https://www.wikiod.com/fr/unity3d/regroupement-dobjets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/regroupement-dobjets/</guid>
      <description>## Pool d&amp;rsquo;objets Parfois, lorsque vous créez un jeu, vous devez créer et détruire de nombreux objets du même type encore et encore. Vous pouvez simplement le faire en créant un préfabriqué et en l&amp;rsquo;instanciant/le détruisant chaque fois que vous en avez besoin, cependant, cela est inefficace et peut ralentir votre jeu.
Une façon de contourner ce problème est le regroupement d&amp;rsquo;objets. En gros, cela signifie que vous disposez d&amp;rsquo;un pool (avec ou sans limite de quantité) d&amp;rsquo;objets que vous allez réutiliser chaque fois que vous le pouvez pour éviter toute instanciation ou destruction inutile.</description>
    </item>
    
    <item>
      <title>API CullingGroup</title>
      <link>https://www.wikiod.com/fr/unity3d/api-cullinggroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unity3d/api-cullinggroup/</guid>
      <description>Étant donné que l&amp;rsquo;utilisation de CullingGroups n&amp;rsquo;est pas toujours très simple, il peut être utile d&amp;rsquo;encapsuler l&amp;rsquo;essentiel de la logique derrière une classe de gestionnaire.
Vous trouverez ci-dessous un schéma de fonctionnement d&amp;rsquo;un tel gestionnaire.
using UnityEngine; using System; public interface ICullingGroupManager { int ReserveSphere(); void ReleaseSphere(int sphereIndex); void SetPosition(int sphereIndex, Vector3 position); void SetRadius(int sphereIndex, float radius); void SetCullingEvent(int sphereIndex, Action&amp;lt;CullingGroupEvent&amp;gt; sphere); } L&amp;rsquo;essentiel est que vous réserviez une sphère d&amp;rsquo;abattage au gestionnaire qui renvoie l&amp;rsquo;index de la sphère réservée.</description>
    </item>
    
  </channel>
</rss>

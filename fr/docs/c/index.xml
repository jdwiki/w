<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel en langage C on </title>
    <link>https://www.wikiod.com/fr/docs/c/</link>
    <description>Recent content in Tutoriel en langage C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le langage C</title>
      <link>https://www.wikiod.com/fr/c/debuter-avec-le-langage-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/debuter-avec-le-langage-c/</guid>
      <description>Bonjour le monde # Pour créer un programme C simple qui affiche &amp;ldquo;Hello, World&amp;rdquo; à l&amp;rsquo;écran, utilisez un éditeur de texte pour créer un nouveau fichier (par exemple, &amp;ldquo;hello. c— l&#39;extension de fichier doit être.c`) contenant le code source suivant :
Bonjour c # #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;quot;Hello, World&amp;quot;); return 0; } Démo en direct sur Coliru
Regardons ce programme simple ligne par ligne # #include &amp;lt;stdio.h&amp;gt; Cette ligne indique au compilateur d&amp;rsquo;inclure le contenu du fichier d&amp;rsquo;en-tête de la bibliothèque standard &amp;ldquo;stdio.</description>
    </item>
    
    <item>
      <title>Pointeurs</title>
      <link>https://www.wikiod.com/fr/c/pointeurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/pointeurs/</guid>
      <description>Un pointeur est un type de variable qui peut stocker l&amp;rsquo;adresse d&amp;rsquo;un autre objet ou d&amp;rsquo;une fonction.
Syntaxe # &amp;lt;Type de données&amp;gt; *&amp;lt;Nom de la variable&amp;gt; ; int *ptrToInt ; annuler *ptrToVoid ; /* C89+ */ struct someStruct *ptrToStruct ; entier **ptrVersPtrVersInt ; int arr[longueur] ; int *ptrToFirstElem = arr; /* Pour &amp;lt;C99, &amp;rsquo;longueur&amp;rsquo; doit être une constante de temps de compilation, pour &amp;gt;=C11, il peut en être nécessaire. */ int *arrayOfPtrsToInt[longueur] ; /* Pour &amp;lt;C99, &amp;rsquo;longueur&amp;rsquo; doit être une constante de temps de compilation, pour &amp;gt;=C11, il peut en être nécessaire.</description>
    </item>
    
    <item>
      <title>Comportement indéfini</title>
      <link>https://www.wikiod.com/fr/c/comportement-indefini/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/comportement-indefini/</guid>
      <description>En C, certaines expressions donnent un comportement indéfini. Le standard choisit explicitement de ne pas définir comment un compilateur doit se comporter s&amp;rsquo;il rencontre une telle expression. Par conséquent, un compilateur est libre de faire ce qu&amp;rsquo;il juge bon et peut produire des résultats utiles, des résultats inattendus ou même planter.
Le code qui invoque UB peut fonctionner comme prévu sur un système spécifique avec un compilateur spécifique, mais ne fonctionnera probablement pas sur un autre système, ou avec un compilateur, une version de compilateur ou des paramètres de compilateur différents.</description>
    </item>
    
    <item>
      <title>Gestion de la mémoire</title>
      <link>https://www.wikiod.com/fr/c/gestion-de-la-memoire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/gestion-de-la-memoire/</guid>
      <description>Pour gérer la mémoire allouée dynamiquement, la bibliothèque C standard fournit les fonctions malloc(), calloc(), realloc() et free(). Dans C99 et versions ultérieures, il existe également aligned_alloc(). Certains systèmes fournissent également alloca().
Syntaxe # void *aligned_alloc(size_t alignement, size_t taille); /* Seulement depuis C11 */ void *calloc(size_t nelements, size_t size); void libre(void *ptr); void *malloc(taille_t taille); void *realloc(void *ptr, size_t size); void *alloca(size_t size); /* de alloca.h, non standard, non portable, dangereux.</description>
    </item>
    
    <item>
      <title>Pièges courants</title>
      <link>https://www.wikiod.com/fr/c/pieges-courants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/pieges-courants/</guid>
      <description>Cette section traite de certaines des erreurs courantes qu&amp;rsquo;un programmeur C doit connaître et qu&amp;rsquo;il doit éviter de commettre. Pour en savoir plus sur certains problèmes inattendus et leurs causes, veuillez consulter https://www.wikiod.com/fr/c/comportement-indefini
Mélanger des entiers signés et non signés dans les opérations arithmétiques # Ce n&amp;rsquo;est généralement pas une bonne idée de mélanger des entiers &amp;ldquo;signés&amp;rdquo; et &amp;ldquo;non signés&amp;rdquo; dans les opérations arithmétiques. Par exemple, quel sera le résultat de l&amp;rsquo;exemple suivant ?</description>
    </item>
    
    <item>
      <title>Cordes</title>
      <link>https://www.wikiod.com/fr/c/cordes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/cordes/</guid>
      <description>En C, une chaîne n&amp;rsquo;est pas un type intrinsèque. Une chaîne C est la convention pour avoir un tableau unidimensionnel de caractères qui se termine par un caractère nul, par un &#39;\0&#39;.
Cela signifie qu&amp;rsquo;une chaîne C avec un contenu de &amp;quot;abc&amp;quot; aura quatre caractères &#39;a&#39;, &#39;b&#39;, &#39;c&#39; et &#39;\0&#39;.
Voir l&amp;rsquo;exemple [introduction de base aux chaînes][1].
[1] : https://www.wikiod.com/fr/c/cordes#Introduction de base aux chaînes
Syntaxe # char str1[] = &amp;ldquo;Bonjour, tout le monde !</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/c/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/tableaux/</guid>
      <description>Les tableaux sont des types de données dérivés, représentant une collection ordonnée de valeurs (&amp;ldquo;éléments&amp;rdquo;) d&amp;rsquo;un autre type. La plupart des tableaux en C ont un nombre fixe d&amp;rsquo;éléments d&amp;rsquo;un type quelconque, et sa représentation stocke les éléments de manière contiguë dans la mémoire sans lacunes ni remplissage. C autorise les tableaux multidimensionnels dont les éléments sont d&amp;rsquo;autres tableaux, ainsi que les tableaux de pointeurs.
C prend en charge les tableaux alloués dynamiquement dont la taille est déterminée au moment de l&amp;rsquo;exécution.</description>
    </item>
    
    <item>
      <title>Les opérateurs</title>
      <link>https://www.wikiod.com/fr/c/les-operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/les-operateurs/</guid>
      <description>Un opérateur dans un langage de programmation est un symbole qui indique au compilateur ou à l&amp;rsquo;interpréteur d&amp;rsquo;effectuer une opération mathématique, relationnelle ou logique spécifique et de produire un résultat final.
C a de nombreux opérateurs puissants. De nombreux opérateurs C sont des opérateurs binaires, ce qui signifie qu&amp;rsquo;ils ont deux opérandes. Par exemple, dans a / b, / est un opérateur binaire qui accepte deux opérandes (a, b). Il existe des opérateurs unaires qui prennent un opérande (par exemple : ~, ++), et un seul opérateur ternaire ?</description>
    </item>
    
    <item>
      <title>Affirmation</title>
      <link>https://www.wikiod.com/fr/c/affirmation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/affirmation/</guid>
      <description>Une assertion est un prédicat selon lequel la condition présentée doit être vraie au moment où l&amp;rsquo;assertion est rencontrée par le logiciel. Les plus courantes sont les assertions simples, qui sont validées au moment de l&amp;rsquo;exécution. Cependant, les assertions statiques sont vérifiées au moment de la compilation.
Syntaxe # affirmer (expression) static_assert(expression, message) _Static_assert(expression, message) Paramètres # Paramètre Détails expression expression de type scalaire. message Littéral de chaîne à inclure dans le message de diagnostic.</description>
    </item>
    
    <item>
      <title>Préprocesseur et Macros</title>
      <link>https://www.wikiod.com/fr/c/preprocesseur-et-macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/c/preprocesseur-et-macros/</guid>
      <description>Toutes les commandes du préprocesseur commencent par le symbole dièse (dièse) #. Une macro C est juste une commande de préprocesseur définie à l&amp;rsquo;aide de la directive de préprocesseur #define. Au cours de l&amp;rsquo;étape de prétraitement, le préprocesseur C (une partie du compilateur C) remplace simplement le corps de la macro partout où son nom apparaît.
Lorsqu&amp;rsquo;un compilateur rencontre une macro dans le code, il effectue un simple remplacement de chaîne, aucune opération supplémentaire n&amp;rsquo;est effectuée.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aller au tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/go/</link>
    <description>Recent content in Aller au tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Go</title>
      <link>https://www.wikiod.com/fr/go/premiers-pas-avec-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/premiers-pas-avec-go/</guid>
      <description>Bonjour le monde! # Placez le code suivant dans un nom de fichier &amp;ldquo;hello.go&amp;rdquo; :
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) } Terrain de jeu
Lorsque Go est [installé correctement] [1], ce programme peut être compilé et exécuté comme ceci :
go run hello.go Production: # Hello, 世界 Une fois que vous êtes satisfait du code, il peut être compilé en un exécutable en exécutant :
go build hello.</description>
    </item>
    
    <item>
      <title>Compilation croisée</title>
      <link>https://www.wikiod.com/fr/go/compilation-croisee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/compilation-croisee/</guid>
      <description>Le compilateur Go peut produire des binaires pour de nombreuses plates-formes, c&amp;rsquo;est-à-dire des processeurs et des systèmes. Contrairement à la plupart des autres compilateurs, il n&amp;rsquo;y a pas d&amp;rsquo;exigence spécifique pour la compilation croisée, il est aussi facile à utiliser qu&amp;rsquo;une compilation normale.
Syntaxe # GOOS=linux GOARCH=amd64 go build Combinaisons cibles de système d&amp;rsquo;exploitation et d&amp;rsquo;architecture prises en charge (source)
$GOOS $GOARCH androïde bras darwin 386 darwin amd64 darwin bras darwin arm64 libellule amd64 freebsd 386 freebsd amd64 freebsd bras Linux 386 Linux amd64 Linux bras Linux arm64 Linux ppc64 Linux ppc64le Linux mips64 Linux mips64le netbsd 386 netbsd amd64 netbsd bras openbsd 386 openbsd amd64 openbsd bras plan9 386 plan9 amd64 solaire amd64 fenêtres 386 fenêtres amd64 Compilation croisée simple avec go build # Depuis le répertoire de votre projet, exécutez la commande go build et spécifiez le système d&amp;rsquo;exploitation et l&amp;rsquo;architecture cible avec les variables d&amp;rsquo;environnement GOOS et GOARCH :</description>
    </item>
    
    <item>
      <title>Plans</title>
      <link>https://www.wikiod.com/fr/go/plans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/plans/</guid>
      <description>Les cartes sont des types de données utilisés pour stocker des paires clé-valeur non ordonnées, de sorte que la recherche de la valeur associée à une clé donnée est très efficace. Les clés sont uniques. La structure de données sous-jacente s&amp;rsquo;agrandit au besoin pour accueillir de nouveaux éléments, de sorte que le programmeur n&amp;rsquo;a pas à se soucier de la gestion de la mémoire. Ils sont similaires à ce que d&amp;rsquo;autres langages appellent des tables de hachage, des dictionnaires ou des tableaux associatifs.</description>
    </item>
    
    <item>
      <title>Client HTTP</title>
      <link>https://www.wikiod.com/fr/go/client-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/client-http/</guid>
      <description>Syntaxe # resp, err := http.Get(url) // Fait une requête HTTP GET avec le client HTTP par défaut. Une erreur non nulle est renvoyée si la requête échoue. resp, err := http.Post(url, bodyType, body) // Fait une requête HTTP POST avec le client HTTP par défaut. Une erreur non nulle est renvoyée si la requête échoue. resp, err := http.PostForm(url, values) // Fait une requête POST de formulaire HTTP avec le client HTTP par défaut.</description>
    </item>
    
    <item>
      <title>Concurrence</title>
      <link>https://www.wikiod.com/fr/go/concurrence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/concurrence/</guid>
      <description>En Go, la concurrence est obtenue grâce à l&amp;rsquo;utilisation de goroutines, et la communication entre les goroutines se fait généralement avec des canaux. Cependant, d&amp;rsquo;autres moyens de synchronisation, tels que les mutex et les groupes d&amp;rsquo;attente, sont disponibles et doivent être utilisés chaque fois qu&amp;rsquo;ils sont plus pratiques que les canaux.
Syntaxe # go doWork() // lance la fonction doWork en goroutine ch := make(chan int) // déclare un nouveau canal de type int ch &amp;lt;- 1 // envoi sur un canal value = &amp;lt;-ch // réception d&amp;rsquo;un canal Les goroutines en Go sont similaires aux threads dans d&amp;rsquo;autres langues en termes d&amp;rsquo;utilisation.</description>
    </item>
    
    <item>
      <title>Serveur HTTP</title>
      <link>https://www.wikiod.com/fr/go/serveur-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/serveur-http/</guid>
      <description>http.ServeMux fournit un multiplexeur qui appelle des gestionnaires pour les requêtes HTTP.
Les alternatives au multiplexeur de bibliothèque standard incluent :
Gorille Mux
Bonjour le monde # La façon typique de commencer à écrire des serveurs Web dans golang est d&amp;rsquo;utiliser le module de bibliothèque standard net/http.
Il y a aussi un tutoriel pour cela ici.
Le code suivant l&amp;rsquo;utilise également. Voici l&amp;rsquo;implémentation de serveur HTTP la plus simple possible. Il répond &amp;quot;Hello World&amp;quot; à toute requête HTTP.</description>
    </item>
    
    <item>
      <title>Structures</title>
      <link>https://www.wikiod.com/fr/go/structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/structures/</guid>
      <description>Les structures sont des ensembles de diverses variables regroupées. La structure elle-même n&amp;rsquo;est qu&amp;rsquo;un package contenant des variables et les rendant facilement accessibles.
Contrairement à C, les structures de Go peuvent avoir des méthodes qui leur sont attachées. Il leur permet également d&amp;rsquo;implémenter des interfaces. Cela rend les structures de Go similaires aux objets, mais il leur manque (probablement intentionnellement) certaines fonctionnalités majeures connues dans les langages orientés objet comme l&amp;rsquo;héritage.</description>
    </item>
    
    <item>
      <title>Iota</title>
      <link>https://www.wikiod.com/fr/go/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/iota/</guid>
      <description>Iota fournit un moyen de déclarer des constantes numériques à partir d&amp;rsquo;une valeur de départ qui croît de manière monotone. Iota peut être utilisé pour déclarer des masques de bits qui sont souvent utilisés dans la programmation système et réseau et d&amp;rsquo;autres listes de constantes avec des valeurs associées.
L&amp;rsquo;identifiant iota est utilisé pour attribuer des valeurs à des listes de constantes. Lorsque iota est utilisé dans une liste, il commence par une valeur de zéro, et incrémente de un pour chaque valeur dans la liste des constantes et est réinitialisé sur chaque mot-clé const.</description>
    </item>
    
    <item>
      <title>Vente</title>
      <link>https://www.wikiod.com/fr/go/vente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/vente/</guid>
      <description>Le Vendoring est une méthode qui garantit que tous les packages tiers que vous utilisez dans votre projet Go sont cohérents pour tous ceux qui développent pour votre application.
Lorsque votre package Go importe un autre package, le compilateur vérifie normalement $GOPATH/src/ pour le chemin du projet importé. Cependant, si votre paquet contient un dossier nommé vendor, le compilateur vérifiera dans ce dossier d&amp;rsquo;abord. Cela signifie que vous pouvez importer des packages tiers dans votre propre référentiel de code, sans avoir à modifier leur code.</description>
    </item>
    
    <item>
      <title>La gestion des erreurs</title>
      <link>https://www.wikiod.com/fr/go/la-gestion-des-erreurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/go/la-gestion-des-erreurs/</guid>
      <description>Dans Go, les situations inattendues sont gérées à l&amp;rsquo;aide d&amp;rsquo;erreurs, et non d&amp;rsquo;exceptions. Cette approche ressemble plus à celle de C, utilisant errno, qu&amp;rsquo;à celle de Java ou d&amp;rsquo;autres langages orientés objet, avec leurs blocs try/catch. Cependant, une erreur n&amp;rsquo;est pas un entier mais une interface.
Une fonction susceptible d&amp;rsquo;échouer renvoie généralement une erreur comme dernière valeur de retour. Si cette erreur n&amp;rsquo;est pas nil, quelque chose s&amp;rsquo;est mal passé et l&amp;rsquo;appelant de la fonction doit agir en conséquence.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel amazon-web-services on </title>
    <link>https://www.wikiod.com/fr/docs/amazon-web-services/</link>
    <description>Recent content in Tutoriel amazon-web-services on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/amazon-web-services/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec amazon-web-services</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/premiers-pas-avec-amazon-web-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/premiers-pas-avec-amazon-web-services/</guid>
      <description>Avant qu&amp;rsquo;il ne soit trop tard # Trucs et astuces pour éviter les situations désagréables
Instances EC2 et EBS
Définir les rôles IAM. Contrairement aux balises, le rôle IAM est défini une fois pour toutes sur l&amp;rsquo;instanciation EC2 ([même après 4 ans][1]) ! Essayez d&amp;rsquo;identifier et de catégoriser au préalable vos instances afin de pouvoir leur attribuer des rôles IAM appropriés. Les rôles IAM sont un bon moyen d&amp;rsquo;identifier vos machines, ils permettront à Amazon de stocker automatiquement les informations d&amp;rsquo;identification du profil d&amp;rsquo;instance en toute sécurité sur vos machines et vous pourrez facilement accorder des privilèges supplémentaires.</description>
    </item>
    
    <item>
      <title>Déployer une image de conteneur Docker à l&#39;aide d&#39;ECS</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/deployer-une-image-de-conteneur-docker-a-laide-decs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/deployer-une-image-de-conteneur-docker-a-laide-decs/</guid>
      <description>Avant de pouvoir ajouter des instances ECS à un cluster, vous devez d&amp;rsquo;abord accéder à la console de gestion EC2 et créer des instances « ecs-optimized » avec un rôle IAM auquel la stratégie « AmazonEC2ContainerServiceforEC2Role » est attachée.
Accédez à votre [Tableau de bord EC2][1] et cliquez sur le bouton « Lancer l&amp;rsquo;instance ».
Sous &amp;ldquo;Community AMIs&amp;rdquo;, recherchez &amp;ldquo;ecs-optimized&amp;rdquo; et sélectionnez celle qui correspond le mieux aux besoins de votre projet.</description>
    </item>
    
    <item>
      <title>Amazon Cognito</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/amazoncognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/amazoncognito/</guid>
      <description>Gestion de l&amp;rsquo;identité des utilisateurs à l&amp;rsquo;aide d&amp;rsquo;Amazon Cognito # var app = {}; app.signUp = function(){ app.userName = $(&#39;#userName&#39;).val(); app.password = $(&#39;#password&#39;).val(); app.email = $(&#39;#form-email&#39;).val(); app.phoneNumber = $(&#39;#form-phone&#39;).val(); app.emailRegex = /^(([^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+)*)|(\&amp;quot;.+\&amp;quot;))@(([^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]+\.)+[^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]{2,})$/i; /* Put the User input validation logic here. */ if (!app.userName) { alert(&amp;quot;Please provide a user name&amp;quot;); return; } if (!app.password) { alert(&amp;quot;Please provide a password&amp;quot;); return; } if (!app.email) { alert(&amp;quot;Please provide an Email address&amp;quot;); return; } if(!</description>
    </item>
    
    <item>
      <title>AWS CloudFormation</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/aws-cloudformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/aws-cloudformation/</guid>
      <description>Exemple de script CloudFormation pour créer une instance EC2 avec un groupe de sécurité à associer. # Cet exemple créera une instance EC2 de type t2.micro dans la région N.Virginia exécutant Amazon Linux. Lors de l&amp;rsquo;exécution, il vous sera demandé de sélectionner la KeyPair à utiliser et une I.P. CIDR à partir duquel vous pouvez vous connecter en SSH à l&amp;rsquo;instance, utilisez la valeur par défaut pour ouvrir SSH à Internet &amp;lt;pré&amp;gt; { &amp;ldquo;AWSTemplateFormatVersion&amp;rdquo; : &amp;ldquo;2010-09-09&amp;rdquo;,</description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/aws-lambda/</guid>
      <description>AWS Lambda est un service qui vous permet d&amp;rsquo;exécuter du code back-end sans avoir besoin de provisionner ou de gérer des serveurs. AWS Lambda s&amp;rsquo;occupe de la mise à l&amp;rsquo;échelle et de la haute disponibilité. Le coût dépend directement de la fréquence et de la durée d&amp;rsquo;exécution de votre code.
Vous trouverez des exemples de création et de déploiement de fonctions AWS Lambda dans différentes langues.
Le code AWS Lambda doit être écrit sans état.</description>
    </item>
    
    <item>
      <title>Amazon DynamoDB</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/amazon-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/amazon-dynamodb/</guid>
      <description>Opération Crud de base de DynamoDB à l&amp;rsquo;aide de NodeJS # &amp;lt;pré&amp;gt; laissez doc = require(&amp;lsquo;dynamodb-doc&amp;rsquo;); let dynamo = new doc.DynamoDB(); var tblName = &amp;ldquo;MaTable&amp;rdquo; ;
exports.handler = (événement, contexte, rappel) =&amp;gt; { readOperation(context); }
function readOperation(cnxt) { var params = { TableName: tblName, Key: { &amp;ldquo;id&amp;rdquo;: &amp;ldquo;2013&amp;rdquo;, &amp;ldquo;topic&amp;rdquo;: &amp;ldquo;Turn It Down, Or Else!&amp;rdquo; }, AttributesToGet: [ &amp;ldquo;id&amp;rdquo;, &amp;ldquo;client_name&amp;rdquo;, &amp;ldquo;info&amp;rdquo; ], ConsistentRead: false }; dynamo.getItem(params, function(err, data) { if (err) console.</description>
    </item>
    
    <item>
      <title>Haricot magique élastique</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/haricot-magique-elastique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/haricot-magique-elastique/</guid>
      <description>Limites actuelles (au 2016-10-03)
Les balises d&amp;rsquo;environnement ne peuvent pas être modifiées une fois que l&amp;rsquo;environnement est créé, alors choisissez judicieusement. La mise à l&amp;rsquo;échelle automatique dans Elastic Beanstalk est limitée à Simple et Scheduled, donc si vous souhaitez utiliser Step-Scaling, reconsidérez si Elastic Beanstalk est un bon choix. Automatisation avec Jenkins
Il existe un excellent [AWSEB Deployment Plugin][1] pour Jenkins qui sera plug-n-play pour le déploiement sur Elastic Beanstalk (les déploiements bleu/vert avec arrêt automatique de l&amp;rsquo;inactivité ne sont qu&amp;rsquo;à une case à cocher).</description>
    </item>
    
    <item>
      <title>Classe racine</title>
      <link>https://www.wikiod.com/fr/amazon-web-services/classe-racine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/amazon-web-services/classe-racine/</guid>
      <description>La classe racine de l&amp;rsquo;api Amazon est la suivante. # public class AmazonRootobject { public Itemsearchresponse ItemSearchResponse { get; set; } } public class Itemsearchresponse { public string xmlns { get; set; } public Operationrequest OperationRequest { get; set; } public Items Items { get; set; } } public class Operationrequest { public Httpheaders HTTPHeaders { get; set; } public string RequestId { get; set; } public Arguments Arguments { get; set; } public string RequestProcessingTime { get; set; } } public class Httpheaders { public Header Header { get; set; } } public class Header { public string Name { get; set; } public string Value { get; set; } } public class Arguments { public Argument[] Argument { get; set; } } public class Argument { public string Name { get; set; } public object Value { get; set; } } public class Items { public Request Request { get; set; } public string TotalResults { get; set; } public string TotalPages { get; set; } public string MoreSearchResultsUrl { get; set; } public Item[] Item { get; set; } } public class Request { public string IsValid { get; set; } public Itemsearchrequest ItemSearchRequest { get; set; } } public class Itemsearchrequest { public string Keywords { get; set; } public string[] ResponseGroup { get; set; } public string SearchIndex { get; set; } public string Sort { get; set; } } public class Item { public string ASIN { get; set; } public string ParentASIN { get; set; } public string DetailPageURL { get; set; } public Itemlinks ItemLinks { get; set; } public Smallimage SmallImage { get; set; } public Mediumimage MediumImage { get; set; } public Largeimage LargeImage { get; set; } public Imagesets ImageSets { get; set; } public Itemattributes ItemAttributes { get; set; } public OfferSummary OfferSummary { get; set; } public Offers Offers { get; set; } public Variationsummary VariationSummary { get; set; } } public class Variationsummary { public Highestprice HighestPrice { get; set; } public Lowestprice LowestPrice { get; set; } public Highestsaleprice HighestSalePrice { get; set; } public Lowestsaleprice LowestSalePrice { get; set; } } public class Highestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Highestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Itemlinks { public Itemlink[] ItemLink { get; set; } } public class Itemlink { public string Description { get; set; } public string URL { get; set; } } public class Smallimage { public string URL { get; set; } public Height Height { get; set; } public Width Width { get; set; } } public class Height { public string Units { get; set; } public string text { get; set; } } public class Width { public string Units { get; set; } public string text { get; set; } } public class Mediumimage { public string URL { get; set; } public Height1 Height { get; set; } public Width1 Width { get; set; } } public class Height1 { public string Units { get; set; } public string text { get; set; } } public class Width1 { public string Units { get; set; } public string text { get; set; } } public class Largeimage { public string URL { get; set; } public Height2 Height { get; set; } public Width2 Width { get; set; } } public class Height2 { public string Units { get; set; } public string text { get; set; } } public class Width2 { public string Units { get; set; } public string text { get; set; } } public class Imagesets { public object ImageSet { get; set; } } public class Itemattributes { public string Binding { get; set; } public string Brand { get; set; } public string Color { get; set; } public string Model { get; set; } public string Manufacturer { get; set; } public string ProductGroup { get; set; } public string Title { get; set; } public ListPrice ListPrice { get; set; } } public class ListPrice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class OfferSummary { public Lowestnewprice LowestNewPrice { get; set; } public Lowestusedprice LowestUsedPrice { get; set; } public string TotalNew { get; set; } public string TotalUsed { get; set; } public string TotalCollectible { get; set; } public string TotalRefurbished { get; set; } public Lowestrefurbishedprice LowestRefurbishedPrice { get; set; } } public class Lowestnewprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestusedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestrefurbishedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Offers { public string TotalOffers { get; set; } public string TotalOfferPages { get; set; } public string MoreOffersUrl { get; set; } public Offer Offer { get; set; } } public class Offer { public Merchant Merchant { get; set; } public Offerattributes OfferAttributes { get; set; } public Offerlisting OfferListing { get; set; } } public class Merchant { public string Name { get; set; } } public class Offerattributes { public string Condition { get; set; } } public class Offerlisting { public string OfferListingId { get; set; } public string PricePerUnit { get; set; } public Price Price { get; set; } public string Availability { get; set; } public Availabilityattributes AvailabilityAttributes { get; set; } public string IsEligibleForSuperSaverShipping { get; set; } public string IsEligibleForPrime { get; set; } public Saleprice SalePrice { get; set; } public Amountsaved AmountSaved { get; set; } public string PercentageSaved { get; set; } } public class Price { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Availabilityattributes { public string AvailabilityType { get; set; } public string MinimumHours { get; set; } public string MaximumHours { get; set; } } public class Saleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Amountsaved { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } Classe affaire # using System; using System.</description>
    </item>
    
  </channel>
</rss>

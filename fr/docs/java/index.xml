<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Java on </title>
    <link>https://www.wikiod.com/fr/docs/java/</link>
    <description>Recent content in Tutoriel du langage Java on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le langage Java</title>
      <link>https://www.wikiod.com/fr/java/debuter-avec-le-langage-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/debuter-avec-le-langage-java/</guid>
      <description>Création de votre premier programme Java # Créez un nouveau fichier dans votre [éditeur de texte][1] ou [IDE][2] nommé HelloWorld.java. Collez ensuite ce bloc de code dans le fichier et enregistrez :
public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;quot;Hello, World!&amp;quot;); } } Exécuter en direct sur Ideone
Remarque : Pour que Java reconnaisse cela comme une &amp;ldquo;classe publique&amp;rdquo; (et ne génère pas d&amp;rsquo;[erreur de compilation][3]), le nom de fichier doit être le même que le nom de la classe (&amp;lsquo;HelloWorld&amp;rsquo; dans ce exemple) avec une extension .</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/java/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/tableaux/</guid>
      <description>Les tableaux permettent le stockage et la récupération d&amp;rsquo;une quantité arbitraire de valeurs. Ils sont analogues aux vecteurs en mathématiques. Les tableaux de tableaux sont analogues aux matrices et agissent comme des tableaux multidimensionnels. Les tableaux peuvent stocker n&amp;rsquo;importe quelle donnée de n&amp;rsquo;importe quel type : des primitives telles que &amp;ldquo;int&amp;rdquo; ou des types de référence tels que &amp;ldquo;Object&amp;rdquo;.
Syntaxe # ArrayType[] myArray; // Déclaration des tableaux ArrayType myArray[]; // Une autre syntaxe valide (moins couramment utilisée et déconseillée) ArrayType[][][] myArray; // Déclaration de tableaux irréguliers multidimensionnels (répéter []s) ArrayType myVar = myArray[index]; // Accès (lecture) à l&amp;rsquo;élément index myArray[index] = value; // Affecte une valeur à la position index du tableau ArrayType[] myArray = new ArrayType[arrayLength]; // Syntaxe d&amp;rsquo;initialisation du tableau int[] ints = {1, 2, 3}; // Syntaxe d&amp;rsquo;initialisation du tableau avec les valeurs fournies, la longueur est déduite du nombre de valeurs fournies : {[value1[, value2]*]} new int[]{4, -5, 6} // Peut être utilisé comme argument, sans variable locale int[] ints = nouveau int[3] ; // identique à {0, 0, 0} int[][] ints = {{1, 2}, {3}, null}; // Initialisation d&amp;rsquo;un tableau multidimensionnel.</description>
    </item>
    
    <item>
      <title>Ruisseaux</title>
      <link>https://www.wikiod.com/fr/java/ruisseaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/ruisseaux/</guid>
      <description>Un Stream représente une séquence d&amp;rsquo;éléments et prend en charge différents types d&amp;rsquo;opérations pour effectuer des calculs sur ces éléments. Avec Java 8, l&amp;rsquo;interface Collection a deux méthodes pour générer un Stream : stream() et parallelStream(). Les opérations Stream sont soit intermédiaires, soit terminales. Les opérations intermédiaires renvoient un Stream afin que plusieurs opérations intermédiaires puissent être enchaînées avant que le Stream ne soit fermé. Les opérations de terminal sont soit nulles, soit renvoient un résultat non-flux.</description>
    </item>
    
    <item>
      <title>Expressions lambda</title>
      <link>https://www.wikiod.com/fr/java/expressions-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/expressions-lambda/</guid>
      <description>Les expressions lambda fournissent un moyen clair et concis d&amp;rsquo;implémenter une interface à méthode unique à l&amp;rsquo;aide d&amp;rsquo;une expression. Ils vous permettent de réduire la quantité de code que vous devez créer et maintenir. Bien que similaires aux classes anonymes, elles n&amp;rsquo;ont pas d&amp;rsquo;informations de type par elles-mêmes. L&amp;rsquo;inférence de type doit avoir lieu.
Les références de méthode implémentent des interfaces fonctionnelles en utilisant des méthodes existantes plutôt que des expressions.</description>
    </item>
    
    <item>
      <title>Les pièges courants de Java</title>
      <link>https://www.wikiod.com/fr/java/les-pieges-courants-de-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/les-pieges-courants-de-java/</guid>
      <description>Cette rubrique décrit certaines des erreurs courantes commises par les débutants en Java.
Cela inclut toutes les erreurs courantes dans l&amp;rsquo;utilisation du langage Java ou la compréhension de l&amp;rsquo;environnement d&amp;rsquo;exécution.
Les erreurs associées à des API spécifiques peuvent être décrites dans des rubriques spécifiques à ces API. Les chaînes sont un cas particulier ; ils sont couverts dans la spécification du langage Java. Des détails autres que les erreurs courantes peuvent être décrits dans cette rubrique sur les chaînes.</description>
    </item>
    
    <item>
      <title>Cordes</title>
      <link>https://www.wikiod.com/fr/java/cordes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/cordes/</guid>
      <description>Les chaînes (java.lang.String) sont des morceaux de texte stockés dans votre programme. Les chaînes ne sont ** pas ** un [type de données primitif en Java] [1], cependant, elles sont très courantes dans les programmes Java.
En Java, les chaînes sont immuables, ce qui signifie qu&amp;rsquo;elles ne peuvent pas être modifiées. (Cliquez [ici] [2] pour une explication plus approfondie de l&amp;rsquo;immuabilité.)
[1] : http://stackoverflow.com/questions/10430582/primitive-data-types-in-java [2] : http://stackoverflow.com/questions/279507/what-is-meant-by-immutable
Comme les chaînes Java sont immuables, toutes les méthodes qui manipulent une String renverront un nouvel objet String.</description>
    </item>
    
    <item>
      <title>Génériques</title>
      <link>https://www.wikiod.com/fr/java/generiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/generiques/</guid>
      <description>Les [génériques] [1] sont une fonctionnalité de programmation générique qui étend le système de types de Java pour permettre à un type ou à une méthode de fonctionner sur des objets de différents types tout en assurant la sécurité des types au moment de la compilation. En particulier, le framework de collections Java prend en charge les génériques pour spécifier le type d&amp;rsquo;objets stockés dans une instance de collection.
[1] : https://en.</description>
    </item>
    
    <item>
      <title>Énumérations</title>
      <link>https://www.wikiod.com/fr/java/enumerations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/enumerations/</guid>
      <description>Les énumérations Java (déclarées à l&amp;rsquo;aide du mot clé enum) sont une syntaxe abrégée pour des quantités importantes de constantes d&amp;rsquo;une seule classe.
Syntaxe # [public/protected/private] enum Enum_name { // Déclare une nouvelle énumération. ENUM_CONSTANT_1[, ENUM_CONSTANT_2&amp;hellip;] ; // Déclare les constantes enum. Cela doit être la première ligne à l&amp;rsquo;intérieur de l&amp;rsquo;énumération et doit être séparé par des virgules, avec un point-virgule à la fin. ENUM_CONSTANT_1(param)[, ENUM_CONSTANT_2(param)&amp;hellip;] ; // Déclare des constantes enum avec des paramètres.</description>
    </item>
    
    <item>
      <title>Exceptions et gestion des exceptions</title>
      <link>https://www.wikiod.com/fr/java/exceptions-et-gestion-des-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/exceptions-et-gestion-des-exceptions/</guid>
      <description>Les objets de type Throwable et ses sous-types peuvent être envoyés vers le haut de la pile avec le mot-clé throw et interceptés avec des instructions try…catch.
Syntaxe # void someMethod() lance SomeException { } //déclaration de méthode, force la méthode appelants à intercepter si SomeException est un type d&amp;rsquo;exception vérifié
essayer {
someMethod(); //code that might throw an exception }
catch (SomeException e) {
System.out.println(&amp;quot;SomeException was thrown!&amp;quot;); //code that will run if certain exception (SomeException) is thrown }</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/fr/java/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java/collections/</guid>
      <description>Le framework de collections dans java.util fournit un certain nombre de classes génériques pour des ensembles de données avec des fonctionnalités qui ne peuvent pas être fournies par des tableaux normaux.
Le framework de collections contient des interfaces pour Collection&amp;lt;O&amp;gt;, avec les sous-interfaces principales List&amp;lt;O&amp;gt; et Set&amp;lt;O&amp;gt;, et la collection de mappage Map&amp;lt;K,V&amp;gt;. Les collections sont l&amp;rsquo;interface racine et sont implémentées par de nombreux autres frameworks de collecte.
Les collections sont des objets qui peuvent stocker des collections d&amp;rsquo;autres objets à l&amp;rsquo;intérieur d&amp;rsquo;eux.</description>
    </item>
    
  </channel>
</rss>

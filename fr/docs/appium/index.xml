<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel appium on </title>
    <link>https://www.wikiod.com/fr/docs/appium/</link>
    <description>Recent content in Tutoriel appium on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/appium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec appium</title>
      <link>https://www.wikiod.com/fr/appium/demarrer-avec-appium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/appium/demarrer-avec-appium/</guid>
      <description>Installation ou configuration # Pré-requis # Vérifiez la configuration requise pour chaque type d&amp;rsquo;appareil que vous souhaitez automatiser et assurez-vous qu&amp;rsquo;ils sont installés avant d&amp;rsquo;essayer d&amp;rsquo;utiliser Appium !
Exigences iOS
Mac OS X 10.10 ou supérieur, 10.11.1 recommandé XCode &amp;gt;= 6.0, 7.1.1 recommandé Outils de développement Apple (SDK du simulateur iPhone, outils de ligne de commande) [Assurez-vous de lire la documentation sur la configuration pour les tests iOS !] [1] Exigences Android</description>
    </item>
    
    <item>
      <title>Client Java</title>
      <link>https://www.wikiod.com/fr/appium/client-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/appium/client-java/</guid>
      <description>[API Client Java][1]
[Code source du client Java][2]
[1] : http://appium.github.io/java-client/ [2] : https://github.com/appium/java-client
Automatisation de l&amp;rsquo;Android Play Store (appareil réel) # Structure du fichier :
pom.xml src/test/java/PlayStoreAutomation.java Commande de lancement :
test mvn -Dtest=PlayStoreAutomation
PlayStoreAutomation.java # import org.junit.AfterClass; import org.junit.BeforeClass; import org.junit.Test; import io.appium.java_client.android.AndroidDriver; import io.appium.java_client.android.AndroidKeyCode; import io.appium.java_client.MobileElement; import org.openqa.selenium.remote.DesiredCapabilities; import org.openqa.selenium.By; import java.util.concurrent.TimeUnit; import java.net.URL; public class PlayStoreAutomation { public static AndroidDriver&amp;lt;MobileElement&amp;gt; driver; @BeforeClass public static void setUp() throws Exception { DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.</description>
    </item>
    
    <item>
      <title>Tests parallèles dans Appium</title>
      <link>https://www.wikiod.com/fr/appium/tests-paralleles-dans-appium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/appium/tests-paralleles-dans-appium/</guid>
      <description>Exécution parallèle dans appium en utilisant le concept GRID de sélénium. Veuillez trouver le processus étape par étape.
Processus étape par étape # Tests parallèles avec Appium à l&amp;rsquo;aide de GRID : Je vais décrire la manière qui a fonctionné pour moi. Créer une grille de sélénium avec Appium
Configurer la grille de sélénium Téléchargez le fichier jar du serveur autonome Selenium sur le système de fichiers local Ouvrez votre terminal et accédez au répertoire dans lequel vous avez placé le fichier jar et exécutez la commande suivante :</description>
    </item>
    
  </channel>
</rss>

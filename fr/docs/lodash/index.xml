<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel lodash on </title>
    <link>https://www.wikiod.com/fr/docs/lodash/</link>
    <description>Recent content in Tutoriel lodash on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/lodash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec lodash</title>
      <link>https://www.wikiod.com/fr/lodash/demarrer-avec-lodash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lodash/demarrer-avec-lodash/</guid>
      <description>Installer # Lodash fonctionne aussi bien sur les serveurs (comme node.js) que sur les navigateurs.
node.js avec npm # Téléchargez avec npm depuis la CLI :
npm install lodash Ensuite, dans vos scripts de nœud :
var _ = require(&amp;quot;lodash&amp;quot;); // use lodash in your program... Téléchargez votre propre copie pour le côté client sur le site Web (c&amp;rsquo;est-à-dire dans le navigateur) # [Téléchargez lodash][1] ou utilisez un gestionnaire de paquets comme npm, jspm ou bower.</description>
    </item>
    
    <item>
      <title>Chaînage</title>
      <link>https://www.wikiod.com/fr/lodash/chainage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lodash/chainage/</guid>
      <description>Le chaînage implicite avec _(arr1) et le chaînage explicite avec _.chain(arr1) fonctionnent de manière similaire. Les exemples ci-dessous montrent en quoi ils diffèrent légèrement.
Chaînage explicite avec _.chain(...) # var arr1 = [10, 15, 20, 25, 30, 15, 25, 35]; var sumOfUniqueValues = _.chain(arr1) .uniq() .sum() // sum returns a single value .value(); // which must be unwrapped manually with explicit chaining // sumOfUniqueValues is now 135 Chaînage implicite avec _(.</description>
    </item>
    
    <item>
      <title>Travailler avec des listes et des tableaux</title>
      <link>https://www.wikiod.com/fr/lodash/travailler-avec-des-listes-et-des-tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lodash/travailler-avec-des-listes-et-des-tableaux/</guid>
      <description>Syntaxe # _.map(collection, Fonction) =&amp;gt; nouvelleCollection _.filter(collection, Prédicat) =&amp;gt; nouvelleCollection _.some(collection, Predicate) =&amp;gt; vrai ou faux _.reduce(collection, BiFunction, seed) =&amp;gt; valeur cumulée Paramètres # Paramètre Signification Collecte Un groupe itérable d&amp;rsquo;éléments. Cela peut être un tableau ou un objet. Fonction Une fonction qui prend 1 entrée et renvoie une sortie. BiFonction Une fonction qui prend 2 entrées et renvoie une sortie. Prédicat Une fonction qui prend 1 entrée et renvoie une valeur booléenne.</description>
    </item>
    
    <item>
      <title>Travailler avec des objets</title>
      <link>https://www.wikiod.com/fr/lodash/travailler-avec-des-objets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lodash/travailler-avec-des-objets/</guid>
      <description>.a # Détermine si un objet a (ou contient) une clé. Si la clé à rechercher est exprimée sous la forme d&amp;rsquo;un chemin (avec une notation par points), elle traversera les structures d&amp;rsquo;objets imbriquées pour déterminer si la clé existe.
var obj = { a: 2, b: 3, c: { dd:40, ee:{ fff:500 } } }; var res1 = _.has(obj, &amp;quot;a&amp;quot;); // true var res2 = _.has(obj, &amp;quot;a.b&amp;quot;); // false var res3 = _.</description>
    </item>
    
    <item>
      <title>Utilitaires</title>
      <link>https://www.wikiod.com/fr/lodash/utilitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lodash/utilitaires/</guid>
      <description>_.identité # Cette méthode ne renvoie que le premier argument.
var res1 = _.identity(10, 20); // res1 now is 10 var res2 = _.identity(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;); // res2 now is &amp;quot;hello&amp;quot; Que signifie _.identity dans la documentation lodash ? # Cette méthode est utilisée dans toute la documentation lodash au lieu de function(x){return x;} (ou équivalent ES6 x =&amp;gt; x).
Cela signifie généralement soit &amp;ldquo;aucune transformation&amp;rdquo;, soit lorsqu&amp;rsquo;il est utilisé comme prédicat : la véracité de la valeur.</description>
    </item>
    
  </channel>
</rss>

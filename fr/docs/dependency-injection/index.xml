<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel d&#39;injection de dépendance on </title>
    <link>https://www.wikiod.com/fr/docs/dependency-injection/</link>
    <description>Recent content in Tutoriel d&#39;injection de dépendance on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec l&#39;injection de dépendances</title>
      <link>https://www.wikiod.com/fr/dependency-injection/premiers-pas-avec-linjection-de-dependances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dependency-injection/premiers-pas-avec-linjection-de-dependances/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un exemple basique d&amp;rsquo;injection de dépendance ? # Voici une classe (Chien) créant sa propre dépendance (Nourriture) :
class Dog { public Dog() { var food = new Food(); this.eat(food); } } Voici la même classe injectée avec sa dépendance à l&amp;rsquo;aide de l&amp;rsquo;injection de constructeur :
class Dog { public Dog(Food food) { this.eat(food); } } </description>
    </item>
    
    <item>
      <title>.NET - Exemples d&#39;ID purs</title>
      <link>https://www.wikiod.com/fr/dependency-injection/net---exemples-did-purs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dependency-injection/net---exemples-did-purs/</guid>
      <description>Un exemple d&amp;rsquo;utilisation de l&amp;rsquo;injection de dépendances dans .net sans utiliser de conteneur. Basé sur des exemples de Mark Seemann http://blog.ploeh.dk/
API Web # public interface ISingleton : IDisposable { } public class TransientDependency { } public class Singleton : ISingleton { public void Dispose() { } } public class CompositionRoot : IDisposable, IHttpControllerActivator { private readonly ISingleton _singleton; // pass in any true singletons i.e. cross application instance singletons public CompositionRoot() { // intitialise any application instance singletons _singleton = new Singleton(); } public void Dispose() { _singleton.</description>
    </item>
    
    <item>
      <title>Injection de constructeur</title>
      <link>https://www.wikiod.com/fr/dependency-injection/injection-de-constructeur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dependency-injection/injection-de-constructeur/</guid>
      <description>Injection de constructeur # Les classes ont une variable d&amp;rsquo;instance (dépendances), sur laquelle elles appellent des méthodes.
Exemple tiré de http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html pour référence
public class Example { private DatabaseThingie myDatabase; public Example() { myDatabase = new DatabaseThingie(); } public void DoStuff() { ... myDatabase.GetData(); ... } } Cette classe a une dépendance appelée DatabaseThingie. Ici, dans cet exemple, la classe Example est responsable de la création de ses propres dépendances, violant ainsi le principe de responsabilité unique.</description>
    </item>
    
    <item>
      <title>Méthode d&#39;injection</title>
      <link>https://www.wikiod.com/fr/dependency-injection/methode-dinjection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dependency-injection/methode-dinjection/</guid>
      <description>Un exemple simple d&amp;rsquo;injection de méthode en c# # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new Dependency(); var bar = new ClassWithDependency(); bar.DoSomething(foo); //Inject dependency as method parameter Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class Dependency: IDependency { public void DoSomething() { Console.WriteLine(&amp;quot;Hello&amp;quot;); } } public class ClassWithDependency { public void DoSomething(IDependency dependency) { dependency.DoSomething(); } } } </description>
    </item>
    
    <item>
      <title>Injection de propriété</title>
      <link>https://www.wikiod.com/fr/dependency-injection/injection-de-propriete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dependency-injection/injection-de-propriete/</guid>
      <description>Un exemple très simple d&amp;rsquo;injection de propriété avec C# avec une valeur par défaut locale chargée paresseusement # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new ClassWithDependency(); foo.DoSomething(); var bar = new InjectedDependency(); foo.Dependency = bar; //Injecting the dependency via a property foo.DoSomething(); Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class DefaultDependency: IDependency { public void DoSomething() { Console.</description>
    </item>
    
  </channel>
</rss>

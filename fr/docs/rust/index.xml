<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur la rouille on </title>
    <link>https://www.wikiod.com/fr/docs/rust/</link>
    <description>Recent content in Tutoriel sur la rouille on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec Rust</title>
      <link>https://www.wikiod.com/fr/rust/debuter-avec-rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/debuter-avec-rust/</guid>
      <description>Utilisation avancée de println ! # println! (et son frère, [print!](https://doc.rust-lang. org/std/macro.print!.html)) fournit un mécanisme pratique pour produire et imprimer du texte contenant des données dynamiques, similaire à la famille de fonctions &amp;ldquo;printf&amp;rdquo; que l&amp;rsquo;on trouve dans de nombreux autres langages. Son premier argument est une chaîne de format, qui dicte comment les autres arguments doivent être affichés sous forme de texte. La chaîne de format peut contenir des espaces réservés (entre {}) pour spécifier qu&amp;rsquo;une substitution doit se produire :</description>
    </item>
    
    <item>
      <title>Serde</title>
      <link>https://www.wikiod.com/fr/rust/serde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/serde/</guid>
      <description>Serde est un cadre populaire de **sérialisation et de désérialisation pour Rust, utilisé pour convertir des données sérialisées (par exemple JSON et XML) en structures Rust et vice versa.
Serde prend en charge de nombreux formats, notamment : JSON, YAML, TOML, BSON, Pickle et XML.
Structure ↔ JSON # main.rs # extern crate serde; extern crate serde_json; // Import this crate to derive the Serialize and Deserialize traits. #[macro_use] extern crate serde_derive; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point { x: 1, y: 2 }; // Convert the Point to a packed JSON string.</description>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://www.wikiod.com/fr/rust/traits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/traits/</guid>
      <description>Les traits sont une façon de décrire un « contrat » qu&amp;rsquo;une « structure » ​​doit implémenter. Les traits définissent généralement les signatures de méthode, mais peuvent également fournir des implémentations basées sur d&amp;rsquo;autres méthodes du trait, à condition que les limites de trait le permettent.
Pour ceux qui sont familiers avec la programmation orientée objet, les traits peuvent être considérés comme des interfaces avec quelques différences subtiles.
Syntaxe # trait Trait { fn method(&amp;hellip;) -&amp;gt; ReturnType; &amp;hellip; }</description>
    </item>
    
    <item>
      <title>Boucles</title>
      <link>https://www.wikiod.com/fr/rust/boucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/boucles/</guid>
      <description>Syntaxe # loop { block } // boucle infinie
tant que condition { bloquer }
while let pattern = expr { block }
for pattern in expr { block } // expr doit implémenter IntoIterator
continue // saute à la fin du corps de la boucle, en commençant une nouvelle itération si nécessaire
break // arrête la boucle
&amp;lsquo;étiquette : boucle { bloc }
&amp;lsquo;étiquette : tandis que condition { bloquer }</description>
    </item>
    
    <item>
      <title>Guide de style de rouille</title>
      <link>https://www.wikiod.com/fr/rust/guide-de-style-de-rouille/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/guide-de-style-de-rouille/</guid>
      <description>Bien qu&amp;rsquo;il n&amp;rsquo;y ait pas de guide de style Rust officiel, les exemples suivants montrent les conventions adoptées par la plupart des projets Rust. Le respect de ces conventions alignera le style de votre projet sur celui de la bibliothèque standard, ce qui permettra aux utilisateurs de voir plus facilement la logique de votre code.
Les directives officielles de style Rust étaient disponibles dans le dépôt rust-lang/rust sur GitHub, mais ils ont récemment été supprimés, en attendant la migration vers le référentiel rust-lang-nursery/fmt-rfcs.</description>
    </item>
    
    <item>
      <title>Correspondance de modèle</title>
      <link>https://www.wikiod.com/fr/rust/correspondance-de-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/correspondance-de-modele/</guid>
      <description>Syntaxe # _ // modèle générique, correspond à n&amp;rsquo;importe quoi¹ ident // modèle de liaison, correspond à n&amp;rsquo;importe quoi et le lie à ident¹ ident @ pat // comme ci-dessus, mais permet de faire correspondre davantage ce qui est lié ref ident // modèle de liaison, correspond à n&amp;rsquo;importe quoi et le lie à une référence ident¹ ref mut ident // modèle de liaison, correspond à n&amp;rsquo;importe quoi et le lie à une référence mutable ident¹ &amp;amp;pat // correspond à une référence (pat n&amp;rsquo;est donc pas une référence mais l&amp;rsquo;arbitre)¹ &amp;amp;mut pat // comme ci-dessus avec une référence mutable¹ CONST // correspond à une constante nommée Struct { field1, field2 } // correspond et déconstruit une valeur de structure, voir ci-dessous la note sur les champs¹ EnumVariant // correspond à une variante d&amp;rsquo;énumération EnumVariant(pat1, pat2) // correspond à une variante d&amp;rsquo;énumération et aux paramètres correspondants EnumVariant(pat1, pat2, .</description>
    </item>
    
    <item>
      <title>Durées de vie</title>
      <link>https://www.wikiod.com/fr/rust/durees-de-vie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/durees-de-vie/</guid>
      <description>Syntaxe # fonction fn&amp;lt;&amp;lsquo;a&amp;gt;(x : &amp;amp;&amp;lsquo;a Type)
struct Struct&amp;lt;&amp;lsquo;a&amp;gt; { x : &amp;amp;&amp;lsquo;a Type }
enum Enum&amp;lt;&amp;lsquo;a&amp;gt; { Variante(&amp;amp;&amp;lsquo;a Type) }
impl&amp;lt;&amp;lsquo;a&amp;gt; Struct&amp;lt;&amp;lsquo;a&amp;gt; { fn x&amp;lt;&amp;lsquo;a&amp;gt;(&amp;amp;self) -&amp;gt; &amp;amp;&amp;lsquo;a Type { self.x } }
impl&amp;lt;&amp;lsquo;a&amp;gt; Trait&amp;lt;&amp;lsquo;a&amp;gt; pour Type
impl&amp;lt;&amp;lsquo;a&amp;gt; Trait pour Type&amp;lt;&amp;lsquo;a&amp;gt;
fonction fn&amp;lt;F&amp;gt;(f : F) où pour&amp;lt;&#39;a&amp;gt; F : FnOnce(&amp;amp;&#39;a Type)
struct Struct&amp;lt;F&amp;gt; where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { x: F }
enum Enum&amp;lt;F&amp;gt; where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { Variant(F) }</description>
    </item>
    
    <item>
      <title>ES de fichier</title>
      <link>https://www.wikiod.com/fr/rust/es-de-fichier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/es-de-fichier/</guid>
      <description>Lire un fichier dans son ensemble sous forme de chaîne # use std::fs::File; use std::io::Read; fn main() { let filename = &amp;quot;src/main.rs&amp;quot;; // Open the file in read-only mode. match File::open(filename) { // The file is open (no error). Ok(mut file) =&amp;gt; { let mut content = String::new(); // Read all the file content into a variable (ignoring the result of the operation). file.read_to_string(&amp;amp;mut content).unwrap(); println!(&amp;quot;{}&amp;quot;, content); // The file is automatically closed when is goes out of scope.</description>
    </item>
    
    <item>
      <title>Parallélisme</title>
      <link>https://www.wikiod.com/fr/rust/parallelisme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/parallelisme/</guid>
      <description>Le parallélisme est bien pris en charge par la bibliothèque standard de Rust à travers diverses classes telles que le module std::thread, les canaux et atomics. Cette section vous guidera dans l&amp;rsquo;utilisation de ces types.
Communication inter-thread avec les canaux # Les canaux peuvent être utilisés pour envoyer des données d&amp;rsquo;un thread à un autre. Vous trouverez ci-dessous un exemple de système producteur-consommateur simple, où le thread principal produit les valeurs 0, 1, &amp;hellip;, 9, et le thread généré les imprime :</description>
    </item>
    
    <item>
      <title>Cordes</title>
      <link>https://www.wikiod.com/fr/rust/cordes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rust/cordes/</guid>
      <description>Contrairement à de nombreux autres langages, Rust a deux principaux types de chaînes : String (un type de chaîne alloué par tas) et &amp;amp;str (une chaîne empruntée, qui n&amp;rsquo;utilise pas de mémoire supplémentaire). Connaître la différence et quand les utiliser est essentiel pour comprendre le fonctionnement de Rust.
Manipulation de chaîne de base # fn main() { // Statically allocated string slice let hello = &amp;quot;Hello world&amp;quot;; // This is equivalent to the previous one let hello_again: &amp;amp;&#39;static str = &amp;quot;Hello world&amp;quot;; // An empty String let mut string = String::new(); // An empty String with a pre-allocated initial buffer let mut capacity = String::with_capacity(10); // Add a string slice to a String string.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Makefile Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/makefile/</link>
    <description>Recent content in Makefile Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/makefile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le makefile</title>
      <link>https://www.wikiod.com/fr/makefile/premiers-pas-avec-le-makefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/makefile/premiers-pas-avec-le-makefile/</guid>
      <description>Makefile de base # Envisagez d&amp;rsquo;écrire un &amp;ldquo;hello world!&amp;rdquo; programme en c. Disons que notre code source est dans un fichier appelé source.c, maintenant pour exécuter notre programme, nous devons le compiler, généralement sous Linux (en utilisant gcc), nous aurions besoin de taper $&amp;gt; gcc source.c -o output où sortie est le nom de l&amp;rsquo;exécutable à générer. Pour un programme de base, cela fonctionne bien, mais à mesure que les programmes deviennent plus complexes, notre commande de compilation peut également devenir plus complexe.</description>
    </item>
    
    <item>
      <title>Makefile avancé</title>
      <link>https://www.wikiod.com/fr/makefile/makefile-avance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/makefile/makefile-avance/</guid>
      <description>Construire à partir de différents dossiers source vers différents dossiers cibles # Principales caractéristiques de ce Makefile :
Détection automatique des sources C dans les dossiers spécifiés Plusieurs dossiers source Plusieurs dossiers cibles correspondants pour les fichiers d&amp;rsquo;objets et de dépendances Génération automatique de règles pour chaque dossier cible Création de dossiers cibles lorsqu&amp;rsquo;ils n&amp;rsquo;existent pas Gestion des dépendances avec gcc : Construisez uniquement ce qui est nécessaire Fonctionne sur les systèmes Unix et DOS Écrit pour GNU Make Ce Makefile peut être utilisé pour construire un projet avec ce type de structure :</description>
    </item>
    
    <item>
      <title>variables</title>
      <link>https://www.wikiod.com/fr/makefile/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/makefile/variables/</guid>
      <description>Affectation de variables conditionnelles # L&amp;rsquo;opérateur ?= est une extension qui se comporte comme =, sauf que l&amp;rsquo;affectation uniquement se produit si la variable n&amp;rsquo;est pas déjà définie.
x = hello x ?= world # $(x) will yield &amp;quot;hello&amp;quot; ## Variables automatiques Dans le contexte d&amp;rsquo;une règle individuelle, Make définit automatiquement un certain nombre de variables spéciales. Ces variables peuvent avoir une valeur différente pour chaque règle dans un makefile et sont conçues pour simplifier l&amp;rsquo;écriture des règles.</description>
    </item>
    
    <item>
      <title>Cible .PHONY</title>
      <link>https://www.wikiod.com/fr/makefile/cible-phony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/makefile/cible-phony/</guid>
      <description>Utilisation de .PHONY pour les cibles non-fichiers # Utilisez .PHONY pour spécifier les cibles qui ne sont pas des fichiers, par exemple, clean ou mrproper.
Bon exemple
.PHONY: clean clean: rm *.o temp Mauvais exemple
clean: rm *.o temp Dans le bon exemple make sait que clean n&amp;rsquo;est pas un fichier, donc il ne cherchera pas s&amp;rsquo;il est à jour ou non et exécutera la recette.
Dans le mauvais exemple, make recherchera un fichier nommé clean.</description>
    </item>
    
    <item>
      <title>Règles de modèle GNU</title>
      <link>https://www.wikiod.com/fr/makefile/regles-de-modele-gnu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/makefile/regles-de-modele-gnu/</guid>
      <description>Cibles correspondant à plusieurs règles de modèle # Si une cible correspond à plusieurs règles de modèle, make utilisera celle dont les prérequis existent ou peuvent être construits. Par exemple:
%.o: %.c $(CC) $(CFLAGS) -c $&amp;lt; -o $@ %.o: %.s $(AS) $(ASFLAGS) $&amp;lt; -o $@ Compilera foo.c en foo.o ou assemblera foo.s en foo.o, selon lequel de foo.c ou foo.s existe.
Si plusieurs règles ont des prérequis qui existent ou peuvent être construites, make utilisera la règle qui correspond à la racine la plus courte.</description>
    </item>
    
  </channel>
</rss>

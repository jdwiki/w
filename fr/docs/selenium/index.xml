<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sélénium on </title>
    <link>https://www.wikiod.com/fr/docs/selenium/</link>
    <description>Recent content in Tutoriel sélénium on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/selenium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le sélénium</title>
      <link>https://www.wikiod.com/fr/selenium/debuter-avec-le-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/debuter-avec-le-selenium/</guid>
      <description>Test de sélénium simple en Java # Le code ci-dessous est un programme Java simple utilisant du sélénium. Le parcours du code ci-dessous est
Ouvrez le navigateur Firefox
Ouvrez la page Google
Imprimez le titre de la page Google
Trouver l&amp;rsquo;emplacement du champ de recherche
Passez la valeur Selenium dans le champ de recherche
Soumettez le formulaire
Fermez le navigateur
package org.openqa.selenium.example;
import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.firefox.FirefoxDriver; import java.</description>
    </item>
    
    <item>
      <title>Usine WebDriver</title>
      <link>https://www.wikiod.com/fr/selenium/usine-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/usine-webdriver/</guid>
      <description>Usine WebDriver C# # using OpenQA.Selenium; using OpenQA.Selenium.Chrome; using OpenQA.Selenium.Firefox; using OpenQA.Selenium.IE; /// &amp;lt;summary&amp;gt; /// Factory for creating WebDriver for various browsers. /// &amp;lt;/summary&amp;gt; public static class WebDriverFactory { /// &amp;lt;summary&amp;gt; /// Initilizes IWebDriver base on the given WebBrowser name. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public static IWebDriver CreateWebDriver(WebBrowser name) { switch (name) { case WebBrowser.Firefox: return new FirefoxDriver(); case WebBrowser.IE: case WebBrowser.InternetExplorer: InternetExplorerOptions ieOption = new InternetExplorerOptions(); ieOption.</description>
    </item>
    
    <item>
      <title>Prendre une capture d&#39;écran d&#39;une page Web</title>
      <link>https://www.wikiod.com/fr/selenium/prendre-une-capture-decran-dune-page-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/prendre-une-capture-decran-dune-page-web/</guid>
      <description>Java Selenium prend/enregistre une capture d&amp;rsquo;écran de la page Web et ajoute un rapport # public void Screenshot() throws Throwable{ final byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES); scenario.embed(screenshot, &amp;quot;image/png&amp;quot;); // ... and embed it in the report. Thread.sleep(1000); } Alternativement
public static void captureScreenShot(WebDriver ldriver){ // Take screenshot and store as a file format File src= ((TakesScreenshot)ldriver).getScreenshotAs(OutputType.FILE); try { // now copy the screenshot to desired location using copyFile method FileUtils.copyFile(src, new File(&amp;quot;C:/selenium/&amp;quot;+System.</description>
    </item>
    
    <item>
      <title>En attente de sélénium</title>
      <link>https://www.wikiod.com/fr/selenium/en-attente-de-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/en-attente-de-selenium/</guid>
      <description>L&amp;rsquo;une des pierres d&amp;rsquo;achoppement les plus courantes pour les nouveaux utilisateurs de Selenium est d&amp;rsquo;attendre qu&amp;rsquo;une page soit complètement chargée. Les utilisateurs humains peuvent facilement savoir si une page est entièrement chargée ou si elle est toujours en cours de chargement. Le sélénium, cependant, attend juste un certain temps. Par conséquent, il est souvent pratique d&amp;rsquo;avoir un bon moyen d&amp;rsquo;attendre les éléments d&amp;rsquo;une page. Bien qu&amp;rsquo;il soit * possible * de le faire avec une boucle et des fonctions sleep (), il existe des moyens beaucoup plus propres déjà intégrés à Selenium.</description>
    </item>
    
    <item>
      <title>Accepter les alertes contextuelles avec Selenium</title>
      <link>https://www.wikiod.com/fr/selenium/accepter-les-alertes-contextuelles-avec-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/accepter-les-alertes-contextuelles-avec-selenium/</guid>
      <description>Exemple Python d&amp;rsquo;alerte d&amp;rsquo;acceptation # from selenium import webdriver # Create a new webdriver driver = webdriver.Chrome() # Get a page that has a popup window (Use mouse to click &amp;quot;try it&amp;quot; button) driver.get(&amp;quot;http://www.w3schools.com/js/tryit.asp?filename=tryjs_alert&amp;quot;) # Accept the opened alert driver.switch_to.alert.accept() Extensions C# pour WebDriver # public static IWebDriver dismissAlert(this IWebDriver driver) { try { IAlert alert = driver.SwitchTo().Alert(); alert.Dismiss(); } catch {} return driver; } public static IWebDriver acceptAlert(this IWebDriver driver) { try { IAlert alert = driver.</description>
    </item>
    
    <item>
      <title>Premier projet en sélénium avec Java</title>
      <link>https://www.wikiod.com/fr/selenium/premier-projet-en-selenium-avec-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/premier-projet-en-selenium-avec-java/</guid>
      <description>Ceci est une introduction à Selenium, en utilisant Java. Bien que nous ne nous attendions pas à ce que vous sachiez quoi que ce soit sur Selenium, vous devez avoir une connaissance préalable de Java pour suivre ce cours.
Liens de téléchargement :
Sélénium
IntelliJ IDEA
ChromeDriver
JDK 8
Obtenir des éléments dans Selenium # Chaque élément Html dans Selenium est appelé un WebElement. Par exemple, une balise p serait un WebElement, une balise a serait un WebElement, etc.</description>
    </item>
    
    <item>
      <title>Premiers pas avec Selenium en python</title>
      <link>https://www.wikiod.com/fr/selenium/premiers-pas-avec-selenium-en-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/premiers-pas-avec-selenium-en-python/</guid>
      <description>Qu&amp;rsquo;est-ce que le sélénium ?
Selenium est une bibliothèque de commandes pour aider un programmeur à s&amp;rsquo;interfacer avec un navigateur comme un vrai utilisateur.
Choses que Selenium fait:
Recherche d&amp;rsquo;éléments dans le code HTML d&amp;rsquo;une page Web
Trouve un seul élément :
driver.find_element_by_css_selector(&amp;quot;css.selector.of.element&amp;quot;) [CSS Selector help][1] driver.find_element_by_xpath(&amp;quot;//xpath//of//element&amp;quot;) [XPATH help][2] driver.find_element_by_name(&amp;quot;name_of_element&amp;quot;) driver.find_element_by_id(&amp;quot;id_of_element&amp;quot;) driver.find_element_by_partial_link_text(&amp;quot;element_link_text&amp;quot;) driver.find_element_by_class_name(&amp;quot;class_name_of_element&amp;quot;) driver.find_element_by_tag_name(&amp;quot;tag_name_of_element&amp;quot;) Trouve une liste d&amp;rsquo;éléments :
driver.find_elements_by_css_selector(&amp;quot;css.selector.of.elements&amp;quot;) driver.find_elements_by_xpath(&amp;quot;//xpath//of//elements&amp;quot;) driver.find_elements_by_name(&amp;quot;name_of_elements&amp;quot;) driver.find_elements_by_partial_link_text(&amp;quot;elements_link_text&amp;quot;) driver.find_elements_by_class_name(&amp;quot;class_name_of_elements&amp;quot;) driver.find_elements_by_tag_name(&amp;quot;tag_name_of_elements&amp;quot;) Documentation officielle : [selenium-python lire la documentation][3]</description>
    </item>
    
    <item>
      <title>IDE au sélénium</title>
      <link>https://www.wikiod.com/fr/selenium/ide-au-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/ide-au-selenium/</guid>
      <description>Essayez un simple script Selenium : recherchez Wikipedia sur Google # Conditions préalables:
Installer Firefox Installer l&amp;rsquo;addon Selenium IDE (https://addons.mozilla.org/fr/firefox/addon/selenium-ide/) Ouvrez le plugin. Un bouton affichant un cercle rouge doit apparaître. S&amp;rsquo;il est enfoncé, cela signifie que vous pouvez commencer votre scénario. Le plugin enregistre tout ce que vous faites dans cette instance de Firefox.
Faites ce que vous voulez être enregistré.
Au final, sauvegardez votre scénario ; vous remarquerez que les scénarios de Selenium IDE sont des fichiers html.</description>
    </item>
    
    <item>
      <title>WebDriverManager pour Selenium - un outil très soigné de Boni Garcia</title>
      <link>https://www.wikiod.com/fr/selenium/webdrivermanager-pour-selenium---un-outil-tres-soigne-de-boni-garcia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/webdrivermanager-pour-selenium---un-outil-tres-soigne-de-boni-garcia/</guid>
      <description>Je suis passé à Selenium 3 et j&amp;rsquo;ai commencé à utiliser Chrome au lieu de Firefox. J&amp;rsquo;ai découvert que pour Chrome, je devais télécharger un binaire pour que WebDriver gère le navigateur. Pour que cela fonctionne, je dois définir le chemin absolu vers ce binaire en tant que variable Java. Si le binaire est mis à jour, je dois mettre à jour ce binaire manuellement dans mon framework de test - ce qui prend du temps et est vraiment ennuyeux.</description>
    </item>
    
    <item>
      <title>Automatisation des applications mobiles</title>
      <link>https://www.wikiod.com/fr/selenium/automatisation-des-applications-mobiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium/automatisation-des-applications-mobiles/</guid>
      <description>##Android + Chrome + Python Pour pouvoir exécuter des tests, le navigateur &amp;ldquo;Chrome&amp;rdquo; doit être préinstallé sur l&amp;rsquo;appareil &amp;ldquo;Android&amp;rdquo;,
Python + Chrome + Android # Pour pouvoir travailler avec une application Web sur un appareil &amp;ldquo;Android&amp;rdquo; utilisant &amp;ldquo;Selenium&amp;rdquo;, les conditions préalables ci-dessous doivent être remplies :
[Android SDK][1] installé sur l&amp;rsquo;ordinateur Navigateur &amp;ldquo;Chrome&amp;rdquo; installé sur l&amp;rsquo;appareil &amp;ldquo;Android&amp;rdquo; [Mode de débogage] [2] activé sur l&amp;rsquo;appareil &amp;ldquo;Android&amp;rdquo; Démarrez le serveur adb et chromedriver avec les commandes ci-dessous à partir de cmd/Terminal :</description>
    </item>
    
  </channel>
</rss>

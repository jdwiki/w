<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel JavaScript on </title>
    <link>https://www.wikiod.com/fr/docs/javascript/</link>
    <description>Recent content in Tutoriel JavaScript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec JavaScript</title>
      <link>https://www.wikiod.com/fr/javascript/debuter-avec-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/debuter-avec-javascript/</guid>
      <description>Utilisation de console.log() # Introduction # Tous les navigateurs Web modernes, NodeJ ainsi que presque tous les autres environnements JavaScript prennent en charge l&amp;rsquo;écriture de messages sur une console à l&amp;rsquo;aide d&amp;rsquo;une suite de méthodes de journalisation. La plus courante de ces méthodes est console.log().
Dans un environnement de navigateur, la fonction console.log() est principalement utilisée à des fins de débogage.
Commencer # Ouvrez la console JavaScript dans votre navigateur, saisissez ce qui suit et appuyez sur Entrée :</description>
    </item>
    
    <item>
      <title>Promesses</title>
      <link>https://www.wikiod.com/fr/javascript/promesses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/promesses/</guid>
      <description>Syntaxe # nouvelle promesse( /* fonction exécuteur : */ fonction(résolution, rejet) { }) promise.then(onFulfilled[, onRejected]) promesse.catch(onRejected) Promise.resolve (résolution) Promise.reject (raison) Promise.all(itérable) Promise.race (itérable) Les promesses font partie de la spécification ECMAScript 2015 et [la prise en charge des navigateurs][1] est limitée, 88 % des navigateurs dans le monde la prenant en charge en juillet 2017. Le tableau suivant donne un aperçu des premières versions de navigateur prenant en charge les promesses.</description>
    </item>
    
    <item>
      <title>Fonctions fléchées</title>
      <link>https://www.wikiod.com/fr/javascript/fonctions-flechees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/fonctions-flechees/</guid>
      <description>Les fonctions fléchées sont une manière concise d&amp;rsquo;écrire [anonyme](https://www.wikiod.com/fr/javascript/les-fonctions#Fonction anonyme), les fonctions à portée lexicale dans [ECMAScript 2015 (ES6)] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla).
Syntaxe # x =&amp;gt; y // Retour implicite x =&amp;gt; { return y } // Retour explicite (x, y, z) =&amp;gt; { &amp;hellip; } // Arguments multiples async () =&amp;gt; { &amp;hellip; } // Fonctions fléchées asynchrones (() =&amp;gt; { &amp;hellip; })() // Expression de fonction appelée immédiatement const maFonction = x =&amp;gt; x*2 // Un saut de ligne avant la flèche lancera une erreur &amp;lsquo;Jeton inattendu&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/javascript/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/tableaux/</guid>
      <description>Syntaxe # tableau = [valeur, valeur, &amp;hellip;] tableau = nouveau tableau(valeur, valeur, &amp;hellip;) array = Array.of(valeur, valeur, &amp;hellip;) array = Array.from(arrayLike) Résumé : Les tableaux en JavaScript sont, tout simplement, des instances &amp;ldquo;Objet&amp;rdquo; modifiées avec un prototype avancé, capables d&amp;rsquo;effectuer une variété de tâches liées aux listes. Ils ont été ajoutés dans ECMAScript 1st Edition, et d&amp;rsquo;autres méthodes prototypes sont arrivées dans ECMAScript 5.1 Edition.
Avertissement : Si un paramètre numérique appelé n est spécifié dans le constructeur new Array(), il déclarera un tableau avec n nombre d&amp;rsquo;éléments, et non un tableau avec 1 élément avec la valeur de n !</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/fr/javascript/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/json/</guid>
      <description>JSON (JavaScript Object Notation) est un format d&amp;rsquo;échange de données léger. Il est facile à lire et à écrire pour les humains et facile à analyser et à générer pour les machines. Il est important de réaliser qu&amp;rsquo;en JavaScript, JSON est une chaîne et non un objet.
Un aperçu de base peut être trouvé sur le site Web json.org qui contient également des liens vers des implémentations de la norme dans de nombreux langages de programmation différents.</description>
    </item>
    
    <item>
      <title>Modèles de conception de création</title>
      <link>https://www.wikiod.com/fr/javascript/modeles-de-conception-de-creation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/modeles-de-conception-de-creation/</guid>
      <description>Les modèles de conception sont un bon moyen de garder votre code lisible et SEC. DRY signifie ne vous répétez pas. Vous trouverez ci-dessous plus d&amp;rsquo;exemples sur les modèles de conception les plus importants.
En génie logiciel, un modèle de conception logicielle est une solution générale réutilisable à un problème courant dans un contexte donné de conception logicielle.
Fonctions d&amp;rsquo;usine # Une fonction d&amp;rsquo;usine est simplement une fonction qui renvoie un objet.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://www.wikiod.com/fr/javascript/console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/console/</guid>
      <description>La console de débogage d&amp;rsquo;un navigateur ou [console Web][1] est généralement utilisée par les développeurs pour identifier les erreurs, comprendre le flux d&amp;rsquo;exécution, consigner les données et à de nombreuses autres fins lors de l&amp;rsquo;exécution. Ces informations sont accessibles via l&amp;rsquo;objet [console][2].
[1] : https://developer.mozilla.org/en-US/docs/Tools/Web_Console [2] : https://developer.mozilla.org/en-US/docs/Web/API/Console
Syntaxe # void console.log(obj1 [, obj2, &amp;hellip;, objN]); void console.log(msg [, sub1, &amp;hellip;, subN]); Paramètres # Paramètre Descriptif obj1 &amp;hellip; objN Une liste d&amp;rsquo;objets JavaScript dont les représentations de chaîne sont sorties dans la console message Une chaîne JavaScript contenant zéro ou plusieurs chaînes de substitution.</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/javascript/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/les-fonctions/</guid>
      <description>Les fonctions en JavaScript fournissent un code organisé et réutilisable pour effectuer un ensemble d&amp;rsquo;actions. Les fonctions simplifient le processus de codage, évitent la logique redondante et facilitent le suivi du code. Cette rubrique décrit la déclaration et l&amp;rsquo;utilisation des fonctions, des arguments, des paramètres, des instructions de retour et de la portée en JavaScript.
Syntaxe # exemple de fonction(x) { retour x }
var exemple = fonction (x) { retour x }</description>
    </item>
    
    <item>
      <title>Fonctions asynchrones (asyncwait)</title>
      <link>https://www.wikiod.com/fr/javascript/fonctions-asynchrones-asyncwait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/fonctions-asynchrones-asyncwait/</guid>
      <description>async et wait s&amp;rsquo;appuient sur des promesses et des générateurs pour exprimer des actions asynchrones en ligne. Cela rend le code asynchrone ou de rappel beaucoup plus facile à maintenir.
Les fonctions avec le mot clé async renvoient une Promise et peuvent être appelées avec cette syntaxe.
Dans une fonction asynchrone, le mot-clé wait peut être appliqué à n&amp;rsquo;importe quelle Promise et entraînera l&amp;rsquo;exécution de tout le corps de la fonction après wait après la résolution de la promesse.</description>
    </item>
    
    <item>
      <title>Débogage</title>
      <link>https://www.wikiod.com/fr/javascript/debogage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javascript/debogage/</guid>
      <description>Variables d&amp;rsquo;interprétation interactives # Notez que ceux-ci ne fonctionnent que dans les outils de développement de certains navigateurs.
$_ vous donne la valeur de la dernière expression évaluée.
&amp;quot;foo&amp;quot; // &amp;quot;foo&amp;quot; $_ // &amp;quot;foo&amp;quot; $0 fait référence à l&amp;rsquo;élément DOM actuellement sélectionné dans l&amp;rsquo;inspecteur. Donc, si &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; est en surbrillance :
$0 // &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; $0.getAttribute(&#39;id&#39;) // &amp;quot;foo&amp;quot; $1 fait référence à l&amp;rsquo;élément précédemment sélectionné, $2 à celui sélectionné auparavant, et ainsi de suite pour $3 et $4.</description>
    </item>
    
  </channel>
</rss>

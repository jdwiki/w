<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur le langage Perl on </title>
    <link>https://www.wikiod.com/fr/docs/perl/</link>
    <description>Recent content in Tutoriel sur le langage Perl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le langage Perl</title>
      <link>https://www.wikiod.com/fr/perl/debuter-avec-le-langage-perl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/debuter-avec-le-langage-perl/</guid>
      <description>Premiers pas avec Perl # Perl essaie de faire ce que vous voulez dire :
print &amp;quot;Hello World\n&amp;quot;; Les deux bits délicats sont le point-virgule à la fin de la ligne et le \n, qui ajoute une nouvelle ligne (saut de ligne). Si vous avez une version relativement récente de perl, vous pouvez utiliser say au lieu de print pour que le retour chariot soit ajouté automatiquement :
use feature &#39;say&#39;; say &amp;quot;Hello World&amp;quot;; La fonction say est également activée automatiquement avec une déclaration use v5.</description>
    </item>
    
    <item>
      <title>File IO (lecture et écriture de fichiers)</title>
      <link>https://www.wikiod.com/fr/perl/file-io-lecture-et-ecriture-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/file-io-lecture-et-ecriture-de-fichiers/</guid>
      <description>Paramètres # Mode Explication &amp;gt; Écrire (trunc). Remplacera les fichiers existants. Crée un nouveau fichier si aucun fichier n&amp;rsquo;a été trouvé &amp;gt;&amp;gt; Écrivez (apposez). N&amp;rsquo;écrasera pas les fichiers mais ajoutera un nouveau contenu à la fin. Créera également un fichier s&amp;rsquo;il est utilisé pour ouvrir un fichier non existant. &amp;lt; Lis. Ouvre le fichier en mode lecture seule. +&amp;lt; Lire écrire. Ne créera pas ou ne tronquera pas le fichier. +&amp;gt; Lecture/écriture (trunc).</description>
    </item>
    
    <item>
      <title>Lire le contenu d&#39;un fichier dans une variable</title>
      <link>https://www.wikiod.com/fr/perl/lire-le-contenu-dun-fichier-dans-une-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/lire-le-contenu-dun-fichier-dans-une-variable/</guid>
      <description>Chemin :: Minuscule # Utilisation de l&amp;rsquo;idiome de [The Manual Way] (https://www.wikiod.com/fr/perl/lire-le-contenu-dun-fichier-dans-une-variable#La méthode manuelle) plusieurs fois dans un script devient rapidement fastidieux, vous pouvez donc essayer un module.
use Path::Tiny; my $contents = path($filename)-&amp;gt;slurp; Vous pouvez passer une option binmode si vous avez besoin de contrôler les encodages de fichiers, les fins de ligne, etc. - voir man perlio :
my $contents = path($filename)-&amp;gt;slurp( {binmode =&amp;gt; &amp;quot;:encoding(UTF-8)&amp;quot;} ); Path::Tiny a également beaucoup d&amp;rsquo;autres fonctions pour gérer les fichiers afin qu&amp;rsquo;il puisse être un bon choix.</description>
    </item>
    
    <item>
      <title>Perl orienté objet</title>
      <link>https://www.wikiod.com/fr/perl/perl-oriente-objet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/perl-oriente-objet/</guid>
      <description>Définir les classes en Perl moderne # Bien que disponible, la définition d&amp;rsquo;une classe [à partir de zéro] (https://www.wikiod.com/fr/perl/perl-oriente-objet#Définition des classes) n&amp;rsquo;est pas recommandée en Perl moderne. Utilisez l&amp;rsquo;un des systèmes d&amp;rsquo;assistance OO qui offrent plus de fonctionnalités et de commodité. Parmi ces systèmes, citons :
Moose - inspiré par la conception Perl 6 OO
Class::Accessor - une alternative légère à Moose
Class::Tiny - constructeur de classe vraiment minimal
Élan</description>
    </item>
    
    <item>
      <title>Listes</title>
      <link>https://www.wikiod.com/fr/perl/listes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/listes/</guid>
      <description>Tableau sous forme de liste # Le tableau est l&amp;rsquo;un des types de variables de base de Perl. Il contient une liste, qui est une séquence ordonnée de zéro ou plusieurs scalaires. Le tableau est la variable contenant (et permettant d&amp;rsquo;accéder) aux données de la liste, comme cela est documenté dans perldata.
Vous pouvez affecter une liste à un tableau :
my @foo = ( 4, 5, 6 ); Vous pouvez utiliser un tableau partout où une liste est attendue :</description>
    </item>
    
    <item>
      <title>Sortie de débogage</title>
      <link>https://www.wikiod.com/fr/perl/sortie-de-debogage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/sortie-de-debogage/</guid>
      <description>Vider avec style # Parfois, [Data::Dumper][1] ne suffit pas. Vous avez un objet Moose que vous souhaitez inspecter ? Des nombres énormes de la même structure ? Vous voulez que les choses soient triées ? Coloré? [Data::Printer][2] est votre ami.
use Data::Printer; p $data_structure; [![entrez la description de l&amp;rsquo;image ici][3]][3]
Data::Printer écrit dans STDERR, comme warn. Cela facilite la recherche de la sortie. Par défaut, il trie les clés de hachage et examine les objets.</description>
    </item>
    
    <item>
      <title>Vrai et faux</title>
      <link>https://www.wikiod.com/fr/perl/vrai-et-faux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/vrai-et-faux/</guid>
      <description>Syntaxe # undef # Faux &amp;rsquo;&amp;rsquo; # défini, faux 0 # défini, a une longueur, faux &amp;lsquo;0&amp;rsquo; # défini, a une longueur, faux Perl n&amp;rsquo;a pas de type de données booléen, pas plus qu&amp;rsquo;il n&amp;rsquo;a de mots-clés &amp;ldquo;true&amp;rdquo; et &amp;ldquo;false&amp;rdquo; comme beaucoup d&amp;rsquo;autres langages. Cependant, chaque valeur scalaire donnera la valeur true ou false lorsqu&amp;rsquo;elle est évaluée dans un contexte booléen (la condition dans une instruction if ou une boucle while, par exemple).</description>
    </item>
    
    <item>
      <title>Forfaits et modules</title>
      <link>https://www.wikiod.com/fr/perl/forfaits-et-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/forfaits-et-modules/</guid>
      <description>Syntaxe # nécessite Module :: Nom ; # Exiger par nom de @INC nécessite &amp;ldquo;chemin/vers/fichier.pm&amp;rdquo; ; # Requiert par chemin relatif depuis @INC utilisez Module::Nom ; # importation requise et par défaut au DÉBUT utilisez Module::Nom (); # requis et pas d&amp;rsquo;importation au BEGIN utilisez Module :: Nom (@ARGS); # exiger et importer avec des arguments au DÉBUT utilisez Module::Nom VERSION ; # requis, vérification de la version et importation par défaut au DÉBUT utilisez Module::Nom VERSION (); # requis, vérification de la version et aucune importation au DÉBUT utilisez Module::Name VERSION (@ARGS); # exiger, vérifier la version, importer avec des arguments au DÉBUT faites &amp;ldquo;chemin/vers/fichier.</description>
    </item>
    
    <item>
      <title>variables</title>
      <link>https://www.wikiod.com/fr/perl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/variables/</guid>
      <description>Syntaxe # ma # Déclaration lexicale notre # Déclaration globale $foo # Scalaire @foo # tableau $#foo # Array Last-Index %foo # Hachage ${$foo} # déréférencement scalaire @{$foo} # déréférencement de tableau $#{$foo} # Array-DeRef Last-Index %{$foo} # déréférencement de hachage $foo[$index] # Le tableau est indexé ${$foo}[$index] # Array De-Reference et indexé. $foo-&amp;gt;[$index] # Array De-Reference et indexé (simplifié) $foo{$key} # Le hachage récupère la valeur de la clé ${$foo}{$key} # Hash Dereference et obtenir la valeur de la clé $foo-&amp;gt;{$key} # Hash Dereference et obtenir la valeur de la clé (simplifié) \$x # Référence au scalaire \@x # Référence au tableau \%x # Référence au hachage = # Référence au tableau anonyme (en ligne) ={ } # Référence au hachage anonyme (en ligne) Scalaires # Les scalaires sont le type de données le plus basique de Perl.</description>
    </item>
    
    <item>
      <title>Sous-programmes</title>
      <link>https://www.wikiod.com/fr/perl/sous-programmes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/perl/sous-programmes/</guid>
      <description>Les sous-programmes obtiennent leurs arguments dans la variable magique appelée @_. Bien qu&amp;rsquo;il n&amp;rsquo;ait pas besoin d&amp;rsquo;être décompressé, il est recommandé, car il améliore la lisibilité et empêche les modifications accidentelles car les arguments de @_ sont passés par référence (peuvent être modifiés).
Création de sous-programmes # Les sous-programmes sont créés en utilisant le mot-clé sub suivi d&amp;rsquo;un identifiant et d&amp;rsquo;un bloc de code entre accolades.
Vous pouvez accéder aux arguments en utilisant la variable spéciale @_, qui contient tous les arguments sous forme de tableau.</description>
    </item>
    
  </channel>
</rss>

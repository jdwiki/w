<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel phalcon on </title>
    <link>https://www.wikiod.com/fr/docs/phalcon/</link>
    <description>Recent content in Tutoriel phalcon on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/phalcon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec phalcon</title>
      <link>https://www.wikiod.com/fr/phalcon/premiers-pas-avec-phalcon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/premiers-pas-avec-phalcon/</guid>
      <description>Installation # Téléchargez les fichiers d&amp;rsquo;installation à partir de Phalcon [page de téléchargement dédiée] (https://phalconphp.com/en/download), ainsi que des manuels permettant de faire fonctionner Phalcon avec les plates-formes populaires.
Les fenêtres # Placez les [fichiers DLL] (https://phalconphp.com/en/download/windows) dans un répertoire approprié pour étendre les fonctionnalités de PHP. Pour XAMPP, utilisez xampp\php\ext\ - et pour WAMP, utilisez le répertoire wamp\bin\php\php*\ext\. Activez ensuite Phalcon en ajoutant extension=php_phalcon.dll au fichier php.ini approprié. Redémarrez le serveur Web et Phalcon devrait être disponible.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/fr/phalcon/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/validation/</guid>
      <description>La référence API à la classe de validation peut être trouvée ici : https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html S&amp;rsquo;il y a une entité fournie dans \Phalcon\Validation vous n&amp;rsquo;avez pas besoin de passer la clé du modèle dans \Phalcon\Validation\Validator\Uniqueness Validateurs intégrés # PresenceOf - Valide qu&amp;rsquo;une valeur n&amp;rsquo;est pas nulle ou une chaîne vide
$validator-&amp;gt;add(&#39;name&#39;, new \Phalcon\Validation\Validator\PresenceOf([ &#39;message&#39; =&amp;gt; &#39;The name is required&#39; ])); Email - Vérifie si une valeur a un format d&amp;rsquo;e-mail correct</description>
    </item>
    
    <item>
      <title>Travailler avec ACL</title>
      <link>https://www.wikiod.com/fr/phalcon/travailler-avec-acl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/travailler-avec-acl/</guid>
      <description>Syntaxe # Vous pouvez utiliser &amp;lsquo;*&amp;rsquo; comme deuxième et troisième paramètre dans les méthodes Phalcon\Acl::allow et Phalcon\Acl::deny. Cela signifiera respectivement toute ressource et action.
Le deuxième argument dans Phalcon\Acl::addRole indique à partir de quel rôle l&amp;rsquo;accès à l&amp;rsquo;héritage.
Vous devez sérialiser votre ACL dans un fichier ou un backend de cache au lieu de le créer à chaque requête.
C&amp;rsquo;est aussi une bonne idée de garder acl dans un fichier séparé.</description>
    </item>
    
    <item>
      <title>Routage et expédition</title>
      <link>https://www.wikiod.com/fr/phalcon/routage-et-expedition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/routage-et-expedition/</guid>
      <description>Routes d&amp;rsquo;API RESTful pour l&amp;rsquo;application multi-module # // Define new router group $api = new \Phalcon\Mvc\Router\Group([ &#39;module&#39; =&amp;gt; &#39;api&#39;, ]); $api-&amp;gt;setPrefix(&#39;/api/v1&#39;); // API routes (Maps to Cotnroller::Action) $api-&amp;gt;addGet(&#39;/users&#39;, &#39;Users::index&#39;); $api-&amp;gt;addGet(&#39;/users/search/{query}&#39;, &#39;Users::search&#39;); $api-&amp;gt;addGet(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::fetch&#39;); $api-&amp;gt;addPost(&#39;/users&#39;, &#39;Users::add&#39;); $api-&amp;gt;addPut(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::edit&#39;); $api-&amp;gt;addDelete(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::delete&#39;); // Add API routes to main router $router-&amp;gt;mount($api); Exemple de création d&amp;rsquo;un utilisateur :
curl -i -X POST -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;John Snow&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;King of the North&amp;quot;}&#39; http://example.com/api/v1/users Routes de module définies dynamiquement # $router = new \Phalcon\Mvc\Router(false); $router-&amp;gt;removeExtraSlashes(true); $request = new \Phalcon\Http\Request(); $action = strtolower($request-&amp;gt;getMethod()); // get, post, etc.</description>
    </item>
    
    <item>
      <title>Gestion de base de données</title>
      <link>https://www.wikiod.com/fr/phalcon/gestion-de-base-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/gestion-de-base-de-donnees/</guid>
      <description>Gestion de la base de données à l&amp;rsquo;aide du modèle Phalcon # Un modèle pour une nouvelle table peut être créé en exécutant la commande suivante à partir de l&amp;rsquo;emplacement racine du terminal :
phalcon model &amp;lt;table-name&amp;gt; Prenons les utilisateurs modèles.
SÉLECTIONNER
Il y a deux fonctions par défaut pour sélectionner l&amp;rsquo;opération dans phalcon, find() et findFirst()
findFirst() est utilisé pour obtenir la première ligne qui satisfait les conditions que nous passons.</description>
    </item>
    
    <item>
      <title>Gestionnaire d&#39;évènements</title>
      <link>https://www.wikiod.com/fr/phalcon/gestionnaire-devenements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/gestionnaire-devenements/</guid>
      <description>Vérification ACL dynamique # Créez une classe de sécurité pour exécuter votre logique ACL.
&amp;lt;?php namespace Plugins; use Phalcon\Events\Event; use Phalcon\Mvc\Dispatcher; use Phalcon\Acl; use Phalcon\Acl\Role; use Phalcon\Acl\Resource; use Phalcon\Acl\Adapter\Memory as AclList; class Security extends \Phalcon\Mvc\User\Plugin { public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher) { // your acl logic here } } Accrochez la classe Security au répartiteur, pour qu&amp;rsquo;elle s&amp;rsquo;exécute sur beforeExecuteRoute.
$di = new \Phalcon\DI\FactoryDefault(); $eventsManager = $di[&#39;eventsManager&#39;]; $di-&amp;gt;setShared(&#39;dispatcher&#39;, function() use ($eventsManager) { $eventsManager-&amp;gt;attach(&#39;dispatch:beforeExecuteRoute&#39;, new \Plugins\Security); $dispatcher = new \Phalcon\Mvc\Dispatcher; $dispatcher-&amp;gt;setEventsManager($eventsManager); return $dispatcher; }); </description>
    </item>
    
    <item>
      <title>Incubateur</title>
      <link>https://www.wikiod.com/fr/phalcon/incubateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/incubateur/</guid>
      <description>Introduction # L&amp;rsquo;[Incubateur Phalcon][1] peut être utilisé par la communauté pour expérimenter de nouvelles fonctionnalités ou étendre les adaptateurs, prototypes ou fonctionnalités Phalcon existants.
Tout ce qui se trouve dans l&amp;rsquo;incubateur peut être potentiellement incorporé dans le cadre.
Référentiel Github : https://github.com/phalcon/incubator
[1] : https://github.com/phalcon/incubator
Installation # Installation via Composer # Le moyen le plus simple d&amp;rsquo;installer l&amp;rsquo;incubateur consiste à utiliser [Composer][1].
Installez Composer et créez un nouveau fichier composer.json à la racine de votre projet.</description>
    </item>
    
    <item>
      <title>Filtrage et désinfection</title>
      <link>https://www.wikiod.com/fr/phalcon/filtrage-et-desinfection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/phalcon/filtrage-et-desinfection/</guid>
      <description>Désinfection pratique dans le modèle # Définissez une méthode pratique dans votre modèle de base
namespace Base; class Model extends \Phalcon\Mvc\Model { public function sanitize($attr, $filterName) { $filter = $this-&amp;gt;getDI()-&amp;gt;get(&#39;filter&#39;); $this-&amp;gt;$attr = $filter-&amp;gt;sanitize($this-&amp;gt;$attr, $filterName); } } Ensuite, utilisez comme ça
class User extends \Base\Model { public function beforeValidation() { $this-&amp;gt;sanitize(&#39;id&#39;, &#39;int&#39;); // input $this-&amp;gt;id: 123abc // output: 123 $this-&amp;gt;sanitize(&#39;email&#39;, &#39;email&#39;); // input $this-&amp;gt;email: youre(-)mail@dom/ain.com // output: youremail@domain.com $this-&amp;gt;sanitize(&#39;wage&#39;, &#39;float&#39;); // input $this-&amp;gt;wage: +1234ab.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur les tests unitaires on </title>
    <link>https://www.wikiod.com/fr/docs/unit-testing/</link>
    <description>Recent content in Tutoriel sur les tests unitaires on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec les tests unitaires</title>
      <link>https://www.wikiod.com/fr/unit-testing/premiers-pas-avec-les-tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/premiers-pas-avec-les-tests-unitaires/</guid>
      <description>Un test unitaire de base # Dans sa forme la plus simple, un test unitaire se compose de trois étapes :
Préparer l&amp;rsquo;environnement pour le test Exécuter le code à tester Valider que le comportement attendu correspond au comportement observé Ces trois étapes sont souvent appelées &amp;lsquo;Arrange-Act-Assert&amp;rsquo;, ou &amp;lsquo;Given-When-Then&amp;rsquo;.
Vous trouverez ci-dessous un exemple en C# qui utilise le framework [NUnit][1].
[TestFixture] public CalculatorTest { [Test] public void Add_PassSevenAndThree_ExpectTen() { // Arrange - setup environment var systemUnderTest = new Calculator(); // Act - Call system under test var calculatedSum = systemUnderTest.</description>
    </item>
    
    <item>
      <title>Injection de dépendance</title>
      <link>https://www.wikiod.com/fr/unit-testing/injection-de-dependance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/injection-de-dependance/</guid>
      <description>Une approche qui peut être adoptée pour écrire un logiciel consiste à créer des dépendances au fur et à mesure de leurs besoins. C&amp;rsquo;est une manière assez intuitive d&amp;rsquo;écrire un programme et c&amp;rsquo;est la manière que la plupart des gens auront tendance à apprendre, en partie parce qu&amp;rsquo;elle est facile à suivre. L&amp;rsquo;un des problèmes avec cette approche est qu&amp;rsquo;elle peut être difficile à tester. Considérez une méthode qui effectue un traitement basé sur la date actuelle.</description>
    </item>
    
    <item>
      <title>Doubles d&#39;essai</title>
      <link>https://www.wikiod.com/fr/unit-testing/doubles-dessai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/doubles-dessai/</guid>
      <description>Lors des tests, il est parfois utile d&amp;rsquo;utiliser un double de test pour manipuler ou vérifier le comportement du système testé. Les doublons sont passés ou [injectés][1] dans la classe ou la méthode testée au lieu d&amp;rsquo;instances de code de production.
[1] : https://www.wikiod.com/fr/unit-testing/injection-de-dependance
Utilisation d&amp;rsquo;un stub pour fournir des réponses standardisées # Un stub est un double de test léger qui fournit des réponses prédéfinies lorsque des méthodes sont appelées.</description>
    </item>
    
    <item>
      <title>Meilleures pratiques de test unitaire</title>
      <link>https://www.wikiod.com/fr/unit-testing/meilleures-pratiques-de-test-unitaire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/meilleures-pratiques-de-test-unitaire/</guid>
      <description>Un test unitaire est la plus petite partie testable d&amp;rsquo;une application comme les fonctions, les classes, les procédures, les interfaces. Le test unitaire est une méthode par laquelle des unités individuelles de code source sont testées pour déterminer si elles sont aptes à être utilisées. Les tests unitaires sont essentiellement écrits et exécutés par les développeurs de logiciels pour s&amp;rsquo;assurer que le code répond à sa conception et à ses exigences et se comporte comme prévu.</description>
    </item>
    
    <item>
      <title>Les règles générales des tests unitaires pour toutes les langues</title>
      <link>https://www.wikiod.com/fr/unit-testing/les-regles-generales-des-tests-unitaires-pour-toutes-les-langues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/les-regles-generales-des-tests-unitaires-pour-toutes-les-langues/</guid>
      <description>Au début des tests unitaires, toutes sortes de questions se posent :
Qu&amp;rsquo;est-ce que les tests unitaires ? Qu&amp;rsquo;est-ce qu&amp;rsquo;une configuration et un démontage ? Comment gérer les dépendances ? Pourquoi faire des tests unitaires ? Comment faire de bons tests unitaires ?
Cet article répondra à toutes ces questions, afin que vous puissiez commencer les tests unitaires dans la langue de votre choix.
Qu&amp;rsquo;est-ce que les tests unitaires ? # Les tests unitaires consistent à tester le code pour s&amp;rsquo;assurer qu&amp;rsquo;il effectue la tâche qu&amp;rsquo;il est censé effectuer.</description>
    </item>
    
    <item>
      <title>Guider les tests unitaires dans Visual Studio pour C#</title>
      <link>https://www.wikiod.com/fr/unit-testing/guider-les-tests-unitaires-dans-visual-studio-pour-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/guider-les-tests-unitaires-dans-visual-studio-pour-c/</guid>
      <description>Comment créer un projet de test unitaire et des tests unitaires et comment exécuter les tests unitaires et l&amp;rsquo;outil de couverture de code.
Dans ce guide, le framework MSTest standard sera utilisé et l&amp;rsquo;outil standard d&amp;rsquo;analyse de la couverture du code disponible dans Visual Studio.
Le guide a été écrit pour Visual Studio 2015, il est donc possible que certaines choses soient différentes dans d&amp;rsquo;autres versions.
Création d&amp;rsquo;un projet de test unitaire # Ouvrir le projet C# Clic droit sur la solution -&amp;gt; Ajouter -&amp;gt; Nouveau projet… (Figure 1) [!</description>
    </item>
    
    <item>
      <title>Tests unitaires de boucles (Java)</title>
      <link>https://www.wikiod.com/fr/unit-testing/tests-unitaires-de-boucles-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/tests-unitaires-de-boucles-java/</guid>
      <description>Boucles considérées comme l&amp;rsquo;une des structures de contrôle importantes dans tout langage de programmation. Il existe différentes façons d&amp;rsquo;obtenir une couverture de boucle.
Ces méthodes diffèrent selon le type de boucle.
Boucles simples
Boucles imbriquées
Boucles concaténées
Test en boucle unique # Ce sont des boucles dans lesquelles leur corps de boucle ne contient aucune autre boucle (la boucle la plus interne en cas d&amp;rsquo;imbrication).
Afin d&amp;rsquo;avoir une couverture de boucle, les testeurs doivent effectuer les tests indiqués ci-dessous.</description>
    </item>
    
    <item>
      <title>Types d&#39;assertions</title>
      <link>https://www.wikiod.com/fr/unit-testing/types-dassertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/unit-testing/types-dassertions/</guid>
      <description>Vérification d&amp;rsquo;une valeur renvoyée # [Test] public void Calculator_Add_ReturnsSumOfTwoNumbers() { Calculator calculatorUnderTest = new Calculator(); double result = calculatorUnderTest.Add(2, 3); Assert.AreEqual(5, result); } Test basé sur l&amp;rsquo;état # Étant donné cette classe simple, nous pouvons tester que la méthode ShaveHead fonctionne correctement en affirmant que l&amp;rsquo;état de la variable HairLength est défini sur zéro après l&amp;rsquo;appel de la méthode ShaveHead.
public class Person { public string Name; public int HairLength; public Person(string name, int hairLength) { this.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Erlang on </title>
    <link>https://www.wikiod.com/fr/docs/erlang/</link>
    <description>Recent content in Tutoriel du langage Erlang on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le langage Erlang</title>
      <link>https://www.wikiod.com/fr/erlang/debuter-avec-le-langage-erlang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/debuter-avec-le-langage-erlang/</guid>
      <description>Bonjour le monde # Il y a deux choses que vous devez savoir lors de l&amp;rsquo;écriture d&amp;rsquo;une application &amp;ldquo;hello world&amp;rdquo; en Erlang :
Le code source est écrit dans le langage de programmation erlang en utilisant l&amp;rsquo;éditeur de texte de votre choix L&amp;rsquo;application est ensuite exécutée dans la machine virtuelle erlang. Dans cet exemple, nous allons interagir avec la machine virtuelle erlang via le shell erlang. D&amp;rsquo;abord le code source de l&amp;rsquo;application : # Créez un nouveau fichier &amp;ldquo;hello.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/fr/erlang/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/installation/</guid>
      <description>Construisez et installez Erlang/OTP sur FreeBSD # Les exemples suivants montrent 3 méthodes principales pour installer Erlang/OTP sur FreeBSD.
Méthode 1 - Paquet binaire pré-construit # Utilisez pkg pour installer le package binaire prédéfini :
$ pkg install erlang Testez votre nouvelle installation :
$ erl Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false] Eshell V7.3.1 (abort with ^G) Méthode 2 - Construire et installer à l&amp;rsquo;aide de la collection de ports (recommandé) # Construisez et installez le port comme d&amp;rsquo;habitude :</description>
    </item>
    
    <item>
      <title>Types de données</title>
      <link>https://www.wikiod.com/fr/erlang/types-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/types-de-donnees/</guid>
      <description>Chaque type de données dans erlang est appelé Term. C&amp;rsquo;est un nom générique qui signifie tout type de données.
Nombres # En Erlang, les nombres sont soit des entiers, soit des flottants. Erlang utilise une précision arbitraire pour les entiers (bignums), donc leurs valeurs ne sont limitées que par la taille de la mémoire de votre système.
1&amp;gt; 11. 11 2&amp;gt; -44. -44 3&amp;gt; 0.1. 0.1 4&amp;gt; 5.1e-3. 0.0051 5&amp;gt; 5.</description>
    </item>
    
    <item>
      <title>Barre d&#39;armature3</title>
      <link>https://www.wikiod.com/fr/erlang/barre-darmature3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/barre-darmature3/</guid>
      <description>Installation de Rebar3 # Rebar3 est écrit en Erlang, vous avez donc besoin d&amp;rsquo;Erlang pour l&amp;rsquo;exécuter. Il est disponible sous forme de binaire que vous pouvez télécharger et exécuter. Récupérez simplement la compilation nocturne et donnez-lui les autorisations d&amp;rsquo;exécution :
$ wget https://s3.amazonaws.com/rebar3/rebar3 &amp;amp;&amp;amp; chmod +x rebar3 Placez ce binaire dans un endroit pratique et ajoutez-le à votre chemin. Par exemple, dans un répertoire bin de votre maison :
$ mkdir ~/bin &amp;amp;&amp;amp; mv rebar3 ~/bin $ export PATH=~/bin:$PATH Cette dernière ligne doit être placée dans votre .</description>
    </item>
    
    <item>
      <title>Processus</title>
      <link>https://www.wikiod.com/fr/erlang/processus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/processus/</guid>
      <description>Création de processus # Nous créons un nouveau processus concurrent en appelant la fonction spawn. La fonction spawn recevra en paramètre une fonction Fun que le processus évaluera. La valeur de retour de la fonction spawn est l&amp;rsquo;identifiant du processus créé (pid).
1&amp;gt; Fun = fun() -&amp;gt; 2+2 end. #Fun&amp;lt;erl_eval.20.52032458&amp;gt; 2&amp;gt; Pid = spawn(Fun). &amp;lt;0.60.0&amp;gt; Vous pouvez également utiliser spawn/3 pour démarrer un processus qui exécutera une fonction spécifique à partir d&amp;rsquo;un module : spawn(Module, Function, Args).</description>
    </item>
    
    <item>
      <title>Comportements</title>
      <link>https://www.wikiod.com/fr/erlang/comportements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/comportements/</guid>
      <description>Définir un comportement # Vous pouvez définir votre propre comportement en ajoutant des directives -callback dans votre module. Par exemple, si les modules implémentant votre comportement ont besoin d&amp;rsquo;une fonction &amp;ldquo;foo&amp;rdquo; qui prend un entier et renvoie un atome :
-module(my_behaviour). -callback foo(integer()) -&amp;gt; atom(). Si vous utilisez ce comportement dans un autre module, le compilateur avertira s&amp;rsquo;il n&amp;rsquo;exporte pas foo/1, et Dialyzer avertira si les types ne sont pas corrects.</description>
    </item>
    
    <item>
      <title>Formater les chaînes</title>
      <link>https://www.wikiod.com/fr/erlang/formater-les-chaines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/formater-les-chaines/</guid>
      <description>Syntaxe # io:format(FormatString, Args) % écriture sur la sortie standard io:format(standard_error, FormatString, Args) % d&amp;rsquo;écriture sur l&amp;rsquo;erreur standard io:format(F, FormatString, Args) % écriture pour ouvrir le fichier io_lib:format(FormatString, Args) % renvoie une iolist Séquences de contrôle courantes dans les chaînes de format # Bien qu&amp;rsquo;il existe de nombreuses séquences de contrôle différentes pour io:format et io_lib:format, la plupart du temps, vous n&amp;rsquo;en utilisez que trois : ~s, ~p et ~w.</description>
    </item>
    
    <item>
      <title>iolistes</title>
      <link>https://www.wikiod.com/fr/erlang/iolistes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/iolistes/</guid>
      <description>Alors qu&amp;rsquo;une chaîne Erlang est une liste d&amp;rsquo;entiers, une &amp;ldquo;iolist&amp;rdquo; est une liste dont les éléments sont soit des entiers, des binaires ou d&amp;rsquo;autres iolists, par ex. [&amp;quot;foo&amp;quot;, $b, $a, $r, &amp;lt;&amp;lt;&amp;quot;baz&amp;quot;&amp;gt;&amp;gt;]. Cette iolist représente la chaîne &amp;quot;foobarbaz&amp;quot;.
Bien que vous puissiez convertir une iolist en binaire avec iolist_to_binary/1, vous n&amp;rsquo;en avez souvent pas besoin, car les fonctions de la bibliothèque Erlang telles que file:write_file/2 et gen_tcp:send/2 acceptent les iolists ainsi que chaînes et binaires.</description>
    </item>
    
    <item>
      <title>comportement gen_server</title>
      <link>https://www.wikiod.com/fr/erlang/comportement-gen_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/comportement-gen_server/</guid>
      <description>gen_server est une fonctionnalité importante d&amp;rsquo;Erlang et nécessite certains prérequis pour comprendre tous les aspects de cette fonctionnalité :
[boucle, récursivité et état][1] [Processus de frai][2] [Passage de message][3] [Principes du Bureau du Procureur][4] Un bon moyen d&amp;rsquo;en savoir plus sur une fonctionnalité d&amp;rsquo;Erlang est de lire directement le code source à partir du [référentiel github officiel][5]. Le comportement de gen_server intègre de nombreuses informations utiles et une structure intéressante dans son cœur.</description>
    </item>
    
    <item>
      <title>NIF</title>
      <link>https://www.wikiod.com/fr/erlang/nif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/erlang/nif/</guid>
      <description>Exemple : heure UNIX actuelle # Voici un exemple très simple pour illustrer comment écrire un NIF.
Structure du répertoire :
nif_test ├── c_src │ ├── Makefile │ └── nif_test.c ├── rebar.config └── src ├── nif_test.app.src └── nif_test.erl Cette structure peut être facilement initialisée à l&amp;rsquo;aide de Rebar3 :
$ rebar3 new lib nif_test &amp;amp;&amp;amp; cd nif_test &amp;amp;&amp;amp; rebar3 new cmake Contenu de nif_test.c :
#include &amp;quot;erl_nif.h&amp;quot; #include &amp;quot;time.h&amp;quot; static ERL_NIF_TERM now(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_int(env, time(0)); } static ErlNifFunc nif_funcs[] = { {&amp;quot;now&amp;quot;, 0, now} }; ERL_NIF_INIT(nif_test,nif_funcs,NULL,NULL,NULL,NULL); Contenu de nif_test.</description>
    </item>
    
  </channel>
</rss>

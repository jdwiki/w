<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel plsql on </title>
    <link>https://www.wikiod.com/fr/docs/plsql/</link>
    <description>Recent content in Tutoriel plsql on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/plsql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec plsql</title>
      <link>https://www.wikiod.com/fr/plsql/debuter-avec-plsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/debuter-avec-plsql/</guid>
      <description>Bonjour le monde # set serveroutput on DECLARE message constant varchar2(32767):= &#39;Hello, World!&#39;; BEGIN dbms_output.put_line(message); END; / La commande set serveroutput on est requise dans les clients SQL*Plus et SQL Developer pour activer la sortie de dbms_output. Sans la commande, rien ne s&amp;rsquo;affiche.
La ligne end; signale la fin du bloc PL/SQL anonyme. Pour exécuter le code à partir de la ligne de commande SQL, vous devrez peut-être taper / au début de la première ligne vide après la dernière ligne du code.</description>
    </item>
    
    <item>
      <title>Procédure PLSQL</title>
      <link>https://www.wikiod.com/fr/plsql/procedure-plsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/procedure-plsql/</guid>
      <description>La procédure PLSQL est un groupe d&amp;rsquo;instructions SQL stockées sur le serveur pour être réutilisées. Cela augmente les performances car les instructions SQL n&amp;rsquo;ont pas besoin d&amp;rsquo;être recompilées à chaque exécution.
Les procédures stockées sont utiles lorsque le même code est requis par plusieurs applications. Le fait d&amp;rsquo;avoir des procédures stockées élimine la redondance et introduit la simplicité dans le code. Lorsqu&amp;rsquo;un transfert de données est nécessaire entre le client et le serveur, les procédures peuvent réduire les coûts de communication dans certaines situations.</description>
    </item>
    
    <item>
      <title>Curseurs</title>
      <link>https://www.wikiod.com/fr/plsql/curseurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/curseurs/</guid>
      <description>Syntaxe # Le curseur cursor_name est votre_instruction_select Le curseur cursor_name (param TYPE) est your_select_statement_using_param FOR x in (your_select_statement) BOUCLE &amp;hellip; Les curseurs déclarés sont difficiles à utiliser, et vous devriez préférer les boucles FOR dans la plupart des cas. Ce qui est très intéressant dans les curseurs par rapport aux simples boucles FOR, c&amp;rsquo;est qu&amp;rsquo;on peut les paramétrer.
Il vaut mieux éviter de faire des boucles avec PL/SQL et des curseurs au lieu d&amp;rsquo;utiliser Oracle SQL de toute façon.</description>
    </item>
    
    <item>
      <title>Collecte en vrac</title>
      <link>https://www.wikiod.com/fr/plsql/collecte-en-vrac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/collecte-en-vrac/</guid>
      <description>## Traitement de données en masse les collections locales ne sont pas autorisées dans les instructions select. Par conséquent, la première étape consiste à créer une collection au niveau du schéma. Si la collection n&amp;rsquo;est pas au niveau du schéma et est utilisée dans les instructions SELECT, cela entraînerait &amp;ldquo;PLS-00642 : les types de collection locaux ne sont pas autorisés dans les instructions SQL&amp;rdquo;
CREATE OR REPLACE TYPE table1_t IS OBJECT ( a_1 INTEGER, a_2 VARCHAR2(10) ); &amp;ndash;Accorder des autorisations sur la collection afin qu&amp;rsquo;elle puisse être utilisée publiquement dans la base de données</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/plsql/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/les-fonctions/</guid>
      <description>Syntaxe # CREATE [OR REPLACE] FUNCTION nom_fonction [ (paramètre [,paramètre]) ]
RETURN return_datatype EST | COMME
[declaration_section] BEGIN section_exécutable
[EXCEPTION exception_section]
END [nom_fonction] ;
Fonctions d&amp;rsquo;appel # Il existe plusieurs façons d&amp;rsquo;utiliser les fonctions.
Appel d&amp;rsquo;une fonction avec une instruction d&amp;rsquo;affectation
DECLARE x NUMBER := functionName(); --functions can be called in declaration section BEGIN x := functionName(); END; Appel d&amp;rsquo;une fonction dans l&amp;rsquo;instruction IF
IF functionName() = 100 THEN Null; END IF; Appel d&amp;rsquo;une fonction dans une instruction SELECT</description>
    </item>
    
    <item>
      <title>Paquets</title>
      <link>https://www.wikiod.com/fr/plsql/paquets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/paquets/</guid>
      <description>Syntaxe # CREATE [OR REPLACE] PACKAGE package_name [AUTHID {CURRENT_USER | DÉFINIR}]
{IS | AS} [PRAGMA SERIALLY_REUSABLE ;]
[collection_type_definition &amp;hellip;]
[record_type_definition &amp;hellip;]
[définition_sous-type &amp;hellip;]
[collection_declaration &amp;hellip;]
[déclaration_constante &amp;hellip;]
[déclaration_exception &amp;hellip;]
[object_declaration &amp;hellip;]
[enregistrement_déclaration &amp;hellip;]
[déclaration_variable &amp;hellip;]
[cursor_spec &amp;hellip;]
[spécification_fonction &amp;hellip;]
[spécification_procédure &amp;hellip;]
[call_spec &amp;hellip;]
[PRAGMA RESTRICT_REFERENCES(assertions) &amp;hellip;]
END [nom_du_paquet] ;
CRÉER OU REMPLACER LE PACKAGE PackageName IS FUNCTION FunctionName(paramètre1 IN VARCHAR2, paramètre2 IN NUMBER) RETURN VARCHAR2 ;
END nom_paquet ;
CRÉER [OU REMPLACER] LE CORPS DU PACKAGE nom_du_paquet {EST | COMME}</description>
    </item>
    
    <item>
      <title>Instruction SI-ALORS-SINON</title>
      <link>https://www.wikiod.com/fr/plsql/instruction-si-alors-sinon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/instruction-si-alors-sinon/</guid>
      <description>Syntaxe # SI [état 1] ALORS
[instructions à exécuter lorsque la condition 1 est VRAIE] ;
ELSIF [condition 2] ALORS
[instructions à exécuter lorsque la condition 2 est VRAIE] ;
AUTRE
[instructions à exécuter lorsque la condition 1 et la condition 2 sont fausses] ;
FIN SI;
SI DONC # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 1; IF v_num1 &amp;gt; v_num2 THEN dbms_output.put_line(&#39;v_num1 is bigger than v_num2&#39;); END IF; END; SI-ALORS-SINON # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 10; IF v_num1 &amp;gt; v_num2 THEN dbms_output.</description>
    </item>
    
    <item>
      <title>Déclencheurs</title>
      <link>https://www.wikiod.com/fr/plsql/declencheurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/declencheurs/</guid>
      <description>Introduction:
Les déclencheurs sont un concept utile en PL/SQL. Un déclencheur est un type spécial de procédure stockée qui ne nécessite pas d&amp;rsquo;être explicitement appelé par l&amp;rsquo;utilisateur. Il s&amp;rsquo;agit d&amp;rsquo;un groupe d&amp;rsquo;instructions, qui est automatiquement déclenché en réponse à une action de modification de données spécifique sur une table ou une relation spécifique, ou lorsque certaines conditions spécifiées sont satisfaites. Les déclencheurs aident à maintenir l&amp;rsquo;intégrité et la sécurité des données.</description>
    </item>
    
    <item>
      <title>Boucle</title>
      <link>https://www.wikiod.com/fr/plsql/boucle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/boucle/</guid>
      <description>Syntaxe # BOUCLE [déclarations] ; EXIT WHEN [condition pour la boucle de sortie] ; TERMINER LA BOUCLE ; Boucle simple # DECLARE v_counter NUMBER(2); BEGIN v_counter := 0; LOOP v_counter := v_counter + 1; dbms_output.put_line(&#39;Line number&#39; || v_counter); EXIT WHEN v_counter = 10; END LOOP; END; Boucle WHILE # La boucle WHILE est exécutée jusqu&amp;rsquo;à ce que la condition de fin soit remplie. Exemple simple :
DECLARE v_counter NUMBER(2); --declaration of counter variable BEGIN v_counter := 0; --point of start, first value of our iteration WHILE v_counter &amp;lt; 10 LOOP --exit condition dbms_output.</description>
    </item>
    
    <item>
      <title>Collections et archives</title>
      <link>https://www.wikiod.com/fr/plsql/collections-et-archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/plsql/collections-et-archives/</guid>
      <description>Utiliser une collection comme type de retour pour une fonction fractionnée # Il est nécessaire de déclarer le type ; ici t_my_list ; une collection est une TABLE OF quelque chose
CREATE OR REPLACE TYPE t_my_list AS TABLE OF VARCHAR2(100); Voici la fonction. Notez le () utilisé comme une sorte de constructeur, et les mots-clés COUNT et EXTEND qui vous aident à créer et à développer votre collection ;
CREATE OR REPLACE FUNCTION cto_table(p_sep in Varchar2, p_list IN VARCHAR2) RETURN t_my_list AS --- this function takes a string list, element being separated by p_sep -- as separator l_string VARCHAR2(4000) := p_list || p_sep; l_sep_index PLS_INTEGER; l_index PLS_INTEGER := 1; l_tab t_my_list := t_my_list(); BEGIN LOOP l_sep_index := INSTR(l_string, p_sep, l_index); EXIT WHEN l_sep_index = 0; l_tab.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel liferay on </title>
    <link>https://www.wikiod.com/fr/docs/liferay/</link>
    <description>Recent content in Tutoriel liferay on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/liferay/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec liferay</title>
      <link>https://www.wikiod.com/fr/liferay/premiers-pas-avec-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/premiers-pas-avec-liferay/</guid>
      <description>Une installation de base pour le développement et les tests # L&amp;rsquo;exécution du dernier Liferay CE est simple :
Allez sur https://www.liferay.com/downloads. Choisissez un forfait parmi ceux répertoriés. Pour les débutants, le bundle Tomcat est un bon choix. Cliquez sur &amp;ldquo;Télécharger&amp;rdquo;. [![Où choisir un forfait.][1]][1]
Décompressez le package de téléchargement chaque fois que vous le souhaitez. Le répertoire décompressé sera le répertoire LIFERAY_HOME. Pour démarrer Liferay, lancez simplement le script LIFERAY_HOME/tomcat-x.</description>
    </item>
    
    <item>
      <title>Crochets dans Liferay</title>
      <link>https://www.wikiod.com/fr/liferay/crochets-dans-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/crochets-dans-liferay/</guid>
      <description>Cela fonctionne avec Liferay Portal jusqu&amp;rsquo;à la version 6.2.
Crochet JSP # Les crochets JSP sont un plugin liferay spécial qui permet de modifier le portlet principal jsp-s, disons que vous voulez modifier le portlet de connexion pour afficher Bienvenue dans ma connexion personnalisée!.
La structure minimale d&amp;rsquo;un Hook Plugin est la suivante :
[project-name]-hook/ └── docroot/ ├── WEB-INF/ │ ├── src/ │ ├── lib/ │ ├── liferay-hook.xml │ ├── liferay-plugin-package.</description>
    </item>
    
    <item>
      <title>Créer un planificateur Quartz dans liferay</title>
      <link>https://www.wikiod.com/fr/liferay/creer-un-planificateur-quartz-dans-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/creer-un-planificateur-quartz-dans-liferay/</guid>
      <description>Un planificateur sert à effectuer des tâches en arrière-plan à certains intervalles définis.
Selon [DTD du portlet Liferay] [1]
&amp;lt;!- L&amp;rsquo;élément scheduler-entry contient les données déclaratives d&amp;rsquo;un planificateur. -&amp;gt;
!ELEMENT scheduler-entry (scheduler-description?, scheduler-event-listener-class, déclencheur)
&amp;lt;!- La valeur scheduler-description décrit un planificateur. -&amp;gt;
!ÉLÉMENT ordonnanceur-description (#PCDATA)
&amp;lt;!- La valeur scheduler-event-listener-class doit être une classe qui implémente com.liferay.portal.kernel.messaging.MessageListener. Cette classe recevra un message à un intervalle régulier spécifié par l&amp;rsquo;élément déclencheur. -&amp;gt;</description>
    </item>
    
    <item>
      <title>Configurer Google Tag Manager (GTM) dans liferay</title>
      <link>https://www.wikiod.com/fr/liferay/configurer-google-tag-manager-gtm-dans-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/configurer-google-tag-manager-gtm-dans-liferay/</guid>
      <description>Cette documentation n&amp;rsquo;est pas spécifique à liferay mais peut être utilisée en référence à n&amp;rsquo;importe quelle application web.
Liferay fournit Google Analytics (appelé GA ahead) par défaut, après avoir configuré l&amp;rsquo;identifiant Analytics GA-##### dans les paramètres du site. Mais cela offre des fonctionnalités limitées, permettant uniquement de suivre les pages vues (titre de la page et URL). Afin de développez-le davantage, nous pouvons soit intégrer le script GA directement sur le thème du site pour déclencher les événements requis, soit utiliser GTM.</description>
    </item>
    
    <item>
      <title>Déploiement d&#39;un plugin</title>
      <link>https://www.wikiod.com/fr/liferay/deploiement-dun-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/deploiement-dun-plugin/</guid>
      <description>Déploiement sur Glassfish # Donc, vous créez d&amp;rsquo;abord un fichier .war disons un portlet de nom &amp;lt;YOUR PLUGIN&amp;gt;.war. Vous voulez le faire fonctionner sur un domaine glassfish sous le portail Liferay.
Étapes vers le succès :
Accédez au Panneau de configuration -&amp;gt; Installation des plugins sur Liferay Appuyez sur Installer de nouveaux portlets Appuyez sur Configuration Remplissez pour Deploy Directory un nouvel emplacement pour le déploiement, disons &amp;lt;VOTRE DOMAINE&amp;gt;/autodeploy2 Vérifiez que dans la ligne suivante la cible est &amp;lt;VOTRE DOMAINE&amp;gt;/autodeploy (c&amp;rsquo;est le répertoire de déploiement par défaut de Glassfish) Appuyez sur Enregistrer Maintenant, le déploiement se fera en copiant-collant des fichiers dans ce nouveau répertoire &amp;lt;VOTRE DOMAINE&amp;gt;/autodeploy2.</description>
    </item>
    
    <item>
      <title>Configuration de SSL</title>
      <link>https://www.wikiod.com/fr/liferay/configuration-de-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/configuration-de-ssl/</guid>
      <description>Assurez-vous d&amp;rsquo;avoir un certificat ssl valide fourni par un tiers. Vous pouvez également utiliser un certificat auto-signé, mais uniquement pour les développeurs. [Letsencrypt][1] fournit des certificats gratuits qui peuvent être utilisés en production&amp;hellip;.
[1] : https://letsencrypt.com
Utilisez keytool pour importer le certificat dans la chaîne de clés de java.
Comment activer SSL sur Tomcat et Liferay # Assurez-vous que votre fichier de configuration Tomcat, server.xml contient cette ligne :
&amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;org.</description>
    </item>
    
    <item>
      <title>Déboguer le serveur liferay distant via Eclipse</title>
      <link>https://www.wikiod.com/fr/liferay/deboguer-le-serveur-liferay-distant-via-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/deboguer-le-serveur-liferay-distant-via-eclipse/</guid>
      <description>Déboguer le serveur liferay distant via Eclipse (sans le plug-in eclipse du connecteur Liferay Remote IDE) # Pour déboguer une instance de serveur, démarrez en mode débogage. Pour ce faire, configurez ces paramètres à transmettre au serveur :
-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n à setenv.bat(Windows) ou setenv.sh(Unix)
Ceux-ci initialisent le serveur en mode débogage et écoutent les requêtes de débogage sur le port donné. Démarrez le serveur et publiez la configuration.
Dans Eclipse, la configuration de débogage à distance doit être configurée pour attacher la source au serveur distant.</description>
    </item>
    
    <item>
      <title>Utilisation du service Web reposant dans Liferay</title>
      <link>https://www.wikiod.com/fr/liferay/utilisation-du-service-web-reposant-dans-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/utilisation-du-service-web-reposant-dans-liferay/</guid>
      <description>Consommer le service Liferay JSON pour les requêtes GET # Liferay expose de nombreux services par défaut et personnalisés disponibles pour d&amp;rsquo;autres systèmes via JSON. Pour explorer les services sur une instance liferay particulière, utilisez une URL donnée - Une instance locale dans ce cas :
http://localhost:8080/api/jsonws/ [![entrez la description de l&amp;rsquo;image ici][1]][1]
Sélectionnez le service requis, consommez le service avec la syntaxe et les paramètres donnés :
/user/get-user-by-email-address Utilisez companyId et emailAddress pour récupérer l&amp;rsquo;utilisateur avec les types de données attendus, ainsi que les éventuelles exceptions à gérer par le consommateur.</description>
    </item>
    
    <item>
      <title>Communication inter portlets</title>
      <link>https://www.wikiod.com/fr/liferay/communication-inter-portlets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/communication-inter-portlets/</guid>
      <description>Ce manuel contient les différentes manières dont les portlets peuvent se coordonner ou communiquer entre eux et les différents scénarios pour lesquels une approche particulière est utilisée.
Références:
[Paramètre de rendu public][1] [Spécifications JSR 286][2] [Session portlet][3] [1] : https://blogs.oracle.com/deepakg/entry/jsr286_public_render_parameter_feature [2] : https://www.google.co.in/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiMjJudz4nRAhUE7hoKHVN1C9oQFggcMAA&amp;amp;url=https%3A%2F%2Fwiki.jasig.org% 2Fdownload%2Fattachments%2F25002428%2Fportlet-2-spec.pdf&amp;amp;usg=AFQjCNEDhqnvuPOfFdRgn8KV1fq_RRyjvQ [3] : http://proliferay.com/liferay-portlet-session-attribute/
Utilisation du paramètre de rendu public # Cette approche a été introduite dans JSR 286.
Dans JSR 168, les paramètres de rendu définis dans processAction d&amp;rsquo;un portlet n&amp;rsquo;étaient disponibles que dans ce portlet.</description>
    </item>
    
    <item>
      <title>Utilisation de requêtes SQL dynamiques et personnalisées dans Liferay</title>
      <link>https://www.wikiod.com/fr/liferay/utilisation-de-requetes-sql-dynamiques-et-personnalisees-dans-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/liferay/utilisation-de-requetes-sql-dynamiques-et-personnalisees-dans-liferay/</guid>
      <description>Il existe des scénarios lorsqu&amp;rsquo;il s&amp;rsquo;agit de la couche de service dans liferay, lorsque nous devons interroger la base de données avec trop de clauses ou traiter plusieurs tables. Dans de tels cas, nous utilisons l&amp;rsquo;un des éléments suivants :
Requête dynamique (wrapper sur l&amp;rsquo;API de critères Hibernate)
Requêtes SQL personnalisées
Références:
[SQL personnalisé][1] [Requête dynamique][2] [1] : https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/custom-sql [2] : https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/dynamic-query
Utilisation de la requête dynamique dans Liferay # Pour la plupart des scénarios impliquant des entités de la couche de service, nous pouvons nous contenter des appels de service par défaut, avec l&amp;rsquo;aide des chercheurs également.</description>
    </item>
    
  </channel>
</rss>

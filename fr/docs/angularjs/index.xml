<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel AngularJS on </title>
    <link>https://www.wikiod.com/fr/docs/angularjs/</link>
    <description>Recent content in Tutoriel AngularJS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec AngularJS</title>
      <link>https://www.wikiod.com/fr/angularjs/premiers-pas-avec-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/premiers-pas-avec-angularjs/</guid>
      <description>Commencer # Créez un nouveau fichier HTML et collez le contenu suivant :
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, Angular&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-init=&amp;quot;name=&#39;World&#39;&amp;quot;&amp;gt; &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt; &amp;lt;input ng-model=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;span&amp;gt;Hello, {{ name }}!&amp;lt;/span&amp;gt; &amp;lt;p ng-bind=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; [Démo en direct] (http://jsfiddle.net/U3pVM/26397/)
Lorsque vous ouvrez le fichier avec un navigateur, vous verrez un champ de saisie suivi du texte &amp;ldquo;Hello, World!&amp;rdquo;. La modification de la valeur dans l&amp;rsquo;entrée mettra à jour le texte en temps réel, sans qu&amp;rsquo;il soit nécessaire d&amp;rsquo;actualiser toute la page.</description>
    </item>
    
    <item>
      <title>Profilage et performances</title>
      <link>https://www.wikiod.com/fr/angularjs/profilage-et-performances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/profilage-et-performances/</guid>
      <description>7 Améliorations simples des performances # 1) Utilisez ng-repeat avec parcimonie
L&amp;rsquo;utilisation de [ng-repeat][1] dans les vues entraîne généralement de mauvaises performances, en particulier lorsqu&amp;rsquo;il y a des ng-repeat imbriqués.
** C&amp;rsquo;est super lent ! **
&amp;lt;div ng-repeat=&amp;quot;user in userCollection&amp;quot;&amp;gt; &amp;lt;div ng-repeat=&amp;quot;details in user&amp;quot;&amp;gt; {{details}} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Essayez d&amp;rsquo;éviter autant que possible les répétitions imbriquées. Une façon d&amp;rsquo;améliorer les performances de ng-repeat consiste à utiliser track by $index (ou un autre champ d&amp;rsquo;identification).</description>
    </item>
    
    <item>
      <title>Directives personnalisées</title>
      <link>https://www.wikiod.com/fr/angularjs/directives-personnalisees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/directives-personnalisees/</guid>
      <description>Ici, vous découvrirez la fonctionnalité Directives d&amp;rsquo;AngularJS. Vous trouverez ci-dessous des informations sur ce que sont les directives, ainsi que des exemples de base et avancés sur la façon de les utiliser.
Paramètres # Paramètre Détails portée Propriété permettant de définir la portée de la directive. Il peut être défini comme faux, vrai ou comme portée isolée : { @, =, &amp;lt;, &amp;amp; }. portée : faux La directive utilise la portée parent.</description>
    </item>
    
    <item>
      <title>Directives intégrées</title>
      <link>https://www.wikiod.com/fr/angularjs/directives-integrees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/directives-integrees/</guid>
      <description>Expressions angulaires - Texte vs nombre # Cet exemple montre comment les expressions angulaires sont évaluées lors de l&amp;rsquo;utilisation de type=&amp;quot;text&amp;quot; et type=&amp;quot;number&amp;quot; pour l&amp;rsquo;élément d&amp;rsquo;entrée. Considérez le contrôleur et la vue suivants :
Manette
var app = angular.module(&#39;app&#39;, []); app.controller(&#39;ctrl&#39;, function($scope) { $scope.textInput = { value: &#39;5&#39; }; $scope.numberInput = { value: 5 }; }); Voir
&amp;lt;div ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;ctrl&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;textInput.value&amp;quot;&amp;gt; {{ textInput.value + 5 }} &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;numberInput.</description>
    </item>
    
    <item>
      <title>Contrôleurs</title>
      <link>https://www.wikiod.com/fr/angularjs/controleurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/controleurs/</guid>
      <description>Syntaxe # &amp;lt;htmlElement of-controller=&amp;ldquo;controllerName&amp;rdquo;&amp;gt; &amp;hellip; &amp;lt;/htmlElement&amp;gt; &amp;lt;script&amp;gt; app.controller(&amp;lsquo;controllerName&amp;rsquo;, controllerFunction); &amp;lt;/script&amp;gt; Votre premier contrôleur # Un contrôleur est une structure de base utilisée dans Angular pour préserver la portée et gérer certaines actions au sein d&amp;rsquo;une page. Chaque contrôleur est couplé à une vue HTML.
Vous trouverez ci-dessous un passe-partout de base pour une application angulaire :
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&#39;MyFirstApp&#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First App&amp;lt;/title&amp;gt; &amp;lt;!-- angular source --&amp;gt; &amp;lt;script src=&amp;quot;https://code.</description>
    </item>
    
    <item>
      <title>Composants</title>
      <link>https://www.wikiod.com/fr/angularjs/composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/composants/</guid>
      <description>Paramètres # Paramètre Détails = Pour utiliser la liaison de données bidirectionnelle. Cela signifie que si vous mettez à jour cette variable dans la portée de votre composant, la modification sera répercutée sur la portée parent. ***** Liaisons unidirectionnelles lorsque nous voulons simplement lire une valeur à partir d&amp;rsquo;une portée parent et ne pas la mettre à jour. @ Paramètres de chaîne. &amp;amp; Pour les rappels au cas où votre composant aurait besoin de sortir quelque chose dans sa portée parent.</description>
    </item>
    
    <item>
      <title>Promesses angulaires avec le service $q</title>
      <link>https://www.wikiod.com/fr/angularjs/promesses-angulaires-avec-le-service-q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/promesses-angulaires-avec-le-service-q/</guid>
      <description>Enveloppez une valeur simple dans une promesse en utilisant $q.when() # Si tout ce dont vous avez besoin est d&amp;rsquo;encapsuler la valeur dans une promesse, vous n&amp;rsquo;avez pas besoin d&amp;rsquo;utiliser la syntaxe longue comme ici :
//OVERLY VERBOSE var defer; defer = $q.defer(); defer.resolve([&#39;one&#39;, &#39;two&#39;]); return defer.promise; Dans ce cas, vous pouvez simplement écrire :
//BETTER return $q.when([&#39;one&#39;, &#39;two&#39;]); $q.when et son alias $q.resolve # Enveloppe un objet qui pourrait être une valeur ou une promesse (tierce partie) alors capable dans une promesse $q.</description>
    </item>
    
    <item>
      <title>Validation du formulaire</title>
      <link>https://www.wikiod.com/fr/angularjs/validation-du-formulaire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/validation-du-formulaire/</guid>
      <description>États de formulaire et d&amp;rsquo;entrée # Les formulaires angulaires et les entrées ont différents états qui sont utiles lors de la validation du contenu
États d&amp;rsquo;entrée
État Descriptif $touché Champ a été touché $intouché Le champ n&amp;rsquo;a pas été touché $prime Le champ n&amp;rsquo;a pas été modifié $sale Le champ a été modifié $valide Le contenu du champ est valide $invalide Le contenu du champ n&amp;rsquo;est pas valide Tous les états ci-dessus sont des propriétés booléennes et peuvent être vrais ou faux.</description>
    </item>
    
    <item>
      <title>Tests unitaires</title>
      <link>https://www.wikiod.com/fr/angularjs/tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/tests-unitaires/</guid>
      <description>Cette rubrique fournit des exemples de tests unitaires des différentes constructions dans AngularJS. Les tests unitaires sont souvent écrits à l&amp;rsquo;aide de [Jasmine] [1], un cadre de test basé sur le comportement populaire. Lors des tests unitaires de constructions angulaires, vous devrez inclure [ngMock][2] en tant que dépendance lors de l&amp;rsquo;exécution des tests unitaires.
[1] : http://jasmine.github.io/ [2] : https://docs.angularjs.org/api/ngMock
Test unitaire d&amp;rsquo;un composant (1.5+) # Code composant :
angular.module(&#39;myModule&#39;, []).</description>
    </item>
    
    <item>
      <title>Prestations de service</title>
      <link>https://www.wikiod.com/fr/angularjs/prestations-de-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angularjs/prestations-de-service/</guid>
      <description>Création d&amp;rsquo;un service à l&amp;rsquo;aide de angular.factory # Définissez d&amp;rsquo;abord le service (dans ce cas, il utilise le modèle d&amp;rsquo;usine):
.factory(&#39;dataService&#39;, function() { var dataObject = {}; var service = { // define the getter method get data() { return dataObject; }, // define the setter method set data(value) { dataObject = value || {}; } }; // return the &amp;quot;service&amp;quot; object to expose the getter/setter return service; }) Vous pouvez maintenant utiliser le service pour partager des données entre les contrôleurs :</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel android-gradle on </title>
    <link>https://www.wikiod.com/fr/docs/android-gradle/</link>
    <description>Recent content in Tutoriel android-gradle on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/android-gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec android-gradle</title>
      <link>https://www.wikiod.com/fr/android-gradle/premiers-pas-avec-android-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/premiers-pas-avec-android-gradle/</guid>
      <description>Plugin Android pour Gradle # Comme décrit dans la section des remarques, le système de génération Android utilise le plug-in Android pour Gradle pour prendre en charge la création d&amp;rsquo;applications Android avec Gradle.
Vous pouvez spécifier la version du plug-in Android pour Gradle dans le fichier &amp;ldquo;build.gradle&amp;rdquo; de niveau supérieur. La version du plug-in s&amp;rsquo;applique à tous les modules intégrés dans ce projet Android Studio.
buildscript { ... dependencies { classpath &#39;com.</description>
    </item>
    
    <item>
      <title>Configurer les saveurs du produit</title>
      <link>https://www.wikiod.com/fr/android-gradle/configurer-les-saveurs-du-produit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/configurer-les-saveurs-du-produit/</guid>
      <description>Les versions du produit prennent en charge les mêmes propriétés que defaultConfig, car defaultConfig appartient en fait à la classe ProductFlavor. Cela signifie que vous pouvez fournir la configuration de base pour toutes les versions dans le bloc defaultConfig {}, et chaque version peut remplacer n&amp;rsquo;importe laquelle de ces valeurs par défaut, comme applicationId.
Constantes de saveur et ressources dans build.gradle # Vous pouvez utiliser gradle pour avoir des constantes BuildConfig et des valeurs res par saveur.</description>
    </item>
    
    <item>
      <title>Configurez votre build avec Gradle</title>
      <link>https://www.wikiod.com/fr/android-gradle/configurez-votre-build-avec-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/configurez-votre-build-avec-gradle/</guid>
      <description>Le système de génération d&amp;rsquo;Android compile les ressources et le code source de l&amp;rsquo;application, puis les regroupe dans des APK que vous pouvez tester, déployer, signer et distribuer. Android Studio utilise Gradle, une boîte à outils de construction avancée, pour automatiser et gérer le processus de construction, tout en vous permettant de définir des configurations de construction personnalisées flexibles.
Documents officiels # https://developer.android.com/studio/build/index.html
## Pourquoi y a-t-il deux fichiers build.gradle dans un projet Android Studio ?</description>
    </item>
    
    <item>
      <title>Configurer les paramètres de signature</title>
      <link>https://www.wikiod.com/fr/android-gradle/configurer-les-parametres-de-signature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/configurer-les-parametres-de-signature/</guid>
      <description>Définir la configuration de la signature dans un fichier externe # Vous pouvez définir la configuration de signature dans un fichier externe en tant que signing.properties dans le répertoire racine de votre projet.
Par exemple, vous pouvez définir ces clés (vous pouvez utiliser vos noms préférés) :
STORE_FILE=myStoreFileLocation STORE_PASSWORD=myStorePassword KEY_ALIAS=myKeyAlias KEY_PASSWORD=mykeyPassword Puis dans votre fichier build.gradle :
android { signingConfigs { release } buildTypes { release { signingConfig signingConfigs.release } } } Ensuite, vous pouvez introduire des vérifications pour éviter les problèmes de progression dans le processus de construction.</description>
    </item>
    
    <item>
      <title>Code de réduction et ressources</title>
      <link>https://www.wikiod.com/fr/android-gradle/code-de-reduction-et-ressources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/code-de-reduction-et-ressources/</guid>
      <description>Pour rendre votre fichier APK aussi petit que possible, vous devez activer la réduction pour supprimer le code et les ressources inutilisés dans la version de votre version.
Réduisez le code avec ProGuard # Pour activer la réduction de code avec ProGuard, ajoutez minifyEnabled true au type de construction approprié dans votre fichier build.gradle.
android { buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile(‘proguard-android.txt&#39;), &#39;proguard-rules.pro&#39; } } } où:
minifyEnabled true : active la réduction du code La méthode getDefaultProguardFile(‘proguard-android.</description>
    </item>
    
    <item>
      <title>Déclarer les dépendances</title>
      <link>https://www.wikiod.com/fr/android-gradle/declarer-les-dependances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/declarer-les-dependances/</guid>
      <description>Déclarer les dépendances pour les saveurs # Des dépendances peuvent être ajoutées pour des saveurs de produit spécifiques de la même manière que [build configurations][1].
android { ... productFlavors { flavor1 { //... } flavor2 { //... } } } dependencies { flavor1Compile &#39;com.android.support:appcompat-v7:24.1.1&#39; flavor1Compile &#39;com.google.firebase:firebase-crash:9.4.0&#39; flavor2Compile &#39;com.android.support:appcompat-v7:24.1.1&#39; } [1] : https://www.wikiod.com/fr/android-gradle/declarer-les-dependances#Déclarer les dépendances pour les configurations
Comment ajouter des dépendances # L&amp;rsquo;exemple ci-dessous décrit comment déclarer trois types différents de dépendances directes dans le fichier build.</description>
    </item>
    
    <item>
      <title>Configurer les types de construction</title>
      <link>https://www.wikiod.com/fr/android-gradle/configurer-les-types-de-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/configurer-les-types-de-construction/</guid>
      <description>Paramètres # Paramètre Détail applicationIdSuffix Suffixe d&amp;rsquo;ID d&amp;rsquo;application appliqué à cette configuration de base consumerProguardFiles Fichiers de règles ProGuard à inclure dans l&amp;rsquo;AAR publié debuggable Si ce type de construction doit générer un apk débogable embedMicroApp Si une application Android Wear liée doit être intégrée dans une variante utilisant ce type de build jniDebuggable Si ce type de build est configuré pour générer un APK avec du code natif débogable manifestPlaceholders Les espaces réservés du manifeste minifyEnabled Si Minify est activé pour ce type de build multiDexEnabled Si Multi-Dex est activé pour cette variante name Nom de ce type de build proguardFiles Renvoie les fichiers de configuration ProGuard à utiliser pseudoLocalesEnabled S&amp;rsquo;il faut générer des pseudo paramètres régionaux dans l&amp;rsquo;APK renderscriptDebuggable Si le type de construction est configuré pour générer un apk avec du code RenderScript débogable renderscriptOptimLevel Niveau d&amp;rsquo;optimisation à utiliser par le compilateur renderscript shrinkResources Si la réduction des ressources inutilisées est activée.</description>
    </item>
    
    <item>
      <title>Comment inclure des fichiers aar dans un projet sous Android</title>
      <link>https://www.wikiod.com/fr/android-gradle/comment-inclure-des-fichiers-aar-dans-un-projet-sous-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/comment-inclure-des-fichiers-aar-dans-un-projet-sous-android/</guid>
      <description>Comment ajouter une dépendance .aar dans un module ? # Dans un module (librairie ou application) où vous avez besoin du fichier aar vous devez ajouter dans votre build.gradle le repository :
repositories { flatDir { dirs &#39;libs&#39; } } et ajoutez la dépendance :
dependencies { compile(name:&#39;nameOfYourAARFileWithoutExtension&#39;, ext:&#39;aar&#39;) } Faites attention au chemin relatif du dossier libs que vous utilisez dans le module.
Le fichier aar n&amp;rsquo;inclut pas les dépendances transitives # Le fichier aar ne contient pas les dépendances [transitive][1] et n&amp;rsquo;a pas de fichier pom qui décrit les dépendances utilisées par la bibliothèque.</description>
    </item>
    
    <item>
      <title>Gradle - Informations sur les balises</title>
      <link>https://www.wikiod.com/fr/android-gradle/gradle---informations-sur-les-balises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-gradle/gradle---informations-sur-les-balises/</guid>
      <description>Gradle - Informations sur les balises # Niveau : Il est utilisé pour faire de la construction pour n&amp;rsquo;importe quel logiciel, c&amp;rsquo;est un langage spécifique au domaine utilisé pour configurer et remplir tous les plugins, bibliothèques téléchargées à partir de référentiels.
Utiliser des plug-ins :
Apply plugin: ‘com.android.application’ Le plugin est une propriété sous forme de valeur de clé. Dans la déclaration ci-dessus, le plugin désigne la clé et la chaîne de droite en une seule couche devient sa valeur.</description>
    </item>
    
  </channel>
</rss>

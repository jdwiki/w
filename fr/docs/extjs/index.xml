<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>extjs Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/extjs/</link>
    <description>Recent content in extjs Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/extjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec extjs</title>
      <link>https://www.wikiod.com/fr/extjs/premiers-pas-avec-extjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/extjs/premiers-pas-avec-extjs/</guid>
      <description>Création d&amp;rsquo;une application Hello World - Via Sencha Cmd # ##Installation et configuration
L&amp;rsquo;utilisation typique d&amp;rsquo;ExtJS exploite le framework pour créer des applications riches d&amp;rsquo;une seule page (RIA). La façon la plus simple de commencer est d&amp;rsquo;utiliser [Sencha Cmd][sencha-cmd_promo], un outil de construction CLI couvrant la plupart des préoccupations générales dans un cycle de vie de déploiement, principalement :
gestion des packages et des dépendances compilation de code / groupement et minification gestion des stratégies de build pour différentes cibles et plateformes &amp;quot; [Télécharger Sencha Cmd][sencha-cmd_download]</description>
    </item>
    
    <item>
      <title>MVCMVVM - Architecture d&#39;applications</title>
      <link>https://www.wikiod.com/fr/extjs/mvcmvvm---architecture-dapplications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/extjs/mvcmvvm---architecture-dapplications/</guid>
      <description>Présentation des modèles # Un modèle représente un objet de données dans une application. Par exemple, vous pouvez avoir un modèle tel que : Fruit, Car, Building, etc. dans votre application. Les modèles sont normalement utilisés par les magasins. Voici un exemple de définition d&amp;rsquo;une nouvelle classe de modèle. par exemple.
Ext.define(&#39;MyApp.model.Person&#39;, { extend: &#39;Ext.data.Model&#39;, fields: [ {name: &#39;name&#39;, type: &#39;string&#39;}, {name: &#39;surname&#39;, type: &#39;string&#39;}, {name: &#39;age&#39;, type: &#39;int&#39;} ], getFullName: function() { return this.</description>
    </item>
    
    <item>
      <title>ExtJS AJAX</title>
      <link>https://www.wikiod.com/fr/extjs/extjs-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/extjs/extjs-ajax/</guid>
      <description>Une instance singleton d&amp;rsquo;une classe [Ext.data.Connection][1]. Cette classe est utilisée pour communiquer avec votre côté serveur.
[1] :http://docs.sencha.com/extjs/6.0.1/classic/src/Connection.js.html#Ext.data.Connection
Requête de base # Certaines des propriétés de classe Ext.Data.Connection
Propriétés Détails URL Adresse de la demande timeout Temps d&amp;rsquo;attente en millisecondes succès Retour sur succès échec Retour sur échec Ext.Ajax.on(&amp;quot;beforerequest&amp;quot;, function(conn , options , eOpts) { console.log(&amp;quot;beforerequest&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestcomplete&amp;quot;, function(conn , response , options , eOpts) { console.log(&amp;quot;requestcomplete&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestexception&amp;quot;, function(conn , response , options , eOpts) { console.</description>
    </item>
    
    <item>
      <title>Pièges courants et meilleures pratiques</title>
      <link>https://www.wikiod.com/fr/extjs/pieges-courants-et-meilleures-pratiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/extjs/pieges-courants-et-meilleures-pratiques/</guid>
      <description>Étendre vs Remplacer # Remplacements : # Remplacer le fichier :
Ext.define(&#39;MyApp.override.CornField&#39;, override: &#39;Ext.form.field.Text&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Utiliser dans l&amp;rsquo;application :
{ xtype: &#39;textfield&#39; } Extensions : # Remplacer le fichier :
Ext.define(&#39;MyApp.form.field.CornField&#39;, extend: &#39;Ext.form.field.Text&#39;, alias: &#39;widget.cornfield&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Utiliser dans l&amp;rsquo;application :
{ xtype: &#39;cornfield&#39; } Explication # ExtJS propose deux manières principales de modifier le comportement des classes existantes : les étendre et les remplacer.</description>
    </item>
    
    <item>
      <title>Modèle d&#39;événement</title>
      <link>https://www.wikiod.com/fr/extjs/modele-devenement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/extjs/modele-devenement/</guid>
      <description>ExtJS préconise l&amp;rsquo;utilisation du tir et de l&amp;rsquo;écoute des événements entre les classes. En déclenchant des événements et en écoutant les événements déclenchés, les classes ne nécessitent aucune connaissance &amp;ldquo;sale&amp;rdquo; de la structure de classe des autres et empêchent le code de couplage. De plus, les événements facilitent l&amp;rsquo;écoute de plusieurs instances du même composant en autorisant un écouteur générique pour tous les objets avec le même sélecteur. Enfin, d&amp;rsquo;autres classes peuvent également être en mesure d&amp;rsquo;utiliser des événements qui existent déjà.</description>
    </item>
    
  </channel>
</rss>

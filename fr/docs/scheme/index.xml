<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schéma Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/scheme/</link>
    <description>Recent content in Schéma Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec le régime</title>
      <link>https://www.wikiod.com/fr/scheme/demarrer-avec-le-regime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/demarrer-avec-le-regime/</guid>
      <description>Installation du schéma CHICKEN # CHICKEN est un interpréteur et compilateur Scheme avec son propre système de module d&amp;rsquo;extension appelé &amp;ldquo;eggs&amp;rdquo;. Il est capable de compiler Scheme en code natif en compilant d&amp;rsquo;abord Scheme en C.
Installation # Debian ou Ubuntu ou d&amp;rsquo;autres distributions dérivées : # sudo apt-get install chicken-bin Fedora/RHEL/CentOS : # sudo yum install chicken-bin ArchLinux : # sudo pacman -S chicken ## Gentoo :
sudo emerge -av dev-scheme/chicken OS X avec Homebrew : # brew install chicken OpenBSD # doas pkg_add -vi chicken Microsoft Windows # Installez MSYS2</description>
    </item>
    
    <item>
      <title>Macros de schéma</title>
      <link>https://www.wikiod.com/fr/scheme/macros-de-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/macros-de-schema/</guid>
      <description>Macros hygiéniques et référentiellement transparentes avec des règles de syntaxe # Le plus grand avantage de LISP et de Scheme par rapport aux autres langages de programmation traditionnels est leur macro-système. Contrairement au préprocesseur C et à d&amp;rsquo;autres langages de macro, les macros Scheme prennent du code analysé en entrée et renvoient du code étendu en sortie. C&amp;rsquo;est l&amp;rsquo;une des applications de l&amp;rsquo;expression &amp;ldquo;le code est une donnée&amp;rdquo; de Scheme, et c&amp;rsquo;est ce qui rend le langage si puissant.</description>
    </item>
    
    <item>
      <title>Implémentation de différents algorithmes de tris</title>
      <link>https://www.wikiod.com/fr/scheme/implementation-de-differents-algorithmes-de-tris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/implementation-de-differents-algorithmes-de-tris/</guid>
      <description>Tri rapide # Quicksort est un algorithme de tri courant avec une complexité de cas moyenne de O(n log n) et une complexité de pire cas de O(n^2). Son avantage par rapport aux autres méthodes O(n log n) est qu&amp;rsquo;elle peut être exécutée sur place.
Quicksort divise l&amp;rsquo;entrée sur une valeur de pivot choisie, séparant la liste entre les valeurs inférieures et les valeurs supérieures (ou égales) au pivot. Le fractionnement de la liste se fait facilement avec filter.</description>
    </item>
    
    <item>
      <title>Entrée Sortie dans le schéma</title>
      <link>https://www.wikiod.com/fr/scheme/entree-sortie-dans-le-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/entree-sortie-dans-le-schema/</guid>
      <description>L&amp;rsquo;entrée et la sortie dans le schéma sont généralement gérées via des ports. Un port est une structure de données utilisée pour interagir avec le monde extérieur à Scheme. Un port n&amp;rsquo;est pas limité aux fichiers mais peut être utilisé pour lire/écrire sur les sockets.
À certains égards, l&amp;rsquo;objet port est une sorte d&amp;rsquo;objet universel qui peut non seulement manipuler des fichiers et des sockets, mais également tout type d&amp;rsquo;opération de lecture/écriture avec le système d&amp;rsquo;exploitation.</description>
    </item>
    
    <item>
      <title>Syntaxe</title>
      <link>https://www.wikiod.com/fr/scheme/syntaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/syntaxe/</guid>
      <description>Expression S # Une expression dans Scheme est ce qui va être exécuté. Une expression S, comme on l&amp;rsquo;appelle généralement, commence par un ( et se termine par un ). Le premier membre de l&amp;rsquo;expression est ce qui va être exécuté. Le membre suivant de l&amp;rsquo;expression sont les paramètres qui seront envoyés à l&amp;rsquo;expression lors de l&amp;rsquo;évaluation de l&amp;rsquo;expression.
Par exemple, ajouter des nombres :
(+ 1 2 3) Dans ce cas, + est un symbole pour une fonction add qui prend plusieurs paramètres.</description>
    </item>
    
    <item>
      <title>Paires</title>
      <link>https://www.wikiod.com/fr/scheme/paires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scheme/paires/</guid>
      <description>Une paire est l&amp;rsquo;un des types de données les plus élémentaires du schéma. Il est aussi généralement appelé contre-cellules.
Créer une paire # Une paire peut être créée avec la fonction cons. Le nom de la fonction signifie constructeur. Dans Scheme, tout est à peu près basé sur les paires.
(cons a b) La fonction renvoie une paire contenant les éléments &amp;lsquo;a&amp;rsquo; et &amp;lsquo;b&amp;rsquo;. Le premier paramètre de cons est appelé car (Content Address Register) et le deuxième argument est le cdr (Content Decrement Register).</description>
    </item>
    
  </channel>
</rss>

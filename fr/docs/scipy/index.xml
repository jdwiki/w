<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel scipy on </title>
    <link>https://www.wikiod.com/fr/docs/scipy/</link>
    <description>Recent content in Tutoriel scipy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec scipy</title>
      <link>https://www.wikiod.com/fr/scipy/demarrer-avec-scipy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scipy/demarrer-avec-scipy/</guid>
      <description>Convertir une matrice clairsemée en une matrice dense à l&amp;rsquo;aide de SciPy # from scipy.sparse import csr_matrix A = csr_matrix([[1,0,2],[0,3,0]]) &amp;gt;&amp;gt;&amp;gt;A &amp;lt;2x3 sparse matrix of type &#39;&amp;lt;type &#39;numpy.int64&#39;&amp;gt;&#39; with 3 stored elements in Compressed Sparse Row format&amp;gt; &amp;gt;&amp;gt;&amp;gt; A.todense() matrix([[1, 0, 2], [0, 3, 0]]) &amp;gt;&amp;gt;&amp;gt; A.toarray() array([[1, 0, 2], [0, 3, 0]]) Manipulation d&amp;rsquo;images à l&amp;rsquo;aide de Scipy (redimensionnement d&amp;rsquo;image de base) # SciPy fournit des fonctions de manipulation d&amp;rsquo;image de base.</description>
    </item>
    
    <item>
      <title>Lissage d&#39;un signal</title>
      <link>https://www.wikiod.com/fr/scipy/lissage-dun-signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scipy/lissage-dun-signal/</guid>
      <description>Utilisation d&amp;rsquo;un filtre Savitzky–Golay # Étant donné un signal bruyant :
import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 plt.plot(x,y) plt.show() [![entrez la description de l&amp;rsquo;image ici][1]][1]
on peut le lisser en utilisant un filtre Savitzky–Golay/scipy.github.io/devdocs/generated/scipy.signal.saving_filter. html#scipy.signal.saving_filter) :
[![entrez la description de l&amp;rsquo;image ici][2]][2]
import scipy.signal import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.</description>
    </item>
    
    <item>
      <title>Fonctions d&#39;ajustement avec scipy.optimize curve_fit</title>
      <link>https://www.wikiod.com/fr/scipy/fonctions-dajustement-avec-scipyoptimize-curve_fit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scipy/fonctions-dajustement-avec-scipyoptimize-curve_fit/</guid>
      <description>L&amp;rsquo;adaptation d&amp;rsquo;une fonction qui décrit l&amp;rsquo;occurrence attendue de points de données à des données réelles est souvent requise dans les applications scientifiques. Un optimiseur possible pour cette tâche est curve_fit de scipy.optimize. Dans ce qui suit, un exemple d&amp;rsquo;application de curve_fit est donné.
Ajuster une fonction aux données d&amp;rsquo;un histogramme # Supposons qu&amp;rsquo;il y ait un pic de données distribuées normalement (gaussiennes) (moyenne : 3,0, écart type : 0,3) dans un arrière-plan en décroissance exponentielle.</description>
    </item>
    
    <item>
      <title>Comment écrire une fonction jacobienne pour optimiser.minimiser</title>
      <link>https://www.wikiod.com/fr/scipy/comment-ecrire-une-fonction-jacobienne-pour-optimiserminimiser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scipy/comment-ecrire-une-fonction-jacobienne-pour-optimiserminimiser/</guid>
      <description>Syntaxe # importer numpy en tant que np depuis scipy.optimize import _minimize de scipy import spécial importez matplotlib.pyplot en tant que plt Notez le trait de soulignement avant &amp;ldquo;minimize&amp;rdquo; lors de l&amp;rsquo;importation depuis scipy.optimize ; &amp;lsquo;_minimiser&amp;rsquo; De plus, j&amp;rsquo;ai testé les fonctions de [ce lien][1] avant de faire cette section, et j&amp;rsquo;ai trouvé que j&amp;rsquo;avais moins de problèmes/ça fonctionnait plus vite, si j&amp;rsquo;importais &amp;lsquo;spécial&amp;rsquo; séparément. La fonction Rosenbrock sur la page liée était incorrecte - vous devez d&amp;rsquo;abord configurer la barre de couleurs ; J&amp;rsquo;ai posté un code alternatif mais je pense que cela pourrait être mieux.</description>
    </item>
    
    <item>
      <title>rv_continuous pour la distribution avec paramètres</title>
      <link>https://www.wikiod.com/fr/scipy/rv_continuous-pour-la-distribution-avec-parametres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/scipy/rv_continuous-pour-la-distribution-avec-parametres/</guid>
      <description>Binôme négatif sur les réels positifs # from scipy.stats import rv_continuous import numpy class Neg_exp(rv_continuous): def _cdf(self, x, lamda): return 1-numpy.exp(-lamda*x) neg_exp = Neg_exp(name=&amp;quot;Negative exponential&amp;quot;, a=0) print (neg_exp.pdf(0,.5)) print (neg_exp.pdf(5,.5)) print (neg_exp.cdf(5,.5)) print (neg_exp.stats(0.5)) print (neg_exp.rvs(0.5)) Il est essentiel de définir _pdf ou _cdf car scipy déduit les paramètres de l&amp;rsquo;autre fonction (que vous ne définissez pas) et l&amp;rsquo;ordre de ces paramètres dans tous les appels de fonctions que vous effectuez, à partir de votre définition.</description>
    </item>
    
  </channel>
</rss>

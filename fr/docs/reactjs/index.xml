<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Réagir Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/reactjs/</link>
    <description>Recent content in Réagir Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec React</title>
      <link>https://www.wikiod.com/fr/reactjs/premiers-pas-avec-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/premiers-pas-avec-react/</guid>
      <description>Qu&amp;rsquo;est-ce que ReactJS ? # ReactJS est une bibliothèque frontale open-source basée sur des composants, responsable uniquement de la couche de vue de l&amp;rsquo;application. Il est maintenu par Facebook.
ReactJS utilise un mécanisme basé sur le DOM virtuel pour remplir les données (vues) dans le DOM HTML. Le DOM virtuel fonctionne rapidement du fait qu&amp;rsquo;il ne modifie que des éléments DOM individuels au lieu de recharger le DOM complet à chaque fois</description>
    </item>
    
    <item>
      <title>React.createClass vs étend React.Component</title>
      <link>https://www.wikiod.com/fr/reactjs/reactcreateclass-vs-etend-reactcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/reactcreateclass-vs-etend-reactcomponent/</guid>
      <description>Syntaxe # Cas 1 : React.createClass({ }) Cas 2 : la classe MyComponent étend React.Component { } React.createClass [était obsolète dans la v15.5][1] et devrait être [supprimé dans la v16][2]. Il existe un [forfait de remplacement instantané] [3] pour ceux qui en ont encore besoin. Les exemples qui l&amp;rsquo;utilisent doivent être mis à jour.
[1] : https://facebook.github.io/react/blog/#new-deprecation-warnings [2] : https://github.com/facebook/react/issues/8854 [3] : https://www.npmjs.com/package/create-react-class
Créer un composant React # Explorons les différences de syntaxe en comparant deux exemples de code.</description>
    </item>
    
    <item>
      <title>Utiliser ReactJS avec Typescript</title>
      <link>https://www.wikiod.com/fr/reactjs/utiliser-reactjs-avec-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/utiliser-reactjs-avec-typescript/</guid>
      <description>Composant ReactJS écrit en Typescript # En fait, vous pouvez utiliser les composants de ReactJS dans Typescript comme dans l&amp;rsquo;exemple de Facebook. Remplacez simplement l&amp;rsquo;extension du fichier &amp;lsquo;jsx&amp;rsquo; par &amp;rsquo;tsx&amp;rsquo; :
//helloMessage.tsx: var HelloMessage = React.createClass({ render: function() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } }); ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode); Mais pour tirer pleinement parti de la fonctionnalité principale de Typescript (vérification de type statique), deux choses doivent être faites :
1) convertir l&amp;rsquo;exemple React.</description>
    </item>
    
    <item>
      <title>Composants</title>
      <link>https://www.wikiod.com/fr/reactjs/composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/composants/</guid>
      <description>React.createClass [était obsolète dans la v15.5][1] et devrait être [supprimé dans la v16][2]. Il existe un [forfait de remplacement instantané] [3] pour ceux qui en ont encore besoin. Les exemples qui l&amp;rsquo;utilisent doivent être mis à jour.
[1] : https://facebook.github.io/react/blog/#new-deprecation-warnings [2] : https://github.com/facebook/react/issues/8854 [3] : https://www.npmjs.com/package/create-react-class
Création de composants # Il s&amp;rsquo;agit d&amp;rsquo;une extension de l&amp;rsquo;exemple de base :
Structure basique # import React, { Component } from &#39;react&#39;; import { render } from &#39;react-dom&#39;; class FirstComponent extends Component { render() { return ( &amp;lt;div&amp;gt; Hello, {this.</description>
    </item>
    
    <item>
      <title>Cycle de vie des composants React</title>
      <link>https://www.wikiod.com/fr/reactjs/cycle-de-vie-des-composants-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/cycle-de-vie-des-composants-react/</guid>
      <description>Les méthodes de cycle de vie doivent être utilisées pour exécuter du code et interagir avec votre composant à différents moments de la vie des composants. Ces méthodes sont basées sur un composant Montage, Mise à jour et Démontage.
Création de composants # Lorsqu&amp;rsquo;un composant React est créé, un certain nombre de fonctions sont appelées :
Si vous utilisez React.createClass (ES5), 5 fonctions définies par l&amp;rsquo;utilisateur sont appelées Si vous utilisez class Component étend React.</description>
    </item>
    
    <item>
      <title>Communication entre composants</title>
      <link>https://www.wikiod.com/fr/reactjs/communication-entre-composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/communication-entre-composants/</guid>
      <description>Il existe au total 3 cas de communication entre les composants React :
Cas 1 : Communication parent-enfant Cas 2 : Communication enfant-parent Cas 3 : communication de composants non liés (tout composant à tout composant) Composants enfant à parent # En renvoyant les données au parent, pour ce faire, nous transmettons simplement une fonction en tant qu&amp;rsquo;accessoire du composant parent au composant enfant, et le composant enfant appelle cette fonction.</description>
    </item>
    
    <item>
      <title>Accessoires dans React</title>
      <link>https://www.wikiod.com/fr/reactjs/accessoires-dans-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/accessoires-dans-react/</guid>
      <description>REMARQUE : À partir de React 15.5 et versions ultérieures, le composant PropTypes vit dans son propre package npm, à savoir &amp;ldquo;prop-types&amp;rdquo; et a besoin de sa propre instruction d&amp;rsquo;importation lors de l&amp;rsquo;utilisation de PropTypes. Voir la documentation officielle de réaction pour le changement de rupture : https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html
Introduction # props sont utilisés pour transmettre des données et des méthodes d&amp;rsquo;un composant parent à un composant enfant.
** Choses intéressantes à propos des &amp;ldquo;accessoires&amp;rdquo; **</description>
    </item>
    
    <item>
      <title>Réagir à l&#39;appel AJAX</title>
      <link>https://www.wikiod.com/fr/reactjs/reagir-a-lappel-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/reagir-a-lappel-ajax/</guid>
      <description>Requête HTTP GET # Parfois, un composant doit restituer certaines données à partir d&amp;rsquo;un point de terminaison distant (par exemple, une API REST). Une [pratique standard] (https://facebook.github.io/react/docs/react-component.html#componentdidmount) consiste à effectuer de tels appels dans la méthode componentDidMount.
Voici un exemple utilisant superagent comme assistant AJAX :
import React from &#39;react&#39; import request from &#39;superagent&#39; class App extends React.Component { constructor () { super() this.state = {} } componentDidMount () { request .</description>
    </item>
    
    <item>
      <title>État en réaction</title>
      <link>https://www.wikiod.com/fr/reactjs/etat-en-reaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/etat-en-reaction/</guid>
      <description>État de base # L&amp;rsquo;état des composants React est essentiel pour gérer et communiquer les données dans votre application. Il est représenté comme un objet JavaScript et a une portée * niveau composant *, il peut être considéré comme les données privées de votre composant.
Dans l&amp;rsquo;exemple ci-dessous, nous définissons un état initial dans la fonction constructor de notre composant et l&amp;rsquo;utilisons dans la fonction render.
class ExampleComponent extends React.Component { constructor(props){ super(props); // Set-up our initial state this.</description>
    </item>
    
    <item>
      <title>Composants fonctionnels sans état</title>
      <link>https://www.wikiod.com/fr/reactjs/composants-fonctionnels-sans-etat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/reactjs/composants-fonctionnels-sans-etat/</guid>
      <description>Les composants fonctionnels sans état dans React sont de pures fonctions des &amp;ldquo;props&amp;rdquo; passés. Ces composants ne reposent pas sur l&amp;rsquo;état et rejettent l&amp;rsquo;utilisation des méthodes de cycle de vie des composants. Vous pouvez cependant toujours définir propTypes et defaultPropts.
Voir https://facebook.github.io/react/docs/reusable-components.html#stateless-functions pour plus d&amp;rsquo;informations sur les composants fonctionnels sans état.
Composant fonctionnel sans état # Les composants vous permettent de diviser l&amp;rsquo;interface utilisateur en éléments indépendants et réutilisables. C&amp;rsquo;est la beauté de React; nous pouvons séparer une page en plusieurs petits composants réutilisables.</description>
    </item>
    
  </channel>
</rss>

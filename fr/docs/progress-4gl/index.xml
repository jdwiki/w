<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Progress-4gl Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/progress-4gl/</link>
    <description>Recent content in Progress-4gl Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/progress-4gl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec progress-4gl</title>
      <link>https://www.wikiod.com/fr/progress-4gl/premiers-pas-avec-progress-4gl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/premiers-pas-avec-progress-4gl/</guid>
      <description>FizzBuzz # Un autre exemple de programmes de style &amp;ldquo;Hello World&amp;rdquo; est [FizzBuzz][1].
DEFINE VARIABLE i AS INTEGER NO-UNDO. DEFINE VARIABLE cOut AS CHARACTER NO-UNDO. DO i = 1 TO 100: /* Dividable by 3: fizz */ IF i MODULO 3 = 0 THEN cOut = &amp;quot;Fizz&amp;quot;. /* Dividable by 5: buzz */ ELSE IF i MODULO 5 = 0 THEN cOut = &amp;quot;Buzz&amp;quot;. /* Otherwise just the number */ ELSE cOut = STRING(i).</description>
    </item>
    
    <item>
      <title>Compiler</title>
      <link>https://www.wikiod.com/fr/progress-4gl/compiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/compiler/</guid>
      <description>Compile le code de progression appelé &amp;ldquo;r-code&amp;rdquo; et est normalement enregistré dans un fichier avec l&amp;rsquo;extension .r. Il existe plusieurs façons de compiler : en utilisant l&amp;rsquo;instruction &amp;ldquo;COMPILE&amp;rdquo; ou sous Linux ou AppBuilder : le compilateur d&amp;rsquo;application intégré. Developer Studio (l&amp;rsquo;environnement Eclipse) a une compilation intégrée dans son processus de construction.
Vous devez avoir installé 4GL Development ou OpenEdge Studio pour compiler les programmes 4GL qui mettent à jour la base de données.</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/progress-4gl/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/les-fonctions/</guid>
      <description>Une fonction définie par l&amp;rsquo;utilisateur dans Progress ABL est un module de programme réutilisable.
Une fonction doit être déclarée dans la procédure &amp;ldquo;main&amp;rdquo;. Il ne peut pas être déclaré à l&amp;rsquo;intérieur d&amp;rsquo;une procédure ou à l&amp;rsquo;intérieur d&amp;rsquo;une autre fonction. Une fonction dans Progress ABL n&amp;rsquo;est pas un &amp;ldquo;citoyen de première classe&amp;rdquo; contrairement aux langages de programmation comme Haskell ou Javascript. Vous ne pouvez pas transmettre une fonction en tant que paramètre d&amp;rsquo;entrée ou de sortie.</description>
    </item>
    
    <item>
      <title>Travailler avec des nombres</title>
      <link>https://www.wikiod.com/fr/progress-4gl/travailler-avec-des-nombres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/travailler-avec-des-nombres/</guid>
      <description>Progress ABL prend en charge trois formats de nombres : entiers et flottants 32 et 64 bits.
Les opérateurs # Progress prend en charge + / - * comme opérateurs. Ils ne peuvent pas être surchargés. La division renvoie toujours un nombre décimal. Si l&amp;rsquo;un des nombres d&amp;rsquo;un calcul est un nombre décimal, un nombre décimal sera renvoyé. Sinon, un INTEGER ou INT64.
Il n&amp;rsquo;y a pas d&amp;rsquo;opérateur += ou ++.</description>
    </item>
    
    <item>
      <title>TEMP-TABLE</title>
      <link>https://www.wikiod.com/fr/progress-4gl/temp-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/temp-table/</guid>
      <description>Le TEMP-TABLE est une fonctionnalité très puissante de Progress ABL. C&amp;rsquo;est une table temporaire en mémoire (la plupart du temps au moins) qui peut être utilisée pour écrire une logique complexe. Il peut être utilisé comme paramètres d&amp;rsquo;entrée/sortie pour les procédures, fonctions et autres programmes. Une ou plusieurs tables temporaires peuvent constituer la base d&amp;rsquo;un DATASET (souvent appelé ProDataset).
Presque tout ce qui peut être fait avec une table de base de données Progress native peut être fait avec une table temporaire.</description>
    </item>
    
    <item>
      <title>Cordes</title>
      <link>https://www.wikiod.com/fr/progress-4gl/cordes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/cordes/</guid>
      <description>Dans Progress ABL, il existe deux types de chaînes, celles définies comme &amp;ldquo;CHARACTER&amp;rdquo; et celles définies comme &amp;ldquo;LONGCHAR&amp;rdquo;. Un fichier d&amp;rsquo;une longueur supérieure à 32 Ko est un &amp;ldquo;LONGCHAR&amp;rdquo;. La plupart des chaînes sont, sauf indication contraire, insensibles à la casse.
Rappelez-vous - toutes les positions commencent par la position 1 !
Concaténer des chaînes # En utilisant l&amp;rsquo;opérateur + vous pouvez facilement concaténer deux chaînes ou plus.
DEFINE VARIABLE cString AS CHARACTER NO-UNDO.</description>
    </item>
    
    <item>
      <title>Procédures</title>
      <link>https://www.wikiod.com/fr/progress-4gl/procedures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/procedures/</guid>
      <description>Il existe deux types de procédures dans Progress ABL : les procédures internes et les prototypes de procédures qui sont des façades vers les dll Windows ou les procédures de bibliothèque partagée Unix/Linux.
Comme pour les fonctions, les procédures ne peuvent pas être imbriquées. Vous ne pouvez pas imbriquer des fonctions dans des procédures et vice versa.
Une procédure est appelée avec l&amp;rsquo;instruction RUN.
Syntaxe # Nom de la procédure RUN.</description>
    </item>
    
    <item>
      <title>Utilitaires du système d&#39;exploitation</title>
      <link>https://www.wikiod.com/fr/progress-4gl/utilitaires-du-systeme-dexploitation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/utilitaires-du-systeme-dexploitation/</guid>
      <description>Il existe plusieurs fonctions et instructions intégrées pour accéder au système d&amp;rsquo;exploitation.
COMMANDE OS # Exécute une commande OS.
OS-COMMAND sans aucune option démarrera un nouveau shell et ne le quittera pas - ainsi, sur les systèmes d&amp;rsquo;exploitation graphiques, vous laisserez une fenêtre &amp;ldquo;suspendue&amp;rdquo;.
DEFINE VARIABLE cmd AS CHARACTER NO-UNDO. cmd = &amp;quot;dir&amp;quot;. OS-COMMAND VALUE(cmd). Il existe trois options : SILENT, NO-WAIT et NO-CONSOLE.
SILENCIEUX
Après avoir traité une commande du système d&amp;rsquo;exploitation, le shell AVM s&amp;rsquo;arrête.</description>
    </item>
    
    <item>
      <title>Requêtes</title>
      <link>https://www.wikiod.com/fr/progress-4gl/requetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/requetes/</guid>
      <description>Les exemples seront basés sur une copie de la base de données de démonstration &amp;ldquo;Sports 2000&amp;rdquo; fournie avec la configuration de Progress.
Lorsque vous travaillez avec des requêtes en cours, vous devez :
DEFINE la requête et définissez les tampons (tables) et les champs avec lesquels elle fonctionne.
OPEN la requête avec une clause spécifique WHERE qui définit comment récupérer les enregistrements. Eventuellement aussi tri (BY/BREAK BY)
GET les données réelles - qui peuvent être le FIRST, NEXT, PREV (pour précédent) ou LAST enregistrement correspondant.</description>
    </item>
    
    <item>
      <title>TROUVER l&#39;instruction</title>
      <link>https://www.wikiod.com/fr/progress-4gl/trouver-linstruction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/progress-4gl/trouver-linstruction/</guid>
      <description>L&amp;rsquo;instruction FIND est utilisée pour récupérer un seul enregistrement d&amp;rsquo;une seule table. Il a quelques limitations par rapport à FOR ou QUERY, mais c&amp;rsquo;est une instruction simple et pratique pour un accès rapide aux enregistrements.
TROUVER des exemples de base # Un exemple simple sports2000 :
FIND FIRST Customer NO-LOCK WHERE CustNum = 1 NO-ERROR. IF AVAILABLE Customer THEN DO: DISPLAY Customer.NAME. END. ELSE DO: MESSAGE &amp;quot;No record available&amp;quot;. END. FIRST - trouve le premier enregistrement qui correspond à la requête</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel qml on </title>
    <link>https://www.wikiod.com/fr/docs/qml/</link>
    <description>Recent content in Tutoriel qml on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec qml</title>
      <link>https://www.wikiod.com/fr/qml/debuter-avec-qml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qml/debuter-avec-qml/</guid>
      <description>Bonjour le monde # Une application simple affichant le texte &amp;ldquo;Hello World&amp;rdquo; au centre de la fenêtre.
import QtQuick 2.3 import QtQuick.Window 2.0 Window { visible: true width: 640 height: 480 title: qsTr(&amp;quot;Hello World&amp;quot;) //The method qsTr() is used for translations from one language to other. Text { text: qsTr(&amp;quot;Hello World&amp;quot;) anchors.centerIn: parent } } Installation # QML est livré avec une version plus récente du framework d&amp;rsquo;application multiplateforme [Qt][1]. Vous pouvez trouver la dernière version de Qt dans la [section Téléchargements][2].</description>
    </item>
    
    <item>
      <title>Création d&#39;éléments personnalisés en C&#43;&#43;</title>
      <link>https://www.wikiod.com/fr/qml/creation-delements-personnalises-en-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qml/creation-delements-personnalises-en-c-/</guid>
      <description>Création d&amp;rsquo;éléments personnalisés en C++ # QML est venu avec un riche ensemble d&amp;rsquo;éléments visuels. En utilisant uniquement QML, nous pouvons créer des applications complexes avec ces éléments. Il est également très facile de créer votre propre élément basé sur un ensemble d&amp;rsquo;éléments standard tels que rectangle, bouton, image, etc. De plus, nous pouvons utiliser des éléments tels que Canvas pour créer des éléments avec une peinture personnalisée. Il semblerait que nous puissions construire une variété d&amp;rsquo;applications en QML uniquement, sans toucher aux capacités de C++.</description>
    </item>
    
    <item>
      <title>Liaison de propriété</title>
      <link>https://www.wikiod.com/fr/qml/liaison-de-propriete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qml/liaison-de-propriete/</guid>
      <description>La propriété d&amp;rsquo;un objet peut se voir attribuer une valeur statique qui reste constante jusqu&amp;rsquo;à ce qu&amp;rsquo;une nouvelle valeur lui soit explicitement attribuée. Cependant, pour tirer le meilleur parti de QML et de sa prise en charge intégrée des comportements d&amp;rsquo;objets dynamiques, la plupart des objets QML utilisent des liaisons de propriétés.
Les liaisons de propriétés sont une fonctionnalité centrale de QML qui permet aux développeurs de spécifier des relations entre différentes propriétés d&amp;rsquo;objet.</description>
    </item>
    
    <item>
      <title>Intégration avec C&#43;&#43;</title>
      <link>https://www.wikiod.com/fr/qml/integration-avec-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qml/integration-avec-c-/</guid>
      <description>Création d&amp;rsquo;un modèle simple pour TreeView # Depuis Qt 5.5, nous avons un nouveau [TreeView][1] merveilleux, un contrôle que nous attendions tous. Un [TreeView][1] implémente une représentation arborescente des éléments d&amp;rsquo;un modèle. En général, il ressemble aux autres vues QML - [ListView][2] ou [TableView][3]. Mais la structure de données de TreeView est plus complexe.
Une donnée dans [ListView][2] ou [TableView][3] est représentée par un tableau unidimensionnel de nœuds. Dans [TreeView][1], chaque nœud peut contenir son propre tableau de nœuds.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://www.wikiod.com/fr/qml/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qml/animation/</guid>
      <description>Animation de nombres simples # L&amp;rsquo;une des animations les plus basiques que vous pourriez rencontrer est le NumberAnimation. Cette animation fonctionne en changeant la valeur numérique d&amp;rsquo;une propriété d&amp;rsquo;un élément d&amp;rsquo;un état initial à un état final. Considérez l&amp;rsquo;exemple complet suivant :
import QtQuick 2.7 import QtQuick.Controls 2.0 ApplicationWindow { visible: true width: 400 height: 640 Rectangle{ id: rect anchors.centerIn: parent height: 100 width: 100 color: &amp;quot;blue&amp;quot; MouseArea{ anchors.fill: parent onClicked: na.</description>
    </item>
    
  </channel>
</rss>

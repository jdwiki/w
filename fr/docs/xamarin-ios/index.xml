<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Xamarin.iOS on </title>
    <link>https://www.wikiod.com/fr/docs/xamarin-ios/</link>
    <description>Recent content in Tutoriel Xamarin.iOS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/xamarin-ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Xamarin.iOS</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/premiers-pas-avec-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/premiers-pas-avec-xamarinios/</guid>
      <description>Premiers pas dans Visual Studio # Accédez à Fichier &amp;gt; Nouveau &amp;gt; Projet pour afficher la boîte de dialogue Nouveau projet. Accédez à Visual C# &amp;gt; iOS &amp;gt; iPhone et sélectionnez Single View App : [![entrez la description de l&amp;rsquo;image ici][1]][1] Donnez un Nom à votre application et appuyez sur OK pour créer votre projet. Sélectionnez l&amp;rsquo;icône Mac Agent dans la barre d&amp;rsquo;outils, comme illustré ci-dessous : [![entrez la description de l&amp;rsquo;image ici][2]][2] Sélectionnez le Mac qui construira votre application dans la liste (assurez-vous que votre Mac est configuré pour recevoir la connexion !</description>
    </item>
    
    <item>
      <title>Relier les bibliothèques Swift</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/relier-les-bibliotheques-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/relier-les-bibliotheques-swift/</guid>
      <description>Un guide facile à suivre qui vous guidera tout au long du processus de liaison des fichiers Swift .framework à utiliser dans un projet Xamarin.
Lors de la création d&amp;rsquo;une bibliothèque dans Xcode, il est possible d&amp;rsquo;inclure les bibliothèques rapides. Ne le faites pas! Ils seront inclus dans votre application finale en tant que NAME.app/Frameworks/LIBRARY.framework/Frameworks/libswift*.dylib mais ils doivent être inclus en tant que NAME.app/Frameworks/libswift*.dylib
Vous pouvez trouver ces informations ailleurs, mais cela vaut la peine d&amp;rsquo;être mentionné : n&amp;rsquo;incluez pas Bitcode dans la bibliothèque.</description>
    </item>
    
    <item>
      <title>Méthodes de redimensionnement pour UIImage</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/methodes-de-redimensionnement-pour-uiimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/methodes-de-redimensionnement-pour-uiimage/</guid>
      <description>Redimensionner l&amp;rsquo;image - avec le rapport d&amp;rsquo;aspect # // resize the image to be contained within a maximum width and height, keeping aspect ratio public static UIImage MaxResizeImage(this UIImage sourceImage, float maxWidth, float maxHeight) { var sourceSize = sourceImage.Size; var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height); if (maxResizeFactor &amp;gt; 1) return sourceImage; var width = maxResizeFactor * sourceSize.Width; var height = maxResizeFactor * sourceSize.Height; UIGraphics.BeginImageContext(new CGSize(width, height)); sourceImage.Draw(new CGRect(0, 0, width, height)); var resultImage = UIGraphics.</description>
    </item>
    
    <item>
      <title>ID tactile</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/id-tactile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/id-tactile/</guid>
      <description>Paramètres # Colonne Colonne Cellule Cellule Tout d&amp;rsquo;abord, déterminez si l&amp;rsquo;appareil est capable d&amp;rsquo;accepter l&amp;rsquo;entrée Touch ID.
if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)) Si c&amp;rsquo;est le cas, nous pouvons afficher l&amp;rsquo;interface utilisateur Touch ID en utilisant :
context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler); Il y a trois informations que nous devons transmettre à EvaluatePolicy - la politique elle-même, une chaîne expliquant pourquoi l&amp;rsquo;authentification est nécessaire et un gestionnaire de réponse. Le gestionnaire de réponse indique à l&amp;rsquo;application ce qu&amp;rsquo;elle doit faire en cas d&amp;rsquo;authentification réussie ou non.</description>
    </item>
    
    <item>
      <title>Programmation simultanée dans Xamarin.iOS</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/programmation-simultanee-dans-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/programmation-simultanee-dans-xamarinios/</guid>
      <description>## Manipulation de l&amp;rsquo;interface utilisateur à partir des threads d&amp;rsquo;arrière-plan Les threads d&amp;rsquo;arrière-plan ne peuvent pas modifier l&amp;rsquo;interface utilisateur ; presque toutes les méthodes UIKit doivent être appelées sur le thread principal.
À partir d&amp;rsquo;une sous-classe de NSObject (y compris tout UIViewController ou UIView):
InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); À partir d&amp;rsquo;une classe C# standard :
UIApplication.SharedApplication.InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); InvokeOnMainThread attend que votre code s&amp;rsquo;exécutant sur le thread principal s&amp;rsquo;exécute avant de continuer.</description>
    </item>
    
    <item>
      <title>Calcul de la hauteur de ligne variable dans GetHeightForRow</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/calcul-de-la-hauteur-de-ligne-variable-dans-getheightforrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/calcul-de-la-hauteur-de-ligne-variable-dans-getheightforrow/</guid>
      <description>Le calcul des hauteurs de ligne peut être coûteux et les performances de défilement peuvent en pâtir si vous avez de plus grandes quantités de données. Dans ce scénario, remplacez UITableViewSource.EstimatedHeight(UITableView, NSIndexPath) pour fournir rapidement un nombre suffisant pour un défilement rapide, par exemple :
public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath) { return 44.0f; } Utilisation de GetHeightForRow # Pour définir une hauteur de ligne personnalisée, remplacez UITableViewSource.GetHeightForRow(UITableView,NSIndexPath) :</description>
    </item>
    
    <item>
      <title>Disposition automatique dans Xamarin.iOS</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/disposition-automatique-dans-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/disposition-automatique-dans-xamarinios/</guid>
      <description>Ajout de contraintes avec les ancres de mise en page iOS 9+ # // Since the anchor system simply returns constraints, you still need to add them somewhere. View.AddConstraints( new[] { someLabel.TopAnchor.ConstraintEqualTo(TopLayoutGuide.GetBottomAnchor()), anotherLabel.TopAnchor.ConstraintEqualTo(someLabel.BottomAnchor, 6), oneMoreLabel.TopAnchor.ConstraintEqualTo(anotherLabel.BottomAnchor, 6), oneMoreLabel.BottomAnchor.ConstraintGreaterThanOrEqualTo(BottomLayoutGuide.GetTopAnchor(), -10), } ); Ajout de contraintes à l&amp;rsquo;aide du langage de format visuel (VFL) # // Using Visual Format Language requires a special look-up dictionary of names&amp;lt;-&amp;gt;views. var views = new NSDictionary( nameof(someLabel), someLabel, nameof(anotherLabel), anotherLabel, nameof(oneMoreLabel), oneMoreLabel ); // It can also take a look-up dictionary for metrics (such as size values).</description>
    </item>
    
    <item>
      <title>Alertes</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/alertes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/alertes/</guid>
      <description>Afficher une alerte # Pour les alertes depuis iOS 8, vous utiliseriez un UIAlertController mais pour les versions antérieures, vous auriez utilisé un UIAlertView, qui est désormais obsolète.
var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert); alert.AddAction(UIAlertAction.Create(otherTitle, UIAlertActionStyle.Destructive, (action) =&amp;gt; { // otherTitle(); })); alert.AddAction(UIAlertAction.Create(cancelTitle, UIAlertActionStyle.Cancel, null)); this.PresentViewController(alert, true, null); var alert = new UIAlertView (title, message, null, cancelTitle, otherTitle); alert.Clicked += (object sender, UIButtonEventArgs e) =&amp;gt; { if(e.ButtonIndex == 1) // otherTitle(); }; alert.</description>
    </item>
    
    <item>
      <title>Utilisation des catalogues d&#39;actifs</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/utilisation-des-catalogues-dactifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/utilisation-des-catalogues-dactifs/</guid>
      <description>Ajout d&amp;rsquo;éléments d&amp;rsquo;image au catalogue d&amp;rsquo;éléments # Voici à quoi ressemble le catalogue d&amp;rsquo;actifs dans Xamarin Studio,
[![Options du catalogue d&amp;rsquo;actifs][1]][1]
Comme le montre l&amp;rsquo;image ci-dessus, il existe 5 types d&amp;rsquo;actifs que vous pouvez créer dans le catalogue.
Je ne couvrirai que l&amp;rsquo;ensemble d&amp;rsquo;images, car c&amp;rsquo;est le plus simple.
Lorsque vous créez un nouveau jeu d&amp;rsquo;images. Vous obtiendrez des options comme celle-ci [![Options du nouveau jeu d&amp;rsquo;images][2]][2]
Pour ajouter des images au catalogue, vous pouvez simplement cliquer sur les carrés en pointillés et sélectionner l&amp;rsquo;image que vous souhaitez définir pour une option particulière.</description>
    </item>
    
    <item>
      <title>Meilleures pratiques pour migrer de UILocalNotification vers le framework de notifications utilisateur</title>
      <link>https://www.wikiod.com/fr/xamarin-ios/meilleures-pratiques-pour-migrer-de-uilocalnotification-vers-le-framework-de-notifications-utilisateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-ios/meilleures-pratiques-pour-migrer-de-uilocalnotification-vers-le-framework-de-notifications-utilisateur/</guid>
      <description>Notifications utilisateur # Vous devrez importer les UserNotifications
@import UserNotifications; 2.Demander l&amp;rsquo;autorisation pour localNotification
let center = UNUserNotificationCenter.current() center.requestAuthorization([.alert, .sound]) { (granted, error) in // Enable or disable features based on authorization. } Nous allons maintenant mettre à jour le numéro de badge de l&amp;rsquo;icône de l&amp;rsquo;application
@IBAction func triggerNotification(){ let content = UNMutableNotificationContent() content.title = NSString.localizedUserNotificationString(forKey: &amp;quot;Tom said:&amp;quot;, arguments: nil) content.body = NSString.localizedUserNotificationString(forKey: &amp;quot;Hello Mike！Let&#39;s go.&amp;quot;, arguments: nil) content.sound = UNNotificationSound.</description>
    </item>
    
  </channel>
</rss>

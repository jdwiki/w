<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel coffeescript on </title>
    <link>https://www.wikiod.com/fr/docs/coffeescript/</link>
    <description>Recent content in Tutoriel coffeescript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec coffeescript</title>
      <link>https://www.wikiod.com/fr/coffeescript/premiers-pas-avec-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/premiers-pas-avec-coffeescript/</guid>
      <description>Bonjour Word (Linux et OS X) # CoffeeScript est un langage de script qui se compile en JavaScript. Tout code écrit en CoffeeScript peut être traduit en JavaScript avec une correspondance un à un.
CoffeeScript peut être facilement installé avec npm :
$ mkdir coffee &amp;amp;&amp;amp; cd coffee $ npm install -g coffee-script Le drapeau -g installera CoffeeScript globalement, il sera donc toujours disponible sur votre CLI. N&amp;rsquo;utilisez pas le drapeau -g si vous voulez une installation locale :</description>
    </item>
    
    <item>
      <title>Mission de déstructuration</title>
      <link>https://www.wikiod.com/fr/coffeescript/mission-de-destructuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/mission-de-destructuration/</guid>
      <description>Paramètres de la fonction nommée # CoffeeScript permet de déconstruire des objets et des tableaux lorsqu&amp;rsquo;ils sont transmis à des fonctions en tant qu&amp;rsquo;arguments.
Une fonction qui tire parti de la déconstruction précisera dans sa signature tous les champs attendus dans son corps. Lors de l&amp;rsquo;appel d&amp;rsquo;une telle fonction, un objet ou un tableau contenant tous les champs attendus doit être passé en argument.
drawRect = ({x, y, width, height}) -&amp;gt; # here you can use the passed parameters # color will not be visible here!</description>
    </item>
    
    <item>
      <title>Conditionnels</title>
      <link>https://www.wikiod.com/fr/coffeescript/conditionnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/conditionnels/</guid>
      <description>si, si / alors, si / sinon, à moins que, opérateur ternaire # L&amp;rsquo;instance la plus élémentaire d&amp;rsquo;une construction &amp;ldquo;if&amp;rdquo; évalue une condition et exécute du code en fonction du résultat de la condition. Si la condition renvoie &amp;ldquo;true&amp;rdquo;, le code contenu dans la condition est exécuté.
counter = 10 if counter is 10 console.log &#39;This will be executed!&#39; La construction if peut être enrichie d&amp;rsquo;une instruction else. Le code dans l&amp;rsquo;instruction else sera exécuté chaque fois que la condition if n&amp;rsquo;est pas remplie.</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/coffeescript/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/tableaux/</guid>
      <description>## Valeurs de mappage Vous souhaitez convertir tous les éléments d&amp;rsquo;un tableau en une autre forme.
Par exemple, vous avez
theUsers = [ {id: 1, username: &#39;john&#39;} {id: 2, username: &#39;lexy&#39;} {id: 3, username: &#39;pete&#39;} ] et vous voulez avoir un tableau de noms d&amp;rsquo;utilisateur uniquement, c&amp;rsquo;est-à-dire
[&#39;john&#39;, &#39;lexy&#39;, &#39;pete&#39;] Méthode 1 - en utilisant .map # theUsernames = theUsers.map (user) -&amp;gt; user.username Méthode 2 - utiliser la compréhension # theUsernames = (user.</description>
    </item>
    
    <item>
      <title>Avantages et inconvénients de l&#39;utilisation de Coffeescript</title>
      <link>https://www.wikiod.com/fr/coffeescript/avantages-et-inconvenients-de-lutilisation-de-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/avantages-et-inconvenients-de-lutilisation-de-coffeescript/</guid>
      <description>Avantages # Simplicité # La meilleure partie de CoffeeScript est probablement sa simplicité. CoffeeScript permet une syntaxe plus concise et simpliste que le JavaScript ordinaire. Une fonctionnalité simple mais étonnamment rapide est que CoffeeScript n&amp;rsquo;a pas besoin de ; ou {}, éliminant ainsi le besoin de passer des heures à trouver l&amp;rsquo;endroit où un } est manquant.
Boucles # Créer une boucle qui affiche la valeur de chaque élément d&amp;rsquo;un tableau à moins que la valeur ne soit &amp;ldquo;singe&amp;rdquo; dans CoffeeScript est très simple.</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/coffeescript/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/les-fonctions/</guid>
      <description>Fonctions des petites flèches # # creates a function with no arguments, which returns 3 get_three = () -&amp;gt; return 3 # same as above get_three = -&amp;gt; 3 # creates a function with arguments add_three = (num) -&amp;gt; num + 3 # multiple arguments, etc. add = (a, b) -&amp;gt; a + b </description>
    </item>
    
    <item>
      <title>Des classes</title>
      <link>https://www.wikiod.com/fr/coffeescript/des-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/des-classes/</guid>
      <description>Classes, Héritage et Super # CoffeeScript fournit une structure de classe de base qui vous permet de nommer votre classe, de définir la superclasse, d&amp;rsquo;attribuer des propriétés prototypes et de définir le constructeur, dans une seule expression assignable.
Petit exemple ci-dessous :
class Animal constructor: (@name) -&amp;gt; move: (meters) -&amp;gt; alert @name + &amp;quot; moved #{meters}m.&amp;quot; class Snake extends Animal move: -&amp;gt; alert &amp;quot;Slithering...&amp;quot; super 5 class Horse extends Animal move: -&amp;gt; alert &amp;quot;Galloping.</description>
    </item>
    
    <item>
      <title>Boucles</title>
      <link>https://www.wikiod.com/fr/coffeescript/boucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/boucles/</guid>
      <description>Boucler une fonction # Les codes suivants afficheront les nombres 1 à 10 dans la console, bien que console.log puisse être n&amp;rsquo;importe quelle fonction qui accepte une entrée.
Méthode 1 - Standard # for x in [1..10] console.log x Méthode 2 - Compact # console.log x for x in [1..10] </description>
    </item>
    
    <item>
      <title>Cordes</title>
      <link>https://www.wikiod.com/fr/coffeescript/cordes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/cordes/</guid>
      <description>Bloquer les chaînes # Les chaînes de blocs peuvent être utilisées pour contenir du texte formaté ou sensible à l&amp;rsquo;indentation (ou, si vous n&amp;rsquo;avez tout simplement pas envie d&amp;rsquo;échapper aux guillemets et aux apostrophes). Le niveau d&amp;rsquo;indentation qui commence le bloc est maintenu tout au long, vous pouvez donc tout garder aligné avec le corps de votre code.
html = &amp;quot;&amp;quot;&amp;quot; &amp;lt;strong&amp;gt; cup of coffeescript &amp;lt;/strong&amp;gt; &amp;quot;&amp;quot;&amp;quot; Chaînes multilignes # Les chaînes multilignes sont autorisées dans CoffeeScript.</description>
    </item>
    
    <item>
      <title>Les opérateurs</title>
      <link>https://www.wikiod.com/fr/coffeescript/les-operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/coffeescript/les-operateurs/</guid>
      <description>Opérateur existentiel # L&amp;rsquo;opérateur existentiel ? de CoffeeScript vérifie si la variable est null ou undefined.
1. Vérifiez null ou undefined.
alert &amp;quot;Hello CoffeeScript!&amp;quot; if myVar? équivalent javascript :
if (typeof myVar !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; myVar !== null) { alert(&amp;quot;Hello CoffeeScript!&amp;quot;); } 2. Affectation conditionnelle plus sûre
Vous pouvez également utiliser cet opérateur d&amp;rsquo;affectation conditionnelle plus sûre
language = favoriteLanguage ? &amp;quot;coffeescript&amp;quot; équivalent javascript :
language = typeof favoriteLanguage !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; favoriteLanguage !</description>
    </item>
    
  </channel>
</rss>

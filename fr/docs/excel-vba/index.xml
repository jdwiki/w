<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel excel-vba on </title>
    <link>https://www.wikiod.com/fr/docs/excel-vba/</link>
    <description>Recent content in Tutoriel excel-vba on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/excel-vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec excel-vba</title>
      <link>https://www.wikiod.com/fr/excel-vba/premiers-pas-avec-excel-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/premiers-pas-avec-excel-vba/</guid>
      <description>Ouverture de l&amp;rsquo;éditeur Visual Basic (VBE) # Étape 1 : Ouvrir un classeur
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Étape 2 Option A : Appuyez sur Alt + F11
C&amp;rsquo;est le raccourci standard pour ouvrir le VBE.
Étape 2 Option B : Onglet Développeur &amp;ndash;&amp;gt; Afficher le code
Tout d&amp;rsquo;abord, l&amp;rsquo;onglet Développeur doit être ajouté au ruban. Allez dans Fichier -&amp;gt; Options -&amp;gt; Personnaliser le ruban, puis cochez la case du développeur.</description>
    </item>
    
    <item>
      <title>Meilleures pratiques VBA</title>
      <link>https://www.wikiod.com/fr/excel-vba/meilleures-pratiques-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/meilleures-pratiques-vba/</guid>
      <description>Nous les connaissons tous, mais ces pratiques sont beaucoup moins évidentes pour quelqu&amp;rsquo;un qui commence à programmer en VBA.
Utilisez TOUJOURS &amp;ldquo;Option Explicit&amp;rdquo; # Dans la fenêtre de l&amp;rsquo;éditeur VBA, dans le menu Outils, sélectionnez &amp;ldquo;Options&amp;rdquo;:
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Ensuite dans l&amp;rsquo;onglet &amp;ldquo;Editor&amp;rdquo;, assurez-vous que &amp;ldquo;Require Variable Declaration&amp;rdquo; est coché :
[![entrez la description de l&amp;rsquo;image ici][2]][2]
La sélection de cette option placera automatiquement Option Explicit en haut de chaque module VBA.</description>
    </item>
    
    <item>
      <title>Méthodes de recherche de la dernière ligne ou colonne utilisée dans une feuille de calcul</title>
      <link>https://www.wikiod.com/fr/excel-vba/methodes-de-recherche-de-la-derniere-ligne-ou-colonne-utilisee-dans-une-feuille-de-calcul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/methodes-de-recherche-de-la-derniere-ligne-ou-colonne-utilisee-dans-une-feuille-de-calcul/</guid>
      <description>Vous pouvez trouver une bonne explication sur pourquoi d&amp;rsquo;autres méthodes sont découragées/inexactes ici : http://stackoverflow.com/a/11169920/4628637
Trouver la dernière cellule non vide d&amp;rsquo;une colonne # Dans cet exemple, nous examinerons une méthode permettant de renvoyer la dernière ligne non vide d&amp;rsquo;une colonne pour un ensemble de données.
Cette méthode fonctionnera indépendamment des régions vides dans l&amp;rsquo;ensemble de données.
Cependant, attention doit être utilisée si des cellules fusionnées sont impliquées, car la méthode End sera &amp;ldquo;arrêtée&amp;rdquo; sur une région fusionnée, renvoyant la première cellule de la région fusionnée.</description>
    </item>
    
    <item>
      <title>Trucs et astuces Excel VBA</title>
      <link>https://www.wikiod.com/fr/excel-vba/trucs-et-astuces-excel-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/trucs-et-astuces-excel-vba/</guid>
      <description>Cette rubrique se compose d&amp;rsquo;une grande variété de trucs et astuces utiles découverts par les utilisateurs SO grâce à leur expérience dans le codage. Ce sont souvent des exemples de moyens de contourner les frustrations courantes ou des façons d&amp;rsquo;utiliser Excel de manière plus &amp;ldquo;intelligente&amp;rdquo;.
Utilisation de feuilles xlVeryHidden # Les feuilles de calcul dans Excel ont trois options pour la propriété &amp;ldquo;Visible&amp;rdquo;. Ces options sont représentées par des constantes dans l&amp;rsquo;énumération xlSheetVisibility et sont les suivantes :</description>
    </item>
    
    <item>
      <title>Erreurs fréquentes</title>
      <link>https://www.wikiod.com/fr/excel-vba/erreurs-frequentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/erreurs-frequentes/</guid>
      <description>Références qualifiantes # Lorsque vous faites référence à une &amp;ldquo;feuille de calcul&amp;rdquo;, à une &amp;ldquo;plage&amp;rdquo; ou à des &amp;ldquo;cellules&amp;rdquo; individuelles, il est important de qualifier complètement la référence.
Par exemple:
ThisWorkbook.Worksheets(&amp;quot;Sheet1&amp;quot;).Range(Cells(1, 2), Cells(2, 3)).Copy N&amp;rsquo;est pas entièrement qualifié : les références &amp;ldquo;Cellules&amp;rdquo; ne sont pas associées à un classeur et à une feuille de calcul. Sans référence explicite, Cells fait référence à ActiveSheet par défaut. Donc, ce code échouera (produira des résultats incorrects) si une feuille de calcul autre que Sheet1 est la ActiveSheet actuelle.</description>
    </item>
    
    <item>
      <title>Plages et cellules</title>
      <link>https://www.wikiod.com/fr/excel-vba/plages-et-cellules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/plages-et-cellules/</guid>
      <description>Syntaxe # Set - L&amp;rsquo;opérateur utilisé pour définir une référence à un objet, tel qu&amp;rsquo;une plage Pour chaque - L&amp;rsquo;opérateur utilisé pour parcourir chaque élément d&amp;rsquo;une collection Notez que les noms de variables r, cell et autres peuvent être nommés comme vous le souhaitez, mais doivent être nommés de manière appropriée afin que le code soit plus facile à comprendre pour vous et les autres.
Façons de se référer à une seule cellule # Le moyen le plus simple de faire référence à une seule cellule de la feuille de calcul Excel actuelle consiste simplement à placer le formulaire A1 de sa référence entre crochets :</description>
    </item>
    
    <item>
      <title>Débogage et dépannage</title>
      <link>https://www.wikiod.com/fr/excel-vba/debogage-et-depannage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/debogage-et-depannage/</guid>
      <description>Syntaxe # Debug.Print(chaîne) Stop STOP Fenêtre immédiate # Si vous souhaitez tester une ligne de code de macro sans avoir à exécuter un sous-programme entier, vous pouvez taper des commandes directement dans la fenêtre immédiate et appuyer sur &amp;ldquo;ENTRER&amp;rdquo; pour exécuter la ligne.
Pour tester la sortie d&amp;rsquo;une ligne, vous pouvez la faire précéder d&amp;rsquo;un point d&amp;rsquo;interrogation ? pour imprimer directement dans la fenêtre immédiate. Alternativement, vous pouvez également utiliser la commande print pour imprimer la sortie.</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/excel-vba/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/tableaux/</guid>
      <description>Remplir des tableaux (ajouter des valeurs) # Il existe plusieurs façons de remplir un tableau.
Directement # &#39;one-dimensional Dim arrayDirect1D(2) As String arrayDirect(0) = &amp;quot;A&amp;quot; arrayDirect(1) = &amp;quot;B&amp;quot; arrayDirect(2) = &amp;quot;C&amp;quot; &#39;multi-dimensional (in this case 3D) Dim arrayDirectMulti(1, 1, 2) arrayDirectMulti(0, 0, 0) = &amp;quot;A&amp;quot; arrayDirectMulti(0, 0, 1) = &amp;quot;B&amp;quot; arrayDirectMulti(0, 0, 2) = &amp;quot;C&amp;quot; arrayDirectMulti(0, 1, 0) = &amp;quot;D&amp;quot; &#39;... Utilisation de la fonction Array() # &#39;one-dimensional only Dim array1D As Variant &#39;has to be type variant array1D = Array(1, 2, &amp;quot;A&amp;quot;) &#39;-&amp;gt; array1D(0) = 1, array1D(1) = 2, array1D(2) = &amp;quot;A&amp;quot; De la plage # Dim arrayRange As Variant &#39;has to be type variant &#39;putting ranges in an array always creates a 2D array (even if only 1 row or column) &#39;starting at 1 and not 0, first dimension is the row and the second the column arrayRange = Range(&amp;quot;A1:C10&amp;quot;).</description>
    </item>
    
    <item>
      <title>Boucle à travers toutes les feuilles dans le classeur actif</title>
      <link>https://www.wikiod.com/fr/excel-vba/boucle-a-travers-toutes-les-feuilles-dans-le-classeur-actif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/boucle-a-travers-toutes-les-feuilles-dans-le-classeur-actif/</guid>
      <description>Récupérer tous les noms de feuilles de calcul dans le classeur actif # Option Explicit Sub LoopAllSheets() Dim sht As Excel.Worksheet &#39; declare an array of type String without committing to maximum number of members Dim sht_Name() As String Dim i As Integer &#39; get the number of worksheets in Active Workbook , and put it as the maximum number of members in the array ReDim sht_Name(1 To ActiveWorkbook.Worksheets.count) i = 1 &#39; loop through all worksheets in Active Workbook For Each sht In ActiveWorkbook.</description>
    </item>
    
    <item>
      <title>Fonctions définies par l&#39;utilisateur (UDF)</title>
      <link>https://www.wikiod.com/fr/excel-vba/fonctions-definies-par-lutilisateur-udf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/excel-vba/fonctions-definies-par-lutilisateur-udf/</guid>
      <description>Syntaxe # Function functionName(argumentVariable As dataType, argumentVariable2 As dataType, Optional argumentVariable3 As dataType) As functionReturnDataType Déclaration de base d&amp;rsquo;une fonction. Chaque fonction a besoin d&amp;rsquo;un nom, mais elle n&amp;rsquo;a pas besoin de prendre d&amp;rsquo;arguments. Il peut prendre 0 argument ou un nombre donné d&amp;rsquo;arguments. Vous pouvez également déclarer un argument comme facultatif (ce qui signifie que cela n&amp;rsquo;a pas d&amp;rsquo;importance si vous le fournissez lors de l&amp;rsquo;appel de la fonction). Il est recommandé de fournir le type de variable pour chaque argument et, de même, de renvoyer le type de données que la fonction elle-même va renvoyer.</description>
    </item>
    
  </channel>
</rss>

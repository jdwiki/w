<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel TypeScript on </title>
    <link>https://www.wikiod.com/fr/docs/typescript/</link>
    <description>Recent content in Tutoriel TypeScript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec TypeScript</title>
      <link>https://www.wikiod.com/fr/typescript/premiers-pas-avec-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/premiers-pas-avec-typescript/</guid>
      <description>Installation et configuration # Arrière plan # TypeScript est un sur-ensemble typé de JavaScript qui se compile directement en code JavaScript. Les fichiers TypeScript utilisent généralement l&amp;rsquo;extension .ts. De nombreux IDE prennent en charge TypeScript sans aucune autre configuration requise, mais TypeScript peut également être compilé avec le package TypeScript Node.JS à partir de la ligne de commande.
IDE # Visual Studio # Visual Studio 2015 inclut TypeScript. Visual Studio 2013 Update 2 ou version ultérieure inclut TypeScript, ou vous pouvez télécharger TypeScript pour les versions antérieures.</description>
    </item>
    
    <item>
      <title>Tests unitaires</title>
      <link>https://www.wikiod.com/fr/typescript/tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/tests-unitaires/</guid>
      <description>ruban # [tape][1] est un framework de test JavaScript minimaliste, il génère un balisage [conforme aux TAP][2].
Pour installer tape à l&amp;rsquo;aide de la commande d&amp;rsquo;exécution npm
npm install --save-dev tape @types/tape Pour utiliser tape avec Typescript, vous devez installer ts-node en tant que package global, pour ce faire, exécutez la commande
npm install -g ts-node Vous êtes maintenant prêt à écrire votre premier test
//math.test.ts import * as test from &amp;quot;tape&amp;quot;; test(&amp;quot;Math test&amp;quot;, (t) =&amp;gt; { t.</description>
    </item>
    
    <item>
      <title>Importation de bibliothèques externes</title>
      <link>https://www.wikiod.com/fr/typescript/importation-de-bibliotheques-externes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/importation-de-bibliotheques-externes/</guid>
      <description>Syntaxe # importer {composant} à partir de &#39;libName&#39; ; // Importera la classe &amp;quot;composant&amp;quot; importer {composant en tant que c} à partir de &#39;libName&#39; ; // Importera la classe &amp;quot;composant&amp;quot; dans un objet &amp;quot;c&amp;quot; importer le composant de &#39;libname&#39; ; // Importera l&#39;exportation par défaut de libName importer * en tant que lib à partir de &#39;libName&#39; ; // Importera tout de libName dans un objet &amp;quot;lib&amp;quot; import lib = require(&#39;libName&#39;); // Importera tout de libName dans un objet &amp;quot;lib&amp;quot; const lib: any = require(&#39;libName&#39;); // Importera tout de libName dans un objet &amp;quot;lib&amp;quot; importer &#39;libName&#39; ; // Importera le module libName uniquement pour ses effets secondaires Il peut sembler que la syntaxe</description>
    </item>
    
    <item>
      <title>tsconfig.json</title>
      <link>https://www.wikiod.com/fr/typescript/tsconfigjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/tsconfigjson/</guid>
      <description>Syntaxe # Utilise le format de fichier JSON Peut également accepter les commentaires de style JavaScript Aperçu # La présence d&amp;rsquo;un fichier tsconfig.json dans un répertoire indique que le répertoire est la racine d&amp;rsquo;un projet TypeScript. Le fichier tsconfig.json spécifie les fichiers racine et les options du compilateur nécessaires pour compiler le projet.
Utilisation de tsconfig.json # En appelant tsc sans fichiers d&amp;rsquo;entrée, auquel cas le compilateur recherche le fichier tsconfig.</description>
    </item>
    
    <item>
      <title>TypeScript avec SystemJS</title>
      <link>https://www.wikiod.com/fr/typescript/typescript-avec-systemjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/typescript-avec-systemjs/</guid>
      <description>Hello World dans le navigateur avec SystemJS # Installez systemjs et plugin-typescript
npm install systemjs npm install plugin-typescript REMARQUE : cela installera le compilateur TypeScript 2.0.0 qui n&amp;rsquo;est pas encore publié.
Pour TypeScript 1.8, vous devez utiliser le plugin-typescript 4.0.16
Créer le fichier hello.ts
export function greeter(person: String) { return &#39;Hello, &#39; + person; } Créer le fichier hello.html
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello World in TypeScript&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;node_modules/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;config.</description>
    </item>
    
    <item>
      <title>Débogage</title>
      <link>https://www.wikiod.com/fr/typescript/debogage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/debogage/</guid>
      <description>Il existe deux façons d&amp;rsquo;exécuter et de déboguer TypeScript :
Transpilez vers JavaScript, exécutez-le dans un nœud et utilisez des mappages pour revenir aux fichiers source TypeScript
ou
Exécutez TypeScript directement en utilisant ts-node
Cet article décrit les deux manières d&amp;rsquo;utiliser Visual Studio Code et WebStorm. Tous les exemples supposent que votre fichier principal est index.ts.
TypeScript avec ts-node dans WebStorm # Ajoutez ce script à votre package.json :
&amp;quot;start:idea&amp;quot;: &amp;quot;ts-node %NODE_DEBUG_OPTION% --ignore false index.</description>
    </item>
    
    <item>
      <title>Contrôles nuls stricts</title>
      <link>https://www.wikiod.com/fr/typescript/controles-nuls-stricts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/controles-nuls-stricts/</guid>
      <description>Contrôles nuls stricts en action # Par défaut, tous les types de TypeScript autorisent null :
function getId(x: Element) { return x.id; } getId(null); // TypeScript does not complain, but this is a runtime error. TypeScript 2.0 ajoute la prise en charge des vérifications NULL strictes. Si vous définissez --strictNullChecks lors de l&amp;rsquo;exécution de tsc (ou définissez cet indicateur dans votre tsconfig.json), les types n&amp;rsquo;autorisent plus null :
function getId(x: Element) { return x.</description>
    </item>
    
    <item>
      <title>Comment utiliser une bibliothèque javascript sans fichier de définition de type</title>
      <link>https://www.wikiod.com/fr/typescript/comment-utiliser-une-bibliotheque-javascript-sans-fichier-de-definition-de-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/comment-utiliser-une-bibliotheque-javascript-sans-fichier-de-definition-de-type/</guid>
      <description>Alors que certaines bibliothèques JavaScript existantes ont [fichiers de définition de type] [1], il y en a beaucoup qui n&amp;rsquo;en ont pas.
TypeScript propose quelques modèles pour gérer les déclarations manquantes.
[1] : https://github.com/DefinitelyTyped/DefinitelyTyped
Créez un module qui exporte une valeur par défaut # Pour des projets plus compliqués, ou dans les cas où vous avez l&amp;rsquo;intention de taper progressivement une dépendance, il peut être plus simple de créer un module.</description>
    </item>
    
    <item>
      <title>Des classes</title>
      <link>https://www.wikiod.com/fr/typescript/des-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/des-classes/</guid>
      <description>TypeScript, comme ECMA Script 6, prend en charge la programmation orientée objet à l&amp;rsquo;aide de classes. Cela contraste avec les anciennes versions de JavaScript, qui ne prenaient en charge que la chaîne d&amp;rsquo;héritage basée sur un prototype.
La prise en charge des classes dans TypeScript est similaire à celle de langages tels que Java et C #, en ce sens que les classes peuvent hériter d&amp;rsquo;autres classes, tandis que les objets sont instanciés en tant qu&amp;rsquo;instances de classe.</description>
    </item>
    
    <item>
      <title>TypeScript avec AngularJS</title>
      <link>https://www.wikiod.com/fr/typescript/typescript-avec-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/typescript/typescript-avec-angularjs/</guid>
      <description>Paramètres # Nom Descriptif controllerAs est un nom d&amp;rsquo;alias, auquel des variables ou des fonctions peuvent être affectées. @voir : https://docs.angularjs.org/guide/directive $inject Liste d&amp;rsquo;injection de dépendance, elle est résolue par angulaire et en passant comme argument aux fonctions de construction. Tout en faisant la directive dans TypeScript, gardez à l&amp;rsquo;esprit la puissance de ce langage de type personnalisé et d&amp;rsquo;interfaces que vous pouvez créer. Ceci est extrêmement utile lors du développement d&amp;rsquo;applications volumineuses.</description>
    </item>
    
  </channel>
</rss>

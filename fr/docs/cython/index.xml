<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel cython on </title>
    <link>https://www.wikiod.com/fr/docs/cython/</link>
    <description>Recent content in Tutoriel cython on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/cython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec cython</title>
      <link>https://www.wikiod.com/fr/cython/debuter-avec-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/cython/debuter-avec-cython/</guid>
      <description>Bonjour le monde # Un fichier Cython pyx doit être traduit en code C (cythonisé) et compilé avant de pouvoir être utilisé à partir de Python. Une approche courante consiste à créer un module d&amp;rsquo;extension qui est ensuite importé dans un programme Python.
Code # Pour cet exemple, nous créons trois fichiers :
hello.pyx contient le code Cython. test.py est un script Python qui utilise l&amp;rsquo;extension hello. setup.py est utilisé pour compiler le code Cython.</description>
    </item>
    
    <item>
      <title>Emballage C&#43;&#43;</title>
      <link>https://www.wikiod.com/fr/cython/emballage-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/cython/emballage-c-/</guid>
      <description>Emballage d&amp;rsquo;une DLL : C++ vers Cython vers Python # Ceci illustre un exemple non trivial d&amp;rsquo;encapsulation d&amp;rsquo;une dll C++ avec Cython. Il couvrira les principales étapes suivantes :
Créez un exemple de DLL avec C++ à l&amp;rsquo;aide de Visual Studio. Enveloppez la DLL avec Cython afin qu&amp;rsquo;elle puisse être appelée en Python. Il est supposé que Cython est installé et que vous pouvez l&amp;rsquo;importer avec succès dans Python.
Pour l&amp;rsquo;étape DLL, il est également supposé que vous êtes familiarisé avec la création d&amp;rsquo;une DLL dans Visual Studio.</description>
    </item>
    
    <item>
      <title>Regroupement Cython</title>
      <link>https://www.wikiod.com/fr/cython/regroupement-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/cython/regroupement-cython/</guid>
      <description>Regroupement d&amp;rsquo;un programme Cython à l&amp;rsquo;aide de pyinstaller # Commencez à partir d&amp;rsquo;un programme Cython avec un point d&amp;rsquo;entrée :
def do_stuff(): cdef int a,b,c a = 1 b = 2 c = 3 print(&amp;quot;Hello World!&amp;quot;) print([a,b,c]) input(&amp;quot;Press Enter to continue.&amp;quot;) Créez un fichier setup.py dans le même dossier :
from distutils.core import setup from Cython.Build import cythonize setup( name = &amp;quot;Hello World&amp;quot;, ext_modules = cythonize(&#39;program.pyx&#39;), ) L&amp;rsquo;exécuter avec python setup.</description>
    </item>
    
    <item>
      <title>Code C d&#39;emballage</title>
      <link>https://www.wikiod.com/fr/cython/code-c-demballage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/cython/code-c-demballage/</guid>
      <description>Utilisation des fonctions d&amp;rsquo;une bibliothèque C personnalisée # Nous avons une bibliothèque C nommée my_random qui produit des nombres aléatoires à partir d&amp;rsquo;une distribution personnalisée. Il fournit deux fonctions que nous voulons utiliser : set_seed(long seed) et rand() (et bien d&amp;rsquo;autres dont nous n&amp;rsquo;avons pas besoin). Pour les utiliser dans Cython, nous devons
définir une interface dans le fichier .pxd et appelez la fonction dans le fichier .pyx. Code # test_extern.</description>
    </item>
    
  </channel>
</rss>

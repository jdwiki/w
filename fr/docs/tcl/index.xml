<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel tcl on </title>
    <link>https://www.wikiod.com/fr/docs/tcl/</link>
    <description>Recent content in Tutoriel tcl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/tcl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec tcl</title>
      <link>https://www.wikiod.com/fr/tcl/premiers-pas-avec-tcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/premiers-pas-avec-tcl/</guid>
      <description>Installation # Installation de Tcl 8.6.4 sur Windows :
Le moyen le plus simple d&amp;rsquo;obtenir Tcl sur une machine Windows est d&amp;rsquo;installer le ActiveTcl distribution from ActiveState.
Accédez à [www.activestate.com][1] et suivez les liens vers download the Free Community Edition of ActiveTcl for Windows (choose 32/64 bit version appropriately).
Exécutez le programme d&amp;rsquo;installation, ce qui entraînera une nouvelle installation d&amp;rsquo;ActiveTcl usually in the C:\Tcl directory.
Ouvrez une invite de commande pour tester l&amp;rsquo;installation, tapez &amp;ldquo;tclsh&amp;rdquo; qui should open an interactive tcl console.</description>
    </item>
    
    <item>
      <title>Expressions</title>
      <link>https://www.wikiod.com/fr/tcl/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/expressions/</guid>
      <description>Un autre avantage de l&amp;rsquo;utilisation de chaînes d&amp;rsquo;expression entre accolades est que le compilateur d&amp;rsquo;octets peut généralement générer un code plus efficace (5 à 10 fois plus rapide) à partir de celles-ci.
Les problèmes avec les expressions sans accolades # Il est recommandé de fournir des arguments de chaîne d&amp;rsquo;expression sous forme de chaînes entre accolades. La rubrique &amp;ldquo;Double substitution&amp;rdquo; décrit les raisons importantes derrière la même chose.
La commande expr évalue une chaîne d&amp;rsquo;expression basée sur un opérateur pour calculer une valeur.</description>
    </item>
    
    <item>
      <title>Arguments de procédure</title>
      <link>https://www.wikiod.com/fr/tcl/arguments-de-procedure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/arguments-de-procedure/</guid>
      <description>Références: [proc][1] [Développement des arguments][2] (section 5)
[1] : http://tcl.tk/man/tcl/TclCmd/proc.htm [2] : http://tcl.tk/man/tcl8.6/TclCmd/Tcl.htm
Une procédure qui n&amp;rsquo;accepte pas d&amp;rsquo;arguments # proc myproc {} { puts &amp;quot;hi&amp;quot; } myproc # =&amp;gt; hi Une liste d&amp;rsquo;arguments vide (le deuxième argument après le nom de la procédure, &amp;ldquo;myproc&amp;rdquo;) signifie que la procédure n&amp;rsquo;acceptera pas d&amp;rsquo;arguments.
Une procédure qui accepte un nombre variable d&amp;rsquo;arguments # ### Definition proc myproc {alpha {beta {}} {gamma green}} { puts [list $alpha $beta $gamma] } ### Use myproc A # =&amp;gt; A {} green myproc A B # =&amp;gt; A B green myproc A B C # =&amp;gt; A B C Cette procédure accepte un, deux ou trois arguments : les paramètres dont les noms sont le premier élément d&amp;rsquo;une liste à deux éléments sont facultatifs.</description>
    </item>
    
    <item>
      <title>Dictionnaires</title>
      <link>https://www.wikiod.com/fr/tcl/dictionnaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/dictionnaires/</guid>
      <description>Les dictionnaires en Tcl sont des values qui contiennent une correspondance entre des valeurs arbitraires et d&amp;rsquo;autres valeurs arbitraires. Ils ont été introduits dans Tcl 8.5, bien qu&amp;rsquo;il existe des versions limitées pour Tcl 8.4 (maintenant non pris en charge). Les dictionnaires sont syntaxiquement les mêmes que les listes avec un nombre pair d&amp;rsquo;éléments ; la première paire d&amp;rsquo;éléments est la première clé et la première valeur du dictionnaire, la deuxième paire est le deuxième tuple.</description>
    </item>
    
    <item>
      <title>variables</title>
      <link>https://www.wikiod.com/fr/tcl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/variables/</guid>
      <description>Syntaxe # définir varName ?value? &amp;ndash; désactivé ?-pas de plainte ? , ?varName varName varName?
met $varName
met [set varName]
variable varName
global varName ?varName varName ?
Les paramètres entre ?&amp;hellip;? tels que ?varName? représentent des arguments optionnels pour une commande Tcl.
Documentation : [global][1], [upvar][2]
[1] : http://www.tcl.tk/man/tcl/TclCmd/global.htm [2] : http://www.tcl.tk/man/tcl/TclCmd/upvar.htm
Affectation de valeurs aux variables # La commande set est utilisée pour assigner des valeurs en Tcl. Lorsqu&amp;rsquo;il est appelé avec deux arguments de la manière suivante,</description>
    </item>
    
    <item>
      <title>Expressions régulières</title>
      <link>https://www.wikiod.com/fr/tcl/expressions-regulieres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/expressions-regulieres/</guid>
      <description>Syntaxe # regexp ? commutateurs ? exp chaîne ?matchVar? ?subMatchVar subMatchVar &amp;hellip;? regsub ? Commutateurs ? exp string subSpec ?varName? Cette rubrique n&amp;rsquo;est pas destinée à discuter des expressions régulières elles-mêmes. Il existe de nombreuses ressources sur Internet expliquant les expressions régulières et des outils pour aider à créer des expressions régulières.
Cette rubrique tentera de couvrir les commutateurs et méthodes courants d&amp;rsquo;utilisation des expressions régulières dans Tcl et certaines des différences entre Tcl et d&amp;rsquo;autres moteurs d&amp;rsquo;expressions régulières.</description>
    </item>
    
    <item>
      <title>Chemins et noms de fichiers</title>
      <link>https://www.wikiod.com/fr/tcl/chemins-et-noms-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/chemins-et-noms-de-fichiers/</guid>
      <description>Syntaxe # nom_répertoire du fichier chemin_fichier fin du fichier chemin du fichier nom racine du fichier chemin_fichier extension de fichier filepath jointure de fichier chemin1 chemin2 &amp;hellip; normalisation du fichier chemin nom natif du fichier chemin Travailler avec des chemins d&amp;rsquo;accès et des noms de fichiers # % set mypath /home/tcluser/sources/tcl/myproject/test.tcl /home/tcluser/sources/tcl/myproject/test.tcl % set dir [file dirname $mypath] /home/tcluser/sources/tcl/myproject % set filename [file tail $mypath] test.tcl % set basefilename [file rootname $filename] test % set extension [file extension $filename] .</description>
    </item>
    
    <item>
      <title>Constructions du langage Tcl</title>
      <link>https://www.wikiod.com/fr/tcl/constructions-du-langage-tcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/constructions-du-langage-tcl/</guid>
      <description>Syntaxe # # Ceci est un commentaire valide # Ceci est un {commentaire} valide Placer des commentaires # Les commentaires en Tcl sont mieux considérés comme une autre commande. Un commentaire se compose d&amp;rsquo;un # suivi d&amp;rsquo;un nombre quelconque de caractères jusqu&amp;rsquo;à la prochaine nouvelle ligne. Un commentaire peut apparaître partout où une commande peut être placée.
# this is a valid comment proc hello { } { # the next comment needs the ; before it to indicate a new command is # being started.</description>
    </item>
    
    <item>
      <title>Structures de contrôle</title>
      <link>https://www.wikiod.com/fr/tcl/structures-de-controle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tcl/structures-de-controle/</guid>
      <description>Syntaxe # si expr1 ?alors? corps1 elseif expr2 ?alors? corps2 &amp;hellip; ?autrement ? ?corpsN? pour démarrer le test du corps suivant tandis que le corps d&amp;rsquo;essai foreach varlist1 liste1 ?varlist2 liste2 &amp;hellip;? corps Documentation: break, pour, foreach, if, switch, uplevel, while
si / tant que / pour # si expr1 ?alors? body1 elseif expr2 ?alors? corps2 &amp;hellip; ?autrement ? ?corpsN?
exprN est une expression qui donne une valeur booléenne. bodyN est une liste de commandes.</description>
    </item>
    
  </channel>
</rss>

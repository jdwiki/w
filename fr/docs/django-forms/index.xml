<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django-forms Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/django-forms/</link>
    <description>Recent content in django-forms Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/django-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec django-forms</title>
      <link>https://www.wikiod.com/fr/django-forms/premiers-pas-avec-django-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-forms/premiers-pas-avec-django-forms/</guid>
      <description>Installation ou configuration # Instructions détaillées sur la configuration ou l&amp;rsquo;installation de django-forms.</description>
    </item>
    
    <item>
      <title>Utilisation du formulaire modèle</title>
      <link>https://www.wikiod.com/fr/django-forms/utilisation-du-formulaire-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-forms/utilisation-du-formulaire-modele/</guid>
      <description>Django [ModelForm][1] permet la création d&amp;rsquo;une classe Form à partir d&amp;rsquo;un modèle Django.
[1] : https://docs.djangoproject.com/en/1.10/topics/forms/modelforms/#modelform
Rendre les champs non modifiables # Django 1.9 a ajouté l&amp;rsquo;attribut [Field.disabled][1] :
L&amp;rsquo;argument booléen disabled, lorsqu&amp;rsquo;il est défini sur True, désactive un champ de formulaire en utilisant l&amp;rsquo;attribut HTML désactivé afin qu&amp;rsquo;il ne soit pas modifiable par utilisateurs. Même si un utilisateur falsifie la valeur du champ soumis au serveur, elle sera ignorée au profit de la valeur issue du formulaire données initiales.</description>
    </item>
    
    <item>
      <title>Django Formulaires intégrés</title>
      <link>https://www.wikiod.com/fr/django-forms/django-formulaires-integres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-forms/django-formulaires-integres/</guid>
      <description>Django est livré avec plusieurs vues qui nécessitent des formulaires. Ces formulaires sont, naturellement, intégrés. Un bon exemple sont les [formulaires d&amp;rsquo;authentification intégrés][1].
Cette rubrique a pour but d&amp;rsquo;apporter de la documentation sur la façon de travailler avec ces formulaires.
[1] : https://docs.djangoproject.com/en/dev/topics/auth/default/#module-django.contrib.auth.forms
Ajouter des classes CSS personnalisées # Les formulaires intégrés sont excellents, mais il est parfois nécessaire de les personnaliser, d&amp;rsquo;ajouter de nouveaux champs ou simplement de modifier les attributs CSS.</description>
    </item>
    
    <item>
      <title>Essai</title>
      <link>https://www.wikiod.com/fr/django-forms/essai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-forms/essai/</guid>
      <description>L&amp;rsquo;une des principales fonctionnalités de Django est les tests unitaires.
Cette rubrique se propose d&amp;rsquo;apporter une documentation complète sur la façon de tester les formulaires.
Test simple # from django.test import TestCase from myapp.forms import MyForm class MyAppTests(TestCase): def test_forms(self): form_data = {&#39;field1&#39;: &#39;fieldvalue1&#39;} form = MyForm(data=form_data) self.assertTrue(form.is_valid()) </description>
    </item>
    
  </channel>
</rss>

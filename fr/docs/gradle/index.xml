<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Gradle on </title>
    <link>https://www.wikiod.com/fr/docs/gradle/</link>
    <description>Recent content in Tutoriel Gradle on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec gradle</title>
      <link>https://www.wikiod.com/fr/gradle/premiers-pas-avec-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/premiers-pas-avec-gradle/</guid>
      <description>Installation progressive # Exigences : Java JDK ou JRE installé (version 7 ou supérieure pour la version Gradle 3.x)
Étapes d&amp;rsquo;installation :
Téléchargez la distribution Gradle depuis le [site Web officiel][1] Décompressez le ZIP Ajoutez la variable d&amp;rsquo;environnement GRADLE_HOME. Cette variable doit pointer vers les fichiers décompressés de l&amp;rsquo;étape précédente. Ajoutez GRADLE_HOME/bin à votre variable d&amp;rsquo;environnement PATH, afin que vous puissiez exécuter Gradle à partir de l&amp;rsquo;interface de ligne de commande (CLI) Testez votre installation Gradle en tapant gradle -v dans la CLI.</description>
    </item>
    
    <item>
      <title>Dépendances des tâches</title>
      <link>https://www.wikiod.com/fr/gradle/dependances-des-taches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/dependances-des-taches/</guid>
      <description>faireDernier
Notez que dans une définition de tâche de manière plus idiomatique gradle 3.x : utiliser la notation explicite doLast{closure} à la place de l&amp;rsquo;opérateur &amp;ldquo;leftShift&amp;rdquo;(&amp;laquo;) préférable. (leftShift est obsolète dans un grade 3.2 est prévu pour être supprimé dans le grade 5.0.)
task oldStyle &amp;lt;&amp;lt; { println &#39;Deprecated style task&#39; } est équivalent à:
task newStyle { doLast { println &#39;Deprecated style task&#39; } } Ajout de dépendances à l&amp;rsquo;aide de noms de tâches # Nous pouvons changer l&amp;rsquo;ordre d&amp;rsquo;exécution des tâches avec la méthode dependsOn.</description>
    </item>
    
    <item>
      <title>Dépendances</title>
      <link>https://www.wikiod.com/fr/gradle/dependances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/dependances/</guid>
      <description>Ajouter une dépendance de fichier JAR local # JAR unique # Parfois, vous avez un fichier JAR local que vous devez ajouter en tant que dépendance à votre build Gradle. Voici comment procéder :
dependencies { compile files(&#39;path/local_dependency.jar&#39;) } Où path est un chemin de répertoire sur votre système de fichiers et local_dependency.jar est le nom de votre fichier JAR local. Le chemin peut être relatif au fichier de construction.</description>
    </item>
    
    <item>
      <title>Plugins Gradle</title>
      <link>https://www.wikiod.com/fr/gradle/plugins-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/plugins-gradle/</guid>
      <description>Comment écrire un plugin autonome # Pour créer un plug-in Gradle autonome personnalisé à l&amp;rsquo;aide de Java (vous pouvez également utiliser Groovy), vous devez créer une structure comme celle-ci :
plugin |-- build.gradle |-- settings.gradle |-- src |-- main | |-- java | |-- resources | |-- META-INF | |-- gradle-plugins |-- test Configurer la configuration de niveau # Dans le fichier build.gradle vous définissez votre projet.
apply plugin: &#39;java&#39; apply plugin: &#39;maven&#39; dependencies { compile gradleApi() } Le plugin java sera utilisé pour écrire du code java.</description>
    </item>
    
    <item>
      <title>Gradle Wrapper</title>
      <link>https://www.wikiod.com/fr/gradle/gradle-wrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/gradle-wrapper/</guid>
      <description>Présentation de Gradle Wrapper # Gradle a la capacité d&amp;rsquo;ajouter un wrapper aux projets. Ce wrapper évite à tous les utilisateurs ou aux systèmes d&amp;rsquo;intégration continue d&amp;rsquo;avoir Gradle installé. Cela évite également les problèmes de version lorsqu&amp;rsquo;il existe une certaine incompatibilité entre la version utilisée par le projet et celle que les utilisateurs ont installée. Pour ce faire, il installe une version de gradle localement dans le projet.
Les utilisateurs du projet lancent simplement :</description>
    </item>
    
    <item>
      <title>Performances progressives</title>
      <link>https://www.wikiod.com/fr/gradle/performances-progressives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/performances-progressives/</guid>
      <description>Profilage d&amp;rsquo;un build # Avant de commencer à optimiser les performances de votre build Gradle, vous devez établir une ligne de base et déterminer quelles parties du build prennent le plus de temps. Pour ce faire, vous pouvez profiler votre build en ajoutant l&amp;rsquo;argument --profile à votre commande Gradle :
gradle --profile ./gradlew --profile Une fois la construction terminée, vous verrez un rapport de profil HTML pour la construction sous .</description>
    </item>
    
    <item>
      <title>Gradle Init Scripts</title>
      <link>https://www.wikiod.com/fr/gradle/gradle-init-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/gradle-init-scripts/</guid>
      <description>Ajouter un référentiel par défaut pour tous les projets # Ajoutez un init.gradle à votre dossier gradle utilisateur. Le init.gradle est reconnu sur chaque projet.
Unix: ~/.gradle/init.gradle Ce sont également des emplacements alternatifs où le script d&amp;rsquo;initialisation peut être placé et chargé automatiquement :-
Tout fichier *.gradle dans USER_HOME/.gradle/init.d Tout fichier *.gradle dans le répertoire init.d de l&amp;rsquo;installation de Gradle init.gradle avec mavenLocal comme référentiel dans tous les projets.
allprojects { repositories { mavenLocal() } } Avec cela, votre cache Maven local est disponible dans tous les référentiels.</description>
    </item>
    
    <item>
      <title>Personnalisation des tâches IntelliJ IDEA</title>
      <link>https://www.wikiod.com/fr/gradle/personnalisation-des-taches-intellij-idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/personnalisation-des-taches-intellij-idea/</guid>
      <description>Syntaxe # groovy.util.Node = node.find { childNode -&amp;gt; return true || faux } node.append(nodeYouWantAsAChild) groovy.util.Node parsedNode = (nouveau XmlParser()).parseText(someRawXMLString) &amp;rsquo;&amp;rsquo;&amp;rsquo; chaîne multi-lignes (non interpolée) &amp;rsquo;&#39;&#39; Les trois fichiers de base d&amp;rsquo;un projet IntelliJ - les fichiers ipr, iws et iml - sont accessibles comme dans gradle dans la tâche d&amp;rsquo;idée via
project.ipr module.iml workspace.iws l&amp;rsquo;utilisation du .withXml vous permet d&amp;rsquo;accéder au xml. L&amp;rsquo;utilisation de .asNode() le transforme en un nœud xml groovy.</description>
    </item>
    
    <item>
      <title>Initialisation de Gradle</title>
      <link>https://www.wikiod.com/fr/gradle/initialisation-de-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/initialisation-de-gradle/</guid>
      <description>Terminologie # [Tâche][1] - un travail atomique qu&amp;rsquo;une construction exécute. Les tâches ont des &amp;ldquo;entrées&amp;rdquo;, des &amp;ldquo;sorties&amp;rdquo; et des dépendances de tâche. [dependencies {}][2] - Déclare File ou dépendances binaires nécessaires pour exécuter des tâches. Par exemple, org.slf4j:slf4j-api:1.7.21 est un raccourci [coordinates][3] à une dépendance Maven. [repositories {}][4] - Comment Gradle trouve les fichiers pour les dépendances externes. Vraiment, juste une collection de fichiers organisés par groupe, nom et version. Par exemple : jcenter() est une méthode pratique pour maven { url &#39;http://jcenter.</description>
    </item>
    
    <item>
      <title>Ordonner des tâches</title>
      <link>https://www.wikiod.com/fr/gradle/ordonner-des-taches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gradle/ordonner-des-taches/</guid>
      <description>Veuillez noter que mustRunAfter et shouldRunAfter sont marqués comme &amp;ldquo;en incubation&amp;rdquo; (à partir de Gradle 3.0), ce qui signifie qu&amp;rsquo;il s&amp;rsquo;agit de fonctionnalités expérimentales et que leur comportement peut être modifié dans les futures versions.
Deux règles de commande sont disponibles :
mustRunAfter shouldRunAfter Lorsque vous utilisez la règle de tri &amp;ldquo;mustRunAfter&amp;rdquo;, vous spécifiez que la tâcheB doit toujours s&amp;rsquo;exécuter après la tâcheA, chaque fois que la tâcheA et la tâcheB seront exécutées.</description>
    </item>
    
  </channel>
</rss>

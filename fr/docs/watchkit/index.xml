<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Watchkit Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/watchkit/</link>
    <description>Recent content in Watchkit Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/watchkit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec watchkit</title>
      <link>https://www.wikiod.com/fr/watchkit/premiers-pas-avec-watchkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/watchkit/premiers-pas-avec-watchkit/</guid>
      <description>Connecter le code avec l&amp;rsquo;interface utilisateur # Comme iOS où vous utilisez @IBOutlet et @IBAction, vous pouvez également les utiliser ici.
Disons que nous avons un bouton qui, lorsqu&amp;rsquo;il est cliqué, change le texte de l&amp;rsquo;étiquette en autre chose.
Pour commencer:
Ajoutez un WKInterfaceLabel et un WKInterfaceLabel à InterfaceController.
Ctrl-Faites glisser de WKInterfaceLabel vers InterfaceController.swift et entrez les détails comme indiqué dans l&amp;rsquo;image suivante pour ajouter une propriété de sortie :</description>
    </item>
    
    <item>
      <title>La navigation</title>
      <link>https://www.wikiod.com/fr/watchkit/la-navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/watchkit/la-navigation/</guid>
      <description>Remarque importante # Apple a fortement déconseillé l&amp;rsquo;utilisation des deux styles de navigation dans un seul contrôleur, ce qui peut entraîner le rejet de l&amp;rsquo;application.
Actuellement, la méthode préférée consiste à utiliser un style hiérarchique plutôt qu&amp;rsquo;un style de page, tel qu&amp;rsquo;il est utilisé dans de nombreuses autres applications Apple qu&amp;rsquo;auparavant.
Navigation basée sur les pages # De nombreuses applications watchOS (comme Activity) ont plusieurs pages que vous pouvez simplement faire défiler entre elles, ce qui est un très bon moyen d&amp;rsquo;utiliser Apple Watch.</description>
    </item>
    
    <item>
      <title>WatchConnectivité</title>
      <link>https://www.wikiod.com/fr/watchkit/watchconnectivite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/watchkit/watchconnectivite/</guid>
      <description>Connecter votre application WatchOS à votre application iOS peut être une tâche à accomplir alors que vous ne l&amp;rsquo;avez jamais fait auparavant. Ce tutoriel vous montrera les bases de base afin d&amp;rsquo;accomplir cette tâche très importante.
##Configuration iOS Application iPhone
importez WatchConnectivity et conformez-vous à WCSessionDelegate. utiliser le délégué de session statique via WCSession.default(). Envoyez des données à l&amp;rsquo;application Watch en utilisant : WCSession.default().sendMessage(message, replyHandler :_ errorHandler :_) L&amp;rsquo;objet message doit être un dictionnaire de type [String:Any] Si vous recherchez des données à renvoyer depuis l&amp;rsquo;application Watch, fournissez la logique dans une fermeture définie dans le replyHandler ; sinon, passer à zéro.</description>
    </item>
    
  </channel>
</rss>

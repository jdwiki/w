<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brillant Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/shiny/</link>
    <description>Recent content in brillant Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec brillant</title>
      <link>https://www.wikiod.com/fr/shiny/debuter-avec-brillant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/shiny/debuter-avec-brillant/</guid>
      <description>Application simple # Chaque application shiny contient deux parties : une définition d&amp;rsquo;interface utilisateur (UI) et un script de serveur (server). Cet exemple montre comment vous pouvez imprimer &amp;ldquo;Hello world&amp;rdquo; à partir de l&amp;rsquo;interface utilisateur ou du serveur.
UI.R
Dans l&amp;rsquo;interface utilisateur, vous pouvez placer certains objets de vue (div, entrées, boutons, etc.).
library(shiny) # Define UI for application print &amp;quot;Hello world&amp;quot; shinyUI( # Create bootstrap page fluidPage( # Paragraph &amp;quot;Hello world&amp;quot; p(&amp;quot;Hello world&amp;quot;), # Create button to print &amp;quot;Hello world&amp;quot; from server actionButton(inputId = &amp;quot;Print_Hello&amp;quot;, label = &amp;quot;Print_Hello World&amp;quot;), # Create position for server side text textOutput(&amp;quot;Server_Hello&amp;quot;) ) ) Serveur.</description>
    </item>
    
    <item>
      <title>API Javascript</title>
      <link>https://www.wikiod.com/fr/shiny/api-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/shiny/api-javascript/</guid>
      <description>Syntaxe # session$sendCustomMessage(nom,liste de paramètres) Shiny.addCustomMessageHandler(nom, fonction JS qui accepte la liste des paramètres) Shiny.onInputChange(nom,valeur) Envoi de données du serveur au client # Dans de nombreux cas, vous souhaiterez envoyer des données du serveur R au client JS. Voici un exemple très simple :
library(shiny) runApp( list( ui = fluidPage( tags$script( &amp;quot;Shiny.addCustomMessageHandler(&#39;message&#39;, function(params) { alert(params); });&amp;quot; ), actionButton(&amp;quot;btn&amp;quot;,&amp;quot;Press Me&amp;quot;) ), server = function(input, output, session) { observeEvent(input$btn,{ randomNumber &amp;lt;- runif(1,0,100) session$sendCustomMessage(&amp;quot;message&amp;quot;,list(paste0(randomNumber,&amp;quot; is a random number!</description>
    </item>
    
    <item>
      <title>reactive, reactiveValue et eventReactive, observe et observeEvent dans Shiny</title>
      <link>https://www.wikiod.com/fr/shiny/reactive-reactivevalue-et-eventreactive-observe-et-observeevent-dans-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/shiny/reactive-reactivevalue-et-eventreactive-observe-et-observeevent-dans-shiny/</guid>
      <description>reactive, reactiveValue et eventReactive sont différents types d&amp;rsquo;expressions réactives dans Shiny. Ils produisent une sortie qui peut être utilisée comme entrée dans d&amp;rsquo;autres expressions, qui à leur tour dépendront de l&amp;rsquo;expression réactive.
observe et observeEvent sont similaires aux expressions réactives. La grande différence est que les observateurs ne produisent aucun résultat et ne sont donc utiles que pour leurs effets secondaires.
Des exemples de leur utilisation sont donnés dans ce document.</description>
    </item>
    
    <item>
      <title>Télécharger des données sur Shiny</title>
      <link>https://www.wikiod.com/fr/shiny/telecharger-des-donnees-sur-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/shiny/telecharger-des-donnees-sur-shiny/</guid>
      <description>Téléchargement de fichiers csv sur Shiny # Il est également possible qu&amp;rsquo;un utilisateur télécharge des fichiers csv sur votre application Shiny. Le code ci-dessous montre un petit exemple sur la façon dont cela peut être réalisé. Il comprend également une entrée radioButton afin que l&amp;rsquo;utilisateur puisse choisir de manière interactive le séparateur à utiliser.
library(shiny) library(DT) # Define UI ui &amp;lt;- shinyUI(fluidPage( fileInput(&#39;target_upload&#39;, &#39;Choose file to upload&#39;, accept = c( &#39;text/csv&#39;, &#39;text/comma-separated-values&#39;, &#39;.</description>
    </item>
    
    <item>
      <title>Comment écrire des applications brillantes MCVE (exemple minimal, complet et vérifiable)</title>
      <link>https://www.wikiod.com/fr/shiny/comment-ecrire-des-applications-brillantes-mcve-exemple-minimal-complet-et-verifiable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/shiny/comment-ecrire-des-applications-brillantes-mcve-exemple-minimal-complet-et-verifiable/</guid>
      <description>Si vous rencontrez des problèmes avec vos applications Shiny, il est recommandé de créer une application qui illustre votre propos. Cette application doit être aussi simple que possible tout en reflétant votre problème. Cela signifie utiliser des ensembles de données simples, des noms explicites (en particulier pour les ID d&amp;rsquo;E/S) et remplacer les tracés par des tracés plus simples.
Il est également conseillé de créer votre MCVE de manière à nécessiter le moins de bibliothèques non standard possible.</description>
    </item>
    
  </channel>
</rss>

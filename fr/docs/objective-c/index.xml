<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur le langage Objective-C on </title>
    <link>https://www.wikiod.com/fr/docs/objective-c/</link>
    <description>Recent content in Tutoriel sur le langage Objective-C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage Objective-C</title>
      <link>https://www.wikiod.com/fr/objective-c/premiers-pas-avec-le-langage-objective-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/premiers-pas-avec-le-langage-objective-c/</guid>
      <description>Bonjour le monde # Ce programme affichera &amp;ldquo;Hello World!&amp;rdquo;
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, char * argv[]) { NSLog(@&amp;quot;Hello World!&amp;quot;); } #import est une directive de pré-processeur, qui indique que nous voulons importer ou inclure les informations de ce fichier dans le programme. Dans ce cas, le compilateur copiera le contenu de Foundation.h dans le framework Foundation en haut du fichier. La principale différence entre #import et #include est que #import est suffisamment &amp;ldquo;intelligent&amp;rdquo; pour ne pas retraiter les fichiers qui ont déjà été inclus dans d&amp;rsquo;autres #includes.</description>
    </item>
    
    <item>
      <title>Enregistrement</title>
      <link>https://www.wikiod.com/fr/objective-c/enregistrement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/enregistrement/</guid>
      <description>Syntaxe # NSLog(@&amp;ldquo;texte à enregistrer&amp;rdquo;); // Journal de texte de base NSLog(@&amp;ldquo;data : %f - %.2f&amp;rdquo;, myFloat, anotherFloat); // Journalisation du texte incluant les nombres flottants. NSLog(@&amp;ldquo;données : %i&amp;rdquo;, monEntier) ; // Texte de journalisation comprenant un nombre entier. NSLog(@&amp;ldquo;data : %@&amp;rdquo;, myStringOrObject); // Texte de journalisation faisant référence à une autre chaîne ou à tout objet dérivé de NSObject. Pour la journalisation de divers types d&amp;rsquo;objets et de types de données, reportez-vous à : [Objective-C, Format Specificers][1]</description>
    </item>
    
    <item>
      <title>NSString</title>
      <link>https://www.wikiod.com/fr/objective-c/nsstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/nsstring/</guid>
      <description>La classe NSString fait partie du framework Foundation pour travailler avec des chaînes (séries de caractères). Il comprend également des méthodes de comparaison, de recherche et de modification de chaînes.
Pour imbriquer divers types d&amp;rsquo;objets et de types de données dans des NSStrings, reportez-vous à : [Objective-C, Format Specificers][1]
[1] : https://www.wikiod.com/fr/objective-c/specificateurs-de-format
Encodage et décodage # // decode NSString *string = [[NSString alloc] initWithData:utf8Data encoding:NSUTF8StringEncoding]; // encode NSData *utf8Data = [string dataUsingEncoding:NSUTF8StringEncoding]; Certains encodages pris en charge sont :</description>
    </item>
    
    <item>
      <title>Blocs</title>
      <link>https://www.wikiod.com/fr/objective-c/blocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/blocs/</guid>
      <description>Syntaxe # // Declare as a local variable:
returnType (^blockName)(parameterType1, parameterType2, &amp;hellip;) = ^returnType(argument1, argument2, &amp;hellip;) {&amp;hellip;};
// Declare as a property:
@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);
// Declare as a method parameter:
- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;
// Declare as an argument to a method call:
[someObject someMethodThatTakesABlock:^returnType (parameters) {&amp;hellip;}];
// Declare as a typedef:
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&amp;hellip;};
// Declare a C function return a block object:</description>
    </item>
    
    <item>
      <title>Célibataires</title>
      <link>https://www.wikiod.com/fr/objective-c/celibataires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/celibataires/</guid>
      <description>Assurez-vous simplement de lire ce fil ( http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons ) avant de l&amp;rsquo;utiliser.
Utilisation de Grand Central Dispatch (GCD) # GCD garantira que votre singleton n&amp;rsquo;est instancié qu&amp;rsquo;une seule fois, même s&amp;rsquo;il est appelé à partir de plusieurs threads. Insérez ceci dans n&amp;rsquo;importe quelle classe pour une instance singleton appelée shared.
+ (instancetype)shared { // Variable that will point to the singleton instance. The `static` // modifier makes it behave like a global variable: the value assigned // to it will &amp;quot;survive&amp;quot; the method call.</description>
    </item>
    
    <item>
      <title>Environnement d&#39;exécution de bas niveau</title>
      <link>https://www.wikiod.com/fr/objective-c/environnement-dexecution-de-bas-niveau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/environnement-dexecution-de-bas-niveau/</guid>
      <description>Pour utiliser le runtime Objective-C, vous devez l&amp;rsquo;importer.
#import &amp;lt;objc/objc.h&amp;gt; Méthodes d&amp;rsquo;augmentation à l&amp;rsquo;aide de Method Swizzling # Le runtime Objective-C vous permet de modifier l&amp;rsquo;implémentation d&amp;rsquo;une méthode au moment de l&amp;rsquo;exécution. Cela s&amp;rsquo;appelle method swizzling et est souvent utilisé pour échanger les implémentations de deux méthodes. Par exemple, si les méthodes foo et bar sont échangées, l&amp;rsquo;envoi du message foo exécutera désormais l&amp;rsquo;implémentation de bar et vice versa.
Cette technique peut être utilisée pour augmenter ou &amp;ldquo;corriger&amp;rdquo; des méthodes existantes que vous ne pouvez pas modifier directement, telles que les méthodes de classes fournies par le système.</description>
    </item>
    
    <item>
      <title>Protocoles</title>
      <link>https://www.wikiod.com/fr/objective-c/protocoles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/protocoles/</guid>
      <description>Méthodes facultatives et obligatoires # Par défaut, toutes les méthodes déclarées dans un protocole sont obligatoires. Cela signifie que toute classe conforme à ce protocole doit implémenter ces méthodes.
Il est également possible de déclarer des méthodes optionnelles. Ces méthodes ne peuvent être mises en œuvre qu&amp;rsquo;en cas de besoin.
Vous marquez les méthodes facultatives avec la directive @optional.
@protocol NewProtocol - (void)protocolMethod:(id)argument; @optional - (id)anotherMethod; @end Dans ce cas, seul anotherMethod est marqué comme facultatif ; les méthodes sans la directive @optional sont supposées être requises.</description>
    </item>
    
    <item>
      <title>Codage de la valeur clé  observation de la valeur clé</title>
      <link>https://www.wikiod.com/fr/objective-c/codage-de-la-valeur-cle--observation-de-la-valeur-cle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/codage-de-la-valeur-cle--observation-de-la-valeur-cle/</guid>
      <description>Exemple de codage de valeur clé de la vie réelle le plus courant # Le codage de la valeur clé est intégré à NSObject à l&amp;rsquo;aide du protocole NSKeyValueCoding.
Qu&amp;rsquo;est-ce que cela signifie?
Cela signifie que tout objet id est capable d&amp;rsquo;appeler la méthode valueForKey et ses différentes variantes comme valueForKeyPath etc. &#39;
Cela signifie également que tout objet id peut également invoquer la méthode setValue et ses différentes variantes.</description>
    </item>
    
    <item>
      <title>Classes et objets</title>
      <link>https://www.wikiod.com/fr/objective-c/classes-et-objets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/classes-et-objets/</guid>
      <description>Syntaxe # Cat *cat = [[Cat alloc] init] ; // Crée un objet chat de type Chat Chien *chien = [[Chien alloc] init] ; // Crée un objet chien de type Chien NSObject *someObject = [allocation NSObject] ; [init d&amp;rsquo;unObjet] ; // ** ne fais pas ça ** XYZObject *object = [XYZObject new] ; // Utilisez new pour créer des objets si AUCUN argument n&amp;rsquo;est nécessaire pour l&amp;rsquo;initialisation NSString *someString = @&amp;ldquo;Hello, World!</description>
    </item>
    
    <item>
      <title>NSURL</title>
      <link>https://www.wikiod.com/fr/objective-c/nsurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/objective-c/nsurl/</guid>
      <description>Créer # À partir de NSString :
NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; Vous pouvez également utiliser les méthodes suivantes :
- initWithString: + URLWithString:relativeToURL: - initWithString:relativeToURL: + fileURLWithPath:isDirectory: - initFileURLWithPath:isDirectory: + fileURLWithPath: - initFileURLWithPath: Designated Initializer + fileURLWithPathComponents: + URLByResolvingAliasFileAtURL:options:error: + URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: - initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: + fileURLWithFileSystemRepresentation:isDirectory:relativeToURL: - getFileSystemRepresentation:maxLength: - initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL: Comparer NSURL # NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; NSURL *myUrl2 = [NSURL URLWithString: urlString]; if ([myUrl isEqual:myUrl2]) return YES; Modification et conversion d&amp;rsquo;une URL de fichier avec suppression et ajout de chemin # 1.</description>
    </item>
    
  </channel>
</rss>

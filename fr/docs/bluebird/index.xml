<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel oiseau bleu on </title>
    <link>https://www.wikiod.com/fr/docs/bluebird/</link>
    <description>Recent content in Tutoriel oiseau bleu on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/bluebird/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec bluebird</title>
      <link>https://www.wikiod.com/fr/bluebird/premiers-pas-avec-bluebird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/bluebird/premiers-pas-avec-bluebird/</guid>
      <description>Installation ou configuration # Node.js # npm install bluebird Alors:
var Promise = require(&amp;quot;bluebird&amp;quot;); Navigateurs # Il existe de nombreuses façons d&amp;rsquo;utiliser bluebird dans les navigateurs :
Téléchargements directs Full build bluebird.js Full build minified bluebird.min.js Core build bluebird.core.js Core build minified bluebird.core.min.js Vous pouvez utiliser browserify sur l&amp;rsquo;export principal Vous pouvez utiliser le package bower. Lors de l&amp;rsquo;utilisation de balises de script, les variables globales Promise et P (alias pour Promise) deviennent disponibles.</description>
    </item>
    
    <item>
      <title>Conversion d&#39;une API de rappel en promesses.</title>
      <link>https://www.wikiod.com/fr/bluebird/conversion-dune-api-de-rappel-en-promesses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/bluebird/conversion-dune-api-de-rappel-en-promesses/</guid>
      <description>Les promesses ont un état, elles commencent comme étant en attente et peuvent se régler sur :
fulfilled signifiant que le calcul s&amp;rsquo;est terminé avec succès. rejected signifiant que le calcul a échoué. Promettez que les fonctions de retour ne devraient jamais lancer, elles devraient plutôt renvoyer des rejets. Lancer à partir d&amp;rsquo;une fonction de retour de promesse vous obligera à utiliser à la fois un } catch { et un .</description>
    </item>
    
    <item>
      <title>Promesse.tout</title>
      <link>https://www.wikiod.com/fr/bluebird/promessetout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/bluebird/promessetout/</guid>
      <description>Promise.all( Iterable&amp;lt;any&amp;gt; | Promise&amp;lt;Iterable&amp;lt;any&amp;gt;&amp;gt; input ) -&amp;gt; Promise Cette méthode est utile lorsque vous souhaitez attendre que plusieurs promesses se terminent.
Étant donné un Iterable(les tableaux sont Iterable), ou une promesse d&amp;rsquo;un Iterable , qui produit des promesses (ou un mélange de promesses et de valeurs), parcourt toutes les valeurs de Iterable dans un tableau et renvoie une promesse qui est remplie lorsque tous les éléments du tableau sont remplis. La valeur de réalisation de la promesse est un tableau avec des valeurs de réalisation à des positions respectives par rapport au tableau d&amp;rsquo;origine.</description>
    </item>
    
  </channel>
</rss>

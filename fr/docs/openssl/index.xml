<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel openssl on </title>
    <link>https://www.wikiod.com/fr/docs/openssl/</link>
    <description>Recent content in Tutoriel openssl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/openssl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec openssl</title>
      <link>https://www.wikiod.com/fr/openssl/premiers-pas-avec-openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/openssl/premiers-pas-avec-openssl/</guid>
      <description>Installation ou configuration # OpenSSL est un projet open source qui fournit une boîte à outils robuste, de qualité commerciale et complète pour les protocoles Transport Layer Security (TLS) et Secure Sockets Layer (SSL). C&amp;rsquo;est aussi une bibliothèque de cryptographie à usage général.
La boîte à outils OpenSSL est concédée sous une licence de style Apache, ce qui signifie essentiellement que vous êtes libre de l&amp;rsquo;obtenir et de l&amp;rsquo;utiliser à des fins commerciales et non commerciales sous réserve de certaines conditions de licence simples.</description>
    </item>
    
    <item>
      <title>Clés</title>
      <link>https://www.wikiod.com/fr/openssl/cles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/openssl/cles/</guid>
      <description>Syntaxe # EVP_PKEY *EVP_PKEY_new(void); RSA * RSA_new(void); int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb); int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key); int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, caractère non signé *kstr, int klen, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); annuler EVP_PKEY_free(EVP_PKEY *clé); Générer une clé RSA # Afin de générer une clé RSA, un EVP_PKEY doit d&amp;rsquo;abord être alloué avec EVP_PKEY_new:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel iOS on </title>
    <link>https://www.wikiod.com/fr/docs/ios/</link>
    <description>Recent content in Tutoriel iOS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec iOS</title>
      <link>https://www.wikiod.com/fr/ios/premiers-pas-avec-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/premiers-pas-avec-ios/</guid>
      <description>Création d&amp;rsquo;une application à vue unique par défaut # Pour développer une application pour iOS, vous devez commencer par une application appelée Xcode. Il existe d&amp;rsquo;autres outils alternatifs que vous pouvez utiliser, mais Xcode est l&amp;rsquo;outil officiel d&amp;rsquo;Apple. Notez cependant qu&amp;rsquo;il ne fonctionne que sur macOS. La dernière version officielle est Xcode 8.3.3 avec Xcode 9 (actuellement en version bêta) qui devrait sortir plus tard cette année.
Démarrez votre Mac et installez Xcode depuis l&amp;rsquo;App Store s&amp;rsquo;il n&amp;rsquo;est pas déjà installé.</description>
    </item>
    
    <item>
      <title>UIViews personnalisés à partir de fichiers XIB</title>
      <link>https://www.wikiod.com/fr/ios/uiviews-personnalises-a-partir-de-fichiers-xib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/uiviews-personnalises-a-partir-de-fichiers-xib/</guid>
      <description>[D&amp;rsquo;Apple : Création d&amp;rsquo;une vue personnalisée qui s&amp;rsquo;affiche dans Interface Builder] [1]
[1] : https://developer.apple.com/library/ios/recipes/xcode_help-IB_objects_media/Chapters/CreatingaLiveViewofaCustomObject.html
• Remarque : Gardez à l&amp;rsquo;esprit que si vous utilisez des polices &amp;ldquo;personnalisées&amp;rdquo; sophistiquées dans vos éléments XIB (tels que UILabel, UITextField, etc.), le temps de chargement initial de votre XIB sera plus long en fonction de la police choisie et de la version du système.
Éléments de câblage # Créer un fichier XIB
Barre de menus Xcode &amp;gt; Fichier &amp;gt; Nouveau &amp;gt; Fichier.</description>
    </item>
    
    <item>
      <title>UILabel</title>
      <link>https://www.wikiod.com/fr/ios/uilabel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/uilabel/</guid>
      <description>La classe UILabel implémente une vue texte en lecture seule. Vous pouvez utiliser cette classe pour dessiner une ou plusieurs lignes de texte statique, telles que celles que vous pourriez utiliser pour identifier d&amp;rsquo;autres parties de votre interface utilisateur. La classe UILabel de base prend en charge les styles simples et complexes du texte de l&amp;rsquo;étiquette. Vous pouvez également contrôler les aspects de l&amp;rsquo;apparence, par exemple si l&amp;rsquo;étiquette utilise une ombre ou dessine avec une surbrillance.</description>
    </item>
    
    <item>
      <title>Transmission de données entre les contrôleurs de vue</title>
      <link>https://www.wikiod.com/fr/ios/transmission-de-donnees-entre-les-controleurs-de-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/transmission-de-donnees-entre-les-controleurs-de-vue/</guid>
      <description>Utilisation du modèle délégué (renvoi de données) # Pour retransmettre des données du contrôleur de vue actuel au contrôleur de vue précédent, vous pouvez utiliser le modèle délégué.
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Cet exemple suppose que vous avez créé une transition dans Interface Builder et que vous avez défini l&amp;rsquo;identifiant de transition sur showSecondViewController. Les points de vente et les actions doivent également être reliés aux noms dans le code suivant.</description>
    </item>
    
    <item>
      <title>Disposition automatique</title>
      <link>https://www.wikiod.com/fr/ios/disposition-automatique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/disposition-automatique/</guid>
      <description>La disposition automatique calcule dynamiquement la taille et la position de toutes les vues dans votre hiérarchie de vues, en fonction des contraintes placées sur ces vues. [Source][1]
[1] : https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html
Syntaxe # NSLayoutConstraint(item : Any, attribute : NSLayoutAttribute, relatedBy : NSLayoutRelation, toItem : Any ?, attribut : NSLayoutAttribute, multiplicateur : CGFloat, constant : CGFloat) // Créer une contrainte par programmation Espacer les vues uniformément # [![entrez la description de l&amp;rsquo;image ici][1]][1]</description>
    </item>
    
    <item>
      <title>UIAlertController</title>
      <link>https://www.wikiod.com/fr/ios/uialertcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/uialertcontroller/</guid>
      <description>Un objet UIAlertController affiche un message d&amp;rsquo;alerte à l&amp;rsquo;utilisateur. Cette classe remplace les classes UIActionSheet et UIAlertView pour affichage des alertes. Après avoir configuré le contrôleur d&amp;rsquo;alerte avec le les actions et le style que vous souhaitez, présentez-les à l&amp;rsquo;aide des Méthode presentViewController:animated:completion:.
À partir de [la documentation d&amp;rsquo;Apple] [1]
[UIAlertController dans Swift][2]
[1] : https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAlertController_class/ [2] : https://iosdevcenters.blogspot.com/2016/03/uialertcontroller-in-swift.html
AlertViews avec UIAlertController # UIAlertView et UIActionSheet sont obsolètes dans iOS 8 et versions ultérieures.</description>
    </item>
    
    <item>
      <title>UILocalNotification</title>
      <link>https://www.wikiod.com/fr/ios/uilocalnotification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/uilocalnotification/</guid>
      <description>Les notifications locales permettent à votre application d&amp;rsquo;informer l&amp;rsquo;utilisateur du contenu qui ne nécessite pas l&amp;rsquo;utilisation d&amp;rsquo;un serveur.
Contrairement aux notifications à distance qui sont déclenchées à partir d&amp;rsquo;un serveur, les notifications locales sont planifiées et déclenchées dans une application. Les notifications en général visent à augmenter l&amp;rsquo;interaction de l&amp;rsquo;utilisateur avec l&amp;rsquo;application, invitant ou tentant l&amp;rsquo;utilisateur à l&amp;rsquo;ouvrir et à interagir avec.
UILocalNotification est obsolète dans iOS 10. Utilisez plutôt le framework UserNotifications.</description>
    </item>
    
    <item>
      <title>Notifications push</title>
      <link>https://www.wikiod.com/fr/ios/notifications-push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/notifications-push/</guid>
      <description>Syntaxe # UIUserNotificationSettings.types : UIUserNotificationType // Un masque binaire des types de notification que votre application est autorisée à utiliser UIUserNotificationSettings.categories : Définir // Les groupes d&amp;rsquo;actions enregistrés de l&amp;rsquo;application Paramètres # Paramètre Descriptif infoutilisateur Un dictionnaire contenant des informations de notification à distance, y compris éventuellement un numéro de badge pour l&amp;rsquo;icône de l&amp;rsquo;application, un son d&amp;rsquo;alerte, un message d&amp;rsquo;alerte, un identifiant de notification et des données personnalisées. Enregistrement de l&amp;rsquo;appareil pour les notifications push # Pour enregistrer votre appareil pour les notifications push, ajoutez le code suivant à votre fichier AppDelegate dans la méthode didFinishLaunchingWithOptions :</description>
    </item>
    
    <item>
      <title>CouleurUI</title>
      <link>https://www.wikiod.com/fr/ios/couleurui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/couleurui/</guid>
      <description>Création d&amp;rsquo;une couleur d&amp;rsquo;interface utilisateur # Il existe plusieurs façons de créer un UIColor :
Rapide
En utilisant l&amp;rsquo;une des couleurs prédéfinies :
let redColor = UIColor.redColor() let blueColor: UIColor = .blueColor() // In Swift 3, the &amp;quot;Color()&amp;quot; suffix is removed: let redColor = UIColor.red let blueColor: UIColor = .blue Si le compilateur sait déjà que la variable est une instance de UIColor, vous pouvez ignorer le type :
let view = UIView() view.</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://www.wikiod.com/fr/ios/uitableview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ios/uitableview/</guid>
      <description>Une vue simple, largement utilisée, mais très puissante, qui peut présenter les données sous forme de liste à l&amp;rsquo;aide de lignes et d&amp;rsquo;une seule colonne. Les utilisateurs peuvent faire défiler verticalement les éléments dans une vue de tableau et éventuellement manipuler et sélectionner du contenu.
Syntaxe # - (CGFloat)tableView :(UITableView *)tableView heightForRowAtIndexPath :(NSIndexPath *)indexPath ;
- (CGFloat)tableView :(UITableView *)tableView heightForHeaderInSection :(NSInteger)section ;
- (CGFloat)tableView :(UITableView *)tableView heightForFooterInSection :(NSInteger)section ;
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section ;</description>
    </item>
    
  </channel>
</rss>

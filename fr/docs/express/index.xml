<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>express Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/express/</link>
    <description>Recent content in express Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec express</title>
      <link>https://www.wikiod.com/fr/express/premiers-pas-avec-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/premiers-pas-avec-express/</guid>
      <description>Hello World App, utilisant ExpressJS 4 et Node &amp;gt;= 4 # Préface # Vous aurez besoin de node &amp;gt;= 4 et express 4 pour ce projet. Vous pouvez obtenir la dernière distribution node à partir de [leur page de téléchargement] (https://nodejs.org/en/download/).
Avant ce didacticiel, vous devez initialiser votre projet de nœud en exécutant
$ npm init à partir de la ligne de commande et en remplissant les informations souhaitées. Notez que vous pouvez modifier les informations à tout moment en modifiant le fichier package.</description>
    </item>
    
    <item>
      <title>La gestion des erreurs</title>
      <link>https://www.wikiod.com/fr/express/la-gestion-des-erreurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/la-gestion-des-erreurs/</guid>
      <description>Syntaxe # app.use(function(err, req, res, next) {}) // Middleware de base Paramètres # Nom Descriptif &amp;rsquo;erreur&#39; Objet avec informations d&amp;rsquo;erreur req Objet de requête HTTP res Objet de réponse HTTP suivant fonction utilisée pour lancer la prochaine exécution du middleware Échantillon de base # Contrairement aux autres fonctions middleware, les fonctions middleware de gestion des erreurs ont quatre arguments au lieu de trois : (err, req, res, next).
Goûter:
app.use(function(err, req, res, next) { console.</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/express/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/routage/</guid>
      <description>Routage Hello World # Le fichier d&amp;rsquo;application principal charge le fichier d&amp;rsquo;itinéraires dans lequel les itinéraires sont définis.
app.js
var express = require(&#39;express&#39;); var app = express(); app.use(&#39;/&#39;, require(&#39;./routes&#39;)); app.listen(&#39;3000&#39;); routes.js
var router = require(&#39;express&#39;).Router(); router.get(&#39;/&#39;, function(req, res) { res.send(&#39;Hello World!&#39;); }); module.exports = router; Itinéraires multiples # Le fichier principal de l&amp;rsquo;application charge tous les fichiers d&amp;rsquo;itinéraires dans lesquels vous souhaitez définir des itinéraires. Pour ce faire, nous avons besoin de la structure de répertoires suivante : app.</description>
    </item>
    
    <item>
      <title>Afficher la configuration du moteur</title>
      <link>https://www.wikiod.com/fr/express/afficher-la-configuration-du-moteur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/afficher-la-configuration-du-moteur/</guid>
      <description>Souvent, le serveur doit servir des pages de manière dynamique.Par exemple, un utilisateur, M.X, visite la page et voit quelque chose comme &amp;ldquo;Bienvenue M. X sur ma page d&amp;rsquo;accueil&amp;rdquo;.Dans ce cas, les vues peuvent être utiles.Même pour remplir une vue de tableau, cela peut être maniable. Les variables peuvent être injectées dynamiquement dans HTML à l&amp;rsquo;aide du moteur de vue.Le moteur de vue est quelque chose qui rend les vues.On peut conserver les vues à servir dans un dossier appelé vue et servir sur demande.</description>
    </item>
    
    <item>
      <title>express-générateur</title>
      <link>https://www.wikiod.com/fr/express/express-generateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/express-generateur/</guid>
      <description>Paramètres # Paramètre Définition -h, &amp;ndash;help informations d&amp;rsquo;utilisation de sortie -V, &amp;ndash;version afficher le numéro de version -e, &amp;ndash;ejs ajouter la prise en charge du moteur de modélisation pjs (Embedded JavaScript) (par défaut, jade, qui a été renommé Pug) &amp;ndash;hbs ajouter la prise en charge du moteur de modèle de guidon -H, &amp;ndash;hogan ajouter la prise en charge du moteur hogan.js &amp;ndash;git ajouter .gitignore -f, &amp;ndash;force forcer sur un répertoire non vide -c &amp;lt;moteur&amp;gt;, &amp;ndash;css &amp;lt;moteur&amp;gt; ajouter la prise en charge de la feuille de style &amp;lt;engine&amp;gt; (moins, stylet, boussole, sass) (la valeur par défaut est css) Le générateur express est un excellent outil pour lancer un projet rapidement.</description>
    </item>
    
    <item>
      <title>Gestion des fichiers statiques</title>
      <link>https://www.wikiod.com/fr/express/gestion-des-fichiers-statiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/gestion-des-fichiers-statiques/</guid>
      <description>Syntaxe # Pour servir des fichiers statiques (images, fichiers CSS, JS, etc.), utilisez la fonction middleware express.static. Transmettez le nom du répertoire contenant les ressources à express.static pour servir directement les fichiers. (Regardez l&amp;rsquo;exemple de base) Vous pouvez utiliser plusieurs répertoires, appelez simplement express.static plusieurs fois. N&amp;rsquo;oubliez pas qu&amp;rsquo;Express recherche les fichiers dans l&amp;rsquo;ordre dans lequel vous avez défini les répertoires avec express.static. (Regardez l&amp;rsquo;Exemple de plusieurs répertoires) Vous pouvez créer un préfixe de chemin virtuel (c&amp;rsquo;est-à-dire un chemin où le chemin n&amp;rsquo;existe pas réellement dans le système de fichiers) avec express.</description>
    </item>
    
    <item>
      <title>Intégration express de la base de données</title>
      <link>https://www.wikiod.com/fr/express/integration-express-de-la-base-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/integration-express-de-la-base-de-donnees/</guid>
      <description>Connectez-vous à MongoDB avec Node &amp;amp; Express # Tout d&amp;rsquo;abord, assurez-vous d&amp;rsquo;avoir installé mongodb et express via npm. Ensuite, dans un fichier intitulé classiquement db.js, utilisez le code suivant :
var MongoClient = require(&#39;mongodb&#39;).MongoClient var state = { db: null, } exports.connect = function(url, done) { if (state.db) return done() MongoClient.connect(url, function(err, db) { if(err) return done(err) state.db = db done() }) } exports.get = function() { return state.db } exports.</description>
    </item>
    
    <item>
      <title>Relier</title>
      <link>https://www.wikiod.com/fr/express/relier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/relier/</guid>
      <description>Connectez-vous et exprimez-vous # Express est basé sur Connect, qui fournit la fonctionnalité middleware d&amp;rsquo;Express. Pour comprendre ce qu&amp;rsquo;est la connexion, vous pouvez voir qu&amp;rsquo;elle fournit la structure d&amp;rsquo;application de base que vous utilisez lorsque vous utilisez express
const connect = require(&#39;connect&#39;) const app = connect() app.listen(3000) Cela ouvrira un serveur http &amp;ldquo;vide&amp;rdquo; qui répondra 404 à toutes les requêtes.
Intergiciel # Les intergiciels sont attachés à l&amp;rsquo;objet d&amp;rsquo;application, généralement avant l&amp;rsquo;appel de listen.</description>
    </item>
    
    <item>
      <title>Rédaction d&#39;un middleware express</title>
      <link>https://www.wikiod.com/fr/express/redaction-dun-middleware-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/redaction-dun-middleware-express/</guid>
      <description>Syntaxe # Spécifiez l&amp;rsquo;instance d&amp;rsquo;express que vous souhaitez utiliser. Il s&amp;rsquo;agit généralement de app. Définissez la méthode HTTP pour laquelle la fonction s&amp;rsquo;applique. Dans l&amp;rsquo;exemple, il s&amp;rsquo;agit de get. Définissez le chemin auquel s&amp;rsquo;applique la fonction. Dans l&amp;rsquo;exemple, il s&amp;rsquo;agit de &amp;rsquo;/&amp;rsquo;. Définissez en tant que fonction avec le mot-clé fonction. Ajoutez les paramètres requis : req, res, next. (Voir la note dans la section des remarques) Mettez du code dans la fonction pour faire ce que vous voulez Paramètres # Paramètre Détails demande L&amp;rsquo;objet de la requête.</description>
    </item>
    
    <item>
      <title>Expliquer le routage dans Express</title>
      <link>https://www.wikiod.com/fr/express/expliquer-le-routage-dans-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/express/expliquer-le-routage-dans-express/</guid>
      <description>## Gestionnaires d&amp;rsquo;itinéraire enchaînés pour un chemin d&amp;rsquo;accès à l&amp;rsquo;aide de app.route var express = require(&amp;rsquo;express&amp;rsquo;); var app = express(); var router = express.Router();
app.route(&#39;/user&#39;) .get(function (req, res) { res.send(&#39;Get a random user&#39;) }) .post(function (req, res) { res.send(&#39;Add a user&#39;) }) .put(function (req, res) { res.send(&#39;Update the user details&#39;) }) .delete(function (req, res) { res.send(&#39;Delete a user&#39;) }); Routeur express # Le routeur express vous permet de créer plusieurs &amp;ldquo;mini applications&amp;rdquo; afin que vous puissiez espacer vos routes API, publiques, auth et autres dans des systèmes de routage séparés.</description>
    </item>
    
  </channel>
</rss>

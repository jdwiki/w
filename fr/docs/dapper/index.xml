<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Dapper.NET on </title>
    <link>https://www.wikiod.com/fr/docs/dapper/</link>
    <description>Recent content in Tutoriel Dapper.NET on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/dapper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Dapper.NET</title>
      <link>https://www.wikiod.com/fr/dapper/premiers-pas-avec-dappernet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/premiers-pas-avec-dappernet/</guid>
      <description>Installer Dapper à partir de Nuget # Soit rechercher dans l&amp;rsquo;interface graphique de Visual Studio :
Outils &amp;gt; Gestionnaire de packages NuGet &amp;gt; Gérer les packages pour la solution&amp;hellip; (Visual Studio 2015)
[![capture d&amp;rsquo;écran de l&amp;rsquo;interface du gestionnaire de packages Visual Studio avec Dapper sélectionné][1]][1]
Ou exécutez cette commande dans une instance Nuget Power Shell pour installer la dernière version stable
Install-Package Dapper Ou pour une version spécifique
Install-Package Dapper -Version 1.</description>
    </item>
    
    <item>
      <title>Paramètres dynamiques</title>
      <link>https://www.wikiod.com/fr/dapper/parametres-dynamiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/parametres-dynamiques/</guid>
      <description>Utilisation de base # Il n&amp;rsquo;est pas toujours possible de regrouper soigneusement tous les paramètres dans un seul objet/appel. Pour aider avec des scénarios plus compliqués, dapper permet au paramètre param d&amp;rsquo;être une instance IDynamicParameters. Si vous faites cela, votre méthode personnalisée AddParameters est appelée au moment approprié et reçoit la commande à ajouter. Dans la plupart des cas, cependant, il suffit d&amp;rsquo;utiliser le type &amp;ldquo;DynamicParameters&amp;rdquo; préexistant :
var p = new DynamicParameters(new { a = 1, b = 2 }); p.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>https://www.wikiod.com/fr/dapper/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/transactions/</guid>
      <description>Syntaxe # conn.Execute(sql, transaction : tran); // spécifiez le paramètre par son nom conn.Execute(sql, paramètres, tran); conn.Query(sql, transaction : tran); conn.Query(sql, paramètres, tran); attendre conn.ExecuteAsync(sql, transaction : tran); // Asynchrone attendre conn.ExecuteAsync(sql, parameters, tran); attendre conn.QueryAsync(sql, transaction : tran); attendre conn.QueryAsync(sql, parameters, tran); Accélérez les insertions # Envelopper un groupe d&amp;rsquo;insertions dans une transaction les accélérera selon cette StackOverflow Question/Answer .
Vous pouvez utiliser cette technique ou vous pouvez utiliser Bulk Copy pour accélérer une série d&amp;rsquo;opérations connexes à effectuer.</description>
    </item>
    
    <item>
      <title>Interrogation de base</title>
      <link>https://www.wikiod.com/fr/dapper/interrogation-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/interrogation-de-base/</guid>
      <description>Syntaxe # public statique IEnumerable&amp;lt;T&amp;gt; Query&amp;lt;T&amp;gt;(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true) public statique IEnumerable&amp;lt;dynamique&amp;gt; Requête (cette IDbConnection cnn, chaîne sql, objet param = null, SqlTransaction transaction = null, bool buffered = true) Paramètres # Paramètre Détails cnn Votre connexion à la base de données, qui doit déjà être ouverte. sql Commande à exécuter. paramètre Objet à partir duquel extraire les paramètres.</description>
    </item>
    
    <item>
      <title>Référence de la syntaxe des paramètres</title>
      <link>https://www.wikiod.com/fr/dapper/reference-de-la-syntaxe-des-parametres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/reference-de-la-syntaxe-des-parametres/</guid>
      <description>Paramètres # Paramètre Détails ce cnn La connexion à la base de données sous-jacente - le this indique une méthode d&amp;rsquo;extension ; la connexion n&amp;rsquo;a pas besoin d&amp;rsquo;être ouverte - si elle n&amp;rsquo;est pas ouverte, elle s&amp;rsquo;ouvre et se ferme automatiquement. &amp;lt;T&amp;gt; / Type (optionnel) Le type d&amp;rsquo;objet à renvoyer ; si l&amp;rsquo;API non générique / non-Type est utilisée, un objet dynamic est renvoyé par ligne, simulant une propriété nommée par nom de colonne renvoyé par la requête (cet objet dynamic implémente également IDicionary&amp;lt;string,object &amp;gt;).</description>
    </item>
    
    <item>
      <title>Résultats multiples</title>
      <link>https://www.wikiod.com/fr/dapper/resultats-multiples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/resultats-multiples/</guid>
      <description>Syntaxe # public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null) public statique SqlMapper.GridReader QueryMultiple (cette IDbConnection cnn, commande CommandDefinition) Paramètres # Paramètre Détails cnn Votre connexion à la base de données doit déjà être ouverte sql La chaîne sql à traiter contient plusieurs requêtes paramètre Objet dont on extrait les paramètres SqlMapper.GridReader Fournit des interfaces pour lire plusieurs ensembles de résultats à partir d&amp;rsquo;une requête Dapper Exemple de résultats multiples de base # Pour récupérer plusieurs grilles dans une seule requête, la méthode &amp;ldquo;QueryMultiple&amp;rdquo; est utilisée.</description>
    </item>
    
    <item>
      <title>Multicartographie</title>
      <link>https://www.wikiod.com/fr/dapper/multicartographie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/multicartographie/</guid>
      <description>Syntaxe # public static IEnumerable&amp;lt;TReturn&amp;gt; Query&amp;lt;TFirst, TSecond, TReturn&amp;gt;( this IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TReturn&amp;gt; map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int? commandTimeout = null, CommandType? commandType = null) public static IEnumerable&amp;lt;TReturn&amp;gt; Query&amp;lt;TFirst, TSecond, TTird, TFourth, TFifth, TSixth, TSeventh, TReturn&amp;gt;(this IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TTird, TFourth, TFifth, TSixth, TSeventh, TReturn&amp;gt; map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int?</description>
    </item>
    
    <item>
      <title>Gestionnaires de types</title>
      <link>https://www.wikiod.com/fr/dapper/gestionnaires-de-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/gestionnaires-de-types/</guid>
      <description>Les gestionnaires de type permettent de convertir les types de base de données en types personnalisés .Net.
Installer un TypeHandler # Le gestionnaire de type ci-dessus peut être installé dans SqlMapper en utilisant la méthode AddTypeHandler.
SqlMapper.AddTypeHandler&amp;lt;IHtmlString&amp;gt;(new IHtmlStringTypeHandler()); L&amp;rsquo;inférence de type vous permet d&amp;rsquo;omettre le paramètre de type générique :
SqlMapper.AddTypeHandler(new IHtmlStringTypeHandler()); Il existe également une surcharge à deux arguments qui prend un argument Type explicite :
SqlMapper.AddTypeHandler(typeof(IHtmlString), new IHtmlStringTypeHandler()); Conversion de varchar en IHtmlString # public class IHtmlStringTypeHandler : SqlMapper.</description>
    </item>
    
    <item>
      <title>Exécution de commandes</title>
      <link>https://www.wikiod.com/fr/dapper/execution-de-commandes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/execution-de-commandes/</guid>
      <description>Procédures stockées # Utilisation simple # Dapper prend entièrement en charge les procs stockés :
var user = conn.Query&amp;lt;User&amp;gt;(&amp;quot;spGetUser&amp;quot;, new { Id = 1 }, commandType: CommandType.StoredProcedure) .SingleOrDefault(); Paramètres d&amp;rsquo;entrée, de sortie et de retour # Si vous voulez quelque chose de plus chic, vous pouvez faire :
var p = new DynamicParameters(); p.Add(&amp;quot;@a&amp;quot;, 11); p.Add(&amp;quot;@b&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.Output); p.Add(&amp;quot;@c&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.ReturnValue); conn.Execute(&amp;quot;spMagicProc&amp;quot;, p, commandType: CommandType.StoredProcedure); var b = p.</description>
    </item>
    
    <item>
      <title>Tableaux temporaires</title>
      <link>https://www.wikiod.com/fr/dapper/tableaux-temporaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dapper/tableaux-temporaires/</guid>
      <description>Table temporaire qui existe tant que la connexion reste ouverte # Lorsque la table temporaire est créée par elle-même, elle restera tant que la connexion est ouverte.
// Widget has WidgetId, Name, and Quantity properties public async Task PurchaseWidgets(IEnumerable&amp;lt;Widget&amp;gt; widgets) { using(var conn = new SqlConnection(&amp;quot;{connection string}&amp;quot;)) { await conn.OpenAsync(); await conn.ExecuteAsync(&amp;quot;CREATE TABLE #tmpWidget(WidgetId int, Quantity int)&amp;quot;); // populate the temp table using(var bulkCopy = new SqlBulkCopy(conn)) { bulkCopy.BulkCopyTimeout = SqlTimeoutSeconds; bulkCopy.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Apache Maven on </title>
    <link>https://www.wikiod.com/fr/docs/maven/</link>
    <description>Recent content in Tutoriel Apache Maven on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Apache Maven</title>
      <link>https://www.wikiod.com/fr/maven/premiers-pas-avec-apache-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/premiers-pas-avec-apache-maven/</guid>
      <description>Installation ou configuration # Les versions binaires de Maven peuvent être téléchargées sur le site Web de Maven.
Le binaire se présente sous la forme d&amp;rsquo;une archive zip ou d&amp;rsquo;une archive tar.gz. Après l&amp;rsquo;avoir téléchargé, les instructions de la page d&amp;rsquo;installation peuvent être suivies :
Assurez-vous que la variable d&amp;rsquo;environnement JAVA_HOME est définie et pointe vers votre installation JDK (pas JRE). Par exemple, sur une machine Windows, ce dossier d&amp;rsquo;installation peut correspondre à C:\Program Files\Java\jdk1.</description>
    </item>
    
    <item>
      <title>Plug-in d&#39;assemblage Maven</title>
      <link>https://www.wikiod.com/fr/maven/plug-in-dassemblage-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/plug-in-dassemblage-maven/</guid>
      <description>Création d&amp;rsquo;un fichier .jar avec toutes les dépendances du projet # Pour créer un JAR contenant toutes ses dépendances, il est possible d&amp;rsquo;utiliser le format de descripteur intégré [jar-with-dependencies](http://maven.apache.org/plugins/maven-assembly-plugin/descriptor -refs.html#jar-avec-dépendances). L&amp;rsquo;exemple suivant configure une exécution du plugin d&amp;rsquo;assemblage lié à la phase package, en utilisant ce descripteur intégré et en déclarant une classe principale de com.example :
&amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;archive&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;mainClass&amp;gt;com.</description>
    </item>
    
    <item>
      <title>POM - Modèle d&#39;objet de projet</title>
      <link>https://www.wikiod.com/fr/maven/pom---modele-dobjet-de-projet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/pom---modele-dobjet-de-projet/</guid>
      <description>## Structure POM Project Object Model est l&amp;rsquo;unité de base de Maven et définit la structure du projet, les dépendances, etc.
Les éléments suivants sont très minimes pour créer un POM :
racine du &amp;ldquo;projet&amp;rdquo; modelVersion - doit être défini sur 4.0.0 groupId - l&amp;rsquo;ID du groupe du projet artifactId - l&amp;rsquo;ID de l&amp;rsquo;artefact (projet) version - la version de l&amp;rsquo;artefact sous le groupe spécifié groupId, artifactId et version sont appelés coordonnées Maven et parfois abrégés avec GAV.</description>
    </item>
    
    <item>
      <title>Créer un plugin Maven</title>
      <link>https://www.wikiod.com/fr/maven/creer-un-plugin-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/creer-un-plugin-maven/</guid>
      <description>Maven vous permet d&amp;rsquo;implémenter et d&amp;rsquo;utiliser des plugins personnalisés. Ces plugins permettent de lier un comportement supplémentaire à n&amp;rsquo;importe quelle phase du cycle de vie Maven.
Chaque goal Maven est créé en implémentant un MOJO (Maven Ordinary Java Object) : une classe Java implémentée avec des annotations qui décrivent comment l&amp;rsquo;invoquer.
Le préfixe d&amp;rsquo;objectif d&amp;rsquo;un plugin est dérivé de son nom d&amp;rsquo;artefact. Un artefact &amp;ldquo;hello-world-plugin&amp;rdquo; crée un préfixe d&amp;rsquo;objectif &amp;ldquo;hello-world&amp;rdquo;. Le but hello peut alors être exécuté avec mvn hello-world:hello.</description>
    </item>
    
    <item>
      <title>Intégration d&#39;éclipse</title>
      <link>https://www.wikiod.com/fr/maven/integration-declipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/integration-declipse/</guid>
      <description>Installer Maven dans Eclipse # Vous pouvez tirer parti des fonctionnalités puissantes d&amp;rsquo;Apache Maven dans Eclipse en installant la fonctionnalité [M2Eclipse][1]. Suivez ces étapes pour installer Maven dans Eclipse :
Ouvrez Eclipse et sélectionnez Aide → Installer un nouveau logiciel…
Dans la boîte de dialogue ouverte, sélectionnez le bouton Ajouter&amp;hellip; pour ajouter un nouveau référentiel.
Remplissez le formulaire avec les informations ci-dessous et confirmez avec OK :
Name: M2Eclipse
Location: http://download.</description>
    </item>
    
    <item>
      <title>Plugin Maven Tomcat</title>
      <link>https://www.wikiod.com/fr/maven/plugin-maven-tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/plugin-maven-tomcat/</guid>
      <description>Démarrez Tomcat en utilisant le plugin maven. # Dans l&amp;rsquo;exemple, nous allons démarrer Tomcat 7 à l&amp;rsquo;aide du plugin Maven, ajouter éventuellement une protection utilisateur/mot de passe pour le point de terminaison REST. Ajoutant également la fonctionnalité de construction de guerre.
Ajouter la section ci-dessous dans la section plugin de pom pour tomcat
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat7-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;url&amp;gt;http://localhost:8090/manager&amp;lt;/url&amp;gt; &amp;lt;server&amp;gt;localhost&amp;lt;/server&amp;gt; &amp;lt;port&amp;gt;8191&amp;lt;/port&amp;gt; &amp;lt;path&amp;gt;/${project.build.finalName}&amp;lt;/path&amp;gt; &amp;lt;tomcatUsers&amp;gt;src/main/tomcatconf/tomcat-users.xml&amp;lt;/tomcatUsers&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Assurez-vous que le plugin maven war est ajouté et que web.</description>
    </item>
    
    <item>
      <title>Cycle de construction Maven</title>
      <link>https://www.wikiod.com/fr/maven/cycle-de-construction-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/cycle-de-construction-maven/</guid>
      <description>Voici une liste complète des phases du cycle de vie de construction par défaut de Maven. Chacune de ces phases est invoquée en l&amp;rsquo;ajoutant à la commande mvn, par ex. installation mvn.
Phases du cycle de vie de la construction Maven # validate Valide si le projet est correct et si toutes les informations requises sont disponibles pour la génération.
initialize Initialise l&amp;rsquo;environnement de construction, par ex. définit les propriétés ou crée des répertoires.</description>
    </item>
    
    <item>
      <title>Plugin Maven Surefire</title>
      <link>https://www.wikiod.com/fr/maven/plugin-maven-surefire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/plugin-maven-surefire/</guid>
      <description>Syntaxe # test mvn mvn -Dtest=com.example.package.ExampleTest test Tester une classe Java avec JUnit et le plugin Maven Surefire # Le plug-in Maven Surefire s&amp;rsquo;exécute pendant la phase de test du processus de construction Maven ou lorsque test est spécifié comme objectif Maven. La structure de répertoire suivante et le fichier pom.xml minimum configureront Maven pour exécuter un test.
Structure du répertoire à l&amp;rsquo;intérieur du répertoire racine du projet :
─ project_root ├─ pom.</description>
    </item>
    
    <item>
      <title>Accéder aux informations Maven dans le code</title>
      <link>https://www.wikiod.com/fr/maven/acceder-aux-informations-maven-dans-le-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/acceder-aux-informations-maven-dans-le-code/</guid>
      <description>Il est parfois utile d&amp;rsquo;obtenir les propriétés maven, telles que la version actuelle, dans le code. Voici quelques façons d&amp;rsquo;y parvenir.
Obtenir le numéro de version à partir d&amp;rsquo;un fichier jar # Si vous empaquetez votre application dans un jar en utilisant le maven-jar-plugin ou le maven-assembly-plugin, un moyen simple d&amp;rsquo;obtenir la version actuelle de pom consiste à ajouter une entrée dans le manifeste, qui est alors disponible à partir de Java.</description>
    </item>
    
    <item>
      <title>Effectuer une libération</title>
      <link>https://www.wikiod.com/fr/maven/effectuer-une-liberation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/maven/effectuer-une-liberation/</guid>
      <description>Le plugin Maven standard utilisé par un processus de publication est le maven-release-plugin - la configuration de ce plugin est minimale :
SCM dans le pom Maven : Le processus de publication interagira avec le contrôle de source du projet - cela signifie que nous devons définir l&amp;rsquo;élément &amp;ldquo;scm&amp;rdquo; dans notre pom.xml. L&amp;rsquo;élément &amp;ldquo;scm&amp;rdquo; pour une version de version doit contenir suffisamment d&amp;rsquo;informations pour consultez la balise qui a été créée pour cette version.</description>
    </item>
    
  </channel>
</rss>

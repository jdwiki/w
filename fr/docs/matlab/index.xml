<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel de langage MATLAB on </title>
    <link>https://www.wikiod.com/fr/docs/matlab/</link>
    <description>Recent content in Tutoriel de langage MATLAB on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/matlab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage MATLAB</title>
      <link>https://www.wikiod.com/fr/matlab/premiers-pas-avec-le-langage-matlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/premiers-pas-avec-le-langage-matlab/</guid>
      <description>Matrices et tableaux d&amp;rsquo;indexation # MATLAB permet plusieurs méthodes pour indexer (accéder) aux éléments de matrices et de tableaux :
Indexation en indice - où vous spécifiez la position des éléments que vous voulez dans chaque dimension de la matrice séparément. Indexation linéaire - où la matrice est traitée comme un vecteur, quelles que soient ses dimensions. Cela signifie que vous spécifiez chaque position dans la matrice avec un seul numéro.</description>
    </item>
    
    <item>
      <title>Fautes et erreurs courantes</title>
      <link>https://www.wikiod.com/fr/matlab/fautes-et-erreurs-courantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/fautes-et-erreurs-courantes/</guid>
      <description>Les opérateurs de transposition # .&#39; est la bonne façon de transposer un vecteur ou une matrice dans MATLAB. &#39; est la bonne façon de prendre la ** transposée conjuguée complexe ** (a.k.a. conjugué hermitien) d&amp;rsquo;un vecteur ou d&amp;rsquo;une matrice dans MATLAB. Notez que pour la transposition .&#39;, il y a un période devant l&amp;rsquo;apostrophe. Ceci est conforme à la syntaxe des autres opérations élément par élément dans MATLAB : * multiplie matrices, .</description>
    </item>
    
    <item>
      <title>Vectorisation</title>
      <link>https://www.wikiod.com/fr/matlab/vectorisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/vectorisation/</guid>
      <description>Utilisation de bsxfun # Assez souvent, la raison pour laquelle le code a été écrit dans une boucle for est de calculer des valeurs à partir de valeurs `` proches &amp;lsquo;&amp;rsquo;. La fonction bsxfun peut souvent être utilisée pour le faire de manière plus succincte.
Par exemple, supposons que vous souhaitiez effectuer une opération par colonne sur la matrice &amp;ldquo;B&amp;rdquo;, en soustrayant la moyenne de chaque colonne :
B = round(randn(5)*10); % Generate random data A = zeros(size(B)); % Preallocate array for col = 1:size(B,2); % Loop over columns A(:,col) = B(:,col) - mean(B(:,col)); % Subtract means end Cette méthode est inefficace si B est grand, souvent parce que MATLAB doit déplacer le contenu des variables dans la mémoire.</description>
    </item>
    
    <item>
      <title>Bonnes pratiques MATLAB</title>
      <link>https://www.wikiod.com/fr/matlab/bonnes-pratiques-matlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/bonnes-pratiques-matlab/</guid>
      <description>Cette rubrique affiche les meilleures pratiques que la communauté a apprises au fil du temps.
Indenter correctement le code # Une indentation appropriée donne non seulement l&amp;rsquo;aspect esthétique, mais augmente également la lisibilité du code.
Par exemple, considérez le code suivant :
%no need to understand the code, just give it a look n = 2; bf = false; while n&amp;gt;1 for ii = 1:n for jj = 1:n if ii+jj&amp;gt;30 bf = true; break end end if bf break end end if bf break end n = n + 1; end Comme vous pouvez le voir, vous devez regarder attentivement pour voir quelle boucle et les instructions &amp;ldquo;if&amp;rdquo; se terminent où.</description>
    </item>
    
    <item>
      <title>Tracés de lignes graphiques 2D</title>
      <link>https://www.wikiod.com/fr/matlab/traces-de-lignes-graphiques-2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/traces-de-lignes-graphiques-2d/</guid>
      <description>Syntaxe # plot(Y)
plot(Y,LineSpec)
parcelle(X,Y)
plot(X,Y,LineSpec)
plot(X1,Y1, X2,Y2, &amp;hellip;, Xn,Yn)
plot(X1,Y1,LineSpec1, X2,Y2,LineSpec2, &amp;hellip;, Xn,Yn,LineSpecn)
parcelle(___, nom, valeur)
h = parcelle(___)
Paramètres # Paramètre Détails X valeurs x Y valeurs y SpécificationLigne Style de ligne, symbole ponctuel et couleur, spécifiés sous forme de chaîne Nom,Valeur Paires facultatives d&amp;rsquo;arguments nom-valeur pour personnaliser les propriétés de ligne h poignée à l&amp;rsquo;objet graphique de ligne http://www.mathworks.com/help/matlab/ref/plot.html
Plusieurs lignes dans un seul tracé # Dans cet exemple, nous allons tracer plusieurs lignes sur un seul axe.</description>
    </item>
    
    <item>
      <title>Utilisation des ports série</title>
      <link>https://www.wikiod.com/fr/matlab/utilisation-des-ports-serie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/utilisation-des-ports-serie/</guid>
      <description>Les ports série sont une interface commune pour communiquer avec des capteurs externes ou des systèmes embarqués tels que Arduinos. Les communications série modernes sont souvent mises en œuvre via des connexions USB à l&amp;rsquo;aide d&amp;rsquo;adaptateurs série USB. MATLAB fournit des fonctions intégrées pour les communications série, y compris les protocoles RS-232 et RS-485. Ces fonctions peuvent être utilisées pour les ports série matériels ou les connexions série USB &amp;ldquo;virtuelles&amp;rdquo;. Les exemples présentés ici illustrent les communications série dans MATLAB.</description>
    </item>
    
    <item>
      <title>Fonctionnalités non documentées</title>
      <link>https://www.wikiod.com/fr/matlab/fonctionnalites-non-documentees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/fonctionnalites-non-documentees/</guid>
      <description>L&amp;rsquo;utilisation de fonctionnalités non documentées est considérée comme une pratique risquée1, car ces fonctionnalités peuvent changer sans préavis ou simplement travailler différemment sur différentes versions de MATLAB. Pour cette raison, il est conseillé d&amp;rsquo;utiliser des techniques de programmation défensive telles que l&amp;rsquo;inclusion de morceaux de code non documentés dans des blocs &amp;ldquo;try/catch&amp;rdquo; avec des solutions de remplacement documentées. Tracés linéaires 2D à code couleur avec données de couleur en troisième dimension # Dans les versions de MATLAB antérieures à R2014b, utilisant l&amp;rsquo;ancien moteur graphique HG1, il n&amp;rsquo;était pas évident de créer des [tracés de lignes 2D à code couleur][1].</description>
    </item>
    
    <item>
      <title>Fonctions de documentation</title>
      <link>https://www.wikiod.com/fr/matlab/fonctions-de-documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/fonctions-de-documentation/</guid>
      <description>Le texte d&amp;rsquo;aide peut être situé avant ou après la ligne &amp;ldquo;fonction&amp;rdquo;, tant qu&amp;rsquo;il n&amp;rsquo;y a pas de code entre la ligne de fonction et le début du texte d&amp;rsquo;aide. La mise en majuscule du nom de la fonction ne fait que mettre le nom en gras et n&amp;rsquo;est pas obligatoire. Si une ligne est précédée de &amp;ldquo;Voir aussi&amp;rdquo;, tous les noms sur la ligne qui correspondent au nom d&amp;rsquo;une classe ou d&amp;rsquo;une fonction sur le chemin de recherche seront automatiquement liés à la documentation de cette classe/fonction.</description>
    </item>
    
    <item>
      <title>Présentation de l&#39;API MEX</title>
      <link>https://www.wikiod.com/fr/matlab/presentation-de-lapi-mex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/presentation-de-lapi-mex/</guid>
      <description>Vérifier le nombre d&amp;rsquo;entrées/sorties dans un fichier C++ MEX # Dans cet exemple, nous allons écrire un programme de base qui vérifie le nombre d&amp;rsquo;entrées et de sorties transmises à une fonction MEX.
Comme point de départ, nous devons créer un fichier C++ implémentant la &amp;ldquo;passerelle MEX&amp;rdquo;. Il s&amp;rsquo;agit de la fonction exécutée lorsque le fichier est appelé depuis MATLAB.
testinputs.cpp # // MathWorks provided header file #include &amp;quot;mex.h&amp;quot; // gateway function void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { // This function will error if number of inputs its not 3 or 4 // This function will error if number of outputs is more than 1 // Check inputs: if (nrhs &amp;lt; 3 || nrhs &amp;gt; 4) { mexErrMsgIdAndTxt(&amp;quot;Testinputs:ErrorIdIn&amp;quot;, &amp;quot;Invalid number of inputs to MEX file.</description>
    </item>
    
    <item>
      <title>Traitement d&#39;image</title>
      <link>https://www.wikiod.com/fr/matlab/traitement-dimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matlab/traitement-dimage/</guid>
      <description>## E/S d&amp;rsquo;image de base &amp;raquo; img = imread(&amp;lsquo;football.jpg&amp;rsquo;);
Utilisez [imread][1] pour lire des fichiers image dans une matrice dans MATLAB. Une fois que vous avez &amp;ldquo;imread&amp;rdquo; une image, elle est stockée en mémoire sous forme de tableau ND :
&amp;gt;&amp;gt; size(img) ans = 256 320 3 L&amp;rsquo;image &#39;football.jpg&#39; a 256 lignes et 320 colonnes et elle a 3 canaux de couleur : Rouge, Vert et Bleu.
Vous pouvez maintenant le refléter :</description>
    </item>
    
  </channel>
</rss>

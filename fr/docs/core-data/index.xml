<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel core-data on </title>
    <link>https://www.wikiod.com/fr/docs/core-data/</link>
    <description>Recent content in Tutoriel core-data on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/core-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec les données de base</title>
      <link>https://www.wikiod.com/fr/core-data/premiers-pas-avec-les-donnees-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/premiers-pas-avec-les-donnees-de-base/</guid>
      <description>Création de votre premier modèle # Sélectionnez le fichier .xcdatamodeld. Vous remarquerez que vous n&amp;rsquo;avez pas entités. Vous devrez en créer un vous-même. En bas de Xcode, vous remarquerez un bouton indiquant &amp;ldquo;Ajouter une entité&amp;rdquo;, cliquez dessus et vous aurez une nouvelle entité avec laquelle travailler sur le projet. [![Modèle de données][3]][3]
Dans cette étape, il y a quelques points à mentionner. La première est que vous avez changé le nom de votre entité ici, l&amp;rsquo;entité reçoit le nom &amp;ldquo;Personne&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Pile de données de base</title>
      <link>https://www.wikiod.com/fr/core-data/pile-de-donnees-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/pile-de-donnees-de-base/</guid>
      <description>Il s&amp;rsquo;agit d&amp;rsquo;une implémentation de Core Data Stack qui est initialement placée dans le fichier AppDelegate si le projet est créé avec Core Data lors de la création du projet. Ces fonctions peuvent également être implémentées dans une classe séparée pour CoreDataStack.swift. L&amp;rsquo;une des principales fonctions consiste à obtenir le NSManagedObjectContext.
Objectif c # - (NSManagedObjectContext *)managedObjectContext {...} Rapide 2 # lazy var managedObjectContext: NSManagedObjectContext = {...} Rapide 3 # lazy var persistentContainer: NSPersistentContainer = {.</description>
    </item>
    
    <item>
      <title>Création d&#39;un modèle de données de base</title>
      <link>https://www.wikiod.com/fr/core-data/creation-dun-modele-de-donnees-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/creation-dun-modele-de-donnees-de-base/</guid>
      <description>Les types d&amp;rsquo;attributs incluent : Indéfini, Entier 16, Entier 32, Integer 64, Decimal, Double, Float, String, Boolean, Date, Binary, Data, or Transformable
Lorsque vous définissez une Entité comme abstraite, vous ne créez aucune instance de cette entité. Par exemple, une personne serait abstraite et un employé ou un client serait une sous-entité concrète.
Les attributs &amp;ldquo;transitoires&amp;rdquo; sont des propriétés que vous définissez dans le cadre du modèle, mais qui ne sont pas enregistrées dans le magasin persistant dans le cadre des données d&amp;rsquo;une instance d&amp;rsquo;entité.</description>
    </item>
    
    <item>
      <title>Utiliser des prédicats</title>
      <link>https://www.wikiod.com/fr/core-data/utiliser-des-predicats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/utiliser-des-predicats/</guid>
      <description>Correspondant à une chaîne exacte # let fetchRequest = NSFetchRequest(entityName: &amp;quot;Foo&amp;quot;) var thePredicate: NSPredicate? thePredicate = NSPredicate(format: &amp;quot;message == &#39;example&#39;&amp;quot;) L&amp;rsquo;entité Foo a un attribut de chaîne message
Remplacements # Plutôt que de passer une chaîne statique comme critère de prédicat. Il est possible de substituer des valeurs en utilisant des spécificateurs de format. Il existe cinq spécificateurs de format :
%K est une substitution var arg pour un chemin de clé.</description>
    </item>
    
    <item>
      <title>NSFetchedResultsController</title>
      <link>https://www.wikiod.com/fr/core-data/nsfetchedresultscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/nsfetchedresultscontroller/</guid>
      <description>NSFetchedResultsController est une connexion entre la table de données de base (entité dans les données de base, table dans sqlite) et UITableView. UITableView peut être attaché à n&amp;rsquo;importe quelle entité de données de base à l&amp;rsquo;aide de NSFetchedResultsController et UITableView sera mis à jour au fur et à mesure que les données de base mettront à jour cette entité/table.
NSFetchedResultsController pour UITableView # class ConversationsTableViewController: UITableViewController, NSFetchedResultsControllerDelegate { private var fetchedResultsController: NSFetchedResultsController&amp;lt;Conversation&amp;gt;!</description>
    </item>
    
    <item>
      <title>Trier les descripteurs</title>
      <link>https://www.wikiod.com/fr/core-data/trier-les-descripteurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/core-data/trier-les-descripteurs/</guid>
      <description>Ordonner les données renvoyées par les requêtes d&amp;rsquo;extraction # Définissez la propriété NSFetchRequest sortDescriptors pour déterminer comment les données sont renvoyées.
let fetchRequest = NSFetchRequest(entityName: &amp;quot;NAME_OF_ENTITY&amp;quot;) let sortDescriptor = NSSortDescriptor(key: &amp;quot;NAME_OF_ATTRIBUTE&amp;quot;, ascending: true) fetchRequest.sortDescriptors = [sortDescriptor] Descripteurs de tri multiples # Vous pouvez également définir plusieurs descripteurs de tri, pour trier un attribut dans un autre. Par exemple, renvoie toutes les entrées triées par date et par nom pour chaque date :</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Visual Basic .NET on </title>
    <link>https://www.wikiod.com/fr/docs/vb-dotnet/</link>
    <description>Recent content in Tutoriel du langage Visual Basic .NET on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/vb-dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage Visual Basic .NET</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/premiers-pas-avec-le-langage-visual-basic-net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/premiers-pas-avec-le-langage-visual-basic-net/</guid>
      <description>Bonjour le monde # Tout d&amp;rsquo;abord, installez une version de [Microsoft Visual Studio][1], y compris l&amp;rsquo;édition communautaire gratuite. Ensuite, créez un projet Visual Basic Console Application de type Console Application, et le code suivant imprimera la chaîne &#39;Hello World&#39; sur la console :
Module Module1 Sub Main() Console.WriteLine(&amp;quot;Hello World&amp;quot;) End Sub End Module Ensuite, enregistrez et appuyez sur F5 sur le clavier (ou allez dans le menu Déboguer, puis cliquez sur Exécuter sans déboguer ou Exécuter) pour compiler et exécuter le programme.</description>
    </item>
    
    <item>
      <title>Fonctionnalités de Visual Basic 14.0</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/fonctionnalites-de-visual-basic-140/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/fonctionnalites-de-visual-basic-140/</guid>
      <description>Visual Basic 14 est la version de Visual Basic fournie avec Visual Studio 2015.
Cette version a été réécrite à partir de zéro en environ 1,3 million de lignes de VB. De nombreuses fonctionnalités ont été ajoutées pour supprimer les irritations courantes et rendre les modèles de codage courants plus propres.
Le numéro de version de Visual Basic est passé directement de 12 à 14, en sautant 13. Cela a été fait pour maintenir VB en ligne avec la numérotation de version de Visual Studio lui-même.</description>
    </item>
    
    <item>
      <title>Déployer</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/deployer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/deployer/</guid>
      <description>Dim myArray(2) As Integer someFunc(myArray) Un tableau est une collection d&amp;rsquo;objets classés par index. Le type d&amp;rsquo;objet est défini par le type donné dans la déclaration du tableau.
Les tableaux dans Visual Basic .NET sont le plus souvent (et par défaut) basés sur zéro (0), ce qui signifie que le premier index est 0. Un tableau de 10 éléments aura une plage d&amp;rsquo;index de 0 à 9. Lors de l&amp;rsquo;accès aux éléments du tableau, l&amp;rsquo;index accessible maximum est un de moins que le nombre total d&amp;rsquo;éléments.</description>
    </item>
    
    <item>
      <title>Bouclage</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/bouclage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/bouclage/</guid>
      <description>Pour&amp;hellip;Suivant # La boucle For&amp;hellip;Next est utilisée pour répéter la même action un nombre fini de fois. Les instructions à l&amp;rsquo;intérieur de la boucle suivante seront exécutées 11 fois. La première fois, &amp;lsquo;i&amp;rsquo; aura la valeur 0, la deuxième fois il aura la valeur 1, la dernière fois il aura la valeur 10.
For i As Integer = 0 To 10 &#39;Execute the action Console.Writeline(i.ToString) Next Toute expression entière peut être utilisée pour paramétrer la boucle.</description>
    </item>
    
    <item>
      <title>Énumération</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/enumeration/</guid>
      <description>GetNames() # Renvoie les noms des constantes dans l&amp;rsquo;énumération spécifiée sous la forme d&amp;rsquo;un tableau de chaînes :
Module Module1 Enum Size Small Medium Large End Enum Sub Main() Dim sizes = [Enum].GetNames(GetType(Size)) For Each size In sizes Console.WriteLine(size) Next End Sub End Module Production:
Petit
Moyen
Grand
HasFlag() # La méthode HasFlag() peut être utilisée pour vérifier si un indicateur est défini.
Module Module1 &amp;lt;Flags&amp;gt; Enum Material Wood = 1 Plastic = 2 Metal = 4 Stone = 8 End Enum Sub Main() Dim houseMaterials As Material = Material.</description>
    </item>
    
    <item>
      <title>Option stricte</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/option-stricte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/option-stricte/</guid>
      <description>Syntaxe # Option Strict { Activé | À l&amp;rsquo;arrêt } Option Strict On est une bonne pratique recommandée avec Visual Basic .Net. Il vous aide en tant que développeur à produire un code plus propre, plus stable, plus exempt de bogues et plus maintenable. Dans certains cas, cela peut également vous aider à écrire des programmes avec de meilleures performances, en évitant des choses telles que la conversion implicite.
On n&amp;rsquo;est pas le paramètre par défaut pour une nouvelle installation de Visual Studio.</description>
    </item>
    
    <item>
      <title>Mots-clés POO</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/mots-cles-poo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/mots-cles-poo/</guid>
      <description>Définir une classe # Les classes sont des aspects vitaux de la POO. Une classe est comme le &amp;ldquo;plan&amp;rdquo; d&amp;rsquo;un objet. Un objet a les propriétés d&amp;rsquo;une classe, mais les caractéristiques ne sont pas définies dans la classe elle-même. Comme chaque objet peut être différent, ils définissent leurs propres caractéristiques.
Public Class Person End Class Public Class Customer End Class Une classe peut également contenir des sous-classes. Une sous-classe hérite des mêmes propriétés et comportements que sa classe parente, mais peut avoir ses propres propriétés et classes uniques.</description>
    </item>
    
    <item>
      <title>Introduction à la syntaxe</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/introduction-a-la-syntaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/introduction-a-la-syntaxe/</guid>
      <description>Assistant Intellisense # Une chose intéressante est la possibilité d&amp;rsquo;ajouter vos propres commentaires dans Visual Studio Intellisense. Ainsi, vous pouvez rendre vos propres fonctions et classes écrites explicites. Pour ce faire, vous devez taper le symbole de commentaire trois fois la ligne au-dessus de votre fonction.
Une fois cela fait, Visual Studio ajoutera automatiquement une documentation XML :
&#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; This function returns a hello to your name &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;Name&amp;quot;&amp;gt;Your Name&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; &#39;&#39;&#39; &amp;lt;remarks&amp;gt;&amp;lt;/remarks&amp;gt; Public Function Test(Name As String) As String Return &amp;quot;Hello &amp;quot; &amp;amp; Name End Function Après cela, si vous tapez votre fonction Test quelque part dans votre code, cette petite aide apparaîtra :</description>
    </item>
    
    <item>
      <title>Enfilage</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/enfilage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/enfilage/</guid>
      <description>Exécution d&amp;rsquo;appels thread-safe à l&amp;rsquo;aide de Control.Invoke() # En utilisant la méthode Control.Invoke(), vous pouvez déplacer l&amp;rsquo;exécution d&amp;rsquo;une méthode ou d&amp;rsquo;une fonction d&amp;rsquo;un thread d&amp;rsquo;arrière-plan vers le thread sur lequel le contrôle a été créé, qui est généralement le thread UI (User Interface). Ce faisant, votre code sera mis en file d&amp;rsquo;attente pour s&amp;rsquo;exécuter sur le thread du contrôle à la place, ce qui supprime la possibilité de concurrence.
La propriété Control.</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/fr/vb-dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vb-dotnet/linq/</guid>
      <description>LINQ (Language Integrated Query) est une expression qui récupère des données à partir d&amp;rsquo;une source de données. LINQ simplifie cette situation en offrant un modèle cohérent pour travailler avec des données sur différents types de sources et de formats de données. Dans une requête LINQ, vous travaillez toujours avec des objets. Vous utilisez les mêmes modèles de codage de base pour interroger et transformer des données dans des documents XML, des bases de données SQL, des ensembles de données ADO.</description>
    </item>
    
  </channel>
</rss>

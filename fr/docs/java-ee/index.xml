<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel java-ee on </title>
    <link>https://www.wikiod.com/fr/docs/java-ee/</link>
    <description>Recent content in Tutoriel java-ee on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/java-ee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec java-ee</title>
      <link>https://www.wikiod.com/fr/java-ee/debuter-avec-java-ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/debuter-avec-java-ee/</guid>
      <description>Qu&amp;rsquo;est-ce que JavaEE ? # Java EE signifie Java Enterprise Edition. Java EE étend Java SE (qui signifie Java Standard Edition). Java EE est un ensemble de technologies et de spécifications associées orientées vers le développement d&amp;rsquo;applications d&amp;rsquo;entreprise à grande échelle. Java EE est développé dans un processus piloté par la communauté. Jusqu&amp;rsquo;à présent, les versions suivantes de Java EE ont été publiées :
J2EE 1.2 (12 décembre 1999) J2EE 1.</description>
    </item>
    
    <item>
      <title>Services Web RESTful Java (JAX-RS)</title>
      <link>https://www.wikiod.com/fr/java-ee/services-web-restful-java-jax-rs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/services-web-restful-java-jax-rs/</guid>
      <description>Contrairement à SOAP et à la pile WS, qui sont spécifiés comme normes W3C, REST est en fait un ensemble de principes pour la conception et l&amp;rsquo;utilisation d&amp;rsquo;une interface Web. Les applications REST / RESTful s&amp;rsquo;appuient fortement sur d&amp;rsquo;autres normes :
HTTP URI, URL XML, JSON, HTML, GIF, JPEG, and so forth (resource representations) Le rôle de JAX-RS (Java API for RESTful Web Services) est de fournir des API qui prennent en charge la création de services RESTful.</description>
    </item>
    
    <item>
      <title>Service de messagerie Java (JMS)</title>
      <link>https://www.wikiod.com/fr/java-ee/service-de-messagerie-java-jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/service-de-messagerie-java-jms/</guid>
      <description>Le [Java Message Service][1] est une API Java qui permet aux applications de créer, envoyer, recevoir et lire des messages. L&amp;rsquo;API JMS définit un ensemble commun d&amp;rsquo;interfaces et la sémantique associée qui permettent aux programmes écrits dans le langage de programmation Java de communiquer avec d&amp;rsquo;autres implémentations de messagerie. JMS permet une communication non seulement faiblement couplée, mais également asynchrone et fiable.
[1] : http://docs.oracle.com/javaee/7/tutorial/jms-concepts001.htm#BNCDR
Java Message Service (JMS) est une API Java standard qui permet aux applications de créer, envoyer, recevoir et lire des messages de manière asynchrone.</description>
    </item>
    
    <item>
      <title>L&#39;API Javamail</title>
      <link>https://www.wikiod.com/fr/java-ee/lapi-javamail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/lapi-javamail/</guid>
      <description>La page JavaMail sur le site Web d&amp;rsquo;Oracle le décrit comme suit
L&amp;rsquo;API JavaMail fournit un cadre indépendant de la plate-forme et du protocole pour créer des applications de messagerie et de messagerie. L&amp;rsquo;API JavaMail est disponible en tant que package facultatif à utiliser avec la plate-forme Java SE et est également incluse dans la plate-forme Java EE.
Le site principal du projet JavaMail est désormais sur [java.net][1]. De là, vous pouvez trouver les javadocs pour de nombreuses versions des API, des liens vers les référentiels de code source, des liens pour les téléchargements, des exemples et des conseils pour utiliser JavaMail avec certains fournisseurs de services de messagerie populaires.</description>
    </item>
    
    <item>
      <title>L&#39;API WebSocket</title>
      <link>https://www.wikiod.com/fr/java-ee/lapi-websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/lapi-websocket/</guid>
      <description>WebSocket est un protocole qui permet la communication entre le client et le serveur/endpoint à l&amp;rsquo;aide d&amp;rsquo;une seule connexion TCP.
WebSocket est conçu pour être implémenté dans les navigateurs Web et les serveurs Web, mais il peut être utilisé par n&amp;rsquo;importe quelle application client ou serveur.
Cette rubrique concerne les API Java pour les websockets qui ont été développées par [JSR 356][1] et incorporées dans les spécifications Java EE 7.</description>
    </item>
    
    <item>
      <title>Architecture de connecteur Java (JCA)</title>
      <link>https://www.wikiod.com/fr/java-ee/architecture-de-connecteur-java-jca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/java-ee/architecture-de-connecteur-java-jca/</guid>
      <description>Clarifions d&amp;rsquo;abord quelques terminologies :
Messagerie sortante est l&amp;rsquo;endroit où le message commence à partir du serveur (pour être plus précis, il est lancé à partir de votre application que vous avez sur le serveur, WebSphere Liberty dans ce cas) et se termine à l&amp;rsquo;EIS. Messagerie entrante est l&amp;rsquo;endroit où le message commence à partir de l&amp;rsquo;EIS et se termine au niveau du serveur. Message Endpoint en général l&amp;rsquo;endroit où le message finit par s&amp;rsquo;asseoir/être reçu à une étape spécifique de son cycle de vie.</description>
    </item>
    
  </channel>
</rss>

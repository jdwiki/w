<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel API Win32 on </title>
    <link>https://www.wikiod.com/fr/docs/winapi/</link>
    <description>Recent content in Tutoriel API Win32 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/winapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec l&#39;API Win32</title>
      <link>https://www.wikiod.com/fr/winapi/premiers-pas-avec-lapi-win32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/premiers-pas-avec-lapi-win32/</guid>
      <description>Bonjour le monde # Les applications Microsoft Windows sont généralement écrites comme une application console ou une application fenêtrée (il existe d&amp;rsquo;autres types tels que les services et les plug-ins). La différence pour le programmeur est la différence d&amp;rsquo;interface pour le point d&amp;rsquo;entrée principal de la source d&amp;rsquo;application fournie par le programmeur.
Lorsqu&amp;rsquo;une application C ou C++ démarre, le point d&amp;rsquo;entrée de l&amp;rsquo;exécutable utilisé par le [chargeur exécutable][1] est le Runtime fourni par le compilateur.</description>
    </item>
    
    <item>
      <title>Rapport et traitement des erreurs</title>
      <link>https://www.wikiod.com/fr/winapi/rapport-et-traitement-des-erreurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/rapport-et-traitement-des-erreurs/</guid>
      <description>Chaque thread aura son propre dernier code d&amp;rsquo;erreur. L&amp;rsquo;API Windows définira le dernier code d&amp;rsquo;erreur sur le thread appelant.
Vous devez toujours appeler la fonction GetLastError immédiatement après avoir vérifié la valeur de retour d&amp;rsquo;une fonction API Windows.
La majorité des fonctions de l&amp;rsquo;API Windows définissent le dernier code d&amp;rsquo;erreur lorsqu&amp;rsquo;elles échouent. Certains définiront également le dernier code d&amp;rsquo;erreur lorsqu&amp;rsquo;ils réussiront. Il existe un certain nombre de fonctions qui ne définissent pas le dernier code d&amp;rsquo;erreur.</description>
    </item>
    
    <item>
      <title>Fonctions Ansi et Wide-character</title>
      <link>https://www.wikiod.com/fr/winapi/fonctions-ansi-et-wide-character/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/fonctions-ansi-et-wide-character/</guid>
      <description>Introduction # La documentation de l&amp;rsquo;API Windows pour les fonctions prenant une ou plusieurs string comme argument ressemblera généralement à ceci :
BOOL WINAPI CopyFile( _In_ LPCTSTR lpExistingFileName, _In_ LPCTSTR lpNewFileName, _In_ BOOL bFailIfExists ); Le type de données pour les deux paramètres de chaîne est composé de plusieurs parties :
LP = Pointeur long C = const T = TCHAR STR = chaîne Maintenant, que signifie TCHAR ? Cela dépend de la plate-forme choisie pour la compilation du programme.</description>
    </item>
    
    <item>
      <title>Gestion des processus et des threads</title>
      <link>https://www.wikiod.com/fr/winapi/gestion-des-processus-et-des-threads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/gestion-des-processus-et-des-threads/</guid>
      <description>Créer un processus et vérifier son code de sortie # Cet exemple démarre le Bloc-notes, attend qu&amp;rsquo;il soit fermé, puis obtient son code de sortie.
#include &amp;lt;Windows.h&amp;gt; int main() { STARTUPINFOW si = { 0 }; si.cb = sizeof(si); PROCESS_INFORMATION pi = { 0 }; // Create the child process BOOL success = CreateProcessW( L&amp;quot;C:\\Windows\\system32\\notepad.exe&amp;quot;, // Path to executable NULL, // Command line arguments NULL, // Process attributes NULL, // Thread attributes FALSE, // Inherit handles 0, // Creation flags NULL, // Environment NULL, // Working directory &amp;amp;si, // Startup info &amp;amp;pi); // Process information if (success) { // Wait for the process to exit WaitForSingleObject(pi.</description>
    </item>
    
    <item>
      <title>Sous-classement Windows</title>
      <link>https://www.wikiod.com/fr/winapi/sous-classement-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/sous-classement-windows/</guid>
      <description>Le sous-classement de fenêtre est un moyen de se connecter à la procédure de fenêtre standard et de modifier ou d&amp;rsquo;étendre son comportement par défaut. Une application sous-classe une fenêtre en remplaçant la procédure de fenêtre d&amp;rsquo;origine de la fenêtre par une nouvelle procédure de fenêtre. Cette nouvelle procédure de fenêtre reçoit tous les messages envoyés ou publiés dans la fenêtre.
Syntaxe # BOOL SetWindowSubclass (HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DWORD_PTR RefData); BOOL RemoveWindowSubclass (HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId); BOOL GetWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DORD_PTR* RefData); LRESULT DefSubclassProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); Paramètres # Paramètre Détail hWnd Le handle de la fenêtre à sous-classer.</description>
    </item>
    
    <item>
      <title>Messages de fenêtre</title>
      <link>https://www.wikiod.com/fr/winapi/messages-de-fenetre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/messages-de-fenetre/</guid>
      <description>Syntaxe # #include &amp;lt;windows.h&amp;gt; BOOL WINAPI DestroyWindow(HWND hwnd); VOID WINAPI PostQuitMessage (int code de sortie); BOOL WINAPI MoveWindow(HWND hwnd, int x, int y, int cx, int cy, BOOL bRepaint); WM_DESTROY # Ce message est envoyé à votre procédure de fenêtre lorsqu&amp;rsquo;une fenêtre est détruite. Il est envoyé après la suppression de la fenêtre de l&amp;rsquo;écran. La plupart des applications libèrent toutes les ressources, comme la mémoire ou les descripteurs, obtenues dans WM_CREATE.</description>
    </item>
    
    <item>
      <title>Traiter les fenêtres</title>
      <link>https://www.wikiod.com/fr/winapi/traiter-les-fenetres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/traiter-les-fenetres/</guid>
      <description>Création d&amp;rsquo;une fenêtre # #define UNICODE #define _UNICODE #include &amp;lt;windows.h&amp;gt; #include &amp;lt;tchar.h&amp;gt; const TCHAR CLSNAME[] = TEXT(&amp;quot;helloworldWClass&amp;quot;); LRESULT CALLBACK winproc(HWND hwnd, UINT wm, WPARAM wp, LPARAM lp); int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, PTSTR cmdline, int cmdshow) { WNDCLASSEX wc = { }; MSG msg; HWND hwnd; wc.cbSize = sizeof (wc); wc.style = 0; wc.lpfnWndProc = winproc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInst; wc.hIcon = LoadIcon (NULL, IDI_APPLICATION); wc.</description>
    </item>
    
    <item>
      <title>Gestion de fichiers</title>
      <link>https://www.wikiod.com/fr/winapi/gestion-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/gestion-de-fichiers/</guid>
      <description>Créer un fichier et y écrire # Cet exemple crée un nouveau fichier nommé &amp;ldquo;NewFile.txt&amp;rdquo;, puis écrit &amp;ldquo;Hello World!&amp;rdquo; à son corps. Si le fichier existe déjà, CreateFile échouera et aucune donnée ne sera écrite. Voir le paramètre dwCreationDisposition dans la [documentation CreateFile][1] si vous ne voulez pas que la fonction échoue si le fichier existe déjà.
#include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; int main() { // Open a handle to the file HANDLE hFile = CreateFile( L&amp;quot;C:\\NewFile.</description>
    </item>
    
    <item>
      <title>Services Windows</title>
      <link>https://www.wikiod.com/fr/winapi/services-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/services-windows/</guid>
      <description>Vérifier si un service est installé # Cet exemple montre comment vous pouvez vérifier si un service existe déjà (c&amp;rsquo;est-à-dire, est installé sur la machine) ou non. Ce code ne nécessite que les privilèges les plus bas nécessaires, de sorte que chaque processus peut effectuer la vérification, quel que soit le niveau de sécurité auquel il s&amp;rsquo;exécute.
#define UNICODE #define _UNICODE #include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; enum Result { unknown, serviceManager_AccessDenied, serviceManager_DatabaseDoesNotExist, service_AccessDenied, service_InvalidServiceManagerHandle, service_InvalidServiceName, service_DoesNotExist, service_Exist }; Result ServiceExists(const std::wstring &amp;amp;serviceName) { Result r = unknown; // Get a handle to the SCM database SC_HANDLE manager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, GENERIC_READ); if (manager == NULL) { DWORD lastError = GetLastError(); // At this point, we can return directly because no handles need to be closed.</description>
    </item>
    
    <item>
      <title>Utilisation de la documentation MSDN</title>
      <link>https://www.wikiod.com/fr/winapi/utilisation-de-la-documentation-msdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/winapi/utilisation-de-la-documentation-msdn/</guid>
      <description>L&amp;rsquo;API Windows est vaste et contient de nombreuses fonctionnalités. La taille de l&amp;rsquo;API est telle que personne ne peut tout savoir. Bien qu&amp;rsquo;il existe de nombreuses ressources comme StackOverflow, rien ne remplace la documentation officielle.
Exemples de documentation :
Présentation du sujet : Considérations sur les performances et meilleures pratiques du gestionnaire de fenêtres de bureau Échantillons : Personnaliser une miniature emblématique et un bitmap d&amp;rsquo;aperçu en direct Fonctions : Fonction DwmSetIconicThumbnail Types de documentation disponibles # La bibliothèque MSDN contient plusieurs types de documentation différents qui peuvent être utilisés pour implémenter des fonctionnalités.</description>
    </item>
    
  </channel>
</rss>

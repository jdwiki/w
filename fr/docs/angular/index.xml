<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel angulaire on </title>
    <link>https://www.wikiod.com/fr/docs/angular/</link>
    <description>Recent content in Tutoriel angulaire on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec Angular</title>
      <link>https://www.wikiod.com/fr/angular/debuter-avec-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/debuter-avec-angular/</guid>
      <description>Installation d&amp;rsquo;Angular en utilisant angular-cli # Cet exemple est une configuration rapide d&amp;rsquo;Angular et explique comment générer un exemple de projet rapide.
Conditions préalables: # [Node.js 6.9.0][1] ou supérieur. [npm][2] v3 ou supérieur ou yarn. [Typings][typings] v1 ou supérieur. Ouvrez un terminal et exécutez les commandes une par une :
npm install -g typings ou yarn global add typings
npm install -g @angular/cli ou yarn global add @angular/cli
La première commande installe la [bibliothèque de typages][typings] globalement (et ajoute l&amp;rsquo;exécutable typings à PATH).</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/angular/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/routage/</guid>
      <description>Routage de base # Le routeur permet la navigation d&amp;rsquo;une vue à une autre en fonction des interactions de l&amp;rsquo;utilisateur avec l&amp;rsquo;application.
Voici les étapes de mise en œuvre du routage de base dans Angular -
REMARQUE : Assurez-vous d&amp;rsquo;avoir cette balise :
&amp;lt;base href=&#39;https://www.wikiod.com/&#39;&amp;gt; en tant que premier enfant sous votre balise head dans votre fichier index.html. Cet élément indique que le dossier de votre application est la racine de l&amp;rsquo;application.</description>
    </item>
    
    <item>
      <title>Partage de données entre composants</title>
      <link>https://www.wikiod.com/fr/angular/partage-de-donnees-entre-composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/partage-de-donnees-entre-composants/</guid>
      <description>L&amp;rsquo;objectif de cette rubrique est de créer des exemples simples de plusieurs façons dont les données peuvent être partagées entre les composants via la liaison de données et le service partagé.
Il existe toujours de nombreuses façons d&amp;rsquo;accomplir une tâche en programmation. N&amp;rsquo;hésitez pas à modifier les exemples actuels ou à ajouter les vôtres.
Envoi de données de l&amp;rsquo;enfant au parent via l&amp;rsquo;émetteur d&amp;rsquo;événement @Output # event-emitter.component.ts
import { Component, OnInit, EventEmitter, Output } from &#39;@angular/core&#39;; @Component({ selector: &#39;event-emitting-child-component&#39;, template: `&amp;lt;div *ngFor=&amp;quot;let item of data&amp;quot;&amp;gt; &amp;lt;div (click)=&amp;quot;select(item)&amp;quot;&amp;gt; {{item.</description>
    </item>
    
    <item>
      <title>RXJS et observables</title>
      <link>https://www.wikiod.com/fr/angular/rxjs-et-observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/rxjs-et-observables/</guid>
      <description>Attendre plusieurs requêtes # Un scénario courant consiste à attendre la fin d&amp;rsquo;un certain nombre de requêtes avant de continuer. Cela peut être accompli en utilisant la méthode forkJoin.
Dans l&amp;rsquo;exemple suivant, forkJoin est utilisé pour appeler deux méthodes qui renvoient Observables. Le rappel spécifié dans la méthode .subscribe sera appelé lorsque les deux Observables seront terminés. Les paramètres fournis par .subscribe correspondent à l&amp;rsquo;ordre donné dans l&amp;rsquo;appel à .forkJoin. Dans ce cas, commencez par posts puis tags.</description>
    </item>
    
    <item>
      <title>Formes</title>
      <link>https://www.wikiod.com/fr/angular/formes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/formes/</guid>
      <description>Formulaires réactifs # app.module.ts # Ajoutez-les dans votre fichier app.module.ts pour utiliser des formulaires réactifs
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { FormsModule, ReactiveFormsModule } from &#39;@angular/forms&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule, FormsModule, ReactiveFormsModule, ], declarations: [ AppComponent ] providers: [], bootstrap: [ AppComponent ] }) export class AppModule {} app.component.ts # import { Component,OnInit } from &#39;@angular/core&#39;; import template from &#39;.</description>
    </item>
    
    <item>
      <title>Tuyaux</title>
      <link>https://www.wikiod.com/fr/angular/tuyaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/tuyaux/</guid>
      <description>Les tuyaux sont très similaires aux filtres dans AngularJS en ce sens qu&amp;rsquo;ils aident tous les deux à transformer les données dans un format spécifié. Le caractère de tuyau | est utilisé pour appliquer des tuyaux dans Angular.
Tuyaux personnalisés # ma.pipe.ts
import { Pipe, PipeTransform } from &#39;@angular/core&#39;; @Pipe({name: &#39;myPipe&#39;}) export class MyPipe implements PipeTransform { transform(value:any, args?: any):string { let transformedValue = value; // implement your transformation logic here return transformedValue; } } mon.</description>
    </item>
    
    <item>
      <title>Pour la boucle</title>
      <link>https://www.wikiod.com/fr/angular/pour-la-boucle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/pour-la-boucle/</guid>
      <description>NgFor - Balisage pour la boucle # La directive NgFor instancie un modèle une fois par élément à partir d&amp;rsquo;un itérable. Le contexte de chaque modèle instancié hérite du contexte externe avec la variable de boucle donnée définie sur l&amp;rsquo;élément actuel de l&amp;rsquo;itérable.
Pour personnaliser l&amp;rsquo;algorithme de suivi par défaut, NgFor prend en charge l&amp;rsquo;option trackBy. trackBy prend une fonction qui a deux arguments : index et item. Si trackBy est donné, Angular suit les changements par la valeur de retour de la fonction.</description>
    </item>
    
    <item>
      <title>Émetteur d&#39;événements</title>
      <link>https://www.wikiod.com/fr/angular/emetteur-devenements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/angular/emetteur-devenements/</guid>
      <description>Attraper l&amp;rsquo;événement # Créer un service-
import {EventEmitter} from &#39;angular2/core&#39;; export class NavService { navchange: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter(); constructor() {} emitNavChangeEvent(number) { this.navchange.emit(number); } getNavChangeEmitter() { return this.navchange; } } Créer un composant pour utiliser le service-
import {Component} from &#39;angular2/core&#39;; import {NavService} from &#39;../services/NavService&#39;; @Component({ selector: &#39;obs-comp&#39;, template: `obs component, item: {{item}}` }) export class ObservingComponent { item: number = 0; subscription: any; constructor(private navService:NavService) {} ngOnInit() { this.</description>
    </item>
    
  </channel>
</rss>

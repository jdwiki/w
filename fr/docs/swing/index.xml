<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>balançoire Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/swing/</link>
    <description>Recent content in balançoire Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/swing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Initiation au swing</title>
      <link>https://www.wikiod.com/fr/swing/initiation-au-swing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/initiation-au-swing/</guid>
      <description>Incrémentation avec un bouton # import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; import javax.swing.WindowConstants; /** * A very simple Swing example. */ public class SwingExample { /** * The number of times the user has clicked the button. */ private long clickCount; /** * The main method: starting point of this application. * * @param arguments the unused command-line arguments. */ public static void main(final String[] arguments) { new SwingExample().</description>
    </item>
    
    <item>
      <title>Utilisation de Swing pour les interfaces utilisateur graphiques</title>
      <link>https://www.wikiod.com/fr/swing/utilisation-de-swing-pour-les-interfaces-utilisateur-graphiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/utilisation-de-swing-pour-les-interfaces-utilisateur-graphiques/</guid>
      <description>Quitter l&amp;rsquo;application à la fermeture de la fenêtre # Il est facile d&amp;rsquo;oublier de quitter l&amp;rsquo;application lorsque la fenêtre est fermée. N&amp;rsquo;oubliez pas d&amp;rsquo;ajouter la ligne suivante.
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //Quit the application when the JFrame is closed Création d&amp;rsquo;une fenêtre vide (JFrame) # Création du JFrame # Créer une fenêtre est facile. Il vous suffit de créer un JFrame.
JFrame frame = new JFrame(); Intituler la fenêtre # Vous pouvez donner un titre à votre fenêtre.</description>
    </item>
    
    <item>
      <title>Disposition GridBag</title>
      <link>https://www.wikiod.com/fr/swing/disposition-gridbag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/disposition-gridbag/</guid>
      <description>Syntaxe # frame.setLayout(nouveau GridBagLayout()); // Définissez GridBagLayout pour le cadre pane.setLayout(nouveau GridBagLayout()); //Définir GridBagLayout pour le panneau Volet JPanel = new JPanel(new GridBagLayout()); //Définir GridBagLayout pour le panneau GridBagConstraints c = new GridBagConstraints() //Initialisation d&amp;rsquo;une GridBagConstraint Comment fonctionne GridBagLayout ? # Les mises en page sont utilisées chaque fois que vous souhaitez que vos composants ne soient pas simplement affichés les uns à côté des autres. Le GridBagLayout est utile, car il divise votre fenêtre en lignes et en colonnes, et vous décidez dans quelle ligne et colonne placer les composants, ainsi que le nombre de lignes et de colonnes de la taille du composant.</description>
    </item>
    
    <item>
      <title>Disposition de la grille</title>
      <link>https://www.wikiod.com/fr/swing/disposition-de-la-grille/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/disposition-de-la-grille/</guid>
      <description>Fonctionnement de GridLayout # Un GridLayout est un gestionnaire de mise en page qui place les composants dans une grille avec des tailles de cellule égales. Vous pouvez définir le nombre de lignes, de colonnes, l&amp;rsquo;écart horizontal et l&amp;rsquo;écart vertical à l&amp;rsquo;aide des méthodes suivantes :
setRows(lignes entières) setColumns(int colonnes) setHgap(entier hgap) setVgap(int vgap) ou vous pouvez les définir avec les constructeurs suivants :
GridLayout(lignes entières, colonnes entières) GridLayout (int lignes, int colonnes, int hgap, int vgap) Si le nombre de lignes ou de colonnes est inconnu, vous pouvez définir la variable respective sur &amp;ldquo;0&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Modèle MVP</title>
      <link>https://www.wikiod.com/fr/swing/modele-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/modele-mvp/</guid>
      <description>Exemple simple de MVP # Pour illustrer un exemple simple d&amp;rsquo;utilisation du modèle MVP, considérez le code suivant qui crée une interface utilisateur simple avec seulement un bouton et une étiquette. Lorsque le bouton est cliqué, l&amp;rsquo;étiquette est mise à jour avec le nombre de fois que le bouton a été cliqué.
Nous avons 5 cours :
Modèle - Le POJO pour maintenir l&amp;rsquo;état (M dans MVP) Vue - La classe avec le code UI (V dans MVP) ViewListener - Interface fournissant des méthodes pour répondre aux actions dans la vue Présentateur - Répond aux entrées et met à jour la vue (P dans MVP) Application - La classe &amp;ldquo;principale&amp;rdquo; pour tout rassembler et lancer l&amp;rsquo;application Une classe &amp;ldquo;modèle&amp;rdquo; minimale qui ne maintient qu&amp;rsquo;une seule variable count.</description>
    </item>
    
    <item>
      <title>StyleDocument</title>
      <link>https://www.wikiod.com/fr/swing/styledocument/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/styledocument/</guid>
      <description>Syntaxe # doc.insertString(index, texte, attributs); // les attributs doivent être un AttributeSet Création d&amp;rsquo;un document de style par défaut # Ajout de StyledDocument à JTextPane # Copie de DefaultStyledDocument # Sérialisation d&amp;rsquo;un DefaultStyledDocument en RTF # </description>
    </item>
    
    <item>
      <title>Utilisation de l&#39;apparence et de la convivialité</title>
      <link>https://www.wikiod.com/fr/swing/utilisation-de-lapparence-et-de-la-convivialite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/utilisation-de-lapparence-et-de-la-convivialite/</guid>
      <description>Utilisation du système L&amp;amp;F # Swing prend en charge un certain nombre de L&amp;amp;F natifs.
Vous pouvez toujours en installer un facilement sans faire appel à une classe L&amp;amp;F spécifique :
public class SystemLookAndFeel { public static void main ( final String[] args ) { // L&amp;amp;F installation should be performed within EDT (Event Dispatch Thread) // This is important to avoid any UI issues, exceptions or even deadlocks SwingUtilities.invokeLater ( new Runnable () { @Override public void run () { // Process of L&amp;amp;F installation might throw multiple exceptions // It is always up to you whether to handle or ignore them // In most common cases you would never encounter any of those try { // Installing native L&amp;amp;F as a current application L&amp;amp;F // We do not know what exactly L&amp;amp;F class is, it is provided by the UIManager UIManager.</description>
    </item>
    
    <item>
      <title>Swing Workers et l&#39;EDT</title>
      <link>https://www.wikiod.com/fr/swing/swing-workers-et-ledt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/swing-workers-et-ledt/</guid>
      <description>Syntaxe # classe abstraite publique SwingWorker&amp;lt;T,V&amp;gt;
T - le type de résultat renvoyé par les méthodes doInBackground et get de SwingWorker.
V - le type utilisé pour effectuer les résultats intermédiaires par les méthodes de publication et de traitement de SwingWorker.
T doInBackground() - La fonction abstraite qui doit être remplacée. Le type de retour est T.
Thread de répartition principal et d&amp;rsquo;événement # Comme tout autre programme Java, chaque programme swing commence par une méthode principale.</description>
    </item>
    
    <item>
      <title>Graphique</title>
      <link>https://www.wikiod.com/fr/swing/graphique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/graphique/</guid>
      <description>Utilisation de la classe Graphics # # Introduction La classe [Graphics][1] vous permet de dessiner sur des composants Java tels qu&amp;rsquo;un [Jpanel][2], elle peut être utilisée pour dessiner des chaînes, des lignes, des formes et des images. Ceci est fait en remplaçant la méthode paintComponent(Graphics g) du [JComponent][3] sur lequel vous dessinez en utilisant l&amp;rsquo;objet [Graphics][1] reçu comme argument pour faire le dessin :
classe Conseil # import java.awt.*; import javax.</description>
    </item>
    
    <item>
      <title>MigLayout</title>
      <link>https://www.wikiod.com/fr/swing/miglayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/swing/miglayout/</guid>
      <description>Éléments d&amp;rsquo;emballage # Cet exemple montre comment placer 3 boutons au total avec 2 boutons dans la première rangée. Ensuite, un retour à la ligne se produit, de sorte que le dernier bouton se trouve dans une nouvelle ligne.
Les contraintes sont de simples chaînes, dans ce cas &amp;ldquo;envelopper&amp;rdquo; lors du placement du composant.
public class ShowMigLayout { // Create the elements private final JFrame demo = new JFrame(); private final JPanel panel = new JPanel(); private final JButton button1 = new JButton(&amp;quot;First Button&amp;quot;); private final JButton button2 = new JButton(&amp;quot;Second Button&amp;quot;); private final JButton button3 = new JButton(&amp;quot;Third Button&amp;quot;); public static void main(String[] args) { ShowMigLayout showMigLayout = new ShowMigLayout(); SwingUtilities.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xaml Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/xaml/</link>
    <description>Recent content in xaml Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/xaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec xaml</title>
      <link>https://www.wikiod.com/fr/xaml/premiers-pas-avec-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/premiers-pas-avec-xaml/</guid>
      <description>Installation ou configuration # Le moyen le plus simple d&amp;rsquo;écrire votre premier XAML consiste à installer Microsoft Visual Studio. Ceci est disponible gratuitement auprès de Microsoft.
Une fois installé, vous pouvez créer un nouveau projet, de type Application WPF, soit avec un code VB.NET ou C#.
Ceci est similaire aux formulaires Windows dans le sens où vous avez une série de fenêtres, la principale différence étant que ces fenêtres sont écrites en XAML et sont beaucoup plus réactives aux différents appareils.</description>
    </item>
    
    <item>
      <title>Convertisseurs</title>
      <link>https://www.wikiod.com/fr/xaml/convertisseurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/convertisseurs/</guid>
      <description>Paramètres # Paramètre Détails valeur La valeur à convertir à partir de TypeCible Le type converti en paramètre Valeur facultative pour contrôler le fonctionnement de la conversion culturelle Objet CultureInfo - requis si la localisation est nécessaire La méthode Convert convertit la valeur de la source (généralement le modèle de vue) vers la cible (généralement une propriété d&amp;rsquo;un contrôle).
La méthode ConvertBack convertit la valeur de la cible vers la source.</description>
    </item>
    
    <item>
      <title>Différences dans les différents dialectes XAML</title>
      <link>https://www.wikiod.com/fr/xaml/differences-dans-les-differents-dialectes-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/differences-dans-les-differents-dialectes-xaml/</guid>
      <description>XAML est utilisé dans les applications Silverlight, Windows Phone, Windows RT et UWP. Le partage de code ou la conversion de code entre ceux-ci est parfois plus difficile que souhaitable en raison des différences subtiles entre les différents dialectes XAML. Cette rubrique s&amp;rsquo;efforce de donner un aperçu de ces différences avec une brève explication.
Liaisons de données compilées : l&amp;rsquo;extension de balisage {x:Bind} # Les databings sont essentiels pour travailler avec XAML.</description>
    </item>
    
    <item>
      <title>Liaison de données</title>
      <link>https://www.wikiod.com/fr/xaml/liaison-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/liaison-de-donnees/</guid>
      <description>Syntaxe # &amp;lt;TextBlock Text=&amp;quot;{Titre de liaison}&amp;quot;/&amp;gt;
&amp;lt;TextBlock Text=&amp;quot;{Binding Path=Title}&amp;quot;/&amp;gt;
&amp;lt;BlocTexte&amp;gt; &amp;lt;TextBlock.Text&amp;gt; &amp;lt;Binding Path=&amp;quot;Title&amp;quot;/&amp;gt; &amp;lt;/TextBlock.Text&amp;gt; &amp;lt;/TextBlock&amp;gt;
Toutes ces balises produisent le même résultat.
Chaîne de liaison à la propriété Text # Pour modifier le contenu de l&amp;rsquo;interface utilisateur lors de l&amp;rsquo;exécution, vous pouvez utiliser Binding. Lorsque la propriété liée est modifiée à partir du code, elle sera affichée dans l&amp;rsquo;interface utilisateur.
&amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt; Pour informer l&amp;rsquo;interface utilisateur des modifications, la propriété doit déclencher l&amp;rsquo;événement PropertyChanged à partir de l&amp;rsquo;interface INotifyPropertyChanged ou vous pouvez utiliser Dependency Property.</description>
    </item>
    
    <item>
      <title>Commandes de mise en page</title>
      <link>https://www.wikiod.com/fr/xaml/commandes-de-mise-en-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/commandes-de-mise-en-page/</guid>
      <description>Grille # Grid est utilisé pour créer des mises en page de table.
Définitions de base des lignes et des colonnes # &amp;lt;Grid&amp;gt; &amp;lt;!-- Define 3 columns with width of 100 --&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;!-- Define 3 rows with height of 50 --&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- This is placed at the top left (first row, first column) --&amp;gt; &amp;lt;Button Grid.</description>
    </item>
    
    <item>
      <title>Modèles de données</title>
      <link>https://www.wikiod.com/fr/xaml/modeles-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/modeles-de-donnees/</guid>
      <description>Utilisation de DataTemplate dans une ListBox # Supposons que nous ayons l&amp;rsquo;extrait de code XAML suivant :
&amp;lt;ListBox x:Name=&amp;quot;MyListBox&amp;quot; /&amp;gt; Ensuite, dans le code-behind de ce fichier XAML, nous écrivons ce qui suit dans le constructeur :
MyListBox.ItemsSource = new[] { 1, 2, 3, 4, 5 }; En exécutant l&amp;rsquo;application, nous obtenons une liste des numéros que nous avons entrés.
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Cependant, si nous essayons d&amp;rsquo;afficher une liste d&amp;rsquo;objets d&amp;rsquo;un type personnalisé, comme celui-ci</description>
    </item>
    
    <item>
      <title>Outils de développement XAML</title>
      <link>https://www.wikiod.com/fr/xaml/outils-de-developpement-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/outils-de-developpement-xaml/</guid>
      <description>Microsoft Visual Studio et Microsoft Expression Blend # Créez des interfaces utilisateur attrayantes pour les applications de bureau Windows avec Blend pour Visual Studio, le premier outil de conception professionnel pour les applications XAML. Créez de superbes transitions et visualisations à l&amp;rsquo;aide de la suite complète d&amp;rsquo;outils de dessin vectoriel de Blend, de puissantes fonctionnalités d&amp;rsquo;édition de modèles, d&amp;rsquo;animations en temps réel, de gestion de l&amp;rsquo;état visuel et bien plus encore.</description>
    </item>
    
    <item>
      <title>Travailler avec des fichiers XAML personnalisés</title>
      <link>https://www.wikiod.com/fr/xaml/travailler-avec-des-fichiers-xaml-personnalises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/travailler-avec-des-fichiers-xaml-personnalises/</guid>
      <description>Lecture d&amp;rsquo;un objet à partir de XAML # Considérez qu&amp;rsquo;une structure des classes suivantes doit être construite en XAML puis lue dans un objet CLR :
namespace CustomXaml { public class Test { public string Value { get; set; } public List&amp;lt;TestChild&amp;gt; Children { get; set; } = new List&amp;lt;TestChild&amp;gt;(); } public class TestChild { public string StringValue { get; set; } public int IntValue { get; set; } } } Les classes doivent soit n&amp;rsquo;avoir aucun constructeur explicite, soit en fournir un vide.</description>
    </item>
    
    <item>
      <title>Modèles de contrôle</title>
      <link>https://www.wikiod.com/fr/xaml/modeles-de-controle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xaml/modeles-de-controle/</guid>
      <description>Modèles de contrôle # Les interfaces utilisateur par défaut pour les contrôles WPF sont généralement construites à partir d&amp;rsquo;autres contrôles et formes. Par exemple, un bouton est composé à la fois de contrôles ButtonChrome et ContentPresenter. Le ButtonChrome fournit l&amp;rsquo;apparence standard du bouton, tandis que le ContentPresenter affiche le contenu du bouton, comme spécifié par la propriété Content. Parfois, l&amp;rsquo;apparence par défaut d&amp;rsquo;un contrôle peut être incompatible avec l&amp;rsquo;apparence générale d&amp;rsquo;une application.</description>
    </item>
    
  </channel>
</rss>

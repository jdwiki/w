<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel javafx on </title>
    <link>https://www.wikiod.com/fr/docs/javafx/</link>
    <description>Recent content in Tutoriel javafx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/javafx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec javafx</title>
      <link>https://www.wikiod.com/fr/javafx/premiers-pas-avec-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/premiers-pas-avec-javafx/</guid>
      <description>Programme Hello World # Le code suivant crée une interface utilisateur simple contenant un seul Button qui imprime une String sur la console lors d&amp;rsquo;un clic.
import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Alert.AlertType; import javafx.scene.control.Button; import javafx.scene.layout.StackPane; import javafx.stage.Stage; public class HelloWorld extends Application { @Override public void start(Stage primaryStage) { // create a button with specified text Button button = new Button(&amp;quot;Say &#39;Hello World&#39;&amp;quot;); // set a handler that is executed when the user activates the button // e.</description>
    </item>
    
    <item>
      <title>Internationalisation dans JavaFX</title>
      <link>https://www.wikiod.com/fr/javafx/internationalisation-dans-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/internationalisation-dans-javafx/</guid>
      <description>Chargement du bundle de ressources # JavaFX fournit un moyen simple d&amp;rsquo;internationaliser vos interfaces utilisateur. Lors de la création d&amp;rsquo;une vue à partir d&amp;rsquo;un fichier FXML, vous pouvez fournir au &amp;ldquo;FXMLLoader&amp;rdquo; un ensemble de ressources :
Locale locale = new Locale(&amp;quot;en&amp;quot;, &amp;quot;UK&amp;quot;); ResourceBundle bundle = ResourceBundle.getBundle(&amp;quot;strings&amp;quot;, locale); Parent root = FXMLLoader.load(getClass().getClassLoader() .getResource(&amp;quot;ui/main.fxml&amp;quot;), bundle); Cet ensemble fourni est automatiquement utilisé pour traduire tous les textes de votre fichier FXML commençant par %.</description>
    </item>
    
    <item>
      <title>FXML et contrôleurs</title>
      <link>https://www.wikiod.com/fr/javafx/fxml-et-controleurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/fxml-et-controleurs/</guid>
      <description>Syntaxe # xmlns:fx=&amp;ldquo;http://javafx.com/fxml&amp;rdquo; // déclaration d&amp;rsquo;espace de noms Définir les propriétés # Il existe plusieurs façons d&amp;rsquo;ajouter des données à un objet dans fxml :
Balise &amp;lt;propriété&amp;gt; # Une balise avec le nom d&amp;rsquo;une propriété peut être ajoutée en tant qu&amp;rsquo;enfant d&amp;rsquo;un élément utilisé pour créer une instance. L&amp;rsquo;enfant de cette balise est affecté à la propriété à l&amp;rsquo;aide du setter ou ajouté au contenu de la propriété (propriétés de liste/carte en lecture seule).</description>
    </item>
    
    <item>
      <title>Générateur de scène</title>
      <link>https://www.wikiod.com/fr/javafx/generateur-de-scene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/generateur-de-scene/</guid>
      <description>JavaFX Scene Builder est un outil de mise en page visuelle qui permet aux utilisateurs de concevoir rapidement des interfaces utilisateur d&amp;rsquo;application JavaFX, sans codage. Il est utilisé pour générer des fichiers FXML.
JavaFX Scene Builder est un outil de mise en page visuelle qui permet aux utilisateurs de concevoir rapidement des interfaces utilisateur d&amp;rsquo;application JavaFX, sans codage. Les utilisateurs peuvent faire glisser et déposer des composants d&amp;rsquo;interface utilisateur dans une zone de travail, modifier leurs propriétés, appliquer des feuilles de style et le code FXML de la mise en page qu&amp;rsquo;ils créent est automatiquement généré en arrière-plan.</description>
    </item>
    
    <item>
      <title>Dispositions</title>
      <link>https://www.wikiod.com/fr/javafx/dispositions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/dispositions/</guid>
      <description>BorderPane # Le BorderPane est séparé en cinq zones différentes.
[![Les différentes zones d&amp;rsquo;un BorderPane][1]][1]
[1] : http://i.stack.imgur.com/u5Wif.png
Les zones de bordure (Top, Right, Bottom, Left) ont une taille préférée en fonction de leur contenu. Par défaut, ils ne prendront que ce dont ils ont besoin, tandis que la zone &amp;ldquo;Centre&amp;rdquo; prendra tout l&amp;rsquo;espace restant. Lorsque les zones frontalières sont vides, elles n&amp;rsquo;occupent pas d&amp;rsquo;espace.
Chaque zone ne peut contenir qu&amp;rsquo;un seul élément.</description>
    </item>
    
    <item>
      <title>Vue de tableau</title>
      <link>https://www.wikiod.com/fr/javafx/vue-de-tableau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/vue-de-tableau/</guid>
      <description>PropertyValueFactory # PropertyValueFactory peut être utilisé comme cellValueFactory dans une TableColumn. Il utilise la réflexion pour accéder aux méthodes qui correspondent à un certain modèle pour récupérer les données d&amp;rsquo;un élément TableView :
Exemple
TableColumn&amp;lt;Person, String&amp;gt; nameColumn = ... PropertyValueFactory&amp;lt;Person, String&amp;gt; valueFactory = new PropertyValueFactory&amp;lt;&amp;gt;(&amp;quot;name&amp;quot;); nameColumn.setCellValueFactory(valueFactory); Le nom de la méthode utilisée pour obtenir les données dépend du paramètre du constructeur pour PropertyValueFactory.
Méthode de propriété : Ce type de méthode est censé renvoyer une &amp;ldquo;ObservableValue&amp;rdquo; contenant les données.</description>
    </item>
    
    <item>
      <title>WebView et WebEngine</title>
      <link>https://www.wikiod.com/fr/javafx/webview-et-webengine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/webview-et-webengine/</guid>
      <description>Le WebView est le nœud JavaFX qui est intégré dans l&amp;rsquo;arborescence des composants JavaFX. Il gère un WebEngine et affiche son contenu.
Le WebEngine est le moteur de navigation sous-jacent, qui fait essentiellement tout le travail.
Chargement d&amp;rsquo;une page # WebView wv = new WebView(); WebEngine we = wv.getEngine(); we.load(&amp;quot;https://stackoverflow.com&amp;quot;); WebView est le shell de l&amp;rsquo;interface utilisateur autour du [WebEngine](https:// docs.oracle.com/javase/8/javafx/api/javafx/scene/web/WebEngine.html). Presque tous les contrôles pour l&amp;rsquo;interaction non UI avec une page sont effectués via la classe WebEngine.</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://www.wikiod.com/fr/javafx/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/css/</guid>
      <description>Syntaxe # NodeClass /* sélecteur par classe de Node */ .someclass /* sélecteur par classe */ #someId /* sélecteur par identifiant */ [selector1] &amp;gt; [selector2] /* sélecteur pour un enfant direct d&amp;rsquo;un nœud correspondant à selector1 qui correspond à selector2 */ [selector1] [selector2] /* sélecteur pour un descendant d&amp;rsquo;un nœud correspondant à selector1 qui correspond à selector2 */ Utilisation de CSS pour le style # Le CSS peut être appliqué à plusieurs endroits :</description>
    </item>
    
    <item>
      <title>Propriétés &amp; Observable</title>
      <link>https://www.wikiod.com/fr/javafx/proprietes--observable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/proprietes--observable/</guid>
      <description>Les propriétés sont observables et des écouteurs peuvent leur être ajoutés. Ils sont systématiquement utilisés pour les propriétés de Nodes.
Types de propriétés et dénomination # Propriétés standards # Selon le type de bien, il existe jusqu&amp;rsquo;à 3 méthodes pour un même bien. Soit &amp;lt;property&amp;gt; le nom d&amp;rsquo;une propriété et &amp;lt;Property&amp;gt; le nom de la propriété avec une première lettre en majuscule. Et soit T le type de la propriété ; pour les wrappers primitifs, nous utilisons ici le type primitif, par ex.</description>
    </item>
    
    <item>
      <title>Dialogues</title>
      <link>https://www.wikiod.com/fr/javafx/dialogues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/javafx/dialogues/</guid>
      <description>Des boîtes de dialogue ont été ajoutées dans JavaFX 8 mise à jour 40.
TextInputDialog # TextInputDialog permet de demander à l&amp;rsquo;utilisateur de saisir une seule String.
TextInputDialog dialog = new TextInputDialog(&amp;quot;42&amp;quot;); dialog.setHeaderText(&amp;quot;Input your favourite int.&amp;quot;); dialog.setTitle(&amp;quot;Favourite number?&amp;quot;); dialog.setContentText(&amp;quot;Your favourite int: &amp;quot;); Optional&amp;lt;String&amp;gt; result = dialog.showAndWait(); String s = result.map(r -&amp;gt; { try { Integer n = Integer.valueOf(r); return MessageFormat.format(&amp;quot;Nice! I like {0} too!&amp;quot;, n); } catch (NumberFormatException ex) { return MessageFormat.</description>
    </item>
    
  </channel>
</rss>

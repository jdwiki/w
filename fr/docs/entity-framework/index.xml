<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Entity Framework on </title>
    <link>https://www.wikiod.com/fr/docs/entity-framework/</link>
    <description>Recent content in Tutoriel Entity Framework on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/entity-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Entity Framework</title>
      <link>https://www.wikiod.com/fr/entity-framework/premiers-pas-avec-entity-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/premiers-pas-avec-entity-framework/</guid>
      <description>Installation du package NuGet Entity Framework # Dans votre Visual Studio, ouvrez la fenêtre Solution Explorer puis clic droit sur votre projet puis choisissez Manage NuGet Packages dans le menu :
[![Gérer les paquets de nugets][1]][1]
Dans la fenêtre qui s&amp;rsquo;ouvre, tapez EntityFramework dans le champ de recherche en haut à droite.
[![entrez la description de l&amp;rsquo;image ici][2]][2]
Ou si vous utilisez Visual Studio 2015, vous verrez quelque chose comme ceci :</description>
    </item>
    
    <item>
      <title>Suivi vs non-suivi</title>
      <link>https://www.wikiod.com/fr/entity-framework/suivi-vs-non-suivi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/suivi-vs-non-suivi/</guid>
      <description>Le comportement de suivi contrôle si Entity Framework conservera ou non les informations sur une instance d&amp;rsquo;entité dans son suivi des modifications. Si une entité est suivie, toute modification détectée dans l&amp;rsquo;entité sera conservée dans la base de données pendant SaveChanges().
Requêtes sans suivi # Aucune requête de suivi n&amp;rsquo;est utile lorsque les résultats sont utilisés dans un Scénario &amp;ldquo;en lecture seule&amp;rdquo; Ils sont &amp;ldquo;plus rapides à exécuter&amp;rdquo; car il n&amp;rsquo;est pas nécessaire de modifier la configuration information de suivi Exemple :</description>
    </item>
    
    <item>
      <title>Chargement des entités associées</title>
      <link>https://www.wikiod.com/fr/entity-framework/chargement-des-entites-associees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/chargement-des-entites-associees/</guid>
      <description>Si les modèles sont correctement liés, vous pouvez facilement charger des données associées à l&amp;rsquo;aide d&amp;rsquo;EntityFramework. Vous avez le choix entre trois options : * chargement paresseux *, * chargement rapide * et * chargement explicite *.
Modèles utilisés dans les exemples :
public class Company { public int Id { get; set; } public string FullName { get; set; } public string ShortName { get; set; } // Navigation properties public virtual Person Founder { get; set; } public virtual ICollection&amp;lt;Address&amp;gt; Addresses { get; set; } } public class Address { public int Id { get; set; } public int CompanyId { get; set; } public int CountryId { get; set; } public int CityId { get; set; } public string Street { get; set; } // Navigation properties public virtual Company Company { get; set; } public virtual Country Country { get; set; } public virtual City City { get; set; } } Chargement impatient # Le chargement rapide vous permet de charger toutes vos entités nécessaires à la fois.</description>
    </item>
    
    <item>
      <title>Meilleures pratiques pour Entity Framework (simple et professionnel)</title>
      <link>https://www.wikiod.com/fr/entity-framework/meilleures-pratiques-pour-entity-framework-simple-et-professionnel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/meilleures-pratiques-pour-entity-framework-simple-et-professionnel/</guid>
      <description>Cet article est de présenter une pratique simple et professionnelle pour utiliser Entity Framework.
Simple : parce qu&amp;rsquo;il n&amp;rsquo;a besoin que d&amp;rsquo;une seule classe (avec une seule interface)
Professionnel : parce qu&amp;rsquo;il applique [les principes de l&amp;rsquo;architecture SOLID][1]
[1] : https://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp
Je ne veux pas parler plus&amp;hellip;. profitons-en!
1- Entity Framework @ Couche de données (Bases) # Dans cet article, nous allons utiliser une base de données simple appelée &amp;ldquo;Société&amp;rdquo; avec deux tables :</description>
    </item>
    
    <item>
      <title>Code First DataAnnotations</title>
      <link>https://www.wikiod.com/fr/entity-framework/code-first-dataannotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/code-first-dataannotations/</guid>
      <description>Entity Framework Code-First fournit un ensemble d&amp;rsquo;attributs DataAnnotation, que vous pouvez appliquer à vos classes et propriétés de domaine. Les attributs DataAnnotation remplacent les conventions Code-First par défaut.
System.ComponentModel.DataAnnotations inclut des attributs qui ont un impact sur la nullité ou la taille de la colonne. L&amp;rsquo;espace de noms System.ComponentModel.DataAnnotations.Schema inclut des attributs qui ont un impact sur le schéma de la base de données. Remarque : DataAnnotations ne vous donne qu&amp;rsquo;un sous-ensemble d&amp;rsquo;options de configuration.</description>
    </item>
    
    <item>
      <title>Techniques d&#39;optimisation dans EF</title>
      <link>https://www.wikiod.com/fr/entity-framework/techniques-doptimisation-dans-ef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/techniques-doptimisation-dans-ef/</guid>
      <description>Utiliser AsNoTracking # Mauvais exemple :
var location = dbContext.Location .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; Étant donné que le code ci-dessus renvoie simplement une entité sans la modifier ni l&amp;rsquo;ajouter, nous pouvons éviter les frais de suivi.
Bon exemple:
var location = dbContext.Location.AsNoTracking() .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; Lorsque nous utilisons la fonction AsNoTracking(), nous indiquons explicitement à Entity Framework que les entités ne sont pas suivies par le contexte.</description>
    </item>
    
    <item>
      <title>Conventions Code First</title>
      <link>https://www.wikiod.com/fr/entity-framework/conventions-code-first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/conventions-code-first/</guid>
      <description>La convention est un ensemble de règles par défaut pour configurer automatiquement un modèle conceptuel basé sur des définitions de classe de domaine lorsque vous travaillez avec Code-First. Les conventions Code-First sont définies dans l&amp;rsquo;espace de noms System.Data.Entity.ModelConfiguration.Conventions ([EF 5][1] &amp;amp; [EF 6][2]).
[1] : http://msdn.microsoft.com/en-us/library/system.data.entity.modelconfiguration.conventions(v=vs.103).aspx
[2] : https://msdn.microsoft.com/en-us/library/system.data.entity.modelconfiguration.conventions(v=vs.113).aspx
Suppression des conventions # Vous pouvez supprimer l&amp;rsquo;une des conventions définies dans l&amp;rsquo;espace de noms System.Data.Entity.ModelConfiguration.Conventions, en remplaçant la méthode OnModelCreating.</description>
    </item>
    
    <item>
      <title>Code First - API fluide</title>
      <link>https://www.wikiod.com/fr/entity-framework/code-first---api-fluide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/code-first---api-fluide/</guid>
      <description>Il existe deux manières générales de spécifier COMMENT Entity Framework mappera les classes POCO aux tables, colonnes, etc. de la base de données : ** Annotations de données ** et ** API Fluent **.
Bien que les annotations de données soient simples à lire et à comprendre, elles manquent de certaines fonctionnalités telles que la spécification du comportement &amp;ldquo;Cascade lors de la suppression&amp;rdquo; pour une entité. L&amp;rsquo;API Fluent, en revanche, est un peu plus complexe à utiliser, mais fournit un ensemble de fonctionnalités beaucoup plus avancées.</description>
    </item>
    
    <item>
      <title>Entity-framework Code First Migrations</title>
      <link>https://www.wikiod.com/fr/entity-framework/entity-framework-code-first-migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/entity-framework-code-first-migrations/</guid>
      <description>Activer les migrations # Pour activer Code First Migrations dans le cadre d&amp;rsquo;entité, utilisez la commande
Enable-Migrations sur la console du gestionnaire de packages.
Vous devez disposer d&amp;rsquo;une implémentation DbContext valide contenant vos objets de base de données gérés par EF. Dans cet exemple, le contexte de la base de données contiendra les objets BlogPost et Author :
internal class DatabaseContext: DbContext { public DbSet&amp;lt;Author&amp;gt; Authors { get; set; } public DbSet&amp;lt;BlogPost&amp;gt; BlogPosts { get; set; } } Après avoir exécuté la commande, la sortie suivante doit apparaître :</description>
    </item>
    
    <item>
      <title>Modèle Contraintes</title>
      <link>https://www.wikiod.com/fr/entity-framework/modele-contraintes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/entity-framework/modele-contraintes/</guid>
      <description>Relations un-à-plusieurs # UserType appartient à plusieurs utilisateurs &amp;lt;-&amp;gt; les utilisateurs ont un UserType
Propriété de navigation à sens unique avec obligatoire
public class UserType { public int UserTypeId {get; set;} } public class User { public int UserId {get; set;} public int UserTypeId {get; set;} public virtual UserType UserType {get; set;} } Entity&amp;lt;User&amp;gt;().HasRequired(u =&amp;gt; u.UserType).WithMany().HasForeignKey(u =&amp;gt; u.UserTypeId); Propriété de navigation à sens unique avec option (la clé étrangère doit être de type Nullable)</description>
    </item>
    
  </channel>
</rss>

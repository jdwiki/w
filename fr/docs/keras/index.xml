<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keras Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/keras/</link>
    <description>Recent content in Keras Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/keras/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commencer avec keras</title>
      <link>https://www.wikiod.com/fr/keras/commencer-avec-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/commencer-avec-keras/</guid>
      <description>Premiers pas avec Keras : 30 secondes # La structure de données de base de Keras est un modèle, une façon d&amp;rsquo;organiser les couches. Le principal type de modèle est le modèle [Sequential][1], un empilement linéaire de couches. Pour les architectures plus complexes, vous devez utiliser l&amp;rsquo;[API fonctionnelle Keras][2].
Voici le modèle séquentiel :
from keras.models import Sequential model = Sequential() Empiler des calques est aussi simple que .add() :</description>
    </item>
    
    <item>
      <title>Traitement de grands ensembles de données d&#39;entraînement à l&#39;aide de Keras fit_generator, de générateurs Python et du format de fichier HDF5</title>
      <link>https://www.wikiod.com/fr/keras/traitement-de-grands-ensembles-de-donnees-dentrainement-a-laide-de-keras-fit_generator-de-generateurs-python-et-du-format-de-fichier-hdf5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/traitement-de-grands-ensembles-de-donnees-dentrainement-a-laide-de-keras-fit_generator-de-generateurs-python-et-du-format-de-fichier-hdf5/</guid>
      <description>Les problèmes d&amp;rsquo;apprentissage automatique nécessitent souvent de traiter de grandes quantités de données d&amp;rsquo;entraînement avec des ressources informatiques limitées, en particulier la mémoire. Il n&amp;rsquo;est pas toujours possible de charger un ensemble d&amp;rsquo;apprentissage complet en mémoire. Heureusement, cela peut être résolu grâce à l&amp;rsquo;utilisation de la méthode fit_generator de Keras, des générateurs Python et du format de fichier HDF5.
Cet exemple suppose que keras, numpy (comme np) et h5py ont déjà été installés et importés.</description>
    </item>
    
    <item>
      <title>Créer un modèle séquentiel simple</title>
      <link>https://www.wikiod.com/fr/keras/creer-un-modele-sequentiel-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/creer-un-modele-sequentiel-simple/</guid>
      <description>Le modèle &amp;ldquo;séquentiel&amp;rdquo; est un empilement linéaire de couches.
Perceptron multicouche simple avec modèles séquentiels # Vous pouvez créer un modèle séquentiel en transmettant une liste d&amp;rsquo;instances de calque au constructeur :
from keras.models import Sequential from keras.layers import Dense, Activation model = Sequential([ Dense(32, input_dim=784), Activation(&#39;relu&#39;), Dense(10), Activation(&#39;softmax&#39;), ]) Vous pouvez aussi simplement ajouter des calques via la méthode .add() :
model = Sequential() model.add(Dense(32, input_dim=784)) model.add(Activation(&#39;relu&#39;)) Les modèles doivent être compilés avant utilisation :</description>
    </item>
    
    <item>
      <title>Fonction de perte personnalisée et métriques dans Keras</title>
      <link>https://www.wikiod.com/fr/keras/fonction-de-perte-personnalisee-et-metriques-dans-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/fonction-de-perte-personnalisee-et-metriques-dans-keras/</guid>
      <description>Vous pouvez créer une fonction de perte personnalisée et des métriques dans Keras en définissant une fonction symbolique TensorFlow/Theano qui renvoie un scalaire pour chaque point de données et prend les deux arguments suivants : tenseur des valeurs vraies, tenseur des valeurs prédites correspondantes.
Notez que la perte/métrique (pour l&amp;rsquo;affichage et l&amp;rsquo;optimisation) est calculée comme la moyenne des pertes/métrique sur tous les points de données du lot.
Les fonctions de perte de Keras sont définies dans losses.</description>
    </item>
    
    <item>
      <title>Apprentissage par transfert et réglage fin à l&#39;aide de Keras</title>
      <link>https://www.wikiod.com/fr/keras/apprentissage-par-transfert-et-reglage-fin-a-laide-de-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/apprentissage-par-transfert-et-reglage-fin-a-laide-de-keras/</guid>
      <description>Cette rubrique comprend des exemples courts, brefs mais complets de chargement de poids pré-formés, d&amp;rsquo;insertion de nouvelles couches au-dessus ou au milieu de ceux pré-formés et de formation d&amp;rsquo;un nouveau réseau avec des poids partiellement pré-formés. Un exemple pour chacun des réseaux pré-formés prêts à l&amp;rsquo;emploi, disponibles dans la bibliothèque Keras (VGG, ResNet, Inception, Xception, MobileNet), est requis.
Apprentissage par transfert avec Keras et VGG # Dans cet exemple, trois sous-exemples brefs et complets sont présentés :</description>
    </item>
    
    <item>
      <title>Classification des entrées spatio-temporelles avec CNN, RNN et MLP</title>
      <link>https://www.wikiod.com/fr/keras/classification-des-entrees-spatio-temporelles-avec-cnn-rnn-et-mlp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/keras/classification-des-entrees-spatio-temporelles-avec-cnn-rnn-et-mlp/</guid>
      <description>Les données spatio-temporelles, ou données ayant des qualités spatiales et temporelles, sont monnaie courante. Les exemples incluent des vidéos, ainsi que des séquences de données de type image, telles que des spectrogrammes.
Les réseaux de neurones convolutifs (CNN) sont particulièrement adaptés pour trouver des modèles spatiaux. Les réseaux de neurones récurrents (RNN), en revanche, sont particulièrement adaptés à la recherche de modèles temporels. Ces deux, en combinaison avec les Perceptrons multicouches, peuvent être efficaces pour classer les entrées spatio-temporelles.</description>
    </item>
    
  </channel>
</rss>

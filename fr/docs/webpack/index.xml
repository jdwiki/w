<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpack Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/webpack/</link>
    <description>Recent content in Webpack Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/webpack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Webpack</title>
      <link>https://www.wikiod.com/fr/webpack/premiers-pas-avec-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/premiers-pas-avec-webpack/</guid>
      <description>Exemple de Javascript + CSS + Polices + Images # Modules requis
npm install --save-dev webpack extract-text-webpack-plugin file-loader css-loader style-loader Arborescence des dossiers
. └── assets ├── css ├── images └── js webpack.config.js
const webpack = require(&#39;webpack&#39;); const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;); const path = require(&#39;path&#39;); const glob = require(&#39;glob&#39;); module.exports = { entry: { script: path.resolve(__dirname, &#39;./assets/js/app.js&#39;), style: path.resolve(__dirname, &#39;./assets/css/app.css&#39;), images: glob.sync(path.resolve(__dirname, &#39;./assets/images/**/*.*&#39;)), }, context: __dirname, output: { path: path.resolve(&#39;./dist/assets&#39;), publicPath: &#39;/dist/assets&#39;, filename: &#39;[name].</description>
    </item>
    
    <item>
      <title>DllPlugin et DllReferencePlugin</title>
      <link>https://www.wikiod.com/fr/webpack/dllplugin-et-dllreferenceplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/dllplugin-et-dllreferenceplugin/</guid>
      <description>Les plugins Dll et DllReference permettent au code d&amp;rsquo;être divisé en plusieurs bundles de manière à ce que les bundles puissent être compilés indépendamment.
Il est possible de construire des scripts &amp;ldquo;fournisseurs&amp;rdquo; dans une bibliothèque qui n&amp;rsquo;a pas besoin d&amp;rsquo;être compilée souvent (ex : React, jQuery, Bootstrap, Fontawesome&amp;hellip;) et de la référencer dans votre app bundle qui aura besoin de ces scripts.
Le bundle d&amp;rsquo;applications, celui qui sera constamment modifié, sera dans une configuration distincte faisant simplement référence à un bundle &amp;ldquo;fournisseur&amp;rdquo; déjà construit.</description>
    </item>
    
    <item>
      <title>Remplacement du module à chaud</title>
      <link>https://www.wikiod.com/fr/webpack/remplacement-du-module-a-chaud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/remplacement-du-module-a-chaud/</guid>
      <description>webpack-hot-middleware # À utiliser avec webpack-dev-middleware, en ajoutant webpack-hot-middleware/client à l&amp;rsquo;entrée.
Configuration # Ajoutez des configurations en tant que chaîne de requête au chemin. Exemple:
webpack-hot-middleware/client?path=/__what&amp;amp;timeout=2000&amp;amp;overlay=false Options La description chemin Le chemin sur lequel le middleware sert le flux d&amp;rsquo;événements délai d&amp;rsquo;attente Le temps d&amp;rsquo;attente après une déconnexion avant de tenter de se reconnecter superposition Définissez sur false pour désactiver la superposition côté client basée sur DOM. recharger Définissez sur true pour recharger automatiquement la page lorsque le webpack est bloqué.</description>
    </item>
    
    <item>
      <title>Chargeurs</title>
      <link>https://www.wikiod.com/fr/webpack/chargeurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/chargeurs/</guid>
      <description>Les chargeurs Webpack peuvent être configurés en tant que &amp;ldquo;preLoaders&amp;rdquo;, &amp;ldquo;loaders&amp;rdquo; et &amp;ldquo;postLoaders&amp;rdquo;. Bien qu&amp;rsquo;elles ne soient pas obligées de l&amp;rsquo;être, les configurations qui utilisent le linting ou d&amp;rsquo;autres opérations impératives ou en série peuvent tirer parti de ces étapes de génération dans le pipeline.
La clé pour comprendre les chargeurs et leur utilisation est que Webpack exécutera chaque module du graphique requis via le système de chargeur. En suivant l&amp;rsquo;exemple ci-dessus, cela signifie que lorsque Webpack commence à parcourir les importations de votre application, il identifiera les fichiers requis et, à l&amp;rsquo;aide d&amp;rsquo;une simple expression régulière, déterminera quel fichier ou type de fichier nécessite quel chargeur ou série de chargeurs.</description>
    </item>
    
    <item>
      <title>Chargeurs et plugins</title>
      <link>https://www.wikiod.com/fr/webpack/chargeurs-et-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/chargeurs-et-plugins/</guid>
      <description>Les chargeurs et les plugins constituent les éléments constitutifs de Webpack.
Les chargeurs sont généralement délégués à une seule tâche et à un seul type de fichier. Ils sont plus faciles à configurer et nécessitent généralement moins de code passe-partout.
Les plugins, en revanche, ont accès au système de build interne de Webpack via des hooks, et sont donc plus puissants. Les plugins peuvent modifier l&amp;rsquo;environnement Webpack entièrement configuré et ils peuvent effectuer des actions personnalisées tout au long du processus de compilation.</description>
    </item>
    
    <item>
      <title>Utilisation de Webpack</title>
      <link>https://www.wikiod.com/fr/webpack/utilisation-de-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/utilisation-de-webpack/</guid>
      <description>Exemple d&amp;rsquo;utilisation de modules CommonJS # Créer le dossier. Ouvrez-le en ligne de commande. Exécutez npm install webpack -g. Créez 2 fichiers :
chats.js :
var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; app.js
cats = require(&#39;./cats.js&#39;); console.log(cats); Exécutez en ligne de commande : webpack ./app.js app.bundle.js
Maintenant, dans le dossier sera le fichier app.bundle.js. Vous pouvez l&amp;rsquo;inclure dans la page index.html, l&amp;rsquo;ouvrir dans le navigateur et voir le résultat dans la console.</description>
    </item>
    
    <item>
      <title>Secouer les arbres</title>
      <link>https://www.wikiod.com/fr/webpack/secouer-les-arbres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/secouer-les-arbres/</guid>
      <description>ES2015 secouage des arbres # webpack 2 introduit le tree shaking qui peut supprimer le code inutilisé lorsque les modules ES2015 sont utilisés pour importer et exporter du code.
Installer # npm install babel-preset-es2015-webpack --save-dev Utilisation # dans .babelrc :
{ &amp;quot;presets&amp;quot;: [ &amp;quot;es2015-webpack&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>Serveur de développement webpack-dev-server</title>
      <link>https://www.wikiod.com/fr/webpack/serveur-de-developpement-webpack-dev-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/webpack/serveur-de-developpement-webpack-dev-server/</guid>
      <description>Installation # webpack-dev-server peut être installé via npm
npm --save-dev webpack-dev-server maintenant vous pouvez démarrer le serveur
./node_modules/.bin/webpack-dev-server Pour simplifier l&amp;rsquo;utilisation, vous pouvez ajouter un script à package.json
// package.json { ... &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }, ... } maintenant pour exécuter le serveur, vous pouvez utiliser
npm run start webpack-dev-server est configuré dans le fichier webpack.config.js dans la section devServer.
Pour changer le répertoire de base du contenu du serveur, vous pouvez utiliser l&amp;rsquo;option contentBase.</description>
    </item>
    
  </channel>
</rss>

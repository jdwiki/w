<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel jasmin on </title>
    <link>https://www.wikiod.com/fr/docs/jasmine/</link>
    <description>Recent content in Tutoriel jasmin on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/jasmine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le jasmin</title>
      <link>https://www.wikiod.com/fr/jasmine/debuter-avec-le-jasmin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jasmine/debuter-avec-le-jasmin/</guid>
      <description>Installation ou configuration # Installation autonome de Jasmine
Téléchargez la dernière version de Jasmine depuis la [page de version de Jasmine][1] :
Exécuter Jasmine localement
Lancez Jasmine dans le navigateur en téléchargeant le fichier zip, en l&amp;rsquo;extrayant, en référençant les fichiers comme suit :
Installation de Jasmine à l&amp;rsquo;aide de npm ([Node Package Manager][2])
Configurer le répertoire du projet pour Jasmine
Create a folder and run npm init this will create an empty package.</description>
    </item>
    
    <item>
      <title>Espions</title>
      <link>https://www.wikiod.com/fr/jasmine/espions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jasmine/espions/</guid>
      <description>Un espion est défini comme une fonction spécifique de test qui intercepte les appels à une fonction sous-jacente dans le code de l&amp;rsquo;application et distribue sa propre implémentation lorsque la fonction sous-jacente est appelée pour tester l&amp;rsquo;interface plutôt que l&amp;rsquo;implémentation.
Espionner une fonction existante # Jasmine peut espionner une fonction existante en utilisant la fonction spyOn.
let calculator = { multiply: function(a, b) { return a * b; }, square: function(a) { return this.</description>
    </item>
    
    <item>
      <title>Correspondants personnalisés</title>
      <link>https://www.wikiod.com/fr/jasmine/correspondants-personnalises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jasmine/correspondants-personnalises/</guid>
      <description>Ajout de correspondances personnalisées # Des matchers personnalisés peuvent être ajoutés dans Jasmine en utilisant la syntaxe :
jasmine.addMatchers([ toMatch: function () { return { compare: function (actual, expected) { return { pass: actual===expected, message: &amp;quot;Expected actual to match expected } } } } ]); Ce matcher peut maintenant être appelé avec :
expected(actual).toMatch(expected); Correspondants négatifs # Les correspondances personnalisées verront leur valeur de passage annulée lors de l&amp;rsquo;utilisation de &amp;rsquo;not&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Les attributs</title>
      <link>https://www.wikiod.com/fr/jasmine/les-attributs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jasmine/les-attributs/</guid>
      <description>Il y a certains termes que vous devez connaître avant d&amp;rsquo;écrire les cas de test Jasmine.
Suites Un costume est le point de départ d&amp;rsquo;un cas de test Jasmine, il appelle en fait la fonction jasmine globale describe. Il peut avoir deux paramètres, une valeur de chaîne qui décrit la combinaison et une fonction qui implémente la combinaison.
Spécification Comme les suites, une spécification commence par une chaîne qui peut être le titre de la suite et une fonction où nous écrivons les tests.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel ember.js on </title>
    <link>https://www.wikiod.com/fr/docs/ember-js/</link>
    <description>Recent content in Tutoriel ember.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ember-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec ember.js</title>
      <link>https://www.wikiod.com/fr/ember-js/premiers-pas-avec-emberjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/premiers-pas-avec-emberjs/</guid>
      <description>Installation ou configuration # Démarrer avec Ember est facile. Les projets Ember sont créés et gérés via notre outil de construction en ligne de commande Ember CLI. Cet outil fournit :
Gestion moderne des actifs d&amp;rsquo;application (y compris la concaténation, la minification et la gestion des versions). Générateurs pour aider à créer des composants, des itinéraires, etc. Une mise en page de projet conventionnelle, rendant les applications Ember existantes faciles à aborder.</description>
    </item>
    
    <item>
      <title>Tâches asynchrones dans les composants</title>
      <link>https://www.wikiod.com/fr/ember-js/taches-asynchrones-dans-les-composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/taches-asynchrones-dans-les-composants/</guid>
      <description>dans ember-concurrency, le paramètre supplémentaire de error est une solution pour empêcher les exceptions levées de remonter jusqu&amp;rsquo;à onerror d&amp;rsquo;Ember (puisqu&amp;rsquo;il est censé être géré dans le modèle). Il existe une demande de fonctionnalité pour mieux gérer cela.
## tâche ember-concurrence Une autre norme de facto de la communauté est un addon appelé ember-concurrency qui fait disparaître une grande partie de la confusion des promesses.
Il peut être installé avec la commande ember install ember-concurrency.</description>
    </item>
    
    <item>
      <title>Composant - communication entre l&#39;enfant et le composant parent.</title>
      <link>https://www.wikiod.com/fr/ember-js/composant---communication-entre-lenfant-et-le-composant-parent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/composant---communication-entre-lenfant-et-le-composant-parent/</guid>
      <description>Syntaxe # (yield - Vous permet d&amp;rsquo;exporter des éléments à partir d&amp;rsquo;un composant (hash - Vous permet d&amp;rsquo;exporter un hachage ou un objet, car cela est nécessaire pour appeler les composants enfants dans le bloc du parent. L&amp;rsquo;exigence est qu&amp;rsquo;il y ait un . pour que le composant soit créé (component - Crée le composant enfant qui peut prendre n&amp;rsquo;importe quoi dans le contexte du parent. Le composant peut être curry, puisqu&amp;rsquo;il n&amp;rsquo;est appelé que lorsque l&amp;rsquo;utilisateur l&amp;rsquo;utilise, alors ajoutez autant d&amp;rsquo;attributs que nécessaire, et l&amp;rsquo;utilisateur peut ajouter le reste.</description>
    </item>
    
    <item>
      <title>Comment mettre à jour Ember, Ember Data et Ember CLI</title>
      <link>https://www.wikiod.com/fr/ember-js/comment-mettre-a-jour-ember-ember-data-et-ember-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/comment-mettre-a-jour-ember-ember-data-et-ember-cli/</guid>
      <description>Pour trouver la dernière version stable de Ember, [cliquez ici][1]. Pour trouver la dernière version stable de Ember Data, [cliquez ici][2]. Pour trouver la dernière version stable de Ember CLI, [cliquez ici][3]. Toutes ces étapes ont été trouvées sur [Ember cli release note][4].
[1] : https://github.com/emberjs/ember.js/releases/latest [2] : https://github.com/emberjs/data/releases/latest [3] : https://github.com/ember-cli/ember-cli/releases/latest [4] : https://github.com/ember-cli/ember-cli/releases
Mise à jour de la CLI Ember # Ember CLI est un package npm normal.</description>
    </item>
    
    <item>
      <title>Débogage</title>
      <link>https://www.wikiod.com/fr/ember-js/debogage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/debogage/</guid>
      <description>Exécution de code de débogage uniquement # Ember a une méthode globale statique appelée [runInDebug][1] qui peut exécuter une fonction destinée au débogage.
Ember.runInDebug(() =&amp;gt; { // this code only runs in dev mode }); Dans une version de production, cette méthode est définie comme une fonction vide (NOP). Les utilisations de cette méthode dans Ember lui-même sont supprimées de la construction ember.prod.js.
[1] : http://emberjs.com/api/#method_runInDebug
Journalisation EmberData # Les modèles de données Ember ont une méthode [toJSON][1] qui extrait les données pertinentes :</description>
    </item>
    
    <item>
      <title>Assistant de modèle de formatage des devises</title>
      <link>https://www.wikiod.com/fr/ember-js/assistant-de-modele-de-formatage-des-devises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/assistant-de-modele-de-formatage-des-devises/</guid>
      <description>Plus de détails disponibles dans [Ember guides][1], d&amp;rsquo;où cet exemple est tiré.
Compatible avec Ember 2.2.0+ (2.11.0 était le dernier au moment de la rédaction)
[1] : https://guides.emberjs.com/v2.11.0/templates/writing-helpers/
Création d&amp;rsquo;un nouvel assistant # Utilisez Ember CLI pour générer un nouvel assistant dans votre application :
ember génère une aide au format-devise
Modifiez ensuite helpers/format-currency.js pour qu&amp;rsquo;il contienne les éléments suivants :
import Ember from &#39;ember&#39;; export function formatCurrency([value, ...rest]) { const dollars = Math.</description>
    </item>
    
    <item>
      <title>Comment importer une bibliothèqueplugin JavaScript</title>
      <link>https://www.wikiod.com/fr/ember-js/comment-importer-une-bibliothequeplugin-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/comment-importer-une-bibliothequeplugin-javascript/</guid>
      <description>Ouvrez le répertoire de votre projet ember.js, vous y trouverez un fichier nommé ember-cli-build.js. Vous pouvez installer vos bibliothèques ou plugins à l&amp;rsquo;aide de bower, puis pointer l&amp;rsquo;importation vers le dossier bower_components, mais si vous avez un fichier que vous souhaitez ajouter, faites-le simplement glisser vers le dossier de votre projet et écrivez le app.import dans ce fichier.
Syntaxe # app.import(&amp;lsquo;chemin vers le fichier à partir du dossier du projet/fichier.js&amp;rsquo;); Exemple de fichier ember-cli-build.</description>
    </item>
    
    <item>
      <title>Initialiser Foundation ou Bootstrap sur ember-cli de manière appropriée</title>
      <link>https://www.wikiod.com/fr/ember-js/initialiser-foundation-ou-bootstrap-sur-ember-cli-de-maniere-appropriee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/initialiser-foundation-ou-bootstrap-sur-ember-cli-de-maniere-appropriee/</guid>
      <description>Bootstrap : Je pense que ce n&amp;rsquo;est pas la bonne méthode. Le meilleur moyen à mon avis est un addon ember-bootstrap.
ember-bootstrap utilise les classes CSS Bootstrap tout en remplaçant les comportements des composants que Bootstrap implémente dans bootstrap.js, tels que toggle, navbar, modal, etc., par des composants Ember natifs équivalents et compatibles avec les classes CSS.
Fondation: Il existe un addon appelé Ember CLI Foundation 6 SASS, il est également installé à l&amp;rsquo;aide de la ligne de commande.</description>
    </item>
    
    <item>
      <title>Assistant de format de date</title>
      <link>https://www.wikiod.com/fr/ember-js/assistant-de-format-de-date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/assistant-de-format-de-date/</guid>
      <description>Aide pour un format de date et d&amp;rsquo;heure propre. # Lorsque vous voulez la date et l&amp;rsquo;heure actuelles, vous pouvez le faire avec la fonction Javascript Date, mais renverra le format suivant qui n&amp;rsquo;est pas toujours utile : `Wed Jun 07 2017 13:26:15 GMT+0200 (Romance ( zomertijd))&#39;.
Copiez le code suivant dans app/helpers/helpers.js et appelez simplement getCurrentDateAndFormat() au lieu de new Date().
export function getCurrentDateAndFormat() { let today = new Date(); let dd = today.</description>
    </item>
    
    <item>
      <title>Essai</title>
      <link>https://www.wikiod.com/fr/ember-js/essai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ember-js/essai/</guid>
      <description>La création et la maintenance d&amp;rsquo;une suite de tests complète doivent être une priorité pour chaque développeur. Les tests dans Ember.js impliquent de gérer l&amp;rsquo;asynchronisme, Ember Run Loop et de se moquer de votre API. Il est courant que les développeurs Ember.js aient des difficultés lors de l&amp;rsquo;écriture des tests. Cependant, il existe quelques astuces qui pourraient vous faire gagner du temps et de l’énergie.
Attendre les promesses dans les tests de manière élégante # Vous pouvez faire passer function à la méthode test() async - vous pouvez alors utiliser le mot-clé wait.</description>
    </item>
    
  </channel>
</rss>

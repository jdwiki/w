<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ada Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/ada/</link>
    <description>Recent content in ada Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ada/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec ada</title>
      <link>https://www.wikiod.com/fr/ada/demarrer-avec-ada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/demarrer-avec-ada/</guid>
      <description>Version # Le langage de programmation Ada standard est défini dans le [Manuel de référence Ada][1]. Les changements de version provisoires et les notes de mise à jour sont abordés dans les documents de justification correspondants. Les mises en œuvre documentent généralement leur conformité à la norme sous la forme d&amp;rsquo;un guide de l&amp;rsquo;utilisateur et/ou d&amp;rsquo;un manuel de référence, par exemple[2].
-Ada 2012
- [*Ada 2012 Language Reference Manual*][3] - [*Rationale for Ada 2012*][4] -Ada 2005</description>
    </item>
    
    <item>
      <title>Image d&#39;attribut</title>
      <link>https://www.wikiod.com/fr/ada/image-dattribut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/image-dattribut/</guid>
      <description>Les attributs de sous-type &#39;Image et &#39;Value prendront respectivement une valeur scalaire et une chaîne et ils retourneront respectivement une chaîne et une valeur scalaire. Le résultat de &#39;Image peut être entré dans &#39;Value pour obtenir la valeur d&amp;rsquo;origine. L&amp;rsquo;inverse est également vrai.
L&amp;rsquo;attribut __Scalar_Object__&#39;Image peut être utilisé directement sur les objets (depuis Ada 2012-TC-1).
Syntaxe # fonction Scalar&amp;rsquo;Image (Argument : Scalar&amp;rsquo;Base) return String; fonction Discrete&amp;rsquo;Image (Argument : Discrete&amp;rsquo;Base) return String; fonction Entier&amp;rsquo;Image (Argument : Entier&amp;rsquo;Base) return String; fonction Enumeration&amp;rsquo;Image (Argument : Enumeration&amp;rsquo;Base) return String; fonction Real&amp;rsquo;Image (Argument : Real&amp;rsquo;Base) return String; fonction Numeric&amp;rsquo;Image (Argument : Numeric&amp;rsquo;Base) return String; function Scalar&amp;rsquo;Value (Argument : String) return Scalar&amp;rsquo;Base; fonction Discrete&amp;rsquo;Value (Argument : String) return Discrete&amp;rsquo;Base; function Integer&amp;rsquo;Value (Argument : String) return Integer&amp;rsquo;Base; function Enumeration&amp;rsquo;Value (Argument : String) return Enumeration&amp;rsquo;Base; fonction Real&amp;rsquo;Value (Argument : String) return Real&amp;rsquo;Base; fonction Scalar_Object&amp;lsquo;Image return String ; Notez que &#39;Image peut entraîner des résultats définis par l&amp;rsquo;implémentation (RM 3.</description>
    </item>
    
    <item>
      <title>Mise en œuvre du modèle producteur-consommateur</title>
      <link>https://www.wikiod.com/fr/ada/mise-en-uvre-du-modele-producteur-consommateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/mise-en-uvre-du-modele-producteur-consommateur/</guid>
      <description>Une démonstration de la façon dont le modèle producteur-consommateur est mis en œuvre dans Ada.
Syntaxe # fonction Scalar&amp;rsquo;[Image][1] (Argument : Scalar&amp;rsquo;Base) return String; [tâche][2] Nom_Tâche ; [task][2] Task_Name correspond à la fin des entrées ; [task][2] body Task_Name est Déclarations begin Code end ; entrée Entry_Name ; accepter Entry_Name ; sortir; [1] : https://www.wikiod.com/fr/ada/image-dattribut [2] : https://www.wikiod.com/fr/ada/tache
Les exemples devraient tous garantir une fin de tâche appropriée.
Pattern Producteur-Consommateur utilisant le mécanisme Ada Rendezvous # Une solution producteur-consommateur synchrone garantit que le consommateur lit chaque élément de données écrit par le producteur exactement une fois.</description>
    </item>
    
    <item>
      <title>Énumération</title>
      <link>https://www.wikiod.com/fr/ada/enumeration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/enumeration/</guid>
      <description>Syntaxe # function Enumeration&amp;rsquo;[Image][1] (Argument : Enumeration&amp;rsquo;Base) return String; function Enumeration&amp;rsquo;[Img][2] return String ; &amp;ndash; GNAT function Enumeration&amp;rsquo;Val (Argument : Universal_Integer) return Enumeration&amp;rsquo;Base; fonction Enumeration&amp;rsquo;Pos (Argument : Enumeration&amp;rsquo;Base) return Universal_Integer; fonction Enumeration&amp;rsquo;Enum_Rep (Argument : Enumeration&amp;rsquo;Base) return Universal_Integer; la fonction Literal&amp;lsquo;Enum_Rep renvoie Universal_Integer ; &amp;ndash; GNAT fonction Literal&amp;lsquo;Address return System.Address ; pour l&amp;rsquo;utilisation de l&amp;rsquo;énumération (Literal_1 =&amp;gt; Universal_Integer, Literal_n =&amp;gt; Universal_Integer); (Literal in Enumeration) return Boolean ; [1] : https://www.wikiod.com/fr/ada/image-dattribut [2] : https://www.</description>
    </item>
    
    <item>
      <title>Fichiers et flux d&#39;ES</title>
      <link>https://www.wikiod.com/fr/ada/fichiers-et-flux-des/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/fichiers-et-flux-des/</guid>
      <description>La bibliothèque standard Ada fournit des E/S de fichiers traditionnels de texte ou de données binaires, ainsi que des E/S de fichiers diffusés en continu. Les fichiers de données binaires seront des séquences de valeurs d&amp;rsquo;un type, tandis que les fichiers de flux peuvent être des séquences de valeurs de types éventuellement différents.
Pour lire et écrire des éléments de différents types depuis/vers des fichiers de flux, Ada utilise des sous-programmes désignés par des attributs de types, à savoir &#39;Read, &#39;Write, &#39;Input et &#39;Output.</description>
    </item>
    
    <item>
      <title>Tâche</title>
      <link>https://www.wikiod.com/fr/ada/tache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/tache/</guid>
      <description>Syntaxe # tâche Task_Name ; la tâche Nom_Tâche correspond à la fin des entrées ; le corps de la tâche Task_Name est Déclarations begin Code end ; Une tâche simple # with Ada.Text_IO; use Ada.Text_IO; procedure Main is task My_Task; task body My_Task is begin Put_Line (&amp;quot;Hello from My_Task&amp;quot;); end; begin Put_Line (&amp;quot;Hello from Main&amp;quot;); end; Résultat # L&amp;rsquo;ordre de Put_Line peut varier.
Hello from My_Task Hello from Main Une tâche simple et une boucle # with Ada.</description>
    </item>
    
    <item>
      <title>package Ada.Text_IO</title>
      <link>https://www.wikiod.com/fr/ada/package-adatext_io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/package-adatext_io/</guid>
      <description>Le package Ada.Text_IO est utilisé pour mettre du texte ou obtenir du texte à partir de fichiers ou de la console.
Put_Line # Imprime une chaîne avec une nouvelle ligne.
with Ada.Text_IO; procedure Put_Text is use Ada.Text_IO; S : String := &amp;quot;Hello&amp;quot;; begin Put_Line (&amp;quot;Hello&amp;quot;); Put_Line (Standard_Output, &amp;quot;Hello&amp;quot;); Put_Line (Standard_Error, &amp;quot;Hello error&amp;quot;); Put_Line (S &amp;amp; &amp;quot; World&amp;quot;); end; Résultat # Hello Hello Hello error Hello World </description>
    </item>
    
    <item>
      <title>Paquets</title>
      <link>https://www.wikiod.com/fr/ada/paquets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/paquets/</guid>
      <description>Syntaxe # avec Package_Name_To_Include ; le package New_Package_Name renomme Package_To_Rename ; utilisez Package_Name ; le package Parent_Name.Child_Name est Le forfait fournit :
Encapsulation de code Compilation séparée Masquer les procédures, les fonctions, les opérateurs sur les types privés Similitudes ou analogues dans d&amp;rsquo;autres langues :
[espace de noms C++][1] [Packages Java][2] [1] : https://www.wikiod.com/fr/docs/c%2B%2B/495/namespaces#t=201610081130053983861 [2] : https://www.wikiod.com/fr/java
En savoir plus sur les forfaits # Dans [Hello World][1], vous avez découvert le package &amp;ldquo;Ada.</description>
    </item>
    
    <item>
      <title>Types paramétrés</title>
      <link>https://www.wikiod.com/fr/ada/types-parametres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/types-parametres/</guid>
      <description>Tous les types composites autres que les tableaux peuvent avoir des discriminants, qui sont des composants avec des propriétés spéciales. Les discriminants peuvent être de type discret ou de type accès. Dans ce dernier cas, le type d&amp;rsquo;accès peut être un type d&amp;rsquo;accès nommé ou il peut être anonyme. Un discriminant de type accès anonyme est appelé discriminant d&amp;rsquo;accès par analogie avec un paramètre d&amp;rsquo;accès.
Types d&amp;rsquo;enregistrements discriminés # Dans le cas d&amp;rsquo;un type d&amp;rsquo;enregistrement discriminé, certains des composants sont connus comme discriminants et les composants restants peuvent en dépendre.</description>
    </item>
    
    <item>
      <title>Types scalaires</title>
      <link>https://www.wikiod.com/fr/ada/types-scalaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ada/types-scalaires/</guid>
      <description>Dans la hiérarchie des types d&amp;rsquo;Ada, les types élémentaires ont des ensembles de valeurs logiquement indivisibles. Parmi ces types figurent les types d&amp;rsquo;accès (types pointeurs) et les types scalaires. Les types scalaires peuvent être classés comme énumération, caractère et numérique. Ces types font l&amp;rsquo;objet de cette rubrique. En plus des ensembles de valeurs, les types ont un ensemble d&amp;rsquo;opérations applicables aux scalaires respectifs, comme successeur, ou &amp;quot;+&amp;quot;.
Syntaxe # type … est … Paramètres # Points de suspension Quoi … (1) recevoir le nom du type … (2) pour recevoir les caractéristiques du type à l&amp;rsquo;aide des mots clés : delta, digits, range Toutes les définitions de type scalaire, à l&amp;rsquo;exception de l&amp;rsquo;énumération et des entiers modulaires, peuvent inclure une contrainte de plage.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel POSIX on </title>
    <link>https://www.wikiod.com/fr/docs/posix/</link>
    <description>Recent content in Tutoriel POSIX on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/posix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec POSIX</title>
      <link>https://www.wikiod.com/fr/posix/premiers-pas-avec-posix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/premiers-pas-avec-posix/</guid>
      <description>Qu&amp;rsquo;est-ce que POSIX ? # POSIX signifie &amp;ldquo;Portable Operating System Interface&amp;rdquo; et définit un ensemble de normes pour assurer la compatibilité entre différentes plates-formes informatiques. La version actuelle de la norme est IEEE 1003.1 2016 et est accessible depuis OpenGroup [spécification POSIX] (http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm). Les versions précédentes incluent POSIX 2004 et POSIX 1997. L&amp;rsquo;édition POSIX 2016 est essentiellement POSIX 2008 plus les errata (il y avait aussi une version POSIX 2013).</description>
    </item>
    
    <item>
      <title>Minuteries</title>
      <link>https://www.wikiod.com/fr/posix/minuteries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/minuteries/</guid>
      <description>Minuterie POSIX avec notification SIGEV_THREAD # Cet exemple illustre l&amp;rsquo;utilisation de la minuterie POSIX avec l&amp;rsquo;horloge CLOCK_REALTIME et la méthode de notification SIGEV_THREAD.
#include &amp;lt;stdio.h&amp;gt; /* for puts() */ #include &amp;lt;string.h&amp;gt; /* for memset() */ #include &amp;lt;unistd.h&amp;gt; /* for sleep() */ #include &amp;lt;stdlib.h&amp;gt; /* for EXIT_SUCCESS */ #include &amp;lt;signal.h&amp;gt; /* for `struct sigevent` and SIGEV_THREAD */ #include &amp;lt;time.h&amp;gt; /* for timer_create(), `struct itimerspec`, * timer_t and CLOCK_REALTIME */ void thread_handler(union sigval sv) { char *s = sv.</description>
    </item>
    
    <item>
      <title>Prises</title>
      <link>https://www.wikiod.com/fr/posix/prises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/prises/</guid>
      <description>Serveur d&amp;rsquo;écho simultané TCP # Dans cet exemple, nous allons créer un serveur d&amp;rsquo;écho simple qui écoutera sur le port spécifié et pourra gérer les nouvelles connexions :
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;time.h&amp;gt; /** Connection handler - this will be executed in the new process, after forking, and it will read all the data from the socket, while available and to echo it on the local terminal.</description>
    </item>
    
    <item>
      <title>Fils</title>
      <link>https://www.wikiod.com/fr/posix/fils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/fils/</guid>
      <description>Utilisation mutex simple # La bibliothèque de threads POSIX fournit l&amp;rsquo;implémentation de la primitive mutex, utilisée pour l&amp;rsquo;exclusion mutuelle. Le mutex est créé à l&amp;rsquo;aide de [pthread_mutex_init][1] et détruit à l&amp;rsquo;aide de [pthread_mutex_destroy][1]. L&amp;rsquo;obtention d&amp;rsquo;un mutex peut être effectuée en utilisant [pthread_mutex_lock][2] ou [pthread_mutex_trylock][2], (selon si le délai d&amp;rsquo;attente est souhaité) et la libération d&amp;rsquo;un mutex se fait via [pthread_mutex_unlock][2].
Un exemple simple utilisant un mutex pour sérialiser l&amp;rsquo;accès à la section critique suit.</description>
    </item>
    
    <item>
      <title>Signaux</title>
      <link>https://www.wikiod.com/fr/posix/signaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/signaux/</guid>
      <description>Syntaxe # alarme non signée (secondes non signées); int kill(pid_t pid, int sig); Paramètres # Fonction, paramètre(s), valeur de retour Descriptif alarme() nom de la fonction secondes non signées Secondes pour déclencher une alarme ou 0 pour annuler toute alarme en attente &amp;gt;= 0 0 si aucune autre alarme n&amp;rsquo;était en attente, sinon le nombre de secondes pendant lesquelles l&amp;rsquo;alarme en attente était encore ouverte. Cette fonction n&amp;rsquo;échouera pas. - - tuer() nom de la fonction pid_t pid .</description>
    </item>
    
    <item>
      <title>Processus</title>
      <link>https://www.wikiod.com/fr/posix/processus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/processus/</guid>
      <description>Syntaxe # pid_t getpid(void); pid_t getppid(void); fourche pid_t (vide); pid_t waitpid(pid_t pid, int *wstatus, int options); int execv(const char *path, char *const argv[]); Paramètres # Fonction, paramètre(s), valeur de retour Descriptif fork() nom de la fonction aucun n/a Renvoie PID, 0 ou -1 Le processus appelant reçoit le PID du processus nouvellement créé ou -1 en cas d&amp;rsquo;échec. L&amp;rsquo;enfant (le processus nouvellement créé) reçoit 0. En cas d&amp;rsquo;échec, définissez errno sur EAGAIN ou ENOMEM - - execv() nom de la fonction const char *path Chaîne contenant le nom de l&amp;rsquo;exécutable (peut inclure le chemin) char *const argv[] Tableau de pointeur de chaîne comme arguments Retourne -1 en cas d&amp;rsquo;échec En cas de succès, cette fonction ne revient pas.</description>
    </item>
    
    <item>
      <title>Système de fichiers</title>
      <link>https://www.wikiod.com/fr/posix/systeme-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/systeme-de-fichiers/</guid>
      <description>Supprimer les fichiers de manière récursive (nftw, non thread-safe) # #define _XOPEN_SOURCE 500 #include &amp;lt;stdlib.h&amp;gt; /* for exit() */ #include &amp;lt;stdio.h&amp;gt; /* for remove() */ #include &amp;lt;ftw.h&amp;gt; /* for nftw() */ int unlink_cb( const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf) { return remove(fpath); } int rm_rf(const char *path) { return nftw(path, unlink_cb, 64 /* number of simultaneously opened fds, up to OPEN_MAX */, FTW_DEPTH | FTW_PHYS); } Le drapeau FTW_PHYS signifie ne pas suivre les liens symboliques</description>
    </item>
    
    <item>
      <title>Tuyaux</title>
      <link>https://www.wikiod.com/fr/posix/tuyaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/tuyaux/</guid>
      <description>Les tubes sont un mécanisme de communication unidirectionnelle interprocessus ou interthread dans le cadre d&amp;rsquo;une seule machine. Logiquement, un tube se compose de deux terminaisons connectées, une sur laquelle les données peuvent être écrites et une autre à partir de laquelle ces données peuvent ensuite être lues, avec un tampon de données entre les écritures et les lectures qui ne doivent pas nécessairement être synchrones. Les tuyaux doivent être distingués des shell pipelines, qui sont une application des tuyaux.</description>
    </item>
    
    <item>
      <title>Verrous de fichiers</title>
      <link>https://www.wikiod.com/fr/posix/verrous-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/verrous-de-fichiers/</guid>
      <description>Syntaxe # int fcntl(int fd, int cmd, struct flock*); int lockf(int fd, int cmd, off_t len); Verrouillage des enregistrements POSIX (fcntl) # Cet exemple illustre l&amp;rsquo;utilisation des verrous d&amp;rsquo;enregistrement POSIX (également appelés verrous associés au processus), fournis par la fonction [fcntl][1] (norme de base POSIX).
Remarques:
Les verrous exclusifs et partagés sont pris en charge. Peut être appliqué à une plage d&amp;rsquo;octets, éventuellement en expansion automatique lorsque les données sont ajoutées à l&amp;rsquo;avenir (contrôlées par struct flock).</description>
    </item>
    
    <item>
      <title>Multiplexage entréesortie</title>
      <link>https://www.wikiod.com/fr/posix/multiplexage-entreesortie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/posix/multiplexage-entreesortie/</guid>
      <description>Les E/S peuvent être bloquantes/non bloquantes et synchrones/asynchrones. L&amp;rsquo;API POSIX fournit une API de blocage synchrone (par exemple, des appels classiques de lecture, d&amp;rsquo;écriture, d&amp;rsquo;envoi, de réception), une API synchrone non bloquante (mêmes fonctions, descripteurs de fichiers ouverts avec le drapeau O_NONBLOCK et des appels de multiplexage IO) et une API asynchrone (fonctions commençant par aio_).
L&amp;rsquo;API synchrone est généralement utilisée avec le style &amp;ldquo;un thread/processus par fd&amp;rdquo;. C&amp;rsquo;est terrible pour les ressources.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel de tri on </title>
    <link>https://www.wikiod.com/fr/docs/sorting/</link>
    <description>Recent content in Tutoriel de tri on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sorting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Initiation au tri</title>
      <link>https://www.wikiod.com/fr/sorting/initiation-au-tri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sorting/initiation-au-tri/</guid>
      <description>Installation ou configuration # Instructions détaillées sur la configuration ou l&amp;rsquo;installation du tri.</description>
    </item>
    
    <item>
      <title>Sélection</title>
      <link>https://www.wikiod.com/fr/sorting/selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sorting/selection/</guid>
      <description>En informatique, un tri par sélection est un algorithme de tri, en particulier un tri par comparaison sur place. Il a une complexité temporelle O(n2), ce qui le rend inefficace sur les grandes listes, et fonctionne généralement moins bien que le tri par insertion similaire. Le tri par sélection est réputé pour sa simplicité et présente des avantages en termes de performances par rapport à des algorithmes plus compliqués dans certaines situations, en particulier lorsque la mémoire auxiliaire est limitée.</description>
    </item>
    
    <item>
      <title>Tri rapide</title>
      <link>https://www.wikiod.com/fr/sorting/tri-rapide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sorting/tri-rapide/</guid>
      <description>##Python L&amp;rsquo;image ci-dessous montre le fonctionnement d&amp;rsquo;un tri rapide.
[![entrez la description de l&amp;rsquo;image ici][1]][1]
L&amp;rsquo;exemple ci-dessous montre le programme de travail pour le tri rapide en python :
def quickSort(alist): quickSortHelper(alist,0,len(alist)-1) def quickSortHelper(alist,first,last): if first&amp;lt;last: splitpoint = partition(alist,first,last) quickSortHelper(alist,first,splitpoint-1) quickSortHelper(alist,splitpoint+1,last) def partition(alist,first,last): pivotvalue = alist[first] leftmark = first+1 rightmark = last done = False while not done: while leftmark &amp;lt;= rightmark and alist[leftmark] &amp;lt;= pivotvalue: leftmark = leftmark + 1 while alist[rightmark] &amp;gt;= pivotvalue and rightmark &amp;gt;= leftmark: rightmark = rightmark -1 if rightmark &amp;lt; leftmark: done = True else: temp = alist[leftmark] alist[leftmark] = alist[rightmark] alist[rightmark] = temp temp = alist[first] alist[first] = alist[rightmark] alist[rightmark] = temp return rightmark alist = [54,26,93,17,77,31,44,55,20] print(&amp;quot;Input:&amp;quot;) print(alist) quickSort(alist) print(&amp;quot;Output:&amp;quot;) print(alist) Ci-dessous la sortie du code :</description>
    </item>
    
  </channel>
</rss>

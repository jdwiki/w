<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-Boot Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/spring-boot/</link>
    <description>Recent content in Spring-Boot Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Spring Boot</title>
      <link>https://www.wikiod.com/fr/spring-boot/premiers-pas-avec-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/premiers-pas-avec-spring-boot/</guid>
      <description>Installation ou configuration # L&amp;rsquo;installation avec Spring Boot pour la première fois est assez rapide grâce au travail acharné de la communauté Spring.
Conditions préalables:
Java installé Java IDE Recommandé non requis (Intellij, Eclipse, Netbeans, etc.) Vous n&amp;rsquo;avez pas besoin d&amp;rsquo;avoir installé Maven et/ou Gradle. Les projets générés par le [Spring Initializr][1] sont livrés avec un Maven Wrapper (commande mvnw) ou Gradle Wrapper (commande gradlew).
Ouvrez votre navigateur Web sur https://start.</description>
    </item>
    
    <item>
      <title>Création et utilisation de plusieurs fichiers application.properties</title>
      <link>https://www.wikiod.com/fr/spring-boot/creation-et-utilisation-de-plusieurs-fichiers-applicationproperties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/creation-et-utilisation-de-plusieurs-fichiers-applicationproperties/</guid>
      <description>Environnement de développement et de production utilisant différentes sources de données # Après avoir configuré avec succès l&amp;rsquo;application Spring-Boot, toute la configuration est gérée dans un fichier application.properties. Vous trouverez le fichier dans src/main/resources/.
Normalement, il est nécessaire d&amp;rsquo;avoir une base de données derrière l&amp;rsquo;application. Pour le développement, il est bon d&amp;rsquo;avoir une configuration d&amp;rsquo;environnements dev et prod. En utilisant plusieurs fichiers application.properties, vous pouvez indiquer à Spring-Boot avec quel environnement l&amp;rsquo;application doit démarrer.</description>
    </item>
    
    <item>
      <title>Services REST</title>
      <link>https://www.wikiod.com/fr/spring-boot/services-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/services-rest/</guid>
      <description>Paramètres # Annotation Colonne @Contrôleur Indique qu&amp;rsquo;une classe annotée est un &amp;ldquo;Controller&amp;rdquo; (contrôleur web). @RequestMapping Annotation pour le mappage des requêtes Web sur des classes de gestionnaire spécifiques (si nous avons utilisé avec la classe) et/ou des méthodes de gestionnaire (si nous avons utilisé avec des méthodes). méthode = RequestMethod.GET Type de méthodes de requête HTTP ResponseBody L&amp;rsquo;annotation indiquant qu&amp;rsquo;une valeur de retour de méthode doit être liée au corps de la réponse Web @RestController @Controller + ResponseBody @ResponseEntity Extension de HttpEntity qui ajoute un code de statut HttpStatus, nous pouvons contrôler le code http de retour Création d&amp;rsquo;un service REST # Créez un projet à l&amp;rsquo;aide de STS (Spring Starter Project) ou de Spring Initializr (sur https://start.</description>
    </item>
    
    <item>
      <title>Numérisation de colis</title>
      <link>https://www.wikiod.com/fr/spring-boot/numerisation-de-colis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/numerisation-de-colis/</guid>
      <description>Dans cette rubrique, je présenterai l&amp;rsquo;analyse du package de démarrage Spring.
Vous pouvez trouver des informations de base dans les documents de démarrage de printemps dans le lien suivant ([using-boot-structuring-your-code](http://docs.spring.io/spring-boot/docs/current/reference/html/using -boot-structuring-your-code.html)) mais je vais essayer de fournir des informations plus détaillées.
Spring boot, et spring en général, fournissent une fonctionnalité permettant d&amp;rsquo;analyser automatiquement les packages à la recherche de certaines annotations afin de créer des beans et une configuration.
Paramètres # Annotation Détails @SpringBootApplication Annotation principale de l&amp;rsquo;application de démarrage du printemps.</description>
    </item>
    
    <item>
      <title>Tester dans Spring Boot</title>
      <link>https://www.wikiod.com/fr/spring-boot/tester-dans-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/tester-dans-spring-boot/</guid>
      <description>Comment tester une application Spring Boot simple # Nous avons un exemple d&amp;rsquo;application de démarrage Spring qui stocke les données utilisateur dans MongoDB et nous utilisons les services Rest pour récupérer les données
Il y a d&amp;rsquo;abord une classe de domaine, c&amp;rsquo;est-à-dire POJO
@Document public class User{ @Id private String id; private String name; } Un référentiel correspondant basé sur Spring Data MongoDB
public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; { } Ensuite, notre contrôleur d&amp;rsquo;utilisateur</description>
    </item>
    
    <item>
      <title>Mise en cache avec Redis à l&#39;aide de Spring Boot pour MongoDB</title>
      <link>https://www.wikiod.com/fr/spring-boot/mise-en-cache-avec-redis-a-laide-de-spring-boot-pour-mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/mise-en-cache-avec-redis-a-laide-de-spring-boot-pour-mongodb/</guid>
      <description>Pourquoi mettre en cache ? # Aujourd&amp;rsquo;hui, la performance est l&amp;rsquo;une des mesures les plus importantes que nous devons évaluer lors du développement d&amp;rsquo;un service Web / d&amp;rsquo;une application. Garder les clients engagés est essentiel pour tout produit et pour cette raison, il est extrêmement important d&amp;rsquo;améliorer les performances et de réduire les temps de chargement des pages.
Lors de l&amp;rsquo;exécution d&amp;rsquo;un serveur Web qui interagit avec une base de données, ses opérations peuvent devenir un goulot d&amp;rsquo;étranglement.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Spring Data JPA</title>
      <link>https://www.wikiod.com/fr/spring-boot/spring-boot--spring-data-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/spring-boot--spring-data-jpa/</guid>
      <description>[Spring Boot] [1] facilite la création d&amp;rsquo;applications et de services de production alimentés par Spring avec un minimum de tracas. Il privilégie la convention à la configuration.
[Spring Data JPA][2], qui fait partie de la grande famille [Spring Data][3], facilite la mise en œuvre de référentiels basés sur JPA. Il facilite la création d&amp;rsquo;applications qui utilisent des technologies d&amp;rsquo;accès aux données.
[1] : https://projects.spring.io/spring-boot/ [2] : http://projects.spring.io/spring-data-jpa/ [3] : http://projects.spring.io/spring-data/</description>
    </item>
    
    <item>
      <title>Application Web Spring Boot entièrement réactive avec JHipster</title>
      <link>https://www.wikiod.com/fr/spring-boot/application-web-spring-boot-entierement-reactive-avec-jhipster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/application-web-spring-boot-entierement-reactive-avec-jhipster/</guid>
      <description>Créer une application Spring Boot à l&amp;rsquo;aide de jHipster sur Mac OS # jHipster vous permet de démarrer une application Web Spring Boot avec un back-end API REST et un front-end AngularJS et Twitter Bootstrap.
Plus d&amp;rsquo;informations sur jHipster ici : [Documentation jHipster][1]
Installer l&amp;rsquo;infusion :
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Consultez des informations supplémentaires sur l&amp;rsquo;installation de brew ici : [Installer Brew] [2]
Installer Gradle
Gradle est un système de gestion et de construction de dépendances.</description>
    </item>
    
    <item>
      <title>Démarrage de printemps &#43; JPA &#43; mongoDB</title>
      <link>https://www.wikiod.com/fr/spring-boot/demarrage-de-printemps--jpa--mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/demarrage-de-printemps--jpa--mongodb/</guid>
      <description>Contrôleur client # package org.bookmytickets.controller; import java.util.List; import org.bookmytickets.model.Customer; import org.bookmytickets.repository.CustomerRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = &amp;quot;/customer&amp;quot;) public class CustomerController { @Autowired private CustomerRepository repository; @GetMapping(&amp;quot;&amp;quot;) public List&amp;lt;Customer&amp;gt; selectAll(){ List&amp;lt;Customer&amp;gt; customerList = repository.findAll(); return customerList; } @GetMapping(&amp;quot;/{id}&amp;quot;) public List&amp;lt;Customer&amp;gt; getSpecificCustomer(@PathVariable String id){ return repository.findById(id); } @GetMapping(&amp;quot;/search/lastName/{lastName}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByLastName(@PathVariable String lastName){ return repository.findByLasttName(lastName); } @GetMapping(&amp;quot;/search/firstname/{firstname}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByFirstName(@PathVariable String firstName){ return repository.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Hibernate &#43; Web UI (Thymeleaf)</title>
      <link>https://www.wikiod.com/fr/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</guid>
      <description>Ce fil se concentre sur la création d&amp;rsquo;une application de démarrage à ressort avec le moteur de modèle hibernate et thymyleaf.
Consultez également la [documentation Thymeleaf] (https://www.wikiod.com/fr/thymeleaf)
Configuration de l&amp;rsquo;hibernation # Tout d&amp;rsquo;abord, voyons ce dont nous avons besoin pour configurer correctement Hibernate.
@EnableTransactionManagement et @EnableJpaRepositories - nous voulons une gestion transactionnelle et utiliser des référentiels de données Spring. DataSource - source de données principale de l&amp;rsquo;application. en utilisant h2 en mémoire pour cet exemple.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel nativescript on </title>
    <link>https://www.wikiod.com/fr/docs/nativescript/</link>
    <description>Recent content in Tutoriel nativescript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/nativescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec nativescript</title>
      <link>https://www.wikiod.com/fr/nativescript/premiers-pas-avec-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/premiers-pas-avec-nativescript/</guid>
      <description>Les fenêtres # Assurez-vous que la dernière version de nodeJS LTS est installée Ouvrez l&amp;rsquo;invite de commande et tapez $ npm install -g nativescript Dans l&amp;rsquo;invite de commande, tapez $ @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://www.nativescript.org/setup/win&#39;))&amp;quot; - cela peut prendre un certain temps Pour vérifier que ce qui précède a fonctionné, tapez $ tns doctor dans l&amp;rsquo;invite de commande (votre cmd) S&amp;rsquo;il y a des erreurs, suivez le guide de dépannage Installation ou configuration # Instructions détaillées sur la configuration ou l&amp;rsquo;installation de Nativescript.</description>
    </item>
    
    <item>
      <title>Affichage des données sous forme de liste (à l&#39;aide de Repeater, ListView ou *ngFor pour les applications {N} &#43; Angular-2)</title>
      <link>https://www.wikiod.com/fr/nativescript/affichage-des-donnees-sous-forme-de-liste-a-laide-de-repeater-listview-ou-ngfor-pour-les-applications-n--angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/affichage-des-donnees-sous-forme-de-liste-a-laide-de-repeater-listview-ou-ngfor-pour-les-applications-n--angular-2/</guid>
      <description>Remarque : N&amp;rsquo;utilisez pas le répéteur dans les applications {N}+Angular-2 ! Le *ngRepeat est une directive obsolète dans Angular-2. Lorsque vous devez afficher des modèles d&amp;rsquo;éléments répétés, utilisez la directive structurelle ListView ou *ngFor.
Utilisation de la directive structurelle *ngFor pour afficher les données (nativeScript + Angular-2) # ngfor.component.html
&amp;lt;StackLayout&amp;gt; &amp;lt;Label *ngFor=&amp;quot;let item of items&amp;quot; [text]=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/Label&amp;gt; &amp;lt;/StackLayout&amp;gt; ngfor.component.ts
import { Component } from &amp;quot;@angular/core&amp;quot;; var dataItems = [&amp;quot;data-item 1&amp;quot;, &amp;quot;data-item 2&amp;quot;, &amp;quot;data-item 3&amp;quot;] @Component({ selector: &#39;ngfor-component&#39;, styleUrls:[&amp;quot;.</description>
    </item>
    
    <item>
      <title>Implémentation d&#39;animations dans Nativescript</title>
      <link>https://www.wikiod.com/fr/nativescript/implementation-danimations-dans-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/implementation-danimations-dans-nativescript/</guid>
      <description>Utilisation de la fonction de synchronisation d&amp;rsquo;animation et des propriétés d&amp;rsquo;animation. # pages/main.component.ts
import {Component, ElementRef, ViewChild} from &amp;quot;@angular/core&amp;quot;; import {View} from &amp;quot;ui/core/view&amp;quot;; import {AnimationCurve} from &amp;quot;ui/enums&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;Image #img src=&amp;quot;~/assets/images/user-shape.png&amp;quot;&amp;gt;&amp;lt;/Image&amp;gt; &amp;lt;Button text=&amp;quot;Apply Changes&amp;quot; (tap)=&amp;quot;animateImage()&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;], }) export class MainComponent { @ViewChild(&amp;quot;img&amp;quot;) img: ElementRef; animateImage() { let img = &amp;lt;View&amp;gt;this.img.nativeElement; img.animate({ translate: { x: 0, y: 120 }, duration: 2000, curve: AnimationCurve.easeIn }); } } #extrait pour d&amp;rsquo;autres propriétés d&amp;rsquo;animation</description>
    </item>
    
    <item>
      <title>Modèle de style nativescript</title>
      <link>https://www.wikiod.com/fr/nativescript/modele-de-style-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/modele-de-style-nativescript/</guid>
      <description>Ajouter un exemple de mise en page dans votre application # main.component.ts
import {Component} from &amp;quot;@angular/core&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;TextField hint=&amp;quot;some text&amp;quot;&amp;gt;&amp;lt;/TextField&amp;gt; &amp;lt;Button text=&amp;quot;Click me&amp;quot; class=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;, &amp;quot;pages/main/main.css&amp;quot;] }) export class MainComponent { } Méthode 1 : CSS global # app.css &amp;ndash; S&amp;rsquo;applique globalement à toutes les mises en page.
StackLayout { margin: 10; background-color: white; } .btn, TextField { margin-left: 16; margin-right: 16; } Méthode 2 : CSS spécifique à la plateforme # platform.</description>
    </item>
    
    <item>
      <title>Accéder aux API natives</title>
      <link>https://www.wikiod.com/fr/nativescript/acceder-aux-api-natives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/acceder-aux-api-natives/</guid>
      <description>Écrire du code java en nativescript et l&amp;rsquo;utiliser directement en javascript # Voici l&amp;rsquo;image de la structure du projet dans le studio Android :
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Voici l&amp;rsquo;image de la structure de projet du projet nativescript :
[![entrez la description de l&amp;rsquo;image ici][2]][2]
Comme vous le voyez, ils sont identiques. afin que nous puissions écrire du code java en nativescript comme nous écrivons dans le studio android.</description>
    </item>
    
    <item>
      <title>en utilisant un widget natif</title>
      <link>https://www.wikiod.com/fr/nativescript/en-utilisant-un-widget-natif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/en-utilisant-un-widget-natif/</guid>
      <description>Utilisation de surfaceView dans ng2-TNS-Android : étape par étape # Par exemple, vous souhaitez utiliser surfaceView dans ng2-nativescript. Comme nous n&amp;rsquo;avons pas surfaceView dans nativescript, nous devrions utiliser placeholder.
nous devons d&amp;rsquo;abord importer les exigences :
import {Component} from &amp;quot;@angular/core&amp;quot;; import placeholder = require(&amp;quot;ui/placeholder&amp;quot;); let application= require(&amp;quot;application&amp;quot;); puis ajoutez l&amp;rsquo;espace réservé à votre fichier html :
&amp;lt;Placeholder (creatingView)=&amp;quot;creatingView($event)&amp;quot;&amp;gt;&amp;lt;/Placeholder&amp;gt; Ajoutez cette méthode à votre classe :
public creatingView(args: any) { var nativeView = new android.</description>
    </item>
    
    <item>
      <title>Barre d&#39;état</title>
      <link>https://www.wikiod.com/fr/nativescript/barre-detat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/barre-detat/</guid>
      <description>Masquer/afficher - Android # Il s&amp;rsquo;agit d&amp;rsquo;une barre d&amp;rsquo;état que vous voyez en haut de votre écran avec des icônes de batterie, d&amp;rsquo;horloge&amp;hellip; . [![entrez la description de l&amp;rsquo;image ici][1]][1]
let frame = require(&amp;quot;ui/frame&amp;quot;); Cacher:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN); Spectacle:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_VISIBLE ); [1] : http://i.stack.imgur.com/Ohtul.png
Rendre la barre d&amp;rsquo;état transparente Android # ouvrez APP_Resources/values/styles.xml et ajoutez le
&amp;lt;item name=&amp;quot;android:windowTranslucentStatus&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
in the
&amp;lt;style name=&amp;quot;AppThemeBase&amp;quot; parent=&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt; &amp;lt;/style&amp;gt; section.</description>
    </item>
    
    <item>
      <title>Variables globales</title>
      <link>https://www.wikiod.com/fr/nativescript/variables-globales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/variables-globales/</guid>
      <description>Console # La variable globale console de NativeScript vous permet d&amp;rsquo;imprimer des valeurs sur votre terminal pour le débogage. L&amp;rsquo;utilisation la plus simple consiste à transmettre une valeur à la fonction console.log() :
console.log(&amp;quot;hello world&amp;quot;); L&amp;rsquo;objet console a plusieurs autres méthodes, dont dump(), trace(), assert() et more.
// Prints the state of a full object. console.dump({ firstName: &amp;quot;Native&amp;quot;, lastName: &amp;quot;Script&amp;quot;}); // Prints the current stack trace console.trace(); // Asserts a boolean condition, and prints to the console if the assertion fails.</description>
    </item>
    
    <item>
      <title>implémenter l&#39;interface</title>
      <link>https://www.wikiod.com/fr/nativescript/implementer-linterface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/implementer-linterface/</guid>
      <description>implémenter View.OnLayoutChangeListener dans Nativescript # let playerLayoutChangeListener = new android.view.View.OnLayoutChangeListener( { onLayoutChange : function ( v:View, left:number, top:number, right:number, bottom:number, oldLeft:number, oldTop:number, oldRight:number, oldBottom:number):any { if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) { console.log(&amp;quot;OnLayoutChangeListener&amp;quot;); __this.changeSurfaceLayout(); } } }); créer une surfaceView https://www.wikiod.com/fr/proposed
Ajouter un écouteur :
surfaceView.addOnLayoutChangeListener(playerLayoutChangeListener); supprimer l&amp;rsquo;écouteur :
surfaceView.removeOnLayoutChangeListener(playerLayoutChangeListener); [1] : https://www.wikiod.com/fr/proposed</description>
    </item>
    
    <item>
      <title>Modèle multithread</title>
      <link>https://www.wikiod.com/fr/nativescript/modele-multithread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/nativescript/modele-multithread/</guid>
      <description>Le nouveau moteur chrome v8 est partiellement conforme à ES7. Donc, si nous ajoutons &amp;quot;use strict&amp;quot;; en haut de notre fichier (le typescript le fait lorsque transpile le typescript), nous devons nous assurer que toutes les fonctions qui se trouvent sur la portée globale sont effectivement affectées à la portée globale. nous devrions donc utiliser self.functionName ou global.functionName.
utiliser les travailleurs dans le service angular2 # /app/services/greeting.service.ts :
import { Injectable } from &#39;@angular/core&#39;; import {greetingTypes,request,response} from &#39;.</description>
    </item>
    
  </channel>
</rss>

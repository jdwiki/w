<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel rxjs on </title>
    <link>https://www.wikiod.com/fr/docs/rxjs/</link>
    <description>Recent content in Tutoriel rxjs on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/rxjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec rxjs</title>
      <link>https://www.wikiod.com/fr/rxjs/premiers-pas-avec-rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/premiers-pas-avec-rxjs/</guid>
      <description>Installation ou configuration # Utiliser un CDN : # &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/rxjs/4.1.0/rx.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; // `Rx` is available var one$ = Rx.Observable.of(1); var onesub = one$.subscribe(function (one) { console.log(one); // 1 }); // alternatively: subscribe(console.log) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; CDN si vous utilisez RxJS 5 (RC) :
&amp;lt;script src=&amp;quot;https://npmcdn.com/@reactivex/rxjs@5.0.0-rc.1/dist/global/Rx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Utilisation d&amp;rsquo;un groupeur : # Installez d&amp;rsquo;abord dans votre répertoire de projet avec npm :
npm install rx Ou en utilisant RxJS 5 (RC) :</description>
    </item>
    
    <item>
      <title>Recettes courantes</title>
      <link>https://www.wikiod.com/fr/rxjs/recettes-courantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/recettes-courantes/</guid>
      <description>Une collection de cas d&amp;rsquo;utilisation courants et leur implémentation dans RxJS.
Mise en cache des réponses HTTP # Un cas d&amp;rsquo;utilisation typique de RxJS consiste à créer des requêtes HTTP et à mettre en cache leurs résultats pendant un certain temps. De plus, nous voulons toujours exécuter une seule requête à la fois et partager sa réponse.
Par exemple, le code suivant met en cache 1 élément pour max. 1 000 ms :</description>
    </item>
    
    <item>
      <title>Opérateur PublierRejouer</title>
      <link>https://www.wikiod.com/fr/rxjs/operateur-publierrejouer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/operateur-publierrejouer/</guid>
      <description>Comment fonctionne PublishReplay # Il crée en interne un [ReplaySubject][2] et le rend compatible avec la multidiffusion. La valeur de relecture minimale de ReplaySubject est de 1 émission. Cela se traduit par ce qui suit :
Le premier abonnement déclenchera le publishReplay (1) pour s&amp;rsquo;abonner en interne au flux source et diriger toutes les émissions via le ReplaySubject, mettant en cache efficacement les dernières n (= 1) émissions Si un deuxième abonnement est démarré alors que la source est toujours active, le multicast() nous connectera au même replaySubject et nous recevrons toutes les prochaines émissions jusqu&amp;rsquo;à ce que le flux source se termine.</description>
    </item>
    
    <item>
      <title>Carte opérateur  sélectionner</title>
      <link>https://www.wikiod.com/fr/rxjs/carte-operateur--selectionner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/carte-operateur--selectionner/</guid>
      <description>Syntaxe # Rx.Observable.prototype.map(sélecteur, [thisArg]) Rx.Observable.prototype.select(sélecteur, [thisArg]) Paramètres # Paramètre, Type Détails sélecteur, Fonction ou Objet Fonction de transformation à appliquer à chaque élément source ou à un élément à céder. Si selector est une fonction, elle est appelée avec les informations suivantes : 1. la valeur de l&amp;rsquo;élément, 2. l&amp;rsquo;index de l&amp;rsquo;élément, 3. l&amp;rsquo;objet Observable en cours d&amp;rsquo;abonnement. [thisArg], Tout Objet à utiliser comme &amp;ldquo;this&amp;rdquo; lors de l&amp;rsquo;exécution du prédicat. map et select sont des alias.</description>
    </item>
    
    <item>
      <title>Opérateurs Retry et RetryWhen</title>
      <link>https://www.wikiod.com/fr/rxjs/operateurs-retry-et-retrywhen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/operateurs-retry-et-retrywhen/</guid>
      <description>Retry et RetryWhen peuvent être utilisés pour tenter de récupérer des Observables qui pourraient avoir des erreurs dans leur flux.
Syntaxe # .retry(n : nombre) : Observable n: retry will attempt the source Observable this many times. .retryWhen(reçoit : notificationHandler, le : planificateur) : Observable receives: an Observable of notifications which the use can complete or error. If the &amp;lsquo;receives&amp;rsquo; Observable returns cleanly (completes) the source Observable will be reattempted. If the &amp;lsquo;receives&amp;rsquo; Observable returns an error, the source Observable is aborted.</description>
    </item>
    
    <item>
      <title>Matière</title>
      <link>https://www.wikiod.com/fr/rxjs/matiere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/matiere/</guid>
      <description>Les sujets sont des classes qui se comportent à la fois comme des observables et des observateurs.
http://reactivex.io/documentation/subject.html
Sujet et son état interne # Dans Rx, les sujets ont des états internes qui peuvent contrôler leur comportement.
Un formulaire de cas d&amp;rsquo;utilisation courant Subject l&amp;rsquo;abonne à plusieurs Observables. L&amp;rsquo;exemple suivant crée deux Observables différents et abonne un sujet à chacun d&amp;rsquo;eux. Ensuite, il essaie d&amp;rsquo;imprimer toutes les valeurs qui sont passées par :</description>
    </item>
    
    <item>
      <title>Planificateur</title>
      <link>https://www.wikiod.com/fr/rxjs/planificateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rxjs/planificateur/</guid>
      <description>Utilisation d&amp;rsquo;un TestScheduler pour avancer le temps manuellement # La plupart des opérateurs Rx prennent un planificateur facultatif sur lequel planifier leurs futures itérations. S&amp;rsquo;ils ne sont pas fournis, ils utiliseront leur planificateur configuré par défaut. Fournir un planificateur peut être utile à des fins de test dans lesquelles nous aimons parler de temps virtuel au lieu de temps réel pour la vitesse d&amp;rsquo;exécution des tests.
const scheduler = new Rx.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel asp.net-core on </title>
    <link>https://www.wikiod.com/fr/docs/asp-dotnet-core/</link>
    <description>Recent content in Tutoriel asp.net-core on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/asp-dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec asp.net-core</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/premiers-pas-avec-aspnet-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/premiers-pas-avec-aspnet-core/</guid>
      <description>Installation et configuration # Installation de Visual Studio # Si vous n&amp;rsquo;avez pas installé Visual Studio, vous pouvez [télécharger gratuitement Visual Studio Community Edition ici][1]. Si vous l&amp;rsquo;avez déjà installé, vous pouvez passer à l&amp;rsquo;étape suivante.
Création d&amp;rsquo;une application ASP.NET Core MVC. # Ouvrez Visual Studio. Sélectionnez Fichier &amp;gt; Nouveau projet. Sélectionnez Web sous la langue de votre choix dans la section Modèles sur la gauche. Choisissez un type de projet préféré dans la boîte de dialogue.</description>
    </item>
    
    <item>
      <title>Injection de dépendance</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/injection-de-dependance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/injection-de-dependance/</guid>
      <description>Le noyau Aspnet est construit avec Dependency Injection comme l&amp;rsquo;un de ses concepts de base clés. Il introduit une abstraction de conteneur conforme afin que vous puissiez remplacer celle intégrée par un conteneur tiers de votre choix.
Syntaxe # IServiceCollection.Add(élément ServiceDescriptor); IServiceCollection.AddScoped(Type serviceType); IServiceCollection.AddScoped(Type serviceType, Type implementationType); IServiceCollection.AddScoped(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; implementationFactory); IServiceCollection.AddScoped&amp;lt;TService&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; implementationFactory) IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;(Func&amp;lt;IServiceProvider, TImplementation&amp;gt; implementationFactory) IServiceCollection.AddSingleton(Type serviceType); IServiceCollection.AddSingleton(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; implementationFactory); IServiceCollection.AddSingleton(Type serviceType, Type implementationType); IServiceCollection.</description>
    </item>
    
    <item>
      <title>Limitation de débit</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/limitation-de-debit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/limitation-de-debit/</guid>
      <description>[AspNetCoreRateLimit] [1] est une solution de limitation de débit ASP.NET Core open source conçue pour contrôler le taux de requêtes que les clients peuvent envoyer à une API Web ou à une application MVC en fonction de l&amp;rsquo;adresse IP ou de l&amp;rsquo;ID client.
[1] : https://github.com/stefanprodan/AspNetCoreRateLimit
Limitation du débit basée sur l&amp;rsquo;ID client # Avec le middleware ClientRateLimit, vous pouvez définir plusieurs limites pour différents scénarios, comme autoriser un client à effectuer un nombre maximum d&amp;rsquo;appels dans un intervalle de temps comme par seconde, 15 minutes, etc.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Enregistrez à la fois la demande et la réponse à l&#39;aide du middleware</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/aspnet-core---enregistrez-a-la-fois-la-demande-et-la-reponse-a-laide-du-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/aspnet-core---enregistrez-a-la-fois-la-demande-et-la-reponse-a-laide-du-middleware/</guid>
      <description>Pendant un certain temps, j&amp;rsquo;ai cherché le meilleur moyen de consigner les demandes et les réponses dans un ASP.Net Core. Je développais des services et l&amp;rsquo;une des exigences était d&amp;rsquo;enregistrer la demande avec sa réponse dans un enregistrement de la base de données. Tant de sujets là-bas mais aucun n&amp;rsquo;a fonctionné pour moi. c&amp;rsquo;est soit pour la demande seulement, soit pour la réponse seulement ou tout simplement n&amp;rsquo;a pas fonctionné. Lorsque j&amp;rsquo;ai pu enfin le faire, et que cela avait évolué au cours de mon projet pour améliorer la gestion des erreurs et la journalisation des exceptions, j&amp;rsquo;ai pensé au partage.</description>
    </item>
    
    <item>
      <title>Regroupement et minification</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/regroupement-et-minification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/regroupement-et-minification/</guid>
      <description>Extension Bundler et Minifier # Visual Studio propose également une extension Bundler and Minifier disponible qui est capable de gérer ce processus pour vous. L&amp;rsquo;extension vous permet de sélectionner et de regrouper facilement les fichiers dont vous avez besoin sans écrire une ligne de code.
Construire vos forfaits # Après avoir installé l&amp;rsquo;extension, vous sélectionnez tous les fichiers spécifiques que vous souhaitez inclure dans un bundle et utilisez l&amp;rsquo;option Bundle and Minify Files de l&amp;rsquo;extension :</description>
    </item>
    
    <item>
      <title>Angular2 et .Net Core</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/angular2-et-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/angular2-et-net-core/</guid>
      <description>Tutoriel rapide pour un Angular 2 Hello World ! Application avec .Net Core dans Visual Studio 2015 # Pas:
Créez une application Web .Net Core vide : [![entrez la description de l&amp;rsquo;image ici][1]][1]
Accédez à wwwroot et créez une page html normale appelée Index.html : [![entrez la description de l&amp;rsquo;image ici][2]][2]
Configurez Startup.cs pour accepter les fichiers statiques (cela nécessitera d&amp;rsquo;ajouter la bibliothèque &amp;ldquo;Microsoft.AspNetCore.StaticFiles&amp;rdquo;: &amp;ldquo;1.0.0&amp;rdquo; dans le fichier &amp;ldquo;project.json&amp;rdquo;) : [!</description>
    </item>
    
    <item>
      <title>Configuration de plusieurs environnements</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/configuration-de-plusieurs-environnements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/configuration-de-plusieurs-environnements/</guid>
      <description>Avoir des paramètres d&amp;rsquo;application par environnement # Pour chaque environnement, vous devez créer des fichiers appsettings.{EnvironmentName}.json distincts :
appsettings.Development.json appsettings.Staging.json appsettings.Production.json Ouvrez ensuite le fichier project.json et incluez-les dans &amp;ldquo;include&amp;rdquo; dans la section &amp;ldquo;publishOptions&amp;rdquo;. Ceci répertorie tous les fichiers et dossiers qui seront inclus lors de la publication :
&amp;quot;publishOptions&amp;quot;: { &amp;quot;include&amp;quot;: [ &amp;quot;appsettings.Development.json&amp;quot;, &amp;quot;appsettings.Staging.json&amp;quot;, &amp;quot;appsettings.Production.json&amp;quot; ... ] } La dernière étape. Dans votre classe Startup, ajoutez :
.AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true); dans le constructeur où vous configurez les sources de configuration :</description>
    </item>
    
    <item>
      <title>Localisation</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/localisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/localisation/</guid>
      <description>Localisation à l&amp;rsquo;aide des ressources du langage JSON # Dans ASP.NET Core, il existe plusieurs façons de localiser/globaliser notre application. Il est important de choisir un moyen qui convient à vos besoins. Dans cet exemple, vous verrez comment nous pouvons créer une application ASP.NET Core multilingue qui lit les chaînes spécifiques à la langue à partir de fichiers .json et les stocke en mémoire pour fournir une localisation dans toutes les sections de l&amp;rsquo;application tout en maintenant une haute performance .</description>
    </item>
    
    <item>
      <title>Enregistrement</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/enregistrement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/enregistrement/</guid>
      <description>Ajouter un enregistreur au contrôleur # Au lieu de demander un ILoggerFactory et de créer explicitement une instance de ILogger, vous pouvez demander un ILogger (où T est la classe demandant le journaliseur).
public class TodoController : Controller { private readonly ILogger _logger; public TodoController(ILogger&amp;lt;TodoController&amp;gt; logger) { _logger = logger; } } Utilisation de l&amp;rsquo;enregistreur NLog # [NLog.Extensions.Logging][1] est le fournisseur officiel [NLog][2] pour Microsoft dans .NET Core et ASP.NET Core.</description>
    </item>
    
    <item>
      <title>Envoi d&#39;e-mails dans les applications .Net Core à l&#39;aide de MailKit</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-core/envoi-de-mails-dans-les-applications-net-core-a-laide-de-mailkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-core/envoi-de-mails-dans-les-applications-net-core-a-laide-de-mailkit/</guid>
      <description>Actuellement, .Net Core n&amp;rsquo;inclut pas la prise en charge de l&amp;rsquo;envoi d&amp;rsquo;e-mails tels que &amp;ldquo;System.Net.Mail&amp;rdquo; à partir de .Net. Projet MailKit (qui est disponible sur nuget) est une belle bibliothèque à cet effet.
Mise en œuvre simple pour l&amp;rsquo;envoi d&amp;rsquo;e-mails # using MailKit.Net.Smtp; using MimeKit; using MimeKit.Text; using System.Threading.Tasks; namespace Project.Services { /// Using a static class to store sensitive credentials /// for simplicity. Ideally these should be stored in /// configuration files public static class Constants { public static string SenderName =&amp;gt; &amp;quot;&amp;lt;sender_name&amp;gt;&amp;quot;; public static string SenderEmail =&amp;gt; &amp;quot;&amp;lt;sender_email&amp;gt;&amp;quot;; public static string EmailPassword =&amp;gt; &amp;quot;email_password&amp;quot;; public static string SmtpHost =&amp;gt; &amp;quot;&amp;lt;smtp_host&amp;gt;&amp;quot;; public static int SmtpPort =&amp;gt; &amp;quot;smtp_port&amp;quot;; } public class EmailService : IEmailSender { public Task SendEmailAsync(string recipientEmail, string subject, string message) { MimeMessage mimeMessage = new MimeMessage(); mimeMessage.</description>
    </item>
    
  </channel>
</rss>

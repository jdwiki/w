<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel osgi on </title>
    <link>https://www.wikiod.com/fr/docs/osgi/</link>
    <description>Recent content in Tutoriel osgi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/osgi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec osgi</title>
      <link>https://www.wikiod.com/fr/osgi/premiers-pas-avec-osgi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/osgi/premiers-pas-avec-osgi/</guid>
      <description>Téléchargement et utilisation d&amp;rsquo;Equinox # Téléchargez et extrayez le kit de démarrage OSGi pour votre plate-forme depuis Equinox download page for Neon release.
Démarrez le framework à partir du dossier rt/plugins avec la commande suivante (ou l&amp;rsquo;exécutable rt de votre plate-forme à partir du dossier rt):
rt/plugins$ java -jar org.eclipse.equinox.launcher_1.3.200.v20160318-1642.jar -console osgi&amp;gt; Dans l&amp;rsquo;invite de la console OSGi, vous pouvez gérer les bundles, par exemple :
osgi&amp;gt;ss &amp;quot;Framework is launched.&amp;quot; id State Bundle 0 ACTIVE org.</description>
    </item>
    
    <item>
      <title>Utilisation de l&#39;examen Pax pour tester l&#39;intégration des applications OSGi</title>
      <link>https://www.wikiod.com/fr/osgi/utilisation-de-lexamen-pax-pour-tester-lintegration-des-applications-osgi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/osgi/utilisation-de-lexamen-pax-pour-tester-lintegration-des-applications-osgi/</guid>
      <description>Pax Exam permet de tester des bundles dans un conteneur OSGi (par exemple AEM, Apache Karaf). Pax Exam est généralement utilisé en conjonction avec JUnit.
Commencer # Voici un exemple de test utilisant Pax Exam.
package com.example.project.test; import static org.junit.Assert.*; import static org.ops4j.pax.exam.CoreOptions.*; import javax.inject.Inject; import org.junit.Test; import org.junit.runner.RunWith; import org.ops4j.pax.exam.Configuration; import org.ops4j.pax.exam.Option; import org.ops4j.pax.exam.junit.PaxExam; import org.ops4j.pax.exam.regression.pde.HelloService; import org.ops4j.pax.exam.spi.reactors.*; @RunWith(PaxExam.class) @ExamReactorStrategy(PerMethod.class) public class SampleTest { @Inject private HelloService helloService; @Configuration public Option[] config() { return options( mavenBundle(&amp;quot;com.</description>
    </item>
    
  </channel>
</rss>

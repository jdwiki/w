<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur le cadre de jeu on </title>
    <link>https://www.wikiod.com/fr/docs/playframework/</link>
    <description>Recent content in Tutoriel sur le cadre de jeu on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/playframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le cadre de jeu</title>
      <link>https://www.wikiod.com/fr/playframework/premiers-pas-avec-le-cadre-de-jeu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/premiers-pas-avec-le-cadre-de-jeu/</guid>
      <description>Démarrer avec Play 2.4.x/2.5.x - Windows, Java # Installations # Télécharger et installer:
Java 8 - téléchargez l&amp;rsquo;installation appropriée à partir du site Oracle.
Activator - téléchargez le zip depuis www.playframework.com/download et extrayez les fichiers dans le dossier Play cible, par exemple pour :
c:\Play-2.4.2\activator-dist-1.3.5 sbt - télécharger depuis www.scala-sbt.org.
Définissez les variables d&amp;rsquo;environnement :
JAVA_HOME, par exemple :
c:\Program Files\Java\jdk1.8.0_45 2. PLAY_HOME, par exemple :
c:\Play-2.4.2\activator-dist-1.3.5; 3. SBT_HOME par exemple :</description>
    </item>
    
    <item>
      <title>Injection de dépendance - Java</title>
      <link>https://www.wikiod.com/fr/playframework/injection-de-dependance---java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/injection-de-dependance---java/</guid>
      <description>Injection de dépendances avec Guice - Play 2.4, 2.5 # Guice est le framework d&amp;rsquo;injection de dépendances par défaut (DI supplémentaire) de Play. D&amp;rsquo;autres frameworks peuvent également être utilisés, mais l&amp;rsquo;utilisation de Guice facilite les efforts de développement, car Play s&amp;rsquo;occupe des choses sous le voile.
Injection d&amp;rsquo;API Play # À partir de Play 2.5, plusieurs API, qui étaient statiques dans les versions précédentes, doivent être créées avec DI. Ce sont, par exemple, Configuration, JPAApi, CacheApi, etc.</description>
    </item>
    
    <item>
      <title>Configuration de votre IDE préféré</title>
      <link>https://www.wikiod.com/fr/playframework/configuration-de-votre-ide-prefere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/configuration-de-votre-ide-prefere/</guid>
      <description>IDÉE IntelliJ # Conditions préalables # Intellij IDEA installé (édition Community ou Ultimate) Plugin Scala installé dans IntelliJ Un projet Play standard, créé par exemple avec Activator (activateur new [nomduprojet] play-scala). Ouverture du projet # Ouvrez IntelliJ IDEA Allez dans le menu Fichier &amp;gt; Ouvrir ... &amp;gt; cliquez sur tout le dossier [nomduprojet] &amp;gt; OK Une fenêtre contextuelle s&amp;rsquo;ouvre avec quelques options. Les valeurs par défaut sont assez bonnes dans la plupart des cas, et si vous ne les aimez pas, vous pouvez les changer ailleurs plus tard.</description>
    </item>
    
    <item>
      <title>Tests unitaires</title>
      <link>https://www.wikiod.com/fr/playframework/tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/tests-unitaires/</guid>
      <description>Tests unitaires - Java, Play 2.4,2.5 # Helpers et fakeApplication # La classe Helpers est beaucoup utilisée pour les tests unitaires. Il imite une application Play, simule des requêtes et des réponses HTTP, une session, des cookies - tout ce qui peut être nécessaire pour les tests. Un contrôleur sous test doit être exécuté dans le contexte d&amp;rsquo;une application Play. La méthode Helpers fakeApplication fournit une application pour exécuter des tests.</description>
    </item>
    
    <item>
      <title>Injection de dépendance - Scala</title>
      <link>https://www.wikiod.com/fr/playframework/injection-de-dependance---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/injection-de-dependance---scala/</guid>
      <description>Syntaxe # class MyClassUsingAnother @Inject() (myOtherClassInjected: MyAutreClass) { (&amp;hellip;) } @Classe Singleton MyClassThatShouldBeASingleton (&amp;hellip;) Utilisation de base # Une classe singleton typique :
import javax.inject._ @Singleton class BurgersRepository { // implementation goes here } Une autre classe, nécessitant l&amp;rsquo;accès à la première.
import javax.inject._ class FastFoodService @Inject() (burgersRepository: BurgersRepository){ // implementation goes here // burgersRepository can be used } Enfin un contrôleur utilisant le dernier. Notez que puisque nous n&amp;rsquo;avons pas marqué le FastFoodService comme un singleton, une nouvelle instance de celui-ci est créée à chaque fois qu&amp;rsquo;il est injecté.</description>
    </item>
    
    <item>
      <title>Utilisation du Webservice avec play WSClient</title>
      <link>https://www.wikiod.com/fr/playframework/utilisation-du-webservice-avec-play-wsclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/utilisation-du-webservice-avec-play-wsclient/</guid>
      <description>Lien vers la documentation officielle : https://www.playframework.com/documentation/2.5.x/ScalaWS
Utilisation de base (Scala) # Les requêtes HTTP sont effectuées via la classe WSClient, que vous pouvez utiliser comme paramètre injecté dans vos propres classes.
import javax.inject.Inject import play.api.libs.ws.WSClient import scala.concurrent.{ExecutionContext, Future} class MyClass @Inject() ( wsClient: WSClient )(implicit ec: ExecutionContext){ def doGetRequest(): Future[String] = { wsClient .url(&amp;quot;http://www.google.com&amp;quot;) .get() .map { response =&amp;gt; // Play won&#39;t check the response status, // you have to do it manually if ((200 to 299).</description>
    </item>
    
    <item>
      <title>Java - Bonjour le monde</title>
      <link>https://www.wikiod.com/fr/playframework/java---bonjour-le-monde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/java---bonjour-le-monde/</guid>
      <description>Ce tutoriel est destiné à exécuter Play dans un système Linux/MacOS Créez votre premier projet # Pour créer un nouveau projet, utilisez la commande suivante (HelloWorld est le nom du projet et play-java est le modèle)
$ ~/activator-1.3.10-minimal/bin/activator new HelloWorld play-java Vous devriez obtenir une sortie similaire à celle-ci
Fetching the latest list of templates... OK, application &amp;quot;HelloWorld&amp;quot; is being created using the &amp;quot;play-java&amp;quot; template. To run &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator run To run the test for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator test To run the Activator UI for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator ui Le projet sera créé dans le répertoire en cours (dans ce cas il était mon dossier personnel)</description>
    </item>
    
    <item>
      <title>Travailler avec JSON - Scala</title>
      <link>https://www.wikiod.com/fr/playframework/travailler-avec-json---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/travailler-avec-json---scala/</guid>
      <description>[Documentation officielle][1] [Documentation de l&amp;rsquo;emballage][2]
Vous pouvez utiliser le package play json indépendamment de Play en incluant
&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;play-json_2.11&amp;quot; % &amp;quot;2.5.3&amp;quot; dans votre build.sbt, voir
https://mvnrepository.com/artifact/com.typesafe.play/play-json_2.11 http://stackoverflow.com/questions/19436069/adding-play-json-library-to-sbt [1] : https://www.playframework.com/documentation/2.5.x/ScalaJson [2] : https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.libs.package
Création manuelle d&amp;rsquo;un JSON # Vous pouvez créer manuellement une arborescence d&amp;rsquo;objets JSON (une JsValue)
import play.api.libs.json._ val json = JsObject(Map( &amp;quot;name&amp;quot; -&amp;gt; JsString(&amp;quot;Jsony McJsonface&amp;quot;), &amp;quot;age&amp;quot; -&amp;gt; JsNumber(18), &amp;quot;hobbies&amp;quot; -&amp;gt; JsArray(Seq( JsString(&amp;quot;Fishing&amp;quot;), JsString(&amp;quot;Hunting&amp;quot;), JsString(&amp;quot;Camping&amp;quot;) )) )) Ou avec la syntaxe équivalente plus courte, basée sur quelques conversions implicites :</description>
    </item>
    
    <item>
      <title>Nappe</title>
      <link>https://www.wikiod.com/fr/playframework/nappe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/nappe/</guid>
      <description>Code de démarrage simple # Dans build.sbt, assurez-vous d&amp;rsquo;inclure (ici pour Mysql et PostGreSQL) :
&amp;quot;mysql&amp;quot; % &amp;quot;mysql-connector-java&amp;quot; % &amp;quot;5.1.20&amp;quot;, &amp;quot;org.postgresql&amp;quot; % &amp;quot;postgresql&amp;quot; % &amp;quot;9.3-1100-jdbc4&amp;quot;, &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.1.1&amp;quot;, &amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-slick&amp;quot; % &amp;quot;1.1.1&amp;quot; Dans votre application.conf, ajoutez :
mydb.driverjava=&amp;quot;slick.driver.MySQLDriver$&amp;quot; mydb.driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot; mydb.url=&amp;quot;jdbc:mysql://hostaddress:3306/dbname?zeroDateTimeBehavior=convertToNull&amp;quot; mydb.user=&amp;quot;username&amp;quot; mydb.password=&amp;quot;password&amp;quot; Pour avoir une architecture indépendante du SGBDR, créez un objet comme celui-ci
package mypackage import slick.driver.MySQLDriver import slick.driver.PostgresDriver object SlickDBDriver{ val env = &amp;quot;something here&amp;quot; val driver = env match{ case &amp;quot;postGreCondition&amp;quot; =&amp;gt; PostgresDriver case _ =&amp;gt; MySQLDriver } } lors de la création d&amp;rsquo;un nouveau nouveau modèle :</description>
    </item>
    
    <item>
      <title>Java - Travailler avec JSON</title>
      <link>https://www.wikiod.com/fr/playframework/java---travailler-avec-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/playframework/java---travailler-avec-json/</guid>
      <description>Documentation de jeu : https://www.playframework.com/documentation/2.5.x/JavaJsonActions
Création manuelle de JSON # import play.libs.Json; public JsonNode createJson() { // {&amp;quot;id&amp;quot;: 33, &amp;quot;values&amp;quot;: [3, 4, 5]} ObjectNode rootNode = Json.newObject(); ArrayNode listNode = Json.newArray(); long values[] = {3, 4, 5}; for (long val: values) { listNode.add(val); } rootNode.put(&amp;quot;id&amp;quot;, 33); rootNode.set(&amp;quot;values&amp;quot;, listNode); return rootNode; } Chargement de json à partir d&amp;rsquo;une chaîne/fichier # import play.libs.Json; // (...) Chargement d&amp;rsquo;un fichier depuis votre dossier public # // Note: &amp;quot;app&amp;quot; is an play.</description>
    </item>
    
  </channel>
</rss>

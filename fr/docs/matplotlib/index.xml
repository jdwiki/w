<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel matplotlib on </title>
    <link>https://www.wikiod.com/fr/docs/matplotlib/</link>
    <description>Recent content in Tutoriel matplotlib on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec matplotlib</title>
      <link>https://www.wikiod.com/fr/matplotlib/premiers-pas-avec-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/premiers-pas-avec-matplotlib/</guid>
      <description>Syntaxe impérative vs orientée objet # Matplotlib prend en charge la syntaxe orientée objet et impérative pour le traçage. La syntaxe impérative est intentionnellement conçue pour être très proche de la syntaxe Matlab.
La syntaxe impérative (parfois appelée syntaxe &amp;ldquo;state-machine&amp;rdquo;) émet une chaîne de commandes qui agissent toutes sur la figure ou l&amp;rsquo;axe le plus récent (comme Matlab). La syntaxe orientée objet, quant à elle, agit explicitement sur les objets (figure, axe, etc.</description>
    </item>
    
    <item>
      <title>Palettes de couleurs</title>
      <link>https://www.wikiod.com/fr/matplotlib/palettes-de-couleurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/palettes-de-couleurs/</guid>
      <description>Colormaps perceptuellement uniformes # La palette de couleurs par défaut d&amp;rsquo;origine de MATLAB (remplacée dans la version R2014b) appelée &amp;ldquo;jet&amp;rdquo; est omniprésente en raison de son contraste élevé et de sa familiarité (et était la valeur par défaut de matplotlib pour des raisons de compatibilité). Malgré sa popularité, [les palettes de couleurs traditionnelles présentent souvent des lacunes][1] lorsqu&amp;rsquo;il s&amp;rsquo;agit de représenter les données avec précision. Le changement perçu dans ces palettes de couleurs ne correspond pas aux changements de données ; et une conversion de la palette de couleurs en niveaux de gris (par exemple, en imprimant une figure à l&amp;rsquo;aide d&amp;rsquo;une imprimante noir et blanc) peut entraîner une perte d&amp;rsquo;informations.</description>
    </item>
    
    <item>
      <title>Parcelles multiples</title>
      <link>https://www.wikiod.com/fr/matplotlib/parcelles-multiples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/parcelles-multiples/</guid>
      <description>Syntaxe # Élément de liste Grille de sous-parcelles utilisant une sous-parcelle # [![Grille des sous-parcelles][1]][1]
&amp;quot;&amp;quot;&amp;quot; ================================================================================ CREATE A 2 BY 2 GRID OF SUB-PLOTS WITHIN THE SAME FIGURE. ================================================================================ &amp;quot;&amp;quot;&amp;quot; import matplotlib.pyplot as plt # The data x = [1,2,3,4,5] y1 = [0.59705847, 0.25786401, 0.63213726, 0.63287317, 0.73791151] y2 = [1.19411694, 0.51572803, 1.26427451, 1.26574635, 1.47582302] y3 = [0.86793828, 0.07563408, 0.67670068, 0.78932712, 0.0043694] # 5 more random values y4 = [0.43396914, 0.</description>
    </item>
    
    <item>
      <title>Systèmes de coordonnées</title>
      <link>https://www.wikiod.com/fr/matplotlib/systemes-de-coordonnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/systemes-de-coordonnees/</guid>
      <description>Matplotlib a quatre systèmes de coordonnées distincts qui peuvent être exploités pour faciliter le positionnement de différents objets, par exemple du texte. Chaque système a un objet de transformation correspondant qui transforme les coordonnées de ce système en ce que l&amp;rsquo;on appelle le système de coordonnées d&amp;rsquo;affichage.
Système de coordonnées des données est le système défini par les données sur les axes respectifs. Il est utile lorsque vous essayez de positionner un objet par rapport aux données tracées.</description>
    </item>
    
    <item>
      <title>Animations et traçage interactif</title>
      <link>https://www.wikiod.com/fr/matplotlib/animations-et-tracage-interactif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/animations-et-tracage-interactif/</guid>
      <description>Avec python matplotlib, vous pouvez créer correctement des graphiques animés.
Animation de base avec FuncAnimation # Le package [matplotlib.animation][1] propose des classes pour créer des animations. [FuncAnimation][2] crée des animations en appelant à plusieurs reprises une fonction. Ici, nous utilisons une fonction animate() qui modifie les coordonnées d&amp;rsquo;un point sur le graphique d&amp;rsquo;une fonction sinus.
import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation TWOPI = 2*np.pi fig, ax = plt.</description>
    </item>
    
    <item>
      <title>Intégration avec TeXLaTeX</title>
      <link>https://www.wikiod.com/fr/matplotlib/integration-avec-texlatex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/integration-avec-texlatex/</guid>
      <description>La prise en charge de LaTeX par Matplotlib nécessite une installation LaTeX fonctionnelle, dvipng (qui peut être inclus avec votre installation LaTeX) et Ghostscript (GPL Ghostscript 8.60 ou version ultérieure recommandée). Le support pgf de Matplotlib nécessite une installation LaTeX récente qui inclut les packages TikZ/PGF (tels que TeXLive), de préférence avec XeLaTeX ou LuaLaTeX installé. Insertion de formules TeX dans les tracés # Les formules TeX peuvent être insérées dans le tracé à l&amp;rsquo;aide de la fonction rc</description>
    </item>
    
    <item>
      <title>Légendes</title>
      <link>https://www.wikiod.com/fr/matplotlib/legendes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/legendes/</guid>
      <description>Légende unique partagée sur plusieurs sous-parcelles # Parfois, vous aurez une grille de sous-parcelles, et vous voulez avoir une seule légende qui décrit toutes les lignes pour chacune des sous-parcelles comme dans l&amp;rsquo;image suivante.
[![Image d&amp;rsquo;une seule légende sur plusieurs sous-parcelles][1]][1]
Pour ce faire, vous devrez créer une légende globale pour la figure au lieu de créer une légende au niveau des axes (ce qui créera un légende pour chaque sous-parcelle).</description>
    </item>
    
    <item>
      <title>Graphiques en trois dimensions</title>
      <link>https://www.wikiod.com/fr/matplotlib/graphiques-en-trois-dimensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/graphiques-en-trois-dimensions/</guid>
      <description>Le traçage en trois dimensions dans matplotlib a toujours été un peu compliqué, car le moteur de rendu est intrinsèquement 2d. Le fait que les configurations 3D soient rendues en traçant un morceau 2D après l&amp;rsquo;autre implique qu&amp;rsquo;[il y a souvent des problèmes de rendu][1] liés à la profondeur apparente des objets. Le cœur du problème est que deux objets non connectés peuvent être soit complètement derrière, soit complètement devant l&amp;rsquo;un l&amp;rsquo;autre, ce qui conduit à des artefacts comme le montre la figure ci-dessous de deux anneaux imbriqués (cliquez pour un gif animé) :</description>
    </item>
    
    <item>
      <title>Tracés de base</title>
      <link>https://www.wikiod.com/fr/matplotlib/traces-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/traces-de-base/</guid>
      <description>Nuages ​​de points # Un simple nuage de points # [![entrez la description de l&amp;rsquo;image ici][1]][1]
import matplotlib.pyplot as plt # Data x = [43,76,34,63,56,82,87,55,64,87,95,23,14,65,67,25,23,85] y = [34,45,34,23,43,76,26,18,24,74,23,56,23,23,34,56,32,23] fig, ax = plt.subplots(1, figsize=(10, 6)) fig.suptitle(&#39;Example Of Scatterplot&#39;) # Create the Scatter Plot ax.scatter(x, y, color=&amp;quot;blue&amp;quot;, # Color of the dots s=100, # Size of the dots alpha=0.5, # Alpha/transparency of the dots (1 is opaque, 0 is transparent) linewidths=1) # Size of edge around the dots # Show the plot plt.</description>
    </item>
    
    <item>
      <title>Objets Figures et Axes</title>
      <link>https://www.wikiod.com/fr/matplotlib/objets-figures-et-axes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/matplotlib/objets-figures-et-axes/</guid>
      <description>Création d&amp;rsquo;axes # Il existe deux manières principales de créer un axe dans matplotlib : en utilisant pyplot ou en utilisant l&amp;rsquo;API orientée objet.
Utilisation de pyplot :
import matplotlib.pyplot as plt ax = plt.subplot(3, 2, 1) # 3 rows, 2 columns, the first subplot Utilisation de l&amp;rsquo;API orientée objet :
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(3, 2, 1) La fonction pratique plt.subplots() peut être utilisée pour produire une figure et une collection de sous-parcelles en une seule commande :</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Ruby on </title>
    <link>https://www.wikiod.com/fr/docs/ruby/</link>
    <description>Recent content in Tutoriel du langage Ruby on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage Ruby</title>
      <link>https://www.wikiod.com/fr/ruby/premiers-pas-avec-le-langage-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/premiers-pas-avec-le-langage-ruby/</guid>
      <description>Bonjour le monde # Cet exemple suppose que Ruby est installé.
Placez ce qui suit dans un fichier nommé hello.rb :
puts &#39;Hello World&#39; Depuis la ligne de commande, tapez la commande suivante pour exécuter le code Ruby à partir du fichier source :
$ ruby hello.rb Cela devrait afficher :
Hello World La sortie sera immédiatement affichée sur la console. Les fichiers source Ruby n&amp;rsquo;ont pas besoin d&amp;rsquo;être compilés avant d&amp;rsquo;être exécutés.</description>
    </item>
    
    <item>
      <title>Hachages</title>
      <link>https://www.wikiod.com/fr/ruby/hachages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/hachages/</guid>
      <description>Un hachage est une collection semblable à un dictionnaire de clés uniques et de leurs valeurs. Aussi appelés tableaux associatifs, ils sont similaires aux tableaux, mais là où un tableau utilise des entiers comme index, un hachage vous permet d&amp;rsquo;utiliser n&amp;rsquo;importe quel type d&amp;rsquo;objet. Vous récupérez ou créez une nouvelle entrée dans un Hash en vous référant à sa clé.
Syntaxe # { first_name : &amp;ldquo;Noël&amp;rdquo;, second_name : &amp;ldquo;Edmonds&amp;rdquo; }</description>
    </item>
    
    <item>
      <title>Flux de contrôle</title>
      <link>https://www.wikiod.com/fr/ruby/flux-de-controle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/flux-de-controle/</guid>
      <description>si, elsif, sinon et fin # Ruby propose les expressions if et else attendues pour la logique de branchement, terminées par le mot-clé end :
# Simulate flipping a coin result = [:heads, :tails].sample if result == :heads puts &#39;The coin-toss came up &amp;quot;heads&amp;quot;&#39; else puts &#39;The coin-toss came up &amp;quot;tails&amp;quot;&#39; end En Ruby, les instructions if sont des expressions qui évaluent une valeur, et le résultat peut être assigné à une variable :</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/ruby/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/tableaux/</guid>
      <description>Syntaxe # a = [] # en utilisant un tableau littéral a = Array.new # équivalent à l&amp;rsquo;utilisation d&amp;rsquo;un littéral a = Array.new(5) # crée un tableau de 5 éléments avec la valeur nil. a = Array.new(5, 0) # crée un tableau avec 5 éléments avec la valeur par défaut de 0. Créer un tableau de chaînes # Des tableaux de chaînes peuvent être créés à l&amp;rsquo;aide de la syntaxe percent string de ruby :</description>
    </item>
    
    <item>
      <title>Blocs et Procs et Lambdas</title>
      <link>https://www.wikiod.com/fr/ruby/blocs-et-procs-et-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/blocs-et-procs-et-lambdas/</guid>
      <description>Syntaxe # Proc.nouveau(bloquer) lambda { |args| code } -&amp;gt;(arg1, arg2) { code } objet.to_proc { |single_arg| code } faire |arg, (clé, valeur)| code fin Faites attention à la priorité des opérateurs lorsque vous avez une ligne avec plusieurs méthodes enchaînées, comme :
str = &amp;quot;abcdefg&amp;quot; puts str.gsub(/./) do |match| rand(2).zero? ? match.upcase : match.downcase end Au lieu d&amp;rsquo;afficher quelque chose comme abCDeFg, comme vous vous en doutez, il imprime quelque chose comme #&amp;lt;Enumerator:0x00000000af42b28&amp;gt; &amp;ndash; c&amp;rsquo;est parce que do .</description>
    </item>
    
    <item>
      <title>Modèles de conception et idiomes en Ruby</title>
      <link>https://www.wikiod.com/fr/ruby/modeles-de-conception-et-idiomes-en-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/modeles-de-conception-et-idiomes-en-ruby/</guid>
      <description>Modèle de décorateur # Le modèle de décorateur ajoute un comportement aux objets sans affecter les autres objets de la même classe. Le motif décorateur est une alternative utile à la création de sous-classes.
Créez un module pour chaque décorateur. Cette approche est plus flexible que l&amp;rsquo;héritage car vous pouvez mélanger et faire correspondre les responsabilités dans plus de combinaisons. De plus, comme la transparence permet aux décorateurs d&amp;rsquo;être imbriqués de manière récursive, elle autorise un nombre illimité de responsabilités.</description>
    </item>
    
    <item>
      <title>Des classes</title>
      <link>https://www.wikiod.com/fr/ruby/des-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/des-classes/</guid>
      <description>Syntaxe # nom du cours #un code décrivant le comportement de la classe fin Les noms de classe dans Ruby sont des constantes, donc la première lettre doit être une majuscule.
class Cat # correct end class dog # wrong, throws an error end Constructeur # Une classe ne peut avoir qu&amp;rsquo;un seul constructeur, c&amp;rsquo;est-à-dire une méthode appelée initialize. La méthode est automatiquement invoquée lorsqu&amp;rsquo;une nouvelle instance de la classe est créée.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://www.wikiod.com/fr/ruby/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/exceptions/</guid>
      <description>Une exception est un objet qui représente l&amp;rsquo;occurrence d&amp;rsquo;une condition exceptionnelle. En d&amp;rsquo;autres termes, cela indique que quelque chose s&amp;rsquo;est mal passé.
Dans Ruby, les exceptions sont souvent appelées errors. En effet, la classe de base Exception existe en tant qu&amp;rsquo;élément d&amp;rsquo;objet d&amp;rsquo;exception de niveau supérieur, mais les exceptions d&amp;rsquo;exécution définies par l&amp;rsquo;utilisateur sont généralement StandardError ou ses descendants.
Création d&amp;rsquo;un type d&amp;rsquo;exception personnalisé # Une exception personnalisée est une classe qui étend Exception ou une sous-classe de Exception.</description>
    </item>
    
    <item>
      <title>Méthodes</title>
      <link>https://www.wikiod.com/fr/ruby/methodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/methodes/</guid>
      <description>Les fonctions de Ruby fournissent un code organisé et réutilisable pour effectuer un ensemble d&amp;rsquo;actions. Les fonctions simplifient le processus de codage, évitent la logique redondante et facilitent le suivi du code. Cette rubrique décrit la déclaration et l&amp;rsquo;utilisation des fonctions, des arguments, des paramètres, des déclarations de rendement et de la portée dans Ruby.
Une méthode est un bloc de code nommé, associé à un ou plusieurs objets et généralement identifié par une liste de paramètres en plus du nom.</description>
    </item>
    
    <item>
      <title>Utilisation des gemmes</title>
      <link>https://www.wikiod.com/fr/ruby/utilisation-des-gemmes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby/utilisation-des-gemmes/</guid>
      <description>Installer des gemmes rubis # Ce guide suppose que Ruby est déjà installé. Si vous utilisez Ruby &amp;lt; 1.9 vous devrez [installer RubyGems][1] manuellement car il ne sera pas [inclus nativement][2].
Pour installer une gemme ruby, entrez la commande :
gem install [gemname] Si vous travaillez sur un projet avec une liste de dépendances gem, celles-ci seront répertoriées dans un fichier nommé Gemfile. Pour installer une nouvelle gemme dans le projet, ajoutez la ligne de code suivante dans le Gemfile :</description>
    </item>
    
  </channel>
</rss>

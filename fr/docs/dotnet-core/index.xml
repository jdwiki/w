<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel .net-core on </title>
    <link>https://www.wikiod.com/fr/docs/dotnet-core/</link>
    <description>Recent content in Tutoriel .net-core on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec .net-core</title>
      <link>https://www.wikiod.com/fr/dotnet-core/premiers-pas-avec-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/premiers-pas-avec-net-core/</guid>
      <description>Création d&amp;rsquo;un exemple d&amp;rsquo;application Hello World # Créez un répertoire vide quelque part&amp;hellip;
mkdir HelloWorld cd HelloWorld Utilisez ensuite la technologie d&amp;rsquo;échafaudage intégrée pour créer un échantillon Hello World
dotnet new console -o Cette commande crée deux fichiers :
HelloWorld.csproj décrit les dépendances, les paramètres et le cadre cible du projet Program.cs qui définit le code source du point d&amp;rsquo;entrée principal et de la console émettant &amp;ldquo;Hello World&amp;rdquo;. Si la commande dotnet new échoue, assurez-vous d&amp;rsquo;avoir correctement installé .</description>
    </item>
    
    <item>
      <title>Comprendre System.Runtime par rapport à mscorlib</title>
      <link>https://www.wikiod.com/fr/dotnet-core/comprendre-systemruntime-par-rapport-a-mscorlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/comprendre-systemruntime-par-rapport-a-mscorlib/</guid>
      <description>Chaque bibliothèque et langage de programmation .NET utilise un ensemble de types de données élémentaires tels que System.Int32, System.Object, System.Type ou System.Uri. Ces types de données constituent la base de toutes les autres structures, y compris toutes les bibliothèques .NET écrites sur mesure. Tous ces types sont hébergés dans une bibliothèque de base, qui est soit mscorlib ou System.Runtime.
Les bibliothèques pouvant être utilisées avec .NET Core sont basées sur la bibliothèque principale System.</description>
    </item>
    
    <item>
      <title>Composants et gestion des versions dans .NET Core</title>
      <link>https://www.wikiod.com/fr/dotnet-core/composants-et-gestion-des-versions-dans-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/composants-et-gestion-des-versions-dans-net-core/</guid>
      <description>Ce document couvre les différents composants qui composent une distribution .NET Core et comment ils sont versionnés. Ce document couvre actuellement les versions 1.x.
Comment les composants dans .NET Core sont versionnés.
Composants # .NET Core se compose de plusieurs composants qui sont chacun versionnés indépendamment et peuvent souvent être mélangés et appariés.
Cadre partagé. Celui-ci contient les API et la machine virtuelle et autres services d&amp;rsquo;exécution nécessaires pour exécuter des applications .</description>
    </item>
    
    <item>
      <title>Le global.json</title>
      <link>https://www.wikiod.com/fr/dotnet-core/le-globaljson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/le-globaljson/</guid>
      <description>Le fichier global.json est extrêmement puissant et unique pour les applications .NET Core et ASP.NET Core.
Schéma # [Magasin de schéma :][1]
{ &amp;quot;title&amp;quot;: &amp;quot;JSON schema for the ASP.NET global configuration files&amp;quot;, &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;additionalProperties&amp;quot;: true, &amp;quot;required&amp;quot;: [ &amp;quot;projects&amp;quot; ], &amp;quot;properties&amp;quot;: { &amp;quot;projects&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A list of project folders relative to this file.&amp;quot;, &amp;quot;items&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } }, &amp;quot;packages&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;The location to store packages&amp;quot; }, &amp;quot;sdk&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Specify information about the SDK.</description>
    </item>
    
    <item>
      <title>Construire des bibliothèques avec .NET Core</title>
      <link>https://www.wikiod.com/fr/dotnet-core/construire-des-bibliotheques-avec-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/construire-des-bibliotheques-avec-net-core/</guid>
      <description>Dépendances spécifiques à la plate-forme # Vous pouvez spécifier différentes dépendances pour chaque plate-forme :
&amp;quot;net45&amp;quot;: { &amp;quot;frameworkAssemblies&amp;quot;: { &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } }, &amp;quot;netstandard1.3&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0-rc2&amp;quot; } }, &amp;quot;netstandard1.4&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } } Lorsque ce projet est compilé et compressé, chaque cible de framework utilisera un ensemble différent de dépendances :
net45 (projets ciblant .NET 4.5+) utilisera l&amp;rsquo;assembly System.Linq du GAC.</description>
    </item>
    
    <item>
      <title>.NET Core avec Docker</title>
      <link>https://www.wikiod.com/fr/dotnet-core/net-core-avec-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/net-core-avec-docker/</guid>
      <description>Remplissez avec des exemples d&amp;rsquo;utilisation de Docker sur la plate-forme .NET Core, des images de base officielles pour l&amp;rsquo;application .NET Core et l&amp;rsquo;application .NET Core auto-hébergée.
Exemple de Dockerfile # L&amp;rsquo;application .NET Core doit être publiée à l&amp;rsquo;aide de &amp;ldquo;dotnet publish&amp;rdquo;
FROM microsoft/dotnet:latest COPY bin/Debug/netcoreapp1.0/publish/ /root/ EXPOSE 5000 ENTRYPOINT dotnet /root/sampleapp.dll </description>
    </item>
    
    <item>
      <title>Interface de ligne de commande .NET Core</title>
      <link>https://www.wikiod.com/fr/dotnet-core/interface-de-ligne-de-commande-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/interface-de-ligne-de-commande-net-core/</guid>
      <description>Création d&amp;rsquo;un package NuGet # Pour créer un package NuGet à partir d&amp;rsquo;un projet, exécutez cette commande à partir d&amp;rsquo;un répertoire contenant project.json :
dotnet pack Le fichier .nupkg résultant sera nommé et versionné en fonction des propriétés de project.json. S&amp;rsquo;il existe plusieurs frameworks ciblés dans le fichier de projet, le package les prendra tous en charge.
Publier et exécuter un projet .NET Core # Accédez au répertoire project.json et publiez :</description>
    </item>
    
    <item>
      <title>Installation de .NET Core sous Linux</title>
      <link>https://www.wikiod.com/fr/dotnet-core/installation-de-net-core-sous-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/installation-de-net-core-sous-linux/</guid>
      <description>Installation générique pour les distributions Linux # Si vous possédez l&amp;rsquo;une des distributions Linux prises en charge, vous pouvez suivre les étapes sur le site Web .NET Core : https://www.microsoft.com/net
Si vous avez une distribution non prise en charge :
Téléchargez le .NET Core SDK à partir des liens, en choisissant la distribution la plus proche de celle utilisée.
https://www.microsoft.com/net/download
Si vous avez un support pour les packages deb, vous pouvez installer les packages Ubuntu/Debian.</description>
    </item>
    
    <item>
      <title>Premiers pas avec appsetting.json</title>
      <link>https://www.wikiod.com/fr/dotnet-core/premiers-pas-avec-appsettingjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dotnet-core/premiers-pas-avec-appsettingjson/</guid>
      <description>Si vous avez besoin de plus d&amp;rsquo;informations, vous pouvez aller voir [documentation officielle de Microsoft][1]
[1] : https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration
##Configuration simplifiée Ajoutez ce texte à appsettings.json
{ &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: 2, &amp;quot;subsectionKey&amp;quot;: { &amp;quot;suboption1&amp;quot;: &amp;quot;subvalue1&amp;quot; } } Vous pouvez maintenant utiliser cette configuration dans votre application, de la manière suivante
public class Program { static public IConfigurationRoot Configuration { get; set; } public static void Main(string[] args = null) { var builder = new ConfigurationBuilder() .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Python on </title>
    <link>https://www.wikiod.com/fr/docs/python/</link>
    <description>Recent content in Tutoriel du langage Python on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec le langage Python</title>
      <link>https://www.wikiod.com/fr/python/debuter-avec-le-langage-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/debuter-avec-le-langage-python/</guid>
      <description>Commencer # Python est un langage de programmation de haut niveau largement utilisé pour la programmation à usage général, créé par Guido van Rossum et publié pour la première fois en 1991. Python dispose d&amp;rsquo;un système de type dynamique et d&amp;rsquo;une gestion automatique de la mémoire et prend en charge plusieurs paradigmes de programmation, y compris orienté objet, impératif, la programmation fonctionnelle et les styles procéduraux. Il dispose d&amp;rsquo;une bibliothèque standard vaste et complète.</description>
    </item>
    
    <item>
      <title>Incompatibilités passant de Python 2 à Python 3</title>
      <link>https://www.wikiod.com/fr/python/incompatibilites-passant-de-python-2-a-python-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/incompatibilites-passant-de-python-2-a-python-3/</guid>
      <description>Contrairement à la plupart des langages, Python prend en charge deux versions principales. Depuis la sortie de Python 3 en 2008, beaucoup ont fait la transition, alors que beaucoup ne l&amp;rsquo;ont pas fait. Afin de comprendre les deux, cette section couvre les différences importantes entre Python 2 et Python 3.
Il existe actuellement deux versions de Python prises en charge : 2.7 (Python 2) et 3.6 (Python 3). De plus, les versions 3.</description>
    </item>
    
    <item>
      <title>Générateurs</title>
      <link>https://www.wikiod.com/fr/python/generateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/generateurs/</guid>
      <description>Les générateurs sont des itérateurs paresseux créés par des fonctions génératrices (en utilisant yield) ou des expressions génératrices (en utilisant (an_expression for x in an_iterator)).
Syntaxe # rendement &amp;lt;expr&amp;gt; rendement de &amp;lt;expr&amp;gt; &amp;lt;var&amp;gt; = rendement &amp;lt;expr&amp;gt; suivant(&amp;lt;iter&amp;gt;) Introduction # Les expressions de générateur sont similaires aux compréhensions de liste, de dictionnaire et d&amp;rsquo;ensemble, mais sont mises entre parenthèses. Les parenthèses ne doivent pas nécessairement être présentes lorsqu&amp;rsquo;elles sont utilisées comme seul argument pour un appel de fonction.</description>
    </item>
    
    <item>
      <title>Des classes</title>
      <link>https://www.wikiod.com/fr/python/des-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/des-classes/</guid>
      <description>Python se présente non seulement comme un langage de script populaire, mais prend également en charge le paradigme de la programmation orientée objet. Les classes décrivent les données et fournissent des méthodes pour manipuler ces données, le tout regroupé sous un seul objet. De plus, les classes permettent l&amp;rsquo;abstraction en séparant les détails d&amp;rsquo;implémentation concrets des représentations abstraites des données.
Le code utilisant des classes est généralement plus facile à lire, à comprendre et à entretenir.</description>
    </item>
    
    <item>
      <title>Pièges courants</title>
      <link>https://www.wikiod.com/fr/python/pieges-courants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/pieges-courants/</guid>
      <description>Python est un langage censé être clair et lisible sans aucune ambiguïté ni comportement inattendu. Malheureusement, ces objectifs ne sont pas réalisables dans tous les cas, et c&amp;rsquo;est pourquoi Python a quelques cas particuliers où il pourrait faire quelque chose de différent de ce à quoi vous vous attendiez.
Cette section vous montrera certains problèmes que vous pourriez rencontrer lors de l&amp;rsquo;écriture de code Python.
Multiplication de liste et références communes # Prenons le cas de la création d&amp;rsquo;une structure de liste imbriquée en multipliant :</description>
    </item>
    
    <item>
      <title>Formatage de chaîne</title>
      <link>https://www.wikiod.com/fr/python/formatage-de-chaine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/formatage-de-chaine/</guid>
      <description>Lors du stockage et de la transformation de données visibles par les humains, le formatage des chaînes peut devenir très important. Python offre une grande variété de méthodes de formatage de chaîne décrites dans cette rubrique.
Syntaxe # &amp;ldquo;{}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0:.2f}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{0:.0f}&amp;quot;.format(42.1234) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer:.2f}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{[clé]}&amp;quot;.format({&amp;lsquo;clé&amp;rsquo; : &amp;lsquo;valeur&amp;rsquo;}) ==&amp;gt; &amp;ldquo;valeur&amp;rdquo;
&amp;ldquo;{[1]}&amp;quot;.format([&amp;lsquo;zéro&amp;rsquo;, &amp;lsquo;un&amp;rsquo;, &amp;lsquo;deux&amp;rsquo;]) ==&amp;gt; &amp;ldquo;un&amp;rdquo;
&amp;ldquo;{réponse} = {réponse}&amp;quot;.</description>
    </item>
    
    <item>
      <title>Décorateurs</title>
      <link>https://www.wikiod.com/fr/python/decorateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/decorateurs/</guid>
      <description>Les fonctions de décoration sont des modèles de conception de logiciels. Ils modifient dynamiquement la fonctionnalité d&amp;rsquo;une fonction, d&amp;rsquo;une méthode ou d&amp;rsquo;une classe sans avoir à utiliser directement des sous-classes ou à modifier le code source de la fonction décorée. Lorsqu&amp;rsquo;ils sont utilisés correctement, les décorateurs peuvent devenir des outils puissants dans le processus de développement. Cette rubrique couvre l&amp;rsquo;implémentation et les applications des fonctions de décoration en Python.
Syntaxe # def decorator_function(f): pass # définit un décorateur nommé decorator_function</description>
    </item>
    
    <item>
      <title>Liste des compréhensions</title>
      <link>https://www.wikiod.com/fr/python/liste-des-comprehensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/liste-des-comprehensions/</guid>
      <description>Une compréhension de liste est un outil syntaxique permettant de créer des listes de manière naturelle et concise, comme illustré dans le code suivant pour faire une liste de carrés des nombres de 1 à 10 :
[i ** 2 pour i dans la plage (1,11)]
Le mannequin i d&amp;rsquo;une liste existante range est utilisé pour créer un nouveau motif d&amp;rsquo;élément. Il est utilisé là où une boucle for serait nécessaire dans des langages moins expressifs.</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/python/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/les-fonctions/</guid>
      <description>Les fonctions en Python fournissent un code organisé, réutilisable et modulaire pour effectuer un ensemble d&amp;rsquo;actions spécifiques. Les fonctions simplifient le processus de codage, évitent la logique redondante et rendent le code plus facile à suivre. Cette rubrique décrit la déclaration et l&amp;rsquo;utilisation des fonctions dans Python.
Python a de nombreuses fonctions intégrées comme print(), input(), len(). Outre les fonctions intégrées, vous pouvez également créer vos propres fonctions pour effectuer des tâches plus spécifiques.</description>
    </item>
    
    <item>
      <title>Déstructuration de la liste (alias emballage et déballage)</title>
      <link>https://www.wikiod.com/fr/python/destructuration-de-la-liste-alias-emballage-et-deballage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/python/destructuration-de-la-liste-alias-emballage-et-deballage/</guid>
      <description>Mission de déstructuration # Dans les affectations, vous pouvez diviser un Iterable en valeurs à l&amp;rsquo;aide de la syntaxe &amp;ldquo;unpacking&amp;rdquo;:
Déstructuration en valeurs # a, b = (1, 2) print(a) # Prints: 1 print(b) # Prints: 2 Si vous essayez de décompresser plus que la longueur de l&amp;rsquo;itérable, vous obtiendrez une erreur :
a, b, c = [1] # Raises: ValueError: not enough values to unpack (expected 3, got 1) Déstructuration en liste # Vous pouvez décompresser une liste de longueur inconnue en utilisant la syntaxe suivante :</description>
    </item>
    
  </channel>
</rss>

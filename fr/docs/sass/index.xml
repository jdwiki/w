<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sass on </title>
    <link>https://www.wikiod.com/fr/docs/sass/</link>
    <description>Recent content in Tutoriel sass on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commencer avec sass</title>
      <link>https://www.wikiod.com/fr/sass/commencer-avec-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/commencer-avec-sass/</guid>
      <description>##Variables Si vous avez une valeur que vous utilisez souvent, vous pouvez la stocker dans une variable. Vous pouvez l&amp;rsquo;utiliser pour définir des combinaisons de couleurs, par exemple. Vous n&amp;rsquo;auriez qu&amp;rsquo;à définir votre schéma une seule fois, puis vous pourriez l&amp;rsquo;utiliser dans vos feuilles de style.
Pour définir une variable, vous devez préfixer son nom avec le symbole $. (Comme vous le feriez en PHP.)
Vous pouvez stocker n&amp;rsquo;importe quelle valeur de propriété CSS valide dans une variable.</description>
    </item>
    
    <item>
      <title>SCSS contre Sass</title>
      <link>https://www.wikiod.com/fr/sass/scss-contre-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/scss-contre-sass/</guid>
      <description>Principales différences # Bien que les gens disent souvent Sass comme nom de ce préprocesseur CSS, ils font souvent référence à la syntaxe SCSS. Sass utilise l&amp;rsquo;extension de fichier .sass, tandis que SCSS-Sass utilise l&amp;rsquo;extension .scss. Ils sont tous deux appelés &amp;ldquo;Sass&amp;rdquo;.
D&amp;rsquo;une manière générale, la syntaxe &amp;ldquo;SCSS&amp;rdquo; est plus couramment utilisée. SCSS ressemble à un CSS standard avec plus de fonctionnalités, tandis que Sass est assez différent du CSS standard.</description>
    </item>
    
    <item>
      <title>variables</title>
      <link>https://www.wikiod.com/fr/sass/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/variables/</guid>
      <description>Syntaxe # $nom_variable : valeur ; SCSS # Tout comme dans Sass, les variables SCSS sont utilisées pour stocker une valeur qui sera utilisée plusieurs fois dans un document SCSS.
Les variables sont principalement utilisées pour stocker les valeurs de propriété fréquemment utilisées (telles que les polices et les couleurs), mais peuvent être utilisées pour n&amp;rsquo;importe quelle valeur de n&amp;rsquo;importe quelle propriété.
SCSS utilise le symbole $ pour déclarer une variable.</description>
    </item>
    
    <item>
      <title>Nidification</title>
      <link>https://www.wikiod.com/fr/sass/nidification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/nidification/</guid>
      <description>Imbrication de base # Chaque fois que vous déclarez une nouvelle règle à l&amp;rsquo;intérieur d&amp;rsquo;une autre règle, cela s&amp;rsquo;appelle l&amp;rsquo;imbrication. Avec l&amp;rsquo;imbrication de base, comme indiqué ci-dessous, le sélecteur imbriqué sera compilé comme un nouveau sélecteur CSS avec tous ses parents ajoutés, séparés par un espace.
// SCSS .parent { margin: 1rem; .child { float: left; } } // CSS output .parent { margin: 1rem; } .parent .child { float: left; } Profondeur d&amp;rsquo;imbrication # L&amp;rsquo;imbrication est une fonctionnalité très puissante, mais doit être utilisée avec prudence.</description>
    </item>
    
    <item>
      <title>Boucles et conditions</title>
      <link>https://www.wikiod.com/fr/sass/boucles-et-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/boucles-et-conditions/</guid>
      <description>Boucle tant que # La directive @while effectuera une boucle sur un bloc de code jusqu&amp;rsquo;à ce que la condition spécifiée devienne fausse. Dans l&amp;rsquo;exemple suivant, cette boucle s&amp;rsquo;exécutera jusqu&amp;rsquo;à $font-size &amp;lt;= 18 tout en incrémentant la valeur de $font-size de 2.
$font-size: 12; @while $font-size &amp;lt;= 18 { .font-size-#{$font-size} { font-size: ($font-size * 1px); } $font-size: $font-size + 2; } Sortie du code ci-dessus
.font-size-12 { font-size: 12px; } .</description>
    </item>
    
    <item>
      <title>Partiels et importation</title>
      <link>https://www.wikiod.com/fr/sass/partiels-et-importation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/partiels-et-importation/</guid>
      <description>Importation # L&amp;rsquo;utilisation de @import vous permet de diviser vos fichiers en plusieurs fichiers plus petits. Cela a du sens, car vous pouvez conserver une meilleure structure pour vos feuilles de style et éviter les fichiers très volumineux.
Exemple # Disons que vous avez quelques fichiers.
- application.scss - header.scss - content |-- article.scss &#39;-- list.scss - footer.scss Votre feuille de style principale application.scss peut importer tous les fichiers et définir ses propres styles.</description>
    </item>
    
    <item>
      <title>Les opérateurs</title>
      <link>https://www.wikiod.com/fr/sass/les-operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/les-operateurs/</guid>
      <description>Opérateurs arithmétiques # Sass prend en charge les opérateurs arithmétiques standard suivants :
Opérateur Descriptif + Ajout – Soustraction * Multiplication / Département % Reste Exemples
p { font-size: 16px + 4px; // 20px } h3 { width: 2px * 5 + 12px; // 22px } h2 { width: 8px + (12px / 2) * 3; // 26px } L&amp;rsquo;ordre normal des opérations s&amp;rsquo;applique comme d&amp;rsquo;habitude.
Opérateur d&amp;rsquo;assignation # Sass utilise l&amp;rsquo;opérateur deux-points (:) pour attribuer des valeurs aux variables.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/fr/sass/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/installation/</guid>
      <description>Cela ne couvre que Ruby, qui est le principal compilateur SASS pour de nombreux systèmes, mais d&amp;rsquo;autres options existent. Un très courant pour tout développeur de nœuds serait [node-sass][1] qui pourrait être plus facile, et des ordres de grandeur plus rapides, pour de nombreux utilisateurs.
[1] : https://github.com/sass/node-sass
Mac # Ruby est préinstallé sur un ordinateur Mac.
Suivez les instructions ci-dessous pour installer Sass :
Ouvrez CMD Lancez gem install sass Si vous obtenez un message d&amp;rsquo;erreur, essayez sudo gem install sass Vérifiez que cela fonctionne en utilisant sass -v ##Linux Ruby devra d&amp;rsquo;abord être installé avant l&amp;rsquo;installation.</description>
    </item>
    
    <item>
      <title>Mélanges</title>
      <link>https://www.wikiod.com/fr/sass/melanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/melanges/</guid>
      <description>Syntaxe # @mixin mixin-name ($argument1, $argument, ...){ ... } Mixin avec argument variable # Il y a des cas dans les mixins où il peut y avoir un ou plusieurs arguments lors de son utilisation. Prenons un cas de border-radius où il peut y avoir un seul argument comme border-radius:4px; ou plusieurs arguments comme border-radius:4px 3px 2px 1px;.
Le mélange traditionnel avec des arguments de mots clés sera comme ci-dessous : -</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/sass/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sass/les-fonctions/</guid>
      <description>Syntaxe # @function nom-fonction(paramètre) { /* Corps de la fonction */ } Les fonctions de base # Une fonction ressemble à un mixin mais elle n&amp;rsquo;ajoute aucun style, elle ne renvoie qu&amp;rsquo;une valeur. Les fonctions doivent être utilisées pour éviter la logique répétée dans vos styles.
Sass a quelques fonctions intégrées qui sont appelées en utilisant la syntaxe de fonction CSS standard.
h1 { background: hsl(0, 25%, 50%); } Les fonctions sont déclarées en utilisant la syntaxe ci-dessous,</description>
    </item>
    
  </channel>
</rss>

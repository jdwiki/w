<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel linq on </title>
    <link>https://www.wikiod.com/fr/docs/linq/</link>
    <description>Recent content in Tutoriel linq on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/linq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec linq</title>
      <link>https://www.wikiod.com/fr/linq/demarrer-avec-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/linq/demarrer-avec-linq/</guid>
      <description>Installer # LINQ nécessite .NET 3.5 ou supérieur (ou .NET 2.0 en utilisant LINQBridge).
Ajoutez une référence à System.Core, si elle n&amp;rsquo;a pas encore été ajoutée.
En haut du fichier, importez l&amp;rsquo;espace de noms :
*C#
using System; using System.Linq; VB.NET Imports System.Linq Les différentes jointures dans LINQ # Dans les exemples suivants, nous utiliserons les exemples suivants :
List&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;() { new Product() { ProductId = 1, Name = &amp;quot;Book nr 1&amp;quot;, Price = 25 }, new Product() { ProductId = 2, Name = &amp;quot;Book nr 2&amp;quot;, Price = 15 }, new Product() { ProductId = 3, Name = &amp;quot;Book nr 3&amp;quot;, Price = 20 }, }; List&amp;lt;Order&amp;gt; Orders = new List&amp;lt;Order&amp;gt;() { new Order() { OrderId = 1, ProductId = 1, }, new Order() { OrderId = 2, ProductId = 1, }, new Order() { OrderId = 3, ProductId = 2, }, new Order() { OrderId = 4, ProductId = NULL, }, }; JOINTURE INTERNE Syntaxe de la requête</description>
    </item>
    
    <item>
      <title>Opérateurs de requête standard</title>
      <link>https://www.wikiod.com/fr/linq/operateurs-de-requete-standard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/linq/operateurs-de-requete-standard/</guid>
      <description>Les requêtes Linq sont écrites à l&amp;rsquo;aide des [Standard Query Operators][1] (qui sont un ensemble de méthodes d&amp;rsquo;extension qui fonctionnent principalement sur des objets de type IEnumerable&amp;lt;T&amp;gt; et IQueryable&amp;lt;T&amp;gt;) ou à l&amp;rsquo;aide de [Query Expressions][ 2] (qui, au moment de la compilation, sont convertis en appels de méthode Standard Query Operator).
Les opérateurs de requête fournissent des fonctionnalités de requête, notamment le filtrage, la projection, l&amp;rsquo;agrégation, le tri, etc.
[1] : https://msdn.</description>
    </item>
    
    <item>
      <title>Modes d&#39;exécution de la méthode - diffusion immédiate, diffusion différée, non diffusion différée</title>
      <link>https://www.wikiod.com/fr/linq/modes-dexecution-de-la-methode---diffusion-immediate-diffusion-differee-non-diffusion-differee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/linq/modes-dexecution-de-la-methode---diffusion-immediate-diffusion-differee-non-diffusion-differee/</guid>
      <description>Exécution différée vs exécution immédiate # Certaines méthodes LINQ renvoient un objet de requête. Cet objet ne contient pas les résultats de la requête ; à la place, il contient toutes les informations nécessaires pour générer ces résultats :
var list = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5}; var query = list.Select(x =&amp;gt; { Console.Write($&amp;quot;{x} &amp;quot;); return x; }); La requête contient un appel à Console.Write, mais rien n&amp;rsquo;a été envoyé à la console.</description>
    </item>
    
    <item>
      <title>Linq Utilisation de Take while et Skip While</title>
      <link>https://www.wikiod.com/fr/linq/linq-utilisation-de-take-while-et-skip-while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/linq/linq-utilisation-de-take-while-et-skip-while/</guid>
      <description>Take, Skip, TakeWhile et SkipWhile sont tous appelés opérateurs de partitionnement car ils obtiennent une section d&amp;rsquo;une séquence d&amp;rsquo;entrée telle que déterminée par une condition donnée. Discutons de ces opérateurs
Prendre la méthode # La méthode Take Prend des éléments jusqu&amp;rsquo;à une position spécifiée à partir du premier élément d&amp;rsquo;une séquence. Signature de prise :
Public static IEnumerable&amp;lt;TSource&amp;gt; Take&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source,int count); Exemple:
int[] numbers = { 1, 5, 8, 4, 9, 3, 6, 7, 2, 0 }; var TakeFirstFiveElement = numbers.</description>
    </item>
    
  </channel>
</rss>

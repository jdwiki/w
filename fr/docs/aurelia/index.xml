<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aurélia Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/aurelia/</link>
    <description>Recent content in Aurélia Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/aurelia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec aurélia</title>
      <link>https://www.wikiod.com/fr/aurelia/debuter-avec-aurelia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/debuter-avec-aurelia/</guid>
      <description>Hello World : Premiers pas avec aurelia-cli # Cet exemple vous montrera comment mettre rapidement en place une application Aurelia hello world à l&amp;rsquo;aide de la CLI Aurelia.
Conditions préalables # La CLI Aurelia est une application basée sur Node.js, alors assurez-vous de l&amp;rsquo;installer avant de continuer. Vous aurez besoin de [Node.js][1] 4.4.7 ou version ultérieure.
Vous aurez également besoin d&amp;rsquo;un client Git installé. Parmi les options intéressantes, citons : [Github Desktop][2], [Sourcetree][3] et [Git SCM][4].</description>
    </item>
    
    <item>
      <title>Convertisseurs de valeur</title>
      <link>https://www.wikiod.com/fr/aurelia/convertisseurs-de-valeur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/convertisseurs-de-valeur/</guid>
      <description>Cette section fournit un aperçu des convertisseurs de valeur dans Aurelia. Il devrait détailler non seulement comment créer un convertisseur de valeur, mais aussi pourquoi vous pourriez vouloir les utiliser et de nombreux exemples de tâches de base accomplies grâce à l&amp;rsquo;utilisation d&amp;rsquo;un convertisseur de valeur.
Les convertisseurs de valeur peuvent être chaînés et utilisés avec d&amp;rsquo;autres fonctionnalités de liaison dans Aurelia telles que les comportements de liaison.
Création d&amp;rsquo;un convertisseur de valeur de base # Alors que les convertisseurs de valeur peuvent être composés d&amp;rsquo;une méthode toView ou fromView, dans l&amp;rsquo;exemple ci-dessous, nous allons créer un convertisseur de valeur de base qui utilise simplement la méthode toView qui accepte la valeur envoyée à la vue comme premier dispute.</description>
    </item>
    
    <item>
      <title>Aurélia CLI</title>
      <link>https://www.wikiod.com/fr/aurelia/aurelia-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/aurelia-cli/</guid>
      <description>Ajout de Bootstrap à une application CLI # Une bibliothèque CSS/Javascript couramment utilisée est Bootstrap. Pour l&amp;rsquo;installer dans votre application pilotée par Aurelia CLI, vous devez d&amp;rsquo;abord l&amp;rsquo;installer à l&amp;rsquo;aide de Npm.
npm install bootstrap --save Étant donné que Bootstrap dépend fortement de jQuery, nous devons nous assurer que jQuery est également installé :
npm install jquery --save Maintenant, dans votre éditeur IDE/code préféré, ouvrez le fichier suivant dans votre répertoire de projet : aurelia_project/aurelia.</description>
    </item>
    
    <item>
      <title>Éléments personnalisés</title>
      <link>https://www.wikiod.com/fr/aurelia/elements-personnalises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/elements-personnalises/</guid>
      <description>Un élément personnalisé dans Aurelia est utilisé pour étendre l&amp;rsquo;ensemble de base d&amp;rsquo;éléments HTML par des composants réutilisables enrichis en fonctionnalités. Un élément personnalisé existe normalement à partir de deux fichiers, un modèle de vue basé sur Javasciprt et une vue correspondante écrite en HTML. Les deux fichiers composent l&amp;rsquo;élément HTML qui peut ensuite être utilisé dans toute l&amp;rsquo;application comme tout autre élément HTML.
Création d&amp;rsquo;un élément personnalisé basé sur des conventions de dénomination # Un élément personnalisé de base est créé dans Aurelia sur la base des conventions de dénomination, en ajoutant simplement le suffixe &amp;ldquo;CustomElement&amp;rdquo; au nom d&amp;rsquo;une classe.</description>
    </item>
    
    <item>
      <title>Aurelia CLI expliquée</title>
      <link>https://www.wikiod.com/fr/aurelia/aurelia-cli-expliquee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/aurelia-cli-expliquee/</guid>
      <description>Configuration de l&amp;rsquo;environnement pour Aurelia-cli expliquée # OS : Mac OS X 10.11 (devrait fonctionner sous Windows/Linux puisque nous utilisons Vagrant) Vagrant 1.8.4 Installed Structure des répertoires sur le système d&amp;rsquo;exploitation hôte (Mac OS) : /chemin/vers/projet /provision /packages Note: If you use different vesions, be sure to update Variables at top of provision.sh script below. atom.x86_64.rpm (Download: [Atom][1]) node-v6.4.0-linux-x64.tar.xz (Download: [Node][2]) /vagrant Vagrantfile (File contents below) provision.sh (File contents below) Démarrage de la machine virtuelle ($ == invite du terminal) In Mac OS Terminal $cd /path/to/project/vagrant $vagrant up Downloads CentOS 7 vagrant box, runs provision script Launches VM window outside of your Mac OS terminal When all done, log into VM using gui User: vagrant PW: vagrant Launch X Windows: $startx (Starts a Gnome UI) Configuration de la machine virtuelle Launch a Terminal window (Applications Drop Down Menu / Utilities) Set up sudo to run &amp;ldquo;npm&amp;rdquo; Get path to npm: $which npm (/opt/node-v6.</description>
    </item>
    
    <item>
      <title>Obligatoire</title>
      <link>https://www.wikiod.com/fr/aurelia/obligatoire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/obligatoire/</guid>
      <description>Liaison aux cases à cocher # Cases à cocher de base
export class MyViewModel { favoriteColors = []; colors = [&#39;Red&#39;, &#39;Yellow&#39;, &#39;Pink&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Blue&#39;]; } &amp;lt;template&amp;gt; &amp;lt;label repeat.for=&amp;quot;color of colors&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; value.bind=&amp;quot;color&amp;quot; checked.bind=&amp;quot;favoriteColors&amp;quot; /&amp;gt; ${color} &amp;lt;/label&amp;gt; &amp;lt;p&amp;gt;Favourite colors:&amp;lt;/p&amp;gt; &amp;lt;ul if.bind=&amp;quot;favoriteColors&amp;quot;&amp;gt; &amp;lt;li repeat.for=&amp;quot;color of favoriteColors&amp;quot;&amp;gt;${color}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt; ** Cases à cocher avec des tableaux d&amp;rsquo;objets **
export class MyViewModel { people = []; selectedPeople = []; constructor() { this.</description>
    </item>
    
    <item>
      <title>Injection de dépendance</title>
      <link>https://www.wikiod.com/fr/aurelia/injection-de-dependance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/injection-de-dependance/</guid>
      <description>Si vous injectez plus d&amp;rsquo;une classe, l&amp;rsquo;ordre dans lequel vous les placez dans l&amp;rsquo;instruction @inject() n&amp;rsquo;a pas d&amp;rsquo;importance. Cependant, l&amp;rsquo;ordre dans lequel ils apparaissent dans l&amp;rsquo;instruction @inject() doit correspondre à l&amp;rsquo;ordre des paramètres dans le constructeur.
Obtenir et afficher le nom d&amp;rsquo;utilisateur par identifiant # import {User} from &#39;backend/user&#39;; // import custom class import {inject} from &#39;aurelia-framework&#39;; // allows us to inject @inject(User) // inject custom class export class ProfileView { constructor(user) { // use instance of custom class as a parameter to the constructor this.</description>
    </item>
    
    <item>
      <title>Modèles</title>
      <link>https://www.wikiod.com/fr/aurelia/modeles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/modeles/</guid>
      <description>Création d&amp;rsquo;un modèle de base # Dans Aurelia, tous les modèles HTML sont définis à l&amp;rsquo;intérieur des balises d&amp;rsquo;ouverture et de fermeture &amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;. Toute votre logique spécifique HTML et Aurelia va à l&amp;rsquo;intérieur de ces balises de modèle et ne peut pas exister en dehors d&amp;rsquo;elles.
&amp;lt;template&amp;gt; &amp;lt;/template&amp;gt; Travailler avec des boucles en utilisant &amp;ldquo;repeat.for&amp;rdquo; # Boucler sur un itérable défini à l&amp;rsquo;intérieur de votre modèle de vue ou passé en tant que pouvant être lié (si un attribut personnalisé ou un élément personnalisé) peut être fait de la sorte.</description>
    </item>
    
    <item>
      <title>Travailler avec &lt;composer&gt;</title>
      <link>https://www.wikiod.com/fr/aurelia/travailler-avec-composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/aurelia/travailler-avec-composer/</guid>
      <description>Composer avec Affichage uniquement # La façon la plus simple d&amp;rsquo;utiliser compose est probablement avec une vue uniquement. Cela vous permet d&amp;rsquo;inclure des modèles HTML sans avoir besoin de déclarer un ViewModel avec des propriétés pouvant être liées pour chacun d&amp;rsquo;eux, ce qui facilite la réutilisation de plus petits morceaux de HTML.
Le BindingContext (ViewModel) de la vue sera défini sur celui du parent ViewModel.
Usage:
src/app.html
&amp;lt;template&amp;gt; &amp;lt;compose view=&amp;quot;./greeter.html&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt; &amp;lt;/template&amp;gt; src/greeter.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel ionic2 on </title>
    <link>https://www.wikiod.com/fr/docs/ionic2/</link>
    <description>Recent content in Tutoriel ionic2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ionic2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec ionic2</title>
      <link>https://www.wikiod.com/fr/ionic2/demarrer-avec-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/demarrer-avec-ionic2/</guid>
      <description>Installation ou configuration # Étant donné que Ionic 2 s&amp;rsquo;améliore de jour en jour, veuillez toujours consulter la documentation officielle pour suivre les dernières modifications et améliorations.
Conditions préalables: Vous aurez besoin de NodeJS pour créer des projets Ionic 2. Vous pouvez télécharger et installer node ici et en savoir plus sur npm et les packages utilisés par Ionic 2 [ici](http://ionicframework.com/docs/resources/using- npm/). # 1. Installation d&amp;rsquo;Ionic 2 # Comme Ionic 1, vous pouvez utiliser la CLI ou l&amp;rsquo;interface graphique Ionic pour créer et tester rapidement des applications directement dans le navigateur.</description>
    </item>
    
    <item>
      <title>Composants CSS Ionic2</title>
      <link>https://www.wikiod.com/fr/ionic2/composants-css-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/composants-css-ionic2/</guid>
      <description>Grille # Le système de grille d&amp;rsquo;Ionic est basé sur flexbox, une fonctionnalité CSS prise en charge par tous les appareils pris en charge par Ionic. La grille est composée de trois unités - grille, lignes et colonnes. Les colonnes s&amp;rsquo;agrandissent pour remplir leur ligne et se redimensionnent pour s&amp;rsquo;adapter à des colonnes supplémentaires.
Classe Largeur largeur-10 10 % largeur-20 20 % largeur-25 25 % largeur-33 33,3333 % largeur-50 50 % largeur-67 66.</description>
    </item>
    
    <item>
      <title>Utilisation des services</title>
      <link>https://www.wikiod.com/fr/ionic2/utilisation-des-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/utilisation-des-services/</guid>
      <description>Une chose très importante à propos de l&amp;rsquo;utilisation des services partagés est qu&amp;rsquo;ils doivent être inclus dans le tableau providers du composant le plus haut où ils doivent être partagés.
Pourquoi donc? Eh bien, supposons que nous incluions la référence MyService dans le tableau providers de chaque Component. Quelque chose comme:
@Component({ templateUrl:&amp;quot;page1.html&amp;quot;, providers: [MyService] }) Et
@Component({ templateUrl:&amp;quot;page2.html&amp;quot;, providers: [MyService] }) De cette façon, une nouvelle instance du service sera créée pour chaque composant, de sorte que l&amp;rsquo;instance où une page enregistrera les données sera différente de l&amp;rsquo;instance utilisée pour obtenir les données.</description>
    </item>
    
    <item>
      <title>Utilisation des onglets</title>
      <link>https://www.wikiod.com/fr/ionic2/utilisation-des-onglets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/utilisation-des-onglets/</guid>
      <description>N&amp;rsquo;oubliez pas de consulter Ionic 2 Tab docs pour être au courant des dernières modifications et mises à jour.
Modifier l&amp;rsquo;onglet sélectionné par programmation à partir de la page enfant # Vous pouvez jeter un œil au code complet dans ce plunker de travail.
Dans cet exemple, j&amp;rsquo;utilise un service partagé pour gérer la communication entre les pages à l&amp;rsquo;intérieur de l&amp;rsquo;onglet (pages enfants) et le conteneur d&amp;rsquo;onglets (le composant qui contient les onglets).</description>
    </item>
    
    <item>
      <title>Modaux</title>
      <link>https://www.wikiod.com/fr/ionic2/modaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/modaux/</guid>
      <description>Modal avec paramètres à la création : # Passer des paramètres à un modal est similaire à la façon dont nous passons des valeurs à un NavController. Pour ce faire, nous modifions notre liste dans home.html pour ouvrir un modal lorsque vous cliquez sur un élément de la liste et passez les paramètres requis comme deuxième argument à la méthode create.
Accueil.html
&amp;lt;ion-list&amp;gt; &amp;lt;ion-item *ngFor=&amp;quot;let datum of data&amp;quot; (click)=&amp;quot;openModalwithNavParams(datum)&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{datum.name}}&amp;lt;/h1&amp;gt; &amp;lt;/ion-item&amp;gt; &amp;lt;/ion-list&amp;gt; Accueil.</description>
    </item>
    
    <item>
      <title>Connexion sociale avec Angularfire2Firebase</title>
      <link>https://www.wikiod.com/fr/ionic2/connexion-sociale-avec-angularfire2firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/connexion-sociale-avec-angularfire2firebase/</guid>
      <description>Connexion Facebook native avec Angularfire2/Firebase # app.ts
import {Component} from &#39;@angular/core&#39;; import {Platform, ionicBootstrap} from &#39;ionic-angular&#39;; import {StatusBar} from &#39;ionic-native&#39;; import {LoginPage} from &#39;./pages/login/login&#39;; import {FIREBASE_PROVIDERS, defaultFirebase, AuthMethods, AuthProviders, firebaseAuthConfig} from &#39;angularfire2&#39;; @Component({ template: &#39;&amp;lt;ion-nav [root]=&amp;quot;rootPage&amp;quot;&amp;gt;&amp;lt;/ion-nav&amp;gt;&#39; }) export class MyApp { private rootPage: any; constructor(private platform: Platform) { this.rootPage = LoginPage; platform.ready().then(() =&amp;gt; { // Okay, so the platform is ready and our plugins are available. // Here you can do any higher level native things you might need.</description>
    </item>
    
    <item>
      <title>Notification push envoyée et reçue</title>
      <link>https://www.wikiod.com/fr/ionic2/notification-push-envoyee-et-recue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/notification-push-envoyee-et-recue/</guid>
      <description>Le SenderID qui est présent dans l&amp;rsquo;exemple d&amp;rsquo;initialisation est un identifiant d&amp;rsquo;expéditeur gcm qui vous est donné par google. Il devrait également être présent lorsque vous installez le plugin
ionic plugin add phonegap-plugin-push --variable SENDER_ID=&amp;quot;XXXXXXX&amp;quot; Si vous souhaitez ajouter des données supplémentaires à vos notifications push, consultez ce lien expliquant comment ajouter plus de saisies https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md
Initialisation # Le plug-in de notification push nécessite une initialisation qui indique au plug-in de commencer à s&amp;rsquo;exécuter à l&amp;rsquo;aide de l&amp;rsquo;identifiant d&amp;rsquo;expéditeur fourni.</description>
    </item>
    
    <item>
      <title>Géolocalisation</title>
      <link>https://www.wikiod.com/fr/ionic2/geolocalisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/geolocalisation/</guid>
      <description>Utilisation simple # Dans votre package.json assurez-vous d&amp;rsquo;inclure les dépendances :
{ ... &amp;quot;dependencies&amp;quot;: { ... &amp;quot;ionic-native&amp;quot;: &amp;quot;^1.3.10&amp;quot;, ... }, ... } Pour utiliser la géolocalisation :
// custom-component.ts import {Geolocation} from &#39;ionic-native&#39;; import template from &#39;./custom-component.html&#39;; @Component({ selector: &#39;custom-component&#39;, template: template }) export class CustomComponent { constructor() { // get the geolocation through a promise Geolocation.getCurrentPosition().then((position:Geoposition)=&amp;gt; { console.log( position.coords.latitude, position.coords.longitude); }); } } Surveiller la position # Pour une solution plus en temps réel, vous pouvez utiliser la fonction watchPosition dans Geolocation qui avertit chaque fois qu&amp;rsquo;une erreur ou un changement de position se produit.</description>
    </item>
    
    <item>
      <title>Solution de contournement pour &#39;show-delete&#39; dans la dépréciation de &lt;ion-list&gt;</title>
      <link>https://www.wikiod.com/fr/ionic2/solution-de-contournement-pour-show-delete-dans-la-depreciation-de-ion-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/solution-de-contournement-pour-show-delete-dans-la-depreciation-de-ion-list/</guid>
      <description>La solution # Je développe une application mobile utilisant ionic 2 avec Angular 2.
J&amp;rsquo;ai une liste d&amp;rsquo;ions remplie d&amp;rsquo;éléments ioniques. Je veux que ces éléments ioniques aient la possibilité d&amp;rsquo;être supprimés si nécessaire, comme présenté [ici] [1] sur le site Web ionique.
Cependant, beaucoup de choses ont changé dans ionic 2 depuis la première version et le style ci-dessus d&amp;rsquo;un bouton ouvrant tous les ion-item en un n&amp;rsquo;est plus possible depuis le show-delete et show-reorder ne sont plus pris en charge.</description>
    </item>
    
    <item>
      <title>Tests unitaires</title>
      <link>https://www.wikiod.com/fr/ionic2/tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ionic2/tests-unitaires/</guid>
      <description>Les tests unitaires en général donnent une sécurité supplémentaire à un produit pour éviter les problèmes lors de la modification/ajout de fonctionnalités. Un filet de sécurité qui dit &amp;ldquo;TOUJOURS FONCTIONNE&amp;rdquo;. Les tests unitaires ne remplacent en aucun cas les tests utilisateur réels qu&amp;rsquo;un contrôle qualité approprié peut effectuer.
Dans ce document, nous baserons les exemples sur ce référentiel : https://github.com/driftyco/ionic-unit-testing-example
Tests unitaires avec Karma/Jasmine # Les tests unitaires en ionique sont les mêmes que dans n&amp;rsquo;importe quelle application angulaire.</description>
    </item>
    
  </channel>
</rss>

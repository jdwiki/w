<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel jdbc on </title>
    <link>https://www.wikiod.com/fr/docs/jdbc/</link>
    <description>Recent content in Tutoriel jdbc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec jdbc</title>
      <link>https://www.wikiod.com/fr/jdbc/premiers-pas-avec-jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/premiers-pas-avec-jdbc/</guid>
      <description>Création d&amp;rsquo;une connexion # Pour pouvoir utiliser JDBC, vous devez avoir le pilote JDBC de votre base de données sur le chemin de classe de votre application.
Il existe plusieurs façons de se connecter à une base de données, mais les méthodes courantes consistent soit à utiliser le [java.sql.DriverManager][1], soit à configurer et à utiliser une implémentation spécifique à la base de données de [javax.sql.DataSource ][2].
Un exemple simple pour créer une connexion à une base de données avec l&amp;rsquo;url jdbc:somedb://localhost/foobar et exécuter une instruction de mise à jour pour donner à tous les employés une augmentation de 5 % :</description>
    </item>
    
    <item>
      <title>Création d&#39;une connexion à la base de données</title>
      <link>https://www.wikiod.com/fr/jdbc/creation-dune-connexion-a-la-base-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/creation-dune-connexion-a-la-base-de-donnees/</guid>
      <description>Syntaxe # DB_URL = &amp;ldquo;jdbc:DBMS://DB_HOST:DB_PORT/DB_NAME&amp;rdquo;
SGBD : Data Base Driver Manager, cela peut être n&amp;rsquo;importe quel SGBD (mysql, oracle, postgresql, sqlite, &amp;hellip;), exemple de mysql : &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo;
DB_HOST : votre hébergeur de base de données, l&amp;rsquo;adresse IP de votre base de données exemple : 10.6.0.1, la valeur par défaut est localhost ou 127.0.0.1
DB_PORT : port de la base de données, chaque SGBD a un port par défaut, exemple mysql=3306, postegesql=5432</description>
    </item>
    
    <item>
      <title>Affirmation préparée</title>
      <link>https://www.wikiod.com/fr/jdbc/affirmation-preparee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/affirmation-preparee/</guid>
      <description>Un PreparedStatement déclare l&amp;rsquo;instruction avant son exécution et autorise les espaces réservés pour les paramètres. Cela permet à l&amp;rsquo;instruction d&amp;rsquo;être préparée (et optimisée) une fois sur le serveur, puis réutilisée avec différents ensembles de paramètres.
L&amp;rsquo;avantage supplémentaire des paramètres fictifs est qu&amp;rsquo;ils offrent une protection contre l&amp;rsquo;injection SQL. Ceci est réalisé soit en envoyant les valeurs des paramètres séparément, soit parce que le pilote échappe correctement les valeurs selon les besoins.</description>
    </item>
    
    <item>
      <title>Regroupement d&#39;instructions</title>
      <link>https://www.wikiod.com/fr/jdbc/regroupement-dinstructions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/regroupement-dinstructions/</guid>
      <description>Le traitement par lot d&amp;rsquo;instructions exécute soit plusieurs instructions comme une seule unité (avec un java.sql.Statement normal), soit une seule instruction avec plusieurs ensembles de valeurs de paramètres (avec un java.sql.PreparedStatement).
Le traitement par lot d&amp;rsquo;instructions permet à un programme de collecter des instructions associées ou, dans le cas d&amp;rsquo;instructions préparées, des ensembles de valeurs de paramètres associés, et de les envoyer au serveur de base de données en une seule exécution.</description>
    </item>
    
    <item>
      <title>Jeu de résultats</title>
      <link>https://www.wikiod.com/fr/jdbc/jeu-de-resultats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/jeu-de-resultats/</guid>
      <description>Un objet ResultSet maintient un curseur pointant vers sa ligne de données actuelle. Initialement, le curseur est positionné avant la première ligne. La méthode suivante déplace le curseur sur la ligne suivante et, comme elle renvoie false lorsqu&amp;rsquo;il n&amp;rsquo;y a plus de lignes dans l&amp;rsquo;objet ResultSet, elle peut être utilisée dans une boucle while pour parcourir le résultat se
## Ensemble de résultats Pour créer un ResultSet vous devez créer un Statement ou PrepapredStatement :</description>
    </item>
    
    <item>
      <title>JDBC - Injection de déclaration</title>
      <link>https://www.wikiod.com/fr/jdbc/jdbc---injection-de-declaration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/jdbc---injection-de-declaration/</guid>
      <description>L&amp;rsquo;injection SQL est une technique d&amp;rsquo;injection de code, utilisée pour attaquer les applications pilotées par les données, dans laquelle des instructions SQL néfastes sont insérées dans un champ d&amp;rsquo;entrée pour exécution (par exemple, pour vider le contenu de la base de données à l&amp;rsquo;attaquant).
Dans cette section, nous en parlerons et de sa relation avec la déclaration JDBC.
Déclaration et injection SQL diabolique # Remarque dans cet exemple, nous utiliserons le SGBD PostgreSQL, mais vous pouvez utiliser n&amp;rsquo;importe quel SGBD</description>
    </item>
    
    <item>
      <title>ResultSetMetaDataResultSetMetaData</title>
      <link>https://www.wikiod.com/fr/jdbc/resultsetmetadataresultsetmetadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/jdbc/resultsetmetadataresultsetmetadata/</guid>
      <description>Comme nous le savons tous, les métadonnées signifient des données sur les données.
Pour récupérer les métadonnées d&amp;rsquo;une table comme le nombre total de colonnes, le nom de la colonne, le type de colonne, etc., l&amp;rsquo;interface ResultSetMetaData est utile car elle fournit des méthodes pour obtenir les métadonnées de l&amp;rsquo;objet ResultSet.
ResultSetMetaData # import java.sql.*; class Rsmd { public static void main(String args[]) { try { Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;); Connection con = DriverManager.</description>
    </item>
    
  </channel>
</rss>

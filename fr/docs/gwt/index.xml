<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel gwt on </title>
    <link>https://www.wikiod.com/fr/docs/gwt/</link>
    <description>Recent content in Tutoriel gwt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/gwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec gwt</title>
      <link>https://www.wikiod.com/fr/gwt/premiers-pas-avec-gwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gwt/premiers-pas-avec-gwt/</guid>
      <description>Installation # Téléchargez et décompressez le [GWT SDK][1]. Il contient les bibliothèques principales, le compilateur et le serveur de développement dont vous avez besoin pour écrire des applications Web.
Sous Windows, extrayez les fichiers du dossier compressé gwt-2.7.0.zip. Sur Mac ou Linux, vous pouvez décompresser le package avec une commande telle que :
unzip gwt-2.7.0.zip Le SDK GWT n&amp;rsquo;a pas d&amp;rsquo;application d&amp;rsquo;installation. Tous les fichiers dont vous avez besoin pour exécuter et utiliser le SDK se trouvent dans le répertoire extrait.</description>
    </item>
    
    <item>
      <title>Communication côté serveur avec RestyGwt</title>
      <link>https://www.wikiod.com/fr/gwt/communication-cote-serveur-avec-restygwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gwt/communication-cote-serveur-avec-restygwt/</guid>
      <description>Comme RestyGWT est un générateur GWT, il créera automatiquement l&amp;rsquo;implémentation de votre interface client. Sous le capot, il utilisera la classe RequestBuilder pour implémenter vos appels.
Définir et utiliser votre client REST # Vous devriez déjà avoir votre ressource REST backend disponible. Côté client (GWT) votre besoin de
Ajoutez la dépendance RestyGwt à votre projet avec maven
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.fusesource.restygwt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;restygwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Ajoutez l&amp;rsquo;héritage à votre fichier de module
&amp;lt;inherits name=&amp;quot;org.</description>
    </item>
    
    <item>
      <title>Utilisation des événements avec HandlerManager</title>
      <link>https://www.wikiod.com/fr/gwt/utilisation-des-evenements-avec-handlermanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/gwt/utilisation-des-evenements-avec-handlermanager/</guid>
      <description>Syntaxe d&amp;rsquo;utilisation simple des événements et des gestionnaires d&amp;rsquo;événements # HandlderManager fournissant :
public class HandlerManagerProvider { private static HandlerManager handlerManager; private HandlerManagerProvider() { } public static HandlerManager get() { return handlerManager != null ? handlerManager : (handlerManager = new HandlerManager(null)); } } Gestionnaire d&amp;rsquo;événements:
import com.google.gwt.event.shared.EventHandler; public interface CustomEventHandler extends EventHandler { void doMyAction(CustomEvent event); } Événement:
import com.google.gwt.event.shared.GwtEvent; public class CustomEvent extends GwtEvent&amp;lt;CustomEventHandler&amp;gt; { public static final Type&amp;lt;CustomEventHandler&amp;gt; TYPE = new Type&amp;lt;&amp;gt;(); @Override public Type&amp;lt;CustomEventHandler&amp;gt; getAssociatedType() { return TYPE; } @Override protected void dispatch(CustomEventHandler) { handler.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur les structures de données on </title>
    <link>https://www.wikiod.com/fr/docs/data-structures/</link>
    <description>Recent content in Tutoriel sur les structures de données on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Initiation aux structures de données</title>
      <link>https://www.wikiod.com/fr/data-structures/initiation-aux-structures-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/initiation-aux-structures-de-donnees/</guid>
      <description>Introduction aux structures de données # Une structure de données est un moyen d&amp;rsquo;organiser et de stocker des informations.
Laissez un &amp;ldquo;Hello, World!&amp;rdquo; chaîne être les informations que nous devons organiser et stocker dans une mémoire adressable par octet.
Chaque caractère ASCII nécessite 7 bits de stockage. La plupart des systèmes réservent 8 bits (1 octet) pour chaque caractère, donc chaque caractère dans &amp;ldquo;Hello, World!&amp;rdquo; sont stockés dans une unité de mémoire individuelle de la taille d&amp;rsquo;un octet, l&amp;rsquo;un après l&amp;rsquo;autre, consécutivement.</description>
    </item>
    
    <item>
      <title>Liste liée</title>
      <link>https://www.wikiod.com/fr/data-structures/liste-liee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/liste-liee/</guid>
      <description>Liste liée XOR # Une liste liée XOR est également appelée liste liée à mémoire efficace. C&amp;rsquo;est une autre forme de liste doublement liée. Cela dépend fortement de la porte logique XOR et de ses propriétés.
Pourquoi est-ce appelé la liste chaînée à mémoire efficace ? C&amp;rsquo;est ce qu&amp;rsquo;on appelle ainsi car cela utilise moins de mémoire qu&amp;rsquo;une liste traditionnelle à double lien.
Est-ce différent d&amp;rsquo;une liste doublement liée ?</description>
    </item>
    
    <item>
      <title>Trie (arbre de préfixearbre de base)</title>
      <link>https://www.wikiod.com/fr/data-structures/trie-arbre-de-prefixearbre-de-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/trie-arbre-de-prefixearbre-de-base/</guid>
      <description>Introduction à l&amp;rsquo;essai # Vous êtes-vous déjà demandé comment fonctionnent les moteurs de recherche ? Comment Google affiche-t-il des millions de résultats devant vous en quelques millisecondes ? Comment une énorme base de données située à des milliers de kilomètres de vous trouve-t-elle les informations que vous recherchez et vous les renvoie-t-elle ? La raison derrière cela n&amp;rsquo;est pas possible uniquement en utilisant un Internet plus rapide et des super-ordinateurs. Certains algorithmes de recherche et structures de données fascinants fonctionnent derrière.</description>
    </item>
    
    <item>
      <title>Arbre de recherche binaire</title>
      <link>https://www.wikiod.com/fr/data-structures/arbre-de-recherche-binaire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/arbre-de-recherche-binaire/</guid>
      <description>Création d&amp;rsquo;un nœud dans BST # L&amp;rsquo;arbre de recherche binaire (BST) est une structure de données hiérarchique avec un pointeur unique vers le nœud racine.
Le nœud dans le BST contient généralement des &amp;ldquo;éléments&amp;rdquo; (tels que des numéros ou des noms) pour une recherche rapide. Chaque nœud a au plus deux enfants (gauche et droite). Chaque nœud est organisé par un champ de données clé. Pour chaque nœud de BST, sa clé est supérieure à la clé de l&amp;rsquo;enfant gauche et inférieure à la clé de l&amp;rsquo;enfant droit</description>
    </item>
    
    <item>
      <title>Empiler</title>
      <link>https://www.wikiod.com/fr/data-structures/empiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/empiler/</guid>
      <description>## Introduction à la pile La pile est une structure de données LIFO (dernier entré, premier sorti), c&amp;rsquo;est-à-dire que l&amp;rsquo;élément le plus récent (ou &amp;ldquo;dernier entré&amp;rdquo;) ajouté à la pile sera le premier élément supprimé (&amp;ldquo;premier sorti&amp;rdquo;).
Prenons l&amp;rsquo;exemple des livres dans une boîte. Un seul livre peut être ajouté ou retiré de la boîte à la fois, et il ne peut être ajouté et retiré que par le haut.</description>
    </item>
    
    <item>
      <title>Arborescence des segments</title>
      <link>https://www.wikiod.com/fr/data-structures/arborescence-des-segments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/arborescence-des-segments/</guid>
      <description>Introduction à l&amp;rsquo;arborescence des segments # Supposons que nous ayons un tableau :
+-------+-----+-----+-----+-----+-----+-----+ | Index | 0 | 1 | 2 | 3 | 4 | 5 | +-------+-----+-----+-----+-----+-----+-----+ | Value | -1 | 3 | 4 | 0 | 2 | 1 | +-------+-----+-----+-----+-----+-----+-----+ Nous voulons effectuer une requête sur ce tableau. Par exemple:
Quel est le minimum de l&amp;rsquo;index-2 à l&amp;rsquo;index-4 ? -&amp;gt; 0 Quel est le maximum de l&amp;rsquo;index-0 à l&amp;rsquo;index-3 ?</description>
    </item>
    
    <item>
      <title>File d&#39;attente</title>
      <link>https://www.wikiod.com/fr/data-structures/file-dattente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/file-dattente/</guid>
      <description>## Introduction à la file d&amp;rsquo;attente La file d&amp;rsquo;attente est une structure de données FIFO (premier entré, premier sorti), c&amp;rsquo;est-à-dire que le premier élément ajouté à la file d&amp;rsquo;attente sera le premier élément supprimé (&amp;ldquo;premier sorti&amp;rdquo;).
Prenons l&amp;rsquo;exemple des clients qui attendent d&amp;rsquo;être aidés. Alice, Bob et Dan sont tous au supermarché. Alice est prête à payer, alors elle s&amp;rsquo;approche du caissier. Alice est maintenant dans la file d&amp;rsquo;attente. Elle est la seule personne dans la file d&amp;rsquo;attente, elle est donc à la fois devant et derrière.</description>
    </item>
    
    <item>
      <title>Traversées de graphes</title>
      <link>https://www.wikiod.com/fr/data-structures/traversees-de-graphes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/traversees-de-graphes/</guid>
      <description>Tous les algorithmes liés aux parcours de graphes. Leurs complexités, à la fois d&amp;rsquo;exécution et d&amp;rsquo;espace
## Première recherche en profondeur Le premier parcours en profondeur (ou la recherche) d&amp;rsquo;un graphique est similaire au premier parcours en profondeur d&amp;rsquo;un arbre. Le seul problème ici est que, contrairement aux arbres, les graphiques peuvent contenir des cycles, nous pouvons donc revenir au même nœud. Pour éviter de traiter un nœud plus d&amp;rsquo;une fois, nous utilisons un tableau booléen visité.</description>
    </item>
    
    <item>
      <title>Deque (file d&#39;attente à double extrémité)</title>
      <link>https://www.wikiod.com/fr/data-structures/deque-file-dattente-a-double-extremite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/deque-file-dattente-a-double-extremite/</guid>
      <description>Insertion et suppression du début et de la fin de la file d&amp;rsquo;attente # [![entrez la description de l&amp;rsquo;image ici][1]][1]
[1] : https://i.stack.imgur.com/LHu2m.png</description>
    </item>
    
    <item>
      <title>Matrices</title>
      <link>https://www.wikiod.com/fr/data-structures/matrices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/data-structures/matrices/</guid>
      <description>Cet article vise à expliquer ce qu&amp;rsquo;est une matrice et comment l&amp;rsquo;utiliser.
Introduction aux matrices # Les matrices sont essentiellement des tableaux à deux dimensions.
Cela signifie qu&amp;rsquo;il associe les coordonnées (i, j), où i est la ligne et j la colonne, à une valeur.
Ainsi, vous pourriez avoir :
m3, 4 = &amp;ldquo;Bonjour&amp;rdquo;
L&amp;rsquo;implémentation la plus simple consiste à créer un tableau ou des tableaux. En python, cela se passerait comme suit.</description>
    </item>
    
  </channel>
</rss>

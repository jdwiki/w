<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/uwp/</link>
    <description>Recent content in Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec uwp</title>
      <link>https://www.wikiod.com/fr/uwp/demarrer-avec-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/demarrer-avec-uwp/</guid>
      <description>Création de votre première application UWP # Cet exemple montre comment développer une application UWP simple.
Lors de la création d&amp;rsquo;un projet &amp;ldquo;Blank App (Universal Windows)&amp;rdquo;, de nombreux fichiers essentiels sont créés dans votre solution.
Tous les fichiers de votre projet sont visibles dans l&amp;rsquo;Explorateur de solutions.
Certains des fichiers cruciaux de votre projet sont :
App.xaml et App.xaml.cs - App.xaml est utilisé pour déclarer les ressources disponibles dans l&amp;rsquo;application et App.</description>
    </item>
    
    <item>
      <title>Familles d&#39;appareils</title>
      <link>https://www.wikiod.com/fr/uwp/familles-dappareils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/familles-dappareils/</guid>
      <description>Code spécifique à DeviceFamily # En général, UWP est utilisé pour créer une seule application qui s&amp;rsquo;exécute sur Windows 10 sur de nombreux appareils différents. Cependant, il est également possible de créer du code adapté à des appareils spécifiques. Vous pouvez y parvenir de plusieurs manières différentes.
Disposition XAML différente
Si vous souhaitez utiliser une mise en page spécifique pour une certaine &amp;ldquo;famille d&amp;rsquo;appareils&amp;rdquo;, vous pouvez le faire en créant un nouvel élément de page XAML portant le même nom que le fichier XAML par défaut, avec un suffixe pour indiquer la famille d&amp;rsquo;appareils que vous ciblez.</description>
    </item>
    
    <item>
      <title>Tests unitaires pour UWP</title>
      <link>https://www.wikiod.com/fr/uwp/tests-unitaires-pour-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/tests-unitaires-pour-uwp/</guid>
      <description>Je voudrais vous montrer comment créer des tests unitaires pour l&amp;rsquo;application universelle Windows 10. Pour tester les applications UWP, nous utiliserons xUnit.net Framework sur lequel vous pouvez en savoir plus à partir du lien que j&amp;rsquo;ai fourni dans la section des remarques.
Vous pouvez en savoir plus sur xUnit Framework : https://xunit.github.io/docs/getting-started-uwp.html
Configurer l&amp;rsquo;application de test # Une fois que votre application UWP est prête pour les tests, vous devez ajouter l&amp;rsquo;application de test à votre solution.</description>
    </item>
    
    <item>
      <title>Paramètres et données d&#39;application</title>
      <link>https://www.wikiod.com/fr/uwp/parametres-et-donnees-dapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/parametres-et-donnees-dapplication/</guid>
      <description>Stocker et récupérer les paramètres # Les applications UWP peuvent facilement stocker des paramètres simples dans un magasin clé/valeur localement ou même dans le cloud afin que votre application ou un jeu puisse partager des paramètres entre les appareils de différents utilisateurs.
Les types de données suivants peuvent être utilisés pour les paramètres :
UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Simple, Double booléen Car16, Chaîne DateHeure, Durée GUID, Point, Taille, Rect Commencez par récupérer le conteneur de données local et/ou itinérant.</description>
    </item>
    
    <item>
      <title>Tâches d&#39;arrière-plan UWP</title>
      <link>https://www.wikiod.com/fr/uwp/taches-darriere-plan-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/taches-darriere-plan-uwp/</guid>
      <description>Pour enregistrer une tâche d&amp;rsquo;arrière-plan qui s&amp;rsquo;exécute dans un processus séparé, vous devez accéder à l&amp;rsquo;onglet &amp;ldquo;Déclarations&amp;rdquo; dans le Package.appxmanifest et ajouter une nouvelle &amp;ldquo;Tâche d&amp;rsquo;arrière-plan&amp;rdquo; et définir le point d&amp;rsquo;entrée. L&amp;rsquo;enregistrement d&amp;rsquo;une tâche d&amp;rsquo;arrière-plan à processus unique peut être effectué au moyen de BackgroundTaskBuilder, mais l&amp;rsquo;application lèvera une exception si vous enregistrez une tâche deux fois, vous devez donc vérifier si vous avez déjà enregistré une tâche. L&amp;rsquo;application doit obtenir l&amp;rsquo;autorisation d&amp;rsquo;enregistrer une nouvelle tâche, cela peut être fait en appelant BackgroundExecutionManager.</description>
    </item>
    
    <item>
      <title>Ressources thématiques</title>
      <link>https://www.wikiod.com/fr/uwp/ressources-thematiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/ressources-thematiques/</guid>
      <description>Syntaxe # C# : Application.Current.Resources[&amp;ldquo;votreCléCouleur&amp;rdquo;] Xaml : {ThemeResource yourColorKey} Paramètres # Paramètre Objectif votreCléCouleur Une clé que vous donnez pour récupérer un objet Color. Il diffère entre C # et Xaml UWP vous permet de prendre le contrôle total des avantages de Windows 10. Certains de ces avantages sont graphiques, comme la couleur Accent ou les thèmes Dark/Light.
Pour préparer votre application à être compatible avec ces fonctionnalités, un tas de couleurs prédéfinies ont été implémentées dans UWP pour changer avec la couleur Accent du système d&amp;rsquo;exploitation sur lequel le programme s&amp;rsquo;exécute ou avec le choix de thème de l&amp;rsquo;utilisateur.</description>
    </item>
    
    <item>
      <title>Navigation WebView</title>
      <link>https://www.wikiod.com/fr/uwp/navigation-webview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/navigation-webview/</guid>
      <description>Tous les exemples qui récupèrent des données à partir d&amp;rsquo;une URL distante doivent avoir la fonctionnalité &amp;ldquo;Internet (client)&amp;rdquo; cochée dans le Package.appxmanifest. Pour les exemples qui ne manipulent que des données locales, ce n&amp;rsquo;est pas nécessaire.
Ouvrir le fichier HTML à partir du package d&amp;rsquo;application # Vous pouvez facilement ouvrir un fichier à partir de votre package d&amp;rsquo;application, mais le schéma Uri doit être &amp;ldquo;ms-appx-web&amp;rdquo; au lieu de &amp;ldquo;ms-appx&amp;rdquo;:
var uri = new Uri(&amp;quot;ms-appx-web:///Assets/Html/html-sample.</description>
    </item>
    
    <item>
      <title>UWP Bonjour le monde</title>
      <link>https://www.wikiod.com/fr/uwp/uwp-bonjour-le-monde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/uwp-bonjour-le-monde/</guid>
      <description>Syntaxe # Ceci est l&amp;rsquo;exemple simple du populaire &amp;ldquo;Hello World!&amp;rdquo; pour Universel Plate-forme Windows sur Windows 10. Hello World - Plate-forme Windows universelle # Après avoir lancé Visual Studio 2015, accédez à Fichier → Nouveau → Projet. Dans la boîte de dialogue Nouveau projet, parcourez l&amp;rsquo;arborescence des modèles jusqu&amp;rsquo;à Visual C# → Windows → Universal et sélectionnez Blank App (Universal Windows). Ensuite, nous devons remplir le formulaire pour décrire l&amp;rsquo;application :</description>
    </item>
    
    <item>
      <title>Cycle de vie des applications</title>
      <link>https://www.wikiod.com/fr/uwp/cycle-de-vie-des-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/cycle-de-vie-des-applications/</guid>
      <description>Le cycle de vie de l&amp;rsquo;application Windows 10 universelle se compose de trois états différents :
En cours d&amp;rsquo;exécution - l&amp;rsquo;application est actuellement en cours d&amp;rsquo;utilisation Ne fonctionne pas - l&amp;rsquo;application est fermée et supprimée de la mémoire Suspendu - l&amp;rsquo;état de l&amp;rsquo;application est gelé mais il est toujours en mémoire [![entrez la description de l&amp;rsquo;image ici][1]][1] [1] : https://i.stack.imgur.com/x7MCl.png Comme vous pouvez le voir sur l&amp;rsquo;image ci-dessus, différents événements sont liés au passage d&amp;rsquo;un état à un autre.</description>
    </item>
    
    <item>
      <title>Convertir la taille de l&#39;image et recadrer le fichier image dans l&#39;application Windows Universal</title>
      <link>https://www.wikiod.com/fr/uwp/convertir-la-taille-de-limage-et-recadrer-le-fichier-image-dans-lapplication-windows-universal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/uwp/convertir-la-taille-de-limage-et-recadrer-le-fichier-image-dans-lapplication-windows-universal/</guid>
      <description>Recadrer et redimensionner l&amp;rsquo;image à l&amp;rsquo;aide de l&amp;rsquo;outil bitmap # public class BitmapTools { /// &amp;lt;summary&amp;gt; /// Gets the cropped bitmap asynchronously. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;originalImage&amp;quot;&amp;gt;The original image.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;startPoint&amp;quot;&amp;gt;The start point.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;cropSize&amp;quot;&amp;gt;Size of the corp.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;scale&amp;quot;&amp;gt;The scale.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;The cropped image.&amp;lt;/returns&amp;gt; public static async Task&amp;lt;WriteableBitmap&amp;gt; GetCroppedBitmapAsync(IRandomAccessStream originalImage, Point startPoint, Size cropSize, double scale) { if (double.IsNaN(scale) || double.IsInfinity(scale)) { scale = 1; } // Convert start point and size to integer.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Vue.js on </title>
    <link>https://www.wikiod.com/fr/docs/vue-js/</link>
    <description>Recent content in Tutoriel Vue.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/vue-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Vue.js</title>
      <link>https://www.wikiod.com/fr/vue-js/premiers-pas-avec-vuejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/premiers-pas-avec-vuejs/</guid>
      <description>&amp;ldquo;Bonjour le monde!&amp;rdquo; Programme # Pour commencer à utiliser Vue.js, assurez-vous que le fichier de script est inclus dans votre code HTML. Par exemple, ajoutez ce qui suit à votre HTML.
&amp;lt;script src=&amp;quot;https://npmcdn.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Exemple simple # Modèle HTML # &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; Javascript # new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue.js!&#39; } }) Voir une démo en direct de cet exemple.
Vous pouvez également consulter l&amp;rsquo;exemple &amp;ldquo;Hello World&amp;rdquo; réalisé par Vue.</description>
    </item>
    
    <item>
      <title>Rendu conditionnel</title>
      <link>https://www.wikiod.com/fr/vue-js/rendu-conditionnel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/rendu-conditionnel/</guid>
      <description>Syntaxe # &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt;&amp;lt;element v-else=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if | v-autre &amp;lt;template v-if=&amp;quot;condition&amp;quot;&amp;gt;...&amp;lt;/template&amp;gt; // modèle v-if &amp;lt;element v-show=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-show Il est très important de se souvenir de la différence entre v-if et v-show. Bien que leurs utilisations soient presque identiques, un élément lié à v-if ne sera rendu dans le DOM que lorsque sa condition est true pour la première fois. Lors de l&amp;rsquo;utilisation de la directive v-show, tous les éléments sont rendus dans le DOM mais sont masqués à l&amp;rsquo;aide du style display si la condition est false !</description>
    </item>
    
    <item>
      <title>Crochets de cycle de vie</title>
      <link>https://www.wikiod.com/fr/vue-js/crochets-de-cycle-de-vie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/crochets-de-cycle-de-vie/</guid>
      <description>Pièges courants : accéder à DOM à partir du crochet ready() # Un cas d&amp;rsquo;utilisation courant pour le hook ready() est d&amp;rsquo;accéder au DOM, par ex. pour lancer un plugin Javascript, obtenir les dimensions d&amp;rsquo;un élément etc.
Le problème
En raison du mécanisme de mise à jour asynchrone du DOM de Vue, il n&amp;rsquo;est pas garanti que le DOM ait été entièrement mis à jour lorsque le crochet ready() est appelé.</description>
    </item>
    
    <item>
      <title>Directives personnalisées</title>
      <link>https://www.wikiod.com/fr/vue-js/directives-personnalisees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/directives-personnalisees/</guid>
      <description>Syntaxe # Vue.directive(id, définition); Vue.directive(id, mise à jour); //lorsque vous n&#39;avez besoin que de la fonction de mise à jour. Paramètres # Paramètre Détails identifiant String - L&amp;rsquo;identifiant de la directive qui sera utilisé sans le préfixe v-. (Ajoutez le préfixe v- lors de son utilisation) définition Objet - Un objet de définition peut fournir plusieurs fonctions de crochet (toutes facultatives) : bind, update et unbind Bases # En plus de l&amp;rsquo;ensemble de directives par défaut fourni dans le noyau, Vue.</description>
    </item>
    
    <item>
      <title>Accessoires</title>
      <link>https://www.wikiod.com/fr/vue-js/accessoires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/accessoires/</guid>
      <description>camelCase &amp;lt;=&amp;gt; kebab-case # Lorsque vous définissez les noms de vos props, rappelez-vous toujours que les noms d&amp;rsquo;attributs HTML ne sont pas sensibles à la casse. Cela signifie que si vous définissez un prop en cas de chameau dans votre définition de composant &amp;hellip;
Vue.component(&#39;child&#39;, { props: [&#39;myProp&#39;], ... }); &amp;hellip; vous devez l&amp;rsquo;appeler dans votre composant HTML en tant que my-prop.
Transmission de données du parent à l&amp;rsquo;enfant avec des accessoires # Dans Vue.</description>
    </item>
    
    <item>
      <title>Utiliser ceci dans Vue</title>
      <link>https://www.wikiod.com/fr/vue-js/utiliser-ceci-dans-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/utiliser-ceci-dans-vue/</guid>
      <description>L&amp;rsquo;une des erreurs les plus courantes que nous trouvons dans le code Vue sur StackOverflow est l&amp;rsquo;utilisation abusive de &amp;ldquo;this&amp;rdquo;. Les erreurs les plus courantes se situent généralement dans deux domaines, en utilisant &amp;ldquo;this&amp;rdquo; dans les rappels pour les promesses ou d&amp;rsquo;autres fonctions asynchrones et en utilisant des fonctions fléchées pour définir des méthodes, des propriétés calculées, etc.
MAUVAIS! Utilisation d&amp;rsquo;une fonction fléchée pour définir une méthode qui fait référence à &amp;ldquo;ceci&amp;rdquo; # new Vue({ el:&amp;quot;#app&amp;quot;, data:{ foo: &amp;quot;bar&amp;quot; }, methods:{ // This is wrong!</description>
    </item>
    
    <item>
      <title>Machines à sous</title>
      <link>https://www.wikiod.com/fr/vue-js/machines-a-sous/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/machines-a-sous/</guid>
      <description>Important! Les emplacements après le rendu ne garantissent pas l&amp;rsquo;ordre des positions pour les emplacements. Slot, qui était le premier, peut avoir une position différente après le rendu.
Utiliser des slots nommés # Les emplacements nommés fonctionnent de la même manière que les emplacements uniques, mais vous permettent à la place de distribuer du contenu dans différentes régions au sein de votre modèle de composant enfant.
Prenez le composant page de l&amp;rsquo;exemple précédent mais modifiez son modèle pour qu&amp;rsquo;il soit comme suit :</description>
    </item>
    
    <item>
      <title>VueJS &#43; Redux avec Vua-Redux (meilleure solution)</title>
      <link>https://www.wikiod.com/fr/vue-js/vuejs--redux-avec-vua-redux-meilleure-solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/vuejs--redux-avec-vua-redux-meilleure-solution/</guid>
      <description>Comment utiliser Vua-Redux # Installation de Vua Redux depuis NPM :
Installer via :
npm i vua-redux --save Initialiser: # ===============
// main.js
import Vue from &#39;vue&#39;; import { reduxStorePlugin } from &#39;vua-redux&#39;; import AppStore from &#39;./AppStore&#39;; import App from &#39;./Component/App&#39;; // install vua-redux Vue.use(reduxStorePlugin); new Vue({ store: AppStore, render(h) { return &amp;lt;App /&amp;gt; } }); // AppStore.js
import { createStore } from &#39;redux&#39;; const initialState = { todos: [] }; const reducer = (state = initialState, action) =&amp;gt; { switch(action.</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://www.wikiod.com/fr/vue-js/vuex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/vuex/</guid>
      <description>Vuex est un modèle de gestion d&amp;rsquo;état + une bibliothèque pour les applications Vue.js. Il sert de magasin centralisé pour tous les composants d&amp;rsquo;une application, avec des règles garantissant que l&amp;rsquo;état ne peut être muté que de manière prévisible. Il s&amp;rsquo;intègre également à l&amp;rsquo;extension officielle des outils de développement de Vue pour fournir des fonctionnalités avancées telles que le débogage du voyage dans le temps sans configuration et l&amp;rsquo;exportation/importation d&amp;rsquo;instantanés d&amp;rsquo;état.</description>
    </item>
    
    <item>
      <title>Filtres personnalisés</title>
      <link>https://www.wikiod.com/fr/vue-js/filtres-personnalises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vue-js/filtres-personnalises/</guid>
      <description>Syntaxe # Vue.filter(nom, fonction(valeur){}); //Basique Vue.filter(name, function(value, begin, end){}); //Basic avec des valeurs d&amp;rsquo;emballage Vue.filter(nom, fonction(valeur, entrée){}); //Dynamique Vue.filter(name, { read: function(value){}, write: function(value){} }); //Deux sens Paramètres # Paramètre Détails nom Chaîne - nom appelable souhaité du filtre valeur [Callback] Any - valeur des données passant dans le filtre commencer [Callback] Any - valeur à venir avant les données transmises fin [Callback] Any - valeur à venir après les données transmises entrée [Rappel] Any - entrée utilisateur liée à l&amp;rsquo;instance de Vue pour des résultats dynamiques De base # Les filtres personnalisés dans Vue.</description>
    </item>
    
  </channel>
</rss>

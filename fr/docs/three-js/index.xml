<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel three.js on </title>
    <link>https://www.wikiod.com/fr/docs/three-js/</link>
    <description>Recent content in Tutoriel three.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/three-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec three.js</title>
      <link>https://www.wikiod.com/fr/three-js/premiers-pas-avec-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/premiers-pas-avec-threejs/</guid>
      <description>Installation ou configuration # Vous pouvez installer three.js via npm :
npm install three
Vous pouvez l&amp;rsquo;ajouter depuis un CDN à votre HTML :
Vous pouvez utiliser l&amp;rsquo;éditeur three.js pour l&amp;rsquo;essayer et télécharger le projet comme exemple ou point de départ.
Simple Boilerplate : contrôle du cube rotatif et de l&amp;rsquo;orbite avec amortissement # Il s&amp;rsquo;agit du fichier HTML de base qui peut être utilisé comme passe-partout lors du démarrage d&amp;rsquo;un projet.</description>
    </item>
    
    <item>
      <title>Contrôles de la caméra dans Three.js</title>
      <link>https://www.wikiod.com/fr/three-js/controles-de-la-camera-dans-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/controles-de-la-camera-dans-threejs/</guid>
      <description>Ce document explique comment vous pouvez facilement ajouter des commandes de caméra existantes à votre scène, ainsi que des conseils sur la création de commandes personnalisées.
Notez que les scripts de contrôle prédéfinis se trouvent dans le dossier /examples/js/controls de la bibliothèque.
Contrôles d&amp;rsquo;orbite # Une caméra orbitale est une caméra qui permet à l&amp;rsquo;utilisateur de tourner autour d&amp;rsquo;un point central, mais tout en gardant un axe particulier verrouillé. Ceci est extrêmement populaire car il empêche la scène d&amp;rsquo;être &amp;ldquo;inclinée&amp;rdquo; hors axe.</description>
    </item>
    
    <item>
      <title>Cueillette d&#39;objets</title>
      <link>https://www.wikiod.com/fr/three-js/cueillette-dobjets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/cueillette-dobjets/</guid>
      <description>Cueillette d&amp;rsquo;objets / Raycasting # Raycasting signifie lancer un rayon de la position de la souris sur l&amp;rsquo;écran vers la scène, c&amp;rsquo;est ainsi que threejs détermine sur quel objet vous voulez cliquer si vous l&amp;rsquo;avez implémenté. Threejs obtient ces informations à l&amp;rsquo;aide d&amp;rsquo;un [octree][1], mais toujours en production, vous ne voudrez peut-être pas calculer le résultat à chaque image ou sur l&amp;rsquo;événement mousemove, mais plutôt sur l&amp;rsquo;événement click pour une application plus accessible avec faibles exigences.</description>
    </item>
    
    <item>
      <title>Géométries</title>
      <link>https://www.wikiod.com/fr/three-js/geometries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/geometries/</guid>
      <description>Les exemples fonctionnent à partir de three.js R79 (révision 79).
TROIS.BoxGeometry # THREE.BoxGeometry construit des boîtes telles que des cuboïdes et des cubes.
Cubes # Les cubes créés à l&amp;rsquo;aide de THREE.BoxGeometry utiliseraient la même longueur pour tous les côtés.
Javascript
//Creates scene and camera var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); //Creates renderer and adds it to the DOM var renderer = new THREE.</description>
    </item>
    
    <item>
      <title>Rendu des boucles pour l&#39;animation Mise à jour dynamique des objets</title>
      <link>https://www.wikiod.com/fr/three-js/rendu-des-boucles-pour-lanimation-mise-a-jour-dynamique-des-objets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/rendu-des-boucles-pour-lanimation-mise-a-jour-dynamique-des-objets/</guid>
      <description>Ce document décrit quelques méthodes courantes pour ajouter une animation directement dans vos scènes Three.js. Bien qu&amp;rsquo;il existe des bibliothèques et des frameworks qui peuvent ajouter un mouvement dynamique à votre scène (tweens, physique, etc.), il est utile de comprendre comment vous pouvez le faire vous-même simplement avec quelques lignes de code.
Le concept de base de l&amp;rsquo;animation consiste à mettre à jour les propriétés d&amp;rsquo;un objet (rotation et translation, généralement) en petites quantités sur une période de temps.</description>
    </item>
    
    <item>
      <title>Textures et matériaux</title>
      <link>https://www.wikiod.com/fr/three-js/textures-et-materiaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/textures-et-materiaux/</guid>
      <description>Une belle introduction aux matières et aux textures.
Textures diffuses, en relief, spéculaires et transparentes.
Paramètres # Paramètre Détails couleur Valeur numérique du composant RVB de la couleur. intensité Valeur numérique de la force/intensité de la lumière. fov Champ de vision vertical du tronc de la caméra. aspect Un morceau de caméra regarde le système. près de Tronc de caméra près de l&amp;rsquo;avion. loin Un morceau de caméra est clairement loin.</description>
    </item>
    
    <item>
      <title>Mailles</title>
      <link>https://www.wikiod.com/fr/three-js/mailles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/three-js/mailles/</guid>
      <description>Un Three.js Mesh est une classe de base qui hérite de [Object3d](https://threejs.org/docs/ ?q=geomet#Reference/Core/Object3D) et est utilisé pour instancier des objets polygonaux en combinant une Geometry avec une Material . Mesh est également la classe de base pour les classes plus avancées MorphAnimMesh et SkinnedMesh.
Syntaxe # nouveau THREE.Mesh (géométrie, matériau); La géométrie et le matériau sont facultatifs et prendront respectivement par défaut BufferGeometry et MeshBasicMaterial s&amp;rsquo;ils ne sont pas fournis dans le constructeur.</description>
    </item>
    
  </channel>
</rss>

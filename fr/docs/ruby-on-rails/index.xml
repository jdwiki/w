<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Ruby on Rails on </title>
    <link>https://www.wikiod.com/fr/docs/ruby-on-rails/</link>
    <description>Recent content in Tutoriel Ruby on Rails on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Ruby on Rails</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/premiers-pas-avec-ruby-on-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/premiers-pas-avec-ruby-on-rails/</guid>
      <description>Création d&amp;rsquo;une application Ruby on Rails # Cet exemple suppose que Ruby et Ruby on Rails ont déjà été correctement installés. Si ce n&amp;rsquo;est pas le cas, vous pouvez trouver comment procéder [ici][1].
Ouvrez une ligne de commande ou un terminal. Pour générer une nouvelle application rails, utilisez la commande [rails new][2] suivie du nom de votre application :
$ rails new my_app Si vous souhaitez créer votre application Rails avec une version Rails spécifique, vous pouvez le spécifier au moment de la génération de l&amp;rsquo;application.</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/routage/</guid>
      <description>Le routeur Rails reconnaît les URL et les distribue à l&amp;rsquo;action d&amp;rsquo;un contrôleur. Il peut également générer des chemins et des URL, évitant ainsi d&amp;rsquo;avoir à coder en dur des chaînes dans vos vues.
Le &amp;ldquo;routage&amp;rdquo; en général est la façon dont les URL sont &amp;ldquo;traitées&amp;rdquo; par votre application. Dans le cas de Rails, il s&amp;rsquo;agit généralement du contrôleur et de l&amp;rsquo;action de ce contrôleur qui gérera une URL entrante particulière.</description>
    </item>
    
    <item>
      <title>Migrations d&#39;enregistrements actifs</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/migrations-denregistrements-actifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/migrations-denregistrements-actifs/</guid>
      <description>Paramètres # Type de colonne Descriptif :clé_primaire Clé primaire :chaîne Type de données chaîne plus court. Autorise l&amp;rsquo;option limit pour un nombre maximum de caractères. :texte Plus de texte. Autorise l&amp;rsquo;option limit pour le nombre maximum d&amp;rsquo;octets. :entier Entier. Autorise l&amp;rsquo;option limit pour le nombre maximum d&amp;rsquo;octets. :bigint Entier plus grand :float Flotteur :décimal Nombre décimal avec précision variable. Autorise les options &amp;ldquo;précision&amp;rdquo; et &amp;ldquo;échelle&amp;rdquo;. :numérique Autorise les options &amp;ldquo;précision&amp;rdquo; et &amp;ldquo;échelle&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Meilleures pratiques ferroviaires</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/meilleures-pratiques-ferroviaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/meilleures-pratiques-ferroviaires/</guid>
      <description>Gros modèle, contrôleur maigre # &amp;ldquo;Fat Model, Skinny Controller&amp;rdquo; fait référence à la façon dont les parties M et C de MVC fonctionnent idéalement ensemble. À savoir, toute logique liée à la non-réponse doit être intégrée au modèle, idéalement dans une méthode agréable et testable. Pendant ce temps, le contrôleur &amp;ldquo;maigre&amp;rdquo; est simplement une belle interface entre la vue et le modèle.
En pratique, cela peut nécessiter une gamme de différents types de refactoring, mais tout se résume à une idée : en déplaçant toute logique qui ne concerne pas la réponse vers le modèle (au lieu du contrôleur), non seulement vous avez favorisé la réutilisation dans la mesure du possible, mais vous avez également permis de tester votre code en dehors du contexte d&amp;rsquo;une requête.</description>
    </item>
    
    <item>
      <title>ActiveRecord</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/activerecord/</guid>
      <description>Création d&amp;rsquo;un modèle via un générateur # Ruby on Rails fournit un générateur de &amp;ldquo;modèles&amp;rdquo; que vous pouvez utiliser pour créer des modèles ActiveRecord. Utilisez simplement rails generate model et fournissez le nom du modèle.
$ rails g model user En plus du fichier de modèle dans app/models, le générateur créera également :
le Test dans test/models/user_test.rb les Fixtures dans test/fixtures/users.yml la migration de la base de données dans db/migrate/XXX_create_users.rb Vous pouvez également générer des champs pour le modèle lors de sa génération.</description>
    </item>
    
    <item>
      <title>Interface de requête ActiveRecord</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/interface-de-requete-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/interface-de-requete-activerecord/</guid>
      <description>ActiveRecord est le M dans MVC qui est la couche du système responsable de la représentation des données et de la logique métier. La technique qui connecte les objets riches d&amp;rsquo;une application aux tables d&amp;rsquo;un système de gestion de base de données relationnelle est Object Relational Mapper(ORM).
ActiveRecord effectuera des requêtes sur la base de données pour vous et est compatible avec la plupart des systèmes de base de données. Quel que soit le système de base de données que vous utilisez, le format de la méthode ActiveRecord sera toujours le même.</description>
    </item>
    
    <item>
      <title>Conventions de nommage</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/conventions-de-nommage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/conventions-de-nommage/</guid>
      <description>Contrôleurs # Les noms de classe de contrôleur sont mis au pluriel. La raison en est que le contrôleur contrôle plusieurs instances d&amp;rsquo;instance d&amp;rsquo;objet.
Par exemple : OrdersController serait le contrôleur d&amp;rsquo;une table orders. Rails cherchera alors la définition de la classe dans un fichier appelé orders_controller.rb dans le répertoire /app/controllers.
Par exemple : PostsController serait le contrôleur d&amp;rsquo;une table posts.
Si le nom de la classe du contrôleur comporte plusieurs mots en majuscules, le nom de la table est supposé avoir des traits de soulignement entre ces mots.</description>
    </item>
    
    <item>
      <title>Configurer Angular avec Rails</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/configurer-angular-avec-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/configurer-angular-avec-rails/</guid>
      <description>Angulaire avec Rails 101 # Étape 1 : Créer une nouvelle application Rails # gem install rails -v 4.1 rails new angular_example Étape 2 : Supprimer Turbolinks # La suppression des turbolinks nécessite de les supprimer du Gemfile.
gem &#39;turbolinks&#39; Supprimez le require de app/assets/javascripts/application.js :
//= require turbolinks Étape 3 : Ajoutez AngularJS au pipeline d&amp;rsquo;actifs # Afin de faire fonctionner Angular avec le pipeline d&amp;rsquo;actifs Rails, nous devons ajouter au Gemfile :</description>
    </item>
    
    <item>
      <title>Authentification des utilisateurs dans Rails</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/authentification-des-utilisateurs-dans-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/authentification-des-utilisateurs-dans-rails/</guid>
      <description>Devise est un joyau très puissant, il vous permet de vous inscrire, de vous connecter et de vous déconnecter juste après l&amp;rsquo;installation. De plus, l&amp;rsquo;utilisateur peut ajouter des authentifications et des restrictions à ses applications. Devise est également livré avec ses propres vues, si l&amp;rsquo;utilisateur souhaite l&amp;rsquo;utiliser. Un utilisateur peut également personnaliser les formulaires d&amp;rsquo;inscription et de connexion en fonction de ses besoins et de ses exigences. Il convient de noter que Devise vous recommande d&amp;rsquo;implémenter votre propre connexion si vous débutez avec les rails.</description>
    </item>
    
    <item>
      <title>Validations d&#39;enregistrements actifs</title>
      <link>https://www.wikiod.com/fr/ruby-on-rails/validations-denregistrements-actifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/ruby-on-rails/validations-denregistrements-actifs/</guid>
      <description>Validation de la longueur d&amp;rsquo;un attribut # class Person &amp;lt; ApplicationRecord validates :name, length: { minimum: 2 } validates :bio, length: { maximum: 500 } validates :password, length: { in: 6..20 } validates :registration_number, length: { is: 6 } end Les options de contrainte de longueur possibles sont :
:minimum - L&amp;rsquo;attribut ne peut pas avoir une longueur inférieure à la longueur spécifiée. :maximum - L&amp;rsquo;attribut ne peut pas avoir plus que la longueur spécifiée.</description>
    </item>
    
  </channel>
</rss>

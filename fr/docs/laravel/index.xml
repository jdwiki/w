<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Laravel on </title>
    <link>https://www.wikiod.com/fr/docs/laravel/</link>
    <description>Recent content in Tutoriel Laravel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec Laravel</title>
      <link>https://www.wikiod.com/fr/laravel/demarrer-avec-laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/demarrer-avec-laravel/</guid>
      <description>Bienvenue dans la documentation des balises Laravel ! # [Laravel][1] est un framework PHP bien connu. Ici, vous apprendrez tout sur Laravel. En partant de as-simple-as sachant ce qu&amp;rsquo;est la programmation orientée objet, jusqu&amp;rsquo;au sujet avancé de développement de packages Laravel.
Ceci, comme toutes les autres balises de documentation Stackoverflow, est une documentation axée sur la communauté, donc si vous avez déjà des expériences sur Laravel, partagez vos connaissances en ajoutant vos propres sujets ou exemples !</description>
    </item>
    
    <item>
      <title>Éloquent</title>
      <link>https://www.wikiod.com/fr/laravel/eloquent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/eloquent/</guid>
      <description>L&amp;rsquo;Eloquent est un ORM (Object Relational Model) inclus avec le Laravel. Il implémente le modèle d&amp;rsquo;enregistrement actif et est utilisé pour interagir avec les bases de données relationnelles.
Nom de table
La convention consiste à utiliser le « snake_case » au pluriel pour les noms de table et le « StudlyCase » au singulier pour les noms de modèle. Par exemple:
Une table cats aurait un modèle Cat Une table jungle_cats aurait un modèle JungleCat Une table users aurait un modèle User Une table people aurait un modèle Person Eloquent essaiera automatiquement de lier votre modèle avec une table qui a le pluriel du nom du modèle, comme indiqué ci-dessus.</description>
    </item>
    
    <item>
      <title>Déployer l&#39;application Laravel 5 sur un hébergement mutualisé sur un serveur Linux</title>
      <link>https://www.wikiod.com/fr/laravel/deployer-lapplication-laravel-5-sur-un-hebergement-mutualise-sur-un-serveur-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/deployer-lapplication-laravel-5-sur-un-hebergement-mutualise-sur-un-serveur-linux/</guid>
      <description>Pour obtenir plus d&amp;rsquo;informations sur le déploiement du projet Laravel sur l&amp;rsquo;hébergement mutualisé, [visitez ce dépôt Github.][1]
[1] : https://github.com/petehouston/laravel-deploy-on-shared-hosting
Application Laravel 5 sur l&amp;rsquo;hébergement mutualisé sur un serveur Linux # Par défaut, le dossier &amp;ldquo;public&amp;rdquo; du projet Laravel expose le contenu de l&amp;rsquo;application qui peut être demandé de n&amp;rsquo;importe où par n&amp;rsquo;importe qui, le reste du code de l&amp;rsquo;application est invisible ou inaccessible à quiconque sans les autorisations appropriées.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/fr/laravel/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/validation/</guid>
      <description>Paramètres # Paramètre Détails requis Le champ est obligatoire parfois Exécuter des vérifications de validation sur un champ uniquement si ce champ est présent dans le tableau d&amp;rsquo;entrée e-mail L&amp;rsquo;entrée est un email valide max:valeur La valeur d&amp;rsquo;entrée doit être inférieure à la valeur maximale unique:db_table_name La valeur d&amp;rsquo;entrée doit être unique dans le nom de table de base de données fourni accepté Oui / Activé / 1 vrai, utile pour vérifier le TOS active_url Doit être une URL valide selon [checkdnsrr][1] après :date Le champ en cours de validation doit fournir une valeur postérieure à la date indiquée alpha Le champ en cours de validation doit être entièrement composé de caractères alphabétiques.</description>
    </item>
    
    <item>
      <title>Semis</title>
      <link>https://www.wikiod.com/fr/laravel/semis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/semis/</guid>
      <description>L&amp;rsquo;ensemencement de la base de données vous permet d&amp;rsquo;insérer des données, des données de test générales dans votre base de données. Par défaut, il existe une classe DatabaseSeeder sous database/seeds.
Faire fonctionner les semoirs peut être fait avec
php artisan db:seed Ou si vous ne souhaitez traiter qu&amp;rsquo;une seule classe
php artisan db:seed --class=TestSeederClass Comme pour toutes les commandes artisanales, vous avez accès à un large éventail de méthodes qui peuvent être trouvées dans la [documentation api][1]</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/fr/laravel/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/installation/</guid>
      <description>Installation # Les applications Laravel sont installées et gérées avec [Composer][1], un gestionnaire de dépendances PHP populaire. Il existe deux façons de créer une nouvelle application Laravel.
Via Compositeur # $ composer create-project laravel/laravel [foldername] Ou
$ composer create-project --prefer-dist laravel/laravel [foldername] Remplacez [nom du dossier] par le nom du répertoire dans lequel vous souhaitez installer votre nouvelle application Laravel. Il ne doit pas exister avant l&amp;rsquo;installation. Vous devrez peut-être également ajouter l&amp;rsquo;exécutable Composer à votre chemin système.</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/fr/laravel/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/collections/</guid>
      <description>Syntaxe # $collection = collect([&amp;lsquo;Valeur1&amp;rsquo;, &amp;lsquo;Valeur2&amp;rsquo;, &amp;lsquo;Valeur3&amp;rsquo;]); // Clés par défaut à 0, 1, 2, &amp;hellip;, Illuminate\Support\Collection fournit une interface fluide et pratique pour gérer des tableaux de données. Vous les avez peut-être utilisés sans le savoir, par exemple, les requêtes de modèle qui récupèrent plusieurs enregistrements renvoient une instance de Illuminate\Support\Collection.
Pour une documentation à jour sur les collections, vous pouvez trouver la documentation officielle [ici][1]
[1] : https://laravel.com/docs/master/collections</description>
    </item>
    
    <item>
      <title>Modèles de lame</title>
      <link>https://www.wikiod.com/fr/laravel/modeles-de-lame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/modeles-de-lame/</guid>
      <description>Laravel prend en charge le moteur de modélisation Blade prêt à l&amp;rsquo;emploi. Le moteur de modèles Blade nous permet de créer des modèles principaux et des modèles enfants chargeant le contenu à partir de modèles principaux. Nous pouvons avoir des variables, des boucles et des instructions conditionnelles à l&amp;rsquo;intérieur du fichier blade.
Vues : Introduction # Les vues, dans un modèle MVC, contiennent la logique sur comment pour présenter les données à l&amp;rsquo;utilisateur.</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/laravel/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/routage/</guid>
      <description>Routage de base # Le routage définit une carte entre les méthodes HTTP et les URI d&amp;rsquo;un côté, et les actions de l&amp;rsquo;autre. Les routes sont normalement écrites dans le fichier app/Http/routes.php.
Dans sa forme la plus simple, une route est définie en appelant la méthode HTTP correspondante sur la façade Route, en passant comme paramètres une chaîne qui correspond à l&amp;rsquo;URI (relatif à la racine de l&amp;rsquo;application) et un rappel.</description>
    </item>
    
    <item>
      <title>Migrations de bases de données</title>
      <link>https://www.wikiod.com/fr/laravel/migrations-de-bases-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/laravel/migrations-de-bases-de-donnees/</guid>
      <description>À l&amp;rsquo;intérieur d&amp;rsquo;une migration de base de données # Chaque migration doit avoir une méthode up() et une méthode down(). Le but de la méthode up() est d&amp;rsquo;effectuer les opérations requises pour mettre le schéma de la base de données dans son nouvel état, et le but de la méthode down() est d&amp;rsquo;inverser toutes les opérations effectuées par le up() méthode. S&amp;rsquo;assurer que la méthode down() inverse correctement vos opérations est essentiel pour pouvoir annuler les modifications du schéma de la base de données.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojurescript Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/clojurescript/</link>
    <description>Recent content in Clojurescript Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/clojurescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec clojurescript</title>
      <link>https://www.wikiod.com/fr/clojurescript/premiers-pas-avec-clojurescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/premiers-pas-avec-clojurescript/</guid>
      <description>Installation ou configuration # #Leiningen
Remarque : Si vous envisagez d&amp;rsquo;utiliser Leiningen, vous devez d&amp;rsquo;abord télécharger et installer JDK 6 ou une version plus récente.
Le moyen le plus simple de démarrer avec Clojure est de télécharger et d&amp;rsquo;installer Leiningen, l&amp;rsquo;outil standard de facto pour gérer les projets Clojure.
## Linux :
curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &amp;gt; ~/bin/lein export PATH=$PATH:~/bin chmod 755 ~/bin/lein lein ## OS X : Suivez les étapes Linux ci-dessus ou</description>
    </item>
    
    <item>
      <title>Premiers pas avec le réactif</title>
      <link>https://www.wikiod.com/fr/clojurescript/premiers-pas-avec-le-reactif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/premiers-pas-avec-le-reactif/</guid>
      <description>Reagent est une bibliothèque qui implémente des éléments de React.js dans ClojureScript, comme les créations de &amp;ldquo;balises&amp;rdquo; personnalisées, qui sont implémentées dans Reagent via des fonctions.
Interface utilisateur utilisant Reagent et Hiccup # Reagent est une interface entre ClojureScript et React. Il vous permet de définir des composants React efficaces en utilisant uniquement des fonctions et des données ClojureScript simples, qui décrivent votre interface utilisateur à l&amp;rsquo;aide d&amp;rsquo;une syntaxe de type Hiccup.</description>
    </item>
    
    <item>
      <title>Figwheel</title>
      <link>https://www.wikiod.com/fr/clojurescript/figwheel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/figwheel/</guid>
      <description>Figwheel reconstruit automatiquement votre code clojurescript lorsque les fichiers source changent et recharge le code dans le navigateur. Le rechargement fonctionne sans rafraîchir la page et vous pouvez conserver une partie de l&amp;rsquo;état de l&amp;rsquo;application entre les rechargements en utilisant defonce.
C&amp;rsquo;est une alternative au développement basé sur REPL (bien qu&amp;rsquo;il inclut également REPL). Au lieu de réévaluer les fonctions modifiées dans REPL, il recharge tout le code et vous pouvez utiliser println pour voir le résultat de l&amp;rsquo;évaluation de l&amp;rsquo;expression dans la console js du navigateur.</description>
    </item>
    
    <item>
      <title>lein-cljsbuild</title>
      <link>https://www.wikiod.com/fr/clojurescript/lein-cljsbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/lein-cljsbuild/</guid>
      <description>Plus de détails sur les paramètres de lein-clsjbuild peuvent être trouvés dans leur [exemple de projet][1].
[1] : https://github.com/emezeske/lein-cljsbuild/blob/1.1.4/sample.project.clj
Développement et production de ClojureScript # Ajoutez un nœud :cljsbuild comme celui-ci à votre fichier project.clj.
:cljsbuild { :builds { ;;Different target goals should have different names. ;;We have the dev build here :dev { ;;The ClojureScript code should reside in these directories :source-paths [&amp;quot;src-cljs&amp;quot;] :compiler { ;;This is the target output file ;;This will include none of the goog code.</description>
    </item>
    
    <item>
      <title>Événements JavaScript</title>
      <link>https://www.wikiod.com/fr/clojurescript/evenements-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/evenements-javascript/</guid>
      <description>Syntaxe # (goog.events dom-element event-type event-handler-function) ;; Crée un écouteur d&amp;rsquo;événement Google Closure (.addEventListener dom-element load-event) ;; Crée un écouteur d&amp;rsquo;événements JavaScript normal. Peut être spécifique au navigateur. Tous les noms d&amp;rsquo;événements Closure peuvent être trouvés dans leur [documentation sur l&amp;rsquo;énumération EventType][1].
[1] : https://google.github.io/closure-library/api/goog.events.EventType.html
Ajout d&amp;rsquo;un événement au bouton à l&amp;rsquo;aide de la bibliothèque de fermeture # (ns so-doc.events (:require [goog.dom :as dom] [goog.events :as events])) (defn handle-click [event] ;an event object is passed to all events (js/alert &amp;quot;button pressed&amp;quot;)) (events/listen (dom/getElement &amp;quot;button&amp;quot;); This is the dom element the event comes from (.</description>
    </item>
    
    <item>
      <title>Gestion d&#39;état avec recadrage (httpsgithub.comDay8re-frame)</title>
      <link>https://www.wikiod.com/fr/clojurescript/gestion-detat-avec-recadrage-httpsgithubcomday8re-frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/clojurescript/gestion-detat-avec-recadrage-httpsgithubcomday8re-frame/</guid>
      <description>Cela commence à devenir difficile lorsque nous pensons que clojurescript est un langage fonctionnellement pur, qui contient un état pour ses composants d&amp;rsquo;interface utilisateur. C&amp;rsquo;est tout simplement impossible.
Cependant, il est possible de séparer les composants individuels ainsi que leurs états. Nous pouvons le faire en stockant les données/l&amp;rsquo;état dans le réactif/l&amp;rsquo;atome. Mais lorsqu&amp;rsquo;il y a beaucoup d&amp;rsquo;états et de dépendances, les choses deviennent rapidement confuses et nous commençons à souhaiter une solution prête à l&amp;rsquo;emploi pour notre gestion des états.</description>
    </item>
    
  </channel>
</rss>

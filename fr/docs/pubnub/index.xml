<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel PubNub on </title>
    <link>https://www.wikiod.com/fr/docs/pubnub/</link>
    <description>Recent content in Tutoriel PubNub on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/pubnub/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec PubNub</title>
      <link>https://www.wikiod.com/fr/pubnub/premiers-pas-avec-pubnub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/premiers-pas-avec-pubnub/</guid>
      <description>Publier sur S&amp;rsquo;abonner Succès (se connecter) # Cet exemple montre comment s&amp;rsquo;abonner et, une fois l&amp;rsquo;opération réussie, publier un message sur ce canal. Il montre également l&amp;rsquo;ensemble complet des paramètres qui peuvent être inclus dans la fonction de rappel message de subscribe.
pubnub = PUBNUB({ publish_key : &#39;your_pub_key&#39;, subscribe_key : &#39;your_sub_key&#39; }); pubnub.subscribe({ channel : &amp;quot;channel-1&amp;quot;, message : function (message, envelope, channelOrGroup, time, channel) { console.log( &amp;quot;Message Received.&amp;quot; + &amp;quot;\n&amp;quot; + &amp;quot;Channel or Group: &amp;quot; + JSON.</description>
    </item>
    
    <item>
      <title>Présence</title>
      <link>https://www.wikiod.com/fr/pubnub/presence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/presence/</guid>
      <description>Présence en JavaScript # La présence fonctionne en envoyant des messages lorsqu&amp;rsquo;un utilisateur rejoint, quitte ou quitte un canal particulier. Vous pouvez écouter ces messages pour suivre qui est dans un canal et depuis combien de temps ils n&amp;rsquo;ont rien fait.
Tout d&amp;rsquo;abord, assurez-vous que chaque utilisateur a un UUID. Définissez ceci lorsque vous initialisez PubNub :
var pubnub = PUBNUB({ publish_key: &#39;my_pub_key&#39;, subscribe_key: &#39;my_sub_key&#39;, uuid: &#39;1234_some_uuid&#39; }); Désormais, lorsque vous vous connectez à un canal, ajoutez un écouteur supplémentaire pour les événements &amp;ldquo;join&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Bonjour le monde</title>
      <link>https://www.wikiod.com/fr/pubnub/bonjour-le-monde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/bonjour-le-monde/</guid>
      <description>&amp;lt;init&amp;gt; (c&amp;rsquo;est-à-dire require (&amp;quot;pubnub&amp;quot;))
Initialisez une instance de PubNub pour appeler des opérations.
Paramètre Détails clé_publiée String - votre clé de publication à partir de votre compte PubNub Admin Dashboard clé_abonnement String - votre clé de publication à partir de votre compte PubNub Admin Dashboard s&#39;abonner
Abonnez-vous à une ou plusieurs chaînes et fournissez un moyen de recevoir les messages publiés sur la ou les chaînes.
Paramètre Détails canal Chaîne - nom du canal ou liste de noms de canaux séparés par des virgules message fonction - la fonction de rappel qui recevra les messages publiés sur les canaux d&amp;rsquo;abonnement se connecter fonction - la fonction de rappel qui sera appelée lorsque l&amp;rsquo;abonnement aux canaux est réussi publier</description>
    </item>
    
    <item>
      <title>UUID</title>
      <link>https://www.wikiod.com/fr/pubnub/uuid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/uuid/</guid>
      <description>JavaScript/SDK Web # Pour JavaScript, voici le code que nous recommandons pour générer, conserver et récupérer un UUID. Cela pourrait être enveloppé dans une fonction appelée directement à partir de la fonction PUBNUB.init plutôt que dans la solution en ligne en deux étapes ci-dessous.
// get/create/store UUID var UUID = PUBNUB.db.get(&#39;session&#39;) || (function(){ var uuid = PUBNUB.uuid(); PUBNUB.db.set(&#39;session&#39;, uuid); return uuid; })(); // init PUBNUB object with UUID value var pubnub = PUBNUB.</description>
    </item>
    
    <item>
      <title>Filtrage des messages</title>
      <link>https://www.wikiod.com/fr/pubnub/filtrage-des-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/filtrage-des-messages/</guid>
      <description>[Stream Filter] [1] offre la possibilité de filtrer les messages sur le serveur avant qu&amp;rsquo;ils ne soient envoyés à un abonné est une demande populaire. Avec l&amp;rsquo;introduction de nos SDK v4.x, vous avez maintenant la possibilité de le faire en utilisant le message métadonnées.
[1] : https://www.pubnub.com/docs/ios-objective-c/stream-filtering-tutorial-sdk-v4
Empêcher de recevoir vos propres messages à l&amp;rsquo;aide d&amp;rsquo;Objective-C # La définition d&amp;rsquo;un filtre s&amp;rsquo;applique à tous les canaux auxquels vous vous abonnerez à partir de ce client particulier.</description>
    </item>
    
    <item>
      <title>Gestionnaire d&#39;accès</title>
      <link>https://www.wikiod.com/fr/pubnub/gestionnaire-dacces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/gestionnaire-dacces/</guid>
      <description>gestionnaire d&amp;rsquo;accès pubnub côté serveur # PubNub Access Manager (PAM) étend le cadre de sécurité existant de PubNub en permettant aux développeurs de créer et d&amp;rsquo;appliquer un accès sécurisé aux canaux sur l&amp;rsquo;ensemble du réseau en temps réel de PubNub.
Access Manager vous permet de gérer des autorisations granulaires pour vos applications et flux de données en temps réel, de créer plusieurs niveaux d&amp;rsquo;autorisation, d&amp;rsquo;accorder et de révoquer l&amp;rsquo;accès et d&amp;rsquo;auditer l&amp;rsquo;accès des utilisateurs.</description>
    </item>
    
    <item>
      <title>Rappels spécifiques au canal pour les SDK v4</title>
      <link>https://www.wikiod.com/fr/pubnub/rappels-specifiques-au-canal-pour-les-sdkv4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/rappels-specifiques-au-canal-pour-les-sdkv4/</guid>
      <description>Rappels spécifiques au canal du SDK JavaScript v4 # Dans [PubNub JavaScript v3][1], vous pouvez implémenter un rappel unique pour chaque chaîne à laquelle vous êtes abonné tant que vous appelez la fonction d&amp;rsquo;abonnement pour chaque chaîne et implémentez le rappel dans cet abonnement comme ceci :
var pubnub = new PubNub({ publishKey: &amp;quot;your-pub-key&amp;quot;, subscribeKey: &amp;quot;your-sub-key&amp;quot; }); pubnub.subscribe({ channel: &#39;ch1&#39;, message: function (m) { console.log(m + &amp;quot; ch1 callback&amp;quot;); } }); pubnub.</description>
    </item>
    
    <item>
      <title>Groupes de canaux du contrôleur de flux</title>
      <link>https://www.wikiod.com/fr/pubnub/groupes-de-canaux-du-controleur-de-flux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/groupes-de-canaux-du-controleur-de-flux/</guid>
      <description>Lorsque vous utilisez des groupes de canaux, vous ne devez pas ajouter ou supprimer des canaux dans vos applications côté client. Cet exemple montre comment ajouter des canaux à un groupe de canaux et s&amp;rsquo;abonner à ce groupe de canaux pour des raisons de simplicité. Mais dans un scénario réel, votre serveur devrait faire tout l&amp;rsquo;ajout/suppression de canaux vers/depuis les groupes de canaux. Lorsque vous activez Access Manager, vous aurez besoin de l&amp;rsquo;autorisation &amp;ldquo;gérer&amp;rdquo; pour ajouter/supprimer des canaux à/des groupes de canaux et vous ne devez jamais accorder l&amp;rsquo;autorisation &amp;ldquo;gérer&amp;rdquo; aux clients pour des raisons de sécurité.</description>
    </item>
    
    <item>
      <title>webhook</title>
      <link>https://www.wikiod.com/fr/pubnub/webhook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/webhook/</guid>
      <description>Webhook pubnub # Webhook Overview Un WebHook est un rappel HTTP : un HTTP POST qui se produit lorsque quelque chose se produit ; une simple notification d&amp;rsquo;événement via HTTP POST. Une application Web implémentant WebHooks publiera un message sur une URL lorsque certaines choses se produiront.
PubNub Presence Présence Pubnub tout sur la présence de l&amp;rsquo;utilisateur sur la plateforme pubnub. il fournit la présence de l&amp;rsquo;utilisateur lorsqu&amp;rsquo;il rejoint, quitte un canal ou lorsque l&amp;rsquo;état d&amp;rsquo;un utilisateur change.</description>
    </item>
    
    <item>
      <title>Stockage et lecture</title>
      <link>https://www.wikiod.com/fr/pubnub/stockage-et-lecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/pubnub/stockage-et-lecture/</guid>
      <description>Paramètres # Paramètre Type / Obligatoire / Par défaut Description canal String / Yes Spécifie le canal à partir duquel renvoyer les messages d&amp;rsquo;historique. inverser Boolean / No / false Le réglage sur true parcourra la ligne de temps en sens inverse en commençant par le message le plus ancien en premier. La valeur par défaut est false. Si les arguments start et end sont fournis, reverse est ignoré et les messages sont renvoyés en commençant par le message le plus récent.</description>
    </item>
    
  </channel>
</rss>

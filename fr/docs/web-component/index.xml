<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sur les composants Web on </title>
    <link>https://www.wikiod.com/fr/docs/web-component/</link>
    <description>Recent content in Tutoriel sur les composants Web on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/web-component/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le composant Web</title>
      <link>https://www.wikiod.com/fr/web-component/premiers-pas-avec-le-composant-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/web-component/premiers-pas-avec-le-composant-web/</guid>
      <description>Disponibilité # Implémentations natives
L&amp;rsquo;élément &amp;lt;template&amp;gt; est implémenté dans tous les navigateurs modernes :
Chrome, Bord, -Firefox, Opéra, -Safari, [&amp;hellip;][1] Les éléments personnalisés customElements.define(), Shadow DOM attachShadow() et les importations HTML &amp;lt;link rel=&amp;quot;import&amp;quot;&amp;gt; sont implémentés dans les dernières versions de Chrome et Opera.
Polyfills
Pour les autres navigateurs, vous pouvez utiliser une bibliothèque polyfill :
pour les Custom Elements : depuis [WebReflection][2] ou [Webcomponents.org][3], pour Shadow DOM : depuis [Webcomponents.org][5], pour Template : de [Neovov][4], pour les importations HTML : depuis [Webcomponents.</description>
    </item>
    
    <item>
      <title>Tester les composants Web</title>
      <link>https://www.wikiod.com/fr/web-component/tester-les-composants-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/web-component/tester-les-composants-web/</guid>
      <description>Éléments à prendre en compte lorsque nous voulons tester nos composants avec : des styles, des modèles, des classes de composants.
Webpack et plaisanterie # Jest est utilisé par Facebook pour tester tout le code JavaScript, y compris les applications React. L&amp;rsquo;une des philosophies de Jest est de fournir une expérience intégrée &amp;ldquo;sans configuration&amp;rdquo;. Nous avons observé que lorsque les ingénieurs reçoivent des outils prêts à l&amp;rsquo;emploi, ils finissent par écrire plus de tests, ce qui se traduit par des bases de code plus stables et plus saines.</description>
    </item>
    
  </channel>
</rss>

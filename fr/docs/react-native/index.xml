<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Réagir natif Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/react-native/</link>
    <description>Recent content in Réagir natif Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/react-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec react-native</title>
      <link>https://www.wikiod.com/fr/react-native/premiers-pas-avec-react-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/premiers-pas-avec-react-native/</guid>
      <description>Configuration pour Mac # Installation du gestionnaire de paquets Homebrew brew
Collez-le à une invite de terminal.
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Installation de l&amp;rsquo;IDE Xcode
Téléchargez-le en utilisant le lien ci-dessous ou trouvez-le sur Mac App Store
https://developer.apple.com/download/
REMARQUE : Si Xcode-beta.app est installé avec la version de production de Xcode.app, assurez-vous d&amp;rsquo;utiliser la version de production de l&amp;rsquo;outil xcodebuild. Vous pouvez le paramétrer avec :
sudo xcode-select -switch /Applications/Xcode.</description>
    </item>
    
    <item>
      <title>Android – Bouton de retour matériel</title>
      <link>https://www.wikiod.com/fr/react-native/androidbouton-de-retour-materiel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/androidbouton-de-retour-materiel/</guid>
      <description>Détecter les pressions sur le bouton de retour du matériel dans Android # BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() { if (!this.onMainScreen()) { this.goBack(); return true; } return false; }); Remarque : this.onMainScreen() et this.goBack() ne sont pas des fonctions intégrées, vous devez également les implémenter. (https://github.com/immidi/react-native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712)
Exemple de BackAndroid avec Navigator # Ceci est un exemple sur la façon d&amp;rsquo;utiliser BackAndroid de React Native avec le Navigator.
componentWillMount enregistre un écouteur d&amp;rsquo;événement pour gérer les taps sur le bouton de retour.</description>
    </item>
    
    <item>
      <title>Polices personnalisées</title>
      <link>https://www.wikiod.com/fr/react-native/polices-personnalisees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/polices-personnalisees/</guid>
      <description>Polices personnalisées pour Android et IOS # Créez un dossier dans votre dossier de projet et ajoutez-y vos polices. Exemple:
Exemple : Ici, nous avons ajouté un dossier à la racine appelé &amp;ldquo;mystuff&amp;rdquo;, puis &amp;ldquo;fonts&amp;rdquo;, et à l&amp;rsquo;intérieur, nous avons placé nos polices :
Ajoutez le code ci-dessous dans package.json.
{ ... &amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;path/to/fontfolder&amp;quot; ] }, ... } Pour l&amp;rsquo;exemple ci-dessus, notre package.json aurait maintenant un chemin de &amp;ldquo;mystuff/fonts&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Accessoires</title>
      <link>https://www.wikiod.com/fr/react-native/accessoires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/accessoires/</guid>
      <description>Les accessoires, ou propriétés, sont des données transmises aux composants enfants dans une application React. Les composants React rendent les éléments de l&amp;rsquo;interface utilisateur en fonction de leurs accessoires et de leur état interne. Les accessoires qu&amp;rsquo;un composant prend (et utilise) définissent comment il peut être contrôlé de l&amp;rsquo;extérieur.
Types d&amp;rsquo;accessoires # Le package prop-types vous permet d&amp;rsquo;ajouter une vérification de type d&amp;rsquo;exécution à votre composant qui garantit que les types d&amp;rsquo;accessoires transmis au composant sont corrects.</description>
    </item>
    
    <item>
      <title>Requêtes HTTP</title>
      <link>https://www.wikiod.com/fr/react-native/requetes-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/requetes-http/</guid>
      <description>Syntaxe # récupérer(url, options)[.then(&amp;hellip;)[.catch(&amp;hellip;)]]
L&amp;rsquo;API Fetch est l&amp;rsquo;API la plus couramment utilisée pour les requêtes HTTP. Il est moderne, flexible et utilise des promesses.
L&amp;rsquo;API XMLHttpRequest est également utilisée pour les requêtes HTTP et est principalement incluse afin que les développeurs puissent utiliser leurs bibliothèques existantes préférées, comme [ApiSauce][1].
L&amp;rsquo;API Websocket peut être utilisée pour les données &amp;ldquo;en direct&amp;rdquo; dans des scénarios en temps réel, comme dans les applications de chat.</description>
    </item>
    
    <item>
      <title>RefreshControl avec ListView</title>
      <link>https://www.wikiod.com/fr/react-native/refreshcontrol-avec-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/refreshcontrol-avec-listview/</guid>
      <description>Références:
RefreshControl : https://facebook.github.io/react-native/docs/refreshcontrol.html
ListView : https://facebook.github.io/react-native/docs/listview.html
Actualiser le contrôle avec l&amp;rsquo;exemple complet de ListView # Contrôle d&amp;rsquo;actualisation est utilisé à l&amp;rsquo;intérieur d&amp;rsquo;un ScrollView ou d&amp;rsquo;un ListView pour ajouter une fonctionnalité d&amp;rsquo;extraction pour actualiser. dans cet exemple, nous l&amp;rsquo;utiliserons avec ListView
&#39;use strict&#39; import React, { Component } from &#39;react&#39;; import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39; class RefreshControlExample extends Component { constructor () { super() this.state = { refreshing: false, dataSource: new ListView.</description>
    </item>
    
    <item>
      <title>Instructions de ligne de commande</title>
      <link>https://www.wikiod.com/fr/react-native/instructions-de-ligne-de-commande/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/instructions-de-ligne-de-commande/</guid>
      <description>Vérifier la version installée # $ react-native -v Exemple de sortie
react-native-cli: 0.2.0 react-native: n/a - not inside a React Native project directory //Output from different folder react-native: react-native: 0.30.0 // Output from the react native project directory Initialiser et démarrer avec le projet React Native # Pour initialiser
react-native init MyAwesomeProject Pour initialiser avec une version spécifique de React Native
react-native init --version=&amp;quot;0.36.0&amp;quot; MyAwesomeProject Pour exécuter pour Android
cd MyAwesomeProject react-native run-android Pour exécuter pour iOS</description>
    </item>
    
    <item>
      <title>Meilleures pratiques du navigateur</title>
      <link>https://www.wikiod.com/fr/react-native/meilleures-pratiques-du-navigateur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/meilleures-pratiques-du-navigateur/</guid>
      <description>Navigateur # Navigator est le navigateur par défaut de React Native. Un composant Navigator gère une pile d&amp;rsquo;objets route et fournit des méthodes pour gérer cette pile.
&amp;lt;Navigator ref={(navigator) =&amp;gt; { this.navigator = navigator }} initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }} renderScene={this.renderScene.bind(this)} configureScene={(route) =&amp;gt; Navigator.SceneConfigs.FloatFromRight} style={{ flex: 1 }} navigationBar={ // see &amp;quot;Managing the Navigation Bar&amp;quot; below &amp;lt;Navigator.NavigationBar routeMapper={this.routeMapper} /&amp;gt; } /&amp;gt; Gestion de la pile de routes
Tout d&amp;rsquo;abord, notez la prop initialRoute.</description>
    </item>
    
    <item>
      <title>API d&#39;animation</title>
      <link>https://www.wikiod.com/fr/react-native/api-danimation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/api-danimation/</guid>
      <description>Animer une image # class AnimatedImage extends Component { constructor(props){ super(props) this.state = { logoMarginTop: new Animated.Value(200) } } componentDidMount(){ Animated.timing( this.state.logoMarginTop, { toValue: 100 } ).start() } render () { return ( &amp;lt;View&amp;gt; &amp;lt;Animated.Image source={require(&#39;../images/Logo.png&#39;)} style={[baseStyles.logo, { marginTop: this.state.logoMarginTop }]} /&amp;gt; &amp;lt;/View&amp;gt; ) } } Cet exemple anime la position de l&amp;rsquo;image en modifiant la marge.</description>
    </item>
    
    <item>
      <title>Disposition</title>
      <link>https://www.wikiod.com/fr/react-native/disposition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/react-native/disposition/</guid>
      <description>Boîte flexible # Flexbox est un mode de mise en page permettant la disposition des éléments sur une page de telle sorte que les éléments se comportent de manière prévisible lorsque la mise en page doit s&amp;rsquo;adapter à différentes tailles d&amp;rsquo;écran et à différents dispositifs d&amp;rsquo;affichage. Par défaut, flexbox organise les enfants dans une colonne. Mais vous pouvez le changer en ligne en utilisant flexDirection: &#39;row&#39;.
flexDirection # const Direction = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.</description>
    </item>
    
  </channel>
</rss>

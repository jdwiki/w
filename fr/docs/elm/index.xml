<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Elm on </title>
    <link>https://www.wikiod.com/fr/docs/elm/</link>
    <description>Recent content in Tutoriel du langage Elm on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/elm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage Elm</title>
      <link>https://www.wikiod.com/fr/elm/premiers-pas-avec-le-langage-elm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/premiers-pas-avec-le-langage-elm/</guid>
      <description>Installation # Pour commencer le développement avec Elm, vous devez installer un ensemble d&amp;rsquo;outils appelé [elm-platform][1].
Il comprend : [elm-make][2], [elm-reactor][3], [elm-repl][4] et [elm-package][5].
Tous ces outils sont disponibles via CLI, c&amp;rsquo;est-à-dire que vous pouvez les utiliser depuis votre terminal.
Choisissez l&amp;rsquo;une des méthodes suivantes pour installer Elm :
Utilisation du programme d&amp;rsquo;installation # Téléchargez le programme d&amp;rsquo;installation à partir du [site officiel] [6] et suivez l&amp;rsquo;assistant d&amp;rsquo;installation.
Utiliser npm # Vous pouvez utiliser [Node Package Manager][7] pour installer la plate-forme Elm.</description>
    </item>
    
    <item>
      <title>Ports (interopérabilité JS)</title>
      <link>https://www.wikiod.com/fr/elm/ports-interoperabilite-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/ports-interoperabilite-js/</guid>
      <description>Syntaxe # Elm (réception) : port functionName : (value -&amp;gt; msg) -&amp;gt; Sub msg JS (envoi) : app.ports.functionName.send(value) Elm (envoi) : port functionName : args -&amp;gt; Cmd msg JS (réception): app.ports.functionName.subscribe(function(args) { &amp;hellip; }); Consultez http://guide.elm-lang.org/interop/javascript.html de The Elm Guide pour vous aider à comprendre ces exemples.
Sortant # Les ports sortants sont utilisés comme commandes, que vous renvoyez depuis votre fonction update.
Côté orme # Définir le port sortant :</description>
    </item>
    
    <item>
      <title>L&#39;architecture de l&#39;orme</title>
      <link>https://www.wikiod.com/fr/elm/larchitecture-de-lorme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/larchitecture-de-lorme/</guid>
      <description>La méthode recommandée pour structurer vos applications est appelée « l&amp;rsquo;architecture Elm ».
Le programme le plus simple consiste en un enregistrement model stockant toutes les données susceptibles d&amp;rsquo;être mises à jour, un type d&amp;rsquo;union Msg qui définit la manière dont votre programme met à jour ces données, une fonction update qui prend le modèle et un Msg et renvoie un nouveau modèle, et une fonction view qui prend un modèle et renvoie le HTML que votre page affichera.</description>
    </item>
    
    <item>
      <title>Listes et itération</title>
      <link>https://www.wikiod.com/fr/elm/listes-et-iteration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/listes-et-iteration/</guid>
      <description>La Liste (liste liée) brille en accès séquentiel :
accéder au premier élément ajouter au début de la liste suppression du début de la liste D&amp;rsquo;un autre côté, ce n&amp;rsquo;est pas idéal pour l&amp;rsquo;accès aléatoire (c&amp;rsquo;est-à-dire l&amp;rsquo;obtention du nième élément) et la traversation dans l&amp;rsquo;ordre inverse, et vous pourriez avoir plus de chance (et de meilleures performances) avec la structure de données Array.
Création d&amp;rsquo;une liste par plage # Avant la 0.</description>
    </item>
    
    <item>
      <title>Débogage</title>
      <link>https://www.wikiod.com/fr/elm/debogage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/debogage/</guid>
      <description>Syntaxe # Debug.log &amp;ldquo;tag&amp;rdquo; anyValue Debug.log prend deux paramètres, une String pour étiqueter la sortie de débogage dans la console (afin que vous sachiez d&amp;rsquo;où elle vient / à quoi correspond le message), et une valeur de n&amp;rsquo;importe quel type. Debug.log exécute l&amp;rsquo;effet secondaire de la journalisation de la balise et de la valeur dans la console JavaScript, puis renvoie la valeur. L&amp;rsquo;implémentation dans JS pourrait ressembler à :
function log (tag, value){ console.</description>
    </item>
    
    <item>
      <title>Types, variables de type et constructeurs de type</title>
      <link>https://www.wikiod.com/fr/elm/types-variables-de-type-et-constructeurs-de-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/types-variables-de-type-et-constructeurs-de-type/</guid>
      <description>Veuillez jouer avec ces concepts vous-même pour vraiment les maîtriser ! Le elm-repl (voir [Introduction au REPL][1]) est probablement un bon endroit pour jouer avec le code ci-dessus. Vous pouvez également jouer avec [elm-repl en ligne][2].
[1] : https://www.wikiod.com/fr/elm/premiers-pas-avec-le-langage-elm#REPL
[2] : http://elmrepl.cuberoot.in/
Amélioration de la sécurité des types à l&amp;rsquo;aide de nouveaux types # Les types d&amp;rsquo;alias réduisent le passe-partout et améliorent la lisibilité, mais ils ne sont pas plus sûrs que le type alias lui-même.</description>
    </item>
    
    <item>
      <title>Fonctions et application partielle</title>
      <link>https://www.wikiod.com/fr/elm/fonctions-et-application-partielle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/fonctions-et-application-partielle/</guid>
      <description>Syntaxe # &amp;ndash; définir une fonction sans arguments ressemble à la simple définition d&amp;rsquo;une valeur language = &amp;ldquo;orme&amp;rdquo; &amp;ndash; appeler une fonction sans argument en indiquant son nom Langue &amp;ndash; les paramètres sont séparés par des espaces et suivent le nom de la fonction ajouter x y = x + y &amp;ndash; appeler une fonction de la même manière ajouter 5 2 &amp;ndash; appliquer partiellement une fonction en ne fournissant que certains de ses paramètres incrément = ajouter 1 &amp;ndash; utilisez l&amp;rsquo;opérateur |&amp;gt; pour passer l&amp;rsquo;expression de gauche à la fonction de droite dix = 9 |&amp;gt; incrément &amp;ndash; le &amp;lt;| l&amp;rsquo;opérateur passe l&amp;rsquo;expression de droite à la fonction de gauche incrément &amp;lt;| ajouter 5 4 &amp;ndash; enchaîner/composer deux fonctions avec l&amp;rsquo;opérateur &amp;raquo; backsYell = String.</description>
    </item>
    
    <item>
      <title>Json.Decode</title>
      <link>https://www.wikiod.com/fr/elm/jsondecode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/jsondecode/</guid>
      <description>Json.Decode expose deux fonctions pour décoder une charge utile, la première est decodeValue qui essaie de décoder un Json.Encode.Value, la seconde est decodeString qui essaie de décoder une chaîne JSON. Les deux fonctions prennent 2 paramètres, un décodeur et une chaîne Json.Encode.Value ou Json.
Pré-décoder un champ et décoder le reste en fonction de cette valeur décodée # Les exemples suivants peuvent être testés sur https://ellie-app.com/m9vmQ8NcMc/0.
import Html exposing (..) import Json.</description>
    </item>
    
    <item>
      <title>Collecte de tuples de données, d&#39;enregistrements et de dictionnaires</title>
      <link>https://www.wikiod.com/fr/elm/collecte-de-tuples-de-donnees-denregistrements-et-de-dictionnaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/collecte-de-tuples-de-donnees-denregistrements-et-de-dictionnaires/</guid>
      <description>Dictionnaires # Les dictionnaires sont implémentés dans une bibliothèque centrale [Dict][1].
Un dictionnaire associant des clés uniques à des valeurs. Les clés peuvent être n&amp;rsquo;importe lesquelles genre comparable. Cela inclut Int, Float, Time, Char, String et tuples ou listes de types comparables.
Les opérations d&amp;rsquo;insertion, de suppression et de requête prennent toutes un temps O(log n).
Contrairement aux tuples et aux enregistrements, les dictionnaires peuvent changer leur structure, c&amp;rsquo;est-à-dire qu&amp;rsquo;il est possible d&amp;rsquo;ajouter et de supprimer des clés.</description>
    </item>
    
    <item>
      <title>Correspondance de modèle</title>
      <link>https://www.wikiod.com/fr/elm/correspondance-de-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elm/correspondance-de-modele/</guid>
      <description>Argument déconstruit de type unique # type ProjectIdType = ProjectId String getProject : ProjectIdType -&amp;gt; Cmd Msg getProject (ProjectId id) = Http.get &amp;lt;| &amp;quot;/projects/&amp;quot; ++ id Arguments de la fonction # type Dog = Dog String dogName1 dog = case dog of Dog name -&amp;gt; name dogName2 (Dog name) -&amp;gt; name dogName1 et dogName2 sont équivalents. Notez que cela ne fonctionne que pour les ADT qui ont un seul constructeur.</description>
    </item>
    
  </channel>
</rss>

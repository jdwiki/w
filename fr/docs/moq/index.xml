<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>moq Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/moq/</link>
    <description>Recent content in moq Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/moq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec moq</title>
      <link>https://www.wikiod.com/fr/moq/demarrer-avec-moq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/moq/demarrer-avec-moq/</guid>
      <description>Installation ou configuration # Sélectionnez le projet dont vous souhaitez ajouter la référence à Moq. Ouvrez Nuget pour ce projet. Sélectionnez &amp;ldquo;Parcourir&amp;rdquo; puis tapez &amp;ldquo;moq&amp;rdquo; dans le champ de recherche. Sélectionnez &amp;ldquo;Moq&amp;rdquo; puis cliquez sur Installer. [![entrez la description de l&amp;rsquo;image ici][1]][1]
Suivre ces étapes installera le package Moq et y ajoutera une référence dans les références de projet sélectionnées. Après avoir terminé ces étapes, Moq peut être utilisé dans le projet de test unitaire en le déclarant simplement dans les fichiers de classes de test :</description>
    </item>
    
    <item>
      <title>Validation de la commande d&#39;appel</title>
      <link>https://www.wikiod.com/fr/moq/validation-de-la-commande-dappel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/moq/validation-de-la-commande-dappel/</guid>
      <description>Validation implicite de l&amp;rsquo;ordre d&amp;rsquo;appel # Lorsqu&amp;rsquo;une méthode à tester utilise les informations d&amp;rsquo;un appel pour les transmettre aux appels suivants, une approche qui peut être utilisée pour s&amp;rsquo;assurer que les méthodes sont appelées dans l&amp;rsquo;ordre attendu consiste à configurer les attentes pour refléter ce flux de données.
Étant donné la méthode à tester:
public void MethodToTest() { var str = _utility.GetInitialValue(); str = _utility.PrefixString(str); str = _utility.ReverseString(str); _target.DoStuff(str); } Les attentes peuvent être définies pour transmettre des données de GetInitialValue à PrefixString et ReverseString à DoStuff, où les informations sont vérifiées.</description>
    </item>
    
    <item>
      <title>Comportement moqueur</title>
      <link>https://www.wikiod.com/fr/moq/comportement-moqueur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/moq/comportement-moqueur/</guid>
      <description>Syntaxe # mock.Setup(expression).Returns(value) //Chaque fois que la méthode est appelée dans l&amp;rsquo;expression, la valeur sera renvoyée Paramètres # Paramètre Détails expression Expression lambda qui spécifie l&amp;rsquo;appel de méthode. Méthode No-Argument se moquant # interface Mockable { bool DoSomething(); } var mock = new Mock&amp;lt;Mockable&amp;gt;(); mock.Setup(x =&amp;gt; x.DoSomething()).Returns(true); var result = mock.Object.DoSomething(); //true Se moquer des membres protégés # Pour vous moquer d&amp;rsquo;un membre protégé, vous devez d&amp;rsquo;abord inclure les éléments suivants en haut de votre appareil de test :</description>
    </item>
    
    <item>
      <title>Propriétés moqueuses</title>
      <link>https://www.wikiod.com/fr/moq/proprietes-moqueuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/moq/proprietes-moqueuses/</guid>
      <description>Propriétés de substitution automatique # Parfois, vous voulez vous moquer d&amp;rsquo;une classe ou d&amp;rsquo;une interface et faire en sorte que ses propriétés se comportent comme s&amp;rsquo;il s&amp;rsquo;agissait de simples getters et setters. Comme il s&amp;rsquo;agit d&amp;rsquo;une exigence courante, Moq fournit une méthode de raccourci pour configurer toutes les propriétés d&amp;rsquo;un mock pour stocker et récupérer des valeurs :
// SetupAllProperties tells mock to implement setter/getter funcationality var userMock = new Mock&amp;lt;IUser&amp;gt;().</description>
    </item>
    
    <item>
      <title>Se moquer des interfaces communes</title>
      <link>https://www.wikiod.com/fr/moq/se-moquer-des-interfaces-communes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/moq/se-moquer-des-interfaces-communes/</guid>
      <description>IEnumerable moqueur # Se moquer d&amp;rsquo;une interface qui hérite de IEnumerable pour renvoyer des données prédéfinies est assez simple. En supposant les classes suivantes :
public class DataClass { public int Id { get; set; } } public interface IEnumerableClass : IEnumerable&amp;lt;DataClass&amp;gt; { } L&amp;rsquo;approche suivante peut être adoptée. Tout d&amp;rsquo;abord, créez une liste contenant les informations qui doivent être renvoyées par le mock :
IList&amp;lt;DataClass&amp;gt; list = new List&amp;lt;DataClass&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { list.</description>
    </item>
    
  </channel>
</rss>

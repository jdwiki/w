<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Twilio on </title>
    <link>https://www.wikiod.com/fr/docs/twilio/</link>
    <description>Recent content in Tutoriel Twilio on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/twilio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Twilio</title>
      <link>https://www.wikiod.com/fr/twilio/premiers-pas-avec-twilio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/premiers-pas-avec-twilio/</guid>
      <description>Envoi d&amp;rsquo;un message SMS à partir d&amp;rsquo;un numéro américain # Voici comment envoyer un SMS depuis un numéro américain à l&amp;rsquo;aide du SDK Node.js de Twilio.
Vous devez d&amp;rsquo;abord installer le client Node.js en utilisant :
npm install twilio Ensuite, vous devez [créer un compte sur leur site Web][1].
Une fois que vous avez un compte, vous aurez besoin du SID du compte et du jeton d&amp;rsquo;authentification que vous pouvez trouver sur le tableau de bord en ligne.</description>
    </item>
    
    <item>
      <title>Envoyer des messages en Python</title>
      <link>https://www.wikiod.com/fr/twilio/envoyer-des-messages-en-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/envoyer-des-messages-en-python/</guid>
      <description>Syntaxe # classe twilio.rest.resources.Messages(*args, **kwargs) Paramètres # Paramètre Détails à (str) Le numéro de téléphone de destination. from_ (str) Le numéro de téléphone envoyant ce message (doit être un numéro Twilio vérifié) corps (str) Le message que vous souhaitez envoyer, limité à 160 caractères. status_callback Une URL que Twilio publiera lorsque votre message sera traité. application_sid (chaîne) Le sid de 34 caractères de l&amp;rsquo;application que Twilio doit utiliser pour gérer cet appel téléphonique.</description>
    </item>
    
    <item>
      <title>Comment envoyer un SMS avec Ruby</title>
      <link>https://www.wikiod.com/fr/twilio/comment-envoyer-un-sms-avec-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/comment-envoyer-un-sms-avec-ruby/</guid>
      <description>Utilisation de la gemme Twilio # Cela suppose que vous avez un compte twilio et que vous avez acheté/réservé un numéro de téléphone&amp;hellip;
Si vous utilisez bundler, ajoutez la ligne suivante à votre Gemfile pour inclure twilio-ruby dans votre projet :
gem &#39;twilio-ruby&#39; sinon, entrez gem install twilio-ruby sur la ligne de commande. Vous pourriez avoir besoin de sudo si vous utilisez le système Ruby et non ruby-env, etc.
et le code</description>
    </item>
    
    <item>
      <title>Comment recevoir des SMS avec Ruby on Rails</title>
      <link>https://www.wikiod.com/fr/twilio/comment-recevoir-des-sms-avec-ruby-on-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/comment-recevoir-des-sms-avec-ruby-on-rails/</guid>
      <description>Utilisation de la gemme Twilio # En supposant que vous ayez un compte Twilio et identifiants API, ajoutez ce qui suit à votre Gemfile :
gem &#39;twilio-ruby&#39; Alternativement, vous pouvez gem install twilio-ruby.
Pour que Twilio envoie un SMS entrant vers une route particulière dans votre application, vous devez configurer l&amp;rsquo;URL de messagerie pour votre numéro de téléphone. Une fois cela fait, vous devez configurer une route dans config/routes.rb :</description>
    </item>
    
    <item>
      <title>Envoyer un SMS en utilisant Bash et cURL</title>
      <link>https://www.wikiod.com/fr/twilio/envoyer-un-sms-en-utilisant-bash-et-curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/envoyer-un-sms-en-utilisant-bash-et-curl/</guid>
      <description>Syntaxe # https://api.twilio.com/{Api version}/Accounts/{AccountSid}/Messages.json {body} Paramètres # Paramètre Détails {Version API} Date de versioning de l&amp;rsquo;API. par exemple. 2010-04-01 {Account Sid} Le numéro de compte. Démarre AC {corps} Corps encodé d&amp;rsquo;URL comprenant From, To, Body et MessagingServiceSid Envoyer un seul message en utilisant un identifiant d&amp;rsquo;expéditeur alphanumérique # Une requête HTTP POST est envoyée à une URL au format : &amp;ldquo;https://api.twilio.com/2xxx-xx-xx/Accounts/[AccountSid]/Messages.json
L&amp;rsquo;exemple ci-dessous utilise une chaîne alphanumérique comme expéditeur. Au moment de la rédaction, un identifiant d&amp;rsquo;expéditeur ne peut être ajouté que via une demande de service Twlio.</description>
    </item>
    
    <item>
      <title>Envoi de messages dans Node.js</title>
      <link>https://www.wikiod.com/fr/twilio/envoi-de-messages-dans-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/twilio/envoi-de-messages-dans-nodejs/</guid>
      <description>Twilio vous permet d&amp;rsquo;envoyer et de recevoir des messages texte avec Node.js en utilisant la bibliothèque twilio-node pour passer des appels. Ce guide suppose que vous avez déjà configuré un compte avec Twilio et que vous disposez du SID de votre compte et du jeton d&amp;rsquo;authentification de la [console Twilio] (www.twilio.com/console).
Paramètres # Paramètre Détails à Un numéro de téléphone valide pour recevoir le message de Un numéro Twilio qui vous est attribué corps Le corps du message texte limité à 1600 caractères Rappel d&amp;rsquo;état Une URL que Twilio publie lorsqu&amp;rsquo;un statut de message change prixmax Définir le prix maximum d&amp;rsquo;un message période de validité Le nombre de secondes pendant lesquelles le message restera dans la file d&amp;rsquo;attente Twilio fournir des commentaires Valeur booléenne, lorsqu&amp;rsquo;elle est définie sur true mediaUrl Une URL contenant un contenu gif, png ou jpeg qui sera envoyé avec le message 2.</description>
    </item>
    
  </channel>
</rss>

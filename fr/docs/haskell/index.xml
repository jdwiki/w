<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Didacticiel du langage Haskell on </title>
    <link>https://www.wikiod.com/fr/docs/haskell/</link>
    <description>Recent content in Didacticiel du langage Haskell on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec le langage Haskell</title>
      <link>https://www.wikiod.com/fr/haskell/premiers-pas-avec-le-langage-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/premiers-pas-avec-le-langage-haskell/</guid>
      <description>Bonjour le monde! # Un basique [&amp;ldquo;Hello, World!&amp;rdquo; program][1] en Haskell peut être exprimé de manière concise en une ou deux lignes :
main :: IO () main = putStrLn &amp;quot;Hello, World!&amp;quot; La première ligne est une annotation de type facultative, indiquant que main est une valeur de type IO (), représentant une action d&amp;rsquo;E/S qui &amp;ldquo;calcule&amp;rdquo; une valeur de type () (lire &amp;ldquo;unité&amp;rdquo; ; la tuple vide ne transmettant aucune information) en plus d&amp;rsquo;effectuer des effets secondaires sur le monde extérieur (ici, l&amp;rsquo;impression d&amp;rsquo;une chaîne sur le terminal).</description>
    </item>
    
    <item>
      <title>Lentille</title>
      <link>https://www.wikiod.com/fr/haskell/lentille/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/lentille/</guid>
      <description>[Lens][1] est une bibliothèque pour Haskell qui fournit des lentilles, des isomorphismes, des plis, des traversées, des getters et des setters, qui expose une interface uniforme pour interroger et manipuler des structures arbitraires, un peu comme les concepts d&amp;rsquo;accesseur et de mutateur de Java.
[1] : https://hackage.haskell.org/package/lens
Qu&amp;rsquo;est-ce qu&amp;rsquo;une lentille ? # Les lentilles (et autres optiques) nous permettent de séparer la description de * comment * nous voulons accéder à certaines données de * ce que * nous voulons en faire.</description>
    </item>
    
    <item>
      <title>Extensions de langage GHC courantes</title>
      <link>https://www.wikiod.com/fr/haskell/extensions-de-langage-ghc-courantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/extensions-de-langage-ghc-courantes/</guid>
      <description>Ces extensions de langage sont généralement disponibles lors de l&amp;rsquo;utilisation du compilateur Glasgow Haskell (GHC) car elles ne font pas partie du [Haskell 2010 language Report][1] approuvé. Pour utiliser ces extensions, il faut soit informer le compilateur en utilisant un [flag][4] ou placer [un programme LANGUAGEa][2] avant le mot clé module dans un fichier. La documentation officielle se trouve dans la [section 7] [3] du guide de l&amp;rsquo;utilisateur GCH.
Le format du programme LANGUAGE est {-# LANGUAGE ExtensionOne, ExtensionTwo .</description>
    </item>
    
    <item>
      <title>Monades gratuites</title>
      <link>https://www.wikiod.com/fr/haskell/monades-gratuites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/monades-gratuites/</guid>
      <description>Les monades libres divisent les calculs monadiques en structures de données et en interpréteurs # Par exemple, un calcul impliquant des commandes pour lire et écrire à partir de l&amp;rsquo;invite :
Nous décrivons d&amp;rsquo;abord les &amp;ldquo;commandes&amp;rdquo; de notre calcul en tant que type de données Functor
{-# LANGUAGE DeriveFunctor #-} data TeletypeF next = PrintLine String next | ReadLine (String -&amp;gt; next) deriving Functor Ensuite, nous utilisons Free pour créer la &amp;ldquo;Monade libre sur TeletypeF&amp;rdquo; et construisons quelques opérations de base.</description>
    </item>
    
    <item>
      <title>IO</title>
      <link>https://www.wikiod.com/fr/haskell/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/io/</guid>
      <description>Obtenir le &amp;lsquo;a&amp;rsquo; &amp;ldquo;hors de&amp;rdquo; &amp;lsquo;IO a&amp;rsquo; # Une question courante est &amp;ldquo;J&amp;rsquo;ai une valeur de IO a, mais je veux faire quelque chose à cette valeur a : comment puis-je y accéder?&amp;rdquo; Comment opérer sur des données qui viennent de l&amp;rsquo;extérieur (par exemple, incrémenter un nombre tapé par l&amp;rsquo;utilisateur) ?
Le fait est que si vous utilisez une fonction pure sur des données obtenues de manière impure, le résultat est toujours impur.</description>
    </item>
    
    <item>
      <title>Monades</title>
      <link>https://www.wikiod.com/fr/haskell/monades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/monades/</guid>
      <description>Une monade est un type de données d&amp;rsquo;actions composables. Monad est la classe des constructeurs de type dont les valeurs représentent de telles actions. IO est peut-être le plus reconnaissable : une valeur de IO a est une &amp;ldquo;recette pour récupérer une valeur a du monde réel&amp;rdquo;.
Nous disons qu&amp;rsquo;un constructeur de type m (tel que [] ou Maybe) forme une monade s&amp;rsquo;il existe une instance Monad m satisfaisant certaines lois sur la composition des actions.</description>
    </item>
    
    <item>
      <title>Pliable</title>
      <link>https://www.wikiod.com/fr/haskell/pliable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/pliable/</guid>
      <description>Foldable est la classe des types t :: * -&amp;gt; * qui admettent une opération de pliage. Un pli agrège les éléments d&amp;rsquo;une structure dans un ordre bien défini, à l&amp;rsquo;aide d&amp;rsquo;une fonction de combinaison.
Si t est Foldable cela signifie que pour toute valeur t a nous savons comment accéder à tous les éléments de a depuis &amp;ldquo;l&amp;rsquo;intérieur&amp;rdquo; de t a dans un ordre linéaire fixe. C&amp;rsquo;est le sens de foldMap :: Monoid m =&amp;gt; (a -&amp;gt; m) -&amp;gt; (t a -&amp;gt; m) : nous &amp;ldquo;visitons&amp;rdquo; chaque élément avec une fonction de résumé et brisons tous les résumés ensemble.</description>
    </item>
    
    <item>
      <title>Traversable</title>
      <link>https://www.wikiod.com/fr/haskell/traversable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/traversable/</guid>
      <description>La classe Traversable généralise la fonction anciennement connue sous le nom de mapM :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b] pour travailler avec des effets Applicatifs sur des structures autres que des listes.
Traversée d&amp;rsquo;une structure en sens inverse # Une traversée peut être exécutée dans la direction opposée à l&amp;rsquo;aide du foncteur applicatif Backwards , qui retourne un applicatif existant afin que les effets composés se produisent dans l&amp;rsquo;ordre inverse.</description>
    </item>
    
    <item>
      <title>Littéraux surchargés</title>
      <link>https://www.wikiod.com/fr/haskell/litteraux-surcharges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/litteraux-surcharges/</guid>
      <description>Littéraux entiers # est un chiffre sans point décimal
par exemple 0, 1, 42, &amp;hellip;
est implicitement appliqué à fromInteger qui fait partie de la classe de type [Num] (https://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#t:Num) donc il a bien le type Num a =&amp;gt; a - c&amp;rsquo;est-à-dire qu&amp;rsquo;il peut avoir n&amp;rsquo;importe quel type qui est une instance de Num
Littéraux fractionnaires # est un chiffre avec un point décimal
par exemple 0.0, -0.1111, &amp;hellip;
est implicitement appliqué à fromRational qui fait partie de la [classe de type Fractional] (https://hackage.</description>
    </item>
    
    <item>
      <title>Théorie des catégories</title>
      <link>https://www.wikiod.com/fr/haskell/theorie-des-categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/haskell/theorie-des-categories/</guid>
      <description>La théorie des catégories comme système d&amp;rsquo;organisation de l&amp;rsquo;abstraction # La théorie des catégories est une théorie mathématique moderne et une branche de l&amp;rsquo;algèbre abstraite axée sur la nature de la connexité et de la relation. Il est utile pour donner des bases solides et un langage commun à de nombreuses abstractions de programmation hautement réutilisables. Haskell utilise la théorie des catégories comme source d&amp;rsquo;inspiration pour certaines des classes de types de base disponibles à la fois dans la bibliothèque standard et dans plusieurs bibliothèques tierces populaires.</description>
    </item>
    
  </channel>
</rss>

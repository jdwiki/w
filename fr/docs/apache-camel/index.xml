<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache-camel Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/apache-camel/</link>
    <description>Recent content in Apache-camel Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/apache-camel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec apache-camel</title>
      <link>https://www.wikiod.com/fr/apache-camel/premiers-pas-avec-apache-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-camel/premiers-pas-avec-apache-camel/</guid>
      <description>Installation ou configuration # Instructions détaillées sur l&amp;rsquo;ajout des dépendances Camel requises.
Dépendance Maven L&amp;rsquo;une des façons les plus courantes d&amp;rsquo;inclure Apache Camel dans votre application consiste à utiliser une dépendance Maven. En ajoutant le bloc de dépendance ci-dessous, Maven résoudra les bibliothèques et les dépendances Camel pour vous.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.17.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Grade Une autre façon courante d&amp;rsquo;inclure Apache Camel dans votre application consiste à utiliser une dépendance Gradle.</description>
    </item>
    
    <item>
      <title>PubSub utilisant Camel &#43; Redis</title>
      <link>https://www.wikiod.com/fr/apache-camel/pubsub-utilisant-camel--redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-camel/pubsub-utilisant-camel--redis/</guid>
      <description>En utilisant l&amp;rsquo;éditeur :
producerTemplate.asyncSendBody(&amp;quot;direct:myprocedure&amp;quot;, massageBody); Utilisation de &amp;ldquo;createProducer()&amp;rdquo; dans ManagedCamel pour créer le ProducerTemplate.
RedisPublisher # public class RedisPublisher extends RouteBuilder { public static final String CAMEL_REDIS_CHANNEL = &amp;quot;CamelRedis.Channel&amp;quot;; public static final String CAMEL_REDIS_MESSAGE = &amp;quot;CamelRedis.Message&amp;quot;; @Value(&amp;quot;${redis.host}&amp;quot;) private String redisHost; @Value(&amp;quot;${redis.port}&amp;quot;) private int redisPort; @Value(&amp;quot;${redis.channel.mychannel}&amp;quot;) private String redisChannel; private String producerName; @Required public void setProducerName(String producerName) { this.producerName = producerName; } @Override public void configure() throws Exception { from(producerName) .</description>
    </item>
    
    <item>
      <title>Tests d&#39;intégration sur des routes existantes avec Apache-Camel et Spring (et DBUnit)</title>
      <link>https://www.wikiod.com/fr/apache-camel/tests-dintegration-sur-des-routes-existantes-avec-apache-camel-et-spring-et-dbunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-camel/tests-dintegration-sur-des-routes-existantes-avec-apache-camel-et-spring-et-dbunit/</guid>
      <description>Le but de ce wiki est de vous montrer comment exécuter des tests d&amp;rsquo;intégration à l&amp;rsquo;aide d&amp;rsquo;Apache Camel.
Plus précisément, ce faisant vous pourrez lancer une route existante du début à la fin (Avec ou sans votre vraie base de données) ou intercepter l&amp;rsquo;échange entre chaque partie de la route et tester si vos en-têtes ou corps sont corrects ou non.
Le projet sur lequel j&amp;rsquo;ai fait cela utilise Spring classique avec une configuration xml et DBUnit pour simuler une base de données de test.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oups Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/oop/</link>
    <description>Recent content in oups Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec oop</title>
      <link>https://www.wikiod.com/fr/oop/debuter-avec-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/debuter-avec-oop/</guid>
      <description>Présentation de la POO # Présentation # La programmation orientée objet (principalement appelée OOP) est un paradigme de programmation permettant de résoudre des problèmes.
La beauté d&amp;rsquo;un programme OO (orienté objet) est que nous considérons le programme comme un ensemble d&amp;rsquo;objets communiquant entre eux, plutôt que comme un script séquentiel suivant des ordres spécifiques.
Il existe de nombreux langages de programmation qui prennent en charge la POO, certains des plus populaires sont :</description>
    </item>
    
    <item>
      <title>Encapsulation</title>
      <link>https://www.wikiod.com/fr/oop/encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/encapsulation/</guid>
      <description>Cacher des informations # L&amp;rsquo;état d&amp;rsquo;un objet à un instant donné est représenté par l&amp;rsquo;information qu&amp;rsquo;il détient à cet instant. Dans un langage OO, l&amp;rsquo;état est implémenté sous forme de variables membres.
Dans un objet correctement conçu, l&amp;rsquo;état ne peut être modifié qu&amp;rsquo;au moyen d&amp;rsquo;appels à ses méthodes et non par manipulation directe de ses variables membres. Ceci est réalisé en fournissant des méthodes publiques qui fonctionnent sur les valeurs des variables membres privées.</description>
    </item>
    
    <item>
      <title>Héritage</title>
      <link>https://www.wikiod.com/fr/oop/heritage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/heritage/</guid>
      <description>Remarque : L&amp;rsquo;héritage à plusieurs niveaux est autorisé en Java, mais pas l&amp;rsquo;héritage multiple. En savoir plus sur http://beginnersbook.com/2013/04/oops-concepts/
Héritage - Définition # L&amp;rsquo;héritage est l&amp;rsquo;un des principaux concepts de la Programmation Orientée Objet (POO). En utilisant l&amp;rsquo;héritage, nous pouvons modéliser correctement un problème et réduire le nombre de lignes à écrire. Voyons l&amp;rsquo;héritage en utilisant un exemple populaire.
Considérez que vous devez modéliser le règne animal (le règne animal simplifié, bien sûr.</description>
    </item>
    
    <item>
      <title>Problème de diamant</title>
      <link>https://www.wikiod.com/fr/oop/probleme-de-diamant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/probleme-de-diamant/</guid>
      <description>Problème de diamant - Exemple # Le problème de diamant est un problème courant survenu dans la programmation orientée objet, lors de l&amp;rsquo;utilisation de l&amp;rsquo;héritage multiple.
Considérons le cas où la classe C est héritée de la classe A et de la classe B. Supposons que class A et class B aient une méthode appelée foo().
Ensuite, lorsque nous appelons la méthode foo(), le compilateur ne peut pas identifier la méthode exacte que nous essayons d&amp;rsquo;utiliser</description>
    </item>
    
    <item>
      <title>Polymorphisme</title>
      <link>https://www.wikiod.com/fr/oop/polymorphisme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/polymorphisme/</guid>
      <description>Remplacer la méthode # Le remplacement de méthode est la manière d&amp;rsquo;utiliser le polymorphisme entre les classes. si une classe est héritée d&amp;rsquo;une autre, la première (sous-classe) peut remplacer les méthodes de la seconde (super classe) et modifier l&amp;rsquo;implémentation.
ceci est utilisé là où la super classe définit l&amp;rsquo;implémentation plus générale de la méthode tandis que la sous-classe en utilise une plus spécifique.
Considérez l&amp;rsquo;exemple suivant :
Nous avons une classe pour les mammifères :</description>
    </item>
    
    <item>
      <title>Abstraction</title>
      <link>https://www.wikiod.com/fr/oop/abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/abstraction/</guid>
      <description>Modificateurs d&amp;rsquo;accès # Les modificateurs d&amp;rsquo;accès permettent de contrôler l&amp;rsquo;accès à un objet ou à une fonction/méthode. C&amp;rsquo;est une partie principale du concept d&amp;rsquo;Abstraction.
Différents langages de programmation utilisent différents modificateurs d&amp;rsquo;accès. Voici quelques exemples:
Java
Java has 4 access modifiers.
private - These attributes can be accessed only inside the class. protected - These attributes can be accessed by sub classes and classes from the same package. package - These attributes can be accessed by the classes within the same package only.</description>
    </item>
    
    <item>
      <title>Objet</title>
      <link>https://www.wikiod.com/fr/oop/objet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/objet/</guid>
      <description>Introduction # Object est le module de base de la Object Oriented Programming (OOP). Un objet peut être une variable, une structure de données (comme un tableau, une carte, etc.), ou même une fonction ou une méthode. En POO, nous modélisons des objets du monde réel comme des animaux, des véhicules, etc.
Un objet peut être défini dans une classe, qui peut être définie comme le plan de l&amp;rsquo;objet. Ensuite, nous pouvons créer des instances de cette classe, que nous appelons des objets.</description>
    </item>
    
    <item>
      <title>Classer</title>
      <link>https://www.wikiod.com/fr/oop/classer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/oop/classer/</guid>
      <description>Introduction # La classe est le morceau de code où nous définissons les attributs et/ou les comportements d&amp;rsquo;un objet. Vous pouvez définir des variables, des constantes, des méthodes et des constructeurs à l&amp;rsquo;objet, à l&amp;rsquo;intérieur de la classe. En d&amp;rsquo;autres termes, la classe est le plan d&amp;rsquo;un objet.
Voyons un exemple de classe en Java, qui définit une (simple) Car :
public class Car { private Engine engine; private Body body; private Tire [] tire; private Interior interior; // Constructor public Car (Engine engine, Body body, Tire[] tires, Interior interior) { } // Another constructor public Car () { } public void drive(Direction d) { // Method to drive } public void start(Key key) { // Start } } C&amp;rsquo;est juste pour un exemple.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Junit on </title>
    <link>https://www.wikiod.com/fr/docs/junit/</link>
    <description>Recent content in Tutoriel Junit on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/junit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec Junit</title>
      <link>https://www.wikiod.com/fr/junit/demarrer-avec-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/demarrer-avec-junit/</guid>
      <description>Attraper l&amp;rsquo;exception attendue # Il est possible d&amp;rsquo;attraper facilement l&amp;rsquo;exception sans aucun bloc try catch.
public class ListTest { private final List&amp;lt;Object&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); @Test(expected = IndexOutOfBoundsException.class) public void testIndexOutOfBoundsException() { list.get(0); } } L&amp;rsquo;exemple ci-dessus devrait suffire pour des cas plus simples, lorsque vous ne voulez/n&amp;rsquo;avez pas besoin de vérifier le message porté par l&amp;rsquo;exception levée.
Si vous souhaitez vérifier les informations sur l&amp;rsquo;exception, vous pouvez utiliser le bloc try/catch :</description>
    </item>
    
    <item>
      <title>Tester avec des fournisseurs de données</title>
      <link>https://www.wikiod.com/fr/junit/tester-avec-des-fournisseurs-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/tester-avec-des-fournisseurs-de-donnees/</guid>
      <description>Installation et utilisation # Installation:
Pour utiliser DataProviders, vous avez besoin de junit-dataprovider .jar :
[Github][1]
[Téléchargement direct][2]
Hamcrest-core-1.3.jar :
[Github][3]
[Téléchargement direct][4]
Et ajoutez ces deux fichiers .jar à votre projet.
Usage:
Ajoutez cette &amp;ldquo;importation&amp;rdquo; à votre code :
import com.tngtech.java.junit.dataprovider.DataProvider; import com.tngtech.java.junit.dataprovider.DataProviderRunner; import com.tngtech.java.junit.dataprovider.UseDataProvider; Avant la déclaration de votre classe :
@RunWith(DataProviderRunner.class) Donc ça ressemble à ça :
@RunWith(DataProviderRunner.class) public class example { //code } Comment créer des fournisseurs de données :</description>
    </item>
    
    <item>
      <title>Essais</title>
      <link>https://www.wikiod.com/fr/junit/essais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/essais/</guid>
      <description>Paramètre Contexte Détails @AvantClasse Statique Exécuté lors de la première création de la classe @Avant Instance Exécuté avant chaque test dans la classe @Tester Instance Doit être déclaré chaque méthode à tester @Après Instance Exécuté après chaque test dans la classe @AfterClass Statique Exécuté avant la destruction de la classe Exemple de format de classe de test
public class TestFeatureA { @BeforeClass public static void setupClass() {} @Before public void setupTest() {} @Test public void testA() {} @Test public void testB() {} @After public void tearDownTest() {} @AfterClass public static void tearDownClass() {} } } Mesure du rendement # Si vous avez besoin de vérifier si votre méthode de test prend trop de temps à s&amp;rsquo;exécuter, vous pouvez le faire en mentionnant votre temps d&amp;rsquo;exécution prévu à l&amp;rsquo;aide de la propriété timeout de l&amp;rsquo;annotation @Test.</description>
    </item>
    
    <item>
      <title>Générer un squelette de cas de test Junit pour le code existant</title>
      <link>https://www.wikiod.com/fr/junit/generer-un-squelette-de-cas-de-test-junit-pour-le-code-existant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/generer-un-squelette-de-cas-de-test-junit-pour-le-code-existant/</guid>
      <description>Parfois, vous devez générer le squelette des cas de test en fonction des classes que vous avez dans votre projet.
Générer un squelette de cas de test Junit pour le code existant dans Eclipse # Voici les étapes pour générer un squelette de test pour le code existant :
Ouvrez Eclipse et choisissez le projet pour lequel vous souhaitez créer des cas de test Dans Package Explorer, sélectionnez la classe Java pour laquelle vous souhaitez générer le test Junit.</description>
    </item>
    
    <item>
      <title>Ordre d&#39;exécution des tests</title>
      <link>https://www.wikiod.com/fr/junit/ordre-dexecution-des-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/ordre-dexecution-des-tests/</guid>
      <description>Syntaxe # @FixMethodOrder // Exécute le test en utilisant le trieur de méthode par défaut @FixMethodOrder(MethodSorters) // Exécute le test en utilisant MethodSorter associé à l&amp;rsquo;énumération MethodSorters. Ordre par défaut # Utilisez l&amp;rsquo;annotation &amp;ndash; @FixMethodOrder(MethodSorters.DEFAULT). Cela exécute tous les tests au sein de la classe dans un ordre déterministe et quelque peu prévisible. L&amp;rsquo;implémentation hache les noms de méthodes et les compare. Dans le cas d&amp;rsquo;une égalité, il trie par ordre lexicographique.</description>
    </item>
    
    <item>
      <title>Règles de test personnalisées</title>
      <link>https://www.wikiod.com/fr/junit/regles-de-test-personnalisees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/regles-de-test-personnalisees/</guid>
      <description>Il y a des avantages pour l&amp;rsquo;un ou l&amp;rsquo;autre. Étendre ExternalResource c&amp;rsquo;est pratique, surtout si nous n&amp;rsquo;avons besoin que d&amp;rsquo;un before() pour configurer quelque chose.
Cependant, nous devons être conscients que, puisque la méthode before() est exécutée en dehors de try...finally, tout code requis pour effectuer le nettoyage dans after() ne sera pas exécuté si il y a une erreur lors de l&amp;rsquo;exécution de before().
Voici à quoi cela ressemble dans ExternalResource :</description>
    </item>
    
    <item>
      <title>Tests de paramétrage</title>
      <link>https://www.wikiod.com/fr/junit/tests-de-parametrage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/tests-de-parametrage/</guid>
      <description>Parfois, vous devez exécuter un test plusieurs fois, chaque fois avec des données différentes. Paramétrer le test vous permet de le faire de manière simple et maintenable.
Syntaxe # @RunWith(Parameterized.class) //annotation pour la classe de test @Parameters//annotation pour les données
L&amp;rsquo;un des avantages de l&amp;rsquo;utilisation de paramètres est que si un ensemble de données échoue, l&amp;rsquo;exécution passera simplement à l&amp;rsquo;ensemble de données suivant au lieu d&amp;rsquo;arrêter tout le test.
Utilisation d&amp;rsquo;un constructeur # import static org.</description>
    </item>
    
    <item>
      <title>Ignorer les cas de test dans Junit</title>
      <link>https://www.wikiod.com/fr/junit/ignorer-les-cas-de-test-dans-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/junit/ignorer-les-cas-de-test-dans-junit/</guid>
      <description>Parfois, vous voulez ignorer certains des cas de test que vous avez dans Junit. Par exemple, ils sont partiellement terminés et vous souhaitez y revenir plus tard.
Ignorer le cas de test dans Junit # Accédez à la méthode de test que vous souhaitez ignorer Avant l&amp;rsquo;annotation @Test, entrez @Ignore Facultatif : Vous pouvez ajouter une description de la raison pour laquelle vous ignorez cette méthode de test, quelque chose comme : @Ignore (&amp;quot;ignorer ce cas de test pour l&#39;instant&amp;quot;) un exemple de méthode serait:</description>
    </item>
    
  </channel>
</rss>

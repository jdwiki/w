<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>printemps-mvc Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/spring-mvc/</link>
    <description>Recent content in printemps-mvc Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec spring-mvc</title>
      <link>https://www.wikiod.com/fr/spring-mvc/premiers-pas-avec-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/premiers-pas-avec-spring-mvc/</guid>
      <description>Premier projet Spring-MVC # Créez un projet Web dynamique, fournissez les informations suivantes comme indiqué ci-dessous
Nom du projet : DemoSpringMVCProject Runtime cible : défini comme serveur Apache Tomcat v7.0 Cliquez sur Terminer, nous avons créé avec succès un projet Web dynamique.
Maintenant, nous devons configurer le framework Spring-MVC :
Créez web.xml dans le dossier &amp;rsquo; WebContent\WEB-INF\ &amp;lsquo; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; id=&amp;quot;WebApp_ID&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;Demo9&amp;lt;/display-name&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Validation MVC du printemps</title>
      <link>https://www.wikiod.com/fr/spring-mvc/validation-mvc-du-printemps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/validation-mvc-du-printemps/</guid>
      <description>Dans Spring MVC, il est possible de valider les champs de formulaire à l&amp;rsquo;aide de l&amp;rsquo;API Bean Validation (JSR 303 pour Bean Vaidation 1.0 et [JSR 349](https: //jcp.org/en/jsr/detail?id=349) pour Bean Validation 1.1) qui est utilisé pour définir les contraintes de validation de l&amp;rsquo;objet JavaBean.
Hibernate Validator est l&amp;rsquo;implémentation de référence de l&amp;rsquo;API de validation de bean. Hibernate Validator offre une valeur supplémentaire en plus des fonctionnalités requises par Bean Validation. Par exemple, une API de configuration de contraintes programmatiques ainsi qu&amp;rsquo;un [processeur d&amp;rsquo;annotations] (http://docs.</description>
    </item>
    
    <item>
      <title>Téléchargement de fichiers</title>
      <link>https://www.wikiod.com/fr/spring-mvc/telechargement-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/telechargement-de-fichiers/</guid>
      <description>Syntaxe # @RequestPart(String, String, boolean) Paramètres # Paramètre Détails @RequestPart Cette annotation spécifie qu&amp;rsquo;un paramètre doit être mappé à une partie de demande donnée. Le nom de la partie doit correspondre au nom du paramètre de la méthode, sauf si vous choisissez de le fournir comme argument à @RequestPart. Si le nom de la partie n&amp;rsquo;est pas exprimable en tant que nom Java (par exemple, 123), vous pouvez utiliser l&amp;rsquo;attribut value de @RequestPart pour spécifier le nom réel.</description>
    </item>
    
    <item>
      <title>Gestion globale des exceptions</title>
      <link>https://www.wikiod.com/fr/spring-mvc/gestion-globale-des-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/gestion-globale-des-exceptions/</guid>
      <description>N&amp;rsquo;oubliez pas de créer des exceptions personnalisées si vous devez Le résolveur et le gestionnaire doivent être découverts par Spring Si vous êtes sur Spring 3.2 ou supérieur, vous pouvez utiliser @ContrllerAdvice [Source][1]
[1] : http://alex-java-musings.blogspot.tw/2012/11/spring-31-global-exception-handler.html
Résolveur d&amp;rsquo;exceptions globales # @Component public class RestExceptionResolver extends ExceptionHandlerExceptionResolver { @Autowired //If you have multiple handlers make this a list of handlers private RestExceptionHandler restExceptionHandler; /** * This resolver needs to be injected because it is the easiest (maybe only) way of getting the configured MessageConverters */ @Resource private ExceptionHandlerExceptionResolver defaultResolver; @PostConstruct public void afterPropertiesSet() { setMessageConverters(defaultResolver.</description>
    </item>
    
    <item>
      <title>Gestion des exceptions</title>
      <link>https://www.wikiod.com/fr/spring-mvc/gestion-des-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/gestion-des-exceptions/</guid>
      <description>Syntaxe # @ExceptionHandler(ExceptionToBeHandled.class) @ExceptionHandler({ExceptionToBeHandled.class, AnotherExceptionToBeHandled.class}) Gestion des exceptions basée sur le contrôleur # Dans le cas où un contrôleur lève une exception, nous pouvons définir des méthodes de gestionnaire d&amp;rsquo;exceptions pour générer et renvoyer des réponses spécifiques. Il est important de noter que les gestionnaires d&amp;rsquo;exceptions définis dans le contrôleur donné ne s&amp;rsquo;appliqueront qu&amp;rsquo;aux exceptions qui se produisent dans ce contrôleur.
@Controller public class MyController { @GetMapping(&amp;quot;/&amp;quot;) public String somePage() throws Exception { // some set of code that can throw exceptions } @ExceptionHandler(Exception.</description>
    </item>
    
    <item>
      <title>Spring-MVC avec annotations</title>
      <link>https://www.wikiod.com/fr/spring-mvc/spring-mvc-avec-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/spring-mvc/spring-mvc-avec-annotations/</guid>
      <description>Dans cette rubrique, vous découvrirez des annotations principalement liées à Spring MVC. Certaines des annotations associées sont les suivantes : @Controller, @RequestMapping, @RequestParam, @RequestBody, @ResponseBody, @RestController, @ModelAttribute, @ControllerAdvice, @ExceptionHandler, @ResponseStatus.
Bien sûr, il y a plus d&amp;rsquo;annotations qui sont également extrêmement importantes mais qui n&amp;rsquo;appartiennent pas directement à Spring MVC. Tels que : @Required, @Autowired, @Resource et bien d&amp;rsquo;autres.
Paramètres # Annotation Explication @Contrôleur Avec l&amp;rsquo;annotation @Controller, vous marquez une classe Java comme une classe contenant des gestionnaires HTTP, en d&amp;rsquo;autres termes, des points d&amp;rsquo;accès HTTP à votre application.</description>
    </item>
    
  </channel>
</rss>

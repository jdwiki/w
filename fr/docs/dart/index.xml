<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel de fléchettes on </title>
    <link>https://www.wikiod.com/fr/docs/dart/</link>
    <description>Recent content in Tutoriel de fléchettes on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec les fléchettes</title>
      <link>https://www.wikiod.com/fr/dart/debuter-avec-les-flechettes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/debuter-avec-les-flechettes/</guid>
      <description>Installation ou configuration # Le SDK Dart comprend tout ce dont vous avez besoin pour écrire et exécuter du code Dart : machine virtuelle, bibliothèques, analyseur, gestionnaire de packages, générateur de documentation, formateur, débogueur, etc. Si vous faites du développement Web, vous aurez également besoin de Dartium.
Installation et mises à jour automatisées # [Installation de Dart sous Windows][1] [Installer Dart sur Mac][2] [Installer Dart sur Linux][3] Installation manuelle # Vous pouvez également [installer manuellement n&amp;rsquo;importe quelle version du SDK][4].</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/fr/dart/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/collections/</guid>
      <description>Création d&amp;rsquo;une nouvelle liste # Les listes peuvent être créées de plusieurs façons.
La méthode recommandée consiste à utiliser un littéral List :
var vegetables = [&#39;broccoli&#39;, &#39;cabbage&#39;]; Le constructeur List peut également être utilisé :
var fruits = new List(); Si vous préférez un typage plus fort, vous pouvez également fournir un paramètre de type de l&amp;rsquo;une des manières suivantes :
var fruits = &amp;lt;String&amp;gt;[&#39;apples&#39;, &#39;oranges&#39;]; var fruits = new List&amp;lt;String&amp;gt;(); Pour créer une petite liste extensible, vide ou contenant des valeurs initiales connues, la forme littérale est préférée.</description>
    </item>
    
    <item>
      <title>Programmation asynchrone</title>
      <link>https://www.wikiod.com/fr/dart/programmation-asynchrone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/programmation-asynchrone/</guid>
      <description>Conversion des rappels en contrats à terme # Dart dispose d&amp;rsquo;une bibliothèque asynchrone robuste, avec [Future][1], [Stream][2], et plus encore. Cependant, vous pouvez parfois rencontrer une API asynchrone qui utilise callbacks au lieu de Futures. Pour combler le fossé entre les rappels et les contrats à terme, Dart propose la classe Completer. Vous pouvez utiliser un Completer pour convertir un rappel en Future.
Les compléteurs sont parfaits pour relier une API basée sur le rappel avec une API basée sur Future.</description>
    </item>
    
    <item>
      <title>Flux de contrôle</title>
      <link>https://www.wikiod.com/fr/dart/flux-de-controle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/flux-de-controle/</guid>
      <description>Sinon # Dart a If Else :
if (year &amp;gt;= 2001) { print(&#39;21st century&#39;); } else if (year &amp;gt;= 1901) { print(&#39;20th century&#39;); } else { print(&#39;We Must Go Back!&#39;); } Dart a également un opérateur ternaire &amp;ldquo;if&amp;rdquo;:
var foo = true; print(foo ? &#39;Foo&#39; : &#39;Bar&#39;); // Displays &amp;quot;Foo&amp;quot;. Boucle tant que # Les boucles while et do while sont autorisées dans Dart :
while(peopleAreClapping()) { playSongs(); } et:</description>
    </item>
    
    <item>
      <title>Des classes</title>
      <link>https://www.wikiod.com/fr/dart/des-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/des-classes/</guid>
      <description>Membres # Une classe peut avoir des membres.
Les variables d&amp;rsquo;instance peuvent être déclarées avec/sans annotations de type, et éventuellement initialisées. Les membres non initialisés ont la valeur null, à moins qu&amp;rsquo;ils ne soient définis sur une autre valeur par le constructeur.
class Foo { var member1; int member2; String member3 = &amp;quot;Hello world!&amp;quot;; } Les variables de classe sont déclarées à l&amp;rsquo;aide du mot-clé static.
class Bar { static var member4; static String member5; static int member6 = 42; } Si une méthode ne prend aucun argument, est rapide, renvoie une valeur et n&amp;rsquo;a pas d&amp;rsquo;effets secondaires visibles, alors une méthode getter peut être utilisée :</description>
    </item>
    
    <item>
      <title>Conversion de données</title>
      <link>https://www.wikiod.com/fr/dart/conversion-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/conversion-de-donnees/</guid>
      <description>## JSON import &amp;lsquo;dart:convert&amp;rsquo;;
void main() { var jsonString = &amp;quot;&amp;quot;&amp;quot; { &amp;quot;cats&amp;quot;: { &amp;quot;abysinnian&amp;quot;: { &amp;quot;origin&amp;quot;: &amp;quot;Burma&amp;quot;, &amp;quot;behavior&amp;quot;: &amp;quot;playful&amp;quot; } } } &amp;quot;&amp;quot;&amp;quot;; var obj = JSON.decode(jsonString); print(obj[&#39;cats&#39;][&#39;abysinnian&#39;][&#39;behavior&#39;]); // playful } Voir l&amp;rsquo;exemple sur le jeu de fléchettes : https://dartpad.dartlang.org/7d5958cf10e611b36326f27b062108fe</description>
    </item>
    
    <item>
      <title>Interopérabilité Dart-JavaScript</title>
      <link>https://www.wikiod.com/fr/dart/interoperabilite-dart-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/interoperabilite-dart-javascript/</guid>
      <description>L&amp;rsquo;interopérabilité Dart-JavaScript nous permet d&amp;rsquo;exécuter du code JavaScript à partir de nos programmes Dart.
L&amp;rsquo;interopérabilité est obtenue en utilisant la bibliothèque js pour créer des stubs Dart. Ces stubs décrivent l&amp;rsquo;interface que nous aimerions avoir avec le code JavaScript sous-jacent. Lors de l&amp;rsquo;exécution, l&amp;rsquo;appel du stub Dart invoquera le code JavaScript.
Emballage des classes/espaces de noms JavaScript # Supposons que nous souhaitions envelopper l&amp;rsquo;API JavaScript de Google Maps google.maps :</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/dart/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/les-fonctions/</guid>
      <description>Dart est un véritable langage orienté objet, donc même les fonctions sont des objets et ont un type, Function. Cela signifie que les fonctions peuvent être affectées à des variables ou transmises en tant qu&amp;rsquo;arguments à d&amp;rsquo;autres fonctions. Vous pouvez également appeler une instance d&amp;rsquo;une classe Dart comme s&amp;rsquo;il s&amp;rsquo;agissait d&amp;rsquo;une fonction.
Fonctions avec des paramètres nommés # Lors de la définition d&amp;rsquo;une fonction, utilisez {param1, param2, …} pour spécifier des paramètres nommés :</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://www.wikiod.com/fr/dart/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/exceptions/</guid>
      <description>Le code Dart peut lancer et intercepter des exceptions. Les exceptions sont des erreurs indiquant qu&amp;rsquo;un événement inattendu s&amp;rsquo;est produit. Si l&amp;rsquo;exception n&amp;rsquo;est pas interceptée, l&amp;rsquo;isolat qui a déclenché l&amp;rsquo;exception est suspendu, et généralement l&amp;rsquo;isolat et son programme sont terminés.
Contrairement à Java, toutes les exceptions de Dart sont des exceptions non contrôlées. Les méthodes ne déclarent pas les exceptions qu&amp;rsquo;elles peuvent lever et vous n&amp;rsquo;êtes pas obligé d&amp;rsquo;intercepter les exceptions.</description>
    </item>
    
    <item>
      <title>Expressions régulières</title>
      <link>https://www.wikiod.com/fr/dart/expressions-regulieres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dart/expressions-regulieres/</guid>
      <description>Syntaxe # var regExp = RegExp(r&amp;rsquo;^(.*)$&amp;rsquo;, multiLine : vrai, caseSensitive : faux); Paramètres # Paramètre Détails Source de chaîne L&amp;rsquo;expression régulière sous forme de String {bool multiligne} S&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;une expression régulière multiligne. (correspond à ^ et $ au début et à la fin de chaque ligne individuellement et non à toute la chaîne) {bool caseSensitive} Si l&amp;rsquo;expression est sensible à la casse Les expressions régulières Dart ont la même syntaxe et la même sémantique que les expressions régulières JavaScript.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>backbone.js Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/backbone-js/</link>
    <description>Recent content in backbone.js Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/backbone-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec backbone.js</title>
      <link>https://www.wikiod.com/fr/backbone-js/premiers-pas-avec-backbonejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/premiers-pas-avec-backbonejs/</guid>
      <description>Configuration de base # Backbone nécessite [Underscore][_] et (éventuellement) [jQuery][jquery] - pour la manipulation DOM (à l&amp;rsquo;aide de Backbone.View) et la persistance RESTful.
Le moyen le plus rapide d&amp;rsquo;être opérationnel avec Backbone est de créer un fichier index.html avec des balises de script simples dans le HTML &amp;lt;head&amp;gt; :
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Backbone est maintenant disponible pour une utilisation dans la page.</description>
    </item>
    
    <item>
      <title>Voir</title>
      <link>https://www.wikiod.com/fr/backbone-js/voir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/voir/</guid>
      <description>Syntaxe # Créer : var View = Backbone.View.extend( { /* properties */ } ); Construction : var myView = new View( /* options */ ); initialize : méthode appelée automatiquement après la construction render : méthode utilisée pour mettre à jour this.el avec un nouveau contenu Une vue liée au code HTML existant # En supposant que ce HTML dans la page :
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;myPage&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; Une vue peut y être liée avec :</description>
    </item>
    
    <item>
      <title>Modèle</title>
      <link>https://www.wikiod.com/fr/backbone-js/modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/modele/</guid>
      <description>Syntaxe # var MyModel = Backbone.Model.extend(properties, [classProperties]); // Créer un modèle personnalisé var model = new Backbone.Model([attributs], [options]); // Instanciation d&amp;rsquo;un objet modèle Paramètres # Paramètre Détails propriétés Propriétés d&amp;rsquo;occurrence. propriétésclasse Facultatif. Propriétés qui existent et sont partagées avec chaque instance de modèle de ce type. attributs Facultatif. Valeurs initiales des &amp;ldquo;attributs&amp;rdquo; du modèle. Si ce paramètre est omis, le modèle sera initialisé avec les valeurs spécifiées par la propriété defaults du modèle.</description>
    </item>
    
    <item>
      <title>Routeur</title>
      <link>https://www.wikiod.com/fr/backbone-js/routeur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/routeur/</guid>
      <description>Création d&amp;rsquo;un routeur # Le serveur Web sert l&amp;rsquo;utilisateur en fonction de la demande envoyée par le navigateur, mais comment l&amp;rsquo;utilisateur dira au navigateur ce qu&amp;rsquo;il recherche, c&amp;rsquo;est là que nous avons besoin d&amp;rsquo;une URL. Chaque page Web sur Internet possède une URL qui peut être mise en signet, copiée, partagée et enregistrée pour référence future. Dans l&amp;rsquo;application Backbone à une seule page, tout ce que nous voyons est une vue, les vues sont formées et rendues pour afficher une page spécifique, mais que se passe-t-il si l&amp;rsquo;utilisateur veut revoir les mêmes informations.</description>
    </item>
    
    <item>
      <title>Le recueil</title>
      <link>https://www.wikiod.com/fr/backbone-js/le-recueil/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/le-recueil/</guid>
      <description>Syntaxe # // Nouvelle collection personnalisée var MyCollection = Backbone.Collection.extend(properties, [classProperties]); // Nouvelle instance de collecte var collection = new Backbone.Collection([modèles], [options]); Paramètres # Paramètre Détails propriétés Propriétés d&amp;rsquo;occurrence. propriétésclasse Facultatif. Propriétés qui existent et sont partagées avec chaque instance de collection de ce type. modèles Facultatif. Le tableau initial de modèles (ou d&amp;rsquo;objets). Si ce paramètre est omis, la collection sera vide. options Facultatif. Objet qui sert à configurer la collection et est ensuite passé à la fonction initialize.</description>
    </item>
    
    <item>
      <title>Synchroniser</title>
      <link>https://www.wikiod.com/fr/backbone-js/synchroniser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/synchroniser/</guid>
      <description>sync est une fonction que Backbone utilise pour gérer tous les envois ou réceptions de données vers/depuis un serveur distant. L&amp;rsquo;implémentation par défaut utilise jQuery (ou Zepto) pour effectuer des opérations AJAX lorsque les données sont synchronisées. Cependant, cette méthode peut être remplacée pour appliquer un comportement de synchronisation différent, tel que :
Utilisation de setTimeout pour regrouper plusieurs mises à jour en une seule requête Envoi de données de modèle en XML au lieu de JSON Utilisation de WebSockets au lieu d&amp;rsquo;Ajax Syntaxe # sync (méthode, modèle, options) Paramètres # paramètre détails méthode créer , lire , mettre à jour , supprimer modèle le modèle à sauvegarder (ou collection à lire) options rappels de succès et d&amp;rsquo;erreur, et toutes les autres options de requête jQuery Exemple de base # La méthode sync() lit et récupère les données du modèle</description>
    </item>
    
    <item>
      <title>url et urlRoot</title>
      <link>https://www.wikiod.com/fr/backbone-js/url-et-urlroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/backbone-js/url-et-urlroot/</guid>
      <description>Modification de Model.url() # Model.url et Collection.url ne sont utilisés qu&amp;rsquo;en interne par la méthode par défaut Backbone.sync. La méthode par défaut suppose que vous vous connectez à une API RESTful. Si vous utilisez une conception de point de terminaison différente, vous souhaiterez remplacer la méthode sync et utiliserez peut-être la méthode url.
var Model = Backbone.Model.extend({ urlRoot: &#39;/path-to-model&#39;, url: function (path) { var url = this.urlRoot + &#39;/&#39; + path; if (this.</description>
    </item>
    
  </channel>
</rss>

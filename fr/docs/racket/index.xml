<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel raquette on </title>
    <link>https://www.wikiod.com/fr/docs/racket/</link>
    <description>Recent content in Tutoriel raquette on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/racket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec la raquette</title>
      <link>https://www.wikiod.com/fr/racket/debuter-avec-la-raquette/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/debuter-avec-la-raquette/</guid>
      <description>Raquette # Racket est un langage de programmation à spectre complet. Il va au-delà de Lisp et Scheme avec des dialectes qui prennent en charge les objets, les types, la paresse, etc. Racket permet aux programmeurs de lier des composants écrits dans différents dialectes, et il permet aux programmeurs de créer de nouveaux dialectes spécifiques au projet. Les bibliothèques de Racket prennent en charge les applications allant des serveurs Web et des bases de données aux interfaces graphiques et aux graphiques.</description>
    </item>
    
    <item>
      <title>Fermetures</title>
      <link>https://www.wikiod.com/fr/racket/fermetures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/fermetures/</guid>
      <description>À partir de la balise StackOverflow closure :
Une fermeture est une fonction de première classe qui fait référence à (ferme sur) des variables de la portée dans laquelle elle a été définie. Si la fermeture existe toujours après la fin de sa portée de définition, les variables sur lesquelles elle se ferme continueront également d&amp;rsquo;exister.
Il est parfois utile de considérer les fermetures et les objets comme similaires.
Le vénérable maître Qc Na se promenait avec son élève, Anton.</description>
    </item>
    
    <item>
      <title>Fonctions d&#39;ordre supérieur</title>
      <link>https://www.wikiod.com/fr/racket/fonctions-dordre-superieur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/fonctions-dordre-superieur/</guid>
      <description>Carte # Map applique une fonction à chaque élément d&amp;rsquo;une liste :
map: (a -&amp;gt; b) (listof a) -&amp;gt; (listof b) &amp;gt; (map (lambda (x) (* x 2)) (list 1 2 3 4 5) (list 2 4 6 8 10) &amp;gt; (map sqrt (list 1 4 9)) (list 1 2 3) &amp;gt; (map (lambda (x) (if (even? x) &amp;quot;even&amp;quot; &amp;quot;odd&amp;quot;)) (list 1 2 3)) (list &amp;quot;odd&amp;quot; &amp;quot;even&amp;quot; &amp;quot;odd&amp;quot;) Plier # Fold Right applique successivement une fonction à deux arguments à chaque élément d&amp;rsquo;une liste de gauche à droite en commençant par une valeur de base :</description>
    </item>
    
    <item>
      <title>commentaires</title>
      <link>https://www.wikiod.com/fr/racket/commentaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/commentaires/</guid>
      <description>Les types de commentaires les plus courants sont les commentaires de ligne et d&amp;rsquo;expression s (utilisant respectivement ; et #;).
Il est courant d&amp;rsquo;utiliser de 1 à 3 points-virgules selon le type de commentaire fait. Faire référence à ???
Commentaires sur une seule ligne # ; We make single line comments by writing out text after a semicolon Bloquer les commentaires # #| We make block comments like this |# Commentaires d&amp;rsquo;expression S # #;(define (commented-out-function x) (print (string-append &amp;quot;This entire &amp;quot; &amp;quot;s-expression is commented out!</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/racket/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/les-fonctions/</guid>
      <description>Syntaxe # (définir (nommer les arguments &amp;hellip;) corps)
(arguments de la fonction &amp;hellip;)
Appels de fonction simples # Vous pouvez appeler une fonction dans Racket en l&amp;rsquo;enveloppant entre parenthèses avec les arguments qui la suivent. Cela ressemble à (argument de la fonction ...).
&amp;gt; (define (f x) x) &amp;gt; (f 1) 1 &amp;gt; (f &amp;quot;salmon&amp;quot;) &amp;quot;salmon&amp;quot; &amp;gt; (define (g x y) (string-append x y)) &amp;gt; (g &amp;quot;large&amp;quot; &amp;quot;salmon&amp;quot;) &amp;quot;largesalmon&amp;quot; &amp;gt; (g &amp;quot;large &amp;quot; &amp;quot;salmon&amp;quot;) &amp;quot;large salmon&amp;quot; Les opérations comme + et * sont également des fonctions, et elles utilisent la même syntaxe que l&amp;rsquo;appel de f ou g.</description>
    </item>
    
    <item>
      <title>Étapes d&#39;installation (Linux)</title>
      <link>https://www.wikiod.com/fr/racket/etapes-dinstallation-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/etapes-dinstallation-linux/</guid>
      <description>Installation ou configuration # Visitez https://download.racket-lang.org et choisissez entre les deux distributions disponibles :
Racket est la distribution principale, elle est livrée avec plusieurs packages supplémentaires comme [math/number-theory][1] ainsi que l&amp;rsquo;IDE DrRacket. Minimal Racket est beaucoup plus petit et n&amp;rsquo;est livré qu&amp;rsquo;avec les packages nécessaires. Étapes d&amp;rsquo;installation pour Linux : # L&amp;rsquo;installation est très simple. Si vous êtes habitué à ce genre de chose, suivez simplement ces quatre étapes. Une procédure pas à pas plus détaillée est détaillée par la suite, si vous préférez.</description>
    </item>
    
    <item>
      <title>Récursivité</title>
      <link>https://www.wikiod.com/fr/racket/recursivite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/recursivite/</guid>
      <description>Utilisation de définir # #lang racket (define (sum-of-list l) (if (null? l) 0 (+ (car l) (sum-of-list (cdr l))))) (sum-of-list &#39;(1 2 3 4 5)) ;; =&amp;gt; 15 Utilisation de let-rec # #lang racket (letrec ([sum-of-list (λ (l) (if (null? l) 0 (+ (car l) (sum-of-list (cdr l)))))]) (sum-of-list &#39;(1 2 3 4 5))) ;; =&amp;gt; 15 Il est possible d&amp;rsquo;écrire des fonctions mutuellement récursives avec letrec :
#lang racket (letrec ([even?</description>
    </item>
    
    <item>
      <title>Étapes d&#39;installation (Windows)</title>
      <link>https://www.wikiod.com/fr/racket/etapes-dinstallation-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/etapes-dinstallation-windows/</guid>
      <description>Installation ou configuration # Visitez https://download.racket-lang.org et choisissez entre les deux distributions disponibles :
Racket est la distribution principale, elle est livrée avec plusieurs packages supplémentaires comme [math/number-theory][1] ainsi que l&amp;rsquo;IDE DrRacket. Minimal Racket est beaucoup plus petit et n&amp;rsquo;est livré qu&amp;rsquo;avec les packages nécessaires. [1] : https://docs.racket-lang.org/math/number-theory.html
Pour exécuter un programme, ouvrez DrRacket, entrez le programme en commençant par « #lang racket » et cliquez sur le bouton « Exécuter » près du coin supérieur droit.</description>
    </item>
    
    <item>
      <title>Griffonner</title>
      <link>https://www.wikiod.com/fr/racket/griffonner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/griffonner/</guid>
      <description>Scribble est l&amp;rsquo;outil utilisé pour créer la documentation de Racket, et vous pouvez également documenter vos propres packages avec lui ! Une fois publiée, leur documentation apparaîtra sur https://docs.racket-lang.org/, aux côtés de la documentation principale de Racket.
Scribble est implémenté en tant que langage pour la plate-forme Racket. Les documents Scribble commenceront donc généralement par #lang scribble/manual
Paragraphes et sections # #lang scribble/manual @section{Introduction} First paragraph. Some text, some text, some text, some text, some text, some text.</description>
    </item>
    
    <item>
      <title>Étapes d&#39;installation (macOS)</title>
      <link>https://www.wikiod.com/fr/racket/etapes-dinstallation-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/racket/etapes-dinstallation-macos/</guid>
      <description>Installation ou configuration # Visitez https://download.racket-lang.org et choisissez entre les deux distributions disponibles :
Racket est la distribution principale, elle est livrée avec plusieurs packages supplémentaires comme [math/number-theory][1] ainsi que l&amp;rsquo;IDE DrRacket. Minimal Racket est beaucoup plus petit et n&amp;rsquo;est livré qu&amp;rsquo;avec les packages nécessaires. Étapes d&amp;rsquo;installation pour macOS : # L&amp;rsquo;installation est très simple. Si vous êtes habitué à ce genre de chose, allez simplement sur https://download.racket-lang.org, puis téléchargez et installez le fichier .</description>
    </item>
    
  </channel>
</rss>

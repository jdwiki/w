<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel asp.net-web-api on </title>
    <link>https://www.wikiod.com/fr/docs/asp-dotnet-web-api/</link>
    <description>Recent content in Tutoriel asp.net-web-api on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/asp-dotnet-web-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec asp.net-web-api</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/premiers-pas-avec-aspnet-web-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/premiers-pas-avec-aspnet-web-api/</guid>
      <description>Installation ou configuration # Instructions détaillées pour configurer ou installer asp.net-web-api.
Quoi et pourquoi API Web ASP.NET ? # Quoi? : Un cadre entièrement pris en charge et extensible pour la création de points de terminaison basés sur HTTP. Dans le monde de HTML5, les appareils mobiles et les techniques de développement modernes HTTP sont devenus l&amp;rsquo;option par défaut pour créer des services riches et évolutifs. L&amp;rsquo;API Web ASP.NET fournit un ensemble d&amp;rsquo;options par défaut facile à utiliser, mais fournit également une infrastructure d&amp;rsquo;extensibilité approfondie pour répondre aux exigences de tout scénario utilisant HTTP.</description>
    </item>
    
    <item>
      <title>Négociation de contenu de l&#39;API Web ASP.NET</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/negociation-de-contenu-de-lapi-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/negociation-de-contenu-de-lapi-web-aspnet/</guid>
      <description>Informations de base sur la négociation de contenu de l&amp;rsquo;API Web ASP.NET # La négociation de contenu peut être définie comme le processus de sélection de la meilleure représentation pour une ressource donnée. Ainsi, la négociation de contenu signifie que le client et le serveur peuvent négocier entre eux afin que le client puisse obtenir des données en fonction du format requis.
Internet dépend de trois points,
La Ressource Un pointeur vers la ressource (URL) Représentation de la ressource Le troisième point est plus important que les deux autres, car tout est basé sur la façon dont nous pouvons voir la ressource.</description>
    </item>
    
    <item>
      <title>Routage des URL de l&#39;API Web</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/routage-des-url-de-lapi-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/routage-des-url-de-lapi-web/</guid>
      <description>Comment fonctionne le routage dans la webapi asp.net # Dans l&amp;rsquo;API Web ASP.NET, un contrôleur est une classe qui gère les requêtes HTTP. Les méthodes publiques du contrôleur sont appelées méthodes d&amp;rsquo;action ou simplement actions.
Lorsque l&amp;rsquo;infrastructure de l&amp;rsquo;API Web reçoit une demande, elle achemine la demande vers une action. Pour déterminer quelle action invoquer, le framework utilise une table de routage. Le modèle de projet Visual Studio pour l&amp;rsquo;API Web crée une route par défaut :</description>
    </item>
    
    <item>
      <title>API Web ASP.NET MediaTypeFormatter</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/api-web-aspnet-mediatypeformatter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/api-web-aspnet-mediatypeformatter/</guid>
      <description>Informations de base sur MediaTypeFormatter # MediaTypeFormatter est une classe abstraite dont héritent les classes JsonMediaTypeFormatter et XmlMediaTypeFormatter. Ici, la classe JsonMediaTypeFormatter gère les objets JSON et la classe XmlMediaTypeFormatter gère les objets XML.
Renvoyer uniquement JSON, quelle que soit la valeur de l&amp;rsquo;en-tête Accept :
Pour renvoyer uniquement les objets JSON dans la réponse de la requête, acceptez la valeur d&amp;rsquo;en-tête de la requête si application/json ou application/xml écrivez la ligne suivante dans la méthode Register de la classe WebApiConfig.</description>
    </item>
    
    <item>
      <title>Activation CORS de l&#39;API WEB ASP.NET</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/activation-cors-de-lapi-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/activation-cors-de-lapi-web-aspnet/</guid>
      <description>Configurer CORS pour WebAPI 2 avec l&amp;rsquo;authentification Windows # La configuration côté serveur suivante permet à la requête CORS de fonctionner avec l&amp;rsquo;authentification Windows (aucun anonymat ne doit être activé dans IIS).
web.config - autoriser les demandes de contrôle en amont non authentifiées (anonymes) (OPTIONS)
&amp;lt;system.web&amp;gt; &amp;lt;authentication mode=&amp;quot;Windows&amp;quot; /&amp;gt; &amp;lt;authorization&amp;gt; &amp;lt;allow verbs=&amp;quot;OPTIONS&amp;quot; users=&amp;quot;*&amp;quot;/&amp;gt; &amp;lt;deny users=&amp;quot;?&amp;quot; /&amp;gt; &amp;lt;/authorization&amp;gt; &amp;lt;/system.web&amp;gt; global.asax.cs - répond correctement avec des en-têtes qui permettent à l&amp;rsquo;appelant d&amp;rsquo;un autre domaine de recevoir des données</description>
    </item>
    
    <item>
      <title>Démarrage rapide avec JSON</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/demarrage-rapide-avec-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/demarrage-rapide-avec-json/</guid>
      <description>Exemples pour vous permettre d&amp;rsquo;être opérationnel rapidement (et correctement) avec ASP.NET WebAPI
Renvoie JSON à partir de GET en utilisant des attributs # 1. Configurez votre formateur et votre routage dans Registre de (App_Start/WebApiConfig) # public static class WebApiConfig { public static void Register(HttpConfiguration config) { GlobalConfiguration.Configuration.Formatters.Clear(); GlobalConfiguration.Configuration.Formatters.Add(new JsonMediaTypeFormatter()); config.MapHttpAttributeRoutes(); } } 2. Créer des méthodes dans un ApiController # public class HelloWorldController : ApiController { [HttpGet] [Route(&amp;quot;echo/{message}&amp;quot;)] public IHttpActionResult Echo(string message) { return Ok(new{ hello: message }); } [HttpGet] [Route(&amp;quot;echo/{digits:int}&amp;quot;)] public IHttpActionResult Echo(int digits) { return Ok(new{ hello: digits }); } exécuter GET /echo/foo</description>
    </item>
    
    <item>
      <title>Configurez une application API Web pour répondre avec des données JSON joliesformatées par défaut</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/configurez-une-application-api-web-pour-repondre-avec-des-donnees-json-joliesformatees-par-defaut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/configurez-une-application-api-web-pour-repondre-avec-des-donnees-json-joliesformatees-par-defaut/</guid>
      <description>Formatage JSON par défaut : efficacité au détriment de la lisibilité # Disons que vous avez un ApiController simple comme celui-ci :
[HttpGet] [Route(&amp;quot;test&amp;quot;)] public dynamic Test() { dynamic obj = new ExpandoObject(); obj.prop1 = &amp;quot;some string&amp;quot;; obj.prop2 = 11; obj.prop3 = &amp;quot;another string&amp;quot;; return obj; } La représentation JSON résultante de cet objet ressemblera à ceci :
{&amp;quot;prop1&amp;quot;:&amp;quot;some string&amp;quot;,&amp;quot;prop2&amp;quot;:11,&amp;quot;prop3&amp;quot;:&amp;quot;another string&amp;quot;} C&amp;rsquo;est probablement bien pour des réponses simples comme celle-ci, mais imaginez si vous avez un objet volumineux/complexe envoyé comme réponse :</description>
    </item>
    
    <item>
      <title>OData avec l&#39;API Web Asp.net</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/odata-avec-lapi-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/odata-avec-lapi-web-aspnet/</guid>
      <description>Installer les packages OData # Dans le menu Outils, sélectionnez Gestionnaire de packages NuGet &amp;gt; Console du gestionnaire de packages. Dans la fenêtre de la console du gestionnaire de packages, saisissez :
Install-Package Microsoft.AspNet.Odata Cette commande installe les derniers packages OData NuGet.
Activer Entity Framework # Pour ce didacticiel, nous utiliserons Entity Framework (EF) Code First pour créer la base de données principale.
L&amp;rsquo;API Web OData ne nécessite pas d&amp;rsquo;EF. Utilisez n&amp;rsquo;importe quelle couche d&amp;rsquo;accès aux données qui peut traduire les entités de la base de données en modèles.</description>
    </item>
    
    <item>
      <title>Mise en cache</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/mise-en-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/mise-en-cache/</guid>
      <description>La mise en cache est le processus de stockage des données quelque part pour les futures demandes, dans notre cas, nous pouvons éviter les accès indésirables à la base de données pour obtenir les données si nous mettons les données en cache quelque part, de cette façon, nous pouvons nous assurer que les données sont servies plus rapidement .
System.Runtime.Caching (MemoryCache) # Importez l&amp;rsquo;espace de noms System.Runtime.Caching (Assurez-vous que vous avez ajouté la DLL System.</description>
    </item>
    
    <item>
      <title>Création d&#39;un attribut ActionFilter personnalisé</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-web-api/creation-dun-attribut-actionfilter-personnalise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-web-api/creation-dun-attribut-actionfilter-personnalise/</guid>
      <description>Les attributs de filtres d&amp;rsquo;action font partie de l&amp;rsquo;ASP .NET Framework que je trouve utile pour aider à suivre le principe DRY. Vous pouvez remplacer plusieurs lignes de logique commune par une simple balise déclarative. Le framework fournit plusieurs attributs de filtre d&amp;rsquo;action utiles par défaut, tels que les attributs Authorize et Handle Error. Ce guide est destiné à vous montrer comment créer votre propre attribut personnalisé.
## AssurePresenseOfAttribute Ceci est un exemple d&amp;rsquo;attribut que j&amp;rsquo;ai créé pour valider que les paramètres requis ont été affectés dans l&amp;rsquo;objet de requête reçu dans une route POST.</description>
    </item>
    
  </channel>
</rss>

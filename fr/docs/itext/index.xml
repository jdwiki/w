<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel itext on </title>
    <link>https://www.wikiod.com/fr/docs/itext/</link>
    <description>Recent content in Tutoriel itext on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/itext/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec itext</title>
      <link>https://www.wikiod.com/fr/itext/premiers-pas-avec-itext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/premiers-pas-avec-itext/</guid>
      <description>Bonjour le monde # Voici un programme très simple pour créer un PDF en utilisant iText 7 / Java :
//Initialize writer PdfWriter writer = new PdfWriter(dest); //Initialize document PdfDocument pdfDoc = new PdfDocument(writer); Document doc = new Document(pdfDoc); //Add paragraph to the document doc.add(new Paragraph(&amp;quot;Hello World!&amp;quot;)); //Close document doc.close(); ([Listing_01_01_HelloWorld.java][1])
Vous pouvez accéder à de nombreux autres exemples à partir de cette page.
Et voici un programme très simple pour créer un PDF en utilisant le précurseur iText 5.</description>
    </item>
    
    <item>
      <title>Texte en PDF iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/texte-en-pdf-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/texte-en-pdf-itext-5-contre-itext-7/</guid>
      <description>Le code pour convertir un fichier texte brut en un document PDF est assez simple, que vous utilisiez iText 5 ou iText 7. Dans iText 7, vous avez l&amp;rsquo;avantage de pouvoir définir l&amp;rsquo;alignement au niveau du document. Dans iText 5, vous devez définir l&amp;rsquo;alignement pour chaque objet &amp;ldquo;Paragraphe&amp;rdquo; séparé.
Pour comprendre la vraie différence entre iText 5 et iText 7 dans cette paire d&amp;rsquo;exemples, nous devons jeter un œil au PDF résultant.</description>
    </item>
    
    <item>
      <title>Tableaux iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/tableaux-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/tableaux-itext-5-contre-itext-7/</guid>
      <description>Les noms de classe iText 5 PdfPTable et PdfPCell ont été choisis car nous avions déjà des classes nommées Table et Cell pour créer des objets de table et de cellule au niveau de programmation le plus élevé. Il y avait aussi une classe nommée PdfTable à utiliser par iText en interne. Ces classes avaient beaucoup de défauts et elles ont été dépréciées en faveur de PdfPTable et PdfPCell. Ils ont été supprimés il y a longtemps.</description>
    </item>
    
    <item>
      <title>Création de PDF iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/creation-de-pdf-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/creation-de-pdf-itext-5-contre-itext-7/</guid>
      <description>Dans la conception originale d&amp;rsquo;iText, il était possible de créer un objet Document de haut niveau, puis d&amp;rsquo;avoir différents objets DocListener écoutant cet objet Document. Ceci a été réalisé en utilisant différents écrivains : un PdfWriter, un HTMLWriter et un RtfWriter. Lors de l&amp;rsquo;utilisation d&amp;rsquo;un PdfWriter, un PdfDocument était créé en interne. Cette classe de bas niveau s&amp;rsquo;occupait de toutes les structures liées au PDF. Il en était plus ou moins de même pour les autres formats.</description>
    </item>
    
    <item>
      <title>Formulaires iText 5 vs iText 7</title>
      <link>https://www.wikiod.com/fr/itext/formulaires-itext-5-vs-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/formulaires-itext-5-vs-itext-7/</guid>
      <description>iText 5 est une bibliothèque qui s&amp;rsquo;est développée de manière organique. De nombreux développeurs ont contribué au code. Par exemple : un développeur a contribué au code pour créer des champs de formulaire à partir de zéro, en utilisant des classes telles que TextField et PdfFormField ; un autre développeur a contribué au code pour modifier les champs de formulaire existants, en utilisant la classe AcroField et une série de méthodes setFieldProperty().</description>
    </item>
    
    <item>
      <title>Polices iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/polices-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/polices-itext-5-contre-itext-7/</guid>
      <description>Dans les premières versions d&amp;rsquo;iText, il n&amp;rsquo;y avait qu&amp;rsquo;une seule classe de police : Font.
Avec cette police, vous pouvez créer un objet &amp;ldquo;Font&amp;rdquo; pour quatorze polices de cinq familles de polices : Helvetica (normal, gras, oblique, gras-oblique), Times Roman (normal, gras, italique, gras-italique), Courier (normal , gras, oblique, gras-oblique), Symbol et Zapf Dingbats.
Un tel objet Font a été créé comme ceci :
Font font = new Font(FontFamily.TIMES_ROMAN); Vous deviez également définir la taille de la police, par exemple :</description>
    </item>
    
    <item>
      <title>Styles iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/styles-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/styles-itext-5-contre-itext-7/</guid>
      <description>La création d&amp;rsquo;un document dans lequel vous devez fréquemment basculer entre les styles a tendance à être fastidieuse dans iText 5. Vous devez créer de nombreux objets Chunk et vous devez toujours faire un compromis entre l&amp;rsquo;application directe des styles à chaque nouveau Chunk ou création d&amp;rsquo;une méthode d&amp;rsquo;assistance qui crée le Chunk pour vous.
Ce que nous avons corrigé dans iText 7 :
Il est désormais possible d&amp;rsquo;enchaîner les méthodes.</description>
    </item>
    
    <item>
      <title>Événements de page (iText 5) par rapport aux gestionnaires d&#39;événements et aux moteurs de rendu (iText 7)</title>
      <link>https://www.wikiod.com/fr/itext/evenements-de-page-itext-5-par-rapport-aux-gestionnaires-devenements-et-aux-moteurs-de-rendu-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/evenements-de-page-itext-5-par-rapport-aux-gestionnaires-devenements-et-aux-moteurs-de-rendu-itext-7/</guid>
      <description>Dans iText 5, nous avons introduit le concept d&amp;rsquo;événements de page pour permettre aux développeurs d&amp;rsquo;ajouter un comportement spécifique lorsqu&amp;rsquo;un document est ouvert, lorsqu&amp;rsquo;une nouvelle page est ouverte, lorsqu&amp;rsquo;une page se termine et lorsqu&amp;rsquo;un document est fermé.
Dans la documentation, nous avons précisé qu&amp;rsquo;il était interdit d&amp;rsquo;ajouter du contenu dans la méthode onStartPage() ; le contenu ne peut être ajouté que dans la méthode onEndPage(). Nous avons également indiqué très clairement que l&amp;rsquo;objet Document transmis aux méthodes d&amp;rsquo;événement de page était transmis uniquement à des fins de lecture seule.</description>
    </item>
    
    <item>
      <title>Colonnes iText 5 contre iText 7</title>
      <link>https://www.wikiod.com/fr/itext/colonnes-itext-5-contre-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/colonnes-itext-5-contre-itext-7/</guid>
      <description>Dans iText 5, vous ne pouvez pas utiliser la méthode add() pour ajouter un Paragraph à un Document si vous souhaitez organiser le contenu en colonnes. Nous ne pouvons pas réutiliser le code de l&amp;rsquo;exemple https://www.wikiod.com/fr/itext/texte-en-pdf-itext-5-contre-itext-7#Text2Pdf.java (iText 5)
Au lieu de cela, nous devons créer un objet ColumnText, nous devons ajouter tous les objets Paragraph à cet objet, et une fois que nous avons fini d&amp;rsquo;ajouter tout le contenu, nous pouvons commencer à rendre ce contenu en utilisant la méthode go() .</description>
    </item>
    
    <item>
      <title>Questions et réponses sur les versions</title>
      <link>https://www.wikiod.com/fr/itext/questions-et-reponses-sur-les-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/itext/questions-et-reponses-sur-les-versions/</guid>
      <description>Quelques questions fréquemment posées sur les numéros de version dans iText.
Pourquoi les numéros de version sautent-ils de 2 à 5 et de 5 à 7 ? Il existe plusieurs raisons pour ignorer les numéros de version. En 2009, les numéros de version d&amp;rsquo;iText (Java) et d&amp;rsquo;iTextSharp (C#) n&amp;rsquo;étaient pas synchronisés. La version Java était à la version 2.1.7 ; la version C# était à la version 4.1.6. Il a été décidé de passer à Java 5 pour la version Java et d&amp;rsquo;harmoniser les numéros de version d&amp;rsquo;iText et d&amp;rsquo;iTextSharp.</description>
    </item>
    
  </channel>
</rss>

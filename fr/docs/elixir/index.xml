<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel du langage Elixir on </title>
    <link>https://www.wikiod.com/fr/docs/elixir/</link>
    <description>Recent content in Tutoriel du langage Elixir on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Elixir Language</title>
      <link>https://www.wikiod.com/fr/elixir/premiers-pas-avec-elixir-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/premiers-pas-avec-elixir-language/</guid>
      <description>Bonjour le monde # Pour les instructions d&amp;rsquo;installation sur elixir check [ici][1], il décrit les instructions relatives aux différentes plates-formes.
Elixir est un langage de programmation créé à l&amp;rsquo;aide de erlang et utilise le runtime BEAM de erlang (comme JVM pour java).
Nous pouvons utiliser elixir en deux modes : shell interactif iex ou s&amp;rsquo;exécutant directement à l&amp;rsquo;aide de commande élixir.
Placez les éléments suivants dans un fichier nommé &amp;ldquo;hello.exs&amp;rdquo; :</description>
    </item>
    
    <item>
      <title>Trucs et astuces pour la console IEx</title>
      <link>https://www.wikiod.com/fr/elixir/trucs-et-astuces-pour-la-console-iex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/trucs-et-astuces-pour-la-console-iex/</guid>
      <description>Obtenir la valeur de la dernière commande avec v # iex(1)&amp;gt; 1 + 1 2 iex(2)&amp;gt; v 2 iex(3)&amp;gt; 1 + v 3 Voir aussi : https://www.wikiod.com/fr/elixir/trucs-et-astuces-pour-la-console-iex#Obtenir la valeur d&amp;rsquo;une commande précédente avec v
Historique persistant # Par défaut, l&amp;rsquo;historique des saisies de l&amp;rsquo;utilisateur dans IEx ne persiste pas d&amp;rsquo;une session à l&amp;rsquo;autre.
erlang-history ajoute la prise en charge de l&amp;rsquo;historique à la fois au shell Erlang et à IEx :</description>
    </item>
    
    <item>
      <title>Correspondance de modèle</title>
      <link>https://www.wikiod.com/fr/elixir/correspondance-de-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/correspondance-de-modele/</guid>
      <description>Pattern matching sur une liste # Vous pouvez également faire correspondre des motifs sur des structures de données Elixir telles que des listes.
Listes
L&amp;rsquo;appariement sur une liste est assez simple.
[head | tail] = [1,2,3,4,5] # head == 1 # tail == [2,3,4,5] Cela fonctionne en faisant correspondre le premier (ou plusieurs) éléments de la liste au côté gauche du | (tuyau) et le reste de la liste à la variable du côté droit du |.</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/elixir/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/les-fonctions/</guid>
      <description>Fonctions anonymes # Dans Elixir, une pratique courante consiste à utiliser des fonctions anonymes. Créer une fonction anonyme est simple :
iex(1)&amp;gt; my_func = fn x -&amp;gt; x * 2 end #Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt; La syntaxe générale est :
fn args -&amp;gt; output end Pour plus de lisibilité, vous pouvez mettre des parenthèses autour des arguments :
iex(2)&amp;gt; my_func = fn (x, y) -&amp;gt; x*y end #Function&amp;lt;12.52032458/2 in :erl_eval.expr/5&amp;gt; Pour invoquer une fonction anonyme, appelez-la par le nom attribué et ajoutez .</description>
    </item>
    
    <item>
      <title>Listes</title>
      <link>https://www.wikiod.com/fr/elixir/listes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/listes/</guid>
      <description>Syntaxe # [] [1, 2, 3, 4] [1, 2] ++ [3, 4] # -&amp;gt; [1,2,3,4] hd([1, 2, 3, 4]) # -&amp;gt; 1 tl([1, 2, 3, 4]) # -&amp;gt; [2,3,4] [tête | queue] [1 | [2, 3, 4]] # -&amp;gt; [1,2,3,4] [1 | [2 | [3 | [4 | []]]]] -&amp;gt; [1,2,3,4] &amp;lsquo;bonjour&amp;rsquo; = [?h, ?e, ?l, ?l, ?o] liste_mots-clés = [a : 123, b : 456, c : 789] liste_mots_clés[:a] # -&amp;gt; 123 ## Listes de mots clés Les listes de mots clés sont des listes où chaque élément de la liste est un tuple d&amp;rsquo;un atome suivi d&amp;rsquo;une valeur.</description>
    </item>
    
    <item>
      <title>.gitignore de base pour le programme elixir</title>
      <link>https://www.wikiod.com/fr/elixir/gitignore-de-base-pour-le-programme-elixir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/gitignore-de-base-pour-le-programme-elixir/</guid>
      <description>Notez que le dossier /rel peut ne pas être nécessaire dans votre fichier .gitignore. Ceci est généré si vous utilisez un outil de gestion des versions tel que exrm
Exemple # ### Elixir ### /_build /cover /deps erl_crash.dump *.ez ### Erlang ### .eunit deps *.beam *.plt ebin rel/example_project .concrete/DEV_MODE .rebar ## Phoenix application /_build /db /deps /*.ez erl_crash.dump /node_modules /priv/static/ /config/prod.secret.exs /rel ## Standalone elixir application /_build /cover /deps erl_crash.dump *.</description>
    </item>
    
    <item>
      <title>Les opérateurs</title>
      <link>https://www.wikiod.com/fr/elixir/les-operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/les-operateurs/</guid>
      <description>L&amp;rsquo;opérateur de tuyauterie # L&amp;rsquo;opérateur Pipe |&amp;gt; prend le résultat d&amp;rsquo;une expression sur la gauche et le transmet comme premier paramètre à une fonction sur la droite.
expression |&amp;gt; function Utilisez l&amp;rsquo;opérateur Pipe pour enchaîner des expressions et documenter visuellement le flux d&amp;rsquo;une série de fonctions.
Considérer ce qui suit:
Oven.bake(Ingredients.Mix([:flour, :cocoa, :sugar, :milk, :eggs, :butter]), :temperature) Dans l&amp;rsquo;exemple, Oven.bake vient avant Ingredients.mix, mais il est exécuté en dernier. De plus, il n&amp;rsquo;est peut-être pas évident que :temperature soit un paramètre de Oven.</description>
    </item>
    
    <item>
      <title>Nœuds</title>
      <link>https://www.wikiod.com/fr/elixir/nuds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/nuds/</guid>
      <description>Connexion de nœuds sur la même machine # Démarrez deux nœuds nommés dans deux fenêtres de terminal :
&amp;gt;iex --name bob@127.0.0.1 iex(bob@127.0.0.1)&amp;gt; &amp;gt;iex --name frank@127.0.0.1 iex(frank@127.0.0.1)&amp;gt; Connectez deux nœuds en demandant à un nœud de se connecter :
iex(bob@127.0.0.1)&amp;gt; Node.connect :&amp;quot;frank@127.0.0.1&amp;quot; true Les deux nœuds sont maintenant connectés et conscients l&amp;rsquo;un de l&amp;rsquo;autre :
iex(bob@127.0.0.1)&amp;gt; Node.list [:&amp;quot;frank@127.0.0.1&amp;quot;] iex(frank@127.0.0.1)&amp;gt; Node.list [:&amp;quot;bob@127.0.0.1&amp;quot;] Vous pouvez exécuter du code sur d&amp;rsquo;autres nœuds :
iex(bob@127.0.0.1)&amp;gt; greet = fn() -&amp;gt; IO.</description>
    </item>
    
    <item>
      <title>Cachets</title>
      <link>https://www.wikiod.com/fr/elixir/cachets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/cachets/</guid>
      <description>Sceaux personnalisés # Des sceaux personnalisés peuvent être créés en créant une méthode sigil_X où X est la lettre que vous souhaitez utiliser (cela ne peut être qu&amp;rsquo;une seule lettre).
defmodule Sigils do def sigil_j(string, options) do # Split on the letter p, or do something more useful String.split string, &amp;quot;p&amp;quot; end # Use this sigil in this module, or import it to use it elsewhere end L&amp;rsquo;argument options est un binaire des arguments donnés à la fin du sigil, par exemple :</description>
    </item>
    
    <item>
      <title>Types intégrés</title>
      <link>https://www.wikiod.com/fr/elixir/types-integres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/elixir/types-integres/</guid>
      <description>Nombres # Elixir est livré avec des entiers et des nombres à virgule flottante. Un littéral entier peut être écrit aux formats décimal, binaire, octal et hexadécimal.
iex&amp;gt; x = 291 291 iex&amp;gt; x = 0b100100011 291 iex&amp;gt; x = 0o443 291 iex&amp;gt; x = 0x123 291 Comme Elixir utilise l&amp;rsquo;arithmétique bignum, la plage d&amp;rsquo;entiers n&amp;rsquo;est limitée que par la mémoire disponible sur le système.
Les nombres à virgule flottante sont en double précision et respectent la spécification IEEE-754.</description>
    </item>
    
  </channel>
</rss>

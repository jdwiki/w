<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Git on </title>
    <link>https://www.wikiod.com/fr/docs/git/</link>
    <description>Recent content in Tutoriel Git on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Git</title>
      <link>https://www.wikiod.com/fr/git/premiers-pas-avec-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/premiers-pas-avec-git/</guid>
      <description>Créez votre premier référentiel, puis ajoutez et validez des fichiers # Sur la ligne de commande, vérifiez d&amp;rsquo;abord que vous avez installé Git :
Sur tous les systèmes d&amp;rsquo;exploitation :
git --version Sur les systèmes d&amp;rsquo;exploitation de type UNIX :
which git Si rien n&amp;rsquo;est renvoyé ou si la commande n&amp;rsquo;est pas reconnue, vous devrez peut-être installer Git sur votre système en téléchargeant et en exécutant le programme d&amp;rsquo;installation. Consultez la [page d&amp;rsquo;accueil de Git][1] pour des instructions d&amp;rsquo;installation exceptionnellement claires et faciles.</description>
    </item>
    
    <item>
      <title>Ignorer les fichiers et dossiers</title>
      <link>https://www.wikiod.com/fr/git/ignorer-les-fichiers-et-dossiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/ignorer-les-fichiers-et-dossiers/</guid>
      <description>Cette rubrique illustre comment éviter d&amp;rsquo;ajouter des fichiers indésirables (ou des modifications de fichiers) dans un référentiel Git. Il existe plusieurs façons (global ou local .gitignore, .git/exclude, git update-index --assume-unchanged et git update-index --skip-tree), mais gardez à l&amp;rsquo;esprit Git gère le contenu, ce qui signifie : ignorer ignore en fait un dossier contenu (c&amp;rsquo;est-à-dire des fichiers). Un dossier vide serait ignoré par défaut, car il ne peut pas être ajouté de toute façon.</description>
    </item>
    
    <item>
      <title>Cueillette des cerises</title>
      <link>https://www.wikiod.com/fr/git/cueillette-des-cerises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/cueillette-des-cerises/</guid>
      <description>Un cherry-pick prend le patch qui a été introduit dans un commit et essaie de le réappliquer sur la branche sur laquelle vous vous trouvez actuellement.
Source : Git SCM Book
Syntaxe # git cherry-pick [&amp;ndash;edit] [-n] [-m numéro-parent] [-s] [-x] [&amp;ndash;ff] [-S[key-id]] commit&amp;hellip; git cherry-pick &amp;ndash;continuer git cherry-pick &amp;ndash;quit git cherry-pick &amp;ndash;abort Paramètres # Paramètres Détails -e, &amp;ndash;edit Avec cette option, git cherry-pick vous permettra de modifier le message de validation avant de valider.</description>
    </item>
    
    <item>
      <title>Rebasage</title>
      <link>https://www.wikiod.com/fr/git/rebasage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/rebasage/</guid>
      <description>Syntaxe # git rebase [-i | --interactive] [options] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] [&amp;lt;upstream&amp;gt;] [&amp;lt;branch&amp;gt;] git rebase [-i | --interactive] [options] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] --root [&amp;lt;branch&amp;gt;] git rebase --continue | --skip | --abort | --edit-all Paramètres # Paramètre Détails &amp;ndash;continuer Redémarrez le processus de changement de base après avoir résolu un conflit de fusion. &amp;ndash;abort Abandonnez l&amp;rsquo;opération de rebase et réinitialisez HEAD sur la branche d&amp;rsquo;origine. Si la branche a été fournie lorsque l&amp;rsquo;opération de rebase a été lancée, alors HEAD sera réinitialisé sur la branche.</description>
    </item>
    
    <item>
      <title>Ramification</title>
      <link>https://www.wikiod.com/fr/git/ramification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/ramification/</guid>
      <description>Syntaxe # branche git [--set-upstream | --track | --no-track] [-l] [-f] &amp;lt;nom de la branche&amp;gt; [&amp;lt;point de départ&amp;gt;] git branch (--set-upstream-to=&amp;lt;upstream&amp;gt; | -u &amp;lt;upstream&amp;gt;) [&amp;lt;branchname&amp;gt;] git branch --unset-upstream [&amp;lt;nom de la branche&amp;gt;] git branch (-m | -M) [&amp;lt;anciennebranche&amp;gt;] &amp;lt;nouvellebranche&amp;gt; git branch (-d | -D) [-r] &amp;lt;nom de la branche&amp;gt;…​ git branch --edit-description [&amp;lt;nom de la branche&amp;gt;] branche git [--color[=&amp;lt;quand&amp;gt;] | --no-color] [-r | -a] [--list] [-v [--abbrev=&amp;lt;longueur&amp;gt; | --no-abbrev]] [--column[=&amp;lt;options&amp;gt;] | --no-column] [(--merged | --no-merged | --contains) [&amp;lt;commit&amp;gt;]] [--sort=&amp;lt;key&amp;gt;] [--points-at &amp;lt;object&amp;gt;] [&amp;lt;pattern &amp;gt;…​] Paramètres # Paramètre Détails -d, &amp;ndash;delete Supprimer une branche.</description>
    </item>
    
    <item>
      <title>Cachette</title>
      <link>https://www.wikiod.com/fr/git/cachette/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/cachette/</guid>
      <description>Syntaxe # liste de cachette git [&amp;lt;options&amp;gt;] git stash show [&amp;lt;stash&amp;gt;] git stash drop [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash ( pop | apply ) [--index] [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash branch &amp;lt;branchname&amp;gt; [&amp;lt;stash&amp;gt;] git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a| --all] [&amp;lt;message&amp;gt;]] &amp;ldquo;git cachette claire&amp;rdquo; git stash créer [&amp;lt;message&amp;gt;] git stash store [-m|--message &amp;lt;message&amp;gt;] [-q|--quiet] &amp;lt;commit&amp;gt; Paramètres # Paramètre Détails montrer Affiche les modifications enregistrées dans le stash sous la forme d&amp;rsquo;un diff entre l&amp;rsquo;état stash et son parent d&amp;rsquo;origine.</description>
    </item>
    
    <item>
      <title>Git Diff</title>
      <link>https://www.wikiod.com/fr/git/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/git-diff/</guid>
      <description>Syntaxe # git diff [options] [&amp;lt;commit&amp;gt;] [--] [&amp;lt;chemin&amp;gt;…​] git diff [options] --cached [&amp;lt;commit&amp;gt;] [--] [&amp;lt;chemin&amp;gt;…​] git diff [options] &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; [--] [&amp;lt;chemin&amp;gt;…​] git diff [options] &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt; git diff [options] [--no-index] [--] &amp;lt;chemin&amp;gt; &amp;lt;chemin&amp;gt; Paramètres # Paramètre Détails -p, -u, &amp;ndash;patch Générer un correctif -s, &amp;ndash;no-patch Supprimer la sortie diff. Utile pour les commandes comme git show qui affichent le patch par défaut, ou pour annuler l&amp;rsquo;effet de --patch &amp;ndash;raw Générer le diff au format brut &amp;ndash;diff-algorithme= Choisissez un algorithme de diff.</description>
    </item>
    
    <item>
      <title>S&#39;engager</title>
      <link>https://www.wikiod.com/fr/git/sengager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/sengager/</guid>
      <description>Les commits avec Git assurent la responsabilité en attribuant aux auteurs les modifications apportées au code. Git offre de multiples fonctionnalités pour la spécificité et la sécurité des commits. Cette rubrique explique et illustre les bonnes pratiques et procédures de validation avec Git.
Syntaxe # git commit [drapeaux] Paramètres # Paramètre Détails &amp;ndash;message, -m Message à inclure dans le commit. La spécification de ce paramètre contourne le comportement normal de Git d&amp;rsquo;ouverture d&amp;rsquo;un éditeur.</description>
    </item>
    
    <item>
      <title>Écrasement</title>
      <link>https://www.wikiod.com/fr/git/ecrasement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/ecrasement/</guid>
      <description>Qu&amp;rsquo;est-ce que l&amp;rsquo;écrasement ? # Le squashing est le processus consistant à prendre plusieurs commits et à les combiner en un seul commit encapsulant toutes les modifications depuis les commits initiaux.
Écrasement et succursales distantes # Portez une attention particulière lors de l&amp;rsquo;écrasement des commits sur une branche qui suit une branche distante ; si vous écrasez un commit qui a déjà été poussé vers une branche distante, les deux branches divergeront et vous devrez utiliser git push -f pour forcer ces modifications sur la branche distante.</description>
    </item>
    
    <item>
      <title>Mise en scène</title>
      <link>https://www.wikiod.com/fr/git/mise-en-scene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/git/mise-en-scene/</guid>
      <description>Il convient de noter que la mise en scène a peu à voir avec les &amp;ldquo;fichiers&amp;rdquo; eux-mêmes et tout à voir avec les modifications apportées à chaque fichier donné. Nous préparons les fichiers qui contiennent des modifications, et git suit les modifications en tant que commits (même lorsque les modifications d&amp;rsquo;un commit sont effectuées sur plusieurs fichiers).
La distinction entre les fichiers et les commits peut sembler mineure, mais comprendre cette différence est fondamentale pour comprendre les fonctions essentielles comme cherry-pick et diff.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sprite-kit Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/sprite-kit/</link>
    <description>Recent content in sprite-kit Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sprite-kit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec sprite-kit</title>
      <link>https://www.wikiod.com/fr/sprite-kit/premiers-pas-avec-sprite-kit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/premiers-pas-avec-sprite-kit/</guid>
      <description>Votre premier jeu SpriteKit (Hello World) # Ouvrez Xcode et sélectionnez &amp;ldquo;Créer un nouveau projet Xcode&amp;rdquo;.
Sélectionnez maintenant iOS &amp;gt; Application à gauche et Jeu dans la zone de sélection principale.
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Appuyez sur Suivant.
Écrivez dans Product Name le nom de votre premier grand jeu. Dans Nom de l&#39;organisation le nom de votre entreprise (ou simplement votre propre nom). Organisation Identifier doit contenir votre nom de domaine inversé (www.</description>
    </item>
    
    <item>
      <title>Collision de nœud SKNode</title>
      <link>https://www.wikiod.com/fr/sprite-kit/collision-de-nud-sknode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/collision-de-nud-sknode/</guid>
      <description>Les déterminants de la collision Sprite Kit et du traitement des événements de contact sont les paramètres de relation, créés par vous, de categoryBitMask, collisionBitMask et contactTestBitMask pour chacun de vos types d&amp;rsquo;objets en interaction. En les mettant rationnellement au service de vos résultats souhaités à partir des contacts et des collisions, vous déterminez quels types peuvent entrer en collision et informer des contacts avec d&amp;rsquo;autres, et évitez les collisions indésirables, les contacts et les frais généraux de traitement physique.</description>
    </item>
    
    <item>
      <title>Éléments UIKit avec SpriteKit</title>
      <link>https://www.wikiod.com/fr/sprite-kit/elements-uikit-avec-spritekit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/elements-uikit-avec-spritekit/</guid>
      <description>UITableView dans SKScene # import SpriteKit import UIKit class GameRoomTableView: UITableView,UITableViewDelegate,UITableViewDataSource { var items: [String] = [&amp;quot;Player1&amp;quot;, &amp;quot;Player2&amp;quot;, &amp;quot;Player3&amp;quot;] override init(frame: CGRect, style: UITableViewStyle) { super.init(frame: frame, style: style) self.delegate = self self.dataSource = self } required init?(coder aDecoder: NSCoder) { fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;) } // MARK: - Table view data source func numberOfSections(in tableView: UITableView) -&amp;gt; Int { return 1 } func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int { return items.</description>
    </item>
    
    <item>
      <title>SKScene</title>
      <link>https://www.wikiod.com/fr/sprite-kit/skscene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/skscene/</guid>
      <description>SKScene représente une seule scène dans une application SpriteKit. Une SKScene est &amp;ldquo;présentée&amp;rdquo; dans une [SKView][1]. [SKSpriteNodes][2] sont ajoutés à la scène pour implémenter les sprites réels.
Les applications simples peuvent avoir un seul SKScene qui contient tout le contenu de SpriteKit. Les applications plus complexes peuvent avoir plusieurs SKScenes qui sont présentées à des moments différents (par exemple, une scène d&amp;rsquo;ouverture pour présenter les options du jeu, une deuxième scène pour implémenter le jeu lui-même et une troisième scène pour présenter les résultats &amp;lsquo;Game Over&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>SKSpriteNode (Sprites)</title>
      <link>https://www.wikiod.com/fr/sprite-kit/skspritenode-sprites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/skspritenode-sprites/</guid>
      <description>Syntaxe # convenance init(imageNamed name: String) // Crée un SKSpriteNode à partir d&amp;rsquo;une image nommée dans le catalogue d&amp;rsquo;assets
var position : CGPoint // propriété SKNode, héritée par SKSpriteNode. La position du nœud dans le système de coordonnées des parents.
func addChild(_ node: SKNode) // Méthode SKNode, héritée par SKScene. Utilisé pour ajouter un SKSpriteNode à la scène (également utilisé pour ajouter des SKNodes à d&amp;rsquo;autres SKNodes).
Sous-classement de SKSpriteNode # Vous pouvez sous-classer SKSpriteNode et définir votre propre type de sprite.</description>
    </item>
    
    <item>
      <title>Détection de la saisie tactile sur les appareils iOS</title>
      <link>https://www.wikiod.com/fr/sprite-kit/detection-de-la-saisie-tactile-sur-les-appareils-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/detection-de-la-saisie-tactile-sur-les-appareils-ios/</guid>
      <description>Détection tactile # Vous pouvez remplacer 4 méthodes de SKScene pour détecter le toucher de l&amp;rsquo;utilisateur
class GameScene: SKScene { override func touchesBegan(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesMoved(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesEnded(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesCancelled(touches: Set&amp;lt;UITouch&amp;gt;?, withEvent event: UIEvent?) { } } Veuillez noter que chaque méthode reçoit un paramètre touches qui (dans des circonstances particulières) peut contenir plus d&amp;rsquo;un seul événement tactile.</description>
    </item>
    
    <item>
      <title>SKViewName</title>
      <link>https://www.wikiod.com/fr/sprite-kit/skviewname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/skviewname/</guid>
      <description>Paramètres # Paramètre Détails montreFPS Affiche un décompte de la fréquence d&amp;rsquo;images actuelle en images par seconde dans la vue. afficheNodeCount Afficher un décompte du nombre actuel de SKNodes affichés dans la vue. montrePhysique Affichez une représentation visuelle des SKPhysicsBodys dans la vue. montreChamps Affichez une image représentant les effets des champs physiques dans la vue. afficheDrawCount Affiche le nombre de passes de dessin nécessaires pour rendre la vue. montreQuadCount Affiche le nombre de rectangles requis pour rendre la vue.</description>
    </item>
    
    <item>
      <title>SKActionName</title>
      <link>https://www.wikiod.com/fr/sprite-kit/skactionname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/skactionname/</guid>
      <description>Créer et exécuter une SKAction simple # Un exemple très simple serait de faire disparaître un SKSpriteNode.
En Swift :
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let action = SKAction.fadeOutWithDuration(1.0) node.runAction(action) Création d&amp;rsquo;une séquence d&amp;rsquo;actions répétitives # Parfois, il est nécessaire de faire une action en boucle ou en séquence. Cet exemple fera apparaître et disparaître le nœud 3 fois au total.
En Swift :
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let actionFadeOut = SKAction.</description>
    </item>
    
    <item>
      <title>Fonctions temporisées dans SpriteKit SKActions vs NSTimers</title>
      <link>https://www.wikiod.com/fr/sprite-kit/fonctions-temporisees-dans-spritekit-skactions-vs-nstimers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/fonctions-temporisees-dans-spritekit-skactions-vs-nstimers/</guid>
      <description>Quand devez-vous utiliser SKActions pour effectuer des fonctions de minuterie ? Presque toujours. La raison en est que Sprite Kit fonctionne sur un intervalle de mise à jour, et la vitesse de cet intervalle peut être modifiée tout au long de la durée de vie du processus à l&amp;rsquo;aide de la propriété speed. Les scènes peuvent également être mises en pause. Étant donné que SKAction fonctionne à l&amp;rsquo;intérieur de la scène, lorsque vous modifiez ces propriétés, il n&amp;rsquo;est pas nécessaire de modifier vos fonctions temporelles.</description>
    </item>
    
    <item>
      <title>La physique</title>
      <link>https://www.wikiod.com/fr/sprite-kit/la-physique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sprite-kit/la-physique/</guid>
      <description>Comment supprimer correctement le nœud dans la méthode didBeginContact (contacts multiples) # // PHYSICS CONSTANTS struct PhysicsCategory { static let None : UInt32 = 0 static let All : UInt32 = UInt32.max static let player : UInt32 = 0b1 // 1 static let bullet : UInt32 = 0b10 // 2 } var nodesToRemove = [SKNode]() // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# //MARK: - Physic Contact Delegate methods // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# func didBegin(_ contact: SKPhysicsContact) { var one: SKPhysicsBody var two: SKPhysicsBody if contact.</description>
    </item>
    
  </channel>
</rss>

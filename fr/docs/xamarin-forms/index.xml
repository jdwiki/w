<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Xamarin.Forms on </title>
    <link>https://www.wikiod.com/fr/docs/xamarin-forms/</link>
    <description>Recent content in Tutoriel Xamarin.Forms on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/xamarin-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Xamarin.Forms</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/premiers-pas-avec-xamarinforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/premiers-pas-avec-xamarinforms/</guid>
      <description>Installation (Visual Studio) # Xamarin.Forms est une abstraction de boîte à outils d&amp;rsquo;interface utilisateur multiplateforme qui permet aux développeurs de créer facilement des interfaces utilisateur pouvant être partagées entre Android, iOS, Windows et Windows Phone. Les interfaces utilisateur sont rendues à l&amp;rsquo;aide des contrôles natifs de la plateforme cible, ce qui permet aux applications Xamarin.Forms de conserver l&amp;rsquo;apparence appropriée pour chaque plateforme.
Plugin Xamarin pour Visual Studio # Pour démarrer avec Xamarin.</description>
    </item>
    
    <item>
      <title>Afficher l&#39;alerte</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/afficher-lalerte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/afficher-lalerte/</guid>
      <description>AfficherAlerte # Une boîte d&amp;rsquo;alerte peut être affichée sur une Xamarin.Forms Page par la méthode DisplayAlert. Nous pouvons fournir un titre, un corps (texte à alerter) et un/deux boutons d&amp;rsquo;action. Page propose deux remplacements de la méthode DisplayAlert.
public Task DisplayAlert (String title, String message, String cancel) Ce remplacement présente une boîte de dialogue d&amp;rsquo;alerte à l&amp;rsquo;utilisateur de l&amp;rsquo;application avec un seul bouton d&amp;rsquo;annulation. L&amp;rsquo;alerte s&amp;rsquo;affiche de manière modale et une fois rejetée, l&amp;rsquo;utilisateur continue d&amp;rsquo;interagir avec l&amp;rsquo;application.</description>
    </item>
    
    <item>
      <title>Ajustements visuels spécifiques à la plate-forme</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/ajustements-visuels-specifiques-a-la-plate-forme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/ajustements-visuels-specifiques-a-la-plate-forme/</guid>
      <description>Ajustements d&amp;rsquo;idiome # Des ajustements spécifiques à l&amp;rsquo;idiome peuvent être effectués à partir du code C #, par exemple pour modifier l&amp;rsquo;orientation de la mise en page, que la vue soit affichée ou un téléphone ou une tablette.
if (Device.Idiom == TargetIdiom.Phone) { this.panel.Orientation = StackOrientation.Vertical; } else { this.panel.Orientation = StackOrientation.Horizontal; } Ces fonctionnalités sont également disponibles directement depuis le code XAML :
&amp;lt;StackLayout x:Name=&amp;quot;panel&amp;quot;&amp;gt; &amp;lt;StackLayout.Orientation&amp;gt; &amp;lt;OnIdiom x:TypeArguments=&amp;quot;StackOrientation&amp;quot;&amp;gt; &amp;lt;OnIdiom.Phone&amp;gt;Vertical&amp;lt;/OnIdiom.Phone&amp;gt; &amp;lt;OnIdiom.</description>
    </item>
    
    <item>
      <title>Moteurs de rendu personnalisés</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/moteurs-de-rendu-personnalises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/moteurs-de-rendu-personnalises/</guid>
      <description>Accéder au moteur de rendu à partir d&amp;rsquo;un projet natif # var renderer = Platform.GetRenderer(visualElement); if (renderer == null) { renderer = Platform.CreateRenderer(visualElement); Platform.SetRenderer(visualElement, renderer); } DoSomeThingWithRender(render); // now you can do whatever you want with render Moteur de rendu personnalisé pour ListView # Les rendus personnalisés permettent aux développeurs de personnaliser l&amp;rsquo;apparence et le comportement des contrôles Xamarin.Forms sur chaque plate-forme. Les développeurs pourraient utiliser les fonctionnalités des contrôles natifs.</description>
    </item>
    
    <item>
      <title>Dispositions des formulaires Xamarin</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/dispositions-des-formulaires-xamarin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/dispositions-des-formulaires-xamarin/</guid>
      <description>Mise en page absolue # AbsoluteLayout positionne et dimensionne les éléments enfants proportionnellement à sa propre taille et position ou par des valeurs absolues. Les vues enfant peuvent être positionnées et dimensionnées à l&amp;rsquo;aide de valeurs proportionnelles ou de valeurs statiques, et les valeurs proportionnelles et statiques peuvent être mélangées.
[![AbsoluteLayout (image par Xamarin)][1]][1]
Une définition d&amp;rsquo;un AbsoluteLayout en XAML ressemble à ceci :
&amp;lt;AbsoluteLayout&amp;gt; &amp;lt;Label Text=&amp;quot;I&#39;m centered on iPhone 4 but no other device&amp;quot; AbsoluteLayout.</description>
    </item>
    
    <item>
      <title>Polices personnalisées dans les styles</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/polices-personnalisees-dans-les-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/polices-personnalisees-dans-les-styles/</guid>
      <description>Ressources à consulter :
Styles Xamarin [Utilisation de polices personnalisées sur iOS et Android avec Xamarin.Forms](https://blog.verslu.is/xamarin/xamarin-forms-xamarin/using-custom-fonts-on-ios-and-android-with-xamarin -formes/) [Renderers personnalisés] (https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/) Dictionnaires de ressources [Propriétés jointes] (https://developer.xamarin.com/guides/xamarin-forms/xaml/attached-properties/) Accéder aux polices personnalisées dans Syles # Xamarin.Forms fournit un excellent mécanisme pour styliser votre application multiplateforme avec des styles globaux.
Dans le monde mobile votre application doit être jolie et se démarquer des autres applications. L&amp;rsquo;un de ces caractères est les polices personnalisées utilisées dans l&amp;rsquo;application.</description>
    </item>
    
    <item>
      <title>Plug-in XamarinName</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/plug-in-xamarinname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/plug-in-xamarinname/</guid>
      <description>Plugin multimédia # Prenez ou choisissez des photos et des vidéos à partir d&amp;rsquo;une API multiplateforme.
Nuget disponible : [https://www.nuget.org/packages/Xam.Plugin.Media/][1]
[1] : https://www.nuget.org/packages/Xam.Plugin.Media/
XAML
&amp;lt;StackLayout Spacing=&amp;quot;10&amp;quot; Padding=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;Button x:Name=&amp;quot;takePhoto&amp;quot; Text=&amp;quot;Take Photo&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;pickPhoto&amp;quot; Text=&amp;quot;Pick Photo&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;takeVideo&amp;quot; Text=&amp;quot;Take Video&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;pickVideo&amp;quot; Text=&amp;quot;Pick Video&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;Save to Gallery&amp;quot;/&amp;gt; &amp;lt;Switch x:Name=&amp;quot;saveToGallery&amp;quot; IsToggled=&amp;quot;false&amp;quot; HorizontalOptions=&amp;quot;Center&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;Image will show here&amp;quot;/&amp;gt; &amp;lt;Image x:Name=&amp;quot;image&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;/StackLayout&amp;gt; Code
namespace PluginDemo { public partial class MediaPage : ContentPage { public MediaPage() { InitializeComponent(); takePhoto.</description>
    </item>
    
    <item>
      <title>Accéder aux fonctionnalités natives avec DependencyService</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/acceder-aux-fonctionnalites-natives-avec-dependencyservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/acceder-aux-fonctionnalites-natives-avec-dependencyservice/</guid>
      <description>Si vous ne voulez pas que votre code se brise lorsqu&amp;rsquo;aucune implémentation n&amp;rsquo;est trouvée, vérifiez d&amp;rsquo;abord le DependencyService s&amp;rsquo;il a une implémentation disponible.
Vous pouvez le faire par une simple vérification s&amp;rsquo;il n&amp;rsquo;est pas &amp;ldquo;null&amp;rdquo;.
var speaker = DependencyService.Get&amp;lt;ITextToSpeech&amp;gt;(); if (speaker != null) { speaker.Speak(&amp;quot;Ready for action!&amp;quot;); } ou, si votre IDE prend en charge C# 6, avec un opérateur conditionnel nul :
var speaker = DependencyService.Get&amp;lt;ITextToSpeech&amp;gt;(); speaker?.Speak(&amp;quot;Ready for action!&amp;quot;); Si vous ne le faites pas et qu&amp;rsquo;aucune implémentation n&amp;rsquo;est trouvée au moment de l&amp;rsquo;exécution, votre code générera une exception.</description>
    </item>
    
    <item>
      <title>Travailler avec des cartes</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/travailler-avec-des-cartes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/travailler-avec-des-cartes/</guid>
      <description>Si vous allez exécuter votre projet sur un autre ordinateur, vous devrez générer une nouvelle clé API pour celui-ci, car les empreintes digitales SHA-1 ne correspondront pas aux différentes machines de construction.
Vous pouvez explorer le projet, décrit dans l&amp;rsquo;exemple Ajout d&amp;rsquo;une carte dans Xamarin.Forms [ici][1]
[1] : https://github.com/Saratsin/Xamrin.Forms.Maps.SimpleExample
Ajout d&amp;rsquo;une carte dans Xamarin.Forms (Xamarin Studio) # Vous pouvez simplement utiliser les API de carte natives sur chaque plate-forme avec Xamarin Forms.</description>
    </item>
    
    <item>
      <title>Sélecteur de contacts - Formulaires Xamarin (Android et iOS)</title>
      <link>https://www.wikiod.com/fr/xamarin-forms/selecteur-de-contacts---formulaires-xamarin-android-et-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/xamarin-forms/selecteur-de-contacts---formulaires-xamarin-android-et-ios/</guid>
      <description>Contactez Picker XF (Android et iOS)
contact_picker.cs # using System; using Xamarin.Forms; namespace contact_picker { public class App : Application { public App () { // The root page of your application MainPage = new MyPage(); } protected override void OnStart () { // Handle when your app starts } protected override void OnSleep () { // Handle when your app sleeps } protected override void OnResume () { // Handle when your app resumes } } } MaPage.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel asp.net-mvc on </title>
    <link>https://www.wikiod.com/fr/docs/asp-dotnet-mvc/</link>
    <description>Recent content in Tutoriel asp.net-mvc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/asp-dotnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec asp.net-mvc</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/premiers-pas-avec-aspnet-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/premiers-pas-avec-aspnet-mvc/</guid>
      <description>Bonjour MVC ! # ASP.NET MVC est un framework d&amp;rsquo;applications Web open source. MVC lui-même est un modèle de conception qui s&amp;rsquo;articule autour de trois composants principaux : modèle-vue-contrôleur.
Modèle : les modèles reflètent vos objets métier et constituent un moyen de transmettre des données entre les contrôleurs et les vues.
Vue - Les vues sont les pages qui restituent et affichent les données du modèle à l&amp;rsquo;utilisateur. Les vues ASP.</description>
    </item>
    
    <item>
      <title>Html.AntiForgeryTokenHtml.AntiForgeryToken</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/htmlantiforgerytokenhtmlantiforgerytoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/htmlantiforgerytokenhtmlantiforgerytoken/</guid>
      <description>Le jeton anti-contrefaçon peut être utilisé pour aider à protéger votre application contre la falsification des requêtes intersites. Pour utiliser cette fonctionnalité, appelez la méthode AntiForgeryToken à partir d&amp;rsquo;un formulaire et ajoutez l&amp;rsquo;attribut ValidateAntiForgeryTokenAttribute à la méthode d&amp;rsquo;action que vous souhaitez protéger.
Génère un champ de formulaire masqué (jeton anti-falsification) qui est validé lors de la soumission du formulaire.
Syntaxe # @Html.AntiForgeryToken() Lorsque vous soumettez une requête ajax avec un jeton CSRF (__RequestVerificationToken), assurez-vous que le type de contenu n&amp;rsquo;est pas défini sur application/json.</description>
    </item>
    
    <item>
      <title>Le rasoir</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/le-rasoir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/le-rasoir/</guid>
      <description>Qu&amp;rsquo;est-ce que le rasoir ?
Razor est une syntaxe de balisage qui vous permet d&amp;rsquo;intégrer du code basé sur un serveur (Visual Basic et C#) dans des pages Web.
Le code basé sur le serveur peut créer du contenu Web dynamique à la volée, tandis qu&amp;rsquo;une page Web est écrite dans le navigateur. Lorsqu&amp;rsquo;une page Web est appelée, le serveur exécute le code basé sur le serveur à l&amp;rsquo;intérieur de la page avant de renvoyer la page au navigateur.</description>
    </item>
    
    <item>
      <title>ViewData, ViewBag, TempData</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/viewdata-viewbag-tempdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/viewdata-viewbag-tempdata/</guid>
      <description>ViewData et ViewBag sont utilisés pour transférer des données du contrôleur à la vue.
ViewData n&amp;rsquo;est rien d&amp;rsquo;autre qu&amp;rsquo;un dictionnaire d&amp;rsquo;objets et il est accessible par chaîne en tant que clé.
ViewBag est très similaire à ViewData. ViewBag est une propriété dynamique. ViewBag n&amp;rsquo;est qu&amp;rsquo;un wrapper autour de ViewData.
TempData conserve les données pendant la durée de la requête HTTP, ce qui signifie qu&amp;rsquo;il conserve les données entre deux requêtes consécutives.</description>
    </item>
    
    <item>
      <title>Annotations de données</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/annotations-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/annotations-de-donnees/</guid>
      <description>Nous pouvons ajouter des validations à notre application en ajoutant des annotations de données à nos classes de modèles. Les annotations de données nous permettent de décrire les règles que nous voulons appliquer aux propriétés de notre modèle, et ASP.NET MVC se chargera de les appliquer et d&amp;rsquo;afficher les messages appropriés aux utilisateurs.
Validation à distance # Validation à distance utilisée pour vérifier si le contenu saisi dans le contrôle d&amp;rsquo;entrée est valide ou non en envoyant une requête ajax côté serveur pour le vérifier.</description>
    </item>
    
    <item>
      <title>Html.RouteLink</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/htmlroutelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/htmlroutelink/</guid>
      <description>Paramètres # Paramètre Détails lienTexte Le texte qui sera affiché pour le lien. nom_route Nom de la route pour laquelle renvoyer un chemin virtuel. Exemple de base utilisant le texte du lien et le nom de la route # Au lieu d&amp;rsquo;utiliser [Html.ActionLink][1] pour générer des liens dans une vue, vous pouvez utiliser
[Html.RouteLink][2]
Pour utiliser cette fonctionnalité, vous devez configurer une route, par exemple :
public static void RegisterRoutes(RouteCollection routes) { routes.</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/routage/</guid>
      <description>Le routage est la façon dont ASP.NET MVC fait correspondre un URI à une action. Le module de routage est responsable du mappage des demandes de navigateur entrantes sur des actions de contrôleur MVC particulières.
MVC 5 prend en charge un nouveau type de routage, appelé routage d&amp;rsquo;attribut. Comme son nom l&amp;rsquo;indique, le routage d&amp;rsquo;attributs utilise des attributs pour définir des routes. Le routage des attributs vous donne plus de contrôle sur les URI de votre application Web.</description>
    </item>
    
    <item>
      <title>Filtres d&#39;actions</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/filtres-dactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/filtres-dactions/</guid>
      <description>Filtre d&amp;rsquo;action de contrôle de session - requête page&amp;amp;ajax # Habituellement, les processus d&amp;rsquo;authentification et d&amp;rsquo;autorisation sont effectués par des supports de cookies et de jetons intégrés dans .net MVC. Mais si vous décidez de le faire vous-même avec Session, vous pouvez utiliser la logique ci-dessous pour les requêtes de page et les requêtes ajax.
public class SessionControl : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var session = filterContext.</description>
    </item>
    
    <item>
      <title>Reliure modèle</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/reliure-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/reliure-modele/</guid>
      <description>La liaison de modèle est le processus consistant à prendre des paramètres HTTP, généralement dans la chaîne de requête d&amp;rsquo;une requête GET ou dans le corps POST, et à les appliquer dans un objet qui peut ensuite être validé et consommé de manière orientée objet sans nécessiter d&amp;rsquo;actions de contrôleur. ayant une connaissance intime de la façon de récupérer les paramètres HTTP.
En d&amp;rsquo;autres termes, la liaison de modèle est ce qui permet aux actions, dans MVC, d&amp;rsquo;avoir l&amp;rsquo;un ou l&amp;rsquo;autre des paramètres, qu&amp;rsquo;il s&amp;rsquo;agisse d&amp;rsquo;un type valeur ou d&amp;rsquo;un objet.</description>
    </item>
    
    <item>
      <title>Validation du modèle</title>
      <link>https://www.wikiod.com/fr/asp-dotnet-mvc/validation-du-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/asp-dotnet-mvc/validation-du-modele/</guid>
      <description>Supprimer un objet de la validation # Supposons que vous ayez le modèle suivant :
public class foo { [Required] public string Email { get; set; } [Required] public string Password { get; set; } [Required] public string FullName { get; set; } } Mais vous souhaitez exclure FullName de la validation du modèle car vous utilisez également le modèle à un endroit où FullName n&amp;rsquo;est pas renseigné, vous pouvez le faire de la manière suivante :</description>
    </item>
    
  </channel>
</rss>

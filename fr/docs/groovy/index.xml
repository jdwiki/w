<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel génial on </title>
    <link>https://www.wikiod.com/fr/docs/groovy/</link>
    <description>Recent content in Tutoriel génial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Débuter avec groovy</title>
      <link>https://www.wikiod.com/fr/groovy/debuter-avec-groovy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/debuter-avec-groovy/</guid>
      <description>Installation ou configuration # Il existe deux façons courantes d&amp;rsquo;installer Groovy.
Télécharger
Le binaire Groovy peut être téléchargé sur la page download du site Web Groovy. Vous pouvez décompresser l&amp;rsquo;archive et ajouter le chemin vers %GROOVY_HOME%/bin/groovy.bat à la variable d&amp;rsquo;environnement système PATH, où %GROOVY_HOME% est le répertoire dans lequel Groovy est décompressé.
SDKMAN
L&amp;rsquo;autre option consiste à utiliser SDKMAN. Cette option a rapidement gagné en popularité et rend la gestion de plusieurs versions de Groovy très simple.</description>
    </item>
    
    <item>
      <title>Groovy Truth (vérité)</title>
      <link>https://www.wikiod.com/fr/groovy/groovy-truth-verite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/groovy-truth-verite/</guid>
      <description>Groovy évalue les conditions dans les instructions if, while et for de la même manière que Java le fait pour les conditions Java standard : en Java, vous devez fournir une expression booléenne (une expression qui évalue un booléen) et le résultat est le résultat de l&amp;rsquo;évaluation.
En Groovy , le résultat est le même qu&amp;rsquo;en Java pour ces conditions (aucun exemple fourni, il s&amp;rsquo;agit de Java standard).
L&amp;rsquo;autre mécanisme d&amp;rsquo;évaluation de la véracité illustré par des exemples peut être résumé comme suit :</description>
    </item>
    
    <item>
      <title>Interpolation de chaîne</title>
      <link>https://www.wikiod.com/fr/groovy/interpolation-de-chaine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/interpolation-de-chaine/</guid>
      <description>Syntaxe # $ ${} - ${-&amp;gt;} De base # def str = &#39;nice&#39; assert &amp;quot;Groovy is $str&amp;quot; == &#39;Groovy is nice&#39; Expression pointée # def arg = [phrase: &#39;interpolated&#39;] assert &amp;quot;This is $arg.phrase&amp;quot; == &#39;This is interpolated&#39; Expression impatiente # def str = &#39;old&#39; def interpolated = &amp;quot;I am the ${str} value&amp;quot; assert interpolated == &#39;I am the old value&#39; str = &#39;new&#39; assert interpolated == &#39;I am the old value&#39; Expression paresseuse # Nous pouvons avoir une interpolation paresseuse dans Strings.</description>
    </item>
    
    <item>
      <title>Chaînes et littéraux GString</title>
      <link>https://www.wikiod.com/fr/groovy/chaines-et-litteraux-gstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/chaines-et-litteraux-gstring/</guid>
      <description>Syntaxe # &amp;lsquo;Chaîne entre guillemets simples&amp;rsquo; &amp;ldquo;Chaîne entre guillemets doubles&amp;rdquo; &amp;lsquo;&amp;lsquo;&amp;lsquo;Chaîne multiligne&amp;rsquo;&amp;rsquo;&amp;rsquo; &amp;ldquo;&amp;ldquo;&amp;ldquo;Chaîne triple entre guillemets doubles&amp;rdquo;&amp;rdquo;&amp;rdquo; /Chaîne oblique/ Chaîne de barre oblique $/Dollar/$ Groovy a deux types de chaînes java java.lang.String et groovy.lang.GString, ainsi que plusieurs formes de chaînes littérales (voir syntaxe et exemples).
La principale différence entre les deux types de chaînes est que GString prend en charge l&amp;rsquo;interpolation de chaîne.
Chaîne de barre oblique en dollars # def param = &#39;string&#39; def str = $/ multiline $param no need to escape slash \n $ $$ /$ assert str instanceof GString assert str.</description>
    </item>
    
    <item>
      <title>Fermetures</title>
      <link>https://www.wikiod.com/fr/groovy/fermetures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/fermetures/</guid>
      <description>Fermeture avec paramètres implicites # [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { it.length() } it est le nom par défaut du paramètre si vous avez un seul paramètre et ne nommez pas explicitement le paramètre. Vous pouvez éventuellement déclarer le paramètre également.
[&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { animal -&amp;gt; animal.length() } Fermeture avec des paramètres explicites # def addNumbers = { a, b -&amp;gt; a + b } addNumbers(-7, 15) // returns 8 Fermeture avec cible personnalisée pour les appels de méthode avec récepteur implicite # class MyHello { def sayHello() { &amp;quot;Hello, world&amp;quot; } } def cl = { sayHello() } cl() // groovy.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/fr/groovy/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/json/</guid>
      <description>Analyser une chaîne json # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() def obj = jsonSlurper.parseText(&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [1] }&#39;) assert obj.foo == &#39;bar&#39; assert obj.baz == [1] Joli-imprime une chaîne json # import groovy.json.JsonOutput; def json = JsonOutput.toJson([foo: &#39;bar&#39;, baz: [1]]) assert json == &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;,&amp;quot;baz&amp;quot;:[1]}&#39; def pretty = JsonOutput.prettyPrint(json) assert pretty == &#39;&#39;&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [ 1 ] }&#39;&#39;&#39; Parser un fichier json # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() File fl = new File(&#39;/path/to/fils.</description>
    </item>
    
    <item>
      <title>Opérateur de propagation</title>
      <link>https://www.wikiod.com/fr/groovy/operateur-de-propagation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/operateur-de-propagation/</guid>
      <description>Dans la plupart des cas, l&amp;rsquo;opérateur de propagation *. est identique à l&amp;rsquo;appel de .collect { it.________ }.
def animals = [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;] assert animals*.length() == animals.collect { it.length() } Mais si le sujet est nul, ils se comportent différemment :
def animals = null assert animals*.length() == null assert animals.collect { it.length() } == [] Accéder à une propriété # class Vector { double x double y } def points = [ new Vector(x: 10, y: -5), new Vector(x: -17.</description>
    </item>
    
    <item>
      <title>Opérateur de vaisseau spatial</title>
      <link>https://www.wikiod.com/fr/groovy/operateur-de-vaisseau-spatial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/operateur-de-vaisseau-spatial/</guid>
      <description>Opérateur de vaisseau spatial pour les tris personnalisés # class User { String name int age } def users = [ new User(name: &amp;quot;Bob&amp;quot;, age: 20), new User(name: &amp;quot;Tom&amp;quot;, age: 50), new User(name: &amp;quot;Bill&amp;quot;, age: 45) ] // sort by age users.sort { a, b -&amp;gt; a.age &amp;lt;=&amp;gt; b.age } Utilisation de base # l&amp;rsquo;opérateur de vaisseau spatial renvoie -1 lorsque l&amp;rsquo;opérateur de gauche est plus petit, 0 lorsque les opérateurs sont égaux et 1 sinon :</description>
    </item>
    
    <item>
      <title>Opérateurs de collecte</title>
      <link>https://www.wikiod.com/fr/groovy/operateurs-de-collecte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/operateurs-de-collecte/</guid>
      <description>Itérer sur une collection # Listes # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // using implicit argument lst.each { println it } // using explicit argument lst.each { val -&amp;gt; println val } // both print: // foo // bar // baz Itérer avec index # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // explicit arguments are required lst.eachWithIndex { val, idx -&amp;gt; println &amp;quot;$val in position $idx&amp;quot; }​​​​​​​​​​​​​​ // prints: // foo in position 0 // bar in position 1 // baz in position 2 Plans # def map = [foo: &#39;FOO&#39;, bar: &#39;BAR&#39;, baz: &#39;BAZ&#39;] // using implicit argument map.</description>
    </item>
    
    <item>
      <title>Client REST</title>
      <link>https://www.wikiod.com/fr/groovy/client-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/groovy/client-rest/</guid>
      <description>Utilisation du client HTTP de Groovy, exemples et pièges.
OBTENIR la requête # @Grab(group=&#39;org.codehaus.groovy.modules.http-builder&#39;, module=&#39;http-builder&#39;, version=&#39;0.7&#39; ) import groovyx.net.http.RESTClient try { def restClient = new RESTClient(&amp;quot;http://weathers.co&amp;quot;) def response = restClient.get(path: &#39;/api.php&#39;, query: [&#39;city&#39;: &#39;Prague&#39;]) println &amp;quot;Status : ${response.status}&amp;quot; println &amp;quot;Body : ${response.data.text}&amp;quot; } catch (Exception e) { println &amp;quot;Error : ${e.statusCode}&amp;quot; println &amp;quot;Message : ${e.response.data}&amp;quot; } </description>
    </item>
    
  </channel>
</rss>

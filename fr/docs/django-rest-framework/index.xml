<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django-rest-framework Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/django-rest-framework/</link>
    <description>Recent content in Django-rest-framework Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/django-rest-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec django-rest-framework</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/premiers-pas-avec-django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/premiers-pas-avec-django-rest-framework/</guid>
      <description>Installer ou configurer # Conditions
-Python (2.7, 3.2, 3.3, 3.4, 3.5, 3.6)
Django (1.7+, 1.8, 1.9, 1.10, 1.11) Installer
Vous pouvez soit utiliser pip pour installer ou cloner le projet à partir de github.
Utilisation de pip :
pip install djangorestframework Utilisation de git clone :
git clone git@github.com:tomchristie/django-rest-framework.git Après l&amp;rsquo;installation, vous devez ajouter rest_framework à vos paramètres INSTALLED_APPS.
INSTALLED_APPS = ( ... &#39;rest_framework&#39;, ) Si vous avez l&amp;rsquo;intention d&amp;rsquo;utiliser l&amp;rsquo;API navigable, vous aurez probablement aussi souhaitez ajouter les vues de connexion et de déconnexion du framework REST.</description>
    </item>
    
    <item>
      <title>Authentification par jeton avec Django Rest Framework</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/authentification-par-jeton-avec-django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/authentification-par-jeton-avec-django-rest-framework/</guid>
      <description>AJOUTER LA FONCTIONNALITÉ AUTH # Django REST Framework a déjà des méthodes d&amp;rsquo;authentification intégrées, l&amp;rsquo;une d&amp;rsquo;entre elles est basée sur des jetons, donc la première chose à faire est de dire à notre projet que nous allons utiliser l&amp;rsquo;authentification de rest framework. Ouvrez le fichier settings.py et ajoutez la ligne en surbrillance.
INSTALLED_APPS = ( &#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, &#39;rest_framework&#39;, &#39;rest_framework.authtoken&#39;, &#39;test_app&#39;, ) Comme nous avons ajouté une nouvelle application au projet, nous devons synchroniser</description>
    </item>
    
    <item>
      <title>Authentification</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/authentification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/authentification/</guid>
      <description>## Configuration de l&amp;rsquo;authentification à l&amp;rsquo;échelle mondiale L&amp;rsquo;authentification dans Django REST Framework peut être configurée globalement en tant que sous-clé de la variable REST_FRAMEWORK dans settings.py, tout comme le reste des configurations de framework par défaut.
REST_FRAMEWORK = { &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: ( &#39;rest_framework.authentication.BasicAuthentication&#39;, &#39;rest_framework.authentication.SessionAuthentication&#39;, ) } Configuration de l&amp;rsquo;authentification pour une APIView spécifique # L&amp;rsquo;authentification peut être définie pour un point de terminaison APIView spécifique, à l&amp;rsquo;aide de la variable authentication_classes :</description>
    </item>
    
    <item>
      <title>Filtres</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/filtres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/filtres/</guid>
      <description>Exemples de filtrage, des plus simples aux plus complexes # Filtrage à la vanille ordinaire # Pour filtrer n&amp;rsquo;importe quelle vue, remplacez sa méthode get_queryset pour renvoyer un ensemble de requêtes filtrées
class HREmployees(generics.ListAPIView): def get_queryset(self): return Employee.objects.filter(department=&amp;quot;Human Resources&amp;quot;) Toutes les fonctions de l&amp;rsquo;API utiliseront alors l&amp;rsquo;ensemble de requêtes filtrées pour les opérations. Par exemple, la liste de la vue ci-dessus contiendra uniquement les employés dont le service est les ressources humaines.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/pagination/</guid>
      <description>La pagination est la division de grands ensembles de données en pages séparées et autonomes.
Sur django rest framework, la pagination permet à l&amp;rsquo;utilisateur de modifier la quantité de données dans chaque page et le style par lequel la division est appliquée.
[Introduction] Configurer le style de pagination globalement # Afin de définir le style de pagination pour l&amp;rsquo;ensemble du projet, vous devez définir DEFAULT_PAGINATION_CLASS et PAGE_SIZE dans les paramètres du projet.</description>
    </item>
    
    <item>
      <title>Mélanges</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/melanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/melanges/</guid>
      <description>Les classes mixin fournissent les actions qui sont utilisées pour fournir le comportement de base de la vue. Notez que les classes mixin fournissent des méthodes d&amp;rsquo;action plutôt que de définir directement les méthodes du gestionnaire, telles que .get() et .post(). Cela permet une composition plus flexible du comportement. -[Documentation officielle du cadre de repos de Django][1]-
[1] : http://www.django-rest-framework.org/api-guide/generic-views/#mixins
[Introduction] Liste des mixins et utilisation sur les vues/ensembles de vues # Liste des mixins disponibles :</description>
    </item>
    
    <item>
      <title>Sérialiseurs</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/serialiseurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/serialiseurs/</guid>
      <description>Selon la documentation officielle de DRF, les sérialiseurs aident à convertir des données complexes telles que des ensembles de requêtes et une instance de modèle en types de données python natifs afin qu&amp;rsquo;elles puissent être rendues en tant que JSON, XML et d&amp;rsquo;autres types de contenu.
Les sérialiseurs dans DRF ressemblent davantage aux classes django Form et ModelForm. La classe Serializer nous fournit un moyen personnalisé de gérer les données comme django Form.</description>
    </item>
    
    <item>
      <title>Routeurs</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/routeurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/routeurs/</guid>
      <description>Le routage est le processus de mappage de la logique (méthodes d&amp;rsquo;affichage, etc.) à un ensemble d&amp;rsquo;URL. Le framework REST ajoute la prise en charge du routage automatique des URL vers Django.
Syntaxe # routeur = routeurs.SimpleRouter() router.register (préfixe, ensemble de vues) router.urls # l&amp;rsquo;ensemble d&amp;rsquo;urls généré pour le viewset enregistré. [Introduction] Utilisation de base, SimpleRouter # Le routage automatique pour le DRF peut être réalisé pour les classes ViewSet.</description>
    </item>
    
    <item>
      <title>Utilisation de django-rest-framework avec AngularJS comme framework frontal.</title>
      <link>https://www.wikiod.com/fr/django-rest-framework/utilisation-de-django-rest-framework-avec-angularjs-comme-framework-frontal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/django-rest-framework/utilisation-de-django-rest-framework-avec-angularjs-comme-framework-frontal/</guid>
      <description>Dans cette rubrique, nous verrons comment utiliser Django REST Framework comme API backend pour une application AngularJS. Les principaux problèmes qui se posent entre l&amp;rsquo;utilisation conjointe de DRF et d&amp;rsquo;AngularJS tournent généralement autour de la communication HTTP entre les deux technologies, ainsi que de la représentation des données aux deux extrémités, et enfin de la manière de déployer et d&amp;rsquo;architecturer l&amp;rsquo;application/le système.
Requête angulaire # $http.post(&amp;quot;\&amp;lt;domain\&amp;gt;/user-registration/&amp;quot;, {username: username, password: password}) .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sbt on </title>
    <link>https://www.wikiod.com/fr/docs/sbt/</link>
    <description>Recent content in Tutoriel sbt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sbt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commencer avec sbt</title>
      <link>https://www.wikiod.com/fr/sbt/commencer-avec-sbt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/commencer-avec-sbt/</guid>
      <description>Installer SBT sur Linux # Des instructions complètes peuvent être [trouvé ici][1].
[Installez le JDK][2].
Définissez la variable d&amp;rsquo;environnement Java.
export JAVA_HOME=/usr/local/java/jdk1.8.0_102 echo $JAVA_HOME /usr/local/java/jdk1.8.0_102 export PATH=$PATH:$JAVA_HOME/bin/ echo $PATH ...:/usr/local/java/jdk1.8.0_102/bin/ Installez Scala.
sudo wget http://www.scala-lang.org/files/archive/scala-2.11.8.deb sudo dpkg -i scala-2.11.8.deb sudo apt-get update sudo apt-get install scala Installez SBT.
wget https://bintray.com/artifact/download/sbt/debian/sbt-0.13.9.deb sudo dpkg -i sbt-0.13.9.deb sudo apt-get update sudo apt-get install sbt Distributions Linux basées sur RPM # Téléchargez les définitions du référentiel SBT et ajoutez-les à YUM : curl https://bintray.</description>
    </item>
    
    <item>
      <title>Dépendances</title>
      <link>https://www.wikiod.com/fr/sbt/dependances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/dependances/</guid>
      <description>Ajouter une dépendance de bibliothèque gérée # libraryDependency est la SettingKey qui gère les dépendances de bibliothèques &amp;lsquo;gérées&amp;rsquo;, qui sont des dépendances téléchargées automatiquement, correspondant aux versions fournies. Pour ajouter une seule dépendance :
libraryDependencies += &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.2.0-M1&amp;quot; La première partie, &amp;quot;com.typesafe.slick&amp;quot;, indique le package de la bibliothèque. La deuxième partie, &amp;quot;slick&amp;quot;, est la bibliothèque en question. La dernière partie, &amp;quot;3.2.0-M1&amp;quot;, est la version. Étant donné que la bibliothèque est jointe par %%, la version de Scala fournie par la clé de paramètre scalaVersion sera utilisée.</description>
    </item>
    
    <item>
      <title>Aperçu de la construction</title>
      <link>https://www.wikiod.com/fr/sbt/apercu-de-la-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/apercu-de-la-construction/</guid>
      <description>La documentation officielle est sur [www.scala-sbt.org][1].
[1] : http://www.scala-sbt.org/documentation.html
Structure du répertoire # La structure standard d&amp;rsquo;un projet construit par SBT est :
projectName/ build.sbt project/ &amp;lt;SBT sub-build information&amp;gt; src/ main/ scala/ &amp;lt;Scala source files&amp;gt; java/ &amp;lt;Java source files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; test/ scala/ &amp;lt;Scala test files&amp;gt; java/ &amp;lt;Java test files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; D&amp;rsquo;autres répertoires peuvent exister, mais la construction traite principalement de ceux-ci. Dans le répertoire de base build.</description>
    </item>
    
    <item>
      <title>Projets</title>
      <link>https://www.wikiod.com/fr/sbt/projets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/projets/</guid>
      <description>Plusieurs projets dans le même build (sous-projets) # Parfois, une construction combine plusieurs répertoires source, chacun étant son propre &amp;ldquo;projet&amp;rdquo;. Par exemple, vous pourriez avoir une structure de construction comme celle-ci :
nom du projet/ build.sbt project/ src/ main/ &amp;hellip; test/ &amp;hellip; core/ src/ main/ &amp;hellip; test/ &amp;hellip; webapp/ src/ main/ &amp;hellip; test/ &amp;hellip;
Dans le projet ci-dessus, le code dans projectName/src est considéré comme le projet root. Il existe deux autres modules, ou &amp;ldquo;sous-projets&amp;rdquo;, &amp;ldquo;core&amp;rdquo; et &amp;ldquo;webapp&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Tâches</title>
      <link>https://www.wikiod.com/fr/sbt/taches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/taches/</guid>
      <description>Créer une tâche simple # Tout ce qui est nécessaire pour définir une tâche est une déclaration de son type et une description :
lazy val exampleTask = taskKey[Unit](&amp;quot;An example task that will return no value.&amp;quot;) Étant donné que &amp;ldquo;Unité&amp;rdquo; est le type, cette tâche est entièrement composée d&amp;rsquo;effets secondaires. Une fois défini, pour mettre en œuvre les actions :
exampleTask := { val s: TaskStreams = streams.value s.log.info(&amp;quot;The example task was executed.</description>
    </item>
    
    <item>
      <title>Débuter avec le développement quotidien</title>
      <link>https://www.wikiod.com/fr/sbt/debuter-avec-le-developpement-quotidien/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sbt/debuter-avec-le-developpement-quotidien/</guid>
      <description>Exemple de développement continu quotidien avec Scala # # install sbt with homebrew (if you didn&#39;t) brew install sbt # - create a new scala project # - name your project name when asked like: hello-world sbt new sbt/scala-seed.g8 # go to the new project directory that you named cd hello-world # run sbt to open the sbt shell sbt # run your project in continuous running mode ~ run # to continuously see the test outputs # open up a new terminal tab, run sbt, type: ~ test # to continuously compile # open up a new terminal tab, run sbt, type: ~ compile ~ utilisé pour les opérations continues dans sbt comme vu ci-dessus.</description>
    </item>
    
  </channel>
</rss>

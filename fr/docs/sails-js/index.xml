<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sails.js on </title>
    <link>https://www.wikiod.com/fr/docs/sails-js/</link>
    <description>Recent content in Tutoriel sails.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sails-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec sails.js</title>
      <link>https://www.wikiod.com/fr/sails-js/premiers-pas-avec-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/premiers-pas-avec-sailsjs/</guid>
      <description>Création d&amp;rsquo;un nouveau projet # Une fois que vous avez installé Sails, tapez simplement
$ sails new &amp;lt;project_name&amp;gt; Cela créera un squelette de projet Sails dans un nouveau dossier appelé &amp;lt;project_name&amp;gt;.
Vous pouvez également créer un nouveau projet dans un dossier vide en tapant
$ sails new Lancer l&amp;rsquo;application # Une fois votre projet créé, vous pouvez lancer l&amp;rsquo;application en tapant
$ sails lift Par défaut, vous pouvez accéder à l&amp;rsquo;application dans le navigateur sur le port 1337.</description>
    </item>
    
    <item>
      <title>Authentification par jeton Web JSON avec Sails</title>
      <link>https://www.wikiod.com/fr/sails-js/authentification-par-jeton-web-json-avec-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/authentification-par-jeton-web-json-avec-sails/</guid>
      <description>Configuration # La première étape # Nous devons créer un service appelé jwToken. Allez dans le répertoire api/services et créez jwToken.js.
&#39;use strict&#39;; const jwt = require(&#39;jsonwebtoken&#39;), tokenSecret = &amp;quot;secretissecret&amp;quot;; module.exports = { // Generates a token from supplied payload issue(payload) { return jwt.sign( payload, tokenSecret, // Token Secret that we sign it with { expiresIn: &amp;quot;30 days&amp;quot; // Token Expire time }); }, // Verifies token on a request verify(token, callback) { return jwt.</description>
    </item>
    
    <item>
      <title>API Blueprint</title>
      <link>https://www.wikiod.com/fr/sails-js/api-blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/api-blueprint/</guid>
      <description>Comment fonctionne l&amp;rsquo;API Blueprint ? # Lorsque les voiles commencent à utiliser le &amp;ldquo;sails lift&amp;rdquo;, les voiles regardent pour voir si vous avez tout contrôleur défini. Dans notre exemple, nous avons un contrôleur, l&amp;rsquo;utilisateur manette. Sails fournit ensuite l&amp;rsquo;accès aux actions du plan pour cet utilisateur contrôleur comme si nous les avions construits nous-mêmes dans le contrôleur. Voile aussi crée automatiquement des itinéraires de plan au moment de la levée du serveur.</description>
    </item>
    
    <item>
      <title>Configurer mysql avec sails.js</title>
      <link>https://www.wikiod.com/fr/sails-js/configurer-mysql-avec-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/configurer-mysql-avec-sailsjs/</guid>
      <description>Comment configurer la connexion à la base de données mysql dans sails.js # Pour ce faire, localisez d&amp;rsquo;abord le dossier de configuration dans votre racine. Ouvrez ensuite connections.js
Localiser
// someMysqlServer: { // adapter: &#39;sails-mysql&#39;, // host: &#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;, // user: &#39;YOUR_MYSQL_USER&#39;, //optional // password: &#39;YOUR_MYSQL_PASSWORD&#39;, //optional // database: &#39;YOUR_MYSQL_DB&#39; //optional // }, Décommentez ces lignes.
Donnez un nom approprié pour le connecteur comme celui-ci someMysqlServer à mysql_connection ou n&amp;rsquo;importe quel nom comme vous le souhaitez</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/sails-js/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/routage/</guid>
      <description>Les routes sont des règles qui indiquent à Sails quoi faire face à une demande entrante.
Les routes sont définies dans config/routes.js. L&amp;rsquo;ordre des itinéraires est significatif, car les itinéraires sont mis en correspondance de haut en bas. Cela signifie que si vous avez un itinéraire spécifique qui pourrait également être mis en correspondance avec un itinéraire générique, l&amp;rsquo;itinéraire spécifique doit être défini au-dessus de l&amp;rsquo;itinéraire générique.
Lorsqu&amp;rsquo;une requête entre dans votre application, sails.</description>
    </item>
    
    <item>
      <title>Contrôleurs</title>
      <link>https://www.wikiod.com/fr/sails-js/controleurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/controleurs/</guid>
      <description>Les contrôleurs (le C dans MVC) sont les principaux objets de votre application Sails chargés de répondre aux requêtes d&amp;rsquo;un navigateur Web, d&amp;rsquo;une application mobile ou de tout autre système capable de communiquer avec un serveur. Ils agissent souvent comme un intermédiaire entre vos modèles et vos vues. Pour de nombreuses applications, les contrôleurs contiendront l&amp;rsquo;essentiel de la logique métier de votre projet.
Syntaxe ES2015 # &#39;use strict&#39;; // This is an example of a /api/controllers/HomeController.</description>
    </item>
    
    <item>
      <title>Des modèles</title>
      <link>https://www.wikiod.com/fr/sails-js/des-modeles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/des-modeles/</guid>
      <description>Sails est installé avec un puissant ORM/ODM appelé Waterline, un outil indépendant du magasin de données qui simplifie considérablement l&amp;rsquo;interaction avec une ou plusieurs bases de données. Il fournit une couche d&amp;rsquo;abstraction au-dessus de la base de données sous-jacente, vous permettant d&amp;rsquo;interroger et de manipuler facilement vos données sans écrire de code d&amp;rsquo;intégration spécifique au fournisseur.
Modèle de base # Cet exemple montre comment définir un modèle simple dans Sails.js</description>
    </item>
    
    <item>
      <title>Adaptateur de base de données PostgreSQL pour Sails</title>
      <link>https://www.wikiod.com/fr/sails-js/adaptateur-de-base-de-donnees-postgresql-pour-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/adaptateur-de-base-de-donnees-postgresql-pour-sails/</guid>
      <description>Installer # Vous pouvez installer l&amp;rsquo;adaptateur postgreSQL via NPM.
npm install sails-postgresql Configuration # Vous pouvez configurer les paramètres de la base de données dans config/connections.js.
Voici un exemple :
postgresql: { database: &#39;databaseName&#39;, host: &#39;localhost&#39;, user: &#39;root&#39;, password: &#39;&#39;, port: 5432, poolSize: 10, ssl: false }; Vous pouvez également fournir les informations de connexion au format URL :
postgresql: { url: &#39;postgres://username:password@hostname:port/database&#39;, ssl: false }; </description>
    </item>
    
    <item>
      <title>Adaptateur MongoDB pour voiles</title>
      <link>https://www.wikiod.com/fr/sails-js/adaptateur-mongodb-pour-voiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sails-js/adaptateur-mongodb-pour-voiles/</guid>
      <description>Configuration # Vous pouvez configurer les paramètres de la base de données dans config/connections.js.
Exemple:
someMongoDb: { adapter: &#39;sails-mongo&#39;, host: &#39;localhost&#39;, // defaults to `localhost` if omitted port: 27017, // defaults to 27017 if omitted user: &#39;username_here&#39;, // or omit if not relevant password: &#39;password_here&#39;, // or omit if not relevant database: &#39;database_name_here&#39; // or omit if not relevant } Alternativement, vous pouvez spécifier votre configuration Mongo en tant qu&amp;rsquo;URL</description>
    </item>
    
  </channel>
</rss>

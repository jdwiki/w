<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel rx-java on </title>
    <link>https://www.wikiod.com/fr/docs/rx-java/</link>
    <description>Recent content in Tutoriel rx-java on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/rx-java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec rx-java</title>
      <link>https://www.wikiod.com/fr/rx-java/premiers-pas-avec-rx-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/premiers-pas-avec-rx-java/</guid>
      <description>Une introduction à RxJava # Les concepts de base de RxJava sont ses Observables et Subscribers. Un Observable émet des objets, tandis qu&amp;rsquo;un Subscriber les consomme.
Observable
Observable est une classe qui implémente le modèle de conception réactif. Ces Observables fournissent des méthodes qui permettent aux consommateurs de s&amp;rsquo;abonner aux changements d&amp;rsquo;événements. Les changements d&amp;rsquo;événement sont déclenchés par l&amp;rsquo;observable. Il n&amp;rsquo;y a aucune restriction quant au nombre d&amp;rsquo;abonnés qu&amp;rsquo;un Observable peut avoir, ou au nombre d&amp;rsquo;objets qu&amp;rsquo;un Observable peut émettre.</description>
    </item>
    
    <item>
      <title>Contre-pression</title>
      <link>https://www.wikiod.com/fr/rx-java/contre-pression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/contre-pression/</guid>
      <description>Introduction # La contre-pression se produit lorsque, dans un pipeline de traitement &amp;ldquo;observable&amp;rdquo;, certaines étapes asynchrones ne peuvent pas traiter les valeurs assez rapidement et ont besoin d&amp;rsquo;un moyen de dire au producteur en amont de ralentir.
Le cas classique du besoin de contre-pression est lorsque le producteur est une source chaude :
PublishSubject&amp;lt;Integer&amp;gt; source = PublishSubject.create(); source .observeOn(Schedulers.computation()) .subscribe(v -&amp;gt; compute(v), Throwable::printStackTrace); for (int i = 0; i &amp;lt; 1_000_000; i++) { source.</description>
    </item>
    
    <item>
      <title>Tests unitaires</title>
      <link>https://www.wikiod.com/fr/rx-java/tests-unitaires/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/tests-unitaires/</guid>
      <description>Étant donné que toutes les méthodes Schedulers sont statiques, les tests unitaires utilisant les crochets RxJava ne peuvent pas être exécutés en parallèle sur la même instance JVM. S&amp;rsquo;ils étaient là, un TestScheduler serait supprimé au milieu d&amp;rsquo;un test unitaire. C&amp;rsquo;est essentiellement l&amp;rsquo;inconvénient de l&amp;rsquo;utilisation de la classe Schedulers.
Planificateur de tests # TestSchedulers vous permet de contrôler le temps et l&amp;rsquo;exécution des Observables au lieu d&amp;rsquo;avoir à faire des attentes occupées, à rejoindre des threads ou quoi que ce soit pour manipuler le temps système.</description>
    </item>
    
    <item>
      <title>Android avec RxJava</title>
      <link>https://www.wikiod.com/fr/rx-java/android-avec-rxjava/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/android-avec-rxjava/</guid>
      <description>RxAndroid était une bibliothèque avec beaucoup de fonctionnalités. Il a été divisé en plusieurs bibliothèques différentes passant de la version 0.25.0 à 1.x.
Une liste des bibliothèques qui implémentent les fonctionnalités disponibles avant la version 1.0 est maintenue [ici][1].
[1] : https://github.com/ReactiveX/RxAndroid/wiki
RxAndroid - Planificateurs Android # C&amp;rsquo;est littéralement la seule chose dont vous avez besoin pour commencer à utiliser RxJava sur Android.
Incluez RxJava et [RxAndroid][1] dans vos dépendances gradle :</description>
    </item>
    
    <item>
      <title>RxJava2 Flowable et Abonné</title>
      <link>https://www.wikiod.com/fr/rx-java/rxjava2-flowable-et-abonne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/rxjava2-flowable-et-abonne/</guid>
      <description>Cette rubrique montre des exemples et de la documentation concernant les concepts réactifs de Flowable et Subscriber qui ont été introduits dans rxjava version2
l&amp;rsquo;exemple a besoin de rxjava2 comme dépendance, les coordonnées maven pour la version utilisée sont :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.reactivex.rxjava2&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;rxjava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; exemple producteur-consommateur avec support de contre-pression dans le producteur # Le TestProducer de cet exemple produit des objets Integer dans une plage donnée et les transmet à son Subscriber.</description>
    </item>
    
    <item>
      <title>Observable</title>
      <link>https://www.wikiod.com/fr/rx-java/observable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/observable/</guid>
      <description>Créer un observable # Il existe plusieurs façons de créer un Observable dans RxJava. Le moyen le plus puissant consiste à utiliser la méthode Observable.create. Mais c&amp;rsquo;est aussi la manière la plus compliquée. Vous devez donc éviter de l&amp;rsquo;utiliser, dans la mesure du possible.
Emission d&amp;rsquo;une valeur sortante # Si vous avez déjà une valeur, vous pouvez utiliser Observable.just pour émettre votre valeur.
Observable.just(&amp;quot;Hello World&amp;quot;).subscribe(System.out::println); Émettre une valeur qui doit être calculée # Si vous souhaitez émettre une valeur qui n&amp;rsquo;est pas déjà calculée, ou qui peut prendre du temps à être calculée, vous pouvez utiliser Observable.</description>
    </item>
    
    <item>
      <title>Sujets</title>
      <link>https://www.wikiod.com/fr/rx-java/sujets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/sujets/</guid>
      <description>Syntaxe # Sujet&amp;lt;T, R&amp;gt; sujet = AsyncSubject.create(); // AsyncSubject par défaut Sujet&amp;lt;T, R&amp;gt; sujet = BehaviorSubject.create(); // Sujet de comportement par défaut Sujet&amp;lt;T, R&amp;gt; sujet = PublishSubject.create(); // Objet de publication par défaut Sujet&amp;lt;T, R&amp;gt; sujet = ReplaySubject.create(); // ReplaySubject par défaut mySafeSubject = new SerializedSubject(unSafeSubject); // Convertit un unsafeSubject en un safeSubject - généralement pour les sujets multi-threads Paramètres # Paramètres Détails T Type d&amp;rsquo;entrée R Type de sortie Cette documentation fournit des détails et des explications sur Sujet.</description>
    </item>
    
    <item>
      <title>Les opérateurs</title>
      <link>https://www.wikiod.com/fr/rx-java/les-operateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/les-operateurs/</guid>
      <description>Ce document décrit le comportement de base d&amp;rsquo;un opérateur.
Opérateurs, une introduction # Un opérateur peut être utilisé pour manipuler le flux d&amp;rsquo;objets de Observable à Subscriber.
Observable&amp;lt;Integer&amp;gt; integerObservable = Observable.just(1, 2, 3); // creating a simple Integer observable Subscriber&amp;lt;String&amp;gt; mSubscriber = new Subscriber&amp;lt;String&amp;gt;() { @Override public void onCompleted() { System.out.println(&amp;quot;onCompleted called!&amp;quot;); } @Override public void onError(Throwable throwable) { System.out.println(&amp;quot;onError called&amp;quot;); } @Override public void onNext(String string) { System.out.println(&amp;quot;onNext called with: &amp;quot; + string); } }; // a simple String subscriber integerObservable .</description>
    </item>
    
    <item>
      <title>Planificateurs</title>
      <link>https://www.wikiod.com/fr/rx-java/planificateurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/planificateurs/</guid>
      <description>Exemples de base # Les planificateurs sont une abstraction RxJava sur l&amp;rsquo;unité de traitement. Un planificateur peut être soutenu par un service Executor, mais vous pouvez implémenter votre propre implémentation de planificateur.
Un Scheduler doit répondre à cette exigence :
Doit traiter les tâches non retardées de manière séquentielle (ordre FIFO) La tâche peut être retardée Un Scheduler peut être utilisé comme paramètre dans certains opérateurs (exemple : delay), ou utilisé avec la méthode subscribeOn / observeOn.</description>
    </item>
    
    <item>
      <title>Rénovation et RxJava</title>
      <link>https://www.wikiod.com/fr/rx-java/renovation-et-rxjava/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rx-java/renovation-et-rxjava/</guid>
      <description>Configurer Retrofit et RxJava # Retrofit2 prend en charge plusieurs mécanismes d&amp;rsquo;exécution enfichables, l&amp;rsquo;un d&amp;rsquo;eux est RxJava.
Pour utiliser la mise à niveau avec RxJava, vous devez d&amp;rsquo;abord ajouter l&amp;rsquo;adaptateur Retrofit RxJava à votre projet :
compile &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39; vous devez alors ajouter l&amp;rsquo;adaptateur lors de la création de votre instance de rénovation :
Retrofit retrofit = new Retrofit.Builder() .baseUrl(&amp;quot;https://api.example.com&amp;quot;) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .build(); Dans votre interface, lorsque vous définissez l&amp;rsquo;API, le type de retour doit être &amp;ldquo;Observable&amp;rdquo;, par exemple :</description>
    </item>
    
  </channel>
</rss>

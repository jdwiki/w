<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel libgdx on </title>
    <link>https://www.wikiod.com/fr/docs/libgdx/</link>
    <description>Recent content in Tutoriel libgdx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/libgdx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec libgdx</title>
      <link>https://www.wikiod.com/fr/libgdx/premiers-pas-avec-libgdx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/premiers-pas-avec-libgdx/</guid>
      <description>Installation ou configuration # LibGDX a une configuration assez simple, à l&amp;rsquo;aide d&amp;rsquo;un simple programme Java. Vous pouvez trouver le téléchargement [ici][1]. Lorsque vous démarrez l&amp;rsquo;application, elle ressemblera à ceci :[![Example of LibGDX Project Generator][2]][2] Remarque : cette capture d&amp;rsquo;écran a été prise sous Linux et montre un chemin différent d&amp;rsquo;une installation Windows. Cependant, le formulaire est le même sur tout système d&amp;rsquo;exploitation compatible avec cette application d&amp;rsquo;installation
Champs de saisie # Dans la zone de saisie &amp;ldquo;Nom&amp;rdquo;, est le nom du jeu pour votre projet.</description>
    </item>
    
    <item>
      <title>Système d&#39;entités Ashley</title>
      <link>https://www.wikiod.com/fr/libgdx/systeme-dentites-ashley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/systeme-dentites-ashley/</guid>
      <description>[Ashley Entity System][1] est une bibliothèque Entity System gérée par [l&amp;rsquo;organisation LibGDX][2] et est bien adaptée au développement de jeux. Cela dépend des classes d&amp;rsquo;utilitaires LibGDX, mais peut être utilisé avec d&amp;rsquo;autres frameworks de jeux Java non basés sur LibGDX avec quelques travaux.
Les systèmes d&amp;rsquo;entités offrent une manière différente de gérer les données et les fonctionnalités vers de grands ensembles d&amp;rsquo;objets sans avoir à enrichir les classes d&amp;rsquo;objets avec l&amp;rsquo;héritage.</description>
    </item>
    
    <item>
      <title>Déplacement des acteurs sur le chemin à vitesse constante</title>
      <link>https://www.wikiod.com/fr/libgdx/deplacement-des-acteurs-sur-le-chemin-a-vitesse-constante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/deplacement-des-acteurs-sur-le-chemin-a-vitesse-constante/</guid>
      <description>Déplacement simple entre deux emplacements # Pour cela, la meilleure solution consiste à utiliser actions. Pour ajouter une nouvelle action à un acteur dans Scene2D, appelez simplement :
Action action = Actions.moveTo(x,y,duration); actorObject.addAction(action); Où x et y sont l&amp;rsquo;emplacement cible et la durée est la vitesse de ce mouvement en secondes (&amp;ldquo;float&amp;rdquo;).
Si vous voulez arrêter cette action (et l&amp;rsquo;acteur par elle), vous pouvez le faire en appelant :
actorObject.removeAction(action); ou vous pouvez supprimer toutes les actions en appelant :</description>
    </item>
    
    <item>
      <title>Prise en charge de plusieurs résolutions</title>
      <link>https://www.wikiod.com/fr/libgdx/prise-en-charge-de-plusieurs-resolutions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/prise-en-charge-de-plusieurs-resolutions/</guid>
      <description>Fenêtres # Pour prendre en charge plusieurs résolutions et rapports d&amp;rsquo;aspect, Libgdx utilise ce qu&amp;rsquo;on appelle les &amp;ldquo;Viewports&amp;rdquo;. Il existe quelques types de &amp;ldquo;Viewports&amp;rdquo; qui utilisent différentes stratégies pour gérer plusieurs résolutions et rapports d&amp;rsquo;aspect. Un Viewport utilise une Camera sous le capot et gère ses viewportHeight et viewportWidth. Vous pouvez éventuellement donner au Viewport un Camera dans son constructeur, sinon il utilisera un OrthographicCamera par défaut :
private Viewport viewport; private Camera camera; public void create() { camera = new PerspectiveCamera(); viewport = new FitViewport(8f, 4.</description>
    </item>
    
    <item>
      <title>Boîte2D</title>
      <link>https://www.wikiod.com/fr/libgdx/boite2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/boite2d/</guid>
      <description>Créer des corps Box2D à partir d&amp;rsquo;une carte en mosaïque # Les objets créés dans une carte en mosaïque (.tmx) peuvent être simplement chargés en tant que corps dans un monde Box2D à l&amp;rsquo;aide de la classe Libgdx MapObject comme suit :
public void buildBuildingsBodies(TiledMap tiledMap, World world, String layer){ MapObjects objects = tiledMap.getLayers().get(layer).getObjects(); for (MapObject object: objects) { Rectangle rectangle = ((RectangleMapObject)object).getRectangle(); //create a dynamic within the world body (also can be KinematicBody or StaticBody BodyDef bodyDef = new BodyDef(); bodyDef.</description>
    </item>
    
    <item>
      <title>Cycle de la vie</title>
      <link>https://www.wikiod.com/fr/libgdx/cycle-de-la-vie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/libgdx/cycle-de-la-vie/</guid>
      <description>Créer # Cette méthode est appelée une fois au démarrage de l&amp;rsquo;application. Dans cette méthode, les ressources doivent être chargées et les variables doivent être initialisées.
Rendre # La méthode est appelée chaque image et est utilisée pour afficher tout ce qui doit être affiché. Il est également utilisé pour mettre à jour toutes les variables/classes qui peuvent avoir besoin d&amp;rsquo;être mises à jour, comme une caméra.
Disposer # Cette méthode est appelée lorsque l&amp;rsquo;application est détruite et est utilisée pour libérer toutes les ressources, par exemple Textures ou SpriteBatch.</description>
    </item>
    
  </channel>
</rss>

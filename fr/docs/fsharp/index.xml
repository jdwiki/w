<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel F# on </title>
    <link>https://www.wikiod.com/fr/docs/fsharp/</link>
    <description>Recent content in Tutoriel F# on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec F#</title>
      <link>https://www.wikiod.com/fr/fsharp/premiers-pas-avec-f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/premiers-pas-avec-f/</guid>
      <description>Bonjour le monde! # Ceci est le code d&amp;rsquo;un projet de console simple, qui affiche &amp;ldquo;Hello, World!&amp;rdquo; à STDOUT, et quitte avec un code de sortie de 0
[&amp;lt;EntryPoint&amp;gt;] let main argv = printfn &amp;quot;Hello, World!&amp;quot; 0 Exemple de répartition ligne par ligne :
[&amp;lt;EntryPoint&amp;gt;] - Un [.net Attribute][1] qui marque &amp;ldquo;la méthode que vous utilisez pour définir le point d&amp;rsquo;entrée&amp;rdquo; de votre programme ([source][2]). let main argv - définit une fonction appelée main avec un seul paramètre argv.</description>
    </item>
    
    <item>
      <title>Syndicats discriminés</title>
      <link>https://www.wikiod.com/fr/fsharp/syndicats-discrimines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/syndicats-discrimines/</guid>
      <description>Nommer les éléments de tuples au sein d&amp;rsquo;unions discriminées # Lors de la définition d&amp;rsquo;unions discriminées, vous pouvez nommer des éléments de types de tuple et utiliser ces noms lors de la correspondance de modèles.
type Shape = | Circle of diameter:int | Rectangle of width:int * height:int let shapeIsTenWide = function | Circle(diameter=10) | Rectangle(width=10) -&amp;gt; true | _ -&amp;gt; false De plus, nommer les éléments des unions discriminées améliore la lisibilité du code et l&amp;rsquo;interopérabilité avec C# - les noms fournis seront utilisés pour les noms des propriétés et les paramètres des constructeurs.</description>
    </item>
    
    <item>
      <title>Modèles actifs</title>
      <link>https://www.wikiod.com/fr/fsharp/modeles-actifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/modeles-actifs/</guid>
      <description>Modèles actifs simples # Les modèles actifs sont un type spécial de correspondance de modèle dans lequel vous pouvez spécifier des catégories nommées auxquelles vos données peuvent appartenir, puis utiliser ces catégories dans des instructions match.
Pour définir un modèle actif qui classe les nombres comme positifs, négatifs ou zéro :
let (|Positive|Negative|Zero|) num = if num &amp;gt; 0 then Positive elif num &amp;lt; 0 then Negative else Zero Cela peut ensuite être utilisé dans une expression de correspondance de modèle :</description>
    </item>
    
    <item>
      <title>Conseils et astuces sur les performances F#</title>
      <link>https://www.wikiod.com/fr/fsharp/conseils-et-astuces-sur-les-performances-f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/conseils-et-astuces-sur-les-performances-f/</guid>
      <description>Mesurez et vérifiez vos hypothèses de performance # Cet exemple est écrit avec F # à l&amp;rsquo;esprit mais les idées sont applicables dans tous environnements
La première règle lors de l&amp;rsquo;optimisation des performances est de ne pas se fier à l&amp;rsquo;hypothèse ; Mesurez et vérifiez toujours vos hypothèses.
Comme nous n&amp;rsquo;écrivons pas de code machine directement, il est difficile de prédire comment le compilateur et JIT:er transforme votre programme en code machine.</description>
    </item>
    
    <item>
      <title>Monades</title>
      <link>https://www.wikiod.com/fr/fsharp/monades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/monades/</guid>
      <description>Comprendre les monades vient de la pratique # Cette rubrique est destinée aux développeurs F# intermédiaires à avancés
&amp;ldquo;Qu&amp;rsquo;est-ce que les monades?&amp;rdquo; est une question courante. C&amp;rsquo;est facile à répondre mais comme dans [Guide du voyageur galactique](https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe. 2C_and_Everything_.2842.29) nous réalisons que nous ne comprenons pas la réponse parce que nous ne savions pas ce que nous demandions après.
Beaucoup croient que la façon de comprendre les monades est de les pratiquer.</description>
    </item>
    
    <item>
      <title>Mémoïsation</title>
      <link>https://www.wikiod.com/fr/fsharp/memoisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/memoisation/</guid>
      <description>Mémoïsation simple # La mémorisation consiste à mettre en cache les résultats de la fonction pour éviter de calculer plusieurs fois le même résultat. Ceci est utile lorsque vous travaillez avec des fonctions qui effectuent des calculs coûteux.
Nous pouvons utiliser une simple fonction factorielle comme exemple :
let factorial index = let rec innerLoop i acc = match i with | 0 | 1 -&amp;gt; acc | _ -&amp;gt; innerLoop (i - 1) (acc * i) innerLoop index 1 Appeler cette fonction plusieurs fois avec le même paramètre entraîne le même calcul encore et encore.</description>
    </item>
    
    <item>
      <title>Le type d&#39;unité</title>
      <link>https://www.wikiod.com/fr/fsharp/le-type-dunite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/le-type-dunite/</guid>
      <description>À quoi sert un 0-uplet ? # Un 2-tuple ou un 3-tuple représente un groupe d&amp;rsquo;éléments liés. (Points dans l&amp;rsquo;espace 2D, valeurs RVB d&amp;rsquo;une couleur, etc.) Un 1-tuple n&amp;rsquo;est pas très utile car il pourrait facilement être remplacé par un seul int.
Un 0-uplet semble encore plus inutile puisqu&amp;rsquo;il ne contient absolument rien. Pourtant, il possède des propriétés qui le rendent très utile dans les langages fonctionnels comme F#. Par exemple, le type 0-tuple a exactement une valeur, généralement représentée par ().</description>
    </item>
    
    <item>
      <title>Les fonctions</title>
      <link>https://www.wikiod.com/fr/fsharp/les-fonctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/les-fonctions/</guid>
      <description>Pipe vers l&amp;rsquo;avant et vers l&amp;rsquo;arrière # Les opérateurs pipe sont utilisés pour passer des paramètres à une fonction de manière simple et élégante. Il permet d&amp;rsquo;éliminer les valeurs intermédiaires et de faciliter la lecture des appels de fonction.
En F#, il existe deux opérateurs pipe :
Avant (|&amp;gt;) : Passage des paramètres de gauche à droite
let print message = printf &amp;quot;%s&amp;quot; message // &amp;quot;Hello World&amp;quot; will be passed as a parameter to the print function &amp;quot;Hello World&amp;quot; |&amp;gt; print Arrière (&amp;lt;|) : Passage des paramètres de droite à gauche</description>
    </item>
    
    <item>
      <title>1 Code F # WPF derrière l&#39;application avec FsXaml</title>
      <link>https://www.wikiod.com/fr/fsharp/1-code-f--wpf-derriere-lapplication-avec-fsxaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/1-code-f--wpf-derriere-lapplication-avec-fsxaml/</guid>
      <description>La plupart des exemples trouvés pour la programmation F # WPF semblent traiter du modèle MVVM, et quelques-uns avec MVC, mais il n&amp;rsquo;y en a presque aucun qui montre correctement comment se mettre en marche avec le &amp;ldquo;bon vieux&amp;rdquo; code derrière.
Le code derrière le modèle est très facile à utiliser pour l&amp;rsquo;enseignement ainsi que pour l&amp;rsquo;expérimentation. Il est utilisé dans de nombreux livres d&amp;rsquo;introduction et matériel d&amp;rsquo;apprentissage sur le Web.</description>
    </item>
    
    <item>
      <title>Correspondance de modèle</title>
      <link>https://www.wikiod.com/fr/fsharp/correspondance-de-modele/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/fsharp/correspondance-de-modele/</guid>
      <description>La correspondance de modèles est une fonctionnalité puissante de nombreux langages fonctionnels car elle permet souvent de gérer les branchements de manière très succincte par rapport à l&amp;rsquo;utilisation de plusieurs instructions de style if/else if/else. Cependant, avec suffisamment d&amp;rsquo;options et de gardes [&amp;ldquo;quand&amp;rdquo;] [1], Pattern Matching peut également devenir verbeux et difficile à comprendre en un coup d&amp;rsquo;œil.
Lorsque cela se produit, les [Active Patterns][2] de F# peuvent être un excellent moyen de donner des noms significatifs à la logique correspondante, ce qui simplifie le code et permet également la réutilisation.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel VBA on </title>
    <link>https://www.wikiod.com/fr/docs/vba/</link>
    <description>Recent content in Tutoriel VBA on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec VBA</title>
      <link>https://www.wikiod.com/fr/vba/premiers-pas-avec-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/premiers-pas-avec-vba/</guid>
      <description>Accéder à Visual Basic Editor dans Microsoft Office # Vous pouvez ouvrir l&amp;rsquo;éditeur VB dans n&amp;rsquo;importe quelle application Microsoft Office en appuyant sur Alt+F11 ou en allant dans l&amp;rsquo;onglet Développeur et en cliquant sur le bouton &amp;ldquo;Visual Basic&amp;rdquo;. Si vous ne voyez pas l&amp;rsquo;onglet Développeur dans le ruban, vérifiez s&amp;rsquo;il est activé.
Par défaut, l&amp;rsquo;onglet Développeur est désactivé. Pour activer l&amp;rsquo;onglet Développeur, allez dans Fichier -&amp;gt; Options, sélectionnez Personnaliser le ruban dans la liste de gauche.</description>
    </item>
    
    <item>
      <title>Objet Scripting.DictionaryScripting.Dictionary object</title>
      <link>https://www.wikiod.com/fr/vba/objet-scriptingdictionaryscriptingdictionary-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/objet-scriptingdictionaryscriptingdictionary-object/</guid>
      <description>Vous devez ajouter Microsoft Scripting Runtime au projet VBA via la commande Tools → References du VBE afin d&amp;rsquo;implémenter la liaison anticipée de l&amp;rsquo;objet Scripting Dictionary. Cette référence de bibliothèque est portée avec le projet ; il n&amp;rsquo;a pas besoin d&amp;rsquo;être référencé lorsque le projet VBA est distribué et exécuté sur un autre ordinateur.
Propriétés et méthodes # Un objet de dictionnaire de script stocke les informations dans des paires clé/élément.</description>
    </item>
    
    <item>
      <title>Déclaration de variables</title>
      <link>https://www.wikiod.com/fr/vba/declaration-de-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/declaration-de-variables/</guid>
      <description>Conseils de saisie # Les conseils de type sont fortement découragés. Ils existent et sont documentés ici pour des raisons historiques et de rétrocompatibilité. Vous devez utiliser la syntaxe As [DataType] à la place.
Public Sub ExampleDeclaration() Dim someInteger% &#39;% Equivalent to &amp;quot;As Integer&amp;quot; Dim someLong&amp;amp; &#39;&amp;amp; Equivalent to &amp;quot;As Long&amp;quot; Dim someDecimal@ &#39;@ Equivalent to &amp;quot;As Currency&amp;quot; Dim someSingle! &#39;! Equivalent to &amp;quot;As Single&amp;quot; Dim someDouble# &#39;# Equivalent to &amp;quot;As Double&amp;quot; Dim someString$ &#39;$ Equivalent to &amp;quot;As String&amp;quot; Dim someLongLong^ &#39;^ Equivalent to &amp;quot;As LongLong&amp;quot; in 64-bit VBA hosts End Sub Les conseils de saisie diminuent considérablement la lisibilité du code et encouragent un héritage notation hongroise qui également entrave la lisibilité :</description>
    </item>
    
    <item>
      <title>Les attributs</title>
      <link>https://www.wikiod.com/fr/vba/les-attributs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/les-attributs/</guid>
      <description>Syntaxe # Attribut VB_Name = &amp;ldquo;ClassOrModuleName&amp;rdquo; Attribut VB_GlobalNameSpace = False &amp;rsquo; Ignoré Attribut VB_Creatable = False &amp;rsquo; Ignoré Attribut VB_PredeclaredId = {Vrai | Faux} Attribut VB_Exposed = {Vrai | Faux} Attribut variableName.VB_VarUserMemId = 0 &amp;rsquo; Zéro indique qu&amp;rsquo;il s&amp;rsquo;agit du membre par défaut de la classe. Attribute variableName.VB_VarDescription = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Ajoute le texte aux informations de l&amp;rsquo;Explorateur d&amp;rsquo;objets pour cette variable. Attribute procName.VB_Description = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Ajoute le texte aux informations de l&amp;rsquo;Explorateur d&amp;rsquo;objets pour la procédure.</description>
    </item>
    
    <item>
      <title>CreateObject contre GetObject</title>
      <link>https://www.wikiod.com/fr/vba/createobject-contre-getobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/createobject-contre-getobject/</guid>
      <description>Dans sa forme la plus simple, CreateObject crée une instance d&amp;rsquo;un objet tandis que GetObject obtient une instance existante d&amp;rsquo;un objet. Déterminer si un objet peut être créé ou obtenu dépendra de sa [propriété d&amp;rsquo;instanciation](https://msdn.microsoft.com/en-us/library/aa242107%28v=vs.60%29.aspx?f=255&amp;amp;MSPPError= -2147217396). Certains objets sont à usage unique (par exemple, WMI) et ne peuvent pas être créés s&amp;rsquo;ils existent déjà. D&amp;rsquo;autres objets (par exemple, Excel) sont MultiUse et permettent à plusieurs instances de s&amp;rsquo;exécuter en même temps.</description>
    </item>
    
    <item>
      <title>Conventions de nommage</title>
      <link>https://www.wikiod.com/fr/vba/conventions-de-nommage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/conventions-de-nommage/</guid>
      <description>Noms des variables # Les variables contiennent des données. Nommez-les d&amp;rsquo;après ce pour quoi ils sont utilisés, pas d&amp;rsquo;après leur type de données ou leur portée, en utilisant un nom. Si vous vous sentez obligé de numéroter vos variables (par exemple, &amp;ldquo;chose1, chose2, chose3&amp;rdquo;), envisagez plutôt d&amp;rsquo;utiliser une structure de données appropriée (par exemple, un tableau, une &amp;ldquo;Collection&amp;rdquo; ou un &amp;ldquo;Dictionnaire&amp;rdquo;).
Noms de variables qui représentent un ensemble itérable de valeurs - par ex.</description>
    </item>
    
    <item>
      <title>Types de données et limites</title>
      <link>https://www.wikiod.com/fr/vba/types-de-donnees-et-limites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/types-de-donnees-et-limites/</guid>
      <description>Une variante # Dim Value As Variant &#39;Explicit Dim Value &#39;Implicit Un Variant est un type de données COM utilisé pour stocker et échanger des valeurs de types arbitraires, et tout autre type dans VBA peut être affecté à un Variant. Les variables déclarées sans type explicite spécifié par As [Type] sont par défaut Variant.
Les variantes sont stockées en mémoire sous la forme d&amp;rsquo;une structure VARIANT qui consiste en un descripteur de type d&amp;rsquo;octet (VARTYPE) suivi de 6 octets réservés puis d&amp;rsquo;une zone de données de 8 octets.</description>
    </item>
    
    <item>
      <title>Scripting.FileSystemObject</title>
      <link>https://www.wikiod.com/fr/vba/scriptingfilesystemobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/scriptingfilesystemobject/</guid>
      <description>Récupérer uniquement le chemin d&amp;rsquo;un chemin de fichier # La méthode GetParentFolderName renvoie le dossier parent pour n&amp;rsquo;importe quel chemin. Bien que cela puisse également être utilisé avec des dossiers, il est sans doute plus utile pour extraire le chemin d&amp;rsquo;un chemin de fichier absolu :
Dim fso As New Scripting.FileSystemObject Debug.Print fso.GetParentFolderName(&amp;quot;C:\Users\Me\My Documents\SomeFile.txt&amp;quot;) Imprime C:\Utilisateurs\Moi\Mes Documents
Notez que le séparateur de chemin de fin n&amp;rsquo;est pas inclus dans la chaîne renvoyée.</description>
    </item>
    
    <item>
      <title>La gestion des erreurs</title>
      <link>https://www.wikiod.com/fr/vba/la-gestion-des-erreurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/la-gestion-des-erreurs/</guid>
      <description>Éviter les conditions d&amp;rsquo;erreur # Lorsqu&amp;rsquo;une erreur d&amp;rsquo;exécution se produit, un bon code doit la gérer. La meilleure stratégie de gestion des erreurs consiste à écrire du code qui vérifie les conditions d&amp;rsquo;erreur et évite simplement d&amp;rsquo;exécuter du code qui entraîne une erreur d&amp;rsquo;exécution.
L&amp;rsquo;un des éléments clés de la réduction des erreurs d&amp;rsquo;exécution consiste à écrire de petites procédures qui font une chose. Moins il y a de raisons pour lesquelles les procédures échouent, plus le code dans son ensemble est facile à déboguer.</description>
    </item>
    
    <item>
      <title>Tableaux</title>
      <link>https://www.wikiod.com/fr/vba/tableaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/vba/tableaux/</guid>
      <description>Tableaux multidimensionnels # Tableaux multidimensionnels # Comme leur nom l&amp;rsquo;indique, les tableaux multidimensionnels sont des tableaux qui contiennent plus d&amp;rsquo;une dimension, généralement deux ou trois, mais ils peuvent avoir jusqu&amp;rsquo;à 32 dimensions.
Un multi-tableau fonctionne comme une matrice à différents niveaux, prenons par exemple une comparaison entre une, deux et trois dimensions.
One Dimension est votre tableau typique, il ressemble à une liste d&amp;rsquo;éléments.
Dim 1D(3) as Variant *1D - Visually* (0) (1) (2) Deux dimensions ressembleraient à une grille de Sudoku ou à une feuille Excel, lors de l&amp;rsquo;initialisation du tableau, vous définiriez le nombre de lignes et de colonnes que le tableau aurait.</description>
    </item>
    
  </channel>
</rss>

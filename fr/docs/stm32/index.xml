<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel stm32 on </title>
    <link>https://www.wikiod.com/fr/docs/stm32/</link>
    <description>Recent content in Tutoriel stm32 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/stm32/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec stm32</title>
      <link>https://www.wikiod.com/fr/stm32/premiers-pas-avec-stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/stm32/premiers-pas-avec-stm32/</guid>
      <description>Première configuration avec un exemple de LED clignotante utilisant SW4STM32 et la bibliothèque HAL # (Remarque : Il existe de nombreux IDE, chaînes d&amp;rsquo;outils et bibliothèques qui sont prêts à l&amp;rsquo;emploi avec STM32. La configuration suivante nécessite un effort minimal pour le faire fonctionner, mais ce n&amp;rsquo;est qu&amp;rsquo;une des nombreuses. N&amp;rsquo;hésitez pas à en explorer d&amp;rsquo;autres , le but de cet exemple n&amp;rsquo;est pas de forcer qui que ce soit à utiliser les outils qui seront utilisés ici.</description>
    </item>
    
    <item>
      <title>Environnements de développement intégrés (IDE)</title>
      <link>https://www.wikiod.com/fr/stm32/environnements-de-developpement-integres-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/stm32/environnements-de-developpement-integres-ide/</guid>
      <description>Le but de cette rubrique est de répertorier tous les environnements de développement intégrés (IDE) pouvant être utilisés pour développer des logiciels pour les microcontrôleurs STM32. Les exemples doivent contenir :
Liste des principales fonctionnalités de l&amp;rsquo;IDE. Liste des systèmes d&amp;rsquo;exploitation pris en charge par l&amp;rsquo;IDE. Processus d&amp;rsquo;installation. Étapes de configuration supplémentaires (le cas échéant). IDE répertoriés par ST Microelectronics :
Numéro de pièce Description générale Statut de commercialisation Fournisseur Type de logiciel [CoIDE][1] CooCox CoIDE, un environnement de développement logiciel gratuit et hautement intégré pour les microcontrôleurs ARM Cortex Actif CooCox Suites de développement SW [CosmicIDE][2] Cosmic ARM/Cortex &amp;quot;M&amp;quot; Outils de développement croisé pour le microcontrôleur STM32 Actif Cosmique Suites de développement SW [CrossWorks][3] Rowley Associates CrossWorks, environnement de développement intégré avec téléchargement et débogage JTAG Flash Actif Rowley Suites de développement SW [DS-5][4] ARM Development Studio 5 (DS-5) fournit les meilleurs outils de sa catégorie pour la plus large gamme de plates-formes basées sur des processeurs ARM Actif BRAS Suites de développement SW [EMP-Tonnerre][5] Emprog ThunderBench, outils de développement C/C++ entièrement intégrés et bien conçus pour ARM Cortex Actif Emprog Micrologiciel [Hitop5][6] Interface utilisateur universelle, IDE et débogueur pour tous les outils de développement Hitex Actif Hitex Suites de développement SW [IAR-WARM][7] IAR Environnement de développement intégré et optimisation du compilateur C/C++ pour ARM Cortex-M Actif RIA Suites de développement SW [MDK-ARM-STM32][8] Environnement de développement logiciel MDK-ARM pour les microcontrôleurs basés sur Cortex-M Actif Keil Suites de développement SW [MULTI][9] Environnement de développement et de débogage intégré GreenHills pour les applications embarquées utilisant C et C++ Actif Logiciel GreenHills Suites de développement SW [Hommes-Nucleus-SF][10] Nucleus SmartFit pour STM32 Actif Graphiques de mentor Micrologiciel [PER-Tracealyzer][11] Analyseur de traces d&amp;rsquo;exécution Percepio pour MCU STM32 Actif Perception [PLSUDE-STM32][12] Plate-forme de débogage et d&amp;rsquo;émulation avec prise en charge optimisée de Trace et Flash pour les MCU basés sur STM32 Cortex-M par les outils de développement PLS Actif Svp Suites de développement SW [RIDE-STM32][13] Environnement de développement intégré de marque Raisonance pour les microcontrôleurs STM32 Actif Raisonance Suites de développement SW [SOMN-DRT-IDE][14] RÊVE DRT Cortex-M IDE Actif RÊVE Suites de développement SW [SW4STM32][15] System Workbench pour STM32 : IDE gratuit sur Windows, Linux et OS X Actif AC6 Suites de développement SW [TASKINGVX-STM32][16] Les outils de compilation et de débogage C/C++ d&amp;rsquo;Altium pour les microcontrôleurs basés sur ARM Actif TÂCHE Micrologiciel [TrueSTUDIO][17] Le premier outil de développement C/C++ pour le développement STM32, avec son ensemble de fonctionnalités inégalé et son intégration sans précédent Actif Atollique Suites de développement SW [iSYS-winIDEAOuvre][18] La plate-forme de développement logiciel gratuite et illimitée d&amp;rsquo;iSYSTEM pour tous les appareils basés sur STM32 Cortex-M Actif iSYSTEM Suites de développement SW [mikroBasicPRO][19] Compilateur de base complet MikroElektronika qui rend le développement STM32 adapté à tout le monde Actif Microélectronique Suites de développement SW [mikroCPRO][20] Compilateur ANSI C complet de MikroElektronika pour les appareils STM32.</description>
    </item>
    
    <item>
      <title>UART - Récepteurémetteur asynchrone universel (communication série)</title>
      <link>https://www.wikiod.com/fr/stm32/uart---recepteuremetteur-asynchrone-universel-communication-serie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/stm32/uart---recepteuremetteur-asynchrone-universel-communication-serie/</guid>
      <description>Cette rubrique concerne la communication série à l&amp;rsquo;aide du périphérique UART (Universal Asynchronous Receiver/Transmitter) des microcontrôleurs STM32.
Application Echo - Bibliothèque HAL # Dans cet exemple, le microcontrôleur renvoie les octets reçus à l&amp;rsquo;expéditeur à l&amp;rsquo;aide de l&amp;rsquo;interruption UART RX.
#include &amp;quot;stm32f4xx.h&amp;quot; UART_HandleTypeDef huart2; /* Single byte to store input */ uint8_t byte; void SystemClock_Config(void); /* UART2 Interrupt Service Routine */ void USART2_IRQHandler(void) { HAL_UART_IRQHandler(&amp;amp;huart2); } /* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */ void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { if (huart-&amp;gt;Instance == USART2) { /* Transmit one byte with 100 ms timeout */ HAL_UART_Transmit(&amp;amp;huart2, &amp;amp;byte, 1, 100); /* Receive one byte in interrupt mode */ HAL_UART_Receive_IT(&amp;amp;huart2, &amp;amp;byte, 1); } } void uart_gpio_init() { GPIO_InitTypeDef GPIO_InitStruct; __GPIOA_CLK_ENABLE(); /**USART2 GPIO Configuration PA2 ------&amp;gt; USART2_TX PA3 ------&amp;gt; USART2_RX */ GPIO_InitStruct.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dagger-2 Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/dagger-2/</link>
    <description>Recent content in dagger-2 Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/dagger-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec dagger-2</title>
      <link>https://www.wikiod.com/fr/dagger-2/premiers-pas-avec-dagger-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dagger-2/premiers-pas-avec-dagger-2/</guid>
      <description>Exemple Android # L&amp;rsquo;une des difficultés centrales de l&amp;rsquo;écriture d&amp;rsquo;une application Android à l&amp;rsquo;aide de Dagger est que de nombreuses classes de framework Android sont instanciées par le système d&amp;rsquo;exploitation lui-même, comme &amp;ldquo;Activity&amp;rdquo; et &amp;ldquo;Fragment&amp;rdquo;, mais Dagger fonctionne mieux s&amp;rsquo;il peut créer tous les objets injectés. Au lieu de cela, vous devez effectuer une injection de membres dans une méthode de cycle de vie. À partir de la version 2.10, dagger permet d&amp;rsquo;utiliser dagger.</description>
    </item>
    
    <item>
      <title>Annotation @Named dans Kotlin</title>
      <link>https://www.wikiod.com/fr/dagger-2/annotation-named-dans-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/dagger-2/annotation-named-dans-kotlin/</guid>
      <description>Comment utiliser correctement l&amp;rsquo;annotation nommée dans Kotlin v1.1
Déclarer une dépendance qualifiée # @Module class AppModule(val app: Application) { @Provides @Named(&amp;quot;the_answer&amp;quot;) fun providesTheAnswer(): Int { return 42 } } Injection de dépendance basée sur le setter # class MyClass{ @field:[Inject Named(&amp;quot;the_answer&amp;quot;)] lateinit var answer: Int } Dans Android Development, c&amp;rsquo;est ainsi que vous injectez des dépendances dans Activity, Fragment ou tout autre objet instancié directement par le système d&amp;rsquo;exploitation.
Pour en savoir plus sur l&amp;rsquo;annotation @field: dans Kotlin, consultez la [documentation][1]</description>
    </item>
    
  </channel>
</rss>

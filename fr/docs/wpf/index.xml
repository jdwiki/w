<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wpf Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/wpf/</link>
    <description>Recent content in wpf Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec wpf</title>
      <link>https://www.wikiod.com/fr/wpf/premiers-pas-avec-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/premiers-pas-avec-wpf/</guid>
      <description>Application Hello World # Pour créer et exécuter un nouveau projet WPF dans Visual Studio :
Cliquez sur Fichier → Nouveau → Projet [![Nouveau projet][1]][1]
Sélectionnez le modèle en cliquant sur Modèles → Visual C# → Windows → Application WPF et appuyez sur OK : [![entrez la description de l&amp;rsquo;image ici][2]][2]
Ouvrez le fichier MainWindow.xaml dans Solution Explorer (si vous ne voyez pas la fenêtre Solution Explorer, ouvrez-la en cliquant sur View → Solution Explorer) : [!</description>
    </item>
    
    <item>
      <title>MVVM dans WPF</title>
      <link>https://www.wikiod.com/fr/wpf/mvvm-dans-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/mvvm-dans-wpf/</guid>
      <description>Modèles et modèles de vue
La définition d&amp;rsquo;un modèle fait souvent l&amp;rsquo;objet de vifs débats et la frontière entre un modèle et un modèle de vue peut être floue. Certains préfèrent ne pas &amp;ldquo;polluer&amp;rdquo; leurs modèles avec l&amp;rsquo;interface INotifyPropertyChanged, et à la place dupliquer les propriétés du modèle dans le modèle de vue, qui implémente cette interface. Comme beaucoup de choses dans le développement de logiciels, il n&amp;rsquo;y a pas de bonne ou de mauvaise réponse.</description>
    </item>
    
    <item>
      <title>Création d&#39;un écran de démarrage dans WPF</title>
      <link>https://www.wikiod.com/fr/wpf/creation-dun-ecran-de-demarrage-dans-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/creation-dun-ecran-de-demarrage-dans-wpf/</guid>
      <description>Lorsque l&amp;rsquo;application WPF est lancée, l&amp;rsquo;initialisation du .NET Framework peut prendre un certain temps pour qu&amp;rsquo;un runtime de langage actuel (CLR) soit initialisé. Par conséquent, la première fenêtre d&amp;rsquo;application peut apparaître quelque temps après le lancement de l&amp;rsquo;application, en fonction de la complexité de l&amp;rsquo;application.
L&amp;rsquo;écran de démarrage dans WPF permet à l&amp;rsquo;application d&amp;rsquo;afficher une image statique ou un contenu dynamique personnalisé lors de l&amp;rsquo;initialisation avant que la première fenêtre n&amp;rsquo;apparaisse.</description>
    </item>
    
    <item>
      <title>Introduction à la liaison de données WPF</title>
      <link>https://www.wikiod.com/fr/wpf/introduction-a-la-liaison-de-donnees-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/introduction-a-la-liaison-de-donnees-wpf/</guid>
      <description>Syntaxe # {Binding PropertyName} est équivalent à {Binding Path=PropertyName} {Chemin de liaison=SomeProperty.SomeOtherProperty.YetAnotherProperty} {Chemin de liaison=SomeListProperty[1]} Paramètres # Paramètre Détails Chemin Spécifie le chemin d&amp;rsquo;accès à la liaison. Si non spécifié, se lie au DataContext lui-même. UpdateSourceTrigger Spécifie quand la source de liaison a sa valeur mise à jour. La valeur par défaut est LostFocus. La valeur la plus utilisée est PropertyChanged. mode Typiquement OneWay ou TwoWay. Si la liaison n&amp;rsquo;est pas spécifiée, la valeur par défaut est OneWay, à moins que la cible de la liaison ne demande qu&amp;rsquo;elle soit TwoWay.</description>
    </item>
    
    <item>
      <title>Convertisseurs de valeurs et multivaleurs</title>
      <link>https://www.wikiod.com/fr/wpf/convertisseurs-de-valeurs-et-multivaleurs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/convertisseurs-de-valeurs-et-multivaleurs/</guid>
      <description>Paramètres # Paramètre Détails valeur La valeur produite par la source de liaison. valeurs Le tableau de valeurs, produit par la source de liaison. TypeCible Le type de la propriété cible de liaison. paramètre Paramètre de convertisseur à utiliser. culturelle Culture à utiliser dans le convertisseur. Qu&amp;rsquo;est-ce que IValueConverter et IMultiValueConverterils sont # IValueConverter et IMultiValueConverter - interfaces qui permettent d&amp;rsquo;appliquer une logique personnalisée à une liaison.
** À quoi servent-ils ?</description>
    </item>
    
    <item>
      <title>Propriétés de dépendance</title>
      <link>https://www.wikiod.com/fr/wpf/proprietes-de-dependance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/proprietes-de-dependance/</guid>
      <description>Les propriétés de dépendance sont un type de propriété qui étend une propriété CLR. Alors qu&amp;rsquo;une propriété CLR est lue directement à partir d&amp;rsquo;un membre de votre classe, une propriété de dépendance sera résolue dynamiquement lors de l&amp;rsquo;appel de la méthode GetValue() que votre objet obtient via l&amp;rsquo;héritage de la classe DependencyObject de base.
Cette section décomposera les propriétés de dépendance et expliquera leur utilisation à la fois conceptuellement et à travers des exemples de code.</description>
    </item>
    
    <item>
      <title>Architecture WPF</title>
      <link>https://www.wikiod.com/fr/wpf/architecture-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/architecture-wpf/</guid>
      <description>DispatcherObject # Dérive de # Objet
Membres clés # public Dispatcher Dispatcher { get; } Sommaire # La plupart des objets dans WPF dérivent de DispatcherObject, qui fournit les constructions de base pour gérer la concurrence et les threads. De tels objets sont associés à un Dispatcher.
Seul le thread sur lequel le Dispatcher a été créé peut accéder directement au DispatcherObject. Pour accéder à un DispatcherObject à partir d&amp;rsquo;un thread autre que le thread sur lequel le DispatcherObject a été créé, un appel à Invoke ou BeginInvoke sur le Dispatcher auquel l&amp;rsquo;objet est associé est requis.</description>
    </item>
    
    <item>
      <title>Styles dans WPF</title>
      <link>https://www.wikiod.com/fr/wpf/styles-dans-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/styles-dans-wpf/</guid>
      <description>Remarques introductives # Dans WPF, un Style définit les valeurs d&amp;rsquo;une ou plusieurs propriétés de dépendance pour un élément visuel donné. Les styles sont utilisés dans toute l&amp;rsquo;application pour rendre l&amp;rsquo;interface utilisateur plus cohérente (par exemple, en donnant à tous les boutons de la boîte de dialogue une taille cohérente) et pour faciliter les modifications en bloc (par exemple, en modifiant la largeur de tous les boutons).
Les styles sont généralement définis dans un ResourceDictionary à un niveau élevé de l&amp;rsquo;application (par exemple, dans * App.</description>
    </item>
    
    <item>
      <title>Comportements WPF</title>
      <link>https://www.wikiod.com/fr/wpf/comportements-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/comportements-wpf/</guid>
      <description>Les comportements WPF permettent à un développeur de modifier la façon dont les contrôles WPF agissent en réponse aux événements système et utilisateur.
Les comportements héritent de la classe Behavior de l&amp;rsquo;espace de noms System.Windows.Interactity. Cet espace de noms fait partie du SDK Expression Blend global, mais une version plus légère, adaptée aux bibliothèques de comportements, est disponible sous forme de [paquet nuget][1].
[1] : https://www.nuget.org/packages/System.Windows.Interactivity.WPF/
Comportement simple pour intercepter les événements de la molette de la souris # Mise en œuvre du comportement</description>
    </item>
    
    <item>
      <title>Localisation WPF</title>
      <link>https://www.wikiod.com/fr/wpf/localisation-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wpf/localisation-wpf/</guid>
      <description>Le contenu des contrôles peut être localisé à l&amp;rsquo;aide de fichiers de ressources, tout comme cela est possible dans les classes. Pour XAML, il existe une syntaxe spécifique, différente entre une application C# et une application VB.
Les étapes sont :
Pour tout projet WPF : rendez le fichier de ressources public, la valeur par défaut est interne. Pour les projets C# WPF, utilisez le XAML fourni dans l&amp;rsquo;exemple Pour les projets VB WPF, utilisez le XAML fourni dans l&amp;rsquo;exemple et remplacez la propriété Outil personnalisé par PublicVbMyResourcesResXFileCodeGenerator.</description>
    </item>
    
  </channel>
</rss>

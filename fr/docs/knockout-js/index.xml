<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel knockout.js on </title>
    <link>https://www.wikiod.com/fr/docs/knockout-js/</link>
    <description>Recent content in Tutoriel knockout.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/knockout-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec knockout.js</title>
      <link>https://www.wikiod.com/fr/knockout-js/premiers-pas-avec-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/premiers-pas-avec-knockoutjs/</guid>
      <description>Mise en route : Bonjour tout le monde ! # Création d&amp;rsquo;un document HTML et activation de knockout.js # Créez un fichier HTML et incluez knockout.js via une balise &amp;lt;script&amp;gt;.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello world! (knockout.js)&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-debug.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Ajoutez une deuxième balise &amp;lt;script&amp;gt; sous le script knockout. Dans cette balise de script, nous allons initialiser un modèle de vue et appliquer data binds à notre document.</description>
    </item>
    
    <item>
      <title>Fixations</title>
      <link>https://www.wikiod.com/fr/knockout-js/fixations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/fixations/</guid>
      <description>Syntaxe # &amp;lt;!-- ko if:myObservable --&amp;gt;&amp;lt;!-- /ko --&amp;gt; &amp;lt;i data-bind=&amp;quot;if:myObservable&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Qu&amp;rsquo;est-ce qu&amp;rsquo;une liaison # Essentiellement, une liaison ou une liaison de données est un moyen de lier vos ViewModels à vos vues (modèles) et vice versa. KnockoutJS utilise une liaison de données bidirectionnelle, ce qui signifie que les modifications apportées à votre ViewModel influencent la vue et que les modifications apportées à votre vue peuvent influencer le ViewModel.
Sous le capot (court aperçu) # Les liaisons ne sont que des plugins (scripts) qui vous permettent de résoudre une tâche particulière.</description>
    </item>
    
    <item>
      <title>Liaison Href</title>
      <link>https://www.wikiod.com/fr/knockout-js/liaison-href/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/liaison-href/</guid>
      <description>Il n&amp;rsquo;y a pas de liaison href dans la bibliothèque principale de KnockoutJS, c&amp;rsquo;est la raison pour laquelle tous les exemples présentent d&amp;rsquo;autres fonctionnalités de la bibliothèque pour obtenir le même effet.
Voir aussi cette question Stack Overflow sur le même sujet.
Utilisation de la liaison attr # &amp;lt;a data-bind=&amp;quot;attr: { href: myUrl }&amp;quot;&amp;gt;link with dynamic href&amp;lt;/a&amp;gt; ko.applyBindings({ myUrl: ko.observable(&amp;quot;http://www.stackoverflow.com&amp;quot;) }); Puisqu&amp;rsquo;il n&amp;rsquo;y a pas de liaison href native dans KnockoutJS, vous devez utiliser une fonctionnalité différente pour obtenir des liens dynamiques.</description>
    </item>
    
    <item>
      <title>Équivalents des liaisons AngularJS</title>
      <link>https://www.wikiod.com/fr/knockout-js/equivalents-des-liaisons-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/equivalents-des-liaisons-angularjs/</guid>
      <description>Tout dans AngularJS n&amp;rsquo;a pas d&amp;rsquo;équivalent KnockoutJS (par exemple ngCloack ou ngSrc). Deux solutions principales sont généralement disponibles :
Utilisez la liaison générique attr ou event à la place. Semblable aux directives personnalisées dans AngularJS, vous pouvez écrire votre propre [gestionnaire de liaison personnalisé][1] si vous avez besoin de quelque chose qui n&amp;rsquo;est pas inclus dans la bibliothèque de base. Si vous préférez la syntaxe de liaison AngularJS, vous pouvez envisager d&amp;rsquo;utiliser [Knockout.</description>
    </item>
    
    <item>
      <title>Débogage d&#39;une application knockout.js</title>
      <link>https://www.wikiod.com/fr/knockout-js/debogage-dune-application-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/debogage-dune-application-knockoutjs/</guid>
      <description>Vérification du contexte de liaison d&amp;rsquo;un élément DOM # De nombreux bogues dans les liaisons de données knock-out sont causés par des propriétés non définies dans un modèle de vue. Knockout dispose de deux méthodes pratiques pour récupérer le [contexte de liaison][1] d&amp;rsquo;un élément HTML :
// Returns the binding context to which an HTMLElement is bound ko.contextFor(element); // Returns the viewmodel to which an HTMLElement is bound // similar to: ko.</description>
    </item>
    
    <item>
      <title>Requêtes AJAX et liaison</title>
      <link>https://www.wikiod.com/fr/knockout-js/requetes-ajax-et-liaison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/requetes-ajax-et-liaison/</guid>
      <description>Exemple de requête AJAX avec liaison # Page.html
&amp;lt;div data-bind=&amp;quot;foreach: blogs&amp;quot;&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;text: entryPostedDate&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;a data-bind=&amp;quot;attr: { href: blogEntryLink }, text: title&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;html: body&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!--- include knockout and dependencies (Jquery) ---&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;blog.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; blog.js
function vm() { var self = this; // Properties self.blogs = ko.observableArray([]); // consists of entryPostedDate, blogEntryLink, title, body var blogApi = &amp;quot;/api/blog&amp;quot;; // Load data $.</description>
    </item>
    
    <item>
      <title>Reliures personnalisées</title>
      <link>https://www.wikiod.com/fr/knockout-js/reliures-personnalisees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/reliures-personnalisees/</guid>
      <description>Enregistrement contraignant # Les liaisons personnalisées doivent être enregistrées en étendant l&amp;rsquo;objet knockout bindingHandlers actuel.
Cela se fait en ajoutant une nouvelle propriété à l&amp;rsquo;objet.
ko.bindingHandlers.newBinding = { init: function(element, valueAccessor, allBindings, viewModel, bindingContext) { }, update: function(element, valueAccessor, allBindings, viewModel, bindingContext) { } }; Liaison de visibilité personnalisée en fondu entrant/sortant # Cet exemple implémente une liaison personnalisée qui bascule la visibilité (similaire à la [liaison visible][1] existante), mais utilisera l&amp;rsquo;API [fading][2] de jQuery pour animer la transition de visible à invisible.</description>
    </item>
    
    <item>
      <title>Observables</title>
      <link>https://www.wikiod.com/fr/knockout-js/observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/observables/</guid>
      <description>Abonnement explicite aux observables # var person = { name: ko.observable(&#39;John&#39;) }; console.log(person.name()); console.log(&#39;Update name&#39;); person.name.subscribe(function(newValue) { console.log(&amp;quot;Updated value is &amp;quot; + newValue); }); person.name(&#39;Jane&#39;); Création d&amp;rsquo;un observable # JS
// data model var person = { name: ko.observable(&#39;Jack&#39;), age: ko.observable(29) }; ko.applyBindings(person); HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Name: &amp;lt;input data-bind=&#39;value: name&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Age: &amp;lt;input data-bind=&#39;value: age&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Hello, &amp;lt;span data-bind=&#39;text: name&#39;&amp;gt; &amp;lt;/span&amp;gt;!&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Présentation des composants</title>
      <link>https://www.wikiod.com/fr/knockout-js/presentation-des-composants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/presentation-des-composants/</guid>
      <description>Les composants permettent des contrôles/widgets réutilisables représentés par leur propre vue (modèle) et modèle de vue. Ils ont été ajoutés dans Knockout 3.2. Inspiré de WebComponents, Knockout permet de définir les composants en tant qu&amp;rsquo;éléments personnalisés, permettant l&amp;rsquo;utilisation d&amp;rsquo;un balisage plus explicite.
Barre de progression (Boostrap) # Définition du composant
ko.components.register(&#39;progress-bar&#39;, { viewModel: function(params) { var that = this; // progress is a numeric value between 0 and 100 that.progress = params.</description>
    </item>
    
    <item>
      <title>Utilisation de la liaison knock-out foreach avec JSON</title>
      <link>https://www.wikiod.com/fr/knockout-js/utilisation-de-la-liaison-knock-out-foreach-avec-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/knockout-js/utilisation-de-la-liaison-knock-out-foreach-avec-json/</guid>
      <description>Travailler avec des boucles imbriquées # Voici la structure JSON que nous allons utiliser.
{ &amp;quot;employees&amp;quot;: [ { &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Doe&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Anna&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;css&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Peter&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Jones&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;html&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 3 } ] } ] }; Cette structure json peut être affectée à une variable ou il peut s&amp;rsquo;agir d&amp;rsquo;une réponse de n&amp;rsquo;importe quelle API.</description>
    </item>
    
  </channel>
</rss>

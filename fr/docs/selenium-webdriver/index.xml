<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel sélénium-webdriver on </title>
    <link>https://www.wikiod.com/fr/docs/selenium-webdriver/</link>
    <description>Recent content in Tutoriel sélénium-webdriver on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/selenium-webdriver/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Selenium-webdriver</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/premiers-pas-avec-selenium-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/premiers-pas-avec-selenium-webdriver/</guid>
      <description>Qu&amp;rsquo;est-ce que Selenium WebDriver ? # Selenium est un ensemble d&amp;rsquo;outils conçus pour automatiser les navigateurs. Il est couramment utilisé pour les tests d&amp;rsquo;applications Web sur plusieurs plates-formes. Il existe quelques outils disponibles sous l&amp;rsquo;égide de Selenium, tels que Selenium WebDriver (ex-Selenium RC), Selenium IDE et Selenium Grid.
WebDriver est une interface de contrôle à distance qui vous permet de manipuler les éléments [DOM][1] dans les pages Web, ainsi que de commander le comportement des agents utilisateurs.</description>
    </item>
    
    <item>
      <title>Utilisation des annotations @FindBy en Java</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/utilisation-des-annotations-findby-en-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/utilisation-des-annotations-findby-en-java/</guid>
      <description>Syntaxe # CLASS_NAME : @FindBy(className = &amp;ldquo;classname&amp;rdquo;) -CSS : @FindBy(css = &amp;ldquo;css&amp;rdquo;) Identifiant : @FindBy(id = &amp;ldquo;id&amp;rdquo;) ID_OR_NAME : @FindBy(how = How.ID_OR_NAME, using =&amp;ldquo;idOrName&amp;rdquo;) - LINK_TEXT : @FindBy(linkText=&amp;ldquo;text&amp;rdquo;) NOM : @FindBy(nom= &amp;ldquo;nom&amp;rdquo;) PARTIAL_LINK_TEXT : @FindBy(partialLinkText= &amp;ldquo;texte&amp;rdquo;) TAG_NAME : @FindBy(tagName=&amp;ldquo;tagname&amp;rdquo;) XPATH : @FindBy(xpath=&amp;ldquo;xpath&amp;rdquo;) Notez qu&amp;rsquo;il existe deux manières d&amp;rsquo;utiliser l&amp;rsquo;annotation. Exemples:
@FindBy(id = &amp;quot;id&amp;quot;) et
@FindBy(how = How.ID, using =&amp;quot;id&amp;quot;) sont égaux et les deux recherchent l&amp;rsquo;élément par son ID. Dans le cas de ID_OR_NAME, vous ne pouvez utiliser</description>
    </item>
    
    <item>
      <title>Attendre</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/attendre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/attendre/</guid>
      <description>Types d&amp;rsquo;attente dans Selenium WebDriver # Lors de l&amp;rsquo;exécution d&amp;rsquo;une application Web, il est nécessaire de prendre en compte le temps de chargement. Si votre code tente d&amp;rsquo;accéder à un élément qui n&amp;rsquo;est pas encore chargé, WebDriver lèvera une exception et votre script s&amp;rsquo;arrêtera.
Il existe trois types d&amp;rsquo;attente -
Attentes implicites Attentes explicites Attentes fluides Les attentes implicites sont utilisées pour définir le temps d&amp;rsquo;attente tout au long du programme, tandis que les attentes explicites ne sont utilisées que sur des portions spécifiques.</description>
    </item>
    
    <item>
      <title>Exécuter Javascript dans la page</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/executer-javascript-dans-la-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/executer-javascript-dans-la-page/</guid>
      <description>Syntaxe # objet ExecuteAsyncScript(string script, params object[] args); objet ExecuteScript(string script, params object[] args); ##Python Pour exécuter Javascript en python, utilisez execute_script(&amp;quot;javascript script here&amp;quot;). execute_script est appelé sur une instance de pilote Web et peut être n&amp;rsquo;importe quel javascript valide.
from selenium import webdriver driver = webdriver.Chrome() driver.execute_script(&amp;quot;alert(&#39;running javascript&#39;);&amp;quot;) ##C# Pour exécuter JavaScript dans une instance IWebDriver, vous devez convertir IWebDriver en une nouvelle interface, IJavaScriptExecutor
IWebDriver driver; IJavaScriptExecutor jsDriver = driver as IJavaScriptExecutor; Vous pouvez désormais accéder à toutes les méthodes disponibles sur l&amp;rsquo;instance IJavaScriptExecutor qui permettent d&amp;rsquo;exécuter du Javascript, par exemple :</description>
    </item>
    
    <item>
      <title>Localisation des éléments Web</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/localisation-des-elements-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/localisation-des-elements-web/</guid>
      <description>Syntaxe # ByChained(params By[] bys) Les éléments sont trouvés dans Selenium grâce à l&amp;rsquo;utilisation de localisateurs et de la classe &amp;ldquo;By&amp;rdquo;. Afin de créer un projet d&amp;rsquo;automatisation robuste avec Selenium, il convient d&amp;rsquo;utiliser intelligemment les localisateurs pour les éléments Web. Les localisateurs doivent être descriptifs, uniques et peu susceptibles de changer afin que vous n&amp;rsquo;obteniez pas de faux positifs dans les tests par exemple. La priorité est d&amp;rsquo;utiliser :
ID - puisqu&amp;rsquo;il est unique et que vous obtiendrez exactement l&amp;rsquo;élément que vous souhaitez.</description>
    </item>
    
    <item>
      <title>Changer de cadre</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/changer-de-cadre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/changer-de-cadre/</guid>
      <description>Syntaxe # Java driver.switchTo().frame(nom de chaîne); driver.switchTo().frame(ID de chaîne); driver.switchTo().frame(int index); driver.switchTo().frame(WebElement frameElement); driver.switchTo().defaultContent(); C# driver.SwitchTo().Frame(int frameIndex); driver.SwitchTo().Frame(IWebElement frameElement); driver.SwitchTo().Frame(string frameName); driver.SwitchTo().DefaultContent(); Python driver.switch_to_frame(nameOrId) driver.switch_to.frame(nameOrId) driver.switch_to_frame(index) driver.switch_to.frame(index) driver.switch_to_frame(frameElement) driver.switch_to.frame(frameElement) driver.switch_to_default_content() driver.switch_to.default_content() JavaScript driver.switchTo().frame(nameOrId) driver.switchTo().frame(index) driver.switchTo().defaultContent() Paramètres # paramètre détails nomOuId Sélectionnez un cadre par son nom d&amp;rsquo;id. index Sélectionnez une image par son index de base zéro. frameElement Sélectionnez un cadre en utilisant son WebElement précédemment localisé Pour passer à un cadre en utilisant Java # Pour une instance, si le code source html d&amp;rsquo;une vue ou d&amp;rsquo;un élément html est enveloppé par un iframe comme celui-ci :</description>
    </item>
    
    <item>
      <title>Robot au sélénium</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/robot-au-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/robot-au-selenium/</guid>
      <description>Syntaxe # délai (int ms) keyPress (int keycode) keyRelease (code clé int) mouseMove(int x, int y) mousePress (int boutons) mouseRelease (boutons int) mouseWheel(int wheelAmt) Paramètres # Paramètre Détails ms Temps de sommeil en millisecondes code clé Constante pour appuyer sur la touche spécifiée, par exemple pour appuyer sur &amp;lsquo;A&amp;rsquo;, le code est &amp;lsquo;VK_A&amp;rsquo;. Veuillez vous référer pour plus de détails : https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html x,y Coordonnées écran buttons Le masque de bouton ; une combinaison d&amp;rsquo;un ou plusieurs masques de bouton de souris wheelAmt Nombre de crans pour déplacer la molette de la souris, valeur négative pour monter/s&amp;rsquo;éloigner de l&amp;rsquo;utilisateur, valeur positive pour descendre/vers l&amp;rsquo;utilisateur Cette section contient des détails sur la mise en œuvre de l&amp;rsquo;API Robot avec Selenium Webdriver.</description>
    </item>
    
    <item>
      <title>Programme de base du pilote Web Selenium</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/programme-de-base-du-pilote-web-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/programme-de-base-du-pilote-web-selenium/</guid>
      <description>Cette rubrique vise à montrer le programme de pilote Web de base dans les langages pris en charge par le sélénium tels que C#, Groovy, Java, Perl, PHP, Python et Ruby.
Journey inclut l&amp;rsquo;ouverture du pilote du navigateur &amp;ndash;&amp;gt; Google Page &amp;ndash;&amp;gt; l&amp;rsquo;arrêt du navigateur
##C#
using OpenQA.Selenium; using OpenQA.Selenium.Chrome; namespace BasicWebdriver { class WebDriverTest { static void Main() { using (var driver = new ChromeDriver()) { driver.Navigate().GoToUrl(&amp;quot;http://www.google.com&amp;quot;); } } } } Le &amp;ldquo;programme&amp;rdquo; ci-dessus accédera à la page d&amp;rsquo;accueil de Google, puis fermera le navigateur après avoir entièrement chargé la page.</description>
    </item>
    
    <item>
      <title>Modèle d&#39;objet de page</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/modele-dobjet-de-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/modele-dobjet-de-page/</guid>
      <description>Un rôle important dans l&amp;rsquo;automatisation des sites Web et des applications Web consiste à identifier les éléments à l&amp;rsquo;écran et à interagir avec eux. Les éléments sont trouvés dans Selenium grâce à l&amp;rsquo;utilisation de localisateurs et de la classe &amp;ldquo;By&amp;rdquo;. Ces localisateurs et interactions sont placés dans les objets de page comme une bonne pratique pour éviter le code en double et faciliter la maintenance. Il encapsule WebElements et suppose contenir le comportement et renvoyer des informations sur la page (ou une partie d&amp;rsquo;une page dans une application Web).</description>
    </item>
    
    <item>
      <title>Sélectionnez la classe</title>
      <link>https://www.wikiod.com/fr/selenium-webdriver/selectionnez-la-classe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/selenium-webdriver/selectionnez-la-classe/</guid>
      <description>Syntaxe # Java tout déselectionner() désélectionnerParIndex(int ​​index) deselectByValue (valeur java.lang.String) désélectionnezByVisibleText (texte java.lang.String) getAllSelectedOptions() getFirstSelectedOption() getOptions() estMultiple() selectByIndex (index int) selectByValue (valeur java.lang.String) selectByVisibleText (texte java.lang.String) Paramètres # Paramètres Détails indice L&amp;rsquo;option à cet index sera sélectionnée valeur La valeur à comparer avec texte Le texte visible à comparer La classe Select de Selenium WebDriver fournit des méthodes utiles pour interagir avec les options select. L&amp;rsquo;utilisateur peut effectuer des opérations sur une liste déroulante de sélection et également désélectionner une opération à l&amp;rsquo;aide des méthodes ci-dessous.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel PowerShell on </title>
    <link>https://www.wikiod.com/fr/docs/powershell/</link>
    <description>Recent content in Tutoriel PowerShell on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec PowerShell</title>
      <link>https://www.wikiod.com/fr/powershell/premiers-pas-avec-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/premiers-pas-avec-powershell/</guid>
      <description>Autoriser les scripts stockés sur votre machine à s&amp;rsquo;exécuter sans signature # Pour des raisons de sécurité, PowerShell est configuré par défaut pour autoriser uniquement l&amp;rsquo;exécution des scripts signés. L&amp;rsquo;exécution de la commande suivante vous permettra d&amp;rsquo;exécuter des scripts non signés (vous devez exécuter PowerShell en tant qu&amp;rsquo;administrateur pour ce faire).
Set-ExecutionPolicy RemoteSigned Une autre façon d&amp;rsquo;exécuter des scripts PowerShell consiste à utiliser Bypass comme ExecutionPolicy :
powershell.exe -ExecutionPolicy Bypass -File &amp;quot;c:\MyScript.</description>
    </item>
    
    <item>
      <title>Instruction de commutation</title>
      <link>https://www.wikiod.com/fr/powershell/instruction-de-commutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/instruction-de-commutation/</guid>
      <description>Une instruction switch permet de tester l&amp;rsquo;égalité d&amp;rsquo;une variable par rapport à une liste de valeurs. Chaque valeur est appelée cas, et la variable étant activée est vérifiée pour chaque cas de commutation. Il vous permet d&amp;rsquo;écrire un script qui peut choisir parmi une série d&amp;rsquo;options, mais sans vous obliger à écrire une longue série d&amp;rsquo;instructions if.
Cette rubrique documente l&amp;rsquo;instruction switch utilisée pour créer des branches dans le flux du script.</description>
    </item>
    
    <item>
      <title>EncoderDécoder l&#39;URL</title>
      <link>https://www.wikiod.com/fr/powershell/encoderdecoder-lurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/encoderdecoder-lurl/</guid>
      <description>L&amp;rsquo;expression régulière utilisée dans les exemples Decode URL est tirée de RFC 2396, annexe B : Analyser une référence d&amp;rsquo;URI avec une expression régulière ; pour la postérité, voici une citation :
La ligne suivante est l&amp;rsquo;expression régulière pour décomposer un URI référence dans ses composants.
^(([^:/?#]+):)?(//([^/?#]))?([^?#])(?([^#])) ? (#(.)) ? 12 3 4 5 6 7 8 9
Les chiffres de la deuxième ligne ci-dessus ne servent qu&amp;rsquo;à faciliter la lisibilité ; elles indiquent les points de référence pour chaque sous-expression (c&amp;rsquo;est-à-dire chaque parenthèses appariées).</description>
    </item>
    
    <item>
      <title>Boucles</title>
      <link>https://www.wikiod.com/fr/powershell/boucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/boucles/</guid>
      <description>Une boucle est une séquence d&amp;rsquo;instruction(s) qui est continuellement répétée jusqu&amp;rsquo;à ce qu&amp;rsquo;une certaine condition soit atteinte. Pouvoir faire en sorte que votre programme exécute à plusieurs reprises un bloc de code est l&amp;rsquo;une des tâches les plus élémentaires mais les plus utiles en programmation. Une boucle vous permet d&amp;rsquo;écrire une instruction très simple pour produire un résultat nettement supérieur simplement par répétition. Si la condition a été atteinte, l&amp;rsquo;instruction suivante &amp;ldquo;passe&amp;rdquo; à l&amp;rsquo;instruction séquentielle suivante ou se branche en dehors de la boucle.</description>
    </item>
    
    <item>
      <title>Travailler avec des fichiers XML</title>
      <link>https://www.wikiod.com/fr/powershell/travailler-avec-des-fichiers-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/travailler-avec-des-fichiers-xml/</guid>
      <description>Accéder à un fichier XML # &amp;lt;!-- file.xml --&amp;gt; &amp;lt;people&amp;gt; &amp;lt;person id=&amp;quot;101&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Jon Lajoie&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;22&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;102&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Lord Gaben&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;65&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;103&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Gordon Freeman&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;29&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;/people&amp;gt; Chargement d&amp;rsquo;un fichier XML
Pour charger un fichier XML, vous pouvez utiliser l&amp;rsquo;un de ces éléments :
# First Method $xdoc = New-Object System.Xml.XmlDocument $file = Resolve-Path(&amp;quot;.\file.xml&amp;quot;) $xdoc.load($file) # Second Method [xml] $xdoc = Get-Content &amp;quot;.\file.xml&amp;quot; # Third Method $xdoc = [xml] (Get-Content &amp;quot;.</description>
    </item>
    
    <item>
      <title>Utilisation de ShouldProcess</title>
      <link>https://www.wikiod.com/fr/powershell/utilisation-de-shouldprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/utilisation-de-shouldprocess/</guid>
      <description>Syntaxe # $PSCmdlet.ShouldProcess(&amp;ldquo;Cible&amp;rdquo;) $PSCmdlet.ShouldProcess(&amp;ldquo;Cible&amp;rdquo;, &amp;ldquo;Action&amp;rdquo;) Paramètres # Paramètre Détails Cible La ressource en cours de modification. action L&amp;rsquo;opération en cours. Par défaut, le nom de l&amp;rsquo;applet de commande. $PSCmdlet.ShouldProcess() écrira également automatiquement un message dans la sortie détaillée.
PS&amp;gt; Invoke-MyCmdlet -Verbose VERBOSE: Performing the operation &amp;quot;Invoke-MyCmdlet&amp;quot; on target &amp;quot;Target of action&amp;quot; Exemple d&amp;rsquo;utilisation complet # D&amp;rsquo;autres exemples ne pouvaient pas m&amp;rsquo;expliquer clairement comment déclencher la logique conditionnelle.
Cet exemple montre également que les commandes sous-jacentes écouteront également l&amp;rsquo;indicateur -Confirm !</description>
    </item>
    
    <item>
      <title>Fonctions PowerShell</title>
      <link>https://www.wikiod.com/fr/powershell/fonctions-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/fonctions-powershell/</guid>
      <description>Une fonction est essentiellement un bloc de code nommé. Lorsque vous appelez le nom de la fonction, le bloc de script de cette fonction s&amp;rsquo;exécute. Il s&amp;rsquo;agit d&amp;rsquo;une liste d&amp;rsquo;instructions PowerShell qui porte un nom que vous attribuez. Lorsque vous exécutez une fonction, vous tapez le nom de la fonction. C&amp;rsquo;est une méthode pour gagner du temps lors de la réalisation de tâches répétitives. PowerShell formate en trois parties : le mot-clé &amp;ldquo;Function&amp;rdquo;, suivi d&amp;rsquo;un nom, enfin, la charge utile contenant le bloc de script, qui est entourée d&amp;rsquo;un crochet de style bouclé/parenthèse.</description>
    </item>
    
    <item>
      <title>Communication TCP avec PowerShell</title>
      <link>https://www.wikiod.com/fr/powershell/communication-tcp-avec-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/communication-tcp-avec-powershell/</guid>
      <description>Écouteur TCP # Function Receive-TCPMessage { Param ( [Parameter(Mandatory=$true, Position=0)] [ValidateNotNullOrEmpty()] [int] $Port ) Process { Try { # Set up endpoint and start listening $endpoint = new-object System.Net.IPEndPoint([ipaddress]::any,$port) $listener = new-object System.Net.Sockets.TcpListener $EndPoint $listener.start() # Wait for an incoming connection $data = $listener.AcceptTcpClient() # Stream setup $stream = $data.GetStream() $bytes = New-Object System.Byte[] 1024 # Read data from stream and write it to host while (($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){ $EncodedText = New-Object System.</description>
    </item>
    
    <item>
      <title>Gestion des secrets et des informations d&#39;identification</title>
      <link>https://www.wikiod.com/fr/powershell/gestion-des-secrets-et-des-informations-didentification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/gestion-des-secrets-et-des-informations-didentification/</guid>
      <description>Dans Powershell, pour éviter de stocker le mot de passe en texte clair, nous utilisons différentes méthodes de cryptage et le stockons sous forme de chaîne sécurisée. Lorsque vous ne spécifiez pas de clé ou de clé sécurisée, cela ne fonctionnera que pour le même utilisateur sur le même ordinateur qui pourra déchiffrer la chaîne chiffrée si vous n&amp;rsquo;utilisez pas Keys/SecureKeys. Tout processus qui s&amp;rsquo;exécute sous ce même compte d&amp;rsquo;utilisateur pourra déchiffrer cette chaîne chiffrée sur cette même machine.</description>
    </item>
    
    <item>
      <title>Ligne de commande PowerShell.exe</title>
      <link>https://www.wikiod.com/fr/powershell/ligne-de-commande-powershellexe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/powershell/ligne-de-commande-powershellexe/</guid>
      <description>Paramètres # Paramètre Description -Aide | -? | /? Affiche l&amp;rsquo;aide -File &amp;lt;CheminFichier&amp;gt; [&amp;lt;Args&amp;gt;] Chemin d&amp;rsquo;accès au fichier de script à exécuter et arguments (facultatif) -Commande { - | &amp;lt;script-block&amp;gt; [-args &amp;lt;arg-array&amp;gt;] | &amp;lt;chaîne&amp;gt; [&amp;lt;ParamètresCommande&amp;gt;] } Commandes à exécuter suivies d&amp;rsquo;arguments -CommandeEncodée &amp;lt;CommandeEncodéeBase64&amp;gt; Commandes encodées en Base64 -ExecutionPolicy &amp;lt;ExecutionPolicy&amp;gt; Définit la politique d&amp;rsquo;exécution pour ce processus uniquement -InputFormat { Texte | XML} Définit le format d&amp;rsquo;entrée des données envoyées au processus.</description>
    </item>
    
  </channel>
</rss>

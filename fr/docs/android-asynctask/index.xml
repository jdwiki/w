<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel android-asynctask on </title>
    <link>https://www.wikiod.com/fr/docs/android-asynctask/</link>
    <description>Recent content in Tutoriel android-asynctask on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/android-asynctask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec android-asynctask</title>
      <link>https://www.wikiod.com/fr/android-asynctask/premiers-pas-avec-android-asynctask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-asynctask/premiers-pas-avec-android-asynctask/</guid>
      <description>AsyncTask du concept à la mise en œuvre # Concept AsyncTask est une classe qui permet d&amp;rsquo;exécuter des opérations en arrière-plan, les résultats étant publiés sur le thread d&amp;rsquo;interface utilisateur. L&amp;rsquo;objectif principal est d&amp;rsquo;éliminer tout le code passe-partout pour démarrer/exécuter un thread en éliminant les gestionnaires et tout ce qui est nécessaire pour manipuler les threads. De plus, le but d&amp;rsquo;AsyncTask est d&amp;rsquo;avoir des opérations de courte durée sur un thread d&amp;rsquo;arrière-plan (quelques secondes au maximum), et non des opérations de longue durée.</description>
    </item>
    
    <item>
      <title>Annulation d&#39;une AsyncTask</title>
      <link>https://www.wikiod.com/fr/android-asynctask/annulation-dune-asynctask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/android-asynctask/annulation-dune-asynctask/</guid>
      <description>Annulation d&amp;rsquo;une AsyncTask
Annulation d&amp;rsquo;une AsyncTask # Dans l&amp;rsquo;exemple suivant, si quelqu&amp;rsquo;un appuie sur le bouton d&amp;rsquo;accueil pendant que la tâche est en cours d&amp;rsquo;exécution, la tâche est annulée. Dans cette annulation particulière, il devrait s&amp;rsquo;interrompre s&amp;rsquo;il est en cours d&amp;rsquo;exécution.
public class MainActivity extends AppCompatActivity { private static AtomicBoolean inWork; private CustomAsyncTask asyncTask; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); inWork = new AtomicBoolean(false); FloatingActionButton fab = (FloatingActionButton) findViewById(R.</description>
    </item>
    
  </channel>
</rss>

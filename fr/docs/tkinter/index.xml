<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel tkinter on </title>
    <link>https://www.wikiod.com/fr/docs/tkinter/</link>
    <description>Recent content in Tutoriel tkinter on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/tkinter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec tkinter</title>
      <link>https://www.wikiod.com/fr/tkinter/demarrer-avec-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/demarrer-avec-tkinter/</guid>
      <description>Installation ou configuration # Tkinter est préinstallé avec les binaires d&amp;rsquo;installation Python pour Mac OS X et la plate-forme Windows. Donc, si vous installez Python à partir des [binaires officiels] [1] pour la plate-forme Mac OS X ou Windows, vous êtes prêt à utiliser Tkinter.
Pour les versions Debian de Linux, vous devez l&amp;rsquo;installer manuellement en utilisant les commandes suivantes.
Pour Python 3
sudo apt-get install python3-tk
Pour Python 2.7</description>
    </item>
    
    <item>
      <title>Fenêtres multiples (widgets TopLevel)</title>
      <link>https://www.wikiod.com/fr/tkinter/fenetres-multiples-widgets-toplevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/fenetres-multiples-widgets-toplevel/</guid>
      <description>Différence entre Tk et Toplevel # Tk est la racine absolue de l&amp;rsquo;application, c&amp;rsquo;est le premier widget qui doit être instancié et l&amp;rsquo;interface graphique s&amp;rsquo;arrêtera lorsqu&amp;rsquo;elle sera détruite.
Toplevel est une fenêtre dans l&amp;rsquo;application, la fermeture de la fenêtre détruira tous les widgets enfants placés sur cette fenêtre{1} mais n&amp;rsquo;arrêtera pas le programme.
try: import tkinter as tk #python3 except ImportError: import Tkinter as tk #python2 #root application, can only have one of these.</description>
    </item>
    
    <item>
      <title>Le widget d&#39;entrée Tkinter</title>
      <link>https://www.wikiod.com/fr/tkinter/le-widget-dentree-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/le-widget-dentree-tkinter/</guid>
      <description>Syntaxe # entrée = tk.Entry(parent, **kwargs) entrée.get() entrée.insert(index, &amp;ldquo;valeur&amp;rdquo;) entrée.supprimer(start_index, end_index) entry.bind (événement, rappel) Paramètres # Paramètre Descriptif père Les widgets tkinter existent dans une hiérarchie. À l&amp;rsquo;exception de la fenêtre racine, tous les widgets ont un parent. Certains didacticiels en ligne appellent cela &amp;ldquo;maître&amp;rdquo;. Lorsque le widget est ajouté à l&amp;rsquo;écran avec pack, place ou grid, il apparaîtra à l&amp;rsquo;intérieur de ce widget parent largeur La largeur spécifie la largeur désirée du widget en fonction d&amp;rsquo;une largeur de caractère moyenne.</description>
    </item>
    
    <item>
      <title>Gestionnaires de géométrie Tkinter</title>
      <link>https://www.wikiod.com/fr/tkinter/gestionnaires-de-geometrie-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/gestionnaires-de-geometrie-tkinter/</guid>
      <description>Il existe trois gestionnaires de géométrie pour positionner les widgets : pack(), grid() et place().
paquet() # Le gestionnaire de géométrie pack() organise les widgets en blocs avant de les placer dans le widget parent. Il utilise les options fill, expand et side.
Syntaxe
widget.pack(option)
Remplir
Détermine si le widget conserve l&amp;rsquo;espace minimal nécessaire ou occupe tout espace supplémentaire qui lui est alloué. Attributs : AUCUN (par défaut), X (remplir horizontalement), Y (remplir verticalement) ou LES DEUX (remplir à la fois horizontalement et verticalement).</description>
    </item>
    
    <item>
      <title>Widgets défilants</title>
      <link>https://www.wikiod.com/fr/tkinter/widgets-defilants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/widgets-defilants/</guid>
      <description>Des barres de défilement peuvent être ajoutées aux widgets Listbox, Canvas et Text. De plus, les widgets d&amp;rsquo;entrée peuvent défiler horizontalement. Pour pouvoir faire défiler d&amp;rsquo;autres types de widgets, vous devez les placer dans un widget Canvas ou Text.
Syntaxe # scrollbar = tk.Scrollbar(parent, **kwargs) Paramètres # Paramètre Descriptif père Les widgets tkinter existent dans une hiérarchie. À l&amp;rsquo;exception de la fenêtre racine, tous les widgets ont un parent. Certains didacticiels en ligne appellent cela &amp;ldquo;maître&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Le widget Tkinter Radiobutton</title>
      <link>https://www.wikiod.com/fr/tkinter/le-widget-tkinter-radiobutton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/le-widget-tkinter-radiobutton/</guid>
      <description>Syntaxe # radiobutton = tk.Radiobutton(parent, **kwargs) Paramètres # Paramètre Descriptif père Les widgets tkinter existent dans une hiérarchie. À l&amp;rsquo;exception de la fenêtre racine, tous les widgets ont un parent. Certains didacticiels en ligne appellent cela &amp;ldquo;maître&amp;rdquo;. Lorsque le widget est ajouté à l&amp;rsquo;écran avec pack, place ou grid, il apparaîtra à l&amp;rsquo;intérieur de ce widget parent. commande fonction appelée à chaque fois que l&amp;rsquo;utilisateur change l&amp;rsquo;état du radiobutton indicateur activé 1 ou Vrai pour les boutons radio, 0 ou Faux pour les boîtes à boutons texte Texte à afficher à côté du bouton radio.</description>
    </item>
    
    <item>
      <title>Retarder une fonction</title>
      <link>https://www.wikiod.com/fr/tkinter/retarder-une-fonction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/retarder-une-fonction/</guid>
      <description>Syntaxe # widget.after(delay_ms, rappel, *args) Paramètres # Paramètre Descriptif délai_ms Temps (millisecondes) qui retarde l&amp;rsquo;appel à la fonction callback rappel Fonction appelée après le delay_ms donné. Si ce paramètre n&amp;rsquo;est pas donné, .after agit comme time.sleep (en millisecondes) La syntaxe suppose qu&amp;rsquo;un widget accepté par la méthode .after a été créé précédemment (c&amp;rsquo;est-à-dire widget=tk.Label(parent))
.après() # .after(delay, callback=None) est une méthode définie pour tous les widgets tkinter. Cette méthode appelle simplement la fonction callback après le delay donné en ms.</description>
    </item>
    
    <item>
      <title>Widgets TTK</title>
      <link>https://www.wikiod.com/fr/tkinter/widgets-ttk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/widgets-ttk/</guid>
      <description>Exemples des différents widgets ttk. Ttk a un total de 17 widgets, dont onze existaient déjà dans tkinter (tk).
L&amp;rsquo;utilisation du module ttk donne à votre application un aspect plus moderne et amélioré.
Syntaxe # tree=ttk.Treeview(master,**kwargs) Paramètres # Paramètre Descriptif maître Les widgets tkinter existent dans une hiérarchie. À l&amp;rsquo;exception de la fenêtre racine, tous les widgets ont un parent (également appelé &amp;ldquo;maître&amp;rdquo;). Lorsque le widget est ajouté à l&amp;rsquo;écran avec pack, place ou grid, il apparaîtra à l&amp;rsquo;intérieur de ce widget parent Ces exemples supposent que tkinter a été importé avec import tkinter as tk (python 3) ou import Tkinter as tk (python 2).</description>
    </item>
    
    <item>
      <title>Ajout d&#39;images à l&#39;étiquetteau bouton</title>
      <link>https://www.wikiod.com/fr/tkinter/ajout-dimages-a-letiquetteau-bouton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/ajout-dimages-a-letiquetteau-bouton/</guid>
      <description>Cela montre la bonne utilisation des images et comment afficher correctement les images.
Formats de fichiers pris en charge par Tkinter # Tkinter prend en charge les fichiers .ppm de PIL (Python Imaging Library), .JPG, .PNG et .GIF.
Pour importer et imager, vous devez d&amp;rsquo;abord créer une référence comme celle-ci :
Image = PhotoImage(filename = [Your Image here]) Maintenant, nous pouvons ajouter cette image à Button et Labels comme ceci en utilisant le rappel &amp;ldquo;img&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Personnaliser les styles ttk</title>
      <link>https://www.wikiod.com/fr/tkinter/personnaliser-les-styles-ttk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/tkinter/personnaliser-les-styles-ttk/</guid>
      <description>Le style des nouveaux widgets ttk est l&amp;rsquo;un des aspects les plus puissants de ttk. Outre le fait qu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;une méthode de travail complètement différente de celle du package tk traditionnel, il permet d&amp;rsquo;effectuer un degré élevé de personnalisation sur vos widgets.
Personnaliser une arborescence # En prenant https://www.wikiod.com/fr/tkinter/widgets-ttk#Arborescence : exemple de base on peut montrer comment personnaliser une arborescence de base.
Dans ce cas, on crée un style &amp;ldquo;mystyle.</description>
    </item>
    
  </channel>
</rss>

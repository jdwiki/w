<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Qt on </title>
    <link>https://www.wikiod.com/fr/docs/qt/</link>
    <description>Recent content in Tutoriel Qt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec Qt</title>
      <link>https://www.wikiod.com/fr/qt/demarrer-avec-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/demarrer-avec-qt/</guid>
      <description>Installation et configuration sous Windows et Linux # Télécharger Qt pour la version Linux Open Source
Allez sur https://www.qt.io/download-open-source/ et cliquez sur Télécharger maintenant, assurez-vous que vous téléchargez le programme d&amp;rsquo;installation de Qt pour Linux.
[![Page de téléchargement open source de Qt Linux][3]][3]
Un fichier avec le nom qt-unified-linux-x-online.run sera téléchargé, puis ajoutez l&amp;rsquo;autorisation exec
chmod +x qt-unified-linux-x-online.run N&amp;rsquo;oubliez pas de changer &amp;lsquo;x&amp;rsquo; pour la version actuelle du programme d&amp;rsquo;installation. Lancez ensuite le programme d&amp;rsquo;installation</description>
    </item>
    
    <item>
      <title>Signaux et créneaux</title>
      <link>https://www.wikiod.com/fr/qt/signaux-et-creneaux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/signaux-et-creneaux/</guid>
      <description>Les signaux et les slots sont utilisés pour la communication entre les objets. Le mécanisme des signaux et des slots est une caractéristique centrale de Qt.
Dans la programmation GUI, lorsque nous modifions un widget, nous voulons souvent qu&amp;rsquo;un autre widget soit notifié. Plus généralement, on veut que des objets de toute nature puissent communiquer entre eux.
Les signaux sont émis par les objets lorsqu&amp;rsquo;ils changent d&amp;rsquo;état d&amp;rsquo;une manière qui peut intéresser d&amp;rsquo;autres objets.</description>
    </item>
    
    <item>
      <title>CMakeLists.txt pour votre projet Qt</title>
      <link>https://www.wikiod.com/fr/qt/cmakeliststxt-pour-votre-projet-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/cmakeliststxt-pour-votre-projet-qt/</guid>
      <description>CMakeLists.txt pour Qt 5 # Un fichier de projet CMake minimal qui utilise Qt5 peut être :
cmake_minimum_required(VERSION 2.8.11) project(myproject) find_package(Qt5 5.7.0 REQUIRED COMPONENTS Core ) set(CMAKE_AUTOMOC ON) add_executable(${PROJECT_NAME} main.cpp ) target_link_libraries(${PROJECT_NAME} Qt5::Core ) cmake_minimum_required est appelé pour définir la version minimale requise pour CMake. La version minimale requise pour que cet exemple fonctionne est 2.8.11 &amp;ndash; les versions précédentes de CMake ont besoin de code supplémentaire pour qu&amp;rsquo;une cible utilise Qt.</description>
    </item>
    
    <item>
      <title>qmake</title>
      <link>https://www.wikiod.com/fr/qt/qmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/qmake/</guid>
      <description>Profil par défaut. # qmake est un outil d&amp;rsquo;automatisation de construction, qui est livré avec le framework Qt. Il fait un travail similaire à des outils tels que CMake ou GNU Autotools, mais il est conçu pour être utilisé spécifiquement avec Qt. En tant que tel, il est bien intégré à l&amp;rsquo;écosystème Qt, notamment l&amp;rsquo;IDE Qt Creator.
Si vous démarrez Qt Creator et sélectionnez Fichier -&amp;gt; Nouveau fichier ou projet -&amp;gt; Application -&amp;gt; Application Qt Widgets, Qt Creator générera pour vous un squelette de projet avec un fichier &amp;ldquo;pro&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Threading et simultanéité</title>
      <link>https://www.wikiod.com/fr/qt/threading-et-simultaneite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/threading-et-simultaneite/</guid>
      <description>Quelques notes déjà mentionnées dans les docs officielles ici et [ici](http://doc.qt. io/qt-5/qobject.html#moveToThread) :
Si un objet a un parent, il doit être dans le même thread que le parent, c&amp;rsquo;est-à-dire qu&amp;rsquo;il ne peut pas être déplacé vers un nouveau thread, et vous ne pouvez pas non plus définir un parent pour un objet si le parent et l&amp;rsquo;objet vivent dans des threads différents Lorsqu&amp;rsquo;un objet est déplacé vers un nouveau thread, tous ses enfants sont également déplacés vers le nouveau thread Vous ne pouvez que pousser des objets vers un nouveau fil.</description>
    </item>
    
    <item>
      <title>QObject</title>
      <link>https://www.wikiod.com/fr/qt/qobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/qobject/</guid>
      <description>La classe QObject est la classe de base pour tous les objets Qt.
qobject_cast # T qobject_cast(QObject *object) Une fonctionnalité ajoutée en dérivant de QObject et en utilisant la macro Q_OBJECT est la possibilité d&amp;rsquo;utiliser qobject_cast.
Exemple:
class myObject : public QObject { Q_OBJECT //... }; QObject* obj = new myObject(); Pour vérifier si obj est un type myObject et pour le convertir en tel en C++, vous pouvez généralement utiliser un [dynamic_cast](https://www.</description>
    </item>
    
    <item>
      <title>Qt - Gestion des bases de données</title>
      <link>https://www.wikiod.com/fr/qt/qt---gestion-des-bases-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/qt---gestion-des-bases-de-donnees/</guid>
      <description>Vous aurez besoin du plugin Qt SQL correspondant au type donné à QSqlDatabase::addDatabase Si vous n&amp;rsquo;avez pas le plugin SQL requis, Qt vous avertira qu&amp;rsquo;il ne trouve pas le pilote demandé Si vous n&amp;rsquo;avez pas le plugin SQL requis, vous devrez les compiler à partir de la source Qt Utiliser une base de données sur Qt # Dans le fichier Project.pro on ajoute :
CONFIG += sql dans MainWindow.h on écrit :</description>
    </item>
    
    <item>
      <title>Déploiement d&#39;applications Qt</title>
      <link>https://www.wikiod.com/fr/qt/deploiement-dapplications-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/deploiement-dapplications-qt/</guid>
      <description>Déploiement sur Windows # Qt fournit un outil de déploiement pour Windows : windeployqt. L&amp;rsquo;outil inspecte un exécutable d&amp;rsquo;application Qt pour ses dépendances aux modules Qt et crée un répertoire de déploiement avec les fichiers Qt nécessaires pour exécuter l&amp;rsquo;exécutable inspecté. Un script possible peut ressembler à :
set PATH=%PATH%;&amp;lt;qt_install_prefix&amp;gt;/bin windeployqt --dir /path/to/deployment/dir /path/to/qt/application.exe La commande set est appelée pour ajouter le répertoire bin de Qt à la variable d&amp;rsquo;environnement PATH.</description>
    </item>
    
    <item>
      <title>Communication entre QML et C&#43;&#43;</title>
      <link>https://www.wikiod.com/fr/qt/communication-entre-qml-et-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/communication-entre-qml-et-c-/</guid>
      <description>Nous pouvons utiliser QML pour créer des applications hybrides, car c&amp;rsquo;est beaucoup plus simple que C++. Nous devrions donc savoir comment ils communiquent entre eux.
Appeler C++ en QML # Enregistrer les classes C++ dans QML
Côté C++, imaginons que nous ayons une classe nommée QmlCppBridge, elle implémente une méthode appelée printHello().
class QmlCppBridge : public QObject { Q_OBJECT public: Q_INVOKABLE static void printHello() { qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, QML!&amp;quot;; } }; Nous voulons l&amp;rsquo;utiliser côté QML.</description>
    </item>
    
    <item>
      <title>ModèleVue</title>
      <link>https://www.wikiod.com/fr/qt/modelevue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/qt/modelevue/</guid>
      <description>Un tableau simple en lecture seule pour afficher les données d&amp;rsquo;un modèle # Ceci est un exemple simple pour afficher des données en lecture seule qui sont de nature tabulaire à l&amp;rsquo;aide de [Model/View Framework][1] de Qt. Plus précisément, les Qt Objects [QAbstractTableModel][2] (sous-classés dans cet exemple) et [QTableView][3] sont utilisés.
Les implémentations des méthodes [rowCount()][4], [columnCount()][5], [data()][6] et [headerData()][7] sont nécessaires pour donner à l&amp;rsquo;objet QTableView un moyen pour obtenir des informations sur les données contenues dans l&amp;rsquo;objet QAbstractTableModel.</description>
    </item>
    
  </channel>
</rss>

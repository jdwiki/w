<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel symfony2 on </title>
    <link>https://www.wikiod.com/fr/docs/symfony2/</link>
    <description>Recent content in Tutoriel symfony2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/symfony2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec symfony2</title>
      <link>https://www.wikiod.com/fr/symfony2/demarrer-avec-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/demarrer-avec-symfony2/</guid>
      <description>Installation ou configuration # Symfony Framework - construit avec des composants symfony, est l&amp;rsquo;un des principaux framework PHP utilisé pour créer des sites Web et des applications Web robustes.
Symfony peut être installé rapidement de deux manières recommandées.
La documentation officielle recommande d&amp;rsquo;installer le framework via le Symfony Installer which is a tiny php application that is installed once on the local system that helps in downloading the framework and setting up the configuration of the framework.</description>
    </item>
    
    <item>
      <title>Créer des services Web avec Symfony 2.8</title>
      <link>https://www.wikiod.com/fr/symfony2/creer-des-services-web-avec-symfony-28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/creer-des-services-web-avec-symfony-28/</guid>
      <description>Travailler avec l&amp;rsquo;API RESTFul # REpresentational State Transfer (REST) ​​est un style architectural utilisé pour le développement Web, introduit et défini en 2000 par Roy Fielding.
Voir sur wiki : [REST wiki][1]
Il est basé sur le protocole HTTP ([HTTP sur Wiki][2]), les requêtes HTTP (GET, POST, PATCH, DELETE&amp;hellip;) / les codes réponses (404, 400, 200, 201, 500&amp;hellip;) et la structure des corps .
C&amp;rsquo;est un excellent moyen d&amp;rsquo;exposer vos données à un autre système sur Internet.</description>
    </item>
    
    <item>
      <title>Routage</title>
      <link>https://www.wikiod.com/fr/symfony2/routage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/routage/</guid>
      <description>Renvoie une réponse 404 # Les réponses 404 sont renvoyées lorsqu&amp;rsquo;une ressource n&amp;rsquo;est pas trouvée sur le serveur, dans Symfony, ce statut peut être créé en lançant une exception NotFoundHttpException. Pour éviter une instruction use supplémentaire à l&amp;rsquo;intérieur d&amp;rsquo;un contrôleur, utilisez createNotFoundException() fourni par la classe Controller
&amp;lt;?php namespace Bundle\Controller; use Symfony\Bundle\FrameworkBundle\Controller\Controller; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; class TestController extends Controller { /** * @Route(&amp;quot;/{id}&amp;quot;, name=&amp;quot;test&amp;quot;) * Recommended to avoid template() as it has a lot of background processing.</description>
    </item>
    
    <item>
      <title>Doctrine Entité Relations</title>
      <link>https://www.wikiod.com/fr/symfony2/doctrine-entite-relations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/doctrine-entite-relations/</guid>
      <description>Un à plusieurs, bidirectionnel # Ce mappage bidirectionnel nécessite l&amp;rsquo;attribut mappedBy sur l&amp;rsquo;association OneToMany et l&amp;rsquo;attribut inversedBy sur l&amp;rsquo;association ManyToOne.
Une relation bidirectionnelle a à la fois un [côté propriétaire et inverse][1]. Les relations OneToMany peuvent utiliser des tables de jointure, vous devez donc spécifier un côté propriétaire. L&amp;rsquo;association &amp;ldquo;OneToMany&amp;rdquo; est toujours l&amp;rsquo;inverse d&amp;rsquo;une association bidirectionnelle.
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity * @ORM\Table(name=&amp;quot;users&amp;quot;) */ class User { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;username&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $username; /** * @var Group|null * * @ORM\ManyToOne(targetEntity=&amp;quot;AppBundle\Entity\Group&amp;quot;, inversedBy=&amp;quot;users&amp;quot;) * @ORM\JoinColumn(name=&amp;quot;group_id&amp;quot;, referencedColumnName=&amp;quot;id&amp;quot;, nullable=true) */ protected $group; /** * @param string $username * @param Group|null $group */ public function __construct($username, Group $group = null) { $this-&amp;gt;username = $username; $this-&amp;gt;group = $group; } /** * Set username * * @param string $username */ public function setUsername($username) { $this-&amp;gt;username = $username; } /** * Get username * * @return string */ public function getUsername() { return $this-&amp;gt;username; } /** * @param Group|null $group */ public function setGroup(Group $group = null) { if($this-&amp;gt;group !</description>
    </item>
    
    <item>
      <title>Services Symfony</title>
      <link>https://www.wikiod.com/fr/symfony2/services-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/services-symfony/</guid>
      <description>Comment déclarer, écrire et utiliser un service simple dans Symfony2 # Déclaration de prestations :
# src/Acme/YourBundle/Resources/config/services.yml services: my_service: class: Acme\YourBundle\Service\MyService arguments: [&amp;quot;@doctrine&amp;quot;, &amp;quot;%some_parameter%&amp;quot;, &amp;quot;@another_service&amp;quot;] another_service: class: Acme\YourBundle\Service\AnotherService arguments: [] Code service :
&amp;lt;?php namespace Acme\YourBundle\Service\Service; class MyService { /** * Constructor * You can had whatever you want to use in your service by dependency injection * @param $doctrine Doctrine * @param $some_parameter Some parameter defined in app/config/parameters.yml * @param $another_service Another service */ public function __construct($doctrine, $some_parameter, $another_service) { $this-&amp;gt;doctrine = $doctrine; $this-&amp;gt;some_parameter = $some_parameter; $this-&amp;gt;another_service = $another_service; } public function doMagic() { // Your code here } } Utilisez-le dans un contrôleur :</description>
    </item>
    
    <item>
      <title>Déploiement de Symfony2</title>
      <link>https://www.wikiod.com/fr/symfony2/deploiement-de-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/deploiement-de-symfony2/</guid>
      <description>Étapes pour déplacer manuellement le projet Symfony 2 vers l&amp;rsquo;hébergement # Cela dépend du type d&amp;rsquo;hébergement que vous avez :
Si vous avez une console SSH, vous pouvez le faire sur l&amp;rsquo;hébergement après l&amp;rsquo;étape 2, if you haven&amp;rsquo;t then do it locally: run command
php app/console cache:clear --env=prod&#39;. Supposons que vous ayez sur vous des dossiers d&amp;rsquo;hébergement youdomain/public_html, so in public_html must be located all web files. So you must upload all from Symfony project (folders: app, src, vendors, bin; files: deps, deps.</description>
    </item>
    
    <item>
      <title>Extensions Symfony Twig</title>
      <link>https://www.wikiod.com/fr/symfony2/extensions-symfony-twig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/extensions-symfony-twig/</guid>
      <description>Une simple extension Twig &amp;ndash; Symfony 2.8 # Avant de créer une extension, vérifiez toujours si elle a déjà [été implémentée][1].
La première chose à faire est de définir la classe d&amp;rsquo;extension qui hébergera les filtres et/ou fonctions twig.
&amp;lt;?php namespace AppBundle\Twig; class DemoExtension extends \Twig_Extension { /** * A unique identifier for your application * * @return string */ public function getName() { return &#39;demo&#39;; } /** * This is where one defines the filters one would to use in their twig * templates * * @return Array */ public function getFilters() { return array ( new \Twig_SimpleFilter ( &#39;price&#39;, // The name of the twig filter array($this, &#39;priceFilter&#39;) ), ); } public function priceFilter($number, $decimals = 0, $decPoint = &#39;.</description>
    </item>
    
    <item>
      <title>Modèles de conception Symfony</title>
      <link>https://www.wikiod.com/fr/symfony2/modeles-de-conception-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/modeles-de-conception-symfony/</guid>
      <description>Modèle d&amp;rsquo;injection de dépendance # Imaginez que vous ayez un gestionnaire de classe pour gérer l&amp;rsquo;envoi des mails (appelé MailManager).
En cela, vous devez enregistrer les e-mails qui sont envoyés. Une bonne solution est de transformer la classe MailManager en service puis d&amp;rsquo;injecter une classe de création de logs (Monolog par exemple) dans le MailManager créant un service.
Pour faire ça :
1- Déclarer la future classe MailManager en tant que service (dans services.</description>
    </item>
    
    <item>
      <title>Monolog améliore vos logs</title>
      <link>https://www.wikiod.com/fr/symfony2/monolog-ameliore-vos-logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/monolog-ameliore-vos-logs/</guid>
      <description>Ajouter les détails de l&amp;rsquo;utilisateur et les paramètres postés envoyés aux journaux # Les journaux sont très importants. Recréer un contexte d&amp;rsquo;erreur peut être parfois très pénible en raison du manque d&amp;rsquo;informations sur comment et quand l&amp;rsquo;erreur s&amp;rsquo;est produite.
Cet exemple montre :
Comment ajouter les données de l&amp;rsquo;utilisateur dans les journaux d&amp;rsquo;erreurs
Comment ajouter des paramètres de publication envoyé lorsqu&amp;rsquo;une erreur s&amp;rsquo;est produite
Comment utiliser [WebProcessor] [1] afin de ajouter toutes les données concernant la demande comme :</description>
    </item>
    
    <item>
      <title>Référentiel d&#39;entités de doctrine</title>
      <link>https://www.wikiod.com/fr/symfony2/referentiel-dentites-de-doctrine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/symfony2/referentiel-dentites-de-doctrine/</guid>
      <description>Création d&amp;rsquo;un nouveau référentiel # Vous pouvez créer un nouveau référentiel où vous le souhaitez, mais il est recommandé de les créer dans un dossier Repository séparé.
Bien que vous puissiez nommer le fichier et la classe du référentiel comme vous le souhaitez, il est recommandé de nommer le référentiel EntityNameRepository, afin que vous puissiez rapidement les trouver dans votre dossier.
Supposons que nous ayons une entité Project, stockée dans AppBundle\Entity, cela ressemblerait à ceci :</description>
    </item>
    
  </channel>
</rss>

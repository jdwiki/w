<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lucène Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/lucene/</link>
    <description>Recent content in Lucène Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/lucene/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec lucène</title>
      <link>https://www.wikiod.com/fr/lucene/premiers-pas-avec-lucene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lucene/premiers-pas-avec-lucene/</guid>
      <description>Bonjour le monde # Cet exemple de base de Lucene crée un index simple et effectue une recherche dessus.
Remarque : RAMDirectory crée un index résident en mémoire et est pratique pour expérimenter et tester, mais en pratique, la plupart des gens auront besoin d&amp;rsquo;avoir un index stocké dans le système de fichiers (voir [FSDirectory.open](https://lucene.apache. org/core/6_1_0/core/org/apache/lucene/store/FSDirectory.html#open-java.nio.file.Path-)).
import java.io.IOException; import org.apache.lucene.analysis.Analyzer; import org.apache.lucene.analysis.standard.StandardAnalyzer; import org.apache.lucene.document.*; import org.apache.lucene.index.*; import org.apache.lucene.queryparser.classic.*; import org.apache.lucene.search.*; import org.</description>
    </item>
    
    <item>
      <title>Requêtes</title>
      <link>https://www.wikiod.com/fr/lucene/requetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lucene/requetes/</guid>
      <description>Requête booléenne # BooleanQuery est utilisé pour combiner d&amp;rsquo;autres requêtes.
Ils peuvent être combinés à l&amp;rsquo;aide de trois paramètres BooleanClause.Occur :
BooleanClause.Occur.MUST - La sous-requête doit correspondre. BooleanClause.Occur.SHOULD - La sous-requête peut ne pas correspondre, mais sera notée plus haut si c&amp;rsquo;est le cas. S&amp;rsquo;il n&amp;rsquo;y a pas de clauses MUST, alors au moins une clause SHOULD doit correspondre. BooleanClause.Occur.MUST_NOT - La sous-requête ne doit pas correspondre au document. Dans cet exemple, un document correspondra s&amp;rsquo;il a &amp;ldquo;important&amp;rdquo;, mais pas &amp;ldquo;interdit&amp;rdquo;, et obtiendra un score plus élevé s&amp;rsquo;il a aussi &amp;ldquo;utile&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Une analyse</title>
      <link>https://www.wikiod.com/fr/lucene/une-analyse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lucene/une-analyse/</guid>
      <description>Création d&amp;rsquo;un analyseur personnalisé # La plupart des personnalisations d&amp;rsquo;analyse se trouvent dans la classe createComponents, où le Tokenizer et les TokenFilters sont définis.
Des CharFilters peuvent être ajoutés dans la méthode initReader.
Analyzer analyzer = new Analyzer() { @Override protected Reader initReader(String fieldName, Reader reader) { return new HTMLStripCharFilter(reader); } @Override protected TokenStreamComponents createComponents(String fieldName) { Tokenizer tokenizer = new StandardTokenizer(); TokenStream stream = new StandardFilter(tokenizer); //Order matters! If LowerCaseFilter and StopFilter were swapped here, StopFilter&#39;s //matching would be case sensitive, so &amp;quot;the&amp;quot; would be eliminated, but not &amp;quot;The&amp;quot; stream = new LowerCaseFilter(stream); stream = new StopFilter(stream, StopAnalyzer.</description>
    </item>
    
    <item>
      <title>Suppression de documents à l&#39;aide d&#39;une requête multiterme</title>
      <link>https://www.wikiod.com/fr/lucene/suppression-de-documents-a-laide-dune-requete-multiterme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/lucene/suppression-de-documents-a-laide-dune-requete-multiterme/</guid>
      <description>La suppression de documents d&amp;rsquo;un index Lucene est facile lorsque vous avez un champ de clé primaire dans votre document (comme dans les bases de données SQL traditionnelles).
Cependant, vous avez parfois besoin de supprimer un certain nombre de documents basés sur plusieurs champs du document. L&amp;rsquo;API Lucene vous permet d&amp;rsquo;y parvenir en spécifiant une requête à utiliser pour la suppression.
Pour ce faire, choisissez le bon analyseur, construisez la requête, passez la requête à l&amp;rsquo;indexWriter pour supprimer les documents.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prises Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/sockets/</link>
    <description>Recent content in Prises Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec les sockets</title>
      <link>https://www.wikiod.com/fr/sockets/premiers-pas-avec-les-sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sockets/premiers-pas-avec-les-sockets/</guid>
      <description>Comment instancier un objet de classe socket # L&amp;rsquo;instanciation d&amp;rsquo;un socket peut se faire de différentes manières.
déclaration et instanciation sur 2 lignes :
First we need to define a variable which will hold a Socket class object:
Socket socket; then we can create a Socket class object:
socket = new Socket(); Nous pouvons également créer une définition et une instanciation d&amp;rsquo;une ligne :
Socket socket = new Socket(); les deux sens créeront une prise non connectée.</description>
    </item>
    
    <item>
      <title>Sockets TCP Python ; exemples simples de serveur et de client avec annotation</title>
      <link>https://www.wikiod.com/fr/sockets/sockets-tcp-python-exemples-simples-de-serveur-et-de-client-avec-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sockets/sockets-tcp-python-exemples-simples-de-serveur-et-de-client-avec-annotation/</guid>
      <description>Ce sont deux exemples de programmes qui fonctionnent ensemble. L&amp;rsquo;un est un simple serveur, l&amp;rsquo;autre un simple client. Démarrez le serveur dans une fenêtre :
python tserver.py Modifiez l&amp;rsquo;adresse du serveur dans le fichier source du client si vous le souhaitez. Puis cours
python tclient.py Le client se connecte au serveur, puis demande une entrée à la console, puis l&amp;rsquo;envoie au serveur. Pour chaque tampon reçu, le serveur ajoute des informations prédéfinies et les renvoie au client.</description>
    </item>
    
    <item>
      <title>Sockets C&#43;&#43;</title>
      <link>https://www.wikiod.com/fr/sockets/sockets-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/sockets/sockets-c-/</guid>
      <description>Ce sujet portera sur la programmation Berkeley Socket de style C ++ moderne (il s&amp;rsquo;agit d&amp;rsquo;un code pour Linux, mais facilement portable sur d&amp;rsquo;autres plates-formes)
Exemple de code de serveur # constexpr const size_t addressSize = sizeof(sockaddr_in); constexpr const uint16_t defaultPort = 80; // The port you want to use int serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); sockaddr_in serverAddress, clientAddress; memset(&amp;amp;serverAddress, 0, addressSize); serverAddress.sin_family = AF_INET; serverAddress.sin_addr.s_addr = htonl(INADDR_ANY); serverAddress.sin_port = htons(defaultPort); bind(serverSocket, (sockaddr*)&amp;amp;serverAddress, addressSize); listen(serverSocket, SOMAXCONN); while (true) { // Infinite running app std::thread{ // Create new thread for every client handleConnection, //Connection handler accept(serverSocket, (sockaddr*)&amp;amp;clientAddress, &amp;amp;addressSize) //Client socket // Any other parameters for the handler here }.</description>
    </item>
    
  </channel>
</rss>

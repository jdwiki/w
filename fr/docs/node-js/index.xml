<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel Node.js on </title>
    <link>https://www.wikiod.com/fr/docs/node-js/</link>
    <description>Recent content in Tutoriel Node.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/node-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec Node.js</title>
      <link>https://www.wikiod.com/fr/node-js/premiers-pas-avec-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/premiers-pas-avec-nodejs/</guid>
      <description>Serveur HTTP Hello World # Tout d&amp;rsquo;abord, installez Node.js pour votre plate-forme.
Dans cet exemple, nous allons créer un serveur HTTP écoutant sur le port 1337, qui envoie &amp;ldquo;Hello, World!&amp;rdquo; au navigateur. Notez qu&amp;rsquo;au lieu d&amp;rsquo;utiliser le port 1337, vous pouvez utiliser n&amp;rsquo;importe quel numéro de port de votre choix qui n&amp;rsquo;est actuellement utilisé par aucun autre service.
Le module http est un Node.js [core module](https://www.wikiod.com/fr/node-js/premiers-pas-avec-nodejs#Modules de base ) (un module inclus dans la source de Node.</description>
    </item>
    
    <item>
      <title>Installation de Node.js</title>
      <link>https://www.wikiod.com/fr/node-js/installation-de-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/installation-de-nodejs/</guid>
      <description>Utilisation du gestionnaire de versions de nœud (nvm) # Node Version Manager, autrement connu sous le nom de nvm, est un script bash qui simplifie la gestion de plusieurs versions de Node.js.
Pour installer nvm, utilisez le script d&amp;rsquo;installation fourni :
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash Pour Windows, il existe un package nvm-windows avec un programme d&amp;rsquo;installation. Cette page GithHub contient les détails d&amp;rsquo;installation et d&amp;rsquo;utilisation du package nvm-windows.</description>
    </item>
    
    <item>
      <title>Applications Web avec Express</title>
      <link>https://www.wikiod.com/fr/node-js/applications-web-avec-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/applications-web-avec-express/</guid>
      <description>Express est un cadre d&amp;rsquo;application Web Node.js minimal et flexible, fournissant un ensemble robuste de fonctionnalités pour la création d&amp;rsquo;applications Web.
Le site officiel d&amp;rsquo;Express est [expressjs.com][1]. La source peut être trouvée [sur GitHub][2].
[1] : http://expressjs.com [2] : https://github.com/strongloop/express
Syntaxe # app.get(chemin [, middleware], rappel[, rappel&amp;hellip;]) app.put(chemin [, middleware], rappel[, rappel&amp;hellip;]) app.post(chemin [, middleware], rappel[, rappel&amp;hellip;]) app[&amp;lsquo;delete&amp;rsquo;](path [, middleware], callback[, callback&amp;hellip;]) app.use(chemin [, middleware], rappel[, rappel&amp;hellip;]) app.use (rappel) Paramètres # Paramètre Détails chemin Spécifie la partie du chemin ou l&amp;rsquo;URL que le rappel donné gérera.</description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://www.wikiod.com/fr/node-js/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/npm/</guid>
      <description>Node Package Manager (npm) fournit les deux fonctionnalités principales suivantes : Dépôts en ligne pour les packages/modules node.js qui peuvent être recherchés sur search.nodejs.org. Utilitaire de ligne de commande pour installer les packages Node.js, effectuer la gestion des versions et la gestion des dépendances des packages Node.js.
Syntaxe # npm &amp;lt;commande&amp;gt; où &amp;lt;commande&amp;gt; est l&amp;rsquo;un des : [ajouter-utilisateur][1] [adduser][1] apihelp auteur poubelle Bugs -c [cache] achèvement [configuration] [ddp][dédupé] [déduplication] déprécier documents Éditer explorer FAQ trouver trouver des dupes [obtenir][config] [aider] [aide-recherche] domicile [i][17] [installer][17] Info [chaleur][chaleur] n&amp;rsquo;est pas tout problèmes la [lien][11] [liste] ll dans connexion ls obsolète [propriétaire] paquet préfixe [prune] [publier][2] -r [rb][reconstruire] [reconstruire] retirer [dépôt] [redémarrer] [rm] racine [run-script][runscript] [s][recherche] [se][rechercher] [chercher] [set][config] Afficher film rétractable [étoile][9] [étoiles][16] [début][15] [arrêter][14] [sous-module][13] [balise][4] [test][3] [tst][3] [et][12] [désinstaller][12] [dissocier][11] [dépublier][10] [désactiver][9] [up][8] [mise à jour][8] [v][7] [version][7] [voir][6] [whoami] [5] [1] : https://docs.</description>
    </item>
    
    <item>
      <title>Intégration MySQL</title>
      <link>https://www.wikiod.com/fr/node-js/integration-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/integration-mysql/</guid>
      <description>Dans cette rubrique, vous apprendrez comment intégrer Node.js à l&amp;rsquo;aide de l&amp;rsquo;outil de gestion de base de données MYSQL. Vous apprendrez différentes façons de vous connecter et d&amp;rsquo;interagir avec les données résidant dans mysql à l&amp;rsquo;aide d&amp;rsquo;un programme et d&amp;rsquo;un script nodejs.
Connectez-vous à MySQL # L&amp;rsquo;un des moyens les plus simples de se connecter à MySQL consiste à utiliser le module [mysql][1]. Ce module gère la connexion entre l&amp;rsquo;application Node.</description>
    </item>
    
    <item>
      <title>Sécuriser les applications Node.js</title>
      <link>https://www.wikiod.com/fr/node-js/securiser-les-applications-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/securiser-les-applications-nodejs/</guid>
      <description>SSL/TLS dans Node.js # Si vous choisissez de gérer SSL/TLS dans votre application Node.js, considérez que vous êtes également responsable du maintien de la prévention des attaques SSL/TLS à ce stade. Dans de nombreuses architectures serveur-client, SSL/TLS se termine sur un proxy inverse, à la fois pour réduire la complexité de l&amp;rsquo;application et réduire la portée de la configuration de la sécurité.
Si votre application Node.js doit gérer SSL/TLS, elle peut être sécurisée en chargeant les fichiers de clé et de certificat.</description>
    </item>
    
    <item>
      <title>package.json</title>
      <link>https://www.wikiod.com/fr/node-js/packagejson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/packagejson/</guid>
      <description>Vous pouvez créer package.json avec
npm init qui vous demandera des informations de base sur vos projets, y compris identifiant de licence.
Scénarios # Vous pouvez définir des scripts pouvant être exécutés ou déclenchés avant ou après un autre script.
{ &amp;quot;scripts&amp;quot;: { &amp;quot;pretest&amp;quot;: &amp;quot;scripts/pretest.js&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;scripts/test.js&amp;quot;, &amp;quot;posttest&amp;quot;: &amp;quot;scripts/posttest.js&amp;quot; } } Dans ce cas, vous pouvez exécuter le script en exécutant l&amp;rsquo;une de ces commandes :
$ npm run-script test $ npm run test $ npm test $ npm t Scripts prédéfinis # Nom du script Descriptif prépublier Exécuter avant la publication du package.</description>
    </item>
    
    <item>
      <title>ES du système de fichiers</title>
      <link>https://www.wikiod.com/fr/node-js/es-du-systeme-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/es-du-systeme-de-fichiers/</guid>
      <description>Dans Node.js, les opérations gourmandes en ressources telles que les E/S sont effectuées de manière asynchrone, mais ont une contrepartie synchrone (par exemple, il existe un fs.readFile et son homologue est fs.readFileSync). Étant donné que Node est monothread, vous devez être prudent lorsque vous utilisez des opérations synchrones, car elles bloqueront l&amp;rsquo;ensemble du processus.
Si un processus est bloqué par une opération synchrone, tout le cycle d&amp;rsquo;exécution (y compris la boucle d&amp;rsquo;événements) est arrêté.</description>
    </item>
    
    <item>
      <title>Déployer des applications Node.js en production</title>
      <link>https://www.wikiod.com/fr/node-js/deployer-des-applications-nodejs-en-production/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/deployer-des-applications-nodejs-en-production/</guid>
      <description>Paramètre NODE_ENV=&amp;ldquo;production&amp;rdquo; # Les déploiements en production varient à bien des égards, mais une convention standard lors du déploiement en production consiste à définir une variable d&amp;rsquo;environnement appelée NODE_ENV et à définir sa valeur sur &amp;ldquo;production&amp;rdquo;.
Indicateurs d&amp;rsquo;exécution # Tout code exécuté dans votre application (y compris les modules externes) peut vérifier la valeur de NODE_ENV :
if(process.env.NODE_ENV === &#39;production&#39;) { // We are running in production mode } else { // We are running in development mode } Dépendances # Lorsque la variable d&amp;rsquo;environnement NODE_ENV est définie sur &amp;lsquo;production&amp;rsquo;, toutes les devDependencies de votre fichier package.</description>
    </item>
    
    <item>
      <title>Émetteurs d&#39;événements</title>
      <link>https://www.wikiod.com/fr/node-js/emetteurs-devenements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/node-js/emetteurs-devenements/</guid>
      <description>Lorsqu&amp;rsquo;un événement &amp;ldquo;se déclenche&amp;rdquo; (ce qui signifie la même chose que &amp;ldquo;publier un événement&amp;rdquo; ou &amp;ldquo;émettre un événement&amp;rdquo;), chaque écouteur sera appelé de manière synchrone ([source][1]), avec toutes les données d&amp;rsquo;accompagnement qui ont été transmises à emit(), quel que soit le nombre d&amp;rsquo;arguments que vous transmettez :
myDog.on(&#39;bark&#39;, (howLoud, howLong, howIntense) =&amp;gt; { // handle the event }) myDog.emit(&#39;bark&#39;, &#39;loudly&#39;, &#39;5 seconds long&#39;, &#39;fiercely&#39;) Les auditeurs seront appelés dans l&amp;rsquo;ordre dans lequel ils ont été enregistrés :</description>
    </item>
    
  </channel>
</rss>

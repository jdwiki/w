<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rspec Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/rspec/</link>
    <description>Recent content in rspec Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/rspec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec rspec</title>
      <link>https://www.wikiod.com/fr/rspec/premiers-pas-avec-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rspec/premiers-pas-avec-rspec/</guid>
      <description>Un exemple RSpec simple # Dans greeter.rb (partout où cela va dans votre projet):
class Greeter def greet &amp;quot;Hello, world!&amp;quot; end end Dans spec/greeter_spec.rb :
require_relative &#39;../greeter.rb&#39; RSpec.describe Greeter do describe &#39;#greet&#39; do it &amp;quot;says hello&amp;quot; do expect(Greeter.new.greet).to eq(&amp;quot;Hello, world!&amp;quot;) end end end Donc, notre structure de fichiers ressemble à :
$ tree . . ├── greeter.rb └── spec └── greeter_spec.rb 1 directory, 2 files Production
$rspec greeter_spec.rb Finished in 0.</description>
    </item>
    
    <item>
      <title>Attentes RSpec</title>
      <link>https://www.wikiod.com/fr/rspec/attentes-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rspec/attentes-rspec/</guid>
      <description>RSpec::Expectations vous permet d&amp;rsquo;exprimer les résultats attendus sur un objet à l&amp;rsquo;aide d&amp;rsquo;une syntaxe DSL basée sur des exemples.
Cette rubrique donne des exemples sur la façon d&amp;rsquo;attendre des résultats de test dans RSpec en utilisant expect .to et les nombreux matchers intégrés.
Cette fonctionnalité est fournie par [la gemme rspec-expectations][1].
[1] : https://github.com/rspec/rspec-expectations/
Utilisation de base # Soit une &amp;ldquo;classe&amp;rdquo; comme suit :
class Cube attr_reader :height, :width, :depth def initialize(args) @height = args[:height] || args[:y] || 1 @width = args[:width] || args[:x] || 1 @depth = args[:depth] || args[:z] || 1 end def volume height * width * depth end end L&amp;rsquo;exemple suivant réussit si cube.</description>
    </item>
    
    <item>
      <title>Simulations RSpec</title>
      <link>https://www.wikiod.com/fr/rspec/simulations-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rspec/simulations-rspec/</guid>
      <description>Cette rubrique documente la prise en charge par RSpec des doubles de test (stubs, mocks, etc.). Ce support est fourni par [le joyau rspec-mocks][1].
[1] : https://github.com/rspec/rspec-mocks
Stubbing avec allow # L&amp;rsquo;exemple suivant utilise allow et receive pour interrompre l&amp;rsquo;appel d&amp;rsquo;un Cart à un CreditCardService afin que l&amp;rsquo;exemple n&amp;rsquo;ait pas à attendre un appel réseau ou à utiliser un numéro de carte de crédit que le processeur connaît .
class Cart def check_out begin transaction_id = CreditCardService.</description>
    </item>
    
    <item>
      <title>Noyau RSpec</title>
      <link>https://www.wikiod.com/fr/rspec/noyau-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rspec/noyau-rspec/</guid>
      <description>Exécution d&amp;rsquo;exemples avec une balise donnée # L&amp;rsquo;ajout de balises aux blocs &amp;ldquo;describe&amp;rdquo; ou &amp;ldquo;it&amp;rdquo; vous permet d&amp;rsquo;exécuter uniquement les exemples avec une balise donnée. Utilisez l&amp;rsquo;option --tag (ou -t) pour exécuter des exemples qui correspondent à une balise spécifiée. La balise peut être un simple nom ou une paire nom:valeur.
Si un nom simple est fourni, seuls les exemples avec :name =&amp;gt; true seront exécutés. Par exemple, rspec &amp;lt;spec_file&amp;gt; --tag smoke exécuterait l&amp;rsquo;exemple étiqueté avec &amp;ldquo;Smoke&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Correspondance RSpec</title>
      <link>https://www.wikiod.com/fr/rspec/correspondance-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/rspec/correspondance-rspec/</guid>
      <description>rspec-expectations est livré avec un certain nombre de matchers intégrés. Chaque matcher peut être utilisé avec expect(..).to ou expect(..).not_to pour définir les attentes positives et négatives respectivement sur un objet.
Matchers d&amp;rsquo;égalité # comparer en utilisant eq (==)
RSpec.describe &amp;quot;a string&amp;quot; do it &amp;quot;is equal to another string of the same value&amp;quot; do expect(&amp;quot;this string&amp;quot;).to eq(&amp;quot;this string&amp;quot;) end it &amp;quot;is not equal to another string of a different value&amp;quot; do expect(&amp;quot;this string&amp;quot;).</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel apache-poi on </title>
    <link>https://www.wikiod.com/fr/docs/apache-poi/</link>
    <description>Recent content in Tutoriel apache-poi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/apache-poi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec apache-poi</title>
      <link>https://www.wikiod.com/fr/apache-poi/premiers-pas-avec-apache-poi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-poi/premiers-pas-avec-apache-poi/</guid>
      <description>Installation ou configuration # Instructions détaillées sur la configuration ou l&amp;rsquo;installation d&amp;rsquo;apache-poi.</description>
    </item>
    
    <item>
      <title>Création Excel simple (XLSX)</title>
      <link>https://www.wikiod.com/fr/apache-poi/creation-excel-simple-xlsx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-poi/creation-excel-simple-xlsx/</guid>
      <description>Excel de base # String fileName = &amp;quot;Fruit.xlsx&amp;quot;; String sheetName = &amp;quot;Apples&amp;quot;; XSSFWorkbook wb = new XSSFWorkbook(); XSSFSheet sheet = wb.createSheet(sheetName) ; for (int r=0;r &amp;lt; 3; r++ ) { XSSFRow row = sheet.createRow(r); //iterating c number of columns for (int c=0;c &amp;lt; 3; c++ ) { XSSFCell cell = row.createCell(c); cell.setCellValue(&amp;quot;Nice apple, in row: &amp;quot;+r+&amp;quot; and col: &amp;quot;+c); } } try(FileOutputStream fos = new FileOutputStream(fileName)) { wb.write(fos); } </description>
    </item>
    
    <item>
      <title>Premiers pas avec NPOI</title>
      <link>https://www.wikiod.com/fr/apache-poi/premiers-pas-avec-npoi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-poi/premiers-pas-avec-npoi/</guid>
      <description>Il s&amp;rsquo;agit de la version .NET du projet POI Java. il permet de lire/écrire des fichiers xls, doc, ppt sans avoir installé Microsoft Office. Des détails sur la documentation sont disponibles ici : https://github.com/tonyqus/npoi
Installation de NPOI # Le meilleur moyen d&amp;rsquo;inclure toutes les bibliothèques liées à NPOI est NUGet Package Manager. Recherchez NPOI dans la fenêtre du gestionnaire de packages NUGet.
[![entrez la description de l&amp;rsquo;image ici][1]][1]
Une fois qu&amp;rsquo;il est installé avec succès, toutes les bibliothèques nécessaires apparaîtront dans la section de référence de votre projet actuel [!</description>
    </item>
    
    <item>
      <title>Approche de contrainte de validation des données NPOI pour la date, l&#39;heure, l&#39;élément de liste, l&#39;e-mail, etc. pour le fichier Excel XSSF (.xslx) à l&#39;aide de c#</title>
      <link>https://www.wikiod.com/fr/apache-poi/approche-de-contrainte-de-validation-des-donnees-npoi-pour-la-date-lheure-lelement-de-liste-le-mail-etc-pour-le-fichier-excel-xssf-xslx-a-laide-de-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-poi/approche-de-contrainte-de-validation-des-donnees-npoi-pour-la-date-lheure-lelement-de-liste-le-mail-etc-pour-le-fichier-excel-xssf-xslx-a-laide-de-c/</guid>
      <description>La création de la contrainte de validation des données peut être délicate et prendre du temps dans NPOI. J&amp;rsquo;ai partagé une partie de mon approche réalisable. Ces approches donneront une bonne idée pour personnaliser vos propres types de contraintes.
Définissez les contraintes de date pour les valeurs de champ de date entre le 01/01/1900 et le 31/12/2119 avec le format de date mm/jj//aaaaa ; # int DVRowLimit = (Int16.MaxValue); CellRangeAddressList cellRangeFieldsType1 = new CellRangeAddressList(1, DVRowLimit, targetFirstCol, targetLastCol); XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint)validationHelper.</description>
    </item>
    
    <item>
      <title>Approche de validation des données NPOI pour le fichier Excel XSSF (.xslx) à l&#39;aide de c#</title>
      <link>https://www.wikiod.com/fr/apache-poi/approche-de-validation-des-donnees-npoi-pour-le-fichier-excel-xssf-xslx-a-laide-de-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/apache-poi/approche-de-validation-des-donnees-npoi-pour-le-fichier-excel-xssf-xslx-a-laide-de-c/</guid>
      <description>La validation des données permet à l&amp;rsquo;utilisateur de créer une liste déroulante et de restreindre les valeurs de la cellule à ces entrées. En raison de limitations, Excel ne peut pas lier plus de 256 caractères par programmation. Pour lier plus de 256 caractères, on peut suivre l&amp;rsquo;approche expliquée.
Lorsque la somme de tous les caractères de tous les éléments de la liste compte moins de 256 # Vous pouvez lire tous les éléments à partir de n&amp;rsquo;importe quel fichier de configuration ou le saisir en ligne.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel mfc on </title>
    <link>https://www.wikiod.com/fr/docs/mfc/</link>
    <description>Recent content in Tutoriel mfc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/mfc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec mfc</title>
      <link>https://www.wikiod.com/fr/mfc/premiers-pas-avec-mfc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/mfc/premiers-pas-avec-mfc/</guid>
      <description>Un programme MFC de base # // Include the MFC header: // (you do not need to and should not include the standard Windows headers, e.g. // Windows.h) #include &amp;lt;AfxWin.h&amp;gt; // MFC core and standard components // The following header defines resource constants, such as dialog and control IDs: #include &amp;quot;resource.h&amp;quot; // The basic element of an MFC application is a class that inherits from CWinApp. class CMyApp : public CWinApp { // This gets called as the application gets initialized.</description>
    </item>
    
    <item>
      <title>Barres de contrôle ancrables (volets)</title>
      <link>https://www.wikiod.com/fr/mfc/barres-de-controle-ancrables-volets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/mfc/barres-de-controle-ancrables-volets/</guid>
      <description>Presque toutes les applications MFC ont une barre d&amp;rsquo;outils et une barre d&amp;rsquo;état - des types spéciaux de la barre de contrôle ancrée en haut et en bas du cadre principal de l&amp;rsquo;application. Mais souvent, la logique d&amp;rsquo;application nécessite plus de barres d&amp;rsquo;informations ancrées à un côté du cadre, par exemple, il peut s&amp;rsquo;agir de la barre de propriétés ou de la barre de classes, de la barre d&amp;rsquo;aperçu, de la barre de sortie et bien d&amp;rsquo;autres.</description>
    </item>
    
    <item>
      <title>Migration du projet DLL ISAPI MFC extension (C&#43;&#43;) VS2005 vers VS2015.</title>
      <link>https://www.wikiod.com/fr/mfc/migration-du-projet-dll-isapi-mfc-extension-c-vs2005-vers-vs2015/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/mfc/migration-du-projet-dll-isapi-mfc-extension-c-vs2005-vers-vs2015/</guid>
      <description>Vous avez peut-être vu plusieurs sites Web qui montreront comment créer un projet d&amp;rsquo;extension ISAPI, mais aucun d&amp;rsquo;entre eux ne montrera comment migrer le projet d&amp;rsquo;extension ISAPI existant (VS2005) vers VS2015. J&amp;rsquo;avais rencontré un problème similaire alors que je travaillais sur l&amp;rsquo;une de ces exigences. Cet article montre la manière expérimentale que j&amp;rsquo;avais prise pour résoudre mon problème.
Je travaillais sur une tâche de migration où je suis tombé sur un projet.</description>
    </item>
    
    <item>
      <title>Multithreading</title>
      <link>https://www.wikiod.com/fr/mfc/multithreading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/mfc/multithreading/</guid>
      <description>MFC prend en charge les threads de travail et les threads gui (threads avec boucles de message). Voir https://msdn.microsoft.com/en-us/library/975t8ks0.aspx pour plus de documentation.
Exemple simple de thread de travail AfxBeginThread # Cet exemple montre un appel de AfxBeginThread qui démarre le thread de travail et un exemple de procédure de thread de travail pour ce thread.
// example simple thread procedure. UINT __cdecl threadProc(LPVOID rawInput) { // convert it to the correct data type.</description>
    </item>
    
  </channel>
</rss>

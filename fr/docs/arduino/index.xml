<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel arduino on </title>
    <link>https://www.wikiod.com/fr/docs/arduino/</link>
    <description>Recent content in Tutoriel arduino on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec arduino</title>
      <link>https://www.wikiod.com/fr/arduino/premiers-pas-avec-arduino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/premiers-pas-avec-arduino/</guid>
      <description>Juste le minimum # Voici le croquis Arduino &amp;ldquo;minimum&amp;rdquo;. Cela peut être chargé dans l&amp;rsquo;IDE Arduino en choisissant Fichier&amp;gt; Exemples&amp;gt; 01. Bases&amp;gt; Bare Minimum.
void setup() { // put your setup code here, to run once } void loop() { // put your main code here, to run repeatedly } Le code de la fonction setup() sera exécuté une fois au démarrage du programme. Ceci est utile pour configurer les broches d&amp;rsquo;E/S, initialiser les variables, etc.</description>
    </item>
    
    <item>
      <title>PWM - Modulation de largeur d&#39;impulsion</title>
      <link>https://www.wikiod.com/fr/arduino/pwm---modulation-de-largeur-dimpulsion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/pwm---modulation-de-largeur-dimpulsion/</guid>
      <description>Contrôlez un moteur à courant continu via le port série à l&amp;rsquo;aide de PWM # Dans cet exemple, nous visons à accomplir l&amp;rsquo;une des tâches les plus courantes : J&amp;rsquo;ai un petit moteur à courant continu qui traîne, comment utiliser mon Arduino pour le contrôler ? Facile, avec PWM et communication série, en utilisant la fonction analogWrite() et la bibliothèque Serial.
Les bases # La modulation de largeur d&amp;rsquo;impulsion ou PWM en abrégé est une technique permettant d&amp;rsquo;imiter des signaux analogiques à l&amp;rsquo;aide d&amp;rsquo;une sortie numérique.</description>
    </item>
    
    <item>
      <title>Utilisation d&#39;Arduino avec Atmel Studio 7</title>
      <link>https://www.wikiod.com/fr/arduino/utilisation-darduino-avec-atmel-studio-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/utilisation-darduino-avec-atmel-studio-7/</guid>
      <description>Installer # Téléchargez et installez Atmel Studio 7 depuis [ici][1]. Achetez un débogueur. Vous pouvez vous débrouiller avec un programmeur ISP, mais si vous voulez des capacités de débogage, ce qui est l&amp;rsquo;un des grands avantages de l&amp;rsquo;utilisation d&amp;rsquo;Atmel Studio, vous aurez besoin d&amp;rsquo;un débogueur. Je recommande [Atmel ICE][2], car il offre des capacités de débogage pour les arduinos basés sur AVR (comme Uno, pro mini, etc.) et les Arduinos basés sur ARM, tels que Zero et Due.</description>
    </item>
    
    <item>
      <title>Communication SPI</title>
      <link>https://www.wikiod.com/fr/arduino/communication-spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/communication-spi/</guid>
      <description>Signaux de sélection de puce # La plupart des esclaves ont une entrée de sélection de puce basse active. Donc, le code approprié pour initialiser et utiliser une broche de sélection de puce est le suivant :
#define CSPIN 1 // or whatever else your CS pin is // init: pinMode(CSPIN, OUTPUT); digitalWrite(CSPIN, 1); // deselect // use: digitalWrite(CSPIN, 0); // select ... perform data transfer ... digitalWrite(CSPIN, 1); // deselect Désélectionner un esclave est tout aussi important que le sélectionner, car un esclave peut piloter la ligne MISO pendant qu&amp;rsquo;il est sélectionné.</description>
    </item>
    
    <item>
      <title>Broches matérielles</title>
      <link>https://www.wikiod.com/fr/arduino/broches-materielles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/broches-materielles/</guid>
      <description>##Arduino Uno R3 Les microcontrôleurs utilisent des broches pour interagir avec le reste du circuit. Ces broches seront généralement l&amp;rsquo;une des broches d&amp;rsquo;entrée / sortie, vin ou masse. Les broches d&amp;rsquo;E/S peuvent être de simples broches d&amp;rsquo;E/S numériques, ou elles peuvent avoir des caractéristiques spéciales comme la possibilité de faire varier la tension de leur sortie à l&amp;rsquo;aide de la modulation de largeur d&amp;rsquo;impulsion. Voici un schéma de l&amp;rsquo;Arduino R3 Uno et de ses broches.</description>
    </item>
    
    <item>
      <title>Communication série</title>
      <link>https://www.wikiod.com/fr/arduino/communication-serie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/communication-serie/</guid>
      <description>Syntaxe # Serial.begin(speed) // Ouvre le port série au débit en bauds donné Serial.begin(vitesse, configuration) Serial[1-3].begin(speed) // Arduino Mega uniquement ! Lorsque vous écrivez 1-3, cela signifie que vous pouvez choisir entre les chiffres 1 à 3 lors du choix du port série. Serial[1-3].begin(speed, config) // Arduino Mega uniquement ! Lorsque vous écrivez 1-3, cela signifie que vous pouvez choisir entre les chiffres 1 à 3 lors du choix du port série.</description>
    </item>
    
    <item>
      <title>Comment Python s&#39;intègre à Arduino Uno</title>
      <link>https://www.wikiod.com/fr/arduino/comment-python-sintegre-a-arduino-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/comment-python-sintegre-a-arduino-uno/</guid>
      <description>Syntaxe # Serial.begin(baudrate) // Définir le débit en bauds (bits par seconde) pour la transmission de données en série Serial.println(value) // Imprime les données sur le port série suivi d&#39;un retour chariot \r et d&#39;un caractère de saut de ligne \n serial.Serial((port=None, baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE, stopbits=STOPBITS_ONE, timeout=None, xonxoff=False, rtscts=False, write_timeout=None, dsrdtr=False, inter_byte_timeout=None ) // Initialiser le port série avec tous les paramètres serial.readline() // Lire les données série contenant le retour chariot \r et le caractère de saut de ligne \n Paramètres # Paramètre Détails série Le package Python contient des classes et des méthodes pour accéder au port série temps Le package Python inclut des fonctions liées au temps J&amp;rsquo;utilise un Arduino Uno avec Arduino IDE 1.</description>
    </item>
    
    <item>
      <title>Gestion du temps</title>
      <link>https://www.wikiod.com/fr/arduino/gestion-du-temps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/gestion-du-temps/</guid>
      <description>Syntaxe # long millis non signé()
micros longs non signés()
délai d&amp;rsquo;annulation (longs millisecondes non signés)
void delayMicroseconds (microsecondes longues non signées)
Voir [l&amp;rsquo;en-tête elapsedMillis][1] pour les constructeurs et les opérateurs de cette classe. Bref:
elapsedMillis elapsedMillisObject ; crée un objet pour garder une trace du temps depuis sa création ou depuis un autre point explicitement défini dans le temps
elapsedMillisObject = 0 ; * réinitialiser le temps suivi par l&amp;rsquo;objet à &amp;ldquo;depuis maintenant&amp;rdquo; *</description>
    </item>
    
    <item>
      <title>Comment stocker des variables dans EEPROM et les utiliser pour un stockage permanent</title>
      <link>https://www.wikiod.com/fr/arduino/comment-stocker-des-variables-dans-eeprom-et-les-utiliser-pour-un-stockage-permanent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/comment-stocker-des-variables-dans-eeprom-et-les-utiliser-pour-un-stockage-permanent/</guid>
      <description>Syntaxe # EEPROM.write(adresse, valeur); //(Mémoriser les variables en EEPROM à une adresse particulière) EEPROM.read(adresse); //(Récupérer les valeurs de l&amp;rsquo;EEPROM et lire les données stockées dans l&amp;rsquo;EEPROM) Paramètres # Paramètres de EEPROM.write Détail adresse L&amp;rsquo;adresse où la valeur doit être stockée dans l&amp;rsquo;EEPROM valeur Variable principale à stocker en EEPROM. Notez qu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;un uint_8 (un seul octet) - vous devez diviser vous-même les types de données à plusieurs octets en octets uniques.</description>
    </item>
    
    <item>
      <title>Communication Bluetooth</title>
      <link>https://www.wikiod.com/fr/arduino/communication-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/arduino/communication-bluetooth/</guid>
      <description>Paramètres # méthode détails SoftwareSerial.h Documentation SoftwareSerial(rxPin, txPin, logique_inverse) Constructeur. rxPin : Broche d&amp;rsquo;entrée de données (réception), par défaut à 0. txPin : Broche de sortie de données (transmission), par défaut à 1. inverse_logic : Si vrai, traite LOW comme s&amp;rsquo;il était HIGH et HIGH comme LOW lors de la détermination des valeurs de bit. par défaut à faux. commencer(vitesse) Définit le débit en bauds pour la communication série. Les débits en bauds pris en charge sont 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 31250, 38400, 57600 et 115200.</description>
    </item>
    
  </channel>
</rss>

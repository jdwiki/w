<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>boost Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/boost/</link>
    <description>Recent content in boost Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/boost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec boost</title>
      <link>https://www.wikiod.com/fr/boost/premiers-pas-avec-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/premiers-pas-avec-boost/</guid>
      <description>Installation ou configuration # Voir [Boost Mise en route][1].
La plupart des bibliothèques Boost ne contiennent que des en-têtes, ce qui signifie qu&amp;rsquo;il n&amp;rsquo;y a rien à compiler ou à lier.
Assurez-vous d&amp;rsquo;avoir la version la plus récente de Boost :
Visitez [www.boost.org][2] Recherchez le téléchargement de la version actuelle. Actuellement, cela renvoie [ici][3]. [![Montre où sur le site Web boost vous pouvez télécharger Boost][4]][4] Sélectionnez le fichier d&amp;rsquo;archive approprié pour votre système d&amp;rsquo;exploitation et téléchargez-le.</description>
    </item>
    
    <item>
      <title>Utiliser boost.python</title>
      <link>https://www.wikiod.com/fr/boost/utiliser-boostpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/utiliser-boostpython/</guid>
      <description>Exemple d&amp;rsquo;introduction sur Boost.Python # Les choses sont faciles lorsque vous devez utiliser une bibliothèque C++ dans un projet Python. Juste vous pouvez utiliser Boost.
Voici tout d&amp;rsquo;abord une liste des composants dont vous avez besoin :
Un fichier CMakeList.txt, car vous allez utiliser CMake. Les fichiers C++ du projet C++. Le fichier python - c&amp;rsquo;est votre projet python. Commençons par un petit fichier C++. Notre projet C++ n&amp;rsquo;a qu&amp;rsquo;une seule méthode qui renvoie une chaîne &amp;ldquo;Ceci est le premier essai&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Options du programme Boost</title>
      <link>https://www.wikiod.com/fr/boost/options-du-programme-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/options-du-programme-boost/</guid>
      <description>Utilisation de base # Les options du programme Boost fournissent un moyen simple et sûr d&amp;rsquo;analyser et de gérer les arguments de la ligne de commande.
#include &amp;lt;boost/program_options.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; int main(int argc, char** argv) { namespace po = boost::program_options; po::variables_map vm; po::options_description desc(&amp;quot;Allowed Options&amp;quot;); // declare arguments desc.add_options() (&amp;quot;name&amp;quot;, po::value&amp;lt;std::string&amp;gt;()-&amp;gt;required(), &amp;quot;Type your name to be greeted!&amp;quot;); // parse arguments and save them in the variable map (vm) po::store(po::parse_command_line(argc, argv, desc), vm); std::cout &amp;lt;&amp;lt; &amp;quot;Hello &amp;quot; &amp;lt;&amp;lt; vm[&amp;quot;name&amp;quot;].</description>
    </item>
    
    <item>
      <title>bibliothèque d&#39;algorithmes de chaîne boost</title>
      <link>https://www.wikiod.com/fr/boost/bibliotheque-dalgorithmes-de-chaine-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/bibliotheque-dalgorithmes-de-chaine-boost/</guid>
      <description>[Amplifier la documentation sur les algorithmes de chaîne][bststralgs]
[bststralgs] : http://www.boost.org/doc/libs/1_61_0/doc/html/string_algo.html
##boost ::split() #include #include #include #include &amp;lt;boost/algorithm/string.hpp&amp;gt;
using namespace std; int main() { // String to split string str = &amp;quot;You&#39;re supposed to see this!|NOT THIS!!!!!!&amp;quot;; // Line container vector&amp;lt;string&amp;gt; lines; // Splits string boost::split(lines, str, boost::is_any_of(&amp;quot;|&amp;quot;), boost::token_compress_on); // Outputs 1 half of the split string cout &amp;lt;&amp;lt; lines.at(0).c_str() &amp;lt;&amp;lt; endl; // Waits for input before program exits cin.get(); return 0; } Voici le programme en [psuedocode][1] :</description>
    </item>
    
    <item>
      <title>Cadre d&#39;accumulateurs Boost</title>
      <link>https://www.wikiod.com/fr/boost/cadre-daccumulateurs-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/cadre-daccumulateurs-boost/</guid>
      <description>Calcul de la moyenne et de la variance # #include &amp;lt;iostream&amp;gt; #include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/stats.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/mean.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/variance.hpp&amp;gt; int main() { using namespace boost::accumulators; accumulator_set&amp;lt;int, stats&amp;lt;tag::mean, tag::variance&amp;gt;&amp;gt; acc; for(int i = 1; i &amp;lt;= 6; i++) acc(i); std::cout &amp;lt;&amp;lt; &amp;quot;mean=&amp;quot; &amp;lt;&amp;lt; mean(acc) &amp;lt;&amp;lt; &amp;quot;, variance=&amp;quot; &amp;lt;&amp;lt; variance(acc) &amp;lt;&amp;lt; &#39;\n&#39;; // prints &amp;quot;mean=3.5, variance=2.91667&amp;quot; return 0; } </description>
    </item>
    
    <item>
      <title>Processus de boost asynchrone</title>
      <link>https://www.wikiod.com/fr/boost/processus-de-boost-asynchrone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/processus-de-boost-asynchrone/</guid>
      <description>Utilisation asynchrone des 3 canaux d&amp;rsquo;un processus enfant. # #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/process.hpp&amp;gt; #include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;boost/process/windows.hpp&amp;gt; int Run( const std::string&amp;amp; exeName, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; args, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; input, ///&amp;lt; [in] data for stdin std::string&amp;amp; output, ///&amp;lt; [out] data from stdout std::string&amp;amp; error ///&amp;lt; [out] data from stderr ) { using namespace boost; asio::io_service ios; // stdout setup // std::vector&amp;lt;char&amp;gt; vOut(128 &amp;lt;&amp;lt; 10); // that worked well for my decoding app.</description>
    </item>
    
    <item>
      <title>BOOST - Comparez les images à l&#39;aide d&#39;OpevCV</title>
      <link>https://www.wikiod.com/fr/boost/boost---comparez-les-images-a-laide-dopevcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/boost/boost---comparez-les-images-a-laide-dopevcv/</guid>
      <description>Cette documentation explique comment une image externe peut être testée et comparée à l&amp;rsquo;image de sortie d&amp;rsquo;OpenCV. Par exemple, pour comparer deux images floues et tester si elles sont toutes les deux identiques, nous brouillons une image originale dans un logiciel externe (j&amp;rsquo;ai utilisé le logiciel de traitement d&amp;rsquo;image WiT) ou téléchargeons simplement n&amp;rsquo;importe quelle image floue en ligne - sortie1. Créez un projet Win32 OpenCV dans Visual Studio. Lisez l&amp;rsquo;image d&amp;rsquo;origine en tant qu&amp;rsquo;entrée dans OpenCV.</description>
    </item>
    
  </channel>
</rss>

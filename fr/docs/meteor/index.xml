<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Météore Tutoriel on </title>
    <link>https://www.wikiod.com/fr/docs/meteor/</link>
    <description>Recent content in Météore Tutoriel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/meteor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Premiers pas avec météore</title>
      <link>https://www.wikiod.com/fr/meteor/premiers-pas-avec-meteore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/premiers-pas-avec-meteore/</guid>
      <description>Commencer # Installer Météore # Sous OS X et Linux # Installez la dernière version officielle de Meteor depuis votre terminal :
$ curl https://install.meteor.com/ | sh Sous Windows # Téléchargez le programme d&amp;rsquo;installation officiel de Meteor ici.
Créez votre application # Une fois Meteor installé, créez un projet :
$ meteor create myapp Exécuter # Exécutez-le localement :
$ cd myapp $ meteor npm install $ meteor Remarque : Serveur Meteor exécuté sur : http://localhost:3000/</description>
    </item>
    
    <item>
      <title>Publication de données</title>
      <link>https://www.wikiod.com/fr/meteor/publication-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/publication-de-donnees/</guid>
      <description>Au sein du sous-système de données de Meteor, une publication de serveur et ses abonnements client correspondants sont les principaux mécanismes de transport de données réactif et en direct où les données sous-jacentes sont constamment synchronisées entre le serveur et le client.
Publications mondiales # Une publication globale ne possède pas de nom et ne nécessite pas d&amp;rsquo;abonnement de la part du client connecté et est donc disponible pour le client connecté dès que le client se connecte au serveur.</description>
    </item>
    
    <item>
      <title>Structure du répertoire</title>
      <link>https://www.wikiod.com/fr/meteor/structure-du-repertoire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/structure-du-repertoire/</guid>
      <description>Avant la sortie de Meteor 1.3, les développeurs de Meteor étaient frustrés par la gestion par Meteor.js des dépendances de fichiers et des variables globales. En réponse, Meteor a établi de nouvelles normes pour les structures de projet afin de rationaliser le système de dépendance du projet. Cette rubrique explique la structure de projet standardisée et les principes qui la sous-tendent.
client Tout le code du répertoire client est exécuté uniquement côté client ou dans le navigateur Web.</description>
    </item>
    
    <item>
      <title>Guide du débutant pour l&#39;installation de Meteor 1.4 sur AWS EC2</title>
      <link>https://www.wikiod.com/fr/meteor/guide-du-debutant-pour-linstallation-de-meteor-14-sur-aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/guide-du-debutant-pour-linstallation-de-meteor-14-sur-aws-ec2/</guid>
      <description>Inscription au service AWS # Étant donné que de nombreux débutants sont confus au sujet de l&amp;rsquo;hébergement dans le cloud, j&amp;rsquo;écris ce guide pour vous expliquer comment configurer le météore sur aws avec ubuntu os. Si votre instance est déjà en cours d&amp;rsquo;exécution, n&amp;rsquo;hésitez pas à ignorer cette étape et à passer directement à l&amp;rsquo;installation de meteor sur aws.
Connectez-vous à la console AWS. Sélectionnez EC2. Accédez au tableau de bord EC2.</description>
    </item>
    
    <item>
      <title>Météore &#43; Réagir</title>
      <link>https://www.wikiod.com/fr/meteor/meteore--reagir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/meteore--reagir/</guid>
      <description>React est une bibliothèque JavaScript pour créer des interfaces utilisateur. C&amp;rsquo;est open source, développé et maintenu par Facebook. Meteor a un support prêt pour la production pour React.
Ressources:
[Tutoriel React] (https://facebook.github.io/react/docs/tutorial.html) [Tutoriel Meteor + React] (https://www.meteor.com/tutorials/react/creating-an-app) Configuration et &amp;ldquo;Hello World&amp;rdquo; # Ajoutez React à votre projet :
meteor npm install --save react react-dom react-mounter Créez le fichier client/helloworld.jsx pour afficher un composant React simple :
import React, { Component } from &#39;react&#39;; import { mount } from &#39;react-mounter&#39;; // This component only renders a paragraph containing &amp;quot;Hello World!</description>
    </item>
    
    <item>
      <title>Utiliser Meteor avec un serveur proxy</title>
      <link>https://www.wikiod.com/fr/meteor/utiliser-meteor-avec-un-serveur-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/utiliser-meteor-avec-un-serveur-proxy/</guid>
      <description>Utilisation de la variable d&amp;rsquo;environnement HTTP[S]_PROXY # Cette page décrit comment utiliser l&amp;rsquo;outil de ligne de commande Meteor (par exemple, lors du téléchargement de packages, du déploiement de votre application, etc.) derrière un serveur proxy.
Comme beaucoup d&amp;rsquo;autres logiciels en ligne de commande, l&amp;rsquo;outil Meteor lit la configuration du proxy à partir des variables d&amp;rsquo;environnement HTTP_PROXY et HTTPS_PROXY (les variantes en minuscules fonctionnent également). Exemples d&amp;rsquo;exécution de Meteor derrière un proxy :</description>
    </item>
    
    <item>
      <title>Electrify - Compilation de Meteor en tant qu&#39;application installable localement</title>
      <link>https://www.wikiod.com/fr/meteor/electrify---compilation-de-meteor-en-tant-quapplication-installable-localement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/electrify---compilation-de-meteor-en-tant-quapplication-installable-localement/</guid>
      <description>Installer Electrify pour une application Meteor # Electron transfère les applications Web HTML vers des applications natives pour une gamme d&amp;rsquo;appareils, y compris la création d&amp;rsquo;applications de bureau natives. Il est également très facile de démarrer !
Pour commencer, nous devons avoir electron, nodejs, npm, git et meteor installés. La familiarité avec ces outils est essentielle pour travailler avec Meteor, alors assurez-vous d&amp;rsquo;abord de connaître ces choses.
Électron
npm install -g electrify &amp;ldquo;électron&amp;rdquo; est ce que nous utilisons !</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.wikiod.com/fr/meteor/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/mongodb/</guid>
      <description>MongoDB est un programme de base de données orienté document multiplateforme gratuit et open source. Contrairement aux bases de données SQL classiques, MongoDB utilise BSON (comme JSON) pour stocker les données. Meteor a été conçu pour utiliser MongoDB pour le stockage de base de données et cette rubrique explique comment implémenter le stockage MongoDB dans les applications Meteor.
Exporter une base de données Mongo distante, importer dans une base de données Meteor Mongo locale # Utile lorsque vous souhaitez récupérer une copie d&amp;rsquo;une base de données de production pour jouer avec localement.</description>
    </item>
    
    <item>
      <title>Modèle Blaze</title>
      <link>https://www.wikiod.com/fr/meteor/modele-blaze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/modele-blaze/</guid>
      <description>Blaze est une bibliothèque puissante pour créer des interfaces utilisateur en écrivant des modèles HTML dynamiques et réactifs. Les modèles Blaze permettent d&amp;rsquo;utiliser directement les boucles et la logique conditionnelle dans le balisage HTML. Cette section explique et démontre l&amp;rsquo;utilisation correcte des modèles dans Meteor.js avec Blaze.
Remplir un modèle à partir d&amp;rsquo;un appel de méthode # &amp;lt;template name=&amp;quot;myTemplate&amp;quot;&amp;gt; {{#each results}} &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;{{name}}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;{{age}}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; {{/each}} &amp;lt;/template&amp;gt; Template.myTemplate.onCreated(function() { this.results = new ReactiveVar(); Meteor.</description>
    </item>
    
    <item>
      <title>Récupérer les données d&#39;un Meteor.call</title>
      <link>https://www.wikiod.com/fr/meteor/recuperer-les-donnees-dun-meteorcall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/meteor/recuperer-les-donnees-dun-meteorcall/</guid>
      <description>Les bases de Meteor.call # Meteor.call(name, [arg1, arg2...], [asyncCallback]) (1) nom Chaîne (2) Nom de la méthode à invoquer (3) arg1, arg2&amp;hellip; Objet compatible EJSON [Facultatif]
(4) Fonction asyncCallback [Facultatif]
D&amp;rsquo;une part, vous pouvez faire : (via Session variable, ou via ReactiveVar)
var syncCall = Meteor.call(&amp;quot;mymethod&amp;quot;) // Sync call Cela signifie que si vous faites quelque chose comme ça, côté serveur, vous ferez :
Meteor.methods({ mymethod: function() { let asyncToSync = Meteor.</description>
    </item>
    
  </channel>
</rss>

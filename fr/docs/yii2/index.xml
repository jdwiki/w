<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel yii2 on </title>
    <link>https://www.wikiod.com/fr/docs/yii2/</link>
    <description>Recent content in Tutoriel yii2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/yii2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec yii2</title>
      <link>https://www.wikiod.com/fr/yii2/demarrer-avec-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/demarrer-avec-yii2/</guid>
      <description>Installation ou configuration # Yii2 peut être installé de deux manières. Elles sont
Installation via Composer Installation à partir d&amp;rsquo;un fichier d&amp;rsquo;archive Installation via Composer # Installation de Composer # Si vous n&amp;rsquo;avez pas encore installé Composer, vous pouvez le faire en suivant les instructions sur getcomposer.org. Sous Linux et Mac OS X, vous exécuterez les commandes suivantes :
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer Pour Windows, téléchargez et installez simplement [composer-setup.</description>
    </item>
    
    <item>
      <title>Enregistrement actif</title>
      <link>https://www.wikiod.com/fr/yii2/enregistrement-actif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/enregistrement-actif/</guid>
      <description>AR est parfait lorsque vous devez supprimer, mettre à jour ou créer un ou plusieurs enregistrements de manière séquentielle. Sa prise en charge des attributs sales (sauvegardant uniquement ce qui a été réellement modifié) se traduit par des instructions UPDATE optimisées qui soulagent considérablement la charge de la base de données et réduisent les risques de divers conflits liés à la modification du même enregistrement par plusieurs personnes en même temps.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/fr/yii2/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/validation/</guid>
      <description>Désactiver le message d&amp;rsquo;erreur de validation lors de la mise au point/touche vers le haut # Par défaut, un message d&amp;rsquo;erreur apparaît sous textbox dans &amp;lt;div class=&amp;quot;help-block&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; sur keyUp ou après avoir appuyé sur le bouton d&amp;rsquo;envoi si des contraintes de validation ne sont pas respectées.
Parfois, nous voulons un message lors de la soumission uniquement, c&amp;rsquo;est-à-dire aucune validation à l&amp;rsquo;événement onKeyup.
Vérifions le fichier yii2/widgets/ActiveForm.php :
&amp;lt;?php namespace yii\widgets; use Yii; use yii\base\InvalidCallException; use yii\base\Widget; use yii\base\Model; use yii\helpers\ArrayHelper; use yii\helpers\Url; use yii\helpers\Html; use yii\helpers\Json; class ActiveForm extends Widget { public $action = &#39;&#39;; public $method = &#39;post&#39;; public $options = []; .</description>
    </item>
    
    <item>
      <title>Biscuits</title>
      <link>https://www.wikiod.com/fr/yii2/biscuits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/biscuits/</guid>
      <description>Les cookies font partie de la requête HTTP, c&amp;rsquo;est donc une bonne idée de faire les deux dans le contrôleur dont la responsabilité s&amp;rsquo;occupe exactement de la requête et de la réponse.
Authentification inter-sous-domaines et cookies d&amp;rsquo;identité # En cas de connexion automatique ou de cookie &amp;ldquo;se souvenir de moi&amp;rdquo;, les mêmes bizarreries que dans le cas des cookies de sous-domaine s&amp;rsquo;appliquent. Mais cette fois, vous devez configurer le composant utilisateur, en définissant le tableau &amp;ldquo;identityCookie&amp;rdquo; sur la configuration de cookie souhaitée.</description>
    </item>
    
    <item>
      <title>Essai</title>
      <link>https://www.wikiod.com/fr/yii2/essai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/essai/</guid>
      <description>Comment se moquer d&amp;rsquo;ActiveRecord # Si vous voulez vous moquer d&amp;rsquo;AR qui n&amp;rsquo;essaie pas de se connecter à la base de données, vous pouvez le faire de la manière suivante (si vous utilisez PHPUnit) :
$post = $this-&amp;gt;getMockBuilder(&#39;\app\model\Post&#39;) -&amp;gt;setMethods([&#39;save&#39;, &#39;attributes&#39;]) -&amp;gt;getMock(); $post-&amp;gt;method(&#39;save&#39;)-&amp;gt;willReturn(true); $post-&amp;gt;method(&#39;attributes&#39;)-&amp;gt;willReturn([ &#39;id&#39;, &#39;status&#39;, &#39;title&#39;, &#39;description&#39;, &#39;text&#39; ]); Le hic, c&amp;rsquo;est que nous devons remplacer la méthode attributs () car ActiveRecord obtient par défaut la liste des attributs de schéma de base de données que nous essayons d&amp;rsquo;éviter.</description>
    </item>
    
    <item>
      <title>Téléchargements de fichiers</title>
      <link>https://www.wikiod.com/fr/yii2/telechargements-de-fichiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/telechargements-de-fichiers/</guid>
      <description>Comment faire # Télécharger des fichiers # Le téléchargement de fichiers dans Yii est généralement effectué à l&amp;rsquo;aide de [[yii\web\UploadedFile]] qui encapsule chaque fichier téléchargé. fichier en tant qu&amp;rsquo;objet UploadedFile. Combiné avec [[yii\widgets\ActiveForm]] et models, vous pouvez facilement implémenter un mécanisme de téléchargement de fichiers sécurisé.
Création de modèles # Comme si vous travailliez avec des entrées de texte brut, pour télécharger un seul fichier, vous créeriez une classe de modèle et utiliseriez un attribut du modèle pour conserver l&amp;rsquo;instance de fichier téléchargée.</description>
    </item>
    
    <item>
      <title>Formulaire actif Yii2</title>
      <link>https://www.wikiod.com/fr/yii2/formulaire-actif-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/formulaire-actif-yii2/</guid>
      <description>Champs de formulaire dans Yii2 # Montrant un exemple de base de la page d&amp;rsquo;affichage dans Yii2 pour les nouveaux apprenants
Ce sont des classes de base que vous devez ajouter pour créer un formulaire en utilisant yii2 ActiveForm
&amp;lt;?php Use yii\helpers\Html; Use yii\widgets\ActiveForm; La ligne ci-dessous commencera la balise de formulaire pour notre formulaire ci-dessous, montrant par exemple comment spécifier un identifiant pour le formulaire et comment appliquer des classes pour le formulaire.</description>
    </item>
    
    <item>
      <title>Demande Ajax</title>
      <link>https://www.wikiod.com/fr/yii2/demande-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/demande-ajax/</guid>
      <description>Envoi du formulaire Ajax # Voir la fiche: # &amp;lt;?php use yii; use yii\bootstrap\ActiveForm; use yii\helpers\Html; ?&amp;gt; &amp;lt;?php $form = ActiveForm::begin([ &#39;action&#39; =&amp;gt; [&#39;comments/ajax-comment&#39;], &#39;options&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;comment-form&#39; ] ]); ?&amp;gt; &amp;lt;?= $form-&amp;gt;field($model, &#39;comment&#39;); ?&amp;gt; &amp;lt;?= Html::submitButton(&amp;quot;Submit&amp;quot;, [&#39;class&#39; =&amp;gt; &amp;quot;btn&amp;quot;]); ?&amp;gt; &amp;lt;?php ActiveForm::end(); ?&amp;gt; Javascript : # jQuery(document).ready(function($) { $(&amp;quot;.comment-form&amp;quot;).submit(function(event) { event.preventDefault(); // stopping submitting var data = $(this).serializeArray(); var url = $(this).attr(&#39;action&#39;); $.ajax({ url: url, type: &#39;post&#39;, dataType: &#39;json&#39;, data: data }) .</description>
    </item>
    
    <item>
      <title>Pjax</title>
      <link>https://www.wikiod.com/fr/yii2/pjax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/pjax/</guid>
      <description>Étape 1 Ajouter une structure # Dans vues\site\form-submission.php
&amp;lt;?php Pjax::begin([&#39;id&#39;=&amp;gt;&#39;id-pjax&#39;]); ?&amp;gt; &amp;lt;?= Html::beginForm([&#39;site/form-submission&#39;], &#39;post&#39;, [&#39;data-pjax&#39; =&amp;gt; &#39;&#39;, &#39;class&#39; =&amp;gt; &#39;form-inline&#39;]); ?&amp;gt; &amp;lt;?= Html::input(&#39;text&#39;, &#39;string&#39;, Yii::$app-&amp;gt;request-&amp;gt;post(&#39;string&#39;), [&#39;class&#39; =&amp;gt; &#39;form-control&#39;]) ?&amp;gt; &amp;lt;?= Html::submitButton(&#39;Hash String&#39;, [&#39;class&#39; =&amp;gt; &#39;btn btn-lg btn-primary&#39;, &#39;name&#39; =&amp;gt; &#39;hash-button&#39;]) ?&amp;gt; &amp;lt;?= Html::endForm() ?&amp;gt; &amp;lt;h3&amp;gt;&amp;lt;?= $stringHash ?&amp;gt;&amp;lt;/h3&amp;gt; &amp;lt;?php Pjax::end(); ?&amp;gt; comment utiliser pjax # Ajoutez cette ligne au début de votre vue.
&amp;lt;?php use yii\widgets\Pjax; ?&amp;gt; Ajoutez les deux lignes suivantes autour du contenu qui nécessite une mise à jour partielle.</description>
    </item>
    
    <item>
      <title>Travailler avec des bases de données</title>
      <link>https://www.wikiod.com/fr/yii2/travailler-avec-des-bases-de-donnees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/yii2/travailler-avec-des-bases-de-donnees/</guid>
      <description>Utilisation du générateur de requêtes Yii2 # Yii2 fournit des moyens efficaces pour récupérer des données de la base de données. Prenons un exemple d&amp;rsquo;une simple table d&amp;rsquo;employés ayant des champs emp_id, emp_name et emp_salary. Afin de récupérer les noms des employés et leurs salaires, nous utilisons la requête.
select emp_name,emp_salary from employee Pour générer la requête ci-dessus dans Yii2, il existe de nombreuses méthodes. L&amp;rsquo;une d&amp;rsquo;entre elles consiste à utiliser un objet yii\db\Query.</description>
    </item>
    
  </channel>
</rss>

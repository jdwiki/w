<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutoriel wcf on </title>
    <link>https://www.wikiod.com/fr/docs/wcf/</link>
    <description>Recent content in Tutoriel wcf on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/fr/docs/wcf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrer avec wcf</title>
      <link>https://www.wikiod.com/fr/wcf/demarrer-avec-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/demarrer-avec-wcf/</guid>
      <description>Démonstration du service reposant WCF # svc
public class WCFRestfulService : IWCFRestfulService { public string GetServiceName(int Id) { return &amp;quot;This is a WCF Restful Service&amp;quot;; } } Interface
[ServiceContract(Name = &amp;quot;WCRestfulService &amp;quot;)] public interface IWCFRestfulService { [OperationContract] [WebInvoke(Method = &amp;quot;GET&amp;quot;, ResponseFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped, UriTemplate = &amp;quot;GetServiceName?Id={Id}&amp;quot;)] string GetServiceName(int Id); } svc Markup (clic droit sur le fichier svc et cliquez sur afficher le balisage)
&amp;lt;%@ ServiceHost Language=&amp;quot;C#&amp;quot; Debug=&amp;quot;true&amp;quot; Service=&amp;quot;NamespaceName.</description>
    </item>
    
    <item>
      <title>Comment utiliser un conteneur d&#39;injection de dépendances avec un service WCF</title>
      <link>https://www.wikiod.com/fr/wcf/comment-utiliser-un-conteneur-dinjection-de-dependances-avec-un-service-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/comment-utiliser-un-conteneur-dinjection-de-dependances-avec-un-service-wcf/</guid>
      <description>Comment configurer un service WCF pour utiliser un conteneur d&amp;rsquo;injection de dépendances (Castle Windsor) # Cet exemple comporte deux parties : quelques étapes passe-partout pour ajouter Castle Windsor à votre service WCF, puis un exemple simple et concret pour montrer comment nous configurons et utilisons le conteneur de Windsor.
Cela rend l&amp;rsquo;exemple un peu long. Si vous comprenez déjà l&amp;rsquo;utilisation d&amp;rsquo;un conteneur DI, vous ne vous souciez probablement que des étapes passe-partout.</description>
    </item>
    
    <item>
      <title>Votre premier service</title>
      <link>https://www.wikiod.com/fr/wcf/votre-premier-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/votre-premier-service/</guid>
      <description>Ajout d&amp;rsquo;un point de terminaison de métadonnées à votre service # Les services SOAP peuvent publier des métadonnées qui décrivent les méthodes qui peuvent être invoquées par les clients. Les clients peuvent utiliser des outils tels que Visual Studio pour générer automatiquement du code (connu sous le nom de proxy client). Les proxies cachent la complexité de l&amp;rsquo;invocation d&amp;rsquo;un service. Pour invoquer un service, il suffit d&amp;rsquo;invoquer une méthode sur un proxy client.</description>
    </item>
    
    <item>
      <title>Service reposant WCF</title>
      <link>https://www.wikiod.com/fr/wcf/service-reposant-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/service-reposant-wcf/</guid>
      <description>Service Resful WCF # [ServiceContract] public interface IBookService { [OperationContract] [WebGet] List&amp;lt;Book&amp;gt; GetBooksList(); [OperationContract] [WebGet(UriTemplate = &amp;quot;Book/{id}&amp;quot;)] Book GetBookById(string id); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;AddBook/{name}&amp;quot;)] void AddBook(string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;UpdateBook/{id}/{name}&amp;quot;)] void UpdateBook(string id, string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;DeleteBook/{id}&amp;quot;)] void DeleteBook(string id); } Mise en œuvre du service
Désormais, la partie implémentation du service utilisera le contexte et les entités générés par l&amp;rsquo;infrastructure d&amp;rsquo;entités pour effectuer toutes les opérations respectives.</description>
    </item>
    
    <item>
      <title>Tracé</title>
      <link>https://www.wikiod.com/fr/wcf/trace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/trace/</guid>
      <description>Paramètres de traçage # Le traçage WCF est construit au-dessus de System.Diagnostics. Pour utiliser le suivi, vous devez définir les sources de suivi dans le fichier de configuration ou dans le code.
Le traçage n&amp;rsquo;est pas activé par défaut. Pour activer le suivi, vous devez créer un écouteur de suivi et définir un niveau de suivi autre que &amp;ldquo;Désactivé&amp;rdquo; pour la source de suivi sélectionnée dans la configuration ; sinon, WCF ne génère aucune trace.</description>
    </item>
    
    <item>
      <title>Sécurité WCF</title>
      <link>https://www.wikiod.com/fr/wcf/securite-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/securite-wcf/</guid>
      <description>Sécurité WCF # La sécurité est un élément essentiel de toute technologie ou cadre de programmation pour la mise en œuvre applications orientées service
WCF a été construit à partir de zéro pour fournir l&amp;rsquo;infrastructure de sécurité nécessaire au niveau des messages et des services.
Dans les sections suivantes, vous voyez comment utiliser de nombreux paramètres de sécurité disponibles dans WCF et certains scénarios de déploiement courants.
Pour la protection des messages, WCF prend en charge les deux modèles de sécurité traditionnels, la sécurité du transport et la sécurité des messages.</description>
    </item>
    
    <item>
      <title>Sérialisation</title>
      <link>https://www.wikiod.com/fr/wcf/serialisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/serialisation/</guid>
      <description>Sérialisation dans WCF # La sérialisation est le processus de conversion d&amp;rsquo;un objet en un flux d&amp;rsquo;octets afin de stocker l&amp;rsquo;objet ou de le transmettre à la mémoire, à une base de données ou à un fichier. [Sérialisation de la page Microsoft][1]
L&amp;rsquo;exemple suivant illustre la sérialisation dans WCF :
[ServiceContract(Namespace=&amp;quot;http://Microsoft.ServiceModel.Samples&amp;quot;)] public interface IPerson { [OperationContract] void Add(Person person); [DataContract] public class Person { private int id; [DataMember] public int Age{ set; get;} } } L&amp;rsquo;attribut [DataContract] est utilisé avec les classes.</description>
    </item>
    
    <item>
      <title>Gestion des exceptions</title>
      <link>https://www.wikiod.com/fr/wcf/gestion-des-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/gestion-des-exceptions/</guid>
      <description>Autres lectures
En savoir plus sur FaultException : [MSDN FaultException][1]
[1] : https://msdn.microsoft.com/en-us/library/system.servicemodel.faultexception(v=vs.110).aspx
Utilisation d&amp;rsquo;un framework de journalisation des erreurs personnalisé # Il est parfois utile d&amp;rsquo;intégrer une infrastructure de journalisation des erreurs personnalisée pour s&amp;rsquo;assurer que toutes les exceptions sont consignées.
[ServiceContract] [ErrorHandler] public interface IMyService { } [AttributeUsage(AttributeTargets.Interface)] public class CustomErrorHandler : Attribute, IContractBehavior, IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) { return; } //my custom logging framework } public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) { dispatchRuntime.</description>
    </item>
    
    <item>
      <title>Comment désactiveractiver le traçage WCF dans le code d&#39;application C#</title>
      <link>https://www.wikiod.com/fr/wcf/comment-desactiveractiver-le-tracage-wcf-dans-le-code-dapplication-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/comment-desactiveractiver-le-tracage-wcf-dans-le-code-dapplication-c/</guid>
      <description>One way : utilisez un écouteur personnalisé défini dans votre code C# # Il m&amp;rsquo;a fallu un certain temps pour bien faire les choses, alors j&amp;rsquo;ai décidé de partager une solution car cela pourrait épargner à quelqu&amp;rsquo;un d&amp;rsquo;autre plusieurs jours d&amp;rsquo;essais et d&amp;rsquo;erreurs.
Le problème : je veux pouvoir activer/désactiver le suivi WCF dans mon application C# .NET et choisir le nom du fichier de sortie de suivi. Je ne veux pas que les utilisateurs modifient le fichier .</description>
    </item>
    
    <item>
      <title>DataContractSerializer est un sérialiseur Opt-In et Opt-Out.</title>
      <link>https://www.wikiod.com/fr/wcf/datacontractserializer-est-un-serialiseur-opt-in-et-opt-out/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fr/wcf/datacontractserializer-est-un-serialiseur-opt-in-et-opt-out/</guid>
      <description>en fait, c&amp;rsquo;est si simple : l&amp;rsquo;approche Opt-In indique que les propriétés considérées comme faisant partie de DataContract doivent être explicitement marquées, sinon elles seront ignorées, tandis que Opt-Out signifie que toutes les propriétés seront supposées faire partie de DataContract à moins qu&amp;rsquo;elles ne soient explicitement marquées.
Qu&amp;rsquo;est-ce que l&amp;rsquo;opt in serializer # /// &amp;lt;summary&amp;gt; /// Defines a student. /// &amp;lt;/summary&amp;gt; [DataContract] public class Student { /// &amp;lt;summary&amp;gt; /// Gets or sets the student number.</description>
    </item>
    
  </channel>
</rss>

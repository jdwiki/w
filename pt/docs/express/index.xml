<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial expresso on </title>
    <link>https://www.wikiod.com/pt/docs/express/</link>
    <description>Recent content in tutorial expresso on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao expresso</title>
      <link>https://www.wikiod.com/pt/express/introducao-ao-expresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/introducao-ao-expresso/</guid>
      <description>Aplicativo Hello World, usando ExpressJS 4 e Node &amp;gt;= 4 # Prefácio # Você precisará de node &amp;gt;= 4 e express 4 para este projeto. Você pode obter a distribuição mais recente do node em sua página de download.
Antes deste tutorial, você deve inicializar seu projeto de nó executando
$ npm init a partir da linha de comando e preenchendo as informações desejadas. Observe que você pode alterar as informações a qualquer momento editando o arquivo package.</description>
    </item>
    
    <item>
      <title>Manipulação de erros</title>
      <link>https://www.wikiod.com/pt/express/manipulacao-de-erros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/manipulacao-de-erros/</guid>
      <description>Sintaxe # app.use(function(err, req, res, next) {}) // Middleware básico Parâmetros # Nome Descrição err Objeto com informações de erro req Objeto de solicitação HTTP res Objeto de resposta HTTP próximo função usada para iniciar a próxima execução de middleware Amostra básica # Ao contrário de outras funções de middleware, as funções de middleware de tratamento de erros têm quatro argumentos em vez de três: (err, req, res, next).
Amostra:</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/express/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/roteamento/</guid>
      <description>Roteamento Olá Mundo # O arquivo de aplicativo principal carrega o arquivo de rotas onde as rotas são definidas.
app.js
var express = require(&#39;express&#39;); var app = express(); app.use(&#39;/&#39;, require(&#39;./routes&#39;)); app.listen(&#39;3000&#39;); route.js
var router = require(&#39;express&#39;).Router(); router.get(&#39;/&#39;, function(req, res) { res.send(&#39;Hello World!&#39;); }); module.exports = router; Rotas múltiplas # O arquivo de aplicativo principal carrega todos os arquivos de rotas nos quais você gostaria de definir rotas. Para isso, precisamos da seguinte estrutura de diretórios: app.</description>
    </item>
    
    <item>
      <title>Exibir configuração do mecanismo</title>
      <link>https://www.wikiod.com/pt/express/exibir-configuracao-do-mecanismo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/exibir-configuracao-do-mecanismo/</guid>
      <description>Muitas vezes, o servidor precisa servir as páginas dinamicamente. Por exemplo, um usuário Mr.X visita a página e vê algo como &amp;ldquo;Bem-vindo Mr. X à minha página inicial&amp;rdquo;. Nesse caso, as visualizações podem ser úteis. seja útil. Variáveis ​​podem ser injetadas em HTML dinamicamente usando view engine.View engine é algo que renderiza as views.Pode-se manter views a serem servidas em uma pasta chamada view e servir mediante solicitação .O caminho da pasta pode ser mostrado para Express usando path.</description>
    </item>
    
    <item>
      <title>gerador expresso</title>
      <link>https://www.wikiod.com/pt/express/gerador-expresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/gerador-expresso/</guid>
      <description>Parâmetros # Parâmetro Definição -h, &amp;ndash;ajuda informações de uso de saída -V, &amp;ndash;versão emita o número da versão -e, &amp;ndash;ejs adicionar suporte ao mecanismo de modelagem de pjs (JavaScript incorporado) (o padrão é jade, que foi renomeado para Pug) &amp;ndash;hbs adicionar suporte ao mecanismo de modelagem de guidão -H, &amp;ndash;hogan adicionar suporte ao mecanismo hogan.js &amp;ndash;git adicionar .gitignore -f, &amp;ndash;força force no diretório não vazio -c &amp;lt;motor&amp;gt;, &amp;ndash;css &amp;lt;motor&amp;gt; adicionar suporte a folha de estilo &amp;lt;engine&amp;gt; (menos, caneta, bússola, sass) (o padrão é css) O gerador expresso é uma ótima ferramenta para colocar um projeto em funcionamento rapidamente.</description>
    </item>
    
    <item>
      <title>Manipulando arquivos estáticos</title>
      <link>https://www.wikiod.com/pt/express/manipulando-arquivos-estaticos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/manipulando-arquivos-estaticos/</guid>
      <description>Sintaxe # Para servir arquivos estáticos (Imagens, CSS, arquivos JS, etc.) use a função de middleware express.static. Passe o nome do diretório que contém os ativos para express.static para servir os arquivos diretamente. (Veja o Exemplo Básico) Você pode usar vários diretórios, basta chamar o express.static várias vezes. Lembre-se, o Express procura os arquivos na ordem em que você define os diretórios com express.static. (Veja o Exemplo de vários diretórios) Você pode criar um prefixo de caminho virtual (ou seja, um onde o caminho não existe realmente no sistema de arquivos) com express.</description>
    </item>
    
    <item>
      <title>Conectar</title>
      <link>https://www.wikiod.com/pt/express/conectar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/conectar/</guid>
      <description>Conecte-se e Expresse # O Express é baseado no Connect, que é o que fornece a funcionalidade de middleware do Express. Para entender o que é conectar, você pode ver que ele fornece a estrutura básica do aplicativo que você usa quando usa o express
const connect = require(&#39;connect&#39;) const app = connect() app.listen(3000) Isso abrirá um servidor http &amp;ldquo;vazio&amp;rdquo; que responderá 404 a todas as solicitações.
Middleware # O middleware é anexado ao objeto do aplicativo, geralmente antes que o listen seja chamado.</description>
    </item>
    
    <item>
      <title>Integração Expressa de Banco de Dados</title>
      <link>https://www.wikiod.com/pt/express/integracao-expressa-de-banco-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/integracao-expressa-de-banco-de-dados/</guid>
      <description>Conecte-se ao MongoDB com Node &amp;amp; Express # Primeiro, certifique-se de ter instalado mongodb e express via npm. Em seguida, em um arquivo convencionalmente intitulado db.js, use o seguinte código:
var MongoClient = require(&#39;mongodb&#39;).MongoClient var state = { db: null, } exports.connect = function(url, done) { if (state.db) return done() MongoClient.connect(url, function(err, db) { if(err) return done(err) state.db = db done() }) } exports.get = function() { return state.db } exports.</description>
    </item>
    
    <item>
      <title>Escrevendo Middleware Expresso</title>
      <link>https://www.wikiod.com/pt/express/escrevendo-middleware-expresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/escrevendo-middleware-expresso/</guid>
      <description>Sintaxe # Especifique a instância do express que deseja usar. Isso geralmente é app. Defina o método HTTP ao qual a função se aplica. No exemplo, isso é get. Defina o caminho ao qual a função se aplica. No exemplo, isso é &amp;rsquo;/&amp;rsquo;. Defina como uma função com a palavra-chave function. Adicione os parâmetros necessários: req, res, next. (Veja nota na seção de comentários) Coloque algum código na função para fazer o que quiser Parâmetros # Parâmetro Detalhes req O objeto de solicitação.</description>
    </item>
    
    <item>
      <title>Explicar o roteamento no expresso</title>
      <link>https://www.wikiod.com/pt/express/explicar-o-roteamento-no-expresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/express/explicar-o-roteamento-no-expresso/</guid>
      <description>Manipuladores de rotas encadeados para um caminho de rota usando app.route # var express = require(&#39;express&#39;); var app = express(); var router = express.Router(); app.route(&#39;/user&#39;) .get(function (req, res) { res.send(&#39;Get a random user&#39;) }) .post(function (req, res) { res.send(&#39;Add a user&#39;) }) .put(function (req, res) { res.send(&#39;Update the user details&#39;) }) .delete(function (req, res) { res.send(&#39;Delete a user&#39;) }); Roteador Expresso # O roteador expresso permite que você crie vários &amp;ldquo;mini aplicativos&amp;rdquo; para que você possa namespace sua api, public, auth e outras rotas em sistemas de roteamento separados.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial da linguagem Ruby on </title>
    <link>https://www.wikiod.com/pt/docs/ruby/</link>
    <description>Recent content in Tutorial da linguagem Ruby on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com a linguagem Ruby</title>
      <link>https://www.wikiod.com/pt/ruby/comecando-com-a-linguagem-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/comecando-com-a-linguagem-ruby/</guid>
      <description>Olá Mundo # Este exemplo assume que o Ruby está instalado.
Coloque o seguinte em um arquivo chamado hello.rb:
puts &#39;Hello World&#39; Na linha de comando, digite o seguinte comando para executar o código Ruby do arquivo de origem:
$ ruby hello.rb Isso deve gerar:
Hello World A saída será exibida imediatamente no console. Arquivos fonte Ruby não precisam ser compilados antes de serem executados. O interpretador Ruby compila e executa o arquivo Ruby em tempo de execução.</description>
    </item>
    
    <item>
      <title>Hashes</title>
      <link>https://www.wikiod.com/pt/ruby/hashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/hashes/</guid>
      <description>Um Hash é uma coleção semelhante a um dicionário de chaves exclusivas e seus valores. Também chamados de arrays associativos, eles são semelhantes aos Arrays, mas onde um Array usa inteiros como seu índice, um Hash permite que você use qualquer tipo de objeto. Você recupera ou cria uma nova entrada em um Hash consultando sua chave.
Sintaxe # { first_name: &amp;ldquo;Noel&amp;rdquo;, second_name: &amp;ldquo;Edmonds&amp;rdquo; }
{ :first_name =&amp;gt; &amp;ldquo;Noel&amp;rdquo;, :second_name =&amp;gt; &amp;ldquo;Edmonds&amp;rdquo; }</description>
    </item>
    
    <item>
      <title>Controle de fluxo</title>
      <link>https://www.wikiod.com/pt/ruby/controle-de-fluxo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/controle-de-fluxo/</guid>
      <description>if, elsif, else e fim # Ruby oferece as expressões esperadas if e else para lógica de ramificação, terminadas pela palavra-chave end:
# Simulate flipping a coin result = [:heads, :tails].sample if result == :heads puts &#39;The coin-toss came up &amp;quot;heads&amp;quot;&#39; else puts &#39;The coin-toss came up &amp;quot;tails&amp;quot;&#39; end Em Ruby, instruções if são expressões que avaliam um valor, e o resultado pode ser atribuído a uma variável:
status = if age &amp;lt; 18 :minor else :adult end Ruby também oferece operadores ternários no estilo C ([veja aqui para detalhes][1]) que podem ser expressos como:</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/ruby/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/matrizes/</guid>
      <description>Sintaxe # a = [] # usando literal de array a = Array.new # equivalente a usar literal a = Array.new(5) # cria um array com 5 elementos com valor nil. a = Array.new(5, 0) # cria um array com 5 elementos com valor padrão de 0. Criar array de strings # Arrays de strings podem ser criados usando a sintaxe percent string do ruby:
array = %w(one two three four) Isso é funcionalmente equivalente a definir a matriz como:</description>
    </item>
    
    <item>
      <title>Blocos e Procs e Lambdas</title>
      <link>https://www.wikiod.com/pt/ruby/blocos-e-procs-e-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/blocos-e-procs-e-lambdas/</guid>
      <description>Sintaxe # Proc.new(block) lambda { |args| código } -&amp;gt;(arg1, arg2) { código } object.to_proc { |arg_único| código } do |arg, (chave, valor)| code fim Tenha cuidado com a precedência do operador quando tiver uma linha com vários métodos encadeados, como:
str = &amp;quot;abcdefg&amp;quot; puts str.gsub(/./) do |match| rand(2).zero? ? match.upcase : match.downcase end Em vez de imprimir algo como abCDeFg, como você esperaria, ele imprime algo como #&amp;lt;Enumerator:0x00000000af42b28&amp;gt; &amp;ndash; isso ocorre porque do .</description>
    </item>
    
    <item>
      <title>Padrões de design e expressões idiomáticas em Ruby</title>
      <link>https://www.wikiod.com/pt/ruby/padroes-de-design-e-expressoes-idiomaticas-em-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/padroes-de-design-e-expressoes-idiomaticas-em-ruby/</guid>
      <description>Padrão de decorador # O padrão Decorator adiciona comportamento a objetos sem afetar outros objetos da mesma classe. O padrão decorador é uma alternativa útil para criar subclasses.
Crie um módulo para cada decorador. Essa abordagem é mais flexível do que a herança porque você pode misturar e combinar responsabilidades em mais combinações. Além disso, como a transparência permite que os decoradores sejam aninhados recursivamente, ela permite um número ilimitado de responsabilidades.</description>
    </item>
    
    <item>
      <title>Aulas</title>
      <link>https://www.wikiod.com/pt/ruby/aulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/aulas/</guid>
      <description>Sintaxe # nome da classe #algum código descrevendo o comportamento da classe fim Nomes de classe em Ruby são Constantes, então a primeira letra deve ser maiúscula.
class Cat # correct end class dog # wrong, throws an error end Construtor # Uma classe pode ter apenas um construtor, que é um método chamado initialize. O método é invocado automaticamente quando uma nova instância da classe é criada.
class Customer def initialize(name) @name = name.</description>
    </item>
    
    <item>
      <title>Exceções</title>
      <link>https://www.wikiod.com/pt/ruby/excecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/excecoes/</guid>
      <description>Uma exceção é um objeto que representa a ocorrência de uma condição excepcional. Em outras palavras, indica que algo deu errado.
Em Ruby, exceções são frequentemente chamadas de erros. Isso ocorre porque a classe base Exception existe como um elemento de objeto de exceção de nível superior, mas as exceções de execução definidas pelo usuário geralmente são StandardError ou descendentes.
Criando um tipo de exceção personalizado # Uma exceção personalizada é qualquer classe que estenda Exception ou uma subclasse de Exception.</description>
    </item>
    
    <item>
      <title>Métodos</title>
      <link>https://www.wikiod.com/pt/ruby/metodos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/metodos/</guid>
      <description>Funções em Ruby fornecem código organizado e reutilizável para realizar um conjunto de ações. As funções simplificam o processo de codificação, evitam lógica redundante e tornam o código mais fácil de seguir. Este tópico descreve a declaração e utilização de funções, argumentos, parâmetros, declarações de rendimento e escopo em Ruby.
Um método é um bloco de código nomeado, associado a um ou mais objetos e geralmente identificado por uma lista de parâmetros além do nome.</description>
    </item>
    
    <item>
      <title>Uso de gemas</title>
      <link>https://www.wikiod.com/pt/ruby/uso-de-gemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby/uso-de-gemas/</guid>
      <description>Instalando gemas de rubi # Este guia pressupõe que você já tenha o Ruby instalado. Se você estiver usando Ruby &amp;lt; 1.9, você terá que instalar RubyGems manualmente, pois não será incluído nativamente.
Para instalar uma gem ruby, digite o comando:
gem install [gemname] Se você estiver trabalhando em um projeto com uma lista de dependências de gem, elas serão listadas em um arquivo chamado Gemfile. Para instalar uma nova gem no projeto, adicione a seguinte linha de código no Gemfile:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial PHP on </title>
    <link>https://www.wikiod.com/pt/docs/php/</link>
    <description>Recent content in Tutorial PHP on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com PHP</title>
      <link>https://www.wikiod.com/pt/php/comecando-com-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/comecando-com-php/</guid>
      <description>Saída HTML do servidor web # PHP pode ser usado para adicionar conteúdo a arquivos HTML. Enquanto o HTML é processado diretamente por um navegador da Web, os scripts PHP são executados por um servidor da Web e o HTML resultante é enviado ao navegador.
A marcação HTML a seguir contém uma instrução PHP que adicionará Hello World! à saída:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;PHP!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;&amp;lt;?php echo &amp;quot;Hello world!</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/pt/php/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/json/</guid>
      <description>JSON (JavaScript Object Notation) é uma maneira independente de plataforma e linguagem de serializar objetos em texto simples. Como é frequentemente usado na web e PHP também, existe uma extensão básica para trabalhar com JSON em PHP.
Sintaxe # string json_encode ( $ valor misto [, int $ opções = 0 [, int $ profundidade = 512 ]] ) json_decode misto ( string $ json [, bool $ assoc = false [, int $ depth = 512 [, int $ options = 0 ]]] ) Parâmetros # Parâmetro Detalhes json_encode - valor O valor que está sendo codificado.</description>
    </item>
    
    <item>
      <title>Variáveis</title>
      <link>https://www.wikiod.com/pt/php/variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/variaveis/</guid>
      <description>Sintaxe # $variável = &amp;lsquo;valor&amp;rsquo;; // Atribui variável geral $objeto-&amp;gt;propriedade = &amp;lsquo;valor&amp;rsquo;; // Atribui uma propriedade de objeto ClassName::$propriedade = &amp;lsquo;valor&amp;rsquo;; // Atribui uma propriedade de classe estática $array[0] = &amp;lsquo;valor&amp;rsquo;; // Atribui um valor a um índice de um array $array[] = &amp;lsquo;valor&amp;rsquo;; // Empurra um item no final de um array $array[&amp;lsquo;chave&amp;rsquo;] = &amp;lsquo;valor&amp;rsquo;; // Atribui um valor de array echo $variável; // Echo (imprime) um valor de variável alguma_função($variável); // Usa a variável como parâmetro da função unset($variável); //Desmarca uma variável $$variável = &amp;lsquo;valor&amp;rsquo;; // Atribui a uma variável variável isset($variável); // Verifica se uma variável está definida ou não vazio($variável); // Verifica se uma variável está vazia ou não Verificação de tipos # Algumas das documentações sobre variáveis ​​e tipos mencionam que o PHP não usa digitação estática.</description>
    </item>
    
    <item>
      <title>Classes e objetos</title>
      <link>https://www.wikiod.com/pt/php/classes-e-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/classes-e-objetos/</guid>
      <description>Classes e objetos são usados ​​para tornar seu código mais eficiente e menos repetitivo agrupando tarefas semelhantes.
Uma classe é usada para definir as ações e a estrutura de dados usada para construir objetos. Os objetos são então construídos usando essa estrutura predefinida.
Sintaxe # class &amp;lt;ClassName&amp;gt; [ estende &amp;lt;ParentClassName&amp;gt; ] [ implementa &amp;lt;Interface1&amp;gt; [, &amp;lt;Interface2&amp;gt;, ... ] { } // Declaração de classe interface &amp;lt;InterfaceName&amp;gt; [ estende &amp;lt;ParentInterface1&amp;gt; [, &amp;lt;ParentInterface2&amp;gt;, .</description>
    </item>
    
    <item>
      <title>DOP</title>
      <link>https://www.wikiod.com/pt/php/dop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/dop/</guid>
      <description>A extensão PDO (PHP Data Objects) permite que os desenvolvedores se conectem a vários tipos diferentes de bancos de dados e executem consultas neles de forma uniforme e orientada a objetos. maneiras.
Sintaxe # PDO::LastInsertId() PDO::LastInsertId($columnName) // alguns drivers precisam do nome da coluna Aviso Não deixe de verificar as exceções ao usar lastInsertId(). Ele pode lançar o seguinte erro:
SQLSTATE IM001: Driver não suporta esta função
Aqui está como você deve verificar corretamente as exceções usando este método:</description>
    </item>
    
    <item>
      <title>Saída do valor de uma variável</title>
      <link>https://www.wikiod.com/pt/php/saida-do-valor-de-uma-variavel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/saida-do-valor-de-uma-variavel/</guid>
      <description>Para construir um programa PHP dinâmico e interativo, é útil gerar variáveis ​​de saída e seus valores. A linguagem PHP permite vários métodos de saída de valor. Este tópico aborda os métodos padrão de impressão de um valor em PHP e onde esses métodos podem ser usados.
Variáveis ​​em PHP vêm em uma variedade de tipos. Dependendo do caso de uso, você pode querer enviá-los para o navegador como HTML renderizado, enviá-los para depuração ou enviá-los para o terminal (se estiver executando um aplicativo por meio da linha de comando).</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/php/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/matrizes/</guid>
      <description>Um array é uma estrutura de dados que armazena um número arbitrário de valores em um único valor. Um array em PHP é na verdade um mapa ordenado, onde map é um tipo que associa valores a chaves.
Sintaxe # $array = array(&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, &amp;lsquo;Valor3&amp;rsquo;); // Chaves padrão para 0, 1, 2, &amp;hellip;, $array = array(&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, ); // Vírgula final opcional $array = array(&amp;lsquo;chave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;chave2&amp;rsquo; =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;, ); // Chaves explícitas $array = array(&amp;lsquo;chave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, ); // Array ( [&amp;lsquo;key1&amp;rsquo;] =&amp;gt; Valor1 1 =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;) $array = [&amp;lsquo;chave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;chave2&amp;rsquo; =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;, ]; // PHP 5.</description>
    </item>
    
    <item>
      <title>Segurança</title>
      <link>https://www.wikiod.com/pt/php/seguranca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/seguranca/</guid>
      <description>Como a maioria dos sites roda em PHP, a segurança do aplicativo é um tópico importante para os desenvolvedores PHP protegerem seu site, dados e clientes. Este tópico abrange as melhores práticas de segurança em PHP, bem como vulnerabilidades e pontos fracos comuns com correções de exemplo em PHP.
Veja também
Evitando injeção de SQL com consultas parametrizadas em PDO Declarações preparadas em mysqli Projeto de Segurança de Aplicativos da Web Abertos (OWASP) 1: https://www.</description>
    </item>
    
    <item>
      <title>Características</title>
      <link>https://www.wikiod.com/pt/php/caracteristicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/caracteristicas/</guid>
      <description>Características para facilitar a reutilização de código horizontal # Digamos que temos uma interface para registro:
interface Logger { function log($message); } Agora digamos que temos duas implementações concretas da interface Logger: o FileLogger e o ConsoleLogger.
class FileLogger implements Logger { public function log($message) { // Append log message to some file } } class ConsoleLogger implements Logger { public function log($message) { // Log message to the console } } Agora, se você definir alguma outra classe Foo que você também deseja executar tarefas de log, você pode fazer algo assim:</description>
    </item>
    
    <item>
      <title>Injeção de dependência</title>
      <link>https://www.wikiod.com/pt/php/injecao-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/php/injecao-de-dependencia/</guid>
      <description>Injeção de dependência (DI) é um termo chique para &amp;ldquo;passar coisas&amp;rdquo;. Tudo o que realmente significa é passar as dependências de um objeto através do construtor e/ou setters em vez de criá-las na criação do objeto dentro do objeto.
A injeção de dependência também pode se referir a contêineres de injeção de dependência que automatizam a construção e a injeção.
Injeção de Construtor # Os objetos geralmente dependem de outros objetos.</description>
    </item>
    
  </channel>
</rss>

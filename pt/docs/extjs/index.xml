<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial extjs on </title>
    <link>https://www.wikiod.com/pt/docs/extjs/</link>
    <description>Recent content in tutorial extjs on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/extjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com extjs</title>
      <link>https://www.wikiod.com/pt/extjs/comecando-com-extjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/extjs/comecando-com-extjs/</guid>
      <description>Criando um aplicativo Hello World – Via Sencha Cmd # Instalação e configuração # O uso típico do ExtJS aproveita a estrutura para criar aplicativos ricos de página única (RIA). A maneira mais simples de começar é usar Sencha Cmd, uma ferramenta de compilação CLI que cobre a maioria das preocupações gerais em um ciclo de vida de implantação, principalmente:
gerenciamento de pacotes e dependências compilação / agrupamento e minificação de código gerenciamento de estratégias de construção para diferentes alvos e plataformas » Baixe o Sencha Cmd</description>
    </item>
    
    <item>
      <title>MVC  MVVM - Arquitetura de aplicativos</title>
      <link>https://www.wikiod.com/pt/extjs/mvc--mvvm---arquitetura-de-aplicativos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/extjs/mvc--mvvm---arquitetura-de-aplicativos/</guid>
      <description>Introdução aos modelos # Um modelo representa algum objeto de dados em um aplicativo. Por exemplo, você pode ter um modelo como: Fruit, Car, Building, etc. em sua aplicação. Os modelos são normalmente usados ​​pelas lojas. Aqui está um exemplo de como você definiria uma nova classe de modelo. por exemplo.
Ext.define(&#39;MyApp.model.Person&#39;, { extend: &#39;Ext.data.Model&#39;, fields: [ {name: &#39;name&#39;, type: &#39;string&#39;}, {name: &#39;surname&#39;, type: &#39;string&#39;}, {name: &#39;age&#39;, type: &#39;int&#39;} ], getFullName: function() { return this.</description>
    </item>
    
    <item>
      <title>Armadilhas comuns e práticas recomendadas</title>
      <link>https://www.wikiod.com/pt/extjs/armadilhas-comuns-e-praticas-recomendadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/extjs/armadilhas-comuns-e-praticas-recomendadas/</guid>
      <description>Estender vs substituir # Substituições: # Substituir arquivo:
Ext.define(&#39;MyApp.override.CornField&#39;, override: &#39;Ext.form.field.Text&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Use no aplicativo:
{ xtype: &#39;textfield&#39; } Extensões: # Substituir arquivo:
Ext.define(&#39;MyApp.form.field.CornField&#39;, extend: &#39;Ext.form.field.Text&#39;, alias: &#39;widget.cornfield&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Use no aplicativo:
{ xtype: &#39;cornfield&#39; } Explicação # O ExtJS fornece duas maneiras principais de alterar o comportamento das classes existentes: estendendo-as e substituindo-as. Cada um tem benefícios e armadilhas que devem ser considerados antes de usá-los.</description>
    </item>
    
    <item>
      <title>ExtJS AJAX</title>
      <link>https://www.wikiod.com/pt/extjs/extjs-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/extjs/extjs-ajax/</guid>
      <description>Uma instância singleton de uma classe Ext.data.Connection. Esta classe é usada para se comunicar com o lado do servidor.
Solicitação básica # Algumas das propriedades da classe Ext.Data.Connection
Propriedades Detalhes url Endereço do pedido tempo limite Tempo de espera em milissegundos sucesso Retorno do sucesso fracasso Retorno em caso de falha Ext.Ajax.on(&amp;quot;beforerequest&amp;quot;, function(conn , options , eOpts) { console.log(&amp;quot;beforerequest&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestcomplete&amp;quot;, function(conn , response , options , eOpts) { console.log(&amp;quot;requestcomplete&amp;quot;); }); Ext.</description>
    </item>
    
    <item>
      <title>Modelo de evento</title>
      <link>https://www.wikiod.com/pt/extjs/modelo-de-evento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/extjs/modelo-de-evento/</guid>
      <description>O ExtJS defende o uso de disparo e escuta de eventos entre classes. Ao disparar eventos e ouvir eventos disparados, as classes não exigem conhecimento &amp;lsquo;sujo&amp;rsquo; da estrutura de classes umas das outras e evitam o acoplamento de código. Além disso, os eventos facilitam a escuta de várias instâncias do mesmo componente, permitindo um ouvinte genérico para todos os objetos com o mesmo seletor. Finalmente, outras classes também podem fazer uso de eventos que já existem.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial arduíno on </title>
    <link>https://www.wikiod.com/pt/docs/arduino/</link>
    <description>Recent content in tutorial arduíno on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao arduino</title>
      <link>https://www.wikiod.com/pt/arduino/introducao-ao-arduino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/introducao-ao-arduino/</guid>
      <description>Apenas o mínimo # Aqui está o esboço do Arduino &amp;lsquo;mínimo&amp;rsquo;. Isso pode ser carregado no Arduino IDE escolhendo File &amp;gt; Examples &amp;gt; 01. Basics &amp;gt; Bare Minimum.
void setup() { // put your setup code here, to run once } void loop() { // put your main code here, to run repeatedly } O código na função setup() será executado uma vez quando o programa for iniciado. Isso é útil para configurar pinos de E/S, inicializar variáveis, etc.</description>
    </item>
    
    <item>
      <title>PWM - Modulação de largura de pulso</title>
      <link>https://www.wikiod.com/pt/arduino/pwm---modulacao-de-largura-de-pulso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/pwm---modulacao-de-largura-de-pulso/</guid>
      <description>Controle um motor DC através da porta Serial usando PWM # Neste exemplo pretendemos realizar uma das tarefas mais comuns: Tenho um pequeno motor DC por aí, como uso meu Arduino para controlá-lo? Fácil, com PWM e comunicação serial, usando a função analogWrite() e a biblioteca Serial.
O básico # Pulse Width Modulation ou PWM para abreviar é uma técnica para imitar sinais analógicos usando saída digital. Como é que isso funciona?</description>
    </item>
    
    <item>
      <title>Usando Arduino com Atmel Studio 7</title>
      <link>https://www.wikiod.com/pt/arduino/usando-arduino-com-atmel-studio-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/usando-arduino-com-atmel-studio-7/</guid>
      <description>Configurar # Baixe e instale o Atmel Studio 7 de aqui. Compre um depurador. Você pode se dar bem com um programador ISP, mas se quiser recursos de depuração, que é uma das grandes vantagens de usar o Atmel Studio, você precisará de um depurador. Eu recomendo o Atmel ICE, pois ele fornece recursos de depuração para arduinos baseados em AVR (como o Uno, pro mini, etc) e os Arduinos baseados em ARM, como o Zero e o Due.</description>
    </item>
    
    <item>
      <title>Comunicação SPI</title>
      <link>https://www.wikiod.com/pt/arduino/comunicacao-spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/comunicacao-spi/</guid>
      <description>Sinais de seleção de chip # A maioria dos escravos tem uma entrada ativa de seleção de chip baixo. Portanto, o código adequado para inicializar e usar um pino de seleção de chip é este:
#define CSPIN 1 // or whatever else your CS pin is // init: pinMode(CSPIN, OUTPUT); digitalWrite(CSPIN, 1); // deselect // use: digitalWrite(CSPIN, 0); // select ... perform data transfer ... digitalWrite(CSPIN, 1); // deselect Desmarcar um escravo é tão importante quanto selecioná-lo, pois um escravo pode conduzir a linha MISO enquanto estiver selecionado.</description>
    </item>
    
    <item>
      <title>Pinos de hardware</title>
      <link>https://www.wikiod.com/pt/arduino/pinos-de-hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/pinos-de-hardware/</guid>
      <description>Arduino Uno R3 # Microcontroladores usam pinos para interagir com o resto do circuito. Esses pinos geralmente serão um dos pinos de entrada / saída, vin ou terra. Os pinos de E/S podem ser pinos de E/S digitais simples, ou podem ter algumas características especiais, como poder variar a tensão de sua saída usando modulação por largura de pulso. Aqui está um esquema do Arduino R3 Uno e seus pinos.</description>
    </item>
    
    <item>
      <title>Comunicação em série</title>
      <link>https://www.wikiod.com/pt/arduino/comunicacao-em-serie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/comunicacao-em-serie/</guid>
      <description>Sintaxe # Serial.begin(speed) // Abre a porta serial na taxa de transmissão especificada Serial.begin(velocidade, configuração) Serial[1-3].begin(speed) // Arduino Mega apenas! Ao escrever 1-3 significa que você pode escolher entre os números de 1 a 3 ao escolher a porta serial. Serial[1-3].begin(speed, config) // Somente Arduino Mega! Ao escrever 1-3 significa que você pode escolher entre os números de 1 a 3 ao escolher a porta serial. Serial.peek() // Lê o próximo byte de entrada sem removê-lo do buffer Serial.</description>
    </item>
    
    <item>
      <title>Como o Python se integra ao Arduino Uno</title>
      <link>https://www.wikiod.com/pt/arduino/como-o-python-se-integra-ao-arduino-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/como-o-python-se-integra-ao-arduino-uno/</guid>
      <description>Sintaxe # Serial.begin(baudrate) // Define a taxa de transmissão (bits por segundo) para transmissão de dados serial Serial.println(value) // Imprime dados para a porta serial seguido por Carriage Return \r e caractere de nova linha \n serial.Serial((port=None, baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE, stopbits=STOPBITS_ONE, timeout=Nenhum, xonxoff=False, rtscts=False, write_timeout=Nenhum, dsrdtr=False, inter_byte_timeout=Nenhum ) // Inicializa a porta serial com todos os parâmetros serial.readline() // Ler dados seriais que contém Carriage Return \r e caractere Newline \n Parâmetros # Parâmetro Detalhes série pacote Python contém classes e métodos para acessar a porta serial tempo pacote Python inclui funções relacionadas ao tempo Eu uso um Arduino Uno com Arduino IDE 1.</description>
    </item>
    
    <item>
      <title>Gerenciamento de tempo</title>
      <link>https://www.wikiod.com/pt/arduino/gerenciamento-de-tempo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/gerenciamento-de-tempo/</guid>
      <description>Sintaxe # millis longo não assinado ()
micros longos não assinados()
atraso nulo (longos milissegundos não assinados)
void delayMicroseconds (microssegundos longos não assinados)
Veja o cabeçalho elapsedMillis para construtores e operadores dessa classe. Resumidamente:
elapsedMillis elapsedMillisObject; cria um objeto para acompanhar o tempo desde que foi criado ou desde algum outro ponto definido explicitamente no tempo
decorridoMillisObject = 0; redefinir o tempo rastreado pelo objeto para &amp;ldquo;desde agora&amp;rdquo;
deltaT longo sem sinal = elapsedMillisObject; vamos ver o tempo rastreado</description>
    </item>
    
    <item>
      <title>Como armazenar variáveis ​​em EEPROM e usá-las para armazenamento permanente</title>
      <link>https://www.wikiod.com/pt/arduino/como-armazenar-variaveis-em-eeprom-e-usa-las-para-armazenamento-permanente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/como-armazenar-variaveis-em-eeprom-e-usa-las-para-armazenamento-permanente/</guid>
      <description>Sintaxe # EEPROM.write(endereço, valor); //(Armazena as variáveis ​​na EEPROM em um endereço particular) EEPROM.read(endereço); //(Recuperar valores da EEPROM e ler os dados armazenados na EEPROM) Parâmetros # Parâmetros de EEPROM.write Detalhe endereço O endereço onde o valor deve ser armazenado na EEPROM valor Variável principal a armazenar na EEPROM. Observe que este é um uint_8 (byte único)—você mesmo deve dividir os tipos de dados de vários bytes em bytes únicos. Ou você pode usar EEPROM.</description>
    </item>
    
    <item>
      <title>Comunicação Bluetooth</title>
      <link>https://www.wikiod.com/pt/arduino/comunicacao-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/arduino/comunicacao-bluetooth/</guid>
      <description>Parâmetros # método detalhes SoftwareSerial.h Documentação SoftwareSerial(rxPin, txPin, inverse_logic) Construtor. rxPin: Pino de entrada (recebimento) de dados, padrão 0. txPin: Pino de saída (transmissão) de dados, padrão 1. inverse_logic: Se verdadeiro, trata BAIXO como se fosse ALTO e HIGH como LOW ao determinar valores de bit. o padrão é falso. começar(velocidade) Define a taxa de transmissão para comunicação serial. As taxas de transmissão suportadas são 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 31250, 38400, 57600 e 115200.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numpy tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/numpy/</link>
    <description>Recent content in numpy tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/numpy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com numpy</title>
      <link>https://www.wikiod.com/pt/numpy/comecando-com-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/comecando-com-numpy/</guid>
      <description>Importação básica # Importe o módulo numpy para usar qualquer parte dele.
import numpy as np A maioria dos exemplos usará np como abreviação de numpy. Suponha que &amp;ldquo;np&amp;rdquo; significa &amp;ldquo;numpy&amp;rdquo; em exemplos de código.
x = np.array([1,2,3,4]) Instalação no Linux # O NumPy está disponível nos repositórios padrão das distribuições Linux mais populares e pode ser instalado da mesma forma que os pacotes em uma distribuição Linux geralmente são instalados.</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/numpy/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/matrizes/</guid>
      <description>Arrays N-dimensionais ou ndarrays são o objeto principal do numpy usado para armazenar itens do mesmo tipo de dados. Eles fornecem uma estrutura de dados eficiente que é superior aos arrays comuns do Python.
Sempre que possível, expresse operações sobre dados em termos de matrizes e operações vetoriais. As operações vetoriais são executadas muito mais rápido do que o equivalente para loops
Acesso à matriz # A sintaxe da fatia é i:j:k onde i é o índice inicial (inclusive), j é o índice de parada (exclusivo) e k é o tamanho do passo.</description>
    </item>
    
    <item>
      <title>numpy.dot</title>
      <link>https://www.wikiod.com/pt/numpy/numpydot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/numpydot/</guid>
      <description>Sintaxe # numpy.dot(a, b, out=Nenhum) Parâmetros # Nome Detalhes um uma matriz numpy b uma matriz numpy fora uma matriz numpy numpy.dot
Retorna o produto escalar de a e b. Se aeb são ambos escalares ou ambos arrays 1-D, então um escalar é retornado; caso contrário, uma matriz é retornada. Se out é dado, então é devolvido.
Multiplicação da matriz # A multiplicação de matrizes pode ser feita de duas maneiras equivalentes com a função ponto.</description>
    </item>
    
    <item>
      <title>Gerando dados aleatórios</title>
      <link>https://www.wikiod.com/pt/numpy/gerando-dados-aleatorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/gerando-dados-aleatorios/</guid>
      <description>O módulo random do NumPy fornece métodos convenientes para gerar dados aleatórios com a forma e distribuição desejadas.
Aqui está a documentação oficial.
Gerando números aleatórios extraídos de distribuições específicas # Extrair amostras de uma distribuição normal (gaussiana)
# Generate 5 random numbers from a standard normal distribution # (mean = 0, standard deviation = 1) np.random.randn(5) # Out: array([-0.84423086, 0.70564081, -0.39878617, -0.82719653, -0.4157447 ]) # This result can also be achieved with the more general np.</description>
    </item>
    
    <item>
      <title>Álgebra linear com np.linalg</title>
      <link>https://www.wikiod.com/pt/numpy/algebra-linear-com-nplinalg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/algebra-linear-com-nplinalg/</guid>
      <description>A partir da versão 1.8, várias das rotinas em np.linalg podem operar em uma &amp;lsquo;pilha&amp;rsquo; de matrizes. Ou seja, a rotina pode calcular resultados para várias matrizes se elas estiverem empilhadas juntas. Por exemplo, A aqui é interpretado como duas matrizes 3 por 3 empilhadas:
np.random.seed(123) A = np.random.rand(2,3,3) b = np.random.rand(2,3) x = np.linalg.solve(A, b) print np.dot(A[0,:,:], x[0,:]) # array([ 0.53155137, 0.53182759, 0.63440096]) print b[0,:] # array([ 0.53155137, 0.53182759, 0.</description>
    </item>
    
    <item>
      <title>Regressão Linear Simples</title>
      <link>https://www.wikiod.com/pt/numpy/regressao-linear-simples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/regressao-linear-simples/</guid>
      <description>Ajustar uma linha (ou outra função) a um conjunto de pontos de dados.
Usando np.polyfit # Criamos um conjunto de dados que ajustamos com uma linha reta $f(x) = m x + c$.
npoints = 20 slope = 2 offset = 3 x = np.arange(npoints) y = slope * x + offset + np.random.normal(size=npoints) p = np.polyfit(x,y,1) # Last argument is degree of polynomial Para ver o que fizemos:
import matplotlib.</description>
    </item>
    
    <item>
      <title>numpy.cross</title>
      <link>https://www.wikiod.com/pt/numpy/numpycross/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/numpycross/</guid>
      <description>Sintaxe # numpy.cross(a, b) # produto cruzado de a e b (ou vetores em a e b) numpy.cross(a, b, axisa=-1) #produto cruzado de vetores em a com b, s.t. vetores em a são dispostos ao longo do eixo axisa numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1) # produtos cruzados de vetores em a e b, vetores de saída dispostos ao longo do eixo especificado por *axisc * numpy.cross(a, b, axis=None) # produtos cruzados de vetores em a e b, vetores em a, b e na saída disposta ao longo do eixo axis Parâmetros # Coluna Coluna a,b No uso mais simples, a e b são dois vetores de 2 ou 3 elementos.</description>
    </item>
    
    <item>
      <title>ES de arquivo com numpy</title>
      <link>https://www.wikiod.com/pt/numpy/es-de-arquivo-com-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/es-de-arquivo-com-numpy/</guid>
      <description>Carregando dados numéricos de arquivos de texto com estrutura consistente # A função np.loadtxt pode ser usada para ler arquivos do tipo csv:
# File: # # Col_1 Col_2 # 1, 1 # 2, 4 # 3, 9 np.loadtxt(&#39;/path/to/dir/csvlike.txt&#39;, delimiter=&#39;,&#39;, comments=&#39;#&#39;) # Output: # array([[ 1., 1.], # [ 2., 4.], # [ 3., 9.]]) O mesmo arquivo pode ser lido usando uma expressão regular com np.fromregex:
np.fromregex(&#39;/path/to/dir/csvlike.txt&#39;, r&#39;(\d+),\s(\d+)&#39;, np.int64) # Output: # array([[1, 1], # [2, 4], # [3, 9]]) Salvando e carregando arrays numpy usando arquivos binários # x = np.</description>
    </item>
    
    <item>
      <title>subclasse ndarray</title>
      <link>https://www.wikiod.com/pt/numpy/subclasse-ndarray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/subclasse-ndarray/</guid>
      <description>Sintaxe # def __array_prepare__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = None) -&amp;gt; ndarray: # chamado no caminho para um ufunc
def __array_wrap__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = None) -&amp;gt; ndarray: # chamado na saída de um ufunc
__array_priority__: int # usado para determinar qual argumento invocar os métodos acima quando um ufunc é chamado
def __array_finalize__(self, obj: ndarray): # chamado sempre que uma nova instância desta classe passa a existir, mesmo que isso aconteça por rotas diferentes de __new__</description>
    </item>
    
    <item>
      <title>Filtrando dados</title>
      <link>https://www.wikiod.com/pt/numpy/filtrando-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/numpy/filtrando-dados/</guid>
      <description>Filtrando dados com uma matriz booleana # Quando apenas um único argumento é fornecido para a função where do numpy, ele retorna os índices da matriz de entrada (a condição) que são avaliadas como verdadeiras (mesmo comportamento que numpy.nonzero). Isso pode ser usado para extrair os índices de uma matriz que satisfaçam uma determinada condição.
import numpy as np a = np.arange(20).reshape(2,10) # a = array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]) # Generate boolean array indicating which values in a are both greater than 7 and less than 13 condition = np.</description>
    </item>
    
  </channel>
</rss>

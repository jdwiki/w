<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial do kit de relógio on </title>
    <link>https://www.wikiod.com/pt/docs/watchkit/</link>
    <description>Recent content in tutorial do kit de relógio on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/watchkit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao watchkit</title>
      <link>https://www.wikiod.com/pt/watchkit/introducao-ao-watchkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/watchkit/introducao-ao-watchkit/</guid>
      <description>Conectando o código com a interface do usuário # Como o iOS onde você usa @IBOutlet e @IBAction, aqui você também pode usá-los.
Digamos que temos um botão que, quando clicado, altera o texto do rótulo para outra coisa.
Para começar:
Adicione um WKInterfaceLabel e um WKInterfaceLabel ao InterfaceController.
Ctrl-Arraste de WKInterfaceLabel para InterfaceController.swift e insira os detalhes conforme mostrado na figura a seguir para adicionar uma propriedade de saída:</description>
    </item>
    
    <item>
      <title>Conectividade do relógio</title>
      <link>https://www.wikiod.com/pt/watchkit/conectividade-do-relogio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/watchkit/conectividade-do-relogio/</guid>
      <description>Conectar seu aplicativo WatchOS ao seu aplicativo iOS pode ser uma tarefa a ser concluída quando você nunca fez isso antes. Este tutorial mostrará os fundamentos básicos para realizar esta tarefa muito importante.
Configuração do iOS # Aplicativo para iPhone
importe WatchConnectivity e esteja em conformidade com WCSessionDelegate. use o delegado de sessão estática via WCSession.default(). Envie dados para o aplicativo Watch usando: WCSession.default().sendMessage(message, replyHandler:_ errorHandler:_) O objeto de mensagem deve ser um dicionário do tipo [String:Any] Se você estiver procurando por dados a serem retornados do aplicativo Watch, forneça a lógica em um encerramento definido no replyHandler; caso contrário, passe em zero.</description>
    </item>
    
    <item>
      <title>Navegação</title>
      <link>https://www.wikiod.com/pt/watchkit/navegacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/watchkit/navegacao/</guid>
      <description>Nota Importante # A Apple desencorajou o uso de ambos os estilos de navegação em um controlador, e isso pode resultar na rejeição do aplicativo.
Atualmente, a maneira preferida é usar o estilo hierárquico em vez de baseado em página, como usado em muito mais aplicativos da Apple do que antes.
Navegação baseada em página # Muitos aplicativos watchOS (como Activity) têm várias páginas que você pode simplesmente rolar entre elas, o que é uma maneira muito boa de usar o Apple Watch.</description>
    </item>
    
  </channel>
</rss>

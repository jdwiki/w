<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial magento2 on </title>
    <link>https://www.wikiod.com/pt/docs/magento2/</link>
    <description>Recent content in Tutorial magento2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/magento2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o magento2</title>
      <link>https://www.wikiod.com/pt/magento2/comecando-com-o-magento2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/comecando-com-o-magento2/</guid>
      <description>Instale o Magento 2 no Ubuntu 16.04 # NOTAS: Vamos instalar o Magento 2 no novo Ubuntu Server 16.04 LTS com PHP 7.0, MySQL 5.6 e Apache 2.4.
1. Requisitos de configuração # Apache 2.2 ou 2.4 com módulo mod_rewrite (ou) Nginx &amp;gt;= 1.8. PHP 5.5 ou versão posterior. PHP 7.0 também é suportado. Módulos PHP necessários – PDO/MySQL, mbstring, mcrypt, mhash, SimpleXML, curl, xsl, gd, ImageMagick 6.3.7 (ou posterior) ou ambos, soap, intl, openssl.</description>
    </item>
    
    <item>
      <title>Atualizando o Magento</title>
      <link>https://www.wikiod.com/pt/magento2/atualizando-o-magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/atualizando-o-magento/</guid>
      <description>Atualize o Magento via Composer # Verifique sua versão atual do magento
php bin/magento --version Agora adicione a versão mais recente ao seu composer.
composer require magento/product-community-edition 2.1.6 --no-update Executar atualização do compositor Isso solicitará o nome de usuário e a senha retirados de suas credenciais da sua conta do marketplace.
composer update Isso iniciará o processo para começar a baixar e atualizar seu magento
Finalmente atualize seu conteúdo estático e remova a pasta var</description>
    </item>
    
    <item>
      <title>Comandos Magento 2 para uso diário</title>
      <link>https://www.wikiod.com/pt/magento2/comandos-magento-2-para-uso-diario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/comandos-magento-2-para-uso-diario/</guid>
      <description>Todos os comandos podem ser executados escrevendo apenas parte deles.
Por exemplo:
php bin/magento cache:flush pode ser traduzido para: php bin/magento c:f php bin/magento ca:f php bin/magento c:fl php bin/magento cache:f php bin/magento c:flush etc Você pode escrever qualquer parte e, se não for ambígua, saberá automaticamente qual você deseja.
Lista geral de comandos para Magento 2 # php bin/magento setup:upgrade =&amp;gt; Setup Upgrade php bin/magento setup:di:compile =&amp;gt; Setup: Compile php bin/magento indexer:reindex =&amp;gt; Reindex php bin/magento cache:flush =&amp;gt; Clear Cache php bin/magento deploy:mode:set developer =&amp;gt; Enable Developer Mode Magento (developer/production) php bin/magento deploy:mode:show =&amp;gt; Show Current Mode Magento php bin/magento module:status =&amp;gt; Module: Status php bin/magento module:disable MODULE_NAME =&amp;gt; Module: Disable php bin/magento module:enable MODULE_NAME =&amp;gt; Module: Enable php bin/magento module:uninstall MODULE_NAME =&amp;gt; Module: Uninstall php bin/magento cron:run =&amp;gt; Cronjob: Run Liberar Cache # Liberar todo o cache do Magento</description>
    </item>
    
    <item>
      <title>Estrutura do módulo</title>
      <link>https://www.wikiod.com/pt/magento2/estrutura-do-modulo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/estrutura-do-modulo/</guid>
      <description>Estrutura do módulo de catálogo # Por enquanto, acho que o módulo de catálogo contém quase tudo o que você pode adicionar a um módulo.
Api - Contém os contratos de serviço. Um conjunto de interfaces que não devem ser alteradas, a menos que a versão secundária seja alterada. Não é obrigatório para um módulo personalizado, mas é bom ter para extensões comerciais. Data - Data interfaces. Each interface must have a model that implements it (example: interface for product model) ProductRepositoryInterface.</description>
    </item>
    
    <item>
      <title>Injeção de dependência</title>
      <link>https://www.wikiod.com/pt/magento2/injecao-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/injecao-de-dependencia/</guid>
      <description>Preferência de classe # &amp;lt;!-- &amp;lt;moduleDir&amp;gt;/etc/&amp;lt;area&amp;gt;/di.xml --&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;preference for=&amp;quot;Vendor\Namespace\Model\Example&amp;quot; type=&amp;quot;Vendor\Namespace\Model\AnotherExample&amp;quot; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/config&amp;gt; O exemplo acima é uma sintaxe do modelo principal de substituição.
Aqui está uma lista de pontos que descrevem como tornar isso possível
moduleDir - Diretório de extensão Como app/code/custom/extension aqui extension é o seu diretório no qual todas as pastas de extensão necessárias serão colocadas.
área - a área será frontend ou adminhtml</description>
    </item>
    
    <item>
      <title>Evento e observador no magento 2</title>
      <link>https://www.wikiod.com/pt/magento2/evento-e-observador-no-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/evento-e-observador-no-magento-2/</guid>
      <description>Como usar o evento personalizado e o observador? # Etapa 1: Crie o arquivo events.xml de acordo com sua necessidade em frontend, Backend ou ambos YKM/Banner/etc/frontend/events.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;../../../../../../lib/internal/Magento/Framework/Event/etc/events.xsd&amp;quot;&amp;gt; &amp;lt;event name=&amp;quot;controller_action_predispatch&amp;quot;&amp;gt; &amp;lt;observer name=&amp;quot;ykm_banner_before&amp;quot; instance=&amp;quot;YKM\Banner\Observer\Help&amp;quot; /&amp;gt; &amp;lt;/event&amp;gt; &amp;lt;/config&amp;gt; Passo 2:
Crie um arquivo Observer YKM/Banner/Observer/Help.php
&amp;lt;?php /** * Copyright © 2015 Magento. All rights reserved. * See COPYING.txt for license details. */ namespace Estdevs\Banner\Observer; use Magento\Framework\Event\ObserverInterface; class Help implements ObserverInterface { public function execute(\Magento\Framework\Event\Observer $observer) { echo &amp;quot;this is good.</description>
    </item>
    
    <item>
      <title>Obter produtos do banco de dados</title>
      <link>https://www.wikiod.com/pt/magento2/obter-produtos-do-banco-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/obter-produtos-do-banco-de-dados/</guid>
      <description>Obtenha produtos usando o Repositório de Produtos # Para obter produtos do banco de dados, você precisa usar o padrão de design de repositório do Magento 2. Cada módulo pode ser empacotado com seus próprios repositórios, e o módulo Catálogo de Produtos não é diferente.
Você pode usar [injeção de dependência][1] em sua classe para acessar o repositório. Um exemplo de trabalho ficaria assim:
class Example { /** * @var \Magento\Catalog\Model\ProductRepository */ protected $productRepository; /** * @param \Magento\Catalog\Model\ProductRepository $productRepository */ public function __construct( \Magento\Catalog\Model\ProductRepository $productRepository ) { $this-&amp;gt;productRepository = $productRepository; } /** * Get product by ID * @return \Magento\Catalog\Api\Data\ProductInterface * @throws \Magento\Framework\Exception\NoSuchEntityException */ public function getProductById(int $productId) { return $this-&amp;gt;productRepository-&amp;gt;getById($productId); } } Um Repositório tem mais funcionalidades, como salvar ou excluir um produto, além de obter uma lista de produtos e usar um filtro, mas isso está além do escopo deste exemplo.</description>
    </item>
    
    <item>
      <title>Tema personalizado</title>
      <link>https://www.wikiod.com/pt/magento2/tema-personalizado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/tema-personalizado/</guid>
      <description>luma tema como pai
{ &amp;quot;name&amp;quot;: &amp;quot;magento/luma&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;N/A&amp;quot;, &amp;quot;require&amp;quot;: { &amp;quot;php&amp;quot;: &amp;quot;~5.5.0|~5.6.0|~7.0.0&amp;quot;, &amp;quot;magento/theme-luma&amp;quot;: &amp;quot;100.0.*&amp;quot;, &amp;quot;magento/framework&amp;quot;: &amp;quot;100.0.*&amp;quot; }, &amp;quot;type&amp;quot;: &amp;quot;magento2-theme&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;100.0.1&amp;quot;, &amp;quot;license&amp;quot;: [ &amp;quot;OSL-3.0&amp;quot;, &amp;quot;AFL-3.0&amp;quot; ], &amp;quot;autoload&amp;quot;: { &amp;quot;files&amp;quot;: [ &amp;quot;registration.php&amp;quot; ] } } no final
Execute php bin/magento setup:upgrade este comando após os comandos abaixo também necessários às vezes
php bin/magento setup:static-content:deploy &amp;lt;language_pack_1&amp;gt; &amp;lt;language_pack_2&amp;gt; ... &amp;lt;language_pack_n&amp;gt;
&amp;lt;language_pack&amp;gt;: en_US nl_NL en_GB etc
php bin/magento cache:flush ou php bin/magento cache:clean</description>
    </item>
    
    <item>
      <title>Usando injeção de dependência para reescrever objeto</title>
      <link>https://www.wikiod.com/pt/magento2/usando-injecao-de-dependencia-para-reescrever-objeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/usando-injecao-de-dependencia-para-reescrever-objeto/</guid>
      <description>https://gielberkers.com/magento-2-why-use-rewrites-when-you-can-use-plugins/
http://devdocs.magento.com/guides/v2.0/extension-dev-guide/plugins.html
Algumas maneiras de modificar uma função no magento 2 # Reescrever classe # Arquivo: Namespace/ModuleName/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;preference for=&amp;quot;Magento\Catalog\Controller\Product\View&amp;quot; type=&amp;quot;Namespace\ModuleName\Controller\Product\View&amp;quot; /&amp;gt; &amp;lt;/config&amp;gt; Arquivo: Namespace\ModuleName\Controller\Product\View.php
class View extends \Magento\Catalog\Block\Product\View { ///Code logic here } Plugin no objeto. # Arquivo: Namespace/ModuleName/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;type name=&amp;quot;Magento\Catalog\Model\Product&amp;quot;&amp;gt; &amp;lt;plugin name=&amp;quot;name_of_plugin&amp;quot; type=&amp;quot;Namespace\ModuleName\Plugin\Catalog\Model\Product&amp;quot; sortOrder=&amp;quot;1&amp;quot; disabled=&amp;quot;false&amp;quot; /&amp;gt; &amp;lt;/type&amp;gt; &amp;lt;/config&amp;gt; Arquivo: Namespace\ModuleName\Plugin\Catalog\Model\Product.php
namespace Namespace\ModuleName\Plugin\Catalog\Model; class Product { public function beforeSetName( \Magento\Catalog\Model\Product $product, string $name) { /// Code logic here return $name; } public function afterGetName( \Magento\Catalog\Model\Product $product, string $name) { /// Code logic here return $name; } public function aroundSave( \Magento\Catalog\Model\Product $product, \Closure $proceed) { $this-&amp;gt;doSomethingBeforeSave(); $result = $proceed(); if ($result) { $this-&amp;gt;doSomethingAfterSave(); } return $result; } } </description>
    </item>
    
    <item>
      <title>Otimizando o Magento 2</title>
      <link>https://www.wikiod.com/pt/magento2/otimizando-o-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/magento2/otimizando-o-magento-2/</guid>
      <description>Configurações para otimizar # 1. Ative categorias e produtos planos # Uma das principais razões dos problemas de velocidade do Magento com a velocidade de leitura do banco de dados. Para aumentar a velocidade de leitura do banco de dados, você deve habilitar o Flat Catalog. Isso diminuirá o número de junções de banco de dados feitas ao mostrar produtos e, devido a isso, a complexidade da consulta do MySQL será reduzida.</description>
    </item>
    
  </channel>
</rss>

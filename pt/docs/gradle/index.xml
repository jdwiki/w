<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/gradle/</link>
    <description>Recent content in gradle tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao gradle</title>
      <link>https://www.wikiod.com/pt/gradle/introducao-ao-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/introducao-ao-gradle/</guid>
      <description>Instalação do Gradle # Requisitos: Java JDK ou JRE instalado (versão 7 ou superior para a versão Gradle 3.x)
Etapas de instalação:
Baixe a distribuição Gradle do site oficial Descompacte o ZIP Adicione a variável de ambiente GRADLE_HOME. Essa variável deve apontar para os arquivos descompactados da etapa anterior. Adicione GRADLE_HOME/bin à sua variável de ambiente PATH, para que você possa executar o Gradle a partir da interface de linha de comando (CLI) Teste sua instalação do Gradle digitando gradle -v na CLI.</description>
    </item>
    
    <item>
      <title>Dependências de tarefas</title>
      <link>https://www.wikiod.com/pt/gradle/dependencias-de-tarefas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/dependencias-de-tarefas/</guid>
      <description>doÚltimo
Observe que, em uma definição de tarefa de maneira gradle 3.x mais idiomática: usando a notação explicit doLast{closure} em vez do operador &amp;ldquo;leftShift&amp;rdquo;(&amp;laquo;) preferível.(leftShift foi preterido em um gradle 3.2 está programado para ser removido no gradle 5.0.)
task oldStyle &amp;lt;&amp;lt; { println &#39;Deprecated style task&#39; } é equivalente a:
task newStyle { doLast { println &#39;Deprecated style task&#39; } } Adicionando dependências usando nomes de tarefas # Podemos alterar a ordem de execução das tarefas com o método dependsOn.</description>
    </item>
    
    <item>
      <title>Dependências</title>
      <link>https://www.wikiod.com/pt/gradle/dependencias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/dependencias/</guid>
      <description>Adicionar uma dependência de arquivo JAR local # JAR Único # Às vezes, você tem um arquivo JAR local que precisa adicionar como uma dependência à sua compilação do Gradle. Veja como você pode fazer isso:
dependencies { compile files(&#39;path/local_dependency.jar&#39;) } Onde path é um caminho de diretório em seu sistema de arquivos e local_dependency.jar é o nome do seu arquivo JAR local. O path pode ser relativo ao arquivo de compilação.</description>
    </item>
    
    <item>
      <title>Plug-ins Gradle</title>
      <link>https://www.wikiod.com/pt/gradle/plug-ins-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/plug-ins-gradle/</guid>
      <description>Como escrever um plugin autônomo # Para criar um plug-in Gradle autônomo personalizado usando java (você também pode usar o Groovy), você precisa criar uma estrutura como esta:
plugin |-- build.gradle |-- settings.gradle |-- src |-- main | |-- java | |-- resources | |-- META-INF | |-- gradle-plugins |-- test Configura a configuração do gradle # No arquivo build.gradle você define seu projeto.
apply plugin: &#39;java&#39; apply plugin: &#39;maven&#39; dependencies { compile gradleApi() } O plugin java será usado para escrever código java.</description>
    </item>
    
    <item>
      <title>Gradle Wrapper</title>
      <link>https://www.wikiod.com/pt/gradle/gradle-wrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/gradle-wrapper/</guid>
      <description>Introdução ao Gradle Wrapper # Gradle tem a capacidade de adicionar um wrapper aos projetos. Esse wrapper alivia a necessidade de todos os usuários ou sistemas de integração contínua de ter o Gradle instalado. Também evita problemas de versão onde há alguma incompatibilidade entre a versão que o projeto usa e aquela que os usuários instalaram. Ele faz isso instalando uma versão do gradle localmente no projeto.
Os usuários do projeto simplesmente executam:</description>
    </item>
    
    <item>
      <title>Desempenho do Gradle</title>
      <link>https://www.wikiod.com/pt/gradle/desempenho-do-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/desempenho-do-gradle/</guid>
      <description>Criação de perfil de uma compilação # Antes de começar a ajustar sua compilação do Gradle para desempenho, você deve estabelecer uma linha de base e descobrir quais partes da compilação estão demorando mais. Para fazer isso, você pode perfilar sua compilação adicionando o argumento --profile ao seu comando Gradle:
gradle --profile ./gradlew --profile Após a conclusão da compilação, você verá um relatório de perfil HTML para a compilação em .</description>
    </item>
    
    <item>
      <title>Scripts de inicialização do Gradle</title>
      <link>https://www.wikiod.com/pt/gradle/scripts-de-inicializacao-do-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/scripts-de-inicializacao-do-gradle/</guid>
      <description>Adicionar repositório padrão para todos os projetos # Adicione um init.gradle à pasta gradle do usuário. O init.gradle é reconhecido em todos os projetos.
Unix: ~/.gradle/init.gradle Estes também são locais alternativos onde o script init pode ser colocado e carregado automaticamente:-
Qualquer arquivo *.gradle em USER_HOME/.gradle/init.d Qualquer arquivo *.gradle no diretório init.d da instalação do Gradle init.gradle com mavenLocal como repositório em todos os projetos.
allprojects { repositories { mavenLocal() } } Com isso você tem seu cache maven local disponível em todos os repositórios.</description>
    </item>
    
    <item>
      <title>Personalização de tarefas do IntelliJ IDEA</title>
      <link>https://www.wikiod.com/pt/gradle/personalizacao-de-tarefas-do-intellij-idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/personalizacao-de-tarefas-do-intellij-idea/</guid>
      <description>Sintaxe # groovy.util.Node = node.find { childNode -&amp;gt; return true || falso } node.append(nodeYouWantAsAChild) groovy.util.Node parsedNode = (novo XmlParser()).parseText(someRawXMLString) &amp;rsquo;&amp;rsquo;&amp;rsquo; string de várias linhas (não interpolada) &amp;rsquo;&#39;&#39; Os três arquivos básicos de um projeto IntelliJ - os arquivos ipr, iws e iml - podem ser acessados ​​como em gradle na tarefa idea através
project.ipr module.iml workspace.iws usar o .withXml permite acessar o xml. Usar o .asNode() nele o transforma em um nó xml groovy.</description>
    </item>
    
    <item>
      <title>Inicializando Gradle</title>
      <link>https://www.wikiod.com/pt/gradle/inicializando-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/inicializando-gradle/</guid>
      <description>Terminologia # Task - um trabalho atômico que uma compilação executa. As tarefas têm entradas, saídas e dependências de tarefas. dependencies {} - Declara File ou dependências binárias necessárias para executar tarefas. Por exemplo, org.slf4j:slf4j-api:1.7.21 é uma abreviação de coordenadas para uma dependência do Maven. repositories {} - Como o Gradle encontra arquivos para dependências externas. Realmente, apenas uma coleção de arquivos organizados por grupo, nome e versão. Por exemplo: jcenter() é um método de conveniência para maven { url &#39;http://jcenter.</description>
    </item>
    
    <item>
      <title>Encomendar tarefas</title>
      <link>https://www.wikiod.com/pt/gradle/encomendar-tarefas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gradle/encomendar-tarefas/</guid>
      <description>Observe que mustRunAfter e shouldRunAfter estão marcados como &amp;ldquo;incubando&amp;rdquo; (a partir do Gradle 3.0), o que significa que esses são recursos experimentais e seu comportamento pode ser alterado em versões futuras.
Existem duas regras de ordenação disponíveis:
mustRunAfter shouldRunAfter Quando você usa a regra de ordenação mustRunAfter, você especifica que taskB deve sempre ser executado após taskA, sempre que taskA e taskB forem executados.
A regra de ordenação shouldRunAfter é semelhante, mas menos rigorosa, pois será ignorada em duas situações:</description>
    </item>
    
  </channel>
</rss>

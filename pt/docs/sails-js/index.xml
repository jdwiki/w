<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de velas.js on </title>
    <link>https://www.wikiod.com/pt/docs/sails-js/</link>
    <description>Recent content in Tutorial de velas.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sails-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeiros passos com o sails.js</title>
      <link>https://www.wikiod.com/pt/sails-js/primeiros-passos-com-o-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/primeiros-passos-com-o-sailsjs/</guid>
      <description>Criando um novo projeto # Depois de instalar o Sails, basta digitar
$ sails new &amp;lt;project_name&amp;gt; Isso criará um projeto Sails esqueleto em uma nova pasta chamada &amp;lt;project_name&amp;gt;.
Você também pode criar um novo projeto em uma pasta vazia digitando
$ sails new Lançamento do Aplicativo # Uma vez que seu projeto foi criado, você pode iniciar o aplicativo digitando
$ sails lift Por padrão, você pode acessar o aplicativo no navegador na porta 1337.</description>
    </item>
    
    <item>
      <title>Autenticação de token da Web JSON com Sails</title>
      <link>https://www.wikiod.com/pt/sails-js/autenticacao-de-token-da-web-json-com-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/autenticacao-de-token-da-web-json-com-sails/</guid>
      <description>Configuração # Passo um # Precisamos criar um serviço chamado jwToken. Vá para o diretório api/services e crie jwToken.js.
&#39;use strict&#39;; const jwt = require(&#39;jsonwebtoken&#39;), tokenSecret = &amp;quot;secretissecret&amp;quot;; module.exports = { // Generates a token from supplied payload issue(payload) { return jwt.sign( payload, tokenSecret, // Token Secret that we sign it with { expiresIn: &amp;quot;30 days&amp;quot; // Token Expire time }); }, // Verifies token on a request verify(token, callback) { return jwt.</description>
    </item>
    
    <item>
      <title>API do Blueprint</title>
      <link>https://www.wikiod.com/pt/sails-js/api-do-blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/api-do-blueprint/</guid>
      <description>Como funciona a API do Blueprint? # Quando o sails inicialmente começa a usar o sails lift, o sails olha para ver se você qualquer controlador definido. Em nosso exemplo, temos um controlador, o User controlador. O Sails fornece acesso às ações do blueprint para este usuário controlador como se nós mesmos os construíssemos no controlador. Velas também cria automaticamente rotas de blueprint no momento do levantamento do servidor. Então mesmo se nenhuma rota for definida em /config/routes.</description>
    </item>
    
    <item>
      <title>Configurando o mysql com sails.js</title>
      <link>https://www.wikiod.com/pt/sails-js/configurando-o-mysql-com-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/configurando-o-mysql-com-sailsjs/</guid>
      <description>Como configurar a conexão do banco de dados mysql em sails.js # Para fazer isso, primeiro localize a pasta config em sua raiz. Em seguida, abra connections.js
Localizar
// someMysqlServer: { // adapter: &#39;sails-mysql&#39;, // host: &#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;, // user: &#39;YOUR_MYSQL_USER&#39;, //optional // password: &#39;YOUR_MYSQL_PASSWORD&#39;, //optional // database: &#39;YOUR_MYSQL_DB&#39; //optional // }, Descomente estas linhas.
Dê um nome adequado para o conector como este someMysqlServer para mysql_connection ou qualquer nome como desejar</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/sails-js/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/roteamento/</guid>
      <description>Rotas são regras que dizem ao Sails o que fazer quando se depara com uma solicitação recebida.
As rotas são definidas em config/routes.js. A ordem das rotas é significativa, pois as rotas são combinadas de cima para baixo. Isso significa que se você tiver uma rota específica que também pode ser correspondida por uma rota curinga, a rota específica deve ser definida acima da rota curinga.
Quando uma solicitação entra em seu aplicativo, o sails.</description>
    </item>
    
    <item>
      <title>Controladores</title>
      <link>https://www.wikiod.com/pt/sails-js/controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/controladores/</guid>
      <description>Os controladores (o C em MVC) são os principais objetos em seu aplicativo Sails que são responsáveis ​​por responder a solicitações de um navegador da Web, aplicativo móvel ou qualquer outro sistema capaz de se comunicar com um servidor. Eles geralmente agem como intermediários entre seus modelos e visualizações. Para muitos aplicativos, os controladores conterão a maior parte da lógica de negócios do seu projeto.
Sintaxe ES2015 # &#39;use strict&#39;; // This is an example of a /api/controllers/HomeController.</description>
    </item>
    
    <item>
      <title>Modelos</title>
      <link>https://www.wikiod.com/pt/sails-js/modelos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/modelos/</guid>
      <description>O Sails vem instalado com um poderoso ORM/ODM chamado Waterline, uma ferramenta independente de armazenamento de dados que simplifica drasticamente a interação com um ou mais bancos de dados. Ele fornece uma camada de abstração sobre o banco de dados subjacente, permitindo que você consulte e manipule facilmente seus dados sem escrever código de integração específico do fornecedor.
Modelo Básico # Este exemplo mostra como definir um modelo simples em Sails.</description>
    </item>
    
    <item>
      <title>Adaptador de banco de dados PostgreSQL para velas</title>
      <link>https://www.wikiod.com/pt/sails-js/adaptador-de-banco-de-dados-postgresql-para-velas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/adaptador-de-banco-de-dados-postgresql-para-velas/</guid>
      <description>Instalar # Você pode instalar o adaptador postgreSQL via NPM.
npm install sails-postgresql Configuração # Você pode definir as configurações do banco de dados em config/connections.js.
Aqui está um exemplo:
postgresql: { database: &#39;databaseName&#39;, host: &#39;localhost&#39;, user: &#39;root&#39;, password: &#39;&#39;, port: 5432, poolSize: 10, ssl: false }; Alternativamente, você pode fornecer as informações de conexão no formato de URL:
postgresql: { url: &#39;postgres://username:password@hostname:port/database&#39;, ssl: false }; </description>
    </item>
    
    <item>
      <title>Adaptador MongoDB para velas</title>
      <link>https://www.wikiod.com/pt/sails-js/adaptador-mongodb-para-velas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sails-js/adaptador-mongodb-para-velas/</guid>
      <description>Configuração # Você pode definir as configurações do banco de dados em config/connections.js.
Exemplo:
someMongoDb: { adapter: &#39;sails-mongo&#39;, host: &#39;localhost&#39;, // defaults to `localhost` if omitted port: 27017, // defaults to 27017 if omitted user: &#39;username_here&#39;, // or omit if not relevant password: &#39;password_here&#39;, // or omit if not relevant database: &#39;database_name_here&#39; // or omit if not relevant } Como alternativa, você pode especificar sua configuração do Mongo como um URL</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python-requests Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/python-requests/</link>
    <description>Recent content in python-requests Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/python-requests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com python-requests</title>
      <link>https://www.wikiod.com/pt/python-requests/comecando-com-python-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/comecando-com-python-requests/</guid>
      <description>Instalação ou Configuração # python-requests está disponível no PyPI, o Python Package Index, o que significa que pode ser instalado através do pip:
pip install requests O código-fonte atualizado pode ser encontrado no requests GitHub repository
Se você deseja instalá-lo a partir da fonte, você pode fazer isso clonando o repositório do GitHub:
git clone git://github.com/kennethreitz/requests.git Ou pegando o tarball (-O grava a saída no arquivo; -L segue os redirecionamentos):</description>
    </item>
    
    <item>
      <title>Automatizando o login usando Requests over Single Sign On</title>
      <link>https://www.wikiod.com/pt/python-requests/automatizando-o-login-usando-requests-over-single-sign-on/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/automatizando-o-login-usando-requests-over-single-sign-on/</guid>
      <description>Exemplo de acesso a páginas autenticadas usando solicitações # Às vezes, temos a exigência de analisar as páginas, mas isso exige que você seja um usuário autorizado. Aqui está um exemplo que mostra como fazer o login no oracle.
import sys import requests import json from bs4 import BeautifulSoup def mprint(x): sys.stdout.write(x) print return headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux i686; rv:7.0.1) Gecko/20100101 Firefox/7.0.1&#39;} mprint(&#39;[-] Initialization...&#39;) s = requests.session() s.headers.update(headers) print &#39;done&#39; mprint(&#39;[-] Gathering JSESSIONID.</description>
    </item>
    
    <item>
      <title>Enviando e recebendo JSON</title>
      <link>https://www.wikiod.com/pt/python-requests/enviando-e-recebendo-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/enviando-e-recebendo-json/</guid>
      <description>Postando JSON # Para POSTAR um corpo JSON, passe uma estrutura de dados Python para o argumento json; aqui um dicionário é postado, mas qualquer coisa que possa ser codificada para JSON fará:
import requests # Create a dictionary to be sent. json_data = {&#39;foo&#39;: [&#39;bar&#39;, &#39;baz&#39;], &#39;spam&#39;: True, &#39;eggs&#39;: 5.5} # Send the data. response = requests.post(url=&#39;http://example.com/api/foobar&#39;, json=json_data) print(&amp;quot;Server responded with %s&amp;quot; % response.status_code) requests cuida da codificação para JSON para você e define o Content-Type como application/json.</description>
    </item>
    
    <item>
      <title>Django Framework</title>
      <link>https://www.wikiod.com/pt/python-requests/django-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/django-framework/</guid>
      <description>Instalação e configuração # Django é um framework full stack para desenvolvimento web. Ele alimenta alguns dos sites mais populares da Internet.
Para instalar a estrutura; use a ferramenta pip:
pip install django Se você estiver instalando no OSX ou Linux, o comando acima pode resultar em um erro de permissão; para evitar esse erro, instale o pacote para sua conta de usuário ou use um ambiente virtual:
pip install --user django Uma vez instalado - você terá acesso à ferramenta de bootstrapping django-admin, que criará um diretório com alguns padrões para iniciar o desenvolvimento.</description>
    </item>
    
    <item>
      <title>Usando solicitações por trás de um proxy</title>
      <link>https://www.wikiod.com/pt/python-requests/usando-solicitacoes-por-tras-de-um-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/usando-solicitacoes-por-tras-de-um-proxy/</guid>
      <description>Configurando proxy no código Python # Se seu código estiver sendo executado por trás de um proxy e você souber o ponto final, poderá definir essas informações em seu código.
requests aceita um parâmetro proxies. Este deve ser um dicionário que mapeia o protocolo para a URL do proxy.
proxies = { &#39;http&#39;: &#39;http://proxy.example.com:8080&#39;, &#39;https&#39;: &#39;http://secureproxy.example.com:8090&#39;, } Observe que no dicionário definimos a URL do proxy para dois protocolos separados: HTTP e HTTPS.</description>
    </item>
    
    <item>
      <title>arquivos</title>
      <link>https://www.wikiod.com/pt/python-requests/arquivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python-requests/arquivos/</guid>
      <description>Parâmetros # Parâmetros Função arquivo JSON Lista de caminhos para os arquivos. tipo_conteúdo Tipos MIME cabeçalhos Cabeçalhos HTTP A variável r nos exemplos contém os dados binários completos de qualquer arquivo que você esteja enviando.
Upload de arquivo simples # url = &#39;http://your_url&#39; files = {&#39;file&#39;: open(&#39;myfile.test&#39;, &#39;rb&#39;)} r = requests.post(url, files=files) Upload de arquivo com parâmetros manuais # url = &#39;http://httpbin.org/post&#39; files = {&#39;file&#39;: (&#39;report.xls&#39;, open(&#39;report.xls&#39;, &#39;rb&#39;), &#39;application/vnd.ms-excel&#39;, {&#39;Expires&#39;: &#39;0&#39;})} r = requests.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial do transferidor on </title>
    <link>https://www.wikiod.com/pt/docs/protractor/</link>
    <description>Recent content in tutorial do transferidor on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/protractor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o transferidor</title>
      <link>https://www.wikiod.com/pt/protractor/comecando-com-o-transferidor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/comecando-com-o-transferidor/</guid>
      <description>Instalando e configurando o transferidor (no Windows) # Requisitos: O Transferidor requer que as seguintes dependências sejam instaladas antes da instalação:
Java JDK 1.7 ou superior Node.js v4 ou superior Instalação: Baixe e instale o Node.js a partir deste URL: https://nodejs.org/en/
Para ver se a instalação do Node.js foi bem sucedida, você pode ir e verificar as variáveis ​​de ambiente. O &amp;lsquo;Caminho&amp;rsquo; em Variáveis ​​do Sistema será atualizado automaticamente.
Você também pode verificar o mesmo digitando o comando npm -version no prompt de comando que lhe dará a versão instalada.</description>
    </item>
    
    <item>
      <title>Seletores CSS</title>
      <link>https://www.wikiod.com/pt/protractor/seletores-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/seletores-css/</guid>
      <description>Sintaxe # by.css(&amp;lsquo;seletor-css&amp;rsquo;) by.id(&amp;lsquo;id&amp;rsquo;) by.model(&amp;lsquo;model&amp;rsquo;) by.binding(&amp;lsquo;binding&amp;rsquo;) Parâmetros # Parâmetro Detalhes seletor css Um seletor css como &#39;.class-name&#39; para selecionar o elemento na base do nome da classe id ID do elemento dom model Modelo usado para elemento dom binding Nome da ligação que é usada para ligar a determinado elemento Como escrever seletores CSS?
Os atributos mais importantes para escrever seletores CSS são class e id de dom. Para uma instância, se um dom html se parece com o exemplo abaixo:</description>
    </item>
    
    <item>
      <title>Seletores XPath no Transferidor</title>
      <link>https://www.wikiod.com/pt/protractor/seletores-xpath-no-transferidor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/seletores-xpath-no-transferidor/</guid>
      <description>Selecionando um elemento DOM usando o transferidor # Além dos seletores de CSS, modelo e ligação, o transferidor também pode localizar elementos usando xpath Visão
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#39;http://www.google.com&#39;&amp;gt;Go to google&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; Código
var googleLink= element(by.xpath(&#39;//ul/li/a&#39;)); expect(element.getText()).to.eventually.equal(&#39;Go to google&#39;,&#39;The text you mention was not found&#39;); Selecionando elementos com atributos específicos # Os seletores XPath podem ser usados ​​para selecionar elementos com atributos específicos, como class, id, title etc.
Por classe # Visão:</description>
    </item>
    
    <item>
      <title>Esperas explícitas com browser.wait()</title>
      <link>https://www.wikiod.com/pt/protractor/esperas-explicitas-com-browserwait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/esperas-explicitas-com-browserwait/</guid>
      <description>browser.sleep() vs browser.wait() # Quando se trata de lidar com problemas de tempo, é tentador e fácil colocar um browser.sleep(&amp;lt;timeout_in_milliseconds&amp;gt;) &amp;ldquo;rápido&amp;rdquo; e seguir em frente.
O problema é que um dia ele iria falhar. Não há regra geral/ouro sobre qual tempo limite de suspensão definir e, portanto, em algum momento devido a problemas de rede ou desempenho ou outros, pode levar mais tempo para uma página carregar ou um elemento se tornar visível etc.</description>
    </item>
    
    <item>
      <title>Depurador do transferidor</title>
      <link>https://www.wikiod.com/pt/protractor/depurador-do-transferidor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/depurador-do-transferidor/</guid>
      <description>Sintaxe # navegador.pause() browser.debugger() Esta seção explica como podemos depurar testes de transferidor.
Usando navegador.pause() # O método pause() é uma das soluções mais fáceis que o Protractor fornece para depurar o código, para usá-lo você deve adicioná-lo em seu código onde deseja pausar a execução.
Você pode usar C (tipo C) para avançar. Tenha cuidado ao usá-lo, você deve escrever este comando sem nenhum atraso, pois poderá obter um erro de tempo limite da sua biblioteca de asserções se atrasar para pressionar c.</description>
    </item>
    
    <item>
      <title>Arquivo de configuração do transferidor</title>
      <link>https://www.wikiod.com/pt/protractor/arquivo-de-configuracao-do-transferidor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/arquivo-de-configuracao-do-transferidor/</guid>
      <description>O arquivo de configuração contém informações que o Protractor usa para executar seu script de teste. Aqui vou tentar dar algumas variações diferentes.
Arquivo de configuração simples - Chrome # var config = {}; var timeout = 120000; config.framework = &#39;jasmine2&#39;; config.allScriptsTimeout = timeout; config.getPageTimeout = timeout; config.jasmineNodeOpts.isVerbose = true; config.jasmineNodeOpts.defaultTimeoutInterval = timeout; config.specs = [&#39;qa/**/*Spec.js&#39;]; config.browserName = &#39;chrome&#39;; exports.config = config; Arquivo de configuração com recursos - Chrome # var config = {}; var timeout = 120000; config.</description>
    </item>
    
    <item>
      <title>Testando aplicativos não angulares com o Protractor</title>
      <link>https://www.wikiod.com/pt/protractor/testando-aplicativos-nao-angulares-com-o-protractor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/testando-aplicativos-nao-angulares-com-o-protractor/</guid>
      <description>Transferidor é feito para testar aplicativos Angular. No entanto, ainda é possível testar aplicativos não angulares com o Protractor, se necessário.
Alterações necessárias para testar o aplicativo não angular com o Transferidor # Use browser.driver em vez de driver
Use browser.driver.ignoreSynchronization = true
Motivo: O transferidor espera que os componentes angulares sejam carregados completamente em uma página da Web antes de iniciar qualquer execução. No entanto, como nossas páginas não são angulares, o Protractor continua aguardando o carregamento de &amp;lsquo;angular&amp;rsquo; até que o teste falhe com o tempo limite.</description>
    </item>
    
    <item>
      <title>Controle de Fluxo e Promessas</title>
      <link>https://www.wikiod.com/pt/protractor/controle-de-fluxo-e-promessas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/controle-de-fluxo-e-promessas/</guid>
      <description>O Protractor/WebDriverJS tem esse mecanismo chamado Control Flow - é uma fila interna de promessas, mantém a execução do código organizada.
Entendendo o Fluxo de Controle # Considere o seguinte teste:
it(&#39;should test something&#39;, function() { browser.get(&#39;/dashboard/&#39;); $(&amp;quot;#myid&amp;quot;).click(); expect(element(by.model(&#39;username&#39;)).getText()).toEqual(&#39;Test&#39;); console.log(&amp;quot;HERE&amp;quot;); }); No teste a seguir, quando o console.log() é executado e você vê HERE no console, nenhum dos comandos do Transferidor das linhas anteriores foi executado. Este é um comportamento totalmente assíncrono.</description>
    </item>
    
    <item>
      <title>Objetos de página</title>
      <link>https://www.wikiod.com/pt/protractor/objetos-de-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/objetos-de-pagina/</guid>
      <description>Objetos de página é um padrão de design que resulta em menos duplicatas de código, fácil manutenção e mais legibilidade.
Objeto de primeira página # /* save the file in &#39;pages/loginPage&#39; var LoginPage = function(){ }; /*Application object properties*/ LoginPage.prototype = Object.create({}, { userName: { get: function() { return browser.driver.findElement(By.id(&#39;userid&#39;)); } }, userPass: { get: function() { return browser.driver.findElement(By.id(&#39;password&#39;)); } }, submitBtn: { get: function() { return browser.driver.findElement(By.id(&#39;btnSubmit&#39;)); } } }); /* Adding functions */ LoginPage.</description>
    </item>
    
    <item>
      <title>Elementos de localização</title>
      <link>https://www.wikiod.com/pt/protractor/elementos-de-localizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/protractor/elementos-de-localizacao/</guid>
      <description>Para poder interagir com uma página, você precisa informar ao Protractor exatamente qual elemento procurar. A base usada para selecionar elementos são os localizadores. O Protractor, além de incluir os seletores genéricos do Selenium, também possui localizadores específicos do Angular que são mais robustos e persistentes a mudanças. No entanto, às vezes, mesmo em um aplicativo Angular, localizadores regulares devem ser usados.
Parâmetros # Parâmetro Detalhe seletor Uma string que especifica o valor do seletor (depende do localizador) Localizadores específicos do transferidor (para aplicativos baseados em Angular) # Esses localizadores devem ser usados ​​prioritariamente quando possível, pois são mais persistentes a mudanças em uma aplicação do que localizadores baseados em css ou xpath, que podem quebrar facilmente.</description>
    </item>
    
  </channel>
</rss>

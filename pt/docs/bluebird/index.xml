<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do pássaro azul on </title>
    <link>https://www.wikiod.com/pt/docs/bluebird/</link>
    <description>Recent content in Tutorial do pássaro azul on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/bluebird/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Bluebird</title>
      <link>https://www.wikiod.com/pt/bluebird/introducao-ao-bluebird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/bluebird/introducao-ao-bluebird/</guid>
      <description>Instalação ou Configuração # Node.js # npm install bluebird Então:
var Promise = require(&amp;quot;bluebird&amp;quot;); Navegadores # Há muitas maneiras de usar o bluebird em navegadores:
Downloads diretos Full build bluebird.js Full build minified bluebird.min.js Core build bluebird.core.js Core build minified bluebird.core.min.js Você pode usar o browserify na exportação principal Você pode usar o pacote bower. Ao usar tags de script, as variáveis ​​globais Promise e ​​P (alias para Promise) ficam disponíveis.</description>
    </item>
    
    <item>
      <title>Convertendo uma API de retorno de chamada em promessas.</title>
      <link>https://www.wikiod.com/pt/bluebird/convertendo-uma-api-de-retorno-de-chamada-em-promessas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/bluebird/convertendo-uma-api-de-retorno-de-chamada-em-promessas/</guid>
      <description>As promessas têm estado, começam como pendentes e podem ser liquidadas para:
fulfilled significa que o cálculo foi concluído com sucesso. rejected significa que o cálculo falhou. Prometa que retorna funções nunca devem ser lançadas, elas devem retornar rejeições. Lançar de uma função de retorno de promessa forçará você a usar tanto um } catch { e um .catch. As pessoas que usam APIs prometidas não esperam que as promessas sejam lançadas.</description>
    </item>
    
    <item>
      <title>Promessa.tudo</title>
      <link>https://www.wikiod.com/pt/bluebird/promessatudo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/bluebird/promessatudo/</guid>
      <description>Promise.all( Iterable&amp;lt;any&amp;gt; | Promise&amp;lt;Iterable&amp;lt;any&amp;gt;&amp;gt; input ) -&amp;gt; Promise Esse método é útil quando você deseja aguardar a conclusão de mais de uma promessa.
Dado um Iterable(arrays são Iterable), ou uma promessa de um Iterable , que produz promessas (ou uma mistura de promessas e valores), itera sobre todos os valores do Iterable em uma matriz e retorna uma promessa que é cumprida quando todos os itens da matriz são cumpridos. O valor de cumprimento da promessa é um array com valores de cumprimento nas respectivas posições do array original.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uwp Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/uwp/</link>
    <description>Recent content in uwp Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao uwp</title>
      <link>https://www.wikiod.com/pt/uwp/introducao-ao-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/introducao-ao-uwp/</guid>
      <description>Criando seu primeiro aplicativo UWP # Este exemplo demonstra como desenvolver um aplicativo UWP simples.
Na criação de um projeto &amp;ldquo;Blank App (Universal Windows)&amp;rdquo; existem muitos arquivos essenciais que são criados em sua solução.
Todos os arquivos em seu projeto podem ser vistos no Solution Explorer.
Alguns dos arquivos cruciais em seu projeto são:
App.xaml e App.xaml.cs - App.xaml é usado para declarar recursos que estão disponíveis no aplicativo e App.</description>
    </item>
    
    <item>
      <title>Famílias de dispositivos</title>
      <link>https://www.wikiod.com/pt/uwp/familias-de-dispositivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/familias-de-dispositivos/</guid>
      <description>Código específico do DeviceFamily # Em geral, a UWP é usada para criar um único aplicativo executado no Windows 10 em vários dispositivos diferentes. No entanto, também é possível fazer código sob medida para dispositivos específicos. Você pode conseguir isso de várias maneiras diferentes.
Layout XAML diferente
Se você quiser usar um layout específico para uma determinada &amp;ldquo;família de dispositivos&amp;rdquo;, poderá fazer isso criando um novo item de página XAML com o mesmo nome do arquivo XAML padrão, com um sufixo para indicar a família de dispositivos que você está direcionando.</description>
    </item>
    
    <item>
      <title>Teste de unidade para UWP</title>
      <link>https://www.wikiod.com/pt/uwp/teste-de-unidade-para-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/teste-de-unidade-para-uwp/</guid>
      <description>Gostaria de mostrar como criar testes de unidade para o aplicativo universal do Windows 10. Para testar aplicativos UWP, usaremos o xUnit.net Framework sobre o qual você pode ler mais no link que forneci na seção de comentários.
Você pode ler mais sobre o xUnit Framework: https://xunit.github.io/docs/getting-started-uwp.html
Configurar aplicativo de teste # Depois de ter seu aplicativo UWP pronto para testes, você deve adicionar o aplicativo de teste à sua solução.</description>
    </item>
    
    <item>
      <title>Configurações e dados do aplicativo</title>
      <link>https://www.wikiod.com/pt/uwp/configuracoes-e-dados-do-aplicativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/configuracoes-e-dados-do-aplicativo/</guid>
      <description>Armazenar e recuperar configurações # Os aplicativos UWP podem armazenar facilmente configurações simples em um armazenamento de chave/valor localmente ou até mesmo na nuvem para que seu aplicativo ou jogo possa compartilhar configurações entre dispositivos de usuários diferentes.
Os seguintes tipos de dados podem ser usados ​​para configurações:
UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Simples, Duplo Boleano Char16, String DateTime, TimeSpan GUID, Ponto, Tamanho, Rect Comece recuperando o contêiner de dados local e/ou de roaming.</description>
    </item>
    
    <item>
      <title>Tarefas em segundo plano UWP</title>
      <link>https://www.wikiod.com/pt/uwp/tarefas-em-segundo-plano-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/tarefas-em-segundo-plano-uwp/</guid>
      <description>Para registrar uma tarefa em segundo plano que é executada em um processo separado, você deve ir para a guia &amp;ldquo;Declarações&amp;rdquo; no Package.appxmanifest e adicionar uma nova &amp;ldquo;Tarefa em segundo plano&amp;rdquo; e definir o ponto de entrada. O registro de uma tarefa em segundo plano de processo único pode ser feito por meio do BackgroundTaskBuilder, mas o aplicativo lançará uma exceção se você registrar uma tarefa duas vezes, portanto, você deve verificar se já registrou uma tarefa.</description>
    </item>
    
    <item>
      <title>Recursos do tema</title>
      <link>https://www.wikiod.com/pt/uwp/recursos-do-tema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/recursos-do-tema/</guid>
      <description>Sintaxe # C# : Application.Current.Resources[&amp;ldquo;yourColorKey&amp;rdquo;] Xaml: {ThemeResource yourColorKey} Parâmetros # Parâmetro Objetivo yourColorKey Uma chave que você dá para obter um objeto Color de volta. Ele difere entre C# e Xaml A UWP permite que você assuma o controle total das vantagens do Windows 10. Algumas dessas vantagens são gráficas, como os temas Accent color ou Dark/Light.
Para preparar seu aplicativo para ser compatível com esses recursos, várias cores predefinidas foram implementadas no UWP para mudar com a cor de destaque do sistema operacional em que o programa é executado ou com a escolha do tema do usuário.</description>
    </item>
    
    <item>
      <title>Navegação do WebView</title>
      <link>https://www.wikiod.com/pt/uwp/navegacao-do-webview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/navegacao-do-webview/</guid>
      <description>Todos os exemplos que buscam dados de uma URL remota precisam ter o recurso &amp;ldquo;Internet (cliente)&amp;rdquo; verificado no Package.appxmanifest. Para exemplos que apenas manipulam dados locais não é necessário.
Abra o arquivo HTML do pacote do aplicativo # Você pode abrir facilmente um arquivo do pacote do seu aplicativo, mas o esquema Uri deve ser &amp;ldquo;ms-appx-web&amp;rdquo; em vez de &amp;ldquo;ms-appx&amp;rdquo;:
var uri = new Uri(&amp;quot;ms-appx-web:///Assets/Html/html-sample.html&amp;quot;); this.webView.Navigate(uri); Navegue até Uri # Este código simplesmente navega no WebView para alguns Uri:</description>
    </item>
    
    <item>
      <title>UWP Olá Mundo</title>
      <link>https://www.wikiod.com/pt/uwp/uwp-ola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/uwp-ola-mundo/</guid>
      <description>Sintaxe # Este é o exemplo simples do popular &amp;ldquo;Hello World!&amp;rdquo; para universal Plataforma Windows no Windows 10. Olá Mundo - Plataforma Universal do Windows # Após iniciar o Visual Studio 2015, vá para Arquivo → Novo → Projeto. Na caixa de diálogo New Project, navegue na árvore de templates até Visual C# → Windows → Universal e selecione Blank App (Universal Windows). Em seguida, precisamos preencher o formulário para descrever o Aplicativo:</description>
    </item>
    
    <item>
      <title>Ciclo de vida do aplicativo</title>
      <link>https://www.wikiod.com/pt/uwp/ciclo-de-vida-do-aplicativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/ciclo-de-vida-do-aplicativo/</guid>
      <description>O ciclo de vida do aplicativo universal do Windows 10 consiste em três estados diferentes:
Em execução - o aplicativo está atualmente em uso Não está em execução - o aplicativo é fechado e removido da memória Suspenso - o estado do aplicativo está congelado, mas ainda está na memória Como você pode ver na imagem acima, existem diferentes eventos relacionados à mudança de um estado para outro. Na seção de exemplos eu mostro como lidar com eles.</description>
    </item>
    
    <item>
      <title>Converter o tamanho da imagem e cortar o arquivo de imagem no aplicativo Universal do Windows</title>
      <link>https://www.wikiod.com/pt/uwp/converter-o-tamanho-da-imagem-e-cortar-o-arquivo-de-imagem-no-aplicativo-universal-do-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/uwp/converter-o-tamanho-da-imagem-e-cortar-o-arquivo-de-imagem-no-aplicativo-universal-do-windows/</guid>
      <description>Cortar e redimensionar a imagem usando a ferramenta bitmap # public class BitmapTools { /// &amp;lt;summary&amp;gt; /// Gets the cropped bitmap asynchronously. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;originalImage&amp;quot;&amp;gt;The original image.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;startPoint&amp;quot;&amp;gt;The start point.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;cropSize&amp;quot;&amp;gt;Size of the corp.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;scale&amp;quot;&amp;gt;The scale.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;The cropped image.&amp;lt;/returns&amp;gt; public static async Task&amp;lt;WriteableBitmap&amp;gt; GetCroppedBitmapAsync(IRandomAccessStream originalImage, Point startPoint, Size cropSize, double scale) { if (double.IsNaN(scale) || double.IsInfinity(scale)) { scale = 1; } // Convert start point and size to integer.</description>
    </item>
    
  </channel>
</rss>

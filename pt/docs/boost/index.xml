<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de reforço on </title>
    <link>https://www.wikiod.com/pt/docs/boost/</link>
    <description>Recent content in Tutorial de reforço on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/boost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o Boost</title>
      <link>https://www.wikiod.com/pt/boost/comecando-com-o-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/comecando-com-o-boost/</guid>
      <description>Instalação ou Configuração # Consulte Primeiros passos do Boost.
A maioria das bibliotecas Boost são apenas de cabeçalho, o que significa que não há nada que você precise compilar ou vincular.
Verifique se você está obtendo a versão mais recente do Boost:
Visite www.boost.org Procure o download da versão atual. Atualmente, este link aqui. Selecione o arquivo morto apropriado para seu sistema operacional e faça o download. Bibliotecas somente de cabeçalho podem ser usadas simplesmente incluindo os respectivos arquivos de cabeçalho.</description>
    </item>
    
    <item>
      <title>Usando boost.python</title>
      <link>https://www.wikiod.com/pt/boost/usando-boostpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/usando-boostpython/</guid>
      <description>Exemplo introdutório no Boost.Python # As coisas são fáceis quando você precisa usar uma biblioteca C++ em um projeto Python. Só você pode usar Boost.
Primeiro de tudo aqui está uma lista de componentes que você precisa:
Um arquivo CMakeList.txt, porque você usará o CMake. Os arquivos C++ do projeto C++. O arquivo python - este é o seu projeto python. Vamos começar com um pequeno arquivo C++. Nosso projeto C++ tem apenas um método que retorna uma string &amp;ldquo;Esta é a primeira tentativa&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Opções do programa Boost</title>
      <link>https://www.wikiod.com/pt/boost/opcoes-do-programa-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/opcoes-do-programa-boost/</guid>
      <description>Uso básico # As opções do programa Boost fornecem uma maneira simples e segura de analisar e manipular argumentos de linha de comando.
#include &amp;lt;boost/program_options.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; int main(int argc, char** argv) { namespace po = boost::program_options; po::variables_map vm; po::options_description desc(&amp;quot;Allowed Options&amp;quot;); // declare arguments desc.add_options() (&amp;quot;name&amp;quot;, po::value&amp;lt;std::string&amp;gt;()-&amp;gt;required(), &amp;quot;Type your name to be greeted!&amp;quot;); // parse arguments and save them in the variable map (vm) po::store(po::parse_command_line(argc, argv, desc), vm); std::cout &amp;lt;&amp;lt; &amp;quot;Hello &amp;quot; &amp;lt;&amp;lt; vm[&amp;quot;name&amp;quot;].</description>
    </item>
    
    <item>
      <title>impulsionar biblioteca de algoritmos de string</title>
      <link>https://www.wikiod.com/pt/boost/impulsionar-biblioteca-de-algoritmos-de-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/impulsionar-biblioteca-de-algoritmos-de-string/</guid>
      <description>Impulsionar a Documentação em Algoritmos de String
boost::split() # #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/algorithm/string.hpp&amp;gt; using namespace std; int main() { // String to split string str = &amp;quot;You&#39;re supposed to see this!|NOT THIS!!!!!!&amp;quot;; // Line container vector&amp;lt;string&amp;gt; lines; // Splits string boost::split(lines, str, boost::is_any_of(&amp;quot;|&amp;quot;), boost::token_compress_on); // Outputs 1 half of the split string cout &amp;lt;&amp;lt; lines.at(0).c_str() &amp;lt;&amp;lt; endl; // Waits for input before program exits cin.get(); return 0; } O seguinte é o programa em psuedocode:</description>
    </item>
    
    <item>
      <title>Estrutura de acumuladores de impulso</title>
      <link>https://www.wikiod.com/pt/boost/estrutura-de-acumuladores-de-impulso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/estrutura-de-acumuladores-de-impulso/</guid>
      <description>Calculando média e variância # #include &amp;lt;iostream&amp;gt; #include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/stats.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/mean.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/variance.hpp&amp;gt; int main() { using namespace boost::accumulators; accumulator_set&amp;lt;int, stats&amp;lt;tag::mean, tag::variance&amp;gt;&amp;gt; acc; for(int i = 1; i &amp;lt;= 6; i++) acc(i); std::cout &amp;lt;&amp;lt; &amp;quot;mean=&amp;quot; &amp;lt;&amp;lt; mean(acc) &amp;lt;&amp;lt; &amp;quot;, variance=&amp;quot; &amp;lt;&amp;lt; variance(acc) &amp;lt;&amp;lt; &#39;\n&#39;; // prints &amp;quot;mean=3.5, variance=2.91667&amp;quot; return 0; } </description>
    </item>
    
    <item>
      <title>Processo de reforço assíncrono</title>
      <link>https://www.wikiod.com/pt/boost/processo-de-reforco-assincrono/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/processo-de-reforco-assincrono/</guid>
      <description>Usando todos os 3 pipes de um processo filho de forma assíncrona. # #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/process.hpp&amp;gt; #include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;boost/process/windows.hpp&amp;gt; int Run( const std::string&amp;amp; exeName, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; args, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; input, ///&amp;lt; [in] data for stdin std::string&amp;amp; output, ///&amp;lt; [out] data from stdout std::string&amp;amp; error ///&amp;lt; [out] data from stderr ) { using namespace boost; asio::io_service ios; // stdout setup // std::vector&amp;lt;char&amp;gt; vOut(128 &amp;lt;&amp;lt; 10); // that worked well for my decoding app.</description>
    </item>
    
    <item>
      <title>BOOST- Compare imagens usando OpevCV</title>
      <link>https://www.wikiod.com/pt/boost/boost--compare-imagens-usando-opevcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/boost/boost--compare-imagens-usando-opevcv/</guid>
      <description>Esta documentação explica como uma imagem externa pode ser testada e comparada com a imagem de saída do OpenCV. Por exemplo, para comparar duas imagens borradas e testar se ambas são iguais, desfocamos uma imagem original em um software externo (usei o software WiT Image Processing) ou apenas baixamos qualquer imagem borrada online- output1. Crie um projeto Win32 OpenCV no Visual Studio. Leia a imagem original como uma entrada para o OpenCV.</description>
    </item>
    
  </channel>
</rss>

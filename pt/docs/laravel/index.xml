<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Laravel on </title>
    <link>https://www.wikiod.com/pt/docs/laravel/</link>
    <description>Recent content in Tutorial Laravel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Laravel</title>
      <link>https://www.wikiod.com/pt/laravel/introducao-ao-laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/introducao-ao-laravel/</guid>
      <description>Bem-vindo à documentação de tags do Laravel! # Laravel é um framework PHP bem conhecido. Aqui, você aprenderá tudo sobre o Laravel. Começando as-simple-as sabendo o que é Programação Orientada a Objetos, até o tópico avançado de desenvolvimento de pacotes Laravel.
Isso, como todas as outras tags de documentação do Stackoverflow, é uma documentação orientada pela comunidade, portanto, se você já tem experiência no Laravel, compartilhe seu conhecimento adicionando seus próprios tópicos ou exemplos!</description>
    </item>
    
    <item>
      <title>Eloquente</title>
      <link>https://www.wikiod.com/pt/laravel/eloquente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/eloquente/</guid>
      <description>O Eloquent é um ORM (Object Relational Model) incluído no Laravel. Ele implementa o padrão de registro ativo e é usado para interagir com bancos de dados relacionais.
Nomeação da tabela
A convenção é usar “snake_case” no plural para nomes de tabelas e “StudlyCase” no singular para nomes de modelos. Por exemplo:
Uma tabela cats teria um modelo Cat Uma tabela jungle_cats teria um modelo JungleCat Uma tabela users teria um modelo User Uma tabela people teria um modelo Person O Eloquent tentará automaticamente vincular seu modelo a uma tabela que tenha o plural do nome do modelo, conforme indicado acima.</description>
    </item>
    
    <item>
      <title>Implante o aplicativo Laravel 5 em hospedagem compartilhada no servidor Linux</title>
      <link>https://www.wikiod.com/pt/laravel/implante-o-aplicativo-laravel-5-em-hospedagem-compartilhada-no-servidor-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/implante-o-aplicativo-laravel-5-em-hospedagem-compartilhada-no-servidor-linux/</guid>
      <description>Para obter mais informações sobre a implantação do projeto Laravel em hospedagem compartilhada, visite este repositório do Github.
Aplicativo Laravel 5 em Hospedagem Compartilhada em Servidor Linux # Por padrão, a pasta public do projeto Laravel expõe o conteúdo do aplicativo que pode ser solicitado de qualquer lugar por qualquer pessoa, o restante do código do aplicativo é invisível ou inacessível para qualquer pessoa sem as devidas permissões.
Depois de desenvolver o aplicativo em sua máquina de desenvolvimento, ele precisa ser enviado para um servidor de produção para que possa ser acessado pela Internet de qualquer lugar - certo?</description>
    </item>
    
    <item>
      <title>Validação</title>
      <link>https://www.wikiod.com/pt/laravel/validacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/validacao/</guid>
      <description>Parâmetros # Parâmetro Detalhes necessário O campo é obrigatório às vezes Execute verificações de validação em um campo somente se esse campo estiver presente na matriz de entrada e-mail A entrada é um email válido max:valor O valor de entrada deve estar abaixo do valor máximo exclusivo:db_table_name O valor de entrada deve ser exclusivo no nome da tabela de banco de dados fornecida aceito Sim / Ligado / 1 verdadeiro, útil para verificar TOS active_url Deve ser um URL válido de acordo com checkdnsrr depois de :data O campo em validação deve fornecer um valor após a data indicada alfa O campo sob validação deve ser inteiramente de caracteres alfabéticos.</description>
    </item>
    
    <item>
      <title>Semeando</title>
      <link>https://www.wikiod.com/pt/laravel/semeando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/semeando/</guid>
      <description>A propagação de banco de dados permite inserir dados, dados de teste gerais em seu banco de dados. Por padrão existe uma classe DatabaseSeeder em database/seeds.
Semeadores em execução podem ser feitos com
php artisan db:seed Ou se você deseja processar apenas uma única classe
php artisan db:seed --class=TestSeederClass Tal como acontece com todos os comandos do artisan, você tem acesso a uma ampla variedade de métodos que podem ser encontrados na documentação da api</description>
    </item>
    
    <item>
      <title>Instalação</title>
      <link>https://www.wikiod.com/pt/laravel/instalacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/instalacao/</guid>
      <description>Instalação # Os aplicativos Laravel são instalados e gerenciados com o Composer, um gerenciador de dependências PHP popular. Existem duas maneiras de criar um novo aplicativo Laravel.
Via Compositor # $ composer create-project laravel/laravel [foldername] Ou
$ composer create-project --prefer-dist laravel/laravel [foldername] Substitua [foldername] pelo nome do diretório no qual você deseja que seu novo aplicativo Laravel seja instalado. Não deve existir antes da instalação. Você também pode precisar adicionar o executável do Composer ao caminho do sistema.</description>
    </item>
    
    <item>
      <title>Coleções</title>
      <link>https://www.wikiod.com/pt/laravel/colecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/colecoes/</guid>
      <description>Sintaxe # $coleção = coletar([&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, &amp;lsquo;Valor3&amp;rsquo;]); // Chaves padrão para 0, 1, 2, &amp;hellip;, Illuminate\Support\Collection fornece uma interface fluente e conveniente para lidar com arrays de dados. Você pode muito bem ter usado isso sem saber, por exemplo, consultas de modelo que buscam vários registros retornam uma instância de Illuminate\Support\Collection.
Para documentação atualizada sobre Coleções, você pode encontrar a documentação oficial aqui
Criando coleções # Usando o auxiliar collect(), você pode criar facilmente novas instâncias de coleção passando um array como:</description>
    </item>
    
    <item>
      <title>Modelos de lâminas</title>
      <link>https://www.wikiod.com/pt/laravel/modelos-de-laminas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/modelos-de-laminas/</guid>
      <description>O Laravel suporta o mecanismo de modelagem Blade pronto para uso. O motor de templates Blade nos permite criar templates master e templates filhos carregando conteúdo de templates master, podemos ter variáveis, loops e declarações condicionais dentro do arquivo blade.
Visualizações: introdução # As visualizações, em um padrão MVC, contêm a lógica de como apresentar dados ao usuário. Em um aplicativo da Web, normalmente eles são usados ​​para gerar a saída HTML que é enviada de volta aos usuários com cada resposta.</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/laravel/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/roteamento/</guid>
      <description>Roteamento Básico # O roteamento define um mapa entre métodos HTTP e URIs de um lado e ações do outro. As rotas são normalmente escritas no arquivo app/Http/routes.php.
Em sua forma mais simples, uma rota é definida chamando o método HTTP correspondente na fachada Route, passando como parâmetros uma string que corresponde ao URI (relativo à raiz do aplicativo) e um retorno de chamada.
Por exemplo: uma rota para o URI raiz do site que retorna uma visualização home se parece com isso:</description>
    </item>
    
    <item>
      <title>Migrações de banco de dados</title>
      <link>https://www.wikiod.com/pt/laravel/migracoes-de-banco-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/laravel/migracoes-de-banco-de-dados/</guid>
      <description>Dentro de uma migração de banco de dados # Cada migração deve ter um método up() e um método down(). O objetivo do método up() é realizar as operações necessárias para colocar o esquema do banco de dados em seu novo estado, e o objetivo do método down() é reverter quaisquer operações executadas pelo método up() método. Garantir que o método down() reverta corretamente suas operações é fundamental para poder reverter as alterações do esquema do banco de dados.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do couchdb on </title>
    <link>https://www.wikiod.com/pt/docs/couchdb/</link>
    <description>Recent content in Tutorial do couchdb on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/couchdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao couchdb</title>
      <link>https://www.wikiod.com/pt/couchdb/introducao-ao-couchdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/couchdb/introducao-ao-couchdb/</guid>
      <description>Instalação e configuração # #Ubuntu
Nas versões recentes do Ubuntu, você pode instalar uma versão atualizada do CouchDB com sudo apt-get install couchdb. Para versões mais antigas, como o Ubuntu 14.04, você deve executar:
sudo add-apt-repository ppa:couchdb/stable -y sudo apt-get update sudo apt-get install couchdb -y Fedora # Para instalar o couchdb no fedora você pode fazer sudo dnf install couchdb
Mac OS X # Para instalar o CouchDB no Mac OS X, você pode instalar o aplicativo para Mac na seção de downloads do CouchDB.</description>
    </item>
    
    <item>
      <title>Cliente Java Ektorp</title>
      <link>https://www.wikiod.com/pt/couchdb/cliente-java-ektorp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/couchdb/cliente-java-ektorp/</guid>
      <description>Teste
Abrindo uma conexão com o CouchDB # HttpClient httpClient = new StdHttpClient.Builder(). url(&amp;quot;http://yourcouchdbhost:5984&amp;quot;). username(&amp;quot;admin&amp;quot;). password(&amp;quot;password&amp;quot;). build(); CouchDbInstance dbInstance = new StdCouchDbInstance(httpClient); CRUD simples com POJOs # Uma das grandes coisas sobre Ektorp, é que ele fornece funcionalidade semelhante a ORM, direto da caixa. Este exemplo o guiará pela criação de um POJO simples e pela operação CRUD padrão nele
Criando um POJO simples # Primeiro, definimos um POJO da seguinte forma</description>
    </item>
    
    <item>
      <title>Documentos de projeto</title>
      <link>https://www.wikiod.com/pt/couchdb/documentos-de-projeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/couchdb/documentos-de-projeto/</guid>
      <description>Os documentos de design se comportam como todos os documentos em termos de revisões, replicação e conflitos. Você também pode adicionar anexos a documentos de design.
_design/exemplo # Os documentos de design contêm a lógica do aplicativo. Qualquer documento em um banco de dados que tenha um _id começando com &amp;ldquo;_design/&amp;rdquo; pode ser usado como documento de design. Normalmente, há um documento de design para cada aplicativo.
{ &amp;quot;_id&amp;quot;: &amp;quot;_design/example&amp;quot;, &amp;quot;view&amp;quot;: { &amp;quot;foo&amp;quot;: { &amp;quot;map&amp;quot;: &amp;quot;function(doc){.</description>
    </item>
    
    <item>
      <title>Visualizações</title>
      <link>https://www.wikiod.com/pt/couchdb/visualizacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/couchdb/visualizacoes/</guid>
      <description>Visualizações para pessoas # Para mostrar como funcionam as visualizações, vamos supor que queremos consultar o documento do tipo pessoas. Para fazer isso, primeiro precisaremos de um documento de design que conterá nossas visualizações.
Observação: para fins de exemplo, usaremos muitas visualizações dentro de 1 documento de design. Portanto, em um ambiente de produção, você pode preferir ter 1 exibição por documento de design. O motivo é que toda vez que você atualiza o documento de design, todas as visualizações são executadas novamente (pelo menos para Cloudant).</description>
    </item>
    
  </channel>
</rss>

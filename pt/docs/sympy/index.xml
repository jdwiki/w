<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sympy Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/sympy/</link>
    <description>Recent content in sympy Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sympy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Sympy</title>
      <link>https://www.wikiod.com/pt/sympy/introducao-ao-sympy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sympy/introducao-ao-sympy/</guid>
      <description>Instalando o SymPy # A maneira mais fácil e recomendada de instalar o SymPy é instalar o Anaconda.
Se você já tem o Anaconda ou Miniconda instalado, você pode instalar a versão mais recente com o conda:
conda install sympy Outra maneira de instalar o SymPy é usando o pip:
pip install sympy Observe que isso pode exigir privilégios de root, portanto, pode ser necessário
sudo pip install sympy A maioria das distribuições Linux também oferece SymPy em seus repositórios de pacotes.</description>
    </item>
    
    <item>
      <title>Cálculo diferencial</title>
      <link>https://www.wikiod.com/pt/sympy/calculo-diferencial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sympy/calculo-diferencial/</guid>
      <description>Otimização não linear restrita # Declaração do problema:
Encontre o mínimo (sobre x, y) da função f(x,y), sujeito a g(x,y)=0, onde f(x,y) = 2 * x**2 + 3 * y**2 e g(x,y) = x**2 + y* *2 - 4.
Solução: Resolveremos este problema executando as seguintes etapas:
Especifique a função Lagrangiana para o problema Determinar as condições de Karush-Kuhn-Tucker (KKT) Encontre as tuplas (x,y) que satisfazem as condições KKT Determine quais dessas tuplas (x,y) correspondem ao mínimo de f(x,y) Primeiro, defina as variáveis ​​de otimização, bem como as funções objetivo e de restrição:</description>
    </item>
    
    <item>
      <title>Equações</title>
      <link>https://www.wikiod.com/pt/sympy/equacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sympy/equacoes/</guid>
      <description>Resolva o sistema de equações lineares # import sympy as sy x1, x2 = sy.symbols(&amp;quot;x1 x2&amp;quot;) equations = [ sy.Eq( 2*x1 + 1*x2 , 10 ), sy.Eq( 1*x1 - 2*x2 , 11 ) ] print sy.solve(equations) # Result: {x1: 31/5, x2: -12/5} Resolva uma única equação # import sympy as sy # Symbols have to be defined before one can use them x = sy.S(&#39;x&#39;) # Definition of the equation to be solved eq=sy.</description>
    </item>
    
    <item>
      <title>Solucionadores</title>
      <link>https://www.wikiod.com/pt/sympy/solucionadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sympy/solucionadores/</guid>
      <description>A partir da versão 1.0 do Sympy, talvez a principal coisa a entender sobre o uso de seus solucionadores é que &amp;lsquo;solveset assumirá solve interna ou externamente&amp;rsquo;. Neste ponto, o solveset já deve ser usado para resolver equações univariadas e sistemas de equações lineares.
Resolvendo uma desigualdade univariada # &amp;gt;&amp;gt;&amp;gt; from sympy.solvers.inequalities import solve_univariate_inequality &amp;gt;&amp;gt;&amp;gt; from sympy import var &amp;gt;&amp;gt;&amp;gt; x=var(&#39;x&#39;) &amp;gt;&amp;gt;&amp;gt; solve_univariate_inequality(2*x**2-6&amp;gt;1,x,relational=False) (-oo, -sqrt(14)/2) U (sqrt(14)/2, oo) O parâmetro relational=False simplesmente indica como os resultados devem ser renderizados.</description>
    </item>
    
  </channel>
</rss>

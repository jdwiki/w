<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do codeigniter on </title>
    <link>https://www.wikiod.com/pt/docs/codeigniter/</link>
    <description>Recent content in Tutorial do codeigniter on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/codeigniter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao codeigniter</title>
      <link>https://www.wikiod.com/pt/codeigniter/introducao-ao-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/introducao-ao-codeigniter/</guid>
      <description>Instalação e configuração # Ambiente Windows # Instale XAMPP ou WAMP Baixe e descompacte o pacote em Codeigniter.com Extraia todo o documento no espaço do servidor (diretório htdocs ou www) Ambiente Mac # Instale MAMP Baixe e descompacte o pacote em Codeigniter.com Extraia todo o documento no espaço do servidor (htdocs) Ambiente Linux # Baixe e descompacte o pacote em Codeigniter.com Coloque a pasta extraída em /var/www (em WAMP) ou xampp/htdocs (XAMPP) GitHubGenericName # git clone https://github.</description>
    </item>
    
    <item>
      <title>Uso de ganchos</title>
      <link>https://www.wikiod.com/pt/codeigniter/uso-de-ganchos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/uso-de-ganchos/</guid>
      <description>Pontos de Gancho # pre_system # Chamado muito cedo durante a execução do sistema. Apenas a classe benchmark e hooks foram carregadas neste momento. Nenhum roteamento ou outros processos ocorreram.
pre_controller # Chamado imediatamente antes de qualquer um de seus controladores ser chamado. Todas as classes base, roteamento e verificações de segurança foram feitas.
post_controller_constructor # Chamado imediatamente após o seu controlador ser instanciado, mas antes de qualquer chamada de método acontecer.</description>
    </item>
    
    <item>
      <title>Como definir o fuso horário no CodeIgniter</title>
      <link>https://www.wikiod.com/pt/codeigniter/como-definir-o-fuso-horario-no-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/como-definir-o-fuso-horario-no-codeigniter/</guid>
      <description>Como definir o fuso horário no CodeIgniter # Colocar date_default_timezone_set(&#39;Asia/Kolkata&#39;); em config.php acima da URL base também funciona.
PHP Lista de fusos horários suportados
application/config.php
&amp;lt;?php defined(&#39;BASEPATH&#39;) OR exit(&#39;No direct script access allowed&#39;); date_default_timezone_set(&#39;Asia/Kolkata&#39;); Outra maneira que achei útil é se você deseja definir um fuso horário para cada usuário:
Crie um arquivo MY_Controller.php.
Crie uma coluna em sua tabela user, você pode nomeá-la como fuso horário ou qualquer outra coisa que desejar.</description>
    </item>
    
    <item>
      <title>URL base no Codeigniter</title>
      <link>https://www.wikiod.com/pt/codeigniter/url-base-no-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/url-base-no-codeigniter/</guid>
      <description>Configurando seu URL base no Codeigniter # Você precisará definir sua URL base em application/config/config.php
Se não estiver definido, o CodeIgniter tentará adivinhar o protocolo e o caminho para sua instalação, mas devido a questões de segurança, o nome do host será definido para $_SERVER[&#39;SERVER_ADDR&#39;] se disponível, ou localhost caso contrário. O mecanismo de detecção automática existe apenas por conveniência durante desenvolvimento e NÃO DEVE ser usado em produção!
$config[&#39;base_url&#39;] = &#39;&#39;; Deve ser arquivado como</description>
    </item>
    
    <item>
      <title>Vamos começar Olá Mundo</title>
      <link>https://www.wikiod.com/pt/codeigniter/vamos-comecar-ola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/vamos-comecar-ola-mundo/</guid>
      <description>Um aplicativo Hello World muito simples # A partir de uma nova instalação do Codeigniter 3, aqui está uma maneira simples de começar com um aplicativo Hello World, para quebrar o gelo com este sólido framework PHP.
Para fazer isso, você pode começar a criar a visualização que queremos que seja mostrada em nosso aplicativo Hello World.
Vamos colocá-lo na pasta do seu aplicativo, aqui:
Em hello_world.php(/application/views/)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World!</description>
    </item>
    
    <item>
      <title>Usando o modelo no codeigniter</title>
      <link>https://www.wikiod.com/pt/codeigniter/usando-o-modelo-no-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/usando-o-modelo-no-codeigniter/</guid>
      <description>Chamando a função de modelo # Sintaxe
$this-&amp;gt;load-&amp;gt;model(&#39;model_name&#39;); $this-&amp;gt;model_name-&amp;gt;method_name(); Prática
$this-&amp;gt;load-&amp;gt;model(&#39;home_model&#39;); $this-&amp;gt;home_model-&amp;gt;get_data(); Criando Modelo # Vá para aplicativo/modelo
Nome do arquivo - Home_model.php Dentro do arquivo
class Home_model extends CI_Model { public $variable; public function __construct() { parent::__construct(); } public function get_data() { $query = $this-&amp;gt;db-&amp;gt;get(&#39;table_name&#39;, 10); return $query-&amp;gt;result_array(); } } E quando você precisa carregar este modelo:
$this-&amp;gt;load-&amp;gt;model(&#39;home_model&#39;); $this-&amp;gt;home_model-&amp;gt;get_data(); Ou se você quiser que seu modelo seja atribuído a um nome de objeto diferente, você pode especificá-lo assim:</description>
    </item>
    
    <item>
      <title>Carregador de imagemarquivo no CodeIgniter</title>
      <link>https://www.wikiod.com/pt/codeigniter/carregador-de-imagemarquivo-no-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/carregador-de-imagemarquivo-no-codeigniter/</guid>
      <description>Não é necessário que você tenha que usar os mesmos nomes para o (Controller,File,Class,ID) ou o que quer que seja. Todas as coisas que usei são para o propósito de compreensão do fluxo de codificação e minhas suposições. Cabe ao desenvolvedor que pega o código e edita o código/nome de acordo com seu desejo e então hospeda o código e obtém sucesso.
Uploader de arquivo/imagem único # Veremos agora como o código Image/File Uploading funciona no método CI nativo com a ajuda dos formulários propostos pelo modo CI.</description>
    </item>
    
    <item>
      <title>Como usar as bibliotecas e o auxiliar de CI</title>
      <link>https://www.wikiod.com/pt/codeigniter/como-usar-as-bibliotecas-e-o-auxiliar-de-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/como-usar-as-bibliotecas-e-o-auxiliar-de-ci/</guid>
      <description>Usando bibliotecas e auxiliares # O exemplo é para fins ilustrativos do uso de bibliotecas e auxiliares e não de um código válido. Não copie/cole em seus projetos.
AJUDANTE helpers/sendEmail_helper.php
if ( ! function_exists(&#39;sendEmail&#39;)) { function sendEmail($email, $subject, $message, $lang, $cc = null, $file = null) { $CI =&amp;amp; get_instance(); $mail_config[&#39;protocol&#39;] = &#39;smtp&#39;; $mail_config[&#39;smtp_host&#39;] = &#39;host&#39;; $mail_config[&#39;smtp_user&#39;] = &#39;user&#39;; $mail_config[&#39;smtp_pass&#39;] = &#39;pass&#39;; $mail_config[&#39;smtp_port&#39;] = &#39;587&#39;; $mail_config[&#39;smtp_timeout&#39;] = 5; $mail_config[&#39;charset&#39;] = &#39;utf-8&#39;; $mail_config[&#39;mailtype&#39;] = &#39;html&#39;; $mail_config[&#39;wrapchars&#39;] = 76; $mail_config[&#39;wordwrap&#39;] = TRUE; $CI-&amp;gt;email-&amp;gt;initialize($mail_config); $CI-&amp;gt;email-&amp;gt;set_newLine(&#39;\r\n&#39;); if ($lang == &amp;quot;en&amp;quot;){ $CI-&amp;gt;email-&amp;gt;from(&#39;support.</description>
    </item>
    
    <item>
      <title>Protegendo seu aplicativo da web</title>
      <link>https://www.wikiod.com/pt/codeigniter/protegendo-seu-aplicativo-da-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/protegendo-seu-aplicativo-da-web/</guid>
      <description>Lembre-se que o CodeIgniter é um Framework de desenvolvimento. Ele não se esforça para tornar seu aplicativo seguro. Ele apenas lhe dá as ferramentas para fazer isso sozinho. Se você olhar para a página de segurança do CI, fica bem claro que eles esperam que o desenvolvedor entenda a segurança do aplicativo e a construa em seu aplicativo.
Se a segurança do WebApp for relativamente nova para você, eu começaria com o OWASP.</description>
    </item>
    
    <item>
      <title>Validação de formulário</title>
      <link>https://www.wikiod.com/pt/codeigniter/validacao-de-formulario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/codeigniter/validacao-de-formulario/</guid>
      <description>Exemplo de formulário de validação # // initialize library $this-&amp;gt;load-&amp;gt;library(&#39;form_validation&#39;); $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;username&#39;, &#39;Username&#39;, &#39;required|max_length[20]&#39;); // Add validation rules for require and max $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;password&#39;, &#39;Password&#39;, &#39;required|matches[password]&#39;); // Validation for the input match $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;passconf&#39;, &#39;Password Confirmation&#39;, &#39;required&#39;); $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;email&#39;, &#39;Email&#39;, &#39;required|valid_email|is_unique[userTable.emailColumn&#39;); // add validation for the email and check the emailColumn in userTable for unique value $this-&amp;gt;form_validation-&amp;gt;set_message(&#39;is_unique&#39;, &#39;The %s is already taken, Please use another %s&#39;); // add message for the is_unique if ($this-&amp;gt;form_validation-&amp;gt;run() === FALSE) { // fail } else { // success } Link</description>
    </item>
    
  </channel>
</rss>

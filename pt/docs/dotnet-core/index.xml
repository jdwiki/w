<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial .net-core on </title>
    <link>https://www.wikiod.com/pt/docs/dotnet-core/</link>
    <description>Recent content in Tutorial .net-core on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao .net-core</title>
      <link>https://www.wikiod.com/pt/dotnet-core/introducao-ao-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/introducao-ao-net-core/</guid>
      <description>Criando um aplicativo de exemplo Hello World # Crie um diretório vazio em algum lugar &amp;hellip;
mkdir HelloWorld cd HelloWorld Em seguida, use a tecnologia de andaimes integrada para criar uma amostra Hello World
dotnet new console -o Este comando cria dois arquivos:
HelloWorld.csproj descreve as dependências do projeto, configurações e estrutura de destino Program.cs que define o código fonte para o ponto de entrada principal e o console emitindo &amp;ldquo;Hello World&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Entendendo System.Runtime vs. mscorlib</title>
      <link>https://www.wikiod.com/pt/dotnet-core/entendendo-systemruntime-vs-mscorlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/entendendo-systemruntime-vs-mscorlib/</guid>
      <description>Cada biblioteca .NET e linguagem de programação utilizam um conjunto de tipos de dados elementares como System.Int32, System.Object, System.Type ou System.Uri. Esses tipos de dados formam a base de todas as outras estruturas, incluindo todas as bibliotecas .NET escritas personalizadas. Todos esses tipos são hospedados em uma biblioteca base, que é mscorlib ou System.Runtime.
As bibliotecas que podem ser usadas com o .NET Core são baseadas na biblioteca principal System.Runtime enquanto para o .</description>
    </item>
    
    <item>
      <title>Componentes e controle de versão no .NET Core</title>
      <link>https://www.wikiod.com/pt/dotnet-core/componentes-e-controle-de-versao-no-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/componentes-e-controle-de-versao-no-net-core/</guid>
      <description>Este documento abrange os diferentes componentes que compõem uma distribuição do .NET Core e como eles são versionados. Este documento atualmente abrange as versões 1.x.
Como os componentes no .NET Core são versionados.
Componentes # O .NET Core consiste em vários componentes, cada um com versão independentemente e muitas vezes podem ser misturados e combinados.
Estrutura Compartilhada. Este contém as APIs e a Máquina Virtual e outros serviços de tempo de execução necessários para executar aplicativos .</description>
    </item>
    
    <item>
      <title>O global.json</title>
      <link>https://www.wikiod.com/pt/dotnet-core/o-globaljson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/o-globaljson/</guid>
      <description>O arquivo global.json é extremamente poderoso e exclusivo para aplicativos .NET Core e ASP.NET Core.
Esquema # Armazenamento de esquema:
{ &amp;quot;title&amp;quot;: &amp;quot;JSON schema for the ASP.NET global configuration files&amp;quot;, &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;additionalProperties&amp;quot;: true, &amp;quot;required&amp;quot;: [ &amp;quot;projects&amp;quot; ], &amp;quot;properties&amp;quot;: { &amp;quot;projects&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A list of project folders relative to this file.&amp;quot;, &amp;quot;items&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } }, &amp;quot;packages&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;The location to store packages&amp;quot; }, &amp;quot;sdk&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Specify information about the SDK.</description>
    </item>
    
    <item>
      <title>Criando bibliotecas com .NET Core</title>
      <link>https://www.wikiod.com/pt/dotnet-core/criando-bibliotecas-com-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/criando-bibliotecas-com-net-core/</guid>
      <description>Dependências específicas da plataforma # Você pode especificar diferentes dependências para cada plataforma:
&amp;quot;net45&amp;quot;: { &amp;quot;frameworkAssemblies&amp;quot;: { &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } }, &amp;quot;netstandard1.3&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0-rc2&amp;quot; } }, &amp;quot;netstandard1.4&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } } Quando este projeto é compilado e compactado, cada destino de estrutura usará um conjunto diferente de dependências:
net45 (projetos direcionados ao .NET 4.5+) usará o assembly System.Linq do GAC. netstandard1.</description>
    </item>
    
    <item>
      <title>.NET Core com Docker</title>
      <link>https://www.wikiod.com/pt/dotnet-core/net-core-com-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/net-core-com-docker/</guid>
      <description>Preencha com exemplos de uso do Docker na plataforma .NET Core, imagens de base oficiais para o aplicativo .NET Core e também o aplicativo .NET Core auto-hospedado
Exemplo de arquivo Docker # O aplicativo .NET Core deve ser publicado usando dotnet publish
FROM microsoft/dotnet:latest COPY bin/Debug/netcoreapp1.0/publish/ /root/ EXPOSE 5000 ENTRYPOINT dotnet /root/sampleapp.dll </description>
    </item>
    
    <item>
      <title>Interface de linha de comando do .NET Core</title>
      <link>https://www.wikiod.com/pt/dotnet-core/interface-de-linha-de-comando-do-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/interface-de-linha-de-comando-do-net-core/</guid>
      <description>Criando um pacote NuGet # Para criar um pacote NuGet de um projeto, execute este comando em um diretório que contém project.json:
dotnet pack O arquivo .nupkg resultante será nomeado e versionado de acordo com as propriedades em project.json. Se houver vários frameworks direcionados no arquivo de projeto, o pacote oferecerá suporte a todos eles.
Publicar e executar um projeto .NET Core # Acesse o diretório project.json e publique:
dotnet publish Ele imprimirá o diretório de saída da operação, entrará no diretório e executará o projeto publicado:</description>
    </item>
    
    <item>
      <title>Instalando o .NET Core no Linux</title>
      <link>https://www.wikiod.com/pt/dotnet-core/instalando-o-net-core-no-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/instalando-o-net-core-no-linux/</guid>
      <description>Instalação genérica para distribuições Linux # Se você tiver uma das distribuições Linux com suporte, poderá seguir as etapas no site do .NET Core: https://www.microsoft.com/net
Se você tiver uma distribuição sem suporte:
Baixe o .NET Core SDK nos links, escolhendo a distribuição mais próxima da usada.
https://www.microsoft.com/net/download
Se você tem suporte para pacotes deb, você pode instalar pacotes Ubuntu/Debian.
Se você tiver suporte para pacotes yum, poderá instalar pacotes do Fedora.</description>
    </item>
    
    <item>
      <title>Primeiros passos com appsetting.json</title>
      <link>https://www.wikiod.com/pt/dotnet-core/primeiros-passos-com-appsettingjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dotnet-core/primeiros-passos-com-appsettingjson/</guid>
      <description>Se precisar de mais informações, acesse documentação oficial da microsoft
Configuração simples # Adicione este texto ao appsettings.json
{ &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: 2, &amp;quot;subsectionKey&amp;quot;: { &amp;quot;suboption1&amp;quot;: &amp;quot;subvalue1&amp;quot; } } Agora você pode usar esta configuração em seu aplicativo, desta forma
public class Program { static public IConfigurationRoot Configuration { get; set; } public static void Main(string[] args = null) { var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;quot;appsettings.json&amp;quot;); Configuration = builder.Build(); Console.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de inicialização de mola on </title>
    <link>https://www.wikiod.com/pt/docs/spring-boot/</link>
    <description>Recent content in Tutorial de inicialização de mola on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o spring-boot</title>
      <link>https://www.wikiod.com/pt/spring-boot/comecando-com-o-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/comecando-com-o-spring-boot/</guid>
      <description>Instalação ou configuração # A configuração com o Spring Boot pela primeira vez é bastante rápida graças ao trabalho árduo da Comunidade Spring.
Pré-requisitos:
Java instalado Java IDE Recomendado não necessário (Intellij, Eclipse, Netbeans, etc.) Você não precisa ter Maven e/ou Gradle instalados. Os projetos gerados pelo Spring Initializr vêm com um Maven Wrapper (comando mvnw) ou Gradle Wrapper (comando gradlew).
Abra seu navegador da Web para https://start.spring.io Esta é uma barra de lançamento para criar novos aplicativos Spring Boot, por enquanto iremos com o mínimo.</description>
    </item>
    
    <item>
      <title>Criar e usar vários arquivos application.properties</title>
      <link>https://www.wikiod.com/pt/spring-boot/criar-e-usar-varios-arquivos-applicationproperties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/criar-e-usar-varios-arquivos-applicationproperties/</guid>
      <description>Ambiente de desenvolvimento e produção usando diferentes fontes de dados # Após a configuração bem-sucedida do aplicativo Spring-Boot, toda a configuração é tratada em um arquivo application.properties. Você encontrará o arquivo em src/main/resources/.
Normalmente é necessário ter um banco de dados por trás do aplicativo. Para desenvolvimento é bom ter uma configuração de ambientes dev e prod. Usando vários arquivos application.properties você pode dizer ao Spring-Boot com qual ambiente o aplicativo deve iniciar.</description>
    </item>
    
    <item>
      <title>Serviços REST</title>
      <link>https://www.wikiod.com/pt/spring-boot/servicos-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/servicos-rest/</guid>
      <description>Parâmetros # Anotação Coluna @Controller Indica que uma classe anotada é um &amp;ldquo;Controller&amp;rdquo; (controlador da web). @RequestMapping Anotação para mapear solicitações da web em classes de manipulador específicas (se usamos com classe) e/ou métodos de manipulador (se usamos com métodos). método = RequestMethod.GET Tipo de métodos de solicitação HTTP RespostaCorpo A anotação que indica um valor de retorno de método deve ser vinculada ao corpo da resposta da web @RestController @Controller + ResponseBody @ResponseEntity Extensão de HttpEntity que adiciona um código de status HttpStatus, podemos controlar o código http de retorno Criando um serviço REST # Crie um projeto usando STS (Spring Starter Project) ou Spring Initializr (em https://start.</description>
    </item>
    
    <item>
      <title>Verificação de pacotes</title>
      <link>https://www.wikiod.com/pt/spring-boot/verificacao-de-pacotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/verificacao-de-pacotes/</guid>
      <description>Neste tópico, apresentarei uma visão geral da verificação do pacote de inicialização da primavera.
Você pode encontrar algumas informações básicas nos documentos de inicialização de primavera no link a seguir ([using-boot-structuring-your-code](http://docs.spring.io/spring-boot/docs/current/reference/html/using -boot-structuring-your-code.html)), mas tentarei fornecer informações mais detalhadas.
Spring boot, e spring em geral, fornecem um recurso para varrer automaticamente os pacotes para certas anotações para criar beans e configuration.
Parâmetros # Anotação Detalhes @SpringBootApplication Anotação do aplicativo de inicialização da mola principal.</description>
    </item>
    
    <item>
      <title>Testando no Spring Boot</title>
      <link>https://www.wikiod.com/pt/spring-boot/testando-no-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/testando-no-spring-boot/</guid>
      <description>Como testar um aplicativo Spring Boot simples # Temos um aplicativo Spring boot de amostra que armazena dados do usuário no MongoDB e estamos usando serviços Rest para recuperar dados
Primeiro, há uma classe de domínio, ou seja, POJO
@Document public class User{ @Id private String id; private String name; } Um repositório correspondente baseado no Spring Data MongoDB
public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; { } Então nosso controlador de usuário</description>
    </item>
    
    <item>
      <title>Cache com Redis usando Spring Boot para MongoDB</title>
      <link>https://www.wikiod.com/pt/spring-boot/cache-com-redis-usando-spring-boot-para-mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/cache-com-redis-usando-spring-boot-para-mongodb/</guid>
      <description>Por que Cache? # Hoje, o desempenho é uma das métricas mais importantes que precisamos avaliar ao desenvolver um serviço/aplicativo web. Manter os clientes engajados é fundamental para qualquer produto e, por isso, é extremamente importante melhorar o desempenho e reduzir o tempo de carregamento da página.
Ao executar um servidor web que interage com um banco de dados, suas operações podem se tornar um gargalo. O MongoDB não é exceção aqui e, à medida que nosso banco de dados MongoDB aumenta, as coisas podem realmente ficar mais lentas.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Spring Data JPA</title>
      <link>https://www.wikiod.com/pt/spring-boot/spring-boot--spring-data-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/spring-boot--spring-data-jpa/</guid>
      <description>O Spring Boot facilita a criação de aplicativos e serviços baseados em Spring, de nível de produção, com o mínimo de confusão. Favorece a convenção sobre a configuração.
Spring Data JPA, parte da família maior Spring Data, facilita a implementação de repositórios baseados em JPA. Facilita a criação de aplicativos que usam tecnologias de acesso a dados.
anotações # @Repository: Indica que uma classe anotada é um &amp;ldquo;Repositório&amp;rdquo;, um mecanismo para encapsular armazenamento, recuperação e comportamento de pesquisa que emula uma coleção de objetos.</description>
    </item>
    
    <item>
      <title>Aplicativo Web Spring Boot totalmente responsivo com JHipster</title>
      <link>https://www.wikiod.com/pt/spring-boot/aplicativo-web-spring-boot-totalmente-responsivo-com-jhipster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/aplicativo-web-spring-boot-totalmente-responsivo-com-jhipster/</guid>
      <description>Crie o aplicativo Spring Boot usando jHipster no Mac OS # O jHipster permite inicializar um aplicativo da Web Spring Boot com um back-end de API REST e um front-end AngularJS e Twitter Bootstrap.
Mais sobre o jHipster aqui: Documentação do jHipster
Instale a bebida:
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Veja informações adicionais sobre como instalar o brew aqui: Install Brew
Instalar Gradle
Gradle é um sistema de gerenciamento e compilação de dependências.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Hibernate &#43; Web UI (Thymeleaf)</title>
      <link>https://www.wikiod.com/pt/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</guid>
      <description>Este tópico está focado em como criar um aplicativo de inicialização por mola com o mecanismo de modelo hibernate e thymyleaf.
Verifique também a documentação do Thymeleaf
Configuração de hibernação # Primeiro, vamos ver o que precisamos para configurar o Hibernate corretamente.
@EnableTransactionManagement e @EnableJpaRepositories - queremos gerenciamento transacional e usar repositórios de dados de mola. DataSource - fonte de dados principal da aplicação. usando h2 na memória para este exemplo.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; JPA &#43; mongoDB</title>
      <link>https://www.wikiod.com/pt/spring-boot/spring-boot--jpa--mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-boot/spring-boot--jpa--mongodb/</guid>
      <description>Controlador do cliente # package org.bookmytickets.controller; import java.util.List; import org.bookmytickets.model.Customer; import org.bookmytickets.repository.CustomerRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = &amp;quot;/customer&amp;quot;) public class CustomerController { @Autowired private CustomerRepository repository; @GetMapping(&amp;quot;&amp;quot;) public List&amp;lt;Customer&amp;gt; selectAll(){ List&amp;lt;Customer&amp;gt; customerList = repository.findAll(); return customerList; } @GetMapping(&amp;quot;/{id}&amp;quot;) public List&amp;lt;Customer&amp;gt; getSpecificCustomer(@PathVariable String id){ return repository.findById(id); } @GetMapping(&amp;quot;/search/lastName/{lastName}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByLastName(@PathVariable String lastName){ return repository.findByLasttName(lastName); } @GetMapping(&amp;quot;/search/firstname/{firstname}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByFirstName(@PathVariable String firstName){ return repository.</description>
    </item>
    
  </channel>
</rss>

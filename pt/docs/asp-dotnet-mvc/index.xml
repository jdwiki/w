<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial asp.net-mvc on </title>
    <link>https://www.wikiod.com/pt/docs/asp-dotnet-mvc/</link>
    <description>Recent content in Tutorial asp.net-mvc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/asp-dotnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com asp.net-mvc</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/comecando-com-aspnet-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/comecando-com-aspnet-mvc/</guid>
      <description>Olá MVC! # ASP.NET MVC é uma estrutura de aplicativo da Web de código aberto. O próprio MVC é um padrão de design que é construído em torno de três componentes principais: model-view-controller.
Modelo - Os modelos refletem seus objetos de negócios e são um meio de passar dados entre controladores e exibições.
Visualização - Visualizações são as páginas que renderizam e exibem os dados do modelo para o usuário. As exibições ASP.</description>
    </item>
    
    <item>
      <title>Html.AntiForgeryToken</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/htmlantiforgerytoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/htmlantiforgerytoken/</guid>
      <description>O token antifalsificação pode ser usado para ajudar a proteger seu aplicativo contra falsificação de solicitação entre sites. Para usar esse recurso, chame o método AntiForgeryToken de um formulário e adicione o atributo ValidateAntiForgeryTokenAttribute ao método de ação que você deseja proteger.
Gera um campo de formulário oculto (token antifalsificação) que é validado quando o formulário é enviado.
Sintaxe # @Html.AntiForgeryToken() Ao enviar uma solicitação ajax com token CSRF (__RequestVerificationToken), certifique-se de que o tipo de conteúdo não esteja definido como application/json.</description>
    </item>
    
    <item>
      <title>Navalha</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/navalha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/navalha/</guid>
      <description>O que é Navalha?
Razor é uma sintaxe de marcação que permite incorporar código baseado em servidor (Visual Basic e C#) em páginas da Web.
O código baseado em servidor pode criar conteúdo dinâmico da Web em tempo real, enquanto uma página da Web é gravada no navegador. Quando uma página da Web é chamada, o servidor executa o código baseado no servidor dentro da página antes de retornar a página ao navegador.</description>
    </item>
    
    <item>
      <title>ViewData, ViewBag, TempData</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/viewdata-viewbag-tempdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/viewdata-viewbag-tempdata/</guid>
      <description>ViewData e ViewBag são usados ​​para transferir dados do controlador para a visualização.
ViewData nada mais é do que um dicionário de objetos e é acessível por string como chave.
ViewBag é muito semelhante ao ViewData. ViewBag é uma propriedade dinâmica. ViewBag é apenas um wrapper em torno do ViewData.
O TempData mantém os dados pelo tempo da solicitação HTTP, o que significa que mantém os dados entre duas solicitações consecutivas.</description>
    </item>
    
    <item>
      <title>Anotações de dados</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/anotacoes-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/anotacoes-de-dados/</guid>
      <description>Podemos adicionar validações ao nosso aplicativo adicionando anotações de dados às nossas classes de modelo. As anotações de dados nos permitem descrever as regras que queremos aplicar às propriedades do nosso modelo, e a ASP.NET MVC cuidará de aplicá-las e exibir as mensagens apropriadas aos usuários.
Validação remota # Validação Remota usada para verificar se o conteúdo inserido no controle de entrada é válido ou não, enviando uma solicitação ajax ao lado do servidor para verificar.</description>
    </item>
    
    <item>
      <title>Html.RouteLink</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/htmlroutelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/htmlroutelink/</guid>
      <description>Parâmetros # Parâmetro Detalhes linkText O texto que será exibido para o link. nomedarota O nome da rota para a qual retornar um caminho virtual. Exemplo básico usando texto de link e nome de rota # Como alternativa ao uso de Html.ActionLink para gerar links em uma visualização, você pode usar
Html.RouteLink
Para fazer uso deste recurso, você precisa configurar uma rota, por exemplo:
public static void RegisterRoutes(RouteCollection routes) { routes.</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/roteamento/</guid>
      <description>Roteamento é como o ASP.NET MVC combina um URI com uma ação. O módulo de roteamento é responsável por mapear as solicitações recebidas do navegador para ações específicas do controlador MVC.
O MVC 5 suporta um novo tipo de roteamento, chamado roteamento de atributo. Como o nome indica, o roteamento de atributo usa atributos para definir rotas. O roteamento de atributo oferece mais controle sobre os URIs em seu aplicativo da web.</description>
    </item>
    
    <item>
      <title>Filtros de ação</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/filtros-de-acao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/filtros-de-acao/</guid>
      <description>Filtro de ação de controle de sessão - solicitação de página&amp;amp;ajax # Normalmente, os processos de autenticação e autorização são executados por suportes embutidos de cookies e tokens no .net MVC. Mas se você decidir fazer isso sozinho com Session, você pode usar a lógica abaixo para solicitações de página e solicitações ajax.
public class SessionControl : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var session = filterContext.</description>
    </item>
    
    <item>
      <title>Vinculação de modelo</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/vinculacao-de-modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/vinculacao-de-modelo/</guid>
      <description>Model binding é o processo de pegar parâmetros HTTP, normalmente na Query String de uma solicitação GET, ou no corpo POST, e aplicá-los em um objeto que pode ser validado e consumido de maneira orientada a objetos sem a necessidade de ações do Controller ter conhecimento íntimo de como recuperar parâmetros HTTP.
Em outras palavras, a vinculação de modelo é o que permite que as ações, no MVC, tenham um ou mais parâmetros, seja um tipo de valor ou um objeto.</description>
    </item>
    
    <item>
      <title>validação do modelo</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-mvc/validacao-do-modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-mvc/validacao-do-modelo/</guid>
      <description>Remover um objeto da validação # Digamos que você tenha o seguinte modelo:
public class foo { [Required] public string Email { get; set; } [Required] public string Password { get; set; } [Required] public string FullName { get; set; } } Mas você deseja excluir FullName da validação do modelo porque está usando o modelo também em um local onde FullName não está preenchido, você pode fazer isso da seguinte maneira:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de nocaute.js on </title>
    <link>https://www.wikiod.com/pt/docs/knockout-js/</link>
    <description>Recent content in Tutorial de nocaute.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/knockout-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeiros passos com knockout.js</title>
      <link>https://www.wikiod.com/pt/knockout-js/primeiros-passos-com-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/primeiros-passos-com-knockoutjs/</guid>
      <description>Começando: Olá, mundo! # Criando um documento HTML e ativando knockout.js # Crie um arquivo HTML e inclua knockout.js por meio de uma tag &amp;lt;script&amp;gt;.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello world! (knockout.js)&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-debug.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Adicione uma segunda tag &amp;lt;script&amp;gt; sob o script knockout. Nesta tag de script, inicializaremos um modelo de exibição e aplicaremos data binds ao nosso Document.
&amp;lt;script&amp;gt; var ViewModel = function() { this.greeting = ko.</description>
    </item>
    
    <item>
      <title>Encadernações</title>
      <link>https://www.wikiod.com/pt/knockout-js/encadernacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/encadernacoes/</guid>
      <description>Sintaxe # &amp;lt;!-- ko if:myObservable --&amp;gt;&amp;lt;!-- /ko --&amp;gt; &amp;lt;i data-bind=&amp;quot;if:myObservable&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; O que é uma ligação # Essencialmente, uma vinculação ou uma vinculação de dados é uma maneira de vincular seus ViewModels às suas exibições (modelos) e vice-versa. O KnockoutJS usa vinculação de dados bidirecional, o que significa que as alterações no seu ViewModel influenciam o View e as alterações no seu View podem influenciar o ViewModel.
Sob o capô (breve visão geral) # As ligações são apenas plugins (scripts) que permitem resolver uma tarefa específica.</description>
    </item>
    
    <item>
      <title>Encadernação Href</title>
      <link>https://www.wikiod.com/pt/knockout-js/encadernacao-href/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/encadernacao-href/</guid>
      <description>Não há vinculação href na biblioteca principal do KnockoutJS, razão pela qual todos os exemplos mostram outros recursos da biblioteca para obter o mesmo efeito.
Veja também esta pergunta do Stack Overflow sobre o mesmo tópico.
Usando a ligação attr # &amp;lt;a data-bind=&amp;quot;attr: { href: myUrl }&amp;quot;&amp;gt;link with dynamic href&amp;lt;/a&amp;gt; ko.applyBindings({ myUrl: ko.observable(&amp;quot;http://www.stackoverflow.com&amp;quot;) }); Como não há ligação href nativa no KnockoutJS, você precisa usar um recurso diferente para obter links dinâmicos.</description>
    </item>
    
    <item>
      <title>Equivalentes de ligações AngularJS</title>
      <link>https://www.wikiod.com/pt/knockout-js/equivalentes-de-ligacoes-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/equivalentes-de-ligacoes-angularjs/</guid>
      <description>Nem tudo no AngularJS tem um equivalente KnockoutJS (por exemplo ngCloack ou ngSrc). Existem duas soluções principais normalmente disponíveis:
Em vez disso, use a vinculação genérica attr ou event. Semelhante às diretivas personalizadas no AngularJS, você pode escrever seu próprio manipulador de vinculação personalizado se precisar de algo que não esteja incluído na biblioteca base. Se você preferir a sintaxe de vinculação AngularJS, considere usar Knockout.Punches que habilita a vinculação no estilo de guiador.</description>
    </item>
    
    <item>
      <title>Como depurar um aplicativo knockout.js</title>
      <link>https://www.wikiod.com/pt/knockout-js/como-depurar-um-aplicativo-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/como-depurar-um-aplicativo-knockoutjs/</guid>
      <description>Verificando o contexto de ligação de um elemento DOM # Muitos bugs em associações de dados knockout são causados ​​por propriedades indefinidas em um viewmodel. Knockout tem dois métodos úteis para recuperar o contexto de ligação de um elemento HTML:
// Returns the binding context to which an HTMLElement is bound ko.contextFor(element); // Returns the viewmodel to which an HTMLElement is bound // similar to: ko.contextFor(element).$data ko.dataFor(element); Para descobrir rapidamente o contexto de vinculação de um elemento de interface do usuário, aqui está um truque útil:</description>
    </item>
    
    <item>
      <title>Solicitações e vinculação AJAX</title>
      <link>https://www.wikiod.com/pt/knockout-js/solicitacoes-e-vinculacao-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/solicitacoes-e-vinculacao-ajax/</guid>
      <description>Exemplo de solicitação AJAX com vinculação # Page.html
&amp;lt;div data-bind=&amp;quot;foreach: blogs&amp;quot;&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;text: entryPostedDate&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;a data-bind=&amp;quot;attr: { href: blogEntryLink }, text: title&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;html: body&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!--- include knockout and dependencies (Jquery) ---&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;blog.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; blog.js
function vm() { var self = this; // Properties self.blogs = ko.observableArray([]); // consists of entryPostedDate, blogEntryLink, title, body var blogApi = &amp;quot;/api/blog&amp;quot;; // Load data $.</description>
    </item>
    
    <item>
      <title>Ligações personalizadas</title>
      <link>https://www.wikiod.com/pt/knockout-js/ligacoes-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/ligacoes-personalizadas/</guid>
      <description>Registro de vinculação # As ligações Cusom devem ser registradas estendendo o objeto knockout bindingHandlers atual.
Isso é feito adicionando uma nova propriedade ao objeto.
ko.bindingHandlers.newBinding = { init: function(element, valueAccessor, allBindings, viewModel, bindingContext) { }, update: function(element, valueAccessor, allBindings, viewModel, bindingContext) { } }; Ligação de visibilidade de fade in/fade out personalizada # Este exemplo implementa uma ligação personalizada que alterna a visibilidade (semelhante à ligação visível existente), mas utilizará a API fading do jQuery para animar a transição de visível para invisível.</description>
    </item>
    
    <item>
      <title>Introdução de componentes</title>
      <link>https://www.wikiod.com/pt/knockout-js/introducao-de-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/introducao-de-componentes/</guid>
      <description>Componentes permitem controles/widgets reutilizáveis ​​representados por sua própria view (template) e viewmodel. Eles foram adicionados no Knockout 3.2. Inspirado em WebComponents, Knockout permite que Componentes sejam definidos como Custom Elements, permitindo o uso de marcação mais autoexplicativa.
Barra de progresso (Boostrap) # Definição do componente
ko.components.register(&#39;progress-bar&#39;, { viewModel: function(params) { var that = this; // progress is a numeric value between 0 and 100 that.progress = params.progress; that.progressPercentual = ko.computed(function(){ return &#39;&#39; + ko.</description>
    </item>
    
    <item>
      <title>Observáveis</title>
      <link>https://www.wikiod.com/pt/knockout-js/observaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/observaveis/</guid>
      <description>Assinatura explícita para observáveis # var person = { name: ko.observable(&#39;John&#39;) }; console.log(person.name()); console.log(&#39;Update name&#39;); person.name.subscribe(function(newValue) { console.log(&amp;quot;Updated value is &amp;quot; + newValue); }); person.name(&#39;Jane&#39;); Criando um observável # JS
// data model var person = { name: ko.observable(&#39;Jack&#39;), age: ko.observable(29) }; ko.applyBindings(person); HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Name: &amp;lt;input data-bind=&#39;value: name&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Age: &amp;lt;input data-bind=&#39;value: age&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Hello, &amp;lt;span data-bind=&#39;text: name&#39;&amp;gt; &amp;lt;/span&amp;gt;!&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Trabalhando com vinculação foreach knockout com JSON</title>
      <link>https://www.wikiod.com/pt/knockout-js/trabalhando-com-vinculacao-foreach-knockout-com-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/knockout-js/trabalhando-com-vinculacao-foreach-knockout-com-json/</guid>
      <description>Trabalhando com loop aninhado # Aqui está a estrutura JSON que vamos usar.
{ &amp;quot;employees&amp;quot;: [ { &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Doe&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Anna&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;css&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Peter&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Jones&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;html&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 3 } ] } ] }; Essa estrutura json pode ser atribuída a uma variável ou pode ser uma resposta de qualquer API.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial selenium-webdriver on </title>
    <link>https://www.wikiod.com/pt/docs/selenium-webdriver/</link>
    <description>Recent content in Tutorial selenium-webdriver on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/selenium-webdriver/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao selenium-webdriver</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/introducao-ao-selenium-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/introducao-ao-selenium-webdriver/</guid>
      <description>O que é o Selenium WebDriver? # Selenium é um conjunto de ferramentas projetadas para automatizar navegadores. É comumente usado para testes de aplicativos da Web em várias plataformas. Existem algumas ferramentas disponíveis sob o guarda-chuva do Selenium, como o Selenium WebDriver (ex-Selenium RC), o Selenium IDE e o Selenium Grid.
WebDriver é uma interface de controle remoto que permite manipular elementos DOM em páginas da web, bem como comandar o comportamento de agentes do usuário.</description>
    </item>
    
    <item>
      <title>Usando anotações @FindBy em Java</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/usando-anotacoes-findby-em-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/usando-anotacoes-findby-em-java/</guid>
      <description>Sintaxe # CLASS_NAME: @FindBy(className = &amp;ldquo;classname&amp;rdquo;) CSS: @FindBy(css = &amp;ldquo;css&amp;rdquo;) ID: @FindBy(id = &amp;ldquo;id&amp;rdquo;) ID_OR_NAME: @FindBy(how = How.ID_OR_NAME, usando =&amp;ldquo;idOrName&amp;rdquo;) LINK_TEXT: @FindBy(linkText=&amp;ldquo;texto&amp;rdquo;) NOME: @FindBy(nome= &amp;ldquo;nome&amp;rdquo;) PARTIAL_LINK_TEXT: @FindBy(partialLinkText= &amp;ldquo;texto&amp;rdquo;) TAG_NAME: @FindBy(tagName=&amp;ldquo;tagname&amp;rdquo;) XPATH: @FindBy(xpath=&amp;ldquo;xpath&amp;rdquo;) Observe que existem duas maneiras de usar a anotação. Exemplos:
@FindBy(id = &amp;quot;id&amp;quot;) e
@FindBy(how = How.ID, using =&amp;quot;id&amp;quot;) são iguais e ambos procuram o elemento pelo seu ID. No caso de ID_OR_NAME você só pode usar
@FindBy(how = How.</description>
    </item>
    
    <item>
      <title>Espere</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/espere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/espere/</guid>
      <description>Tipos de espera no Selenium WebDriver # Ao executar qualquer aplicativo da web, é necessário levar em consideração o tempo de carregamento. Se seu código tentar acessar qualquer elemento que ainda não esteja carregado, o WebDriver lançará uma exceção e seu script será interrompido.
Existem três tipos de esperas -
Esperas Implícitas Esperas explícitas Esperas Fluentes As esperas implícitas são usadas para definir o tempo de espera ao longo do programa, enquanto as esperas explícitas são usadas apenas em partes específicas.</description>
    </item>
    
    <item>
      <title>Executando Javascript na página</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/executando-javascript-na-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/executando-javascript-na-pagina/</guid>
      <description>Sintaxe # objeto ExecuteAsyncScript(string script, params object[] args); objeto ExecuteScript(string script, params object[] args); Pitão # Para executar Javascript em python, use execute_script(&amp;quot;javascript script here&amp;quot;). execute_script é chamado em uma instância do webdriver e pode ser qualquer javascript válido.
from selenium import webdriver driver = webdriver.Chrome() driver.execute_script(&amp;quot;alert(&#39;running javascript&#39;);&amp;quot;) ##C# Para executar JavaScript em uma instância IWebDriver você precisa converter o IWebDriver para uma nova interface, IJavaScriptExecutor
IWebDriver driver; IJavaScriptExecutor jsDriver = driver as IJavaScriptExecutor; Agora você pode acessar todos os métodos disponíveis na instância IJavaScriptExecutor que permitem executar Javascript, por exemplo:</description>
    </item>
    
    <item>
      <title>Localizando elementos da web</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/localizando-elementos-da-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/localizando-elementos-da-web/</guid>
      <description>Sintaxe # ByChained(params By[] bys) Os itens são encontrados no Selenium através do uso de localizadores e da classe By. Para fazer um projeto de automação robusto com Selenium, deve-se usar localizadores para Web Elements de forma inteligente. Os localizadores devem ser descritivos, exclusivos e improváveis ​​de mudar para que você não obtenha falsos positivos em testes, por exemplo. A prioridade é usar:
ID - pois é único e você obterá exatamente o elemento que deseja.</description>
    </item>
    
    <item>
      <title>Quadros de comutação</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/quadros-de-comutacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/quadros-de-comutacao/</guid>
      <description>Sintaxe # Java driver.switchTo().frame(String name); driver.switchTo().frame(String id); driver.switchTo().frame(int index); driver.switchTo().frame(WebElement frameElement); driver.switchTo().defaultContent(); C# driver.SwitchTo().Frame(int frameIndex); driver.SwitchTo().Frame(IWebElement frameElement); driver.SwitchTo().Frame(string frameName); driver.SwitchTo().DefaultContent(); Pitão driver.switch_to_frame(nameOrId) driver.switch_to.frame(nameOrId) driver.switch_to_frame(index) driver.switch_to.frame(index) driver.switch_to_frame(frameElement) driver.switch_to.frame(frameElement) driver.switch_to_default_content() driver.switch_to.default_content() JavaScript driver.switchTo().frame(nameOrId) driver.switchTo().frame(index) driver.switchTo().defaultContent() Parâmetros # parâmetro detalhes nomeOrId Selecione um quadro por seu nome de id. índice Selecione um quadro por seu índice baseado em zero. frameElement Selecione um quadro usando seu WebElement localizado anteriormente Para alternar para um quadro usando Java # Por exemplo, se o código-fonte html de uma visualização ou elemento html for encapsulado por um iframe como este:</description>
    </item>
    
    <item>
      <title>Robô em selênio</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/robo-em-selenio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/robo-em-selenio/</guid>
      <description>Sintaxe # atraso (int ms) keyPress(int keycode) keyRelease(int keycode) mouseMove(int x, int y) mousePress (botões int) mouseRelease (botões int) mouseWheel(int wheelAmt) Parâmetros # Parâmetro Detalhes ms Tempo para dormir em milissegundos código-chave Constante para pressionar a tecla especificada, por exemplo, para pressionar o código A é VK_A. Consulte para obter mais detalhes: https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html x,y Coordenadas da tela botões A máscara do botão; uma combinação de uma ou mais máscaras de botão do mouse wheelAmt Número de entalhes para mover a roda do mouse, valor negativo para mover para cima/para longe do usuário valor positivo para mover para baixo/em direção ao usuário Esta seção contém detalhes sobre a implementação da API Robot com Selenium Webdriver.</description>
    </item>
    
    <item>
      <title>Programa Selenium Webdriver Básico</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/programa-selenium-webdriver-basico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/programa-selenium-webdriver-basico/</guid>
      <description>Este tópico tem como objetivo mostrar o programa básico de driver web em linguagens suportadas por selênio como C#, Groovy, Java, Perl, PHP, Python e Ruby.
A jornada inclui abrir o driver do navegador -&amp;gt; Página do Google -&amp;gt; desligar o navegador
##C#
using OpenQA.Selenium; using OpenQA.Selenium.Chrome; namespace BasicWebdriver { class WebDriverTest { static void Main() { using (var driver = new ChromeDriver()) { driver.Navigate().GoToUrl(&amp;quot;http://www.google.com&amp;quot;); } } } } O &amp;lsquo;programa&amp;rsquo; acima irá navegar para a página inicial do Google e, em seguida, fechará o navegador após carregar totalmente a página.</description>
    </item>
    
    <item>
      <title>Modelo de objeto de página</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/modelo-de-objeto-de-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/modelo-de-objeto-de-pagina/</guid>
      <description>Um papel significativo na automação de sites e aplicativos da Web envolve a identificação de itens na tela e a interação com eles. Os itens são encontrados no Selenium através do uso de localizadores e da classe By. Esses localizadores e interações são colocados dentro de objetos de página como uma prática recomendada para evitar código duplicado e facilitar a manutenção. Ele encapsula WebElements e deve conter informações de comportamento e retorno na página (ou parte de uma página em um aplicativo da web).</description>
    </item>
    
    <item>
      <title>Selecionar classe</title>
      <link>https://www.wikiod.com/pt/selenium-webdriver/selecionar-classe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/selenium-webdriver/selecionar-classe/</guid>
      <description>Sintaxe # Java desmarcar todos() deselectByIndex(int ​​index) deselectByValue(valor java.lang.String) deselectByVisibleText(java.lang.String texto) getAllSelectedOptions() getFirstSelectedOption() getOpções() éMúltiplo() selectByIndex(int ​​index) selectByValue(valor java.lang.String) selectByVisibleText(java.lang.String texto) Parâmetros # Parâmetros Detalhes índice A opção neste índice será selecionada valor O valor a ser comparado texto O texto visível para corresponder A classe Select do Selenium WebDriver fornece métodos úteis para interagir com as opções select. O usuário pode realizar operações em uma lista suspensa de seleção e também desmarcar a operação usando os métodos abaixo.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial kubernetes on </title>
    <link>https://www.wikiod.com/pt/docs/kubernetes/</link>
    <description>Recent content in tutorial kubernetes on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao kubernetes</title>
      <link>https://www.wikiod.com/pt/kubernetes/introducao-ao-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kubernetes/introducao-ao-kubernetes/</guid>
      <description>Instalar no Google Cloud # O Kubernetes foi originalmente desenvolvido pelo Google para alimentar seu Container Engine. Como tal, os clusters Kubernetes são um cidadão de primeira classe no Google.
A criação de um cluster Kubernetes no mecanismo de contêiner requer o comando gcloud do Google Cloud SDK. Para instalar este comando localmente, use uma das seguintes opções:
use o instalador interativo (a maneira mais fácil para os recém-chegados): curl https://sdk.</description>
    </item>
    
    <item>
      <title>Chamando a API do Kubernetes</title>
      <link>https://www.wikiod.com/pt/kubernetes/chamando-a-api-do-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kubernetes/chamando-a-api-do-kubernetes/</guid>
      <description>Usando Kubernetes Go Client - Fora do Cluster # package main import ( &amp;quot;fmt&amp;quot; &amp;quot;k8s.io/client-go/1.5/kubernetes&amp;quot; &amp;quot;k8s.io/client-go/1.5/pkg/api/v1&amp;quot; &amp;quot;k8s.io/client-go/1.5/tools/clientcmd&amp;quot; ) func main() { config, err := clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, &amp;lt;kube-config-path&amp;gt;) if err != nil { return nil, err } c, err := kubernetes.NewForConfig(config) if err != nil { return nil, err } // Get Pod by name pod, err := c.Pods(v1.NamespaceDefault).Get(&amp;quot;my-pod&amp;quot;) if err != nil { fmt.Println(err) return } // Print its creation time fmt.</description>
    </item>
    
    <item>
      <title>Kubernetes em produção</title>
      <link>https://www.wikiod.com/pt/kubernetes/kubernetes-em-producao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kubernetes/kubernetes-em-producao/</guid>
      <description>Introduzir como usar o kubernetes no ambiente de produção
Implante o cluster zookeeper em produção usando kubernetes e ceph # Dockerize zookeeper-3.4.6 # Crie um Dockerfile:
####################################################### # Image: img.reg.3g:15000/zookeeper:3.4.6 ####################################################### FROM img.reg.3g:15000/jdk:1.7.0_67 MAINTAINER lth9739@gmail.com USER root ENV ZOOKEEPER_VERSION 3.4.6 ADD Dockerfile / ADD zookeeper/ /opt/ COPY zoo.cfg /opt/zookeeper/conf/zoo.cfg RUN mkdir -p /opt/zookeeper/{data,log} WORKDIR /opt/zookeeper VOLUME [&amp;quot;/opt/zookeeper/conf&amp;quot;, &amp;quot;/opt/zookeeper/data&amp;quot;, &amp;quot;/opt/zookeeper/log&amp;quot;] COPY config-and-run.sh /opt/zookeeper/bin/ EXPOSE 2181 2888 3888 CMD [&amp;quot;/opt/zookeeper/bin/config-and-run.sh&amp;quot;] Veja mais detalhes</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de fusão a frio on </title>
    <link>https://www.wikiod.com/pt/docs/coldfusion/</link>
    <description>Recent content in Tutorial de fusão a frio on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/coldfusion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à fusão a frio</title>
      <link>https://www.wikiod.com/pt/coldfusion/introducao-a-fusao-a-frio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/introducao-a-fusao-a-frio/</guid>
      <description>Olá Mundo # Arquivo: teste.cfm
Implementação de tags
&amp;lt;cfoutput&gt;Olá, Mundo!&amp;lt;/cfoutput&gt; Implementação de CFScript
&amp;lt;cfscript&gt; writeOutput(&#34;Olá Mundo!&#34;); &amp;lt;/cfscript&gt; Instalação ou configuração # Instalação Linux (Ubuntu) # Lucee (código aberto) # Interpretador do ColdFusion / CFML # Baixe o arquivo apropriado de seu site (http://lucee.org/downloads.html) e execute seu instalador
wget http://cdn.lucee.org/downloader.cfm/id/155/file/lucee-5.0.0.252-pl0-linux-x64-installer.run sudo chmod +x lucee-5.0.0.252-pl0-linux-x64-installer.run sudo ./lucee-5.0.0.252-pl0-linux-x64-installer.run Passe pelo instalador.
Nginx # Instale o Nginx no seu servidor
sudo apt-get install nginx Edite seu /etc/nginx/sites-available/default</description>
    </item>
    
    <item>
      <title>Como fazer CFLOOP</title>
      <link>https://www.wikiod.com/pt/coldfusion/como-fazer-cfloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/como-fazer-cfloop/</guid>
      <description>Muito obrigado a
Pete Freitag por seu CFScript Cheat Sheet Adam Cameron para [CF 11: CFLOOP no CFScript está muito quebrado] 2 (e ainda está no CF 2016). Variedade # A capacidade de usar diretamente um objeto array com ccloop foi adicionada no ColdFusion 8.
Considere esta matriz;
&amp;lt;cfset aFoo = [ &amp;quot;one&amp;quot; , &amp;quot;two&amp;quot; , &amp;quot;three&amp;quot; , &amp;quot;four&amp;quot; ] /&amp;gt; Sintaxe da tag ColdFusion 8 através da corrente Usando o atributo index sozinho.</description>
    </item>
    
    <item>
      <title>Matrizes ColdFusion</title>
      <link>https://www.wikiod.com/pt/coldfusion/matrizes-coldfusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/matrizes-coldfusion/</guid>
      <description>Sintaxe # ArrayNew(dimensão, isSynchronized) Parâmetros # Nome Descrição Dimensão Número de dimensões na nova matriz: 1, 2 ou 3 isSynchronized Quando false, cria uma matriz não sincronizada. Quando true, a função retorna uma matriz sincronizada. Em uma matriz sincronizada, mais de dois threads não podem acessar a matriz simultaneamente. Outros encadeamentos precisam esperar até que o encadeamento ativo conclua seu trabalho, resultando em desempenho significativo.
Na versão 2016 do ColdFusion, você pode usar um array não sincronizado e permitir que vários threads acessem o mesmo objeto de array simultaneamente.</description>
    </item>
    
    <item>
      <title>Variáveis</title>
      <link>https://www.wikiod.com/pt/coldfusion/variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/variaveis/</guid>
      <description>Parâmetros # Atributo Descrição nome (Obrigatório) Nome do parâmetro/variável. default (Opcional) Valor para definir o parâmetro se não existir. max (Opcional) O valor máximo válido; usado apenas para validação de intervalo. min (Opcional) O valor mínimo válido; usado apenas para validação de intervalo. pattern (Opcional) Uma expressão regular JavaScript que o parâmetro deve corresponder; usado somente para validação de regex ou expressão_regular. type (Opcional) O formato válido para os dados. Usando cfparam # A tag &amp;lt;cfparam&amp;gt; cria uma variável se ela ainda não existir.</description>
    </item>
    
    <item>
      <title>Consultas de banco de dados</title>
      <link>https://www.wikiod.com/pt/coldfusion/consultas-de-banco-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/consultas-de-banco-de-dados/</guid>
      <description>Trabalhando com bancos de dados # Um dos pontos fortes do ColdFusion é a facilidade de trabalhar com bancos de dados. E, claro, as entradas de consulta podem e devem ser parametrizadas.
Implementação de tags
&amp;lt;cfquery name=&amp;quot;myQuery&amp;quot; datasource=&amp;quot;myDatasource&amp;quot; result=&amp;quot;myResult&amp;quot;&amp;gt; select firstName, lastName from users where lastName = &amp;lt;cfqueryparam value=&amp;quot;Allaire&amp;quot; cfsqltype=&amp;quot;cf_sql_varchar&amp;quot;&amp;gt; &amp;lt;/cfquery&amp;gt; Implementação de CFScript
// ColdFusion 9+ var queryService = new query(name=&amp;quot;myQuery&amp;quot;, datasource=&amp;quot;myDatasource&amp;quot;); queryService.addParam(name=&amp;quot;lName&amp;quot;, value=&amp;quot;Allaire&amp;quot;, cfsqltype=&amp;quot;cf_sql_varchar&amp;quot;); var result = queryService.execute(sql=&amp;quot;select firstName, lastName from users where lastName = :lName&amp;quot;); var myQuery = result.</description>
    </item>
    
    <item>
      <title>Como invocar um método privado dinamicamente</title>
      <link>https://www.wikiod.com/pt/coldfusion/como-invocar-um-metodo-privado-dinamicamente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/como-invocar-um-metodo-privado-dinamicamente/</guid>
      <description>O uso de &amp;lt;cfinvoke&amp;gt; ou invoke() deve ser mais rápido que evaluate()
CFML # &amp;lt;cfinvoke method=&amp;quot;#somePrivateMethodName#&amp;quot;&amp;gt; &amp;lt;cfinvokeargument name=&amp;quot;argument1&amp;quot; value=&amp;quot;one&amp;quot;&amp;gt; &amp;lt;/cfinvoke&amp;gt; CFSCRIPT (CF10+) # invoke(&amp;quot;&amp;quot;, somePrivateMethodName, {argument1=&#39;one&#39;}); </description>
    </item>
    
    <item>
      <title>cfquery</title>
      <link>https://www.wikiod.com/pt/coldfusion/cfquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/cfquery/</guid>
      <description>Parâmetros # Parâmetro Detalhes nome Valor: string, Padrão: sim dbtype Valor: query/hql, Padrão: não, Observações: quando deixado em branco, é uma consulta normal fonte de dados Padrão: não, Observações: banco de dados parâmetros Valor: estrutura, Padrão: não, Observações: somente sintaxe cfscript! Em cfml eles são escritos dentro da instrução SLQ usando &amp;lt;cfqueryparam /&amp;gt; Consulta de Consulta # Chamadas de função # &amp;lt;!--- Load the user object based on the component path.</description>
    </item>
    
    <item>
      <title>Escopos em Coldfusion</title>
      <link>https://www.wikiod.com/pt/coldfusion/escopos-em-coldfusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/escopos-em-coldfusion/</guid>
      <description>Um escopo é &amp;ldquo;o intervalo no qual uma variável pode ser referenciada&amp;rdquo;. O ColdFusion conhece — assim como a maioria das outras linguagens de programação e script — vários escopos. O texto a seguir trata desses tipos e tenta trazer clareza sobre eles, suas diferenças e suas características.
Visão geral # Componentes e funções
variables this local arguments Etiquetas personalizadas
attributes thisTag caller Escopos Globais
Server Application Session Escopos de solicitação</description>
    </item>
    
    <item>
      <title>Criando APIs REST em coldfusion</title>
      <link>https://www.wikiod.com/pt/coldfusion/criando-apis-rest-em-coldfusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/criando-apis-rest-em-coldfusion/</guid>
      <description>As APIs REST são interessantes quando os dados devem ser acessados ​​de qualquer lugar, incluindo diferentes idiomas (servidor e cliente). Isso requer separação de dados e processamento.
Criando back-end # &amp;lt;cfcomponent displayname=&amp;quot;myAPI&amp;quot; output=&amp;quot;false&amp;quot;&amp;gt; &amp;lt;cffunction name=&amp;quot;init&amp;quot; access=&amp;quot;public&amp;quot; output=&amp;quot;no&amp;quot;&amp;gt; &amp;lt;!--- do some basic stuff ---&amp;gt; &amp;lt;cfreturn this&amp;gt; &amp;lt;/cffunction&amp;gt; &amp;lt;cffunction name=&amp;quot;welcome&amp;quot;&amp;gt; &amp;lt;cfreturn &amp;quot;Hello World!&amp;quot;&amp;gt; &amp;lt;/cffunction&amp;gt; &amp;lt;/cfcomponent&amp;gt; A interface # &amp;lt;cfscript&amp;gt; api_request = GetHttpRequestData(); api = createObject(&amp;quot;component&amp;quot;,&amp;quot;myAPI&amp;quot;).init(); &amp;lt;/cfscript&amp;gt; &amp;lt;cfif api_request.method is &#39;GET&#39;&amp;gt; &amp;lt;cfoutput&amp;gt;#api.welcome()#&amp;lt;/cfoutput&amp;gt; &amp;lt;cfelseif api_request.</description>
    </item>
    
    <item>
      <title>Trabalhando com retornos de chamada RegExp Replace</title>
      <link>https://www.wikiod.com/pt/coldfusion/trabalhando-com-retornos-de-chamada-regexp-replace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coldfusion/trabalhando-com-retornos-de-chamada-regexp-replace/</guid>
      <description>Se você quiser mais do que uma simples substituição de string por expressões regulares comuns, certamente terá problemas e baterá na parede ao descobrir os limites das funções regex que o Coldfusion tem. Não há nenhuma função embutida como preg_replace_callback do php.
Parâmetros # Parâmetro Detalhes re A expressão regular str A string que deve ser aplicada ao regex retorno de chamada A função onde o capturado agrupado será passado se uma correspondência for encontrada.</description>
    </item>
    
  </channel>
</rss>

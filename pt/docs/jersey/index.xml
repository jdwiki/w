<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de camisa on </title>
    <link>https://www.wikiod.com/pt/docs/jersey/</link>
    <description>Recent content in Tutorial de camisa on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jersey/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com a camisa</title>
      <link>https://www.wikiod.com/pt/jersey/comecando-com-a-camisa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jersey/comecando-com-a-camisa/</guid>
      <description>Exemplo de operações CRUD em Jersey # Este exemplo demonstra o uso dos métodos HTTP GET, POST, PUT e DELETE ao realizar operações CRUD em um recurso REST
Estou usando o software, frameworks e ferramentas abaixo:
Camisa 2.25.1 JDK 1.7.x (Java 7) Eclipse IDE Kepler Apache Maven 3.3.9 Apache Tomcat 7.x Por favor, siga as etapas abaixo para criar o aplicativo de Jersey necessário
Etapa 1: Crie um novo projeto maven usando o arquétipo maven-archetype-webapp no Eclipse IDE escolhendo Arquivo-&amp;gt;Novo-&amp;gt;Projeto Maven</description>
    </item>
    
    <item>
      <title>Injeção de Dependência com Jersey</title>
      <link>https://www.wikiod.com/pt/jersey/injecao-de-dependencia-com-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jersey/injecao-de-dependencia-com-jersey/</guid>
      <description>Injeção de dependência básica usando HK2 de Jersey # Jersey (2) usa HK2 como seu sistema de injeção de dependência (DI). Podemos usar outros sistemas de injeção, mas sua infraestrutura é construída com HK2, e nos permite usá-lo também em nossas aplicações.
Configurar injeção de dependência simples com Jersey leva apenas algumas linhas de código. Digamos, por exemplo, que temos um serviço que gostaríamos de injetar em nossos recursos.
public class GreetingService { public String getGreeting(String name) { return &amp;quot;Hello &amp;quot; + name + &amp;quot;!</description>
    </item>
    
    <item>
      <title>Usando Spring Boot com Jersey</title>
      <link>https://www.wikiod.com/pt/jersey/usando-spring-boot-com-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jersey/usando-spring-boot-com-jersey/</guid>
      <description>Aplicação simples com Spring Boot e Jersey # Spring Boot é uma estrutura de bootstrap para aplicativos Spring. Possui suporte contínuo para integração com Jersey também. Uma das vantagens disso (da perspectiva de um usuário de Jersey), é que você tem acesso ao vasto ecossistema do Spring.
Para começar, crie um novo projeto Maven standalone (não-wepapp). Também podemos criar um webapp, mas para este guia, usaremos apenas um aplicativo independente. Depois de criar o projeto, adicione o seguinte ao seu pom.</description>
    </item>
    
    <item>
      <title>Suporte MVC Jersey</title>
      <link>https://www.wikiod.com/pt/jersey/suporte-mvc-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jersey/suporte-mvc-jersey/</guid>
      <description>Estruturas MVC, como o Spring MVC, estão sendo usadas para criar aplicativos da Web que atendem a páginas da Web dinâmicas. Jersey, embora conhecido por ser um REST Framework, também tem suporte para criar páginas web dinâmicas usando seu módulo MVC.
Jersey MVC Olá Mundo # Para começar, crie um novo webapp Maven (como fazer isso está fora do escopo deste exemplo). No seu pom.xml, adicione as duas dependências a seguir</description>
    </item>
    
    <item>
      <title>Configurando JAX-RS em Jersey</title>
      <link>https://www.wikiod.com/pt/jersey/configurando-jax-rs-em-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jersey/configurando-jax-rs-em-jersey/</guid>
      <description>Filtro Java Jersey CORS para solicitações de origem cruzada # Configuração Java Jersey # Este exemplo ilustra como configurar Jersey para que você possa começar a usá-lo como uma estrutura de implementação JAX-RS para sua API RESTful.
Supondo que você já tenha instalado o Apache Maven, siga estas etapas para configurar o Jersey:
Crie a estrutura do projeto web maven, no terminal (windows) execute o seguinte comando mvn archetype:generate -DgroupId= com.</description>
    </item>
    
  </channel>
</rss>

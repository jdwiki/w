<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial d3.js on </title>
    <link>https://www.wikiod.com/pt/docs/d3-js/</link>
    <description>Recent content in Tutorial d3.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/d3-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao d3.js</title>
      <link>https://www.wikiod.com/pt/d3-js/introducao-ao-d3js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/introducao-ao-d3js/</guid>
      <description>Instalação # Há várias maneiras de baixar e usar o D3.
Download direto do script # Baixe e extraia d3.zip Copie a pasta resultante para onde você manterá as dependências do seu projeto Referencie d3.js (para desenvolvimento) ou d3.min.js (para produção) em seu HTML: &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;scripts/d3/d3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; NPM # Inicialize o NPM em seu projeto, caso ainda não o tenha feito: npm init NPM instala D3: npm install --save d3 Referencie d3.</description>
    </item>
    
    <item>
      <title>Despachando eventos com d3.dispatch</title>
      <link>https://www.wikiod.com/pt/d3-js/despachando-eventos-com-d3dispatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/despachando-eventos-com-d3dispatch/</guid>
      <description>Sintaxe # d3.dispatch - cria um despachante de evento personalizado. dispatch.on - registra ou cancela o registro de um ouvinte de evento. dispatch.copy - cria uma cópia de um dispatcher. dispatch.call - despacha um evento para listeners registrados. dispatch.apply - despacha um evento para listeners registrados. O despacho é um mecanismo conveniente para separar interesses com código fracamente acoplado: registre retornos de chamada nomeados e, em seguida, chame-os com argumentos arbitrários.</description>
    </item>
    
    <item>
      <title>Usando D3 com JSON e CSV</title>
      <link>https://www.wikiod.com/pt/d3-js/usando-d3-com-json-e-csv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/usando-d3-com-json-e-csv/</guid>
      <description>Sintaxe # d3.csv(url[[, linha], retorno de chamada]) d3.tsv(url[[, linha], retorno de chamada]) d3.html(url[, retorno de chamada]) d3.json(url[, retorno de chamada]) d3.text(url[, callback]) d3.xml(url[, retorno de chamada]) Carregando dados de arquivos CSV # Existem várias maneiras de obter os dados que você vinculará aos elementos DOM. O mais simples é ter seus dados em seu script como uma matriz &amp;hellip;
var data = [ ... ]; Mas o D3.js nos permite carregar dados de um arquivo externo.</description>
    </item>
    
    <item>
      <title>padrão de atualização</title>
      <link>https://www.wikiod.com/pt/d3-js/padrao-de-atualizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/padrao-de-atualizacao/</guid>
      <description>Sintaxe # seleção.enter() seleção.exit() seleção.merge() Atualizando os dados: um exemplo básico de seleções de entrada, atualização e saída # Criar um gráfico que exiba um conjunto de dados estático é relativamente simples. Por exemplo, se tivermos esse array de objetos como os dados:
var data = [ {title: &amp;quot;A&amp;quot;, value: 53}, {title: &amp;quot;B&amp;quot;, value: 12}, {title: &amp;quot;C&amp;quot;, value: 91}, {title: &amp;quot;D&amp;quot;, value: 24}, {title: &amp;quot;E&amp;quot;, value: 59} ]; Podemos criar um gráfico de barras onde cada barra representa uma medida, denominada &amp;ldquo;título&amp;rdquo;, e sua largura representa o valor dessa medida.</description>
    </item>
    
    <item>
      <title>Projeções D3</title>
      <link>https://www.wikiod.com/pt/d3-js/projecoes-d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/projecoes-d3/</guid>
      <description>Projeções de Albers # Uma projeção de Albers, ou mais apropriadamente, uma projeção cônica de área igual de Albers, é uma projeção cônica comum e uma projeção oficial de várias jurisdições e organizações, como o escritório do censo dos EUA e a província de British Columbia, no Canadá. Ele preserva a área em detrimento de outros aspectos do mapa, como forma, ângulo e distância.
Propriedades gerais # A transformação geral é capturada no seguinte gif:</description>
    </item>
    
    <item>
      <title>Seleções</title>
      <link>https://www.wikiod.com/pt/d3-js/selecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/selecoes/</guid>
      <description>Sintaxe # d3.selecionar(seletor) d3.selecionarTodos(seletor) seleção.selecionar(seletor) seleção.selecionarTodos(seletor) seleção.filtro(filtro) seleção.mesclar(outro) Leituras relacionadas:
Como funcionam as seleções - Mike Bostock LER-ME de seleção d3 O papel dos espaços reservados nas seleções &amp;ldquo;enter&amp;rdquo; # O que é uma seleção de entrada?
Em D3.js, quando se vincula dados a elementos DOM, três situações são possíveis:
O número de elementos e o número de pontos de dados são os mesmos; Existem mais elementos do que pontos de dados; Existem mais pontos de dados do que elementos; Na situação #3, todos os pontos de dados sem um elemento DOM correspondente pertencem à seleção enter.</description>
    </item>
    
    <item>
      <title>Conceitos principais de SVG usados ​​na visualização D3.js</title>
      <link>https://www.wikiod.com/pt/d3-js/conceitos-principais-de-svg-usados-na-visualizacao-d3js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/conceitos-principais-de-svg-usados-na-visualizacao-d3js/</guid>
      <description>Sistema de coordenadas # Em um sistema de coordenadas matemáticas normal, o ponto x=0, y=0 está no canto inferior esquerdo do gráfico. Mas no sistema de coordenadas SVG, este ponto (0,0) está no canto superior esquerdo da &amp;rsquo;tela&amp;rsquo;, é semelhante ao CSS quando você especifica a posição para absoluto/fixo e usa o topo e a esquerda para controlar o ponto exato do elemento.
É essencial ter em mente que à medida que y aumenta em SVG, as formas se movem para baixo.</description>
    </item>
    
    <item>
      <title>Gráficos SVG usando D3 js</title>
      <link>https://www.wikiod.com/pt/d3-js/graficos-svg-usando-d3-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/graficos-svg-usando-d3-js/</guid>
      <description>Usando D3 js para criar elementos SVG # Embora o D3 não seja específico para lidar com elementos SVG, ele é amplamente usado para criar e manipular visualizações de dados complexas baseadas em SVG. D3 fornece muitos métodos poderosos que ajudam a criar várias estruturas geométricas SVG com facilidade.
Recomenda-se primeiro entender os conceitos básicos das especificações SVG e, em seguida, usar exemplos extensos de js D3 para criar visualizações.</description>
    </item>
    
    <item>
      <title>Usando D3 com outros frameworks</title>
      <link>https://www.wikiod.com/pt/d3-js/usando-d3-com-outros-frameworks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/usando-d3-com-outros-frameworks/</guid>
      <description>D3js com Angular # O uso de D3js com Angular pode abrir novas frentes de possibilidades, como atualização ao vivo de gráficos assim que os dados são atualizados. Podemos encapsular a funcionalidade completa do gráfico em uma diretiva Angular, o que o torna facilmente reutilizável.
index.html &amp;raquo;
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app=&amp;quot;myApp&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://d3js.org/d3.v4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script data-require=&amp;quot;angular.js@1.4.1&amp;quot; data-semver=&amp;quot;1.4.1&amp;quot; src=&amp;quot;https://code.angularjs.org/1.4.1/angular.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;bar-chart.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div ng-controller=&amp;quot;MyCtrl&amp;quot;&amp;gt; &amp;lt;!-- reusable d3js bar-chart directive, data is sent using isolated scope --&amp;gt; &amp;lt;bar-chart data=&amp;quot;data&amp;quot;&amp;gt;&amp;lt;/bar-chart&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Podemos passar os dados para o gráfico usando o controlador e observar quaisquer alterações nos dados para permitir a atualização ao vivo do gráfico na diretiva:</description>
    </item>
    
    <item>
      <title>Abordagens para criar gráficos d3.js responsivos</title>
      <link>https://www.wikiod.com/pt/d3-js/abordagens-para-criar-graficos-d3js-responsivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/d3-js/abordagens-para-criar-graficos-d3js-responsivos/</guid>
      <description>Sintaxe # var largura = document.getElementById(&amp;lsquo;chartArea&amp;rsquo;).clientWidth; var altura = largura / 3.236; window.onresize = resizeFunctionCall; Usando bootstrap # Uma abordagem que é empregada com frequência é usar a estrutura em grade do bootstrap para definir a área em que o gráfico existirá. Usando isso em conjunto com a variável clientWidth e a window.onresize, é muito fácil criar SVGs d3 responsivos.
Vamos primeiro criar uma linha e uma coluna em que nosso gráfico será construído.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grails Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/grails/</link>
    <description>Recent content in Grails Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/grails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Grails</title>
      <link>https://www.wikiod.com/pt/grails/comecando-com-grails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/grails/comecando-com-grails/</guid>
      <description>Criando um aplicativo # Para criar um aplicativo Grails, use o comando grails create-app. O comando a seguir cria um aplicativo Grails, chamado myapp no diretório atual:
grails create-app fancy-app Executá-lo é tão simples quanto visitar o diretório do aplicativo recém-criado:
cd fancy-app e depois
grails run-app // in order to run the app on a different port, e.g. 8888, use this instead grails run-app -port 8888 // in order to run the app with a secure communication grails run-app -https Instalação de Grails # Nota: O GRAILS requer um Java JDK instalado (um JRE de ambiente de execução não é suficiente) em seu sistema, antes de configurar o Grails.</description>
    </item>
    
    <item>
      <title>Classes de domínio como recursos REST</title>
      <link>https://www.wikiod.com/pt/grails/classes-de-dominio-como-recursos-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/grails/classes-de-dominio-como-recursos-rest/</guid>
      <description>A maneira mais fácil de criar uma API RESTful no Grails é expor uma classe de domínio como um recurso REST. Isso pode ser feito adicionando a transformação grails.rest.Resource a qualquer classe de domínio.
API REST simples com grails # import grails.rest.* @Resource(uri=&#39;/books&#39;) class Book { String title static constraints = { title blank:false } } Simplesmente adicionando a transformação de Recurso e especificando um URI, sua classe de domínio estará automaticamente disponível como um recurso REST nos formatos XML ou JSON.</description>
    </item>
    
    <item>
      <title>Implantação</title>
      <link>https://www.wikiod.com/pt/grails/implantacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/grails/implantacao/</guid>
      <description>Jar executável # Uma das maneiras mais fáceis de implantar o Grails 3.x é construir um arquivo jar executável que incorpora um contêiner de servlet (Tomcat, Undertow, etc) com o aplicativo.
Modifique build.gradle:
// Remove or comment out the war plugin: // apply plugin:&amp;quot;war&amp;quot; // Enable the executable jar: springBoot { executable = true } // Optional: Customize the jar properties: // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html jar { archiveName(&#39;myapp.jar&#39;) } Compile usando ./gradlew assemble</description>
    </item>
    
    <item>
      <title>SGP</title>
      <link>https://www.wikiod.com/pt/grails/sgp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/grails/sgp/</guid>
      <description>Parâmetros # Variáveis ​​e escopos Detalhes aplicativo ServletContext instância aplicativoContexto Spring ApplicationContext instância flash O objeto flash grailsAplicativo GrailsApplication instância saída gravador de resposta para gravação no fluxo de saída params params objeto para recuperar parâmetros de solicitação solicitar HttpServletRequest instância resposta HttpServletResponse instância sessão HttpSession instância webRequest GrailsWebRequest instância Expressões # No GSP, a sintaxe &amp;lt;%= %&amp;gt; raramente é usada devido ao suporte para expressões GSP.
Uma expressão GSP é semelhante a uma expressão JSP EL ou a um Groovy GString e assume o formato ${expr}:</description>
    </item>
    
  </channel>
</rss>

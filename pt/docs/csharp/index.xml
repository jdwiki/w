<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem C# on </title>
    <link>https://www.wikiod.com/pt/docs/csharp/</link>
    <description>Recent content in Tutorial de linguagem C# on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem C#</title>
      <link>https://www.wikiod.com/pt/csharp/introducao-a-linguagem-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/introducao-a-linguagem-c/</guid>
      <description>Criando um novo aplicativo de console (Visual Studio) # Abra o Visual Studio
Na barra de ferramentas, vá para Arquivo → Novo projeto
Selecione o tipo de projeto Aplicativo de console
Abra o arquivo Program.cs no Solution Explorer
Adicione o seguinte código a Main():
public class Program { public static void Main() { // Prints a message to the console. System.Console.WriteLine(&amp;ldquo;Hello, World!&amp;rdquo;);
/* Wait for the user to press a key.</description>
    </item>
    
    <item>
      <title>Recursos do C# 6.0</title>
      <link>https://www.wikiod.com/pt/csharp/recursos-do-c-60/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/recursos-do-c-60/</guid>
      <description>Esta sexta iteração da linguagem C# é fornecida pelo compilador Roslyn. Esse compilador foi lançado com a versão 4.6 do .NET Framework, mas pode gerar código de maneira compatível com versões anteriores para permitir o direcionamento de versões anteriores do framework. O código C# versão 6 pode ser compilado de maneira totalmente compatível com versões anteriores do .NET 4.0. Ele também pode ser usado para estruturas anteriores, no entanto, alguns recursos que exigem suporte de estrutura adicional podem não funcionar corretamente.</description>
    </item>
    
    <item>
      <title>Recursos do C# 7.0</title>
      <link>https://www.wikiod.com/pt/csharp/recursos-do-c-70/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/recursos-do-c-70/</guid>
      <description>C# 7.0 é a sétima versão do C#. Esta versão contém alguns novos recursos: suporte de linguagem para Tuplas, funções locais, declarações out var, separadores de dígitos, literais binários, correspondência de padrões, expressões throw, ref return e ref local e lista de membros corpo de expressão estendida.
Referência oficial: O que há de novo no C# 7
Suporte a idiomas para Tuplas # Fundamentos # Uma tupla é uma lista ordenada e finita de elementos.</description>
    </item>
    
    <item>
      <title>Métodos de extensão</title>
      <link>https://www.wikiod.com/pt/csharp/metodos-de-extensao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/metodos-de-extensao/</guid>
      <description>Sintaxe # public static ReturnType MyExtensionMethod (este destino TargetType) public static ReturnType MyExtensionMethod(este destino TargetType, TArg1 arg1, &amp;hellip;) Parâmetros # Parâmetro Detalhes isso O primeiro parâmetro de um método de extensão deve sempre ser precedido pela palavra-chave this, seguida pelo identificador com o qual se referirá à instância &amp;ldquo;atual&amp;rdquo; do objeto que você está estendendo Os métodos de extensão são açúcares sintáticos que permitem que métodos estáticos sejam invocados em instâncias de objetos como se fossem membros do próprio tipo.</description>
    </item>
    
    <item>
      <title>Consultas LINQ</title>
      <link>https://www.wikiod.com/pt/csharp/consultas-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/consultas-linq/</guid>
      <description>LINQ é um acrônimo que significa Language INtegrated Query. É um conceito que integra uma linguagem de consulta, oferecendo um modelo consistente para trabalhar com dados em vários tipos de fontes e formatos de dados; você usa os mesmos padrões básicos de codificação para consultar e transformar dados em documentos XML, bancos de dados SQL, conjuntos de dados ADO.NET, coleções .NET e qualquer outro formato para o qual um provedor LINQ esteja disponível.</description>
    </item>
    
    <item>
      <title>Palavras-chave</title>
      <link>https://www.wikiod.com/pt/csharp/palavras-chave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/palavras-chave/</guid>
      <description>Palavras-chave são identificadores reservados predefinidos com significado especial para o compilador. Eles não podem ser usados ​​como identificadores em seu programa sem o prefixo @. Por exemplo, @if é um identificador legal, mas não a palavra-chave if.
C# tem uma coleção predefinida de &amp;ldquo;palavras-chave&amp;rdquo; (ou palavras reservadas), cada uma com uma função especial. Essas palavras não podem ser usadas como identificadores (nomes para variáveis, métodos, classes, etc.) a menos que tenham o prefixo @.</description>
    </item>
    
    <item>
      <title>Palavra-chave de rendimento</title>
      <link>https://www.wikiod.com/pt/csharp/palavra-chave-de-rendimento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/palavra-chave-de-rendimento/</guid>
      <description>Ao usar a palavra-chave yield em uma instrução, você indica que o método, operador ou acessador get no qual ela aparece é um iterador. Usar yield para definir um iterador elimina a necessidade de uma classe extra explícita (a classe que mantém o estado de uma enumeração) quando você implementa o padrão IEnumerable e IEnumerator para um tipo de coleção personalizado.
Sintaxe # retorno de rendimento [TYPE] quebra de rendimento Colocar a palavra-chave yield em um método com o tipo de retorno IEnumerable, IEnumerable&amp;lt;T&amp;gt;, IEnumerator ou IEnumerator&amp;lt;T&amp;gt; informa ao compilador para gerar uma implementação do tipo de retorno (IEnumerable ou IEnumerator) que, quando repetido, executa o método até cada &amp;ldquo;rendimento&amp;rdquo; para obter cada resultado.</description>
    </item>
    
    <item>
      <title>Usando Declaração</title>
      <link>https://www.wikiod.com/pt/csharp/usando-declaracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/usando-declaracao/</guid>
      <description>Fornece uma sintaxe conveniente que garante o uso correto de objetos IDisposable.
Sintaxe # usando (descartável) { } using (IDisposable descartável = new MyDisposable()) { } O objeto na instrução using deve implementar a interface IDisposable.
using(var obj = new MyObject()) { } class MyObject : IDisposable { public void Dispose() { // Cleanup } } Exemplos mais completos para a implementação do IDisposable podem ser encontrados nos documentos do MSDN.</description>
    </item>
    
    <item>
      <title>Manipulação de exceção</title>
      <link>https://www.wikiod.com/pt/csharp/manipulacao-de-excecao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/manipulacao-de-excecao/</guid>
      <description>Criando exceções personalizadas # Você tem permissão para implementar exceções personalizadas que podem ser lançadas como qualquer outra exceção. Isso faz sentido quando você deseja tornar suas exceções distinguíveis de outros erros durante o tempo de execução.
Neste exemplo, criaremos uma exceção personalizada para tratamento claro de problemas que o aplicativo pode ter ao analisar uma entrada complexa.
Criando uma classe de exceção personalizada # Para criar uma exceção personalizada, crie uma subclasse de Exception:</description>
    </item>
    
    <item>
      <title>Async-Await</title>
      <link>https://www.wikiod.com/pt/csharp/async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/csharp/async-await/</guid>
      <description>Em C#, um método declarado async não será bloqueado em um processo síncrono, caso você esteja usando operações baseadas em E/S (por exemplo, acesso à web, trabalho com arquivos, &amp;hellip;). O resultado de tais métodos marcados como assíncronos pode ser aguardado através do uso da palavra-chave await.
Um método async pode retornar void, Task ou Task&amp;lt;T&amp;gt;.
O tipo de retorno Task aguardará o término do método e o resultado será void.</description>
    </item>
    
  </channel>
</rss>

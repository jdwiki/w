<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial moq on </title>
    <link>https://www.wikiod.com/pt/docs/moq/</link>
    <description>Recent content in tutorial moq on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/moq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com moq</title>
      <link>https://www.wikiod.com/pt/moq/comecando-com-moq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/moq/comecando-com-moq/</guid>
      <description>Instalação ou Configuração # Selecione o projeto ao qual deseja adicionar a referência ao Moq. Abra o Nuget para este projeto. Selecione &amp;ldquo;Procurar&amp;rdquo; e digite &amp;ldquo;moq&amp;rdquo; na caixa de pesquisa. Selecione &amp;ldquo;Moq&amp;rdquo; e clique em Instalar. Seguir essas etapas instalará o pacote Moq e adicionará uma referência a ele nas referências do projeto selecionado. Após completar esses passos, o Moq pode ser usado no projeto de teste unitário simplesmente declarando-o nos arquivos de classes de teste:</description>
    </item>
    
    <item>
      <title>Validando a ordem de chamada</title>
      <link>https://www.wikiod.com/pt/moq/validando-a-ordem-de-chamada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/moq/validando-a-ordem-de-chamada/</guid>
      <description>Validando a ordem de chamada implicitamente # Quando um método a ser testado usa informações de uma chamada para passar para chamadas subsequentes, uma abordagem que pode ser usada para garantir que os métodos sejam chamados na ordem esperada é configurar as expectativas para refletir esse fluxo de dados.
Dado o método para testar:
public void MethodToTest() { var str = _utility.GetInitialValue(); str = _utility.PrefixString(str); str = _utility.ReverseString(str); _target.DoStuff(str); } Expectativas podem ser definidas para passar dados de GetInitialValue através de PrefixString e ReverseString para DoStuff, onde a informação é verificada.</description>
    </item>
    
    <item>
      <title>Comportamento de zombaria</title>
      <link>https://www.wikiod.com/pt/moq/comportamento-de-zombaria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/moq/comportamento-de-zombaria/</guid>
      <description>Sintaxe # mock.Setup(expression).Returns(value) //Sempre que chamado o método na expressão retornará valor Parâmetros # Parâmetro Detalhes expressão Expressão lambda que especifica a invocação do método. Simulação do método sem argumentos # interface Mockable { bool DoSomething(); } var mock = new Mock&amp;lt;Mockable&amp;gt;(); mock.Setup(x =&amp;gt; x.DoSomething()).Returns(true); var result = mock.Object.DoSomething(); //true Zombando de membros protegidos # Para zombar de um membro protegido, você deve primeiro incluir o seguinte na parte superior do seu dispositivo de teste:</description>
    </item>
    
    <item>
      <title>Propriedades de simulação</title>
      <link>https://www.wikiod.com/pt/moq/propriedades-de-simulacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/moq/propriedades-de-simulacao/</guid>
      <description>Propriedades de stub automático # Às vezes, você deseja zombar de uma classe ou interface e fazer com que suas propriedades se comportem como se fossem getters e setters simples. Como esse é um requisito comum, o Moq fornece um método de atalho para configurar todas as propriedades de uma simulação para armazenar e recuperar valores:
// SetupAllProperties tells mock to implement setter/getter funcationality var userMock = new Mock&amp;lt;IUser&amp;gt;().SetupAllProperties(); // Invoke the code to test SetPropertiesOfUser(userMock.</description>
    </item>
    
    <item>
      <title>Zombando de interfaces comuns</title>
      <link>https://www.wikiod.com/pt/moq/zombando-de-interfaces-comuns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/moq/zombando-de-interfaces-comuns/</guid>
      <description>Zombando de IEnumerable # Zombar de uma interface que herda de IEnumerable para retornar dados enlatados é bastante simples. Supondo as seguintes classes:
public class DataClass { public int Id { get; set; } } public interface IEnumerableClass : IEnumerable&amp;lt;DataClass&amp;gt; { } A seguinte abordagem pode ser tomada. Primeiro, crie uma lista contendo as informações que precisam ser retornadas pelo mock:
IList&amp;lt;DataClass&amp;gt; list = new List&amp;lt;DataClass&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { list.</description>
    </item>
    
  </channel>
</rss>

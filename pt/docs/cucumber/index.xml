<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de pepino on </title>
    <link>https://www.wikiod.com/pt/docs/cucumber/</link>
    <description>Recent content in Tutorial de pepino on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/cucumber/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com pepino</title>
      <link>https://www.wikiod.com/pt/cucumber/comecando-com-pepino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/comecando-com-pepino/</guid>
      <description>Um recurso de pepino # O Cucumber usa sintaxe Gherkin para descrever os comportamentos do seu software em linguagem natural estruturada.
Como tal, o Cucumber não é um framework de teste (um mal-entendido comum), mas um framework de documentação do sistema, não muito diferente de outros como o Use Case Scenario. O mal-entendido comum se deve ao fato de que a documentação do Cucumber pode ser automatizada para garantir que reflita o comportamento real do sistema.</description>
    </item>
    
    <item>
      <title>Instale o plugin de pepino no Intellij</title>
      <link>https://www.wikiod.com/pt/cucumber/instale-o-plugin-de-pepino-no-intellij/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/instale-o-plugin-de-pepino-no-intellij/</guid>
      <description>Os plug-ins do Cucumber para o IntelliJ IDEA oferecem recursos de IDE convenientes para trabalhar com arquivos de recursos do Gherkin em um projeto do IntelliJ usando a estrutura do Cucumber. Os plug-ins estão disponíveis para linguagens Java, Scala ou Groovy.
O plugin Cucumber for Java IntelliJ oferece recursos IDE para desenvolvimento conveniente com o Cucumber, incluindo
Geração de cola de passo Gherkin para passos não implementados Conclusão do código da etapa Gherkin Salto de código do método passo a passo Realce de sintaxe Gherkin em arquivos &amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Sintaxe Gherkin</title>
      <link>https://www.wikiod.com/pt/cucumber/sintaxe-gherkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/sintaxe-gherkin/</guid>
      <description>Gherkin é uma linguagem comercialmente legível para automação de testes e documentação de testes. É entendido por Cucumber e em conjunto existe como uma ferramenta de Desenvolvimento Orientado por Comportamento.
Sintaxe # Recurso: esta palavra-chave significa que o que se segue é um descrição ou nome do recurso que está sendo testado ou documentado. Background: esta palavra-chave significa etapas que serão executadas antes de cada cenário no recurso. Cenário: esta palavra-chave representa o nome ou descrição básica de um cenário específico testando o recurso.</description>
    </item>
    
    <item>
      <title>Características</title>
      <link>https://www.wikiod.com/pt/cucumber/caracteristicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/caracteristicas/</guid>
      <description>Você pode usar o pepino como um plugin no QTP e no Selenium.
As etapas no cenário do pepino são variáveis ​​globais.
Você pode implementar uma vez e chamar várias vezes. Assim, reduz a manutenção do código e pode reutilizar o mesmo código quando necessário.
Os recursos do pepino são escritos na linguagem Gherkin e armazenados em arquivos com o sufixo .feature. Este tópico fornece exemplos de cada recurso do Gherkin.</description>
    </item>
    
    <item>
      <title>pom.xml para o projeto Maven_ pepino.</title>
      <link>https://www.wikiod.com/pt/cucumber/pomxml-para-o-projeto-maven_-pepino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/pomxml-para-o-projeto-maven_-pepino/</guid>
      <description>O modelo de objeto do projeto abaixo é o modelo pom.xml. Se você deseja criar um projeto maven com pepino, pode usar o exemplo abaixo como modelo
pom.xml # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; 4.0.0
&amp;lt;groupId&amp;gt;Project name&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;MulitClients&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-testng&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gherkin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>Definições de etapas</title>
      <link>https://www.wikiod.com/pt/cucumber/definicoes-de-etapas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cucumber/definicoes-de-etapas/</guid>
      <description>As definições de etapa estão na linguagem de programação suportada por uma determinada implementação do Cucumber. Este tópico fornece exemplos de definições de etapas em cada linguagem de programação compatível e exemplos de uso de chamadas de API do Cucumber em definições de etapas.
Algumas definições simples de passos do Ruby # Em features/step_definitions/documentation.rb:
When /^I go to the &amp;quot;([^&amp;quot;]+)&amp;quot; documentation$/ do |section| path_part = case section when &amp;quot;Documentation&amp;quot; &amp;quot;documentation&amp;quot; else raise &amp;quot;Unknown documentation section: #{section}&amp;quot; end visit &amp;quot;/documentation/#{path_part}/topics&amp;quot; end Then /^I should see the &amp;quot;([^&amp;quot;]+) documentation&amp;quot;$/ do |section| expect(page).</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stm32 tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/stm32/</link>
    <description>Recent content in stm32 tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/stm32/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao stm32</title>
      <link>https://www.wikiod.com/pt/stm32/introducao-ao-stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/stm32/introducao-ao-stm32/</guid>
      <description>Primeira configuração com exemplo de LED piscando usando SW4STM32 e biblioteca HAL # (Observação: Existem muitos IDEs, cadeias de ferramentas e bibliotecas que estão prontas para uso com o STM32. A configuração a seguir requer um esforço mínimo para que funcione, mas é apenas uma das muitas. Sinta-se à vontade para explorar outras , não é objetivo deste exemplo forçar alguém a usar as ferramentas que serão usadas aqui.)
Instalação do IDE # System Workbench for STM32: IDE gratuito no Windows, Linux e OS X.</description>
    </item>
    
    <item>
      <title>Ambientes de desenvolvimento integrados (IDEs)</title>
      <link>https://www.wikiod.com/pt/stm32/ambientes-de-desenvolvimento-integrados-ides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/stm32/ambientes-de-desenvolvimento-integrados-ides/</guid>
      <description>O objetivo deste tópico é listar todos os ambientes de desenvolvimento integrado (IDE) que podem ser usados ​​para desenvolver software para microcontroladores STM32. Os exemplos devem conter:
Lista das principais funcionalidades do IDE. Lista dos sistemas operacionais suportados pelo IDE. Processo de instalação. Etapas de configuração adicionais (se houver). IDEs listados pela ST Microelectronics:
Número da peça Descrição Geral Situação de Marketing Fornecedor Tipo de software CoIDE CooCox CoIDE, um ambiente de desenvolvimento de software gratuito e altamente integrado para ARM Cortex MCUs Ativo CooCox Suítes de desenvolvimento de SW CosmicIDE Cósmico ARM/Cortex &amp;quot;M&amp;quot; Ferramentas de Desenvolvimento Cruzado para Microcontrolador STM32 Ativo Cósmico Suítes de desenvolvimento de SW CrossWorks Rowley Associates CrossWorks, ambiente de desenvolvimento integrado com download e depuração JTAG Flash Ativo Rowley Suítes de desenvolvimento de SW DS-5 O ARM Development Studio 5 (DS-5) fornece as melhores ferramentas da categoria para a mais ampla variedade de plataformas baseadas em processador ARM Ativo ARM Suítes de desenvolvimento de SW EMP-Thunder Emprog ThunderBench, ferramentas C/C++ de desenvolvimento totalmente integradas e bem elaboradas para ARM Cortex Ativo Emprog Firmware Hitop5 Interface de usuário universal, IDE e depurador para todas as ferramentas de desenvolvimento Hitex Ativo Hitex Suítes de desenvolvimento de SW IAR-EWARM IAR Ambiente de desenvolvimento integrado e compilador C/C++ otimizado para ARM Cortex-M Ativo IAR Suítes de desenvolvimento de SW [MDK-ARM-STM32][8] Ambiente de desenvolvimento de software MDK-ARM para MCUs baseados em Cortex-M Ativo Keil Suítes de desenvolvimento de SW [MULTI][9] Ambiente integrado de desenvolvimento e depuração do GreenHills para aplicativos incorporados usando C e C++ Ativo Software GreenHills Suítes de desenvolvimento de SW [Men-Nucleus-SF][10] Núcleo SmartFit para STM32 Ativo Gráficos do Mentor Firmware [PER-Tracealyzer][11] Analisador de rastreamento de tempo de execução Percepio para STM32 MCU Ativo Percepio [PLSUDE-STM32][12] Plataforma de depuração e emulador com suporte otimizado para Trace e Flash para MCUs baseados em STM32 Cortex-M por ferramentas de desenvolvimento PLS Ativo Por favor Suítes de desenvolvimento de SW [RIDE-STM32][13] Ambiente de desenvolvimento integrado da marca Raisonance para MCUs STM32 Ativo Raisonance Suítes de desenvolvimento de SW [SOMN-DRT-IDE][14] DREAM DRT Cortex-M IDE Ativo SONHO Pacotes de desenvolvimento de SW [SW4STM32][15] System Workbench para STM32: IDE gratuito no Windows, Linux e OS X Ativo AC6 Suítes de desenvolvimento de SW [TASKINGVX-STM32][16] Ferramentas de compilador e depurador C/C++ da Altium para MCUs baseados em ARM Ativo TAREFAS Firmware [TrueSTUDIO][17] A principal ferramenta de desenvolvimento C/C++ para desenvolvimento STM32, com seu conjunto de recursos incomparáveis ​​e integração sem precedentes Ativo Atólico Pacotes de desenvolvimento de SW [iSYS-winIDEAOpen][18] Plataforma de desenvolvimento de software ilimitada e gratuita da iSYSTEM para todos os dispositivos baseados em STM32 Cortex-M Ativo iSYSTEM Suítes de desenvolvimento de SW [mikroBasicPRO][19] Compilador básico completo MikroElektronika que torna o desenvolvimento STM32 adequado para todos Ativo Mikroelectronica Suítes de desenvolvimento de SW [mikroCPRO][20] Compilador ANSI C completo da MikroElektronika para dispositivos STM32.</description>
    </item>
    
    <item>
      <title>UART - ReceptorTransmissor Assíncrono Universal (comunicação serial)</title>
      <link>https://www.wikiod.com/pt/stm32/uart---receptortransmissor-assincrono-universal-comunicacao-serial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/stm32/uart---receptortransmissor-assincrono-universal-comunicacao-serial/</guid>
      <description>Este tópico é sobre comunicação serial usando o periférico Receptor/Transmissor Assíncrono Universal (UART) dos microcontroladores STM32.
Aplicativo Echo - biblioteca HAL # Neste exemplo, o microcontrolador ecoa de volta os bytes recebidos para o remetente usando a interrupção UART RX.
#include &amp;quot;stm32f4xx.h&amp;quot; UART_HandleTypeDef huart2; /* Single byte to store input */ uint8_t byte; void SystemClock_Config(void); /* UART2 Interrupt Service Routine */ void USART2_IRQHandler(void) { HAL_UART_IRQHandler(&amp;amp;huart2); } /* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */ void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { if (huart-&amp;gt;Instance == USART2) { /* Transmit one byte with 100 ms timeout */ HAL_UART_Transmit(&amp;amp;huart2, &amp;amp;byte, 1, 100); /* Receive one byte in interrupt mode */ HAL_UART_Receive_IT(&amp;amp;huart2, &amp;amp;byte, 1); } } void uart_gpio_init() { GPIO_InitTypeDef GPIO_InitStruct; __GPIOA_CLK_ENABLE(); /**USART2 GPIO Configuration PA2 ------&amp;gt; USART2_TX PA3 ------&amp;gt; USART2_RX */ GPIO_InitStruct.</description>
    </item>
    
  </channel>
</rss>

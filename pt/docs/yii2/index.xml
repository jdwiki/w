<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial yii2 on </title>
    <link>https://www.wikiod.com/pt/docs/yii2/</link>
    <description>Recent content in Tutorial yii2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/yii2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com yii2</title>
      <link>https://www.wikiod.com/pt/yii2/comecando-com-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/comecando-com-yii2/</guid>
      <description>Instalação ou configuração # Yii2 pode ser instalado de duas maneiras. Eles são
Instalando via Composer Instalando a partir de um arquivo morto Instalando pelo Composer # Instalando o Composer # Se você ainda não tem o Composer instalado, pode fazê-lo seguindo as instruções em getcomposer.org. No Linux e no Mac OS X, você executará os seguintes comandos:
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer Para windows basta baixar e instalar composer-setup.</description>
    </item>
    
    <item>
      <title>Registro ativo</title>
      <link>https://www.wikiod.com/pt/yii2/registro-ativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/registro-ativo/</guid>
      <description>O AR é perfeito quando você precisa excluir, atualizar ou criar um ou mais registros sequencialmente. Seu suporte de atributos sujos (salvando apenas o que foi realmente alterado) resulta em instruções UPDATE otimizadas que retiram significativamente a carga do banco de dados e reduzem as chances de vários conflitos relacionados à edição do mesmo registro por várias pessoas ao mesmo tempo.
Se você não tem uma lógica realmente complexa em seu aplicativo e, portanto, não requer abstração de entidades, o AR é o mais adequado para exclusões, atualizações e criações.</description>
    </item>
    
    <item>
      <title>Validação</title>
      <link>https://www.wikiod.com/pt/yii2/validacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/validacao/</guid>
      <description>Desativar mensagem de erro de validação em foco / chave para cima # Por padrão, a mensagem de erro aparece abaixo de textbox em &amp;lt;div class=&amp;quot;help-block&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; em keyUp ou depois de pressionar o botão enviar se alguma restrição de validação não for atendida.
Às vezes, queremos uma mensagem apenas no envio, ou seja, sem validação no evento onKeyup.
Vamos verificar o arquivo yii2/widgets/ActiveForm.php:
&amp;lt;?php namespace yii\widgets; use Yii; use yii\base\InvalidCallException; use yii\base\Widget; use yii\base\Model; use yii\helpers\ArrayHelper; use yii\helpers\Url; use yii\helpers\Html; use yii\helpers\Json; class ActiveForm extends Widget { public $action = &#39;&#39;; public $method = &#39;post&#39;; public $options = []; .</description>
    </item>
    
    <item>
      <title>Biscoitos</title>
      <link>https://www.wikiod.com/pt/yii2/biscoitos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/biscoitos/</guid>
      <description>Os cookies fazem parte da solicitação HTTP, portanto, é uma boa ideia fazer as duas coisas no controlador, cuja responsabilidade é exatamente lidar com a solicitação e a resposta.
Autenticação entre subdomínios e cookies de identidade # No caso de login automático ou cookie &amp;ldquo;lembrar-me&amp;rdquo;, aplicam-se as mesmas peculiaridades que no caso de cookies de subdomínio. Mas desta vez você precisa configurar o componente do usuário, configurando o array identityCookie para a configuração de cookie desejada.</description>
    </item>
    
    <item>
      <title>Teste</title>
      <link>https://www.wikiod.com/pt/yii2/teste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/teste/</guid>
      <description>Como zombar do ActiveRecord # Se você quiser zombar do AR que não tenta se conectar ao banco de dados, pode fazê-lo da seguinte maneira (se estiver usando o PHPUnit):
$post = $this-&amp;gt;getMockBuilder(&#39;\app\model\Post&#39;) -&amp;gt;setMethods([&#39;save&#39;, &#39;attributes&#39;]) -&amp;gt;getMock(); $post-&amp;gt;method(&#39;save&#39;)-&amp;gt;willReturn(true); $post-&amp;gt;method(&#39;attributes&#39;)-&amp;gt;willReturn([ &#39;id&#39;, &#39;status&#39;, &#39;title&#39;, &#39;description&#39;, &#39;text&#39; ]); O problema é que precisamos substituir o método attribute() já que o ActiveRecord por padrão está obtendo a lista de atributos de esquema de banco de dados que estamos tentando evitar.</description>
    </item>
    
    <item>
      <title>Uploads de arquivos</title>
      <link>https://www.wikiod.com/pt/yii2/uploads-de-arquivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/uploads-de-arquivos/</guid>
      <description>Como fazer isso # Fazendo upload de arquivos # O upload de arquivos no Yii geralmente é feito com a ajuda de [[yii\web\UploadedFile]] que encapsula cada upload arquivo como um objeto UploadedFile. Combinado com [[yii\widgets\ActiveForm]] e models, você pode implementar facilmente um mecanismo seguro de upload de arquivos.
Criando modelos # Como trabalhar com entradas de texto simples, para fazer upload de um único arquivo, você criaria uma classe de modelo e usaria um atributo do modelo para manter a instância do arquivo carregado.</description>
    </item>
    
    <item>
      <title>Yii2 ActiveForm</title>
      <link>https://www.wikiod.com/pt/yii2/yii2-activeform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/yii2-activeform/</guid>
      <description>Campos de formulário no Yii2 # Mostrando Exemplo Básico da Página de Visualização no Yii2 para Novos Alunos
Estas são as classes básicas que você deve adicionar para criar o formulário usando o yii2 ActiveForm
&amp;lt;?php Use yii\helpers\Html; Use yii\widgets\ActiveForm; A linha abaixo iniciará a tag de formulário para nosso formulário abaixo, mostrando o exemplo de como especificar id para o formulário e como aplicar quaisquer classes para o formulário.</description>
    </item>
    
    <item>
      <title>Pjax</title>
      <link>https://www.wikiod.com/pt/yii2/pjax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/pjax/</guid>
      <description>Etapa 1 Adicionar estrutura # Em views\site\form-submission.php
&amp;lt;?php Pjax::begin([&#39;id&#39;=&amp;gt;&#39;id-pjax&#39;]); ?&amp;gt; &amp;lt;?= Html::beginForm([&#39;site/form-submission&#39;], &#39;post&#39;, [&#39;data-pjax&#39; =&amp;gt; &#39;&#39;, &#39;class&#39; =&amp;gt; &#39;form-inline&#39;]); ?&amp;gt; &amp;lt;?= Html::input(&#39;text&#39;, &#39;string&#39;, Yii::$app-&amp;gt;request-&amp;gt;post(&#39;string&#39;), [&#39;class&#39; =&amp;gt; &#39;form-control&#39;]) ?&amp;gt; &amp;lt;?= Html::submitButton(&#39;Hash String&#39;, [&#39;class&#39; =&amp;gt; &#39;btn btn-lg btn-primary&#39;, &#39;name&#39; =&amp;gt; &#39;hash-button&#39;]) ?&amp;gt; &amp;lt;?= Html::endForm() ?&amp;gt; &amp;lt;h3&amp;gt;&amp;lt;?= $stringHash ?&amp;gt;&amp;lt;/h3&amp;gt; &amp;lt;?php Pjax::end(); ?&amp;gt; como usar pjax # Adicione esta linha no início da sua visualização.
&amp;lt;?php use yii\widgets\Pjax; ?&amp;gt; Adicione as duas linhas a seguir ao redor do conteúdo que precisa de atualização parcial.</description>
    </item>
    
    <item>
      <title>Solicitação de Ajax</title>
      <link>https://www.wikiod.com/pt/yii2/solicitacao-de-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/solicitacao-de-ajax/</guid>
      <description>Enviando formulário Ajax # Visualizar arquivo: # &amp;lt;?php use yii; use yii\bootstrap\ActiveForm; use yii\helpers\Html; ?&amp;gt; &amp;lt;?php $form = ActiveForm::begin([ &#39;action&#39; =&amp;gt; [&#39;comments/ajax-comment&#39;], &#39;options&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;comment-form&#39; ] ]); ?&amp;gt; &amp;lt;?= $form-&amp;gt;field($model, &#39;comment&#39;); ?&amp;gt; &amp;lt;?= Html::submitButton(&amp;quot;Submit&amp;quot;, [&#39;class&#39; =&amp;gt; &amp;quot;btn&amp;quot;]); ?&amp;gt; &amp;lt;?php ActiveForm::end(); ?&amp;gt; Javascript: # jQuery(document).ready(function($) { $(&amp;quot;.comment-form&amp;quot;).submit(function(event) { event.preventDefault(); // stopping submitting var data = $(this).serializeArray(); var url = $(this).attr(&#39;action&#39;); $.ajax({ url: url, type: &#39;post&#39;, dataType: &#39;json&#39;, data: data }) .</description>
    </item>
    
    <item>
      <title>Trabalhando com Bancos de Dados</title>
      <link>https://www.wikiod.com/pt/yii2/trabalhando-com-bancos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/yii2/trabalhando-com-bancos-de-dados/</guid>
      <description>Usando o construtor de consultas Yii2 # O Yii2 fornece maneiras eficientes de recuperar dados do banco de dados. Considere um exemplo de uma tabela simples de funcionários com os campos emp_id, emp_name e emp_salary. Para recuperar os nomes dos funcionários e seus salários, usamos a consulta.
select emp_name,emp_salary from employee Para gerar a consulta acima no Yii2, existem vários métodos. Um dos métodos é usar um objeto yii\db\Query.
//creates a new \yii\db\Query() object $query=new \yii\db\Query(); $rows=$query-&amp;gt;select([&#39;emp_name&#39;,&#39;emp_salary&#39;]) //specify required columns in an array -&amp;gt;from(&#39;employee&#39;) //specify table name -&amp;gt;all(); //returns an array of rows with each row being an associative array of name-value pairs.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/qt/</link>
    <description>Recent content in Qt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Qt</title>
      <link>https://www.wikiod.com/pt/qt/introducao-ao-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/introducao-ao-qt/</guid>
      <description>Instalação e configuração no Windows e Linux # Baixe a versão de código aberto Qt para Linux
Vá para https://www.qt.io/download-open-source/ e clique em Baixar agora, certifique-se de estar baixando o instalador do Qt para Linux.
Um arquivo com o nome qt-unified-linux-x-online.run será baixado e, em seguida, adicione a permissão exec
chmod +x qt-unified-linux-x-online.run Lembre-se de alterar &amp;lsquo;x&amp;rsquo; para a versão real do instalador. Em seguida, execute o instalador
./qt-unified-linux-x-online.run Baixe a versão de código aberto Qt para Windows</description>
    </item>
    
    <item>
      <title>Sinais e Slots</title>
      <link>https://www.wikiod.com/pt/qt/sinais-e-slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/sinais-e-slots/</guid>
      <description>Sinais e slots são usados ​​para comunicação entre objetos. O mecanismo de sinais e slots é uma característica central do Qt.
Na programação GUI, quando alteramos um widget, geralmente queremos que outro widget seja notificado. De maneira mais geral, queremos que objetos de qualquer tipo sejam capazes de se comunicar uns com os outros.
Sinais são emitidos por objetos quando eles mudam seu estado de uma forma que pode ser interessante para outros objetos.</description>
    </item>
    
    <item>
      <title>CMakeLists.txt para seu projeto Qt</title>
      <link>https://www.wikiod.com/pt/qt/cmakeliststxt-para-seu-projeto-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/cmakeliststxt-para-seu-projeto-qt/</guid>
      <description>CMakeLists.txt para Qt 5 # Um arquivo de projeto CMake mínimo que usa Qt5 pode ser:
cmake_minimum_required(VERSION 2.8.11) project(myproject) find_package(Qt5 5.7.0 REQUIRED COMPONENTS Core ) set(CMAKE_AUTOMOC ON) add_executable(${PROJECT_NAME} main.cpp ) target_link_libraries(${PROJECT_NAME} Qt5::Core ) cmake_minimum_required é chamado para definir a versão mínima necessária para o CMake. A versão mínima necessária para que este exemplo funcione é 2.8.11 &amp;ndash; as versões anteriores do CMake precisam de código adicional para um destino usar o Qt.</description>
    </item>
    
    <item>
      <title>qmake</title>
      <link>https://www.wikiod.com/pt/qt/qmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/qmake/</guid>
      <description>Arquivo &amp;ldquo;pro&amp;rdquo; padrão. # qmake é uma ferramenta de automação de compilação, que é fornecida com o framework Qt. Ele faz um trabalho semelhante a ferramentas como CMake ou GNU Autotools, mas foi projetado para ser usado especificamente com Qt. Como tal, está bem integrado com o ecossistema Qt, notavelmente o Qt Creator IDE.
Se você iniciar o Qt Creator e selecionar File -&amp;gt; New File or Project -&amp;gt; Application -&amp;gt; Qt Widgets, o Qt Creator irá gerar um esqueleto de projeto para você junto com um arquivo &amp;ldquo;pro&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Encadeamento e simultaneidade</title>
      <link>https://www.wikiod.com/pt/qt/encadeamento-e-simultaneidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/encadeamento-e-simultaneidade/</guid>
      <description>Algumas notas que já são mencionadas nos documentos oficiais aqui e [aqui](http://doc.qt. io/qt-5/qobject.html#moveToThread):
Se um objeto tem um pai, ele deve estar no mesmo thread que o pai, ou seja, ele não pode ser movido para um novo encadeamento, nem você pode definir um pai para um objeto se o pai e o objeto estiverem em encadeamentos diferentes Quando um objeto é movido para um novo thread, todos os seus filhos também são movidos para o novo thread Você só pode enviar objetos para um novo segmento.</description>
    </item>
    
    <item>
      <title>QObject</title>
      <link>https://www.wikiod.com/pt/qt/qobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/qobject/</guid>
      <description>A classe QObject é a classe base para todos os objetos Qt.
qobject_cast # T qobject_cast(QObject *object) Uma funcionalidade que é adicionada derivando de QObject e usando a macro Q_OBJECT é a capacidade de usar o qobject_cast.
Exemplo:
class myObject : public QObject { Q_OBJECT //... }; QObject* obj = new myObject(); Para verificar se obj é um tipo myObject e para convertê-lo em C++, você geralmente pode usar um [dynamic_cast](https://www.</description>
    </item>
    
    <item>
      <title>Qt - Lidando com Bancos de Dados</title>
      <link>https://www.wikiod.com/pt/qt/qt---lidando-com-bancos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/qt---lidando-com-bancos-de-dados/</guid>
      <description>Você precisará do plugin Qt SQL correspondente ao tipo dado a QSqlDatabase::addDatabase Se você não tiver o plugin SQL necessário, o Qt irá avisá-lo de que não consegue encontrar o driver solicitado Se você não tiver o plugin SQL necessário, você terá que compilá-los da fonte Qt Usando um banco de dados no Qt # No arquivo Project.pro adicionamos:
CONFIG += sql em MainWindow.h escrevemos:
#include &amp;lt;QMainWindow&amp;gt; #include &amp;lt;QSql&amp;gt; #include &amp;lt;QDebug&amp;gt; namespace Ui { class MainWindow; } class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); private slots: private: Ui::MainWindow *ui; QSqlDatabase db; }; Agora em MainWindow.</description>
    </item>
    
    <item>
      <title>Implantando aplicativos Qt</title>
      <link>https://www.wikiod.com/pt/qt/implantando-aplicativos-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/implantando-aplicativos-qt/</guid>
      <description>Implantando no Windows # Qt fornece uma ferramenta de implantação para Windows: windeployqt. A ferramenta inspeciona um executável de aplicativo Qt para suas dependências de módulos Qt e cria um diretório de implantação com os arquivos Qt necessários para executar o executável inspecionado. Um script possível pode se parecer com:
set PATH=%PATH%;&amp;lt;qt_install_prefix&amp;gt;/bin windeployqt --dir /path/to/deployment/dir /path/to/qt/application.exe O comando set é chamado para adicionar o diretório bin do Qt à variável de ambiente PATH.</description>
    </item>
    
    <item>
      <title>Comunicação entre QML e C&#43;&#43;</title>
      <link>https://www.wikiod.com/pt/qt/comunicacao-entre-qml-e-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/comunicacao-entre-qml-e-c-/</guid>
      <description>Podemos usar QML para construir aplicações híbridas, pois é muito mais fácil que C++. Portanto, devemos saber como eles se comunicam.
Chamar C++ em QML # Registrar classes C++ em QML
No lado C++, imagine que temos uma classe chamada QmlCppBridge, ela implementa um método chamado printHello().
class QmlCppBridge : public QObject { Q_OBJECT public: Q_INVOKABLE static void printHello() { qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, QML!&amp;quot;; } }; Queremos usá-lo no lado QML.</description>
    </item>
    
    <item>
      <title>ModeloVisualização</title>
      <link>https://www.wikiod.com/pt/qt/modelovisualizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qt/modelovisualizacao/</guid>
      <description>Uma tabela simples somente leitura para visualizar dados de um modelo # Este é um exemplo simples para exibir dados somente leitura que são tabulares por natureza usando o [Model/View Framework] do Qt 1. Especificamente, os Qt Objects QAbstractTableModel (subclassificados neste exemplo) e QTableView são usados.
Implementações dos métodos rowCount(), columnCount(), data() e headerData() são necessárias para fornecer ao objeto QTableView um meio para obter informações sobre os dados contidos no objeto QAbstractTableModel.</description>
    </item>
    
  </channel>
</rss>

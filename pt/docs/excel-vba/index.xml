<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial excel-vba on </title>
    <link>https://www.wikiod.com/pt/docs/excel-vba/</link>
    <description>Recent content in tutorial excel-vba on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/excel-vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao excel-vba</title>
      <link>https://www.wikiod.com/pt/excel-vba/introducao-ao-excel-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/introducao-ao-excel-vba/</guid>
      <description>Abrindo o Editor do Visual Basic (VBE) # Etapa 1: abra uma pasta de trabalho
Etapa 2 Opção A: Pressione Alt + F11
Este é o atalho padrão para abrir o VBE.
Etapa 2 Opção B: guia Desenvolvedor &amp;ndash;&amp;gt; Visualizar código
Primeiro, a guia Desenvolvedor deve ser adicionada à faixa de opções. Vá para Arquivo -&amp;gt; Opções -&amp;gt; Personalizar Faixa de Opções e marque a caixa para desenvolvedor.
Em seguida, vá para a guia do desenvolvedor e clique em &amp;ldquo;Visualizar código&amp;rdquo; ou &amp;ldquo;Visual Basic&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Práticas recomendadas de VBA</title>
      <link>https://www.wikiod.com/pt/excel-vba/praticas-recomendadas-de-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/praticas-recomendadas-de-vba/</guid>
      <description>Todos nós os conhecemos, mas essas práticas são muito menos óbvias para quem está começando a programar em VBA.
SEMPRE Use &amp;ldquo;Opção Explícita&amp;rdquo; # Na janela do Editor VBA, no menu Ferramentas, selecione &amp;ldquo;Opções&amp;rdquo;:
Em seguida, na guia &amp;ldquo;Editor&amp;rdquo;, verifique se &amp;ldquo;Exigir declaração de variável&amp;rdquo; está marcado:
Selecionar esta opção colocará automaticamente Option Explicit no topo de cada módulo VBA.
Pequena nota: Isso é verdade para os módulos, módulos de classe, etc.</description>
    </item>
    
    <item>
      <title>Métodos para encontrar a última linha ou coluna usada em uma planilha</title>
      <link>https://www.wikiod.com/pt/excel-vba/metodos-para-encontrar-a-ultima-linha-ou-coluna-usada-em-uma-planilha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/metodos-para-encontrar-a-ultima-linha-ou-coluna-usada-em-uma-planilha/</guid>
      <description>Você pode encontrar uma boa explicação sobre por que outros métodos são desencorajados/imprecisos aqui: http://stackoverflow.com/a/11169920/4628637
Encontre a última célula não vazia em uma coluna # Neste exemplo, veremos um método para retornar a última linha não vazia em uma coluna para um conjunto de dados.
Esse método funcionará independentemente de regiões vazias no conjunto de dados.
No entanto, cuidado deve ser usado se células mescladas estiverem envolvidas, pois o método End será &amp;ldquo;parado&amp;rdquo; em uma região mesclada, retornando a primeira célula da região mesclada.</description>
    </item>
    
    <item>
      <title>Dicas e truques do Excel VBA</title>
      <link>https://www.wikiod.com/pt/excel-vba/dicas-e-truques-do-excel-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/dicas-e-truques-do-excel-vba/</guid>
      <description>Este tópico consiste em uma ampla variedade de dicas e truques úteis descobertos por usuários de SO por meio de sua experiência em codificação. Geralmente, esses são exemplos de maneiras de contornar frustrações comuns ou maneiras de usar o Excel de uma maneira mais &amp;ldquo;inteligente&amp;rdquo;.
Usando planilhas xlVeryHidden # As planilhas no Excel têm três opções para a propriedade Visible. Essas opções são representadas por constantes na enumeração xlSheetVisibility e são as seguintes:</description>
    </item>
    
    <item>
      <title>Erros comuns</title>
      <link>https://www.wikiod.com/pt/excel-vba/erros-comuns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/erros-comuns/</guid>
      <description>Referências qualificadas # Ao se referir a uma planilha, um intervalo ou células individuais, é importante qualificar totalmente a referência.
Por exemplo:
ThisWorkbook.Worksheets(&amp;quot;Sheet1&amp;quot;).Range(Cells(1, 2), Cells(2, 3)).Copy Não é totalmente qualificado: As referências Cells não possuem uma pasta de trabalho e planilha associada a elas. Sem uma referência explícita, Cells se refere ao ActiveSheet por padrão. Portanto, este código falhará (produzindo resultados incorretos) se uma planilha diferente de Sheet1 for a ActiveSheet atual.</description>
    </item>
    
    <item>
      <title>Intervalos e Células</title>
      <link>https://www.wikiod.com/pt/excel-vba/intervalos-e-celulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/intervalos-e-celulas/</guid>
      <description>Sintaxe # Set - O operador usado para definir uma referência a um objeto, como um Range For Each - O operador costumava percorrer todos os itens em uma coleção Observe que os nomes das variáveis ​​r, cell e outros podem ser nomeados como você quiser, mas devem ser nomeados adequadamente para que o código seja mais fácil de entender para você e para os outros.
Maneiras de se referir a uma única célula # A maneira mais simples de se referir a uma única célula na planilha atual do Excel é simplesmente colocar o formulário A1 de sua referência entre colchetes:</description>
    </item>
    
    <item>
      <title>Depuração e solução de problemas</title>
      <link>https://www.wikiod.com/pt/excel-vba/depuracao-e-solucao-de-problemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/depuracao-e-solucao-de-problemas/</guid>
      <description>Sintaxe # Debug.Print(string) Para para Janela imediata # Se você quiser testar uma linha de código de macro sem precisar executar um sub inteiro, você pode digitar comandos diretamente na janela imediata e pressionar &amp;lsquo;ENTER&amp;rsquo; para executar a linha.
Para testar a saída de uma linha, você pode precedê-la com um ponto de interrogação ? para imprimir diretamente na Janela Imediata. Alternativamente, você também pode usar o comando print para imprimir a saída.</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/excel-vba/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/matrizes/</guid>
      <description>Preenchendo arrays (adicionando valores) # Existem várias maneiras de preencher uma matriz.
Diretamente # &#39;one-dimensional Dim arrayDirect1D(2) As String arrayDirect(0) = &amp;quot;A&amp;quot; arrayDirect(1) = &amp;quot;B&amp;quot; arrayDirect(2) = &amp;quot;C&amp;quot; &#39;multi-dimensional (in this case 3D) Dim arrayDirectMulti(1, 1, 2) arrayDirectMulti(0, 0, 0) = &amp;quot;A&amp;quot; arrayDirectMulti(0, 0, 1) = &amp;quot;B&amp;quot; arrayDirectMulti(0, 0, 2) = &amp;quot;C&amp;quot; arrayDirectMulti(0, 1, 0) = &amp;quot;D&amp;quot; &#39;... Usando a função Array() # &#39;one-dimensional only Dim array1D As Variant &#39;has to be type variant array1D = Array(1, 2, &amp;quot;A&amp;quot;) &#39;-&amp;gt; array1D(0) = 1, array1D(1) = 2, array1D(2) = &amp;quot;A&amp;quot; Do intervalo # Dim arrayRange As Variant &#39;has to be type variant &#39;putting ranges in an array always creates a 2D array (even if only 1 row or column) &#39;starting at 1 and not 0, first dimension is the row and the second the column arrayRange = Range(&amp;quot;A1:C10&amp;quot;).</description>
    </item>
    
    <item>
      <title>Percorra todas as planilhas na pasta de trabalho ativa</title>
      <link>https://www.wikiod.com/pt/excel-vba/percorra-todas-as-planilhas-na-pasta-de-trabalho-ativa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/percorra-todas-as-planilhas-na-pasta-de-trabalho-ativa/</guid>
      <description>Recupere todos os nomes de planilhas na pasta de trabalho ativa # Option Explicit Sub LoopAllSheets() Dim sht As Excel.Worksheet &#39; declare an array of type String without committing to maximum number of members Dim sht_Name() As String Dim i As Integer &#39; get the number of worksheets in Active Workbook , and put it as the maximum number of members in the array ReDim sht_Name(1 To ActiveWorkbook.Worksheets.count) i = 1 &#39; loop through all worksheets in Active Workbook For Each sht In ActiveWorkbook.</description>
    </item>
    
    <item>
      <title>Funções definidas pelo usuário (UDFs)</title>
      <link>https://www.wikiod.com/pt/excel-vba/funcoes-definidas-pelo-usuario-udfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/excel-vba/funcoes-definidas-pelo-usuario-udfs/</guid>
      <description>Sintaxe # Função functionName(argumentVariable As dataType, argumentVariable2 As dataType, Opcional argumentVariable3 As dataType) As functionReturnDataType Declaração básica de uma função. Toda função precisa de um nome, mas não precisa receber argumentos. Pode levar 0 argumentos ou pode levar um determinado número de argumentos. Você também pode declarar um argumento como opcional (o que significa que não importa se você o fornece ao chamar a função). É uma prática recomendada fornecer o tipo de variável para cada argumento e, da mesma forma, retornar o tipo de dados que a própria função retornará.</description>
    </item>
    
  </channel>
</rss>

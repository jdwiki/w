<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial html5-canvas on </title>
    <link>https://www.wikiod.com/pt/docs/html5-canvas/</link>
    <description>Recent content in Tutorial html5-canvas on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/html5-canvas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao html5-canvas</title>
      <link>https://www.wikiod.com/pt/html5-canvas/introducao-ao-html5-canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/introducao-ao-html5-canvas/</guid>
      <description>Detectando a posição do mouse na tela # Este exemplo mostrará como obter a posição do mouse em relação à tela, de modo que (0,0) seja o canto superior esquerdo da tela HTML5. O e.clientX e o e.clientY obterão as posições do mouse em relação ao topo do documento, para mudar isso para ser baseado no topo da tela subtraímos as posições left e right do canvas do cliente X e Y.</description>
    </item>
    
    <item>
      <title>Animação</title>
      <link>https://www.wikiod.com/pt/html5-canvas/animacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/animacao/</guid>
      <description>Use requestAnimationFrame() NÃO setInterval() para loops de animação # requestAnimationFrame é semelhante ao setInterval, mas tem essas melhorias importantes:
O código de animação é sincronizado com as atualizações de exibição para eficiência O código clear + redesenho é agendado, mas não executado imediatamente. O navegador executará o código clear + redesenho somente quando a tela estiver pronta para ser atualizada. Essa sincronização com o ciclo de atualização aumenta o desempenho da animação, dando ao seu código o tempo mais disponível para conclusão.</description>
    </item>
    
    <item>
      <title>Manipulação de Pixel com getImageData e putImageData</title>
      <link>https://www.wikiod.com/pt/html5-canvas/manipulacao-de-pixel-com-getimagedata-e-putimagedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/manipulacao-de-pixel-com-getimagedata-e-putimagedata/</guid>
      <description>Introdução ao &amp;ldquo;context.getImageData&amp;rdquo; # O Html5 Canvas oferece a capacidade de buscar e alterar a cor de qualquer pixel na tela.
Você pode usar a manipulação de pixels do Canvas para:
Crie um seletor de cores para uma imagem ou selecione uma cor em uma roda de cores. Crie filtros de imagem complexos, como desfoque e detecção de bordas. Recolorir qualquer parte de uma imagem no nível de pixel (se você usar HSL, você pode até recolorir uma imagem mantendo a importante Iluminação e Saturação para que o resultado não pareça que alguém colocou tinta na imagem).</description>
    </item>
    
    <item>
      <title>Design responsivo</title>
      <link>https://www.wikiod.com/pt/html5-canvas/design-responsivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/design-responsivo/</guid>
      <description>Criando uma tela de página inteira responsiva # Código inicial para criar e remover uma tela de página inteira que responde a eventos de redimensionamento via javascript.
var canvas; // Global canvas reference var ctx; // Global 2D context reference // Creates a canvas function createCanvas () { const canvas = document.createElement(&amp;quot;canvas&amp;quot;); canvas.style.position = &amp;quot;absolute&amp;quot;; // Set the style canvas.style.left = &amp;quot;0px&amp;quot;; // Position in top left canvas.style.top = &amp;quot;0px&amp;quot;; canvas.</description>
    </item>
    
    <item>
      <title>Tipos de mídia e a tela</title>
      <link>https://www.wikiod.com/pt/html5-canvas/tipos-de-midia-e-a-tela/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/tipos-de-midia-e-a-tela/</guid>
      <description>Este tópico aborda os vários tipos de mídia e como eles podem ser usados ​​com a tela na interface 2D.
Os tipos de mídia têm categorias genéricas e específicas de formato
Tipos de mídia
Animações Vídeos Imagens imagens em alta definição Imagem vetorial Imagens animadas Formatos de mídia
Jpg/Jpeg PNG Gif SVG M-JPEG Webm Webp Imagens
Há uma grande variedade de formatos de imagem suportados pelos navegadores, embora nenhum navegador suporte todos eles.</description>
    </item>
    
    <item>
      <title>Composição</title>
      <link>https://www.wikiod.com/pt/html5-canvas/composicao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/composicao/</guid>
      <description>Desenhe atrás de formas existentes com &amp;ldquo;destination-over&amp;rdquo; # context.globalCompositeOperation = &amp;quot;destination-over&amp;quot; A composição &amp;ldquo;destino sobre&amp;rdquo; coloca um novo desenho sob os desenhos existentes.
context.drawImage(rainy,0,0); context.globalCompositeOperation=&#39;destination-over&#39;; // sunny UNDER rainy context.drawImage(sunny,0,0); Apague formas existentes com &amp;ldquo;destination-out&amp;rdquo; # context.globalCompositeOperation = &amp;quot;destination-out&amp;quot; a composição &amp;ldquo;destination-out&amp;rdquo; usa novas formas para apagar desenhos existentes.
A nova forma não é realmente desenhada - é apenas usada como um &amp;ldquo;cortador de biscoitos&amp;rdquo; para apagar os pixels existentes.</description>
    </item>
    
    <item>
      <title>Imagens</title>
      <link>https://www.wikiod.com/pt/html5-canvas/imagens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/imagens/</guid>
      <description>Corte de imagem usando canvas # Este exemplo mostra uma função de corte de imagem simples que obtém uma imagem e coordenadas de corte e retorna a imagem cortada.
function cropImage(image, croppingCoords) { var cc = croppingCoords; var workCan = document.createElement(&amp;quot;canvas&amp;quot;); // create a canvas workCan.width = Math.floor(cc.width); // set the canvas resolution to the cropped image size workCan.height = Math.floor(cc.height); var ctx = workCan.getContext(&amp;quot;2d&amp;quot;); // get a 2D rendering interface ctx.</description>
    </item>
    
    <item>
      <title>Texto</title>
      <link>https://www.wikiod.com/pt/html5-canvas/texto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/texto/</guid>
      <description>Texto de desenho # Desenhar para tela não se limita apenas a formas e imagens. Você também pode desenhar texto na tela.
Para desenhar texto na tela, obtenha uma referência à tela e chame o método fillText no contexto.
var canvas = document.getElementById(&#39;canvas&#39;); var ctx = canvas.getContext(&#39;2d&#39;); ctx.fillText(&amp;quot;My text&amp;quot;, 0, 0); Os três argumentos necessários que são passados ​​para fillText são:
O texto que você gostaria de exibir A posição horizontal (eixo x) A posição vertical (eixo y) Além disso, há um quarto argumento opcional, que você pode usar para especificar a largura máxima do seu texto em pixels.</description>
    </item>
    
    <item>
      <title>Navegando ao longo de um caminho</title>
      <link>https://www.wikiod.com/pt/html5-canvas/navegando-ao-longo-de-um-caminho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/navegando-ao-longo-de-um-caminho/</guid>
      <description>Localizar ponto na curva # Este exemplo encontra um ponto em uma curva bezier ou cúbica em position onde position é a distância unitária na curva 0 &amp;lt;= position &amp;lt;= 1. A posição é fixada no intervalo, portanto, se os valores forem &amp;lt; 0 ou &amp;gt; 1 forem passados, eles serão definidos como 0,1, respectivamente.
Passe a função 6 coordenadas para bezier quadrático ou 8 para cúbico.
O último argumento opcional é o vetor retornado (ponto).</description>
    </item>
    
    <item>
      <title>Colisões e Interseções</title>
      <link>https://www.wikiod.com/pt/html5-canvas/colisoes-e-intersecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/html5-canvas/colisoes-e-intersecoes/</guid>
      <description>São 2 círculos colidindo? # // circle objects: { x:, y:, radius: } // return true if the 2 circles are colliding // c1 and c2 are circles as defined above function CirclesColliding(c1,c2){ var dx=c2.x-c1.x; var dy=c2.y-c1.y; var rSum=c1.radius+c2.radius; return(dx*dx+dy*dy&amp;lt;=rSum*rSum); } São 2 retângulos colidindo? # // rectangle objects { x:, y:, width:, height: } // return true if the 2 rectangles are colliding // r1 and r2 are rectangles as defined above function RectsColliding(r1,r2){ return !</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Ruby on Rails on </title>
    <link>https://www.wikiod.com/pt/docs/ruby-on-rails/</link>
    <description>Recent content in Tutorial Ruby on Rails on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Ruby on Rails</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/comecando-com-ruby-on-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/comecando-com-ruby-on-rails/</guid>
      <description>Criando um aplicativo Ruby on Rails # Este exemplo assume que Ruby e Ruby on Rails já foram instalados corretamente. Se não, você pode encontrar como fazê-lo aqui.
Abra uma linha de comando ou terminal. Para gerar um novo aplicativo rails, use o comando rails new seguido do nome do seu aplicativo:
$ rails new my_app Se você deseja criar seu aplicativo Rails com uma versão específica do Rails, você pode especificá-lo no momento da geração do aplicativo.</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/roteamento/</guid>
      <description>O roteador Rails reconhece URLs e os envia para a ação de um controlador. Ele também pode gerar caminhos e URLs, evitando a necessidade de codificar strings em suas visualizações.
&amp;ldquo;Roteamento&amp;rdquo; em geral é como os URLs são &amp;ldquo;tratados&amp;rdquo; pelo seu aplicativo. No caso do Rails, normalmente é qual controlador e qual ação desse controlador manipulará uma URL de entrada específica. Em aplicativos Rails, as rotas geralmente são colocadas no arquivo config/routes.</description>
    </item>
    
    <item>
      <title>Migrações do ActiveRecord</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/migracoes-do-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/migracoes-do-activerecord/</guid>
      <description>Parâmetros # Tipo de coluna Descrição :chave_primária Chave primária :string Tipo de dados de string mais curto. Permite a opção limit para o número máximo de caracteres. :texto Maior quantidade de texto. Permite a opção limit para o número máximo de bytes. :inteiro Inteiro. Permite a opção limit para o número máximo de bytes. :grande Inteiro maior :float Flutuar :decimal Número decimal com precisão variável. Permite opções de precisão e escala.</description>
    </item>
    
    <item>
      <title>Práticas recomendadas do Rails</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/praticas-recomendadas-do-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/praticas-recomendadas-do-rails/</guid>
      <description>Modelo Gordo, Controlador Magro # “Fat Model, Skinny Controller” refere-se a como as partes M e C do MVC trabalham idealmente juntas. Ou seja, qualquer lógica não relacionada à resposta deve entrar no modelo, de preferência em um método agradável e testável. Enquanto isso, o controlador “magro” é simplesmente uma boa interface entre a visão e o modelo.
Na prática, isso pode exigir uma variedade de diferentes tipos de refatoração, mas tudo se resume a uma ideia: movendo qualquer lógica que não seja sobre a resposta ao modelo (em vez do controlador), você não apenas promoveu a reutilização sempre que possível, mas você também possibilitou testar seu código fora do contexto de uma solicitação.</description>
    </item>
    
    <item>
      <title>ActiveRecord</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/activerecord/</guid>
      <description>Criando um modelo via gerador # Ruby on Rails fornece um gerador de model que você pode usar para criar modelos ActiveRecord. Basta usar rails generate model e fornecer o nome do modelo.
$ rails g model user Além do arquivo de modelo em app/models, o gerador também criará:
o Teste em test/models/user_test.rb as luminárias em test/fixtures/users.yml a migração do banco de dados em db/migrate/XXX_create_users.rb Você também pode gerar alguns campos para o modelo ao gerá-lo.</description>
    </item>
    
    <item>
      <title>Interface de consulta do ActiveRecord</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/interface-de-consulta-do-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/interface-de-consulta-do-activerecord/</guid>
      <description>ActiveRecord é o M no MVC que é a camada do sistema responsável por representar os dados e a lógica do negócio. A técnica que conecta os objetos ricos de um aplicativo a tabelas em um sistema de gerenciamento de banco de dados relacional é Object Relational Mapper(ORM).
O ActiveRecord realizará consultas no banco de dados para você e é compatível com a maioria dos sistemas de banco de dados. Independentemente de qual sistema de banco de dados você está usando, o formato do método ActiveRecord sempre será o mesmo.</description>
    </item>
    
    <item>
      <title>Convenções de nomenclatura</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/convencoes-de-nomenclatura/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/convencoes-de-nomenclatura/</guid>
      <description>Controladores # Os nomes das classes do controlador são pluralizados. O motivo é que o controlador controla várias instâncias da instância do objeto.
Por exemplo: OrdersController seria o controlador para uma tabela orders. O Rails então procurará a definição da classe em um arquivo chamado orders_controller.rb no diretório /app/controllers.
Por exemplo: PostsController seria o controlador para uma tabela posts.
Se o nome da classe do controlador tiver várias palavras em maiúsculas, presume-se que o nome da tabela tenha sublinhados entre essas palavras.</description>
    </item>
    
    <item>
      <title>Configurar Angular com Rails</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/configurar-angular-com-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/configurar-angular-com-rails/</guid>
      <description>Angular com Rails 101 # Etapa 1: Criar um novo aplicativo Rails # gem install rails -v 4.1 rails new angular_example Passo 2: Remova Turbolinks # Remover turbolinks requer removê-lo do Gemfile.
gem &#39;turbolinks&#39; Remova o require de app/assets/javascripts/application.js:
//= require turbolinks Etapa 3: Adicionar AngularJS ao pipeline de ativos # Para que o Angular funcione com o pipeline de ativos do Rails, precisamos adicionar ao Gemfile:
gem &#39;angular-rails-templates&#39; gem &#39;bower-rails&#39; Agora execute o comando</description>
    </item>
    
    <item>
      <title>Autenticação do usuário no Rails</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/autenticacao-do-usuario-no-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/autenticacao-do-usuario-no-rails/</guid>
      <description>O Devise é uma jóia muito poderosa, permite que você se inscreva, entre e saia das opções logo após a instalação. Além disso, o usuário pode adicionar autenticações e restrições às suas aplicações. O Devise também vem com suas próprias visualizações, se o usuário quiser usar. Um usuário também pode personalizar os formulários de inscrição e login de acordo com sua necessidade e exigência. Deve-se notar que a Devise recomenda que você implemente seu próprio login se você for novo no Rails.</description>
    </item>
    
    <item>
      <title>Validações do ActiveRecord</title>
      <link>https://www.wikiod.com/pt/ruby-on-rails/validacoes-do-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ruby-on-rails/validacoes-do-activerecord/</guid>
      <description>Validando o comprimento de um atributo # class Person &amp;lt; ApplicationRecord validates :name, length: { minimum: 2 } validates :bio, length: { maximum: 500 } validates :password, length: { in: 6..20 } validates :registration_number, length: { is: 6 } end As opções de restrição de comprimento possíveis são:
:minimum - O atributo não pode ter menos que o comprimento especificado. :maximum - O atributo não pode ter mais do que o comprimento especificado.</description>
    </item>
    
  </channel>
</rss>

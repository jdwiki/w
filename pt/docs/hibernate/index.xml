<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de hibernação on </title>
    <link>https://www.wikiod.com/pt/docs/hibernate/</link>
    <description>Recent content in Tutorial de hibernação on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/hibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com a hibernação</title>
      <link>https://www.wikiod.com/pt/hibernate/comecando-com-a-hibernacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/comecando-com-a-hibernacao/</guid>
      <description>Usando a configuração XML para configurar o Hibernate # Eu crio um arquivo chamado database-servlet.xml em algum lugar no classpath.
Inicialmente, seu arquivo de configuração ficará assim:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:jdbc=&amp;quot;http://www.springframework.org/schema/jdbc&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&amp;quot;&amp;gt; &amp;lt;/beans&amp;gt; Você notará que importei os namespaces tx e jdbc Spring. Isso ocorre porque vamos usá-los bastante neste arquivo de configuração.
A primeira coisa que você quer fazer é habilitar o gerenciamento de transações baseado em anotações (@Transactional).</description>
    </item>
    
    <item>
      <title>Estratégia de nomenclatura personalizada</title>
      <link>https://www.wikiod.com/pt/hibernate/estrategia-de-nomenclatura-personalizada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/estrategia-de-nomenclatura-personalizada/</guid>
      <description>Criando e usando uma estratégia de nomeação implícita personalizada # Criar uma ImplicitNamingStrategy personalizada permite que você ajuste como o Hibernate atribuirá nomes a atributos Entity não explicitamente nomeados, incluindo Chaves Estrangeiras, Chaves Únicas, Colunas Identificadoras, Colunas Básicas e muito mais.
Por exemplo, por padrão, o Hibernate irá gerar Chaves Estrangeiras que são hash e se parecem com:
FKe6hidh4u0qh8y1ijy59s2ee6m Embora isso geralmente não seja um problema, você pode desejar que o nome seja mais descritivo, como:</description>
    </item>
    
    <item>
      <title>HabilitarDesabilitar log SQL</title>
      <link>https://www.wikiod.com/pt/hibernate/habilitardesabilitar-log-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/habilitardesabilitar-log-sql/</guid>
      <description>Registrar essas consultas é lento, ainda mais lento do que o Hibernate normalmente é. Ele também usa uma enorme quantidade de espaço de log. Não use o log em cenários onde o desempenho é necessário. Use isto somente ao testar as consultas que o Hibernate realmente gera.
Usando um arquivo de configuração de log # No arquivo de configuração de log de sua escolha, defina o log dos seguintes pacotes para os níveis mostrados.</description>
    </item>
    
    <item>
      <title>Hibernar relacionamentos de entidade usando anotações</title>
      <link>https://www.wikiod.com/pt/hibernate/hibernar-relacionamentos-de-entidade-usando-anotacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/hibernar-relacionamentos-de-entidade-usando-anotacoes/</guid>
      <description>Parâmetros # Anotação Detalhes @OneToOne Especifica um relacionamento um para um com um objeto correspondente. @OneToMany Especifica um único objeto que mapeia para muitos objetos. @ManyToOne Especifica uma coleção de objetos que mapeiam para um único objeto. @Entidade Especifica um objeto que mapeia para uma tabela de banco de dados. @Tabela Especifica qual tabela de banco de dados este objeto mapeia também. @JoinColumn Especifica em qual coluna uma chave foregin é armazenada.</description>
    </item>
    
    <item>
      <title>Ajuste de desempenho</title>
      <link>https://www.wikiod.com/pt/hibernate/ajuste-de-desempenho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/ajuste-de-desempenho/</guid>
      <description>Use composição em vez de herança # O Hibernate possui algumas estratégias de herança. O tipo de herança JOINED faz um JOIN entre a entidade filha e a entidade pai.
O problema com esta abordagem é que o Hibernate sempre traz os dados de todas as tabelas envolvidas na herança.
Por exemplo, se você tiver as entidades Bicycle e MountainBike usando o tipo de herança JOINED:
@Entity @Inheritance(strategy = InheritanceType.JOINED) public abstract class Bicycle { } E:</description>
    </item>
    
    <item>
      <title>Carregamento lento vs carregamento ansioso</title>
      <link>https://www.wikiod.com/pt/hibernate/carregamento-lento-vs-carregamento-ansioso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/carregamento-lento-vs-carregamento-ansioso/</guid>
      <description>Carregamento lento vs Carregamento ansioso # Buscar ou carregar dados pode ser classificado principalmente em dois tipos: ansioso e preguiçoso.
Para usar o Hibernate, certifique-se de adicionar a versão mais recente dele na seção de dependências do seu arquivo pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.1.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 1. Carregamento ansioso e carregamento lento
A primeira coisa que devemos discutir aqui é o que são carregamento lento e carregamento ansioso:
O Eager Loading é um padrão de design no qual a inicialização de dados ocorre no local.</description>
    </item>
    
    <item>
      <title>Cache</title>
      <link>https://www.wikiod.com/pt/hibernate/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/cache/</guid>
      <description>Habilitando o cache de hibernação no WildFly # Para habilitar Second Level Caching para Hibernate no WildFly, adicione esta propriedade ao seu arquivo persistence.xml:
&amp;lt;property name=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; Você também pode habilitar Query Caching com esta propriedade:
&amp;lt;property name=&amp;quot;hibernate.cache.use_query_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; O WildFly não exige que você defina um provedor de cache ao habilitar o cache de segundo nível do Hibernate, pois o Infinispan é usado por padrão. Se você quiser usar um Provedor de Cache alternativo, no entanto, você pode fazê-lo com a propriedade hibernate.</description>
    </item>
    
    <item>
      <title>Critérios e Projeções</title>
      <link>https://www.wikiod.com/pt/hibernate/criterios-e-projecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/criterios-e-projecoes/</guid>
      <description>Usar Filtros # @Filter é usado como um campo WHERE, aqui alguns exemplos
Entidade Estudantil
@Entity @Table(name = &amp;quot;Student&amp;quot;) public class Student { /*...*/ @OneToMany @Filter(name = &amp;quot;active&amp;quot;, condition = &amp;quot;EXISTS(SELECT * FROM Study s WHERE state = true and s.id = study_id)&amp;quot;) Set&amp;lt;StudentStudy&amp;gt; studies; /* getters and setters methods */ } Entidade de Estudo
@Entity @Table(name = &amp;quot;Study&amp;quot;) @FilterDef(name = &amp;quot;active&amp;quot;) @Filter(name = &amp;quot;active&amp;quot;, condition=&amp;quot;state = true&amp;quot;) public class Study { /*.</description>
    </item>
    
    <item>
      <title>Hibernar e JPA</title>
      <link>https://www.wikiod.com/pt/hibernate/hibernar-e-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/hibernar-e-jpa/</guid>
      <description>Relação entre Hibernate e JPA # Hibernate é uma implementação do padrão [JPA][1]. Como tal, tudo o que foi dito lá também é verdade para o Hibernate.
O Hibernate tem algumas extensões para JPA. Além disso, a maneira de configurar um provedor JPA é específica do provedor. Esta seção de documentação deve conter apenas o que é específico do Hibernate.
[1]: https://www.wikiod.com/pt/jpa/comecando-com-jpa#Instalação ou configuração</description>
    </item>
    
    <item>
      <title>Consultas SQL nativas</title>
      <link>https://www.wikiod.com/pt/hibernate/consultas-sql-nativas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/hibernate/consultas-sql-nativas/</guid>
      <description>Consulta Simples # Supondo que você tenha um handle no objeto Session do Hibernate, neste caso chamado session:
List&amp;lt;Object[]&amp;gt; result = session.createNativeQuery(&amp;quot;SELECT * FROM some_table&amp;quot;).list(); for (Object[] row : result) { for (Object col : row) { System.out.print(col); } } Isso recuperará todas as linhas em some_table e as colocará na variável result e imprimirá todos os valores.
Exemplo para obter um resultado único # Object pollAnswered = getCurrentSession().createSQLQuery( &amp;quot;select * from TJ_ANSWERED_ASW where pol_id = &amp;quot;+pollId+&amp;quot; and prf_log = &#39;&amp;quot;+logid+&amp;quot;&#39;&amp;quot;).</description>
    </item>
    
  </channel>
</rss>

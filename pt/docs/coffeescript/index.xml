<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial coffeescript on </title>
    <link>https://www.wikiod.com/pt/docs/coffeescript/</link>
    <description>Recent content in tutorial coffeescript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Coffeescript</title>
      <link>https://www.wikiod.com/pt/coffeescript/introducao-ao-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/introducao-ao-coffeescript/</guid>
      <description>Olá Word (Linux e OS X) # CoffeeScript é uma linguagem de script que compila em JavaScript. Qualquer código escrito em CoffeeScript pode ser traduzido em JavaScript com uma correspondência um-para-um.
CoffeeScript pode ser facilmente instalado com npm:
$ mkdir coffee &amp;amp;&amp;amp; cd coffee $ npm install -g coffee-script O sinalizador -g instalará o CoffeeScript globalmente, portanto, estará sempre disponível em sua CLI. Não use o sinalizador -g se quiser uma instalação local:</description>
    </item>
    
    <item>
      <title>Atribuição de Desestruturação</title>
      <link>https://www.wikiod.com/pt/coffeescript/atribuicao-de-desestruturacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/atribuicao-de-desestruturacao/</guid>
      <description>Parâmetros de função nomeada # CoffeeScript permite desconstruir objetos e arrays quando são alimentados a funções como argumentos.
Uma função que aproveita a desconstrução especificará em sua assinatura todos os campos esperados em seu corpo. Ao invocar tal função, um objeto ou array contendo todos os campos esperados deve ser passado como argumento.
drawRect = ({x, y, width, height}) -&amp;gt; # here you can use the passed parameters # color will not be visible here!</description>
    </item>
    
    <item>
      <title>Condicionais</title>
      <link>https://www.wikiod.com/pt/coffeescript/condicionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/condicionais/</guid>
      <description>se, se / então, se / senão, a menos, operador ternário # A instância mais básica de uma construção if avalia uma condição e executa algum código de acordo com o resultado da condição. Se a condição retornar true, o código dentro da condicional será executado.
counter = 10 if counter is 10 console.log &#39;This will be executed!&#39; A construção if pode ser enriquecida com uma instrução else. O código dentro da instrução else será executado sempre que a condição if não for atendida.</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/coffeescript/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/matrizes/</guid>
      <description>Valores de mapeamento # Você deseja converter todos os elementos em uma matriz para alguma outra forma.
Por exemplo, você tem
theUsers = [ {id: 1, username: &#39;john&#39;} {id: 2, username: &#39;lexy&#39;} {id: 3, username: &#39;pete&#39;} ] e você deseja ter apenas uma matriz de nomes de usuários, ou seja,
[&#39;john&#39;, &#39;lexy&#39;, &#39;pete&#39;] Método 1 - usando .map # theUsernames = theUsers.map (user) -&amp;gt; user.username Método 2 - usando compreensão # theUsernames = (user.</description>
    </item>
    
    <item>
      <title>Prós e contras de usar Coffeescript</title>
      <link>https://www.wikiod.com/pt/coffeescript/pros-e-contras-de-usar-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/pros-e-contras-de-usar-coffeescript/</guid>
      <description>Prós # Simplicidade # Provavelmente a melhor parte do CoffeeScript é sua simplicidade. CoffeeScript permite uma sintaxe mais concisa e simplista do que JavaScript simples. Um recurso simples, mas surpreendentemente economizador de tempo, é que o CoffeeScript não precisa de ; ou {}, eliminando a necessidade de passar horas descobrindo o local onde está faltando um }.
Rotações # Criar um loop que produza o valor de cada item em uma matriz, a menos que o valor seja &amp;ldquo;macaco&amp;rdquo; no CoffeeScript, é muito fácil.</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/coffeescript/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/funcoes/</guid>
      <description>Funções de seta pequena # # creates a function with no arguments, which returns 3 get_three = () -&amp;gt; return 3 # same as above get_three = -&amp;gt; 3 # creates a function with arguments add_three = (num) -&amp;gt; num + 3 # multiple arguments, etc. add = (a, b) -&amp;gt; a + b </description>
    </item>
    
    <item>
      <title>Aulas</title>
      <link>https://www.wikiod.com/pt/coffeescript/aulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/aulas/</guid>
      <description>Classes, Herança e Super # CoffeeScript fornece uma estrutura de classe básica que permite nomear sua classe, definir a superclasse, atribuir propriedades prototípicas e definir o construtor, em uma única expressão atribuível.
Pequeno exemplo abaixo:
class Animal constructor: (@name) -&amp;gt; move: (meters) -&amp;gt; alert @name + &amp;quot; moved #{meters}m.&amp;quot; class Snake extends Animal move: -&amp;gt; alert &amp;quot;Slithering...&amp;quot; super 5 class Horse extends Animal move: -&amp;gt; alert &amp;quot;Galloping...&amp;quot; super 45 sam = new Snake &amp;quot;Sammy the Python&amp;quot; tom = new Horse &amp;quot;Tommy the Palomino&amp;quot; sam.</description>
    </item>
    
    <item>
      <title>Cordas</title>
      <link>https://www.wikiod.com/pt/coffeescript/cordas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/cordas/</guid>
      <description>Bloquear strings # As strings de bloco podem ser usadas para armazenar texto formatado ou sensível a recuo (ou, se você simplesmente não quiser escapar de aspas e apóstrofos). O nível de recuo que inicia o bloco é mantido por toda parte, para que você possa manter tudo alinhado com o corpo do seu código.
html = &amp;quot;&amp;quot;&amp;quot; &amp;lt;strong&amp;gt; cup of coffeescript &amp;lt;/strong&amp;gt; &amp;quot;&amp;quot;&amp;quot; Strings de várias linhas # Strings de várias linhas são permitidas no CoffeeScript.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/pt/coffeescript/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/operadores/</guid>
      <description>Operador Existencial # O operador existencial ? do CoffeeScript verifica se a variável é null ou undefined.
1. Verifique se há null ou undefined.
alert &amp;quot;Hello CoffeeScript!&amp;quot; if myVar? equivalente de javascript:
if (typeof myVar !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; myVar !== null) { alert(&amp;quot;Hello CoffeeScript!&amp;quot;); } 2. Atribuição condicional mais segura
Você também pode usar esta atribuição condicional mais segura do operador
language = favoriteLanguage ? &amp;quot;coffeescript&amp;quot; equivalente de javascript:
language = typeof favoriteLanguage !</description>
    </item>
    
    <item>
      <title>rotações</title>
      <link>https://www.wikiod.com/pt/coffeescript/rotacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/coffeescript/rotacoes/</guid>
      <description>Fazendo um loop de uma função # Os códigos a seguir produzirão os números de 1 a 10 no console, embora console.log possa ser qualquer função que aceite uma entrada.
Método 1 - Padrão # for x in [1..10] console.log x Método 2 - Compacto # console.log x for x in [1..10] </description>
    </item>
    
  </channel>
</rss>

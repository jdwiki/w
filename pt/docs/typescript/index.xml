<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial TypeScript on </title>
    <link>https://www.wikiod.com/pt/docs/typescript/</link>
    <description>Recent content in Tutorial TypeScript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao TypeScript</title>
      <link>https://www.wikiod.com/pt/typescript/introducao-ao-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/introducao-ao-typescript/</guid>
      <description>Instalação e configuração # Fundo # TypeScript é um superconjunto tipado de JavaScript que compila diretamente no código JavaScript. Os arquivos TypeScript geralmente usam a extensão .ts. Muitos IDEs suportam o TypeScript sem qualquer outra configuração necessária, mas o TypeScript também pode ser compilado com o pacote TypeScript Node.JS a partir da linha de comando.
IDE # Estúdio visual # Visual Studio 2015 inclui TypeScript. O Visual Studio 2013 Update 2 ou posterior inclui o TypeScript, ou você pode baixar o TypeScript para versões anteriores.</description>
    </item>
    
    <item>
      <title>Teste de unidade</title>
      <link>https://www.wikiod.com/pt/typescript/teste-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/teste-de-unidade/</guid>
      <description>fita # tape é uma estrutura de teste JavaScript minimalista, que produz marcação compatível com TAP.
Para instalar tape usando o comando npm execute
npm install --save-dev tape @types/tape Para usar tape com Typescript você precisa instalar ts-node como pacote global, para fazer este comando execute
npm install -g ts-node Agora você está pronto para escrever seu primeiro teste
//math.test.ts import * as test from &amp;quot;tape&amp;quot;; test(&amp;quot;Math test&amp;quot;, (t) =&amp;gt; { t.</description>
    </item>
    
    <item>
      <title>Importando bibliotecas externas</title>
      <link>https://www.wikiod.com/pt/typescript/importando-bibliotecas-externas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/importando-bibliotecas-externas/</guid>
      <description>Sintaxe # importar {component} de &#39;libName&#39;; // Irá importar a classe &amp;quot;component&amp;quot; import {component as c} de &#39;libName&#39;; // Irá importar a classe &amp;quot;component&amp;quot; para um objeto &amp;quot;c&amp;quot; importar componente de &#39;libname&#39;; // Irá importar a exportação padrão de libName import * como lib de &#39;libName&#39;; // Importará tudo de libName para um objeto &amp;quot;lib&amp;quot; importar lib = require(&#39;libName&#39;); // Importará tudo de libName para um objeto &amp;quot;lib&amp;quot; const lib: qualquer = require(&#39;libName&#39;); // Importará tudo de libName para um objeto &amp;quot;lib&amp;quot; importar &#39;libName&#39;; // Importará o módulo libName apenas para seus efeitos colaterais Pode parecer que a sintaxe</description>
    </item>
    
    <item>
      <title>tsconfig.json</title>
      <link>https://www.wikiod.com/pt/typescript/tsconfigjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/tsconfigjson/</guid>
      <description>Sintaxe # Usa o formato de arquivo JSON Também pode aceitar comentários de estilo JavaScript Visão geral # A presença de um arquivo tsconfig.json em um diretório indica que o diretório é a raiz de um projeto TypeScript. O arquivo tsconfig.json especifica os arquivos raiz e as opções do compilador necessárias para compilar o projeto.
Usando tsconfig.json # Invocando tsc sem arquivos de entrada, nesse caso o compilador procura o arquivo tsconfig.</description>
    </item>
    
    <item>
      <title>TypeScript com SystemJS</title>
      <link>https://www.wikiod.com/pt/typescript/typescript-com-systemjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/typescript-com-systemjs/</guid>
      <description>Olá Mundo no navegador com SystemJS # Instale systemjs e plugin-typescript
npm install systemjs npm install plugin-typescript NOTA: isso instalará o compilador Typescript 2.0.0 que ainda não foi lançado.
Para o TypeScript 1.8, você deve usar o plugin-typescript 4.0.16
Criar arquivo hello.ts
export function greeter(person: String) { return &#39;Hello, &#39; + person; } Criar arquivo hello.html
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello World in TypeScript&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;node_modules/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;config.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.addEventListener(&#39;load&#39;, function() { System.</description>
    </item>
    
    <item>
      <title>Depuração</title>
      <link>https://www.wikiod.com/pt/typescript/depuracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/depuracao/</guid>
      <description>Existem duas maneiras de executar e depurar o TypeScript:
Transpile para JavaScript, execute no nó e use mapeamentos para vincular de volta aos arquivos de origem do TypeScript
ou
Execute o TypeScript diretamente usando ts-node
Este artigo descreve as duas maneiras usando Visual Studio Code e WebStorm. Todos os exemplos presumem que seu arquivo principal seja index.ts.
TypeScript com ts-node no WebStorm # Adicione este script ao seu package.json:
&amp;quot;start:idea&amp;quot;: &amp;quot;ts-node %NODE_DEBUG_OPTION% --ignore false index.</description>
    </item>
    
    <item>
      <title>Verificações nulas estritas</title>
      <link>https://www.wikiod.com/pt/typescript/verificacoes-nulas-estritas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/verificacoes-nulas-estritas/</guid>
      <description>Verificações nulas estritas em ação # Por padrão, todos os tipos no TypeScript permitem null:
function getId(x: Element) { return x.id; } getId(null); // TypeScript does not complain, but this is a runtime error. O TypeScript 2.0 adiciona suporte para verificações nulas estritas. Se você definir --strictNullChecks ao executar tsc (ou definir este sinalizador em seu tsconfig.json), os tipos não permitem mais null:
function getId(x: Element) { return x.id; } getId(null); // error: Argument of type &#39;null&#39; is not assignable to parameter of type &#39;Element&#39;.</description>
    </item>
    
    <item>
      <title>Aulas</title>
      <link>https://www.wikiod.com/pt/typescript/aulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/aulas/</guid>
      <description>O TypeScript, como o ECMA Script 6, suporta programação orientada a objetos usando classes. Isso contrasta com as versões JavaScript mais antigas, que suportavam apenas a cadeia de herança baseada em protótipo.
O suporte de classe no TypeScript é semelhante ao de linguagens como Java e C#, em que as classes podem herdar de outras classes, enquanto os objetos são instanciados como instâncias de classe.
Também semelhantes a essas linguagens, as classes TypeScript podem implementar interfaces ou fazer uso de genéricos.</description>
    </item>
    
    <item>
      <title>Como usar uma biblioteca javascript sem um arquivo de definição de tipo</title>
      <link>https://www.wikiod.com/pt/typescript/como-usar-uma-biblioteca-javascript-sem-um-arquivo-de-definicao-de-tipo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/como-usar-uma-biblioteca-javascript-sem-um-arquivo-de-definicao-de-tipo/</guid>
      <description>Embora algumas bibliotecas JavaScript existentes tenham arquivos de definição de tipo, há muitas que não têm.
O TypeScript oferece alguns padrões para lidar com declarações ausentes.
Faça um módulo que exporte um padrão qualquer # Para projetos mais complicados, ou em casos em que você pretende digitar uma dependência gradualmente, pode ser mais limpo criar um módulo.
Usando JQuery (embora [tenha digitações disponíveis] 1) como exemplo:
// place in jquery.d.ts declare let $: any; export default $; E então, em qualquer arquivo do seu projeto, você pode importar essa definição com:</description>
    </item>
    
    <item>
      <title>TypeScript com AngularJS</title>
      <link>https://www.wikiod.com/pt/typescript/typescript-com-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/typescript/typescript-com-angularjs/</guid>
      <description>Parâmetros # Nome Descrição controllerAs é um nome de alias, ao qual variáveis ​​ou funções podem ser atribuídas. @veja: https://docs.angularjs.org/guide/directive $injetar Lista de Injeção de Dependência, ela é resolvida por angular e passando como argumento para funções constuctoras. Ao fazer a diretiva no TypeScript, tenha em mente, esse poder dessa linguagem de tipo personalizado e interfaces que você pode criar. Isso é extremamente útil ao desenvolver aplicativos enormes. O preenchimento de código suportado por muitos IDE mostrará o valor possível pelo tipo correspondente com o qual você está trabalhando, portanto, há muito menos que deve ser lembrado (comparado ao VanillaJS).</description>
    </item>
    
  </channel>
</rss>

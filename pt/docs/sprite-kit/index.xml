<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do kit de sprite on </title>
    <link>https://www.wikiod.com/pt/docs/sprite-kit/</link>
    <description>Recent content in Tutorial do kit de sprite on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sprite-kit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao kit de sprite</title>
      <link>https://www.wikiod.com/pt/sprite-kit/introducao-ao-kit-de-sprite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/introducao-ao-kit-de-sprite/</guid>
      <description>Seu primeiro jogo SpriteKit (Hello World) # Abra o Xcode e selecione Criar um novo projeto Xcode.
Agora selecione iOS &amp;gt; Application à esquerda e Game na área de seleção principal.
Pressione Avançar.
Escreva em Product Name o nome do seu primeiro grande jogo. Em Nome da Organização o nome da sua empresa (ou simplesmente o seu próprio nome). Organisation Identifier deve conter seu nome de domínio invertido (www.yourdomain.com se torna com.</description>
    </item>
    
    <item>
      <title>Colisão SKNode</title>
      <link>https://www.wikiod.com/pt/sprite-kit/colisao-sknode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/colisao-sknode/</guid>
      <description>Os determinantes da colisão do Sprite Kit e do processamento de eventos de contato são as configurações de relacionamento, criadas por você, de categoryBitMask, collisionBitMask e contactTestBitMask para cada um de seus tipos de objetos que interagem. Ao defini-los racionalmente a serviço de seus resultados desejados de contatos e colisões, você determina quais tipos podem colidir e informar sobre contatos com outros e evitar colisões indesejadas, contato e sobrecarga de processamento físico.</description>
    </item>
    
    <item>
      <title>Elementos UIKit com SpriteKit</title>
      <link>https://www.wikiod.com/pt/sprite-kit/elementos-uikit-com-spritekit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/elementos-uikit-com-spritekit/</guid>
      <description>UITableView no SKScene # import SpriteKit import UIKit class GameRoomTableView: UITableView,UITableViewDelegate,UITableViewDataSource { var items: [String] = [&amp;quot;Player1&amp;quot;, &amp;quot;Player2&amp;quot;, &amp;quot;Player3&amp;quot;] override init(frame: CGRect, style: UITableViewStyle) { super.init(frame: frame, style: style) self.delegate = self self.dataSource = self } required init?(coder aDecoder: NSCoder) { fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;) } // MARK: - Table view data source func numberOfSections(in tableView: UITableView) -&amp;gt; Int { return 1 } func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int { return items.</description>
    </item>
    
    <item>
      <title>SKScene</title>
      <link>https://www.wikiod.com/pt/sprite-kit/skscene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/skscene/</guid>
      <description>SKScene representa uma única cena em um aplicativo SpriteKit. Um SKScene é &amp;lsquo;apresentado&amp;rsquo; em um SKView. SKSpriteNodes são adicionados à cena para implementar os sprites reais.
Aplicativos simples podem ter um único SKScene que contém todo o conteúdo do SpriteKit. Aplicativos mais complexos podem ter vários SKScenes que são apresentados em momentos diferentes (por exemplo, uma cena de abertura para apresentar as opções do jogo, uma segunda cena para implementar o jogo em si e uma terceira cena para apresentar os resultados do &amp;lsquo;Game Over&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>SKSpriteNode (Sprites)</title>
      <link>https://www.wikiod.com/pt/sprite-kit/skspritenode-sprites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/skspritenode-sprites/</guid>
      <description>Sintaxe # conveniência init(imageNamed name: String) // Cria um SKSpriteNode a partir de uma imagem nomeada no catálogo de ativos
var position: CGPoint // propriedade SKNode, herdada por SKSpriteNode. A posição do nó no sistema de coordenadas dos pais.
func addChild(_ node: SKNode) // Método SKNode, herdado por SKScene. Usado para adicionar um SKSpriteNode à cena (também usado para adicionar SKNodes a outros SKNodes).
Subclassificando SKSpriteNode # Você pode subclassificar SKSpriteNode e definir seu próprio tipo de sprite.</description>
    </item>
    
    <item>
      <title>Detectando a entrada de toque em dispositivos iOS</title>
      <link>https://www.wikiod.com/pt/sprite-kit/detectando-a-entrada-de-toque-em-dispositivos-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/detectando-a-entrada-de-toque-em-dispositivos-ios/</guid>
      <description>Detectando toque # Você pode substituir 4 métodos de SKScene para detectar o toque do usuário
class GameScene: SKScene { override func touchesBegan(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesMoved(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesEnded(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesCancelled(touches: Set&amp;lt;UITouch&amp;gt;?, withEvent event: UIEvent?) { } } Observe que cada método recebe um parâmetro touches que (sob determinadas circunstâncias) pode conter mais de um evento de toque único.</description>
    </item>
    
    <item>
      <title>SKView</title>
      <link>https://www.wikiod.com/pt/sprite-kit/skview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/skview/</guid>
      <description>Parâmetros # Parâmetro Detalhes mostraFPS Exiba uma contagem da taxa de quadros atual em quadros por segundo na exibição. showsNodeCount Exibe uma contagem do número atual de SKNodes sendo exibidos na visualização. showsFísica Exiba uma representação visual do SKPhysicsBodys na exibição. mostraCampos Exiba uma imagem representando os efeitos dos campos físicos na visualização. showsDrawCount Exiba uma contagem do número de passagens de desenho necessárias para renderizar a vista. showsQuadCount Exiba uma contagem do número de retângulos necessários para renderizar a exibição.</description>
    </item>
    
    <item>
      <title>Ação SKA</title>
      <link>https://www.wikiod.com/pt/sprite-kit/acao-ska/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/acao-ska/</guid>
      <description>Crie e execute uma ação SKA simples # Um exemplo muito simples seria desvanecer um SKSpriteNode.
Em Swift:
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let action = SKAction.fadeOutWithDuration(1.0) node.runAction(action) Criando uma Sequência Repetitiva de Ações # Às vezes é necessário fazer uma ação repetida ou em sequência. Este exemplo fará com que o nó apareça e desapareça um total de 3 vezes.
Em Swift:
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let actionFadeOut = SKAction.</description>
    </item>
    
    <item>
      <title>Funções temporizadas em SpriteKit SKActions vs NSTimers</title>
      <link>https://www.wikiod.com/pt/sprite-kit/funcoes-temporizadas-em-spritekit-skactions-vs-nstimers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/funcoes-temporizadas-em-spritekit-skactions-vs-nstimers/</guid>
      <description>Quando você deve usar SKActions para executar funções de timer? Quase sempre. A razão para isso é porque o Sprite Kit opera em um intervalo de atualização, e a velocidade desse intervalo pode ser alterada ao longo do tempo de vida do processo usando a propriedade speed. As cenas também podem ser pausadas. Como o SKAction funciona dentro da cena, quando você altera essas propriedades, não há necessidade de alterar suas funções de tempo.</description>
    </item>
    
    <item>
      <title>Física</title>
      <link>https://www.wikiod.com/pt/sprite-kit/fisica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sprite-kit/fisica/</guid>
      <description>Como remover corretamente o nó no método didBeginContact (vários contatos) # // PHYSICS CONSTANTS struct PhysicsCategory { static let None : UInt32 = 0 static let All : UInt32 = UInt32.max static let player : UInt32 = 0b1 // 1 static let bullet : UInt32 = 0b10 // 2 } var nodesToRemove = [SKNode]() // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# //MARK: - Physic Contact Delegate methods // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# func didBegin(_ contact: SKPhysicsContact) { var one: SKPhysicsBody var two: SKPhysicsBody if contact.</description>
    </item>
    
  </channel>
</rss>

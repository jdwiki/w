<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Java on </title>
    <link>https://www.wikiod.com/pt/docs/java/</link>
    <description>Recent content in Tutorial de linguagem Java on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Java</title>
      <link>https://www.wikiod.com/pt/java/introducao-a-linguagem-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/introducao-a-linguagem-java/</guid>
      <description>Criando seu primeiro programa Java # Crie um novo arquivo em seu editor de texto ou IDE chamado HelloWorld.java. Em seguida, cole este bloco de código no arquivo e salve:
public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;quot;Hello, World!&amp;quot;); } } Executar ao vivo no Ideone
Nota: Para Java reconhecer isso como uma classe pública (e não lançar um erro de tempo de compilação), o nome do arquivo deve ser o mesmo que o nome da classe (HelloWorld neste exemplo) com uma extensão .</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/java/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/matrizes/</guid>
      <description>Os arrays permitem o armazenamento e a recuperação de uma quantidade arbitrária de valores. Eles são análogos aos vetores em matemática. Matrizes de matrizes são análogas a matrizes e atuam como matrizes multidimensionais. Arrays podem armazenar quaisquer dados de qualquer tipo: primitivos como int ou tipos de referência como Object.
Sintaxe # ArrayType[] myArray; // Declarando arrays ArrayType myArray[]; // Outra sintaxe válida (menos comumente usada e desencorajada) ArrayType[][][] myArray; // Declarando arrays multidimensionais irregulares (repetir []s) ArrayType myVar = myArray[index]; // Acessando (lendo) o elemento no índice myArray[index] = value; // Atribui valor à posição index do array ArrayType[] myArray = new ArrayType[arrayLength]; // Sintaxe de inicialização do array int[] ints = {1, 2, 3}; // Sintaxe de inicialização do array com valores fornecidos, comprimento é inferido a partir do número de valores fornecidos: {[value1[, value2]*]} new int[]{4, -5, 6} // Pode ser usado como argumento, sem uma variável local int[] ints = new int[3]; // igual a {0, 0, 0} int[][] ints = {{1, 2}, {3}, null}; // Inicialização de array multidimensional.</description>
    </item>
    
    <item>
      <title>Fluxos</title>
      <link>https://www.wikiod.com/pt/java/fluxos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/fluxos/</guid>
      <description>Um Stream representa uma sequência de elementos e suporta diferentes tipos de operações para realizar cálculos sobre esses elementos. Com Java 8, a interface Collection tem dois métodos para gerar um Stream: stream() e parallelStream(). As operações Stream são intermediárias ou terminais. As operações intermediárias retornam um Stream para que várias operações intermediárias possam ser encadeadas antes que o Stream seja fechado. As operações de terminal são nulas ou retornam um resultado que não seja de fluxo.</description>
    </item>
    
    <item>
      <title>Expressões lambda</title>
      <link>https://www.wikiod.com/pt/java/expressoes-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/expressoes-lambda/</guid>
      <description>As expressões lambda fornecem uma maneira clara e concisa de implementar uma interface de método único usando uma expressão. Eles permitem que você reduza a quantidade de código que você precisa criar e manter. Embora semelhantes a classes anônimas, elas não possuem informações de tipo por si mesmas. A inferência de tipos precisa acontecer.
As referências de método implementam interfaces funcionais usando métodos existentes em vez de expressões. Eles também pertencem à família lambda.</description>
    </item>
    
    <item>
      <title>Armadilhas comuns do Java</title>
      <link>https://www.wikiod.com/pt/java/armadilhas-comuns-do-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/armadilhas-comuns-do-java/</guid>
      <description>Este tópico descreve alguns dos erros comuns cometidos por iniciantes em Java.
Isso inclui quaisquer erros comuns no uso da linguagem Java ou no entendimento do ambiente de tempo de execução.
Os erros associados a APIs específicas podem ser descritos em tópicos específicos dessas APIs. Strings são um caso especial; eles são abordados na Especificação de linguagem Java. Detalhes além de erros comuns podem ser descritos neste tópico sobre Strings.</description>
    </item>
    
    <item>
      <title>Cordas</title>
      <link>https://www.wikiod.com/pt/java/cordas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/cordas/</guid>
      <description>Strings (java.lang.String) são pedaços de texto armazenados em seu programa. Strings não são um tipo de dados primitivo em Java, no entanto, são muito comuns em programas Java.
Em Java, Strings são imutáveis, o que significa que não podem ser alteradas. (Clique aqui para uma explicação mais completa da imutabilidade.)
Como as strings Java são imutáveis, todos os métodos que manipulam uma String retornarão um novo objeto String. Eles não alteram a String original.</description>
    </item>
    
    <item>
      <title>Genéricos</title>
      <link>https://www.wikiod.com/pt/java/genericos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/genericos/</guid>
      <description>Genéricos são um recurso de programação genérica que estende o sistema de tipos do Java para permitir que um tipo ou método opere em objetos de vários tipos enquanto fornece segurança de tipo em tempo de compilação. Em particular, a estrutura de coleções Java suporta genéricos para especificar o tipo de objetos armazenados em uma instância de coleção.
Sintaxe # class ArrayList&amp;lt;E&amp;gt; {} // uma classe genérica com parâmetro de tipo E classe HashMap&amp;lt;K, V&amp;gt; {} // uma classe genérica com dois parâmetros de tipo K e V &amp;lt;E&amp;gt; void print(E element) {} // um método genérico com parâmetro de tipo E ArrayList&amp;lt;String&amp;gt; nomes; // declaração de uma classe genérica Lista de Matrizes&amp;lt;?</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://www.wikiod.com/pt/java/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/enums/</guid>
      <description>As enumerações Java (declaradas usando a palavra-chave enum) são sintaxe abreviada para quantidades consideráveis ​​de constantes de uma única classe.
Sintaxe # [public/protected/private] enum Enum_name { // Declara um novo enum. ENUM_CONSTANT_1[, ENUM_CONSTANT_2&amp;hellip;]; // Declara as constantes de enumeração. Esta deve ser a primeira linha dentro da enumeração e deve ser separada por vírgulas, com um ponto e vírgula no final. ENUM_CONSTANT_1(param)[, ENUM_CONSTANT_2(param)&amp;hellip;]; // Declara constantes enum com parâmetros. Os tipos de parâmetro devem corresponder ao construtor.</description>
    </item>
    
    <item>
      <title>Exceções e tratamento de exceções</title>
      <link>https://www.wikiod.com/pt/java/excecoes-e-tratamento-de-excecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/excecoes-e-tratamento-de-excecoes/</guid>
      <description>Objetos do tipo Throwable e seus subtipos podem ser enviados para cima na pilha com a palavra-chave throw e capturados com instruções try…catch.
Sintaxe # void someMethod() lança SomeException { } //declaração do método, força o método chamadores para capturar se SomeException for um tipo de exceção verificado
tentar {
someMethod(); //code that might throw an exception }
catch (SomeException e) {
System.out.println(&amp;quot;SomeException was thrown!&amp;quot;); //code that will run if certain exception (SomeException) is thrown }</description>
    </item>
    
    <item>
      <title>Coleções</title>
      <link>https://www.wikiod.com/pt/java/colecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java/colecoes/</guid>
      <description>A estrutura de coleções em java.util fornece várias classes genéricas para conjuntos de dados com funcionalidades que não podem ser fornecidas por arrays regulares.
A estrutura de coleções contém interfaces para Collection&amp;lt;O&amp;gt;, com as subinterfaces principais List&amp;lt;O&amp;gt; e Set&amp;lt;O&amp;gt;, e a coleção de mapeamento Map&amp;lt;K,V&amp;gt;. As coleções são a interface raiz e estão sendo implementadas por muitas outras estruturas de coleção.
Coleções são objetos que podem armazenar coleções de outros objetos dentro deles.</description>
    </item>
    
  </channel>
</rss>

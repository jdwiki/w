<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de scipy on </title>
    <link>https://www.wikiod.com/pt/docs/scipy/</link>
    <description>Recent content in tutorial de scipy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com scipy</title>
      <link>https://www.wikiod.com/pt/scipy/comecando-com-scipy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scipy/comecando-com-scipy/</guid>
      <description>Converta uma matriz esparsa em uma matriz densa usando SciPy # from scipy.sparse import csr_matrix A = csr_matrix([[1,0,2],[0,3,0]]) &amp;gt;&amp;gt;&amp;gt;A &amp;lt;2x3 sparse matrix of type &#39;&amp;lt;type &#39;numpy.int64&#39;&amp;gt;&#39; with 3 stored elements in Compressed Sparse Row format&amp;gt; &amp;gt;&amp;gt;&amp;gt; A.todense() matrix([[1, 0, 2], [0, 3, 0]]) &amp;gt;&amp;gt;&amp;gt; A.toarray() array([[1, 0, 2], [0, 3, 0]]) Manipulação de imagem usando Scipy (redimensionamento básico de imagem) # SciPy fornece funções básicas de manipulação de imagem. Isso inclui funções para ler imagens do disco em matrizes numpy, gravar matrizes numpy no disco como imagens e redimensionar imagens.</description>
    </item>
    
    <item>
      <title>Suavizando um sinal</title>
      <link>https://www.wikiod.com/pt/scipy/suavizando-um-sinal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scipy/suavizando-um-sinal/</guid>
      <description>Usando um filtro Savitzky-Golay # Dado um sinal ruidoso:
import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 plt.plot(x,y) plt.show() scipy.signal.savgol_filter() /scipy.github.io/devdocs/generated/scipy.signal.saving_filter.html #scipy.signal.saving_filter):
import scipy.signal import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 yhat = scipy.signal.savgol_filter(y, 51, 3) # window size 51, polynomial order 3 plt.plot(x,y) plt.plot(x,yhat, color=&#39;red&#39;) plt.show() </description>
    </item>
    
    <item>
      <title>Ajustando funções com scipy.optimize curve_fit</title>
      <link>https://www.wikiod.com/pt/scipy/ajustando-funcoes-com-scipyoptimize-curve_fit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scipy/ajustando-funcoes-com-scipyoptimize-curve_fit/</guid>
      <description>Ajustar uma função que descreve a ocorrência esperada de pontos de dados para dados reais é muitas vezes necessário em aplicações científicas. Um possível otimizador para esta tarefa é curve_fit de scipy.optimize. A seguir, um exemplo de aplicação de curve_fit é dado.
Ajustando uma função aos dados de um histograma # Suponha que haja um pico de dados distribuídos normalmente (gaussianos) (média: 3,0, desvio padrão: 0,3) em um fundo exponencialmente decrescente.</description>
    </item>
    
    <item>
      <title>Como escrever uma função Jacobiana para otimizar.minimize</title>
      <link>https://www.wikiod.com/pt/scipy/como-escrever-uma-funcao-jacobiana-para-otimizarminimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scipy/como-escrever-uma-funcao-jacobiana-para-otimizarminimize/</guid>
      <description>Sintaxe # importe numpy como np de scipy.optimize import _minimize do especial de importação scipy importe matplotlib.pyplot como plt Observe o sublinhado antes de &amp;lsquo;minimize&amp;rsquo; ao importar de scipy.optimize; &amp;lsquo;_minimizar&amp;rsquo; Além disso, testei as funções de este link antes de fazer esta seção e descobri que tinha menos problemas/funcionava mais rápido se importasse &amp;rsquo;especial&amp;rsquo; separadamente. A função Rosenbrock na página vinculada estava incorreta - você precisa configurar a barra de cores primeiro; Eu postei código alternativo, mas acho que poderia ser melhor.</description>
    </item>
    
    <item>
      <title>rv_continuous para distribuição com parâmetros</title>
      <link>https://www.wikiod.com/pt/scipy/rv_continuous-para-distribuicao-com-parametros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scipy/rv_continuous-para-distribuicao-com-parametros/</guid>
      <description>Binômio negativo em reais positivos # from scipy.stats import rv_continuous import numpy class Neg_exp(rv_continuous): def _cdf(self, x, lamda): return 1-numpy.exp(-lamda*x) neg_exp = Neg_exp(name=&amp;quot;Negative exponential&amp;quot;, a=0) print (neg_exp.pdf(0,.5)) print (neg_exp.pdf(5,.5)) print (neg_exp.cdf(5,.5)) print (neg_exp.stats(0.5)) print (neg_exp.rvs(0.5)) É essencial definir _pdf ou _cdf porque scipy infere os parâmetros da outra função (que você não define) e a ordem desses parâmetros em qualquer chamada de função que você faz, a partir de sua definição.</description>
    </item>
    
  </channel>
</rss>

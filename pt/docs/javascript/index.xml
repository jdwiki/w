<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial JavaScript on </title>
    <link>https://www.wikiod.com/pt/docs/javascript/</link>
    <description>Recent content in Tutorial JavaScript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com JavaScript</title>
      <link>https://www.wikiod.com/pt/javascript/comecando-com-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/comecando-com-javascript/</guid>
      <description>Usando console.log() # Introdução # Todos os navegadores modernos, NodeJs e quase todos os outros ambientes JavaScript suportam a gravação de mensagens em um console usando um conjunto de métodos de registro. O mais comum desses métodos é console.log().
Em um ambiente de navegador, a função console.log() é predominantemente usada para fins de depuração.
Começando # Abra o Console JavaScript em seu navegador, digite o seguinte e pressione Enter :</description>
    </item>
    
    <item>
      <title>Promessas</title>
      <link>https://www.wikiod.com/pt/javascript/promessas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/promessas/</guid>
      <description>Sintaxe # new Promise( /* função executora: */ function(resolver, rejeitar) { }) promessa.then(onFulfilled[, onRejected]) promessa.catch(onRejected) Promessa.resolver(resolução) Promise.reject(motivo) Promise.all(iterável) Promise.race(iterável) As promessas fazem parte da especificação ECMAScript 2015 e o suporte ao navegador é limitado, com 88% dos navegadores em todo o mundo suportando-o em julho de 2017. A tabela a seguir fornece uma visão geral das versões mais antigas do navegador que oferecem suporte para promessas.
Chrome Borda Firefox Explorador de Internet Ópera Ópera Mini Safári iOS Safari 32 12 27 x 19 x 7.</description>
    </item>
    
    <item>
      <title>Funções de seta</title>
      <link>https://www.wikiod.com/pt/javascript/funcoes-de-seta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/funcoes-de-seta/</guid>
      <description>As funções de seta são uma maneira concisa de escrever [anônimo](https://www.wikiod.com/pt/javascript/funcoes#Função anônima), funções com escopo lexical em [ECMAScript 2015 (ES6)] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla).
Sintaxe # x =&amp;gt; y // Retorno implícito x =&amp;gt; { return y } // retorno explícito (x, y, z) =&amp;gt; { &amp;hellip; } // Vários argumentos async () =&amp;gt; { &amp;hellip; } // Funções de seta assíncrona (() =&amp;gt; { &amp;hellip; })() // Expressão de função invocada imediatamente const minhaFunc = x =&amp;gt; x*2 // Uma quebra de linha antes da seta lançará um erro &amp;lsquo;Token inesperado&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/javascript/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/matrizes/</guid>
      <description>Sintaxe # array = [valor, valor, &amp;hellip;] array = new Array(valor, valor, &amp;hellip;) array = Array.of(valor, valor, &amp;hellip;) array = Array.from(arrayLike) Resumo: Arrays em JavaScript são, simplesmente, instâncias de Object modificadas com um protótipo avançado, capaz de realizar uma variedade de tarefas relacionadas a listas. Eles foram adicionados no ECMAScript 1st Edition, e outros métodos de protótipo chegaram ao ECMAScript 5.1 Edition.
Aviso: se um parâmetro numérico chamado n for especificado no construtor new Array(), ele declarará um array com n quantidade de elementos, não declarará um array com 1 elemento com o valor de n!</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/pt/javascript/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/json/</guid>
      <description>JSON (JavaScript Object Notation) é um formato leve de intercâmbio de dados. É fácil para humanos ler e escrever e fácil para máquinas analisar e gerar. É importante perceber que, em JavaScript, JSON é uma string e não um objeto.
Uma visão geral básica pode ser encontrada no site json.org que também contém links para implementações do padrão em muitas linguagens de programação diferentes.
Sintaxe # JSON.parse(input[, reviver]) JSON.stringify(valor[, substituto[, espaço]]) Parâmetros # Parâmetro Detalhes JSON.</description>
    </item>
    
    <item>
      <title>Padrões de design de criação</title>
      <link>https://www.wikiod.com/pt/javascript/padroes-de-design-de-criacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/padroes-de-design-de-criacao/</guid>
      <description>Os padrões de design são uma boa maneira de manter seu código legível e SECO. DRY significa não se repita. Abaixo você pode encontrar mais exemplos sobre os padrões de design mais importantes.
Na engenharia de software, um padrão de projeto de software é uma solução geral reutilizável para um problema comum dentro de um determinado contexto no projeto de software.
Funções de fábrica # Uma função de fábrica é simplesmente uma função que retorna um objeto.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://www.wikiod.com/pt/javascript/console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/console/</guid>
      <description>O console de depuração de um navegador ou console da web geralmente é usado pelos desenvolvedores para identificar erros, entender o fluxo de execução, registrar dados e muitos outros propósitos em tempo de execução. Esta informação é acessada através do objeto console.
Sintaxe # void console.log(obj1 [, obj2, &amp;hellip;, objN]); void console.log(msg [, sub1, &amp;hellip;, subN]); Parâmetros # Parâmetro Descrição obj1 &amp;hellip; objN Uma lista de objetos JavaScript cujas representações de string são geradas no console mensagem Uma string JavaScript contendo zero ou mais strings de substituição.</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/javascript/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/funcoes/</guid>
      <description>As funções em JavaScript fornecem código organizado e reutilizável para executar um conjunto de ações. As funções simplificam o processo de codificação, evitam lógica redundante e tornam o código mais fácil de seguir. Este tópico descreve a declaração e utilização de funções, argumentos, parâmetros, declarações de retorno e escopo em JavaScript.
Sintaxe # exemplo de função (x) { return x }
var exemplo = função (x) { return x }</description>
    </item>
    
    <item>
      <title>Funções assíncronas (assíncronasaguardar)</title>
      <link>https://www.wikiod.com/pt/javascript/funcoes-assincronas-assincronasaguardar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/funcoes-assincronas-assincronasaguardar/</guid>
      <description>async e await são construídos em cima de promessas e geradores para expressar ações assíncronas inline. Isso torna o código assíncrono ou de retorno de chamada muito mais fácil de manter.
Funções com a palavra-chave async retornam uma Promise e ​​podem ser chamadas com essa sintaxe.
Dentro de uma função assíncrona a palavra-chave await pode ser aplicada a qualquer Promise, e fará com que todo o corpo da função após a await seja executado após a promessa ser resolvida.</description>
    </item>
    
    <item>
      <title>Depuração</title>
      <link>https://www.wikiod.com/pt/javascript/depuracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javascript/depuracao/</guid>
      <description>Variáveis ​​do interpretador interativo # Observe que eles funcionam apenas nas ferramentas de desenvolvedor de determinados navegadores.
$_ fornece o valor de qualquer expressão avaliada por último.
&amp;quot;foo&amp;quot; // &amp;quot;foo&amp;quot; $_ // &amp;quot;foo&amp;quot; $0 refere-se ao elemento DOM atualmente selecionado no Inspetor. Portanto, se &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; estiver destacado:
$0 // &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; $0.getAttribute(&#39;id&#39;) // &amp;quot;foo&amp;quot; $1 refere-se ao elemento selecionado anteriormente, $2 ao selecionado antes dele, e assim por diante para $3 e $4.</description>
    </item>
    
  </channel>
</rss>

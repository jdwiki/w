<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do symfony2 on </title>
    <link>https://www.wikiod.com/pt/docs/symfony2/</link>
    <description>Recent content in Tutorial do symfony2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/symfony2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o symfony2</title>
      <link>https://www.wikiod.com/pt/symfony2/comecando-com-o-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/comecando-com-o-symfony2/</guid>
      <description>Instalação ou configuração # Symfony Framework - construído com componentes symfony, é um dos principais frameworks PHP usados ​​para criar websites robustos e aplicações web.
O Symfony pode ser instalado rapidamente através de duas formas recomendadas.
A documentação oficial recomenda instalar o framework através do Symfony Installer which is a tiny php application that is installed once on the local system that helps in downloading the framework and setting up the configuration of the framework.</description>
    </item>
    
    <item>
      <title>Criando Web-Services com Symfony 2.8</title>
      <link>https://www.wikiod.com/pt/symfony2/criando-web-services-com-symfony-28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/criando-web-services-com-symfony-28/</guid>
      <description>Trabalhar com API RESTFul # REpresentational State Transfer (REST) ​​é um estilo de arquitetura usado para desenvolvimento web, introduzido e definido em 2000 por Roy Fielding.
Veja no wiki: REST wiki
É baseado no protocolo HTTP (HTTP on Wiki), solicitações HTTP (GET, POST, PATCH, DELETE&amp;hellip;)/códigos de respostas (404, 400, 200, 201, 500&amp;hellip;) e estrutura de corpos .
Esta é uma ótima maneira de expor seus dados para outro sistema na Internet.</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/symfony2/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/roteamento/</guid>
      <description>Retorna uma resposta 404 # 404 respostas são retornadas quando um recurso não é encontrado no servidor, no Symfony este status pode ser criado lançando uma exceção NotFoundHttpException. Para evitar uma instrução extra use dentro de um controlador, use o createNotFoundException() fornecido pela classe Controller
&amp;lt;?php namespace Bundle\Controller; use Symfony\Bundle\FrameworkBundle\Controller\Controller; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; class TestController extends Controller { /** * @Route(&amp;quot;/{id}&amp;quot;, name=&amp;quot;test&amp;quot;) * Recommended to avoid template() as it has a lot of background processing.</description>
    </item>
    
    <item>
      <title>Relacionamentos de Entidade de Doutrina</title>
      <link>https://www.wikiod.com/pt/symfony2/relacionamentos-de-entidade-de-doutrina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/relacionamentos-de-entidade-de-doutrina/</guid>
      <description>Um para muitos, bidirecional # Este mapeamento bidirecional requer o atributo mappedBy na associação OneToMany e o atributo inversedBy na associação ManyToOne.
Um relacionamento bidirecional tem um lado proprietário e inverso. Relacionamentos OneToMany podem usar tabelas de junção, então você tem que especificar um lado proprietário. A associação OneToMany é sempre o lado inverso de uma associação bidirecional.
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity * @ORM\Table(name=&amp;quot;users&amp;quot;) */ class User { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;username&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $username; /** * @var Group|null * * @ORM\ManyToOne(targetEntity=&amp;quot;AppBundle\Entity\Group&amp;quot;, inversedBy=&amp;quot;users&amp;quot;) * @ORM\JoinColumn(name=&amp;quot;group_id&amp;quot;, referencedColumnName=&amp;quot;id&amp;quot;, nullable=true) */ protected $group; /** * @param string $username * @param Group|null $group */ public function __construct($username, Group $group = null) { $this-&amp;gt;username = $username; $this-&amp;gt;group = $group; } /** * Set username * * @param string $username */ public function setUsername($username) { $this-&amp;gt;username = $username; } /** * Get username * * @return string */ public function getUsername() { return $this-&amp;gt;username; } /** * @param Group|null $group */ public function setGroup(Group $group = null) { if($this-&amp;gt;group !</description>
    </item>
    
    <item>
      <title>Serviços Symfony</title>
      <link>https://www.wikiod.com/pt/symfony2/servicos-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/servicos-symfony/</guid>
      <description>Como declarar, escrever e usar um serviço simples no Symfony2 # Declaração de serviços:
# src/Acme/YourBundle/Resources/config/services.yml services: my_service: class: Acme\YourBundle\Service\MyService arguments: [&amp;quot;@doctrine&amp;quot;, &amp;quot;%some_parameter%&amp;quot;, &amp;quot;@another_service&amp;quot;] another_service: class: Acme\YourBundle\Service\AnotherService arguments: [] Código de Serviço :
&amp;lt;?php namespace Acme\YourBundle\Service\Service; class MyService { /** * Constructor * You can had whatever you want to use in your service by dependency injection * @param $doctrine Doctrine * @param $some_parameter Some parameter defined in app/config/parameters.yml * @param $another_service Another service */ public function __construct($doctrine, $some_parameter, $another_service) { $this-&amp;gt;doctrine = $doctrine; $this-&amp;gt;some_parameter = $some_parameter; $this-&amp;gt;another_service = $another_service; } public function doMagic() { // Your code here } } Use-o em um controlador:</description>
    </item>
    
    <item>
      <title>Extensões do Symfony Twig</title>
      <link>https://www.wikiod.com/pt/symfony2/extensoes-do-symfony-twig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/extensoes-do-symfony-twig/</guid>
      <description>Uma extensão simples do Twig &amp;ndash; Symfony 2.8 # Antes de criar qualquer extensão, sempre verifique se ela já foi implementada.
A primeira coisa que se deve fazer é definir a classe de extensão que abrigará os filtros e/ou funções do galho.
&amp;lt;?php namespace AppBundle\Twig; class DemoExtension extends \Twig_Extension { /** * A unique identifier for your application * * @return string */ public function getName() { return &#39;demo&#39;; } /** * This is where one defines the filters one would to use in their twig * templates * * @return Array */ public function getFilters() { return array ( new \Twig_SimpleFilter ( &#39;price&#39;, // The name of the twig filter array($this, &#39;priceFilter&#39;) ), ); } public function priceFilter($number, $decimals = 0, $decPoint = &#39;.</description>
    </item>
    
    <item>
      <title>Implantação do Symfony2</title>
      <link>https://www.wikiod.com/pt/symfony2/implantacao-do-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/implantacao-do-symfony2/</guid>
      <description>Etapas para mover o projeto Symfony 2 para hospedagem manualmente # Depende do tipo de hospedagem que você tem:
Se você tiver o console SSH, poderá fazê-lo na hospedagem após a etapa 2, if you haven&amp;rsquo;t then do it locally: run command
php app/console cache:clear --env=prod&#39;. Suponha que você tenha pastas de hospedagem youdomain/public_html, so in public_html must be located all web files. So you must upload all from Symfony project (folders: app, src, vendors, bin; files: deps, deps.</description>
    </item>
    
    <item>
      <title>Padrões de Design do Symfony</title>
      <link>https://www.wikiod.com/pt/symfony2/padroes-de-design-do-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/padroes-de-design-do-symfony/</guid>
      <description>Padrão de injeção de dependência # Imagine que você tenha um gerenciador de classes para gerenciar o envio de e-mails (chamado MailManager).
Neste, você tem que registrar e-mails que são enviados. Uma boa solução é transformar a classe MailManager em um service e então injetar a classe para criação de logs (Monolog por exemplo) no MailManager criando um serviço.
Para fazer isso :
1- Declare a futura classe MailManager como serviço (em services.</description>
    </item>
    
    <item>
      <title>Monolog melhore seus logs</title>
      <link>https://www.wikiod.com/pt/symfony2/monolog-melhore-seus-logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/monolog-melhore-seus-logs/</guid>
      <description>Adicione os detalhes do usuário e os parâmetros postados enviados aos logs # Os logs são muito importantes. Recriar um contexto de erro às vezes pode ser muito doloroso devido à falta de informações sobre como e quando o erro ocorreu.
Este exemplo mostra:
Como adicionar dados do usuário nos logs de erros
Como adicionar parâmetros de postagem enviado quando ocorreu um erro
Como usar o WebProcessor para adicione todos os dados sobre a solicitação, como:</description>
    </item>
    
    <item>
      <title>Repositório de Entidade de Doutrina</title>
      <link>https://www.wikiod.com/pt/symfony2/repositorio-de-entidade-de-doutrina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/symfony2/repositorio-de-entidade-de-doutrina/</guid>
      <description>Criando um novo repositório # Você pode criar um novo Repositório onde quiser, mas é recomendado criá-lo em uma pasta Repositório separada.
Embora você possa nomear o arquivo e a classe do Repositório como desejar, é recomendável nomear o Repositório como EntityNameRepository, para que você possa encontrá-los rapidamente em sua pasta.
Vamos supor que temos uma Entidade Project, armazenada em AppBundle\Entity, ficaria assim:
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * Project Entity - some information * * @ORM\Table(name=&amp;quot;project&amp;quot;) * @ORM\Entity(repositoryClass=&amp;quot;AppBundle\Repository\ProjectRepository&amp;quot;) */ class Project { // definition of the entity with attributes, getters, setter whatsoever } ?</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ionic2 Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/ionic2/</link>
    <description>Recent content in ionic2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/ionic2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com ionic2</title>
      <link>https://www.wikiod.com/pt/ionic2/comecando-com-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/comecando-com-ionic2/</guid>
      <description>Instalação ou Configuração # Como o Ionic 2 está ficando cada vez melhor a cada dia, sempre verifique a documentação oficial para acompanhar as últimas alterações e melhorias.
Pré-requisitos: Você precisará do NodeJS para construir projetos Ionic 2. Você pode baixar e instalar o node aqui e aprender mais sobre o npm e os pacotes que o Ionic 2 usa [aqui](http://ionicframework.com/docs/resources/using- npm/). # 1. Instalando o Ionic 2 # Assim como o Ionic 1, você pode usar o Ionic CLI ou GUI para criar e testar aplicativos rapidamente no navegador.</description>
    </item>
    
    <item>
      <title>Componentes CSS Ionic2</title>
      <link>https://www.wikiod.com/pt/ionic2/componentes-css-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/componentes-css-ionic2/</guid>
      <description>Rede # O sistema de grade do Ionic é baseado no flexbox, um recurso CSS suportado por todos os dispositivos que o Ionic suporta. A grade é composta por três unidades - grade, linhas e colunas. As colunas se expandirão para preencher sua linha e serão redimensionadas para caber em colunas adicionais.
Classe Largura largura-10 10% largura-20 20% largura-25 25% largura-33 33,3333% largura-50 50% largura-67 66,6666% largura-75 75% largura-80 80% largura-90 90% Exemplo.</description>
    </item>
    
    <item>
      <title>Usando serviços</title>
      <link>https://www.wikiod.com/pt/ionic2/usando-servicos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/usando-servicos/</guid>
      <description>Uma coisa muito importante sobre o uso de serviços compartilhados é que eles devem ser incluídos no array providers do componente mais alto onde devem ser compartilhados.
Por que é que? Bem, vamos supor que incluímos a referência MyService no array providers de cada Component. Algo como:
@Component({ templateUrl:&amp;quot;page1.html&amp;quot;, providers: [MyService] }) E
@Component({ templateUrl:&amp;quot;page2.html&amp;quot;, providers: [MyService] }) Dessa forma será criada uma nova instância do serviço para cada componente, de modo que a instância em que uma página salvará os dados será diferente da instância usada para obter os dados.</description>
    </item>
    
    <item>
      <title>Usando abas</title>
      <link>https://www.wikiod.com/pt/ionic2/usando-abas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/usando-abas/</guid>
      <description>Lembre-se sempre de verificar documentos do Ionic 2 Tab para estar ciente das últimas alterações e atualizações.
Alterar a guia selecionada programaticamente da página filha # Você pode dar uma olhada no código completo neste Plunker de trabalho.
Neste exemplo eu uso um serviço compartilhado para lidar com a comunicação entre as páginas dentro da guia (páginas filhas) e o contêiner de guias (o componente que contém as guias). Mesmo que você provavelmente possa fazer isso com Events Eu gosto da abordagem de serviço compartilhado porque é mais fácil de entender e também de manter quando o aplicativo é iniciado crescendo.</description>
    </item>
    
    <item>
      <title>Modais</title>
      <link>https://www.wikiod.com/pt/ionic2/modais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/modais/</guid>
      <description>Modal com parâmetros ao criar: # Passar parâmetros para um modal é semelhante a como passamos valores para um NavController. Para isso, estamos alterando nossa lista em home.html para abrir um modal ao clicar em um item da lista e passar os parâmetros necessários como segundo argumento para o método create.
Home.html
&amp;lt;ion-list&amp;gt; &amp;lt;ion-item *ngFor=&amp;quot;let datum of data&amp;quot; (click)=&amp;quot;openModalwithNavParams(datum)&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{datum.name}}&amp;lt;/h1&amp;gt; &amp;lt;/ion-item&amp;gt; &amp;lt;/ion-list&amp;gt; Home.ts
import {EditProfilePage} from &#39;../edit-profile/edit-profile&#39;; openModalwithNavParams(data){ let modalWithNavParams = this.</description>
    </item>
    
    <item>
      <title>Login Social com Angularfire2Firebase</title>
      <link>https://www.wikiod.com/pt/ionic2/login-social-com-angularfire2firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/login-social-com-angularfire2firebase/</guid>
      <description>Login nativo do Facebook com Angularfire2/Firebase # app.ts
import {Component} from &#39;@angular/core&#39;; import {Platform, ionicBootstrap} from &#39;ionic-angular&#39;; import {StatusBar} from &#39;ionic-native&#39;; import {LoginPage} from &#39;./pages/login/login&#39;; import {FIREBASE_PROVIDERS, defaultFirebase, AuthMethods, AuthProviders, firebaseAuthConfig} from &#39;angularfire2&#39;; @Component({ template: &#39;&amp;lt;ion-nav [root]=&amp;quot;rootPage&amp;quot;&amp;gt;&amp;lt;/ion-nav&amp;gt;&#39; }) export class MyApp { private rootPage: any; constructor(private platform: Platform) { this.rootPage = LoginPage; platform.ready().then(() =&amp;gt; { // Okay, so the platform is ready and our plugins are available. // Here you can do any higher level native things you might need.</description>
    </item>
    
    <item>
      <title>Notificação push enviada e recebida</title>
      <link>https://www.wikiod.com/pt/ionic2/notificacao-push-enviada-e-recebida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/notificacao-push-enviada-e-recebida/</guid>
      <description>O SenderID que está presente no exemplo de inicialização é um ID de remetente gcm que é fornecido a você pelo google. Ele também deve estar presente quando você instala o plugin
ionic plugin add phonegap-plugin-push --variable SENDER_ID=&amp;quot;XXXXXXX&amp;quot; Se você deseja adicionar dados adicionais às suas notificações push, consulte este link explicando como adicionar mais digitações https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md
Inicialização # O plug-in de notificação por push requer uma inicialização que informa ao plug-in para iniciar a execução usando o ID do remetente fornecido.</description>
    </item>
    
    <item>
      <title>Geolocalização</title>
      <link>https://www.wikiod.com/pt/ionic2/geolocalizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/geolocalizacao/</guid>
      <description>Uso simples # Em seu package.json certifique-se de incluir as dependências:
{ ... &amp;quot;dependencies&amp;quot;: { ... &amp;quot;ionic-native&amp;quot;: &amp;quot;^1.3.10&amp;quot;, ... }, ... } Para usar a geolocalização:
// custom-component.ts import {Geolocation} from &#39;ionic-native&#39;; import template from &#39;./custom-component.html&#39;; @Component({ selector: &#39;custom-component&#39;, template: template }) export class CustomComponent { constructor() { // get the geolocation through a promise Geolocation.getCurrentPosition().then((position:Geoposition)=&amp;gt; { console.log( position.coords.latitude, position.coords.longitude); }); } } Observando a posição # Para uma solução mais em tempo real, você pode usar a função watchPosition em Geolocation que notifica sempre que ocorre um erro ou uma mudança de posição.</description>
    </item>
    
    <item>
      <title>Solução alternativa para &#39;show-delete&#39; na descontinuação de &lt;ion-list&gt;</title>
      <link>https://www.wikiod.com/pt/ionic2/solucao-alternativa-para-show-delete-na-descontinuacao-de-ion-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/solucao-alternativa-para-show-delete-na-descontinuacao-de-ion-list/</guid>
      <description>Solução # Estou desenvolvendo um aplicativo móvel usando ionic 2 com Angular 2.
Eu tenho uma lista de íon-itens preenchidos. Eu quero que esses ion-item tenham a capacidade de serem excluídos, se necessário, conforme apresentado aqui no site ionic.
No entanto, muita coisa mudou no ionic 2 desde a primeira versão e o estilo acima de um botão abrindo todo o ion-item de uma só vez não é mais possível desde o show-delete e show-reorder não são mais suportados.</description>
    </item>
    
    <item>
      <title>Teste de unidade</title>
      <link>https://www.wikiod.com/pt/ionic2/teste-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ionic2/teste-de-unidade/</guid>
      <description>O Teste de Unidade em geral oferece segurança adicional a um produto para evitar problemas ao modificar/adicionar recursos. Uma rede de segurança que diz &amp;ldquo;TUDO AINDA FUNCIONA&amp;rdquo;. Os Testes Unitários não substituem de forma alguma os testes reais do usuário que um QA adequado pode fazer.
Neste documento vamos basear os exemplos neste repositório: https://github.com/driftyco/ionic-unit-testing-example
Testes Unitários com Karma/Jasmine # O teste de unidade em ionic é o mesmo que em qualquer aplicativo angular.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial do playframework on </title>
    <link>https://www.wikiod.com/pt/docs/playframework/</link>
    <description>Recent content in tutorial do playframework on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/playframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao playframework</title>
      <link>https://www.wikiod.com/pt/playframework/introducao-ao-playframework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/introducao-ao-playframework/</guid>
      <description>Introdução ao Play 2.4.x/2.5.x - Windows, Java # Instalações # Baixar e instalar:
Java 8 - baixe a instalação relevante do site da Oracle.
Ativador - baixe o zip de www.playframework.com/download e extraia os arquivos para a pasta Play de destino, por exemplo para:
c:\Play-2.4.2\activator-dist-1.3.5 sbt - download de www.scala-sbt.org.
Defina as variáveis ​​de ambiente:
JAVA_HOME, por exemplo:
c:\Program Files\Java\jdk1.8.0_45 PLAY_HOME, por exemplo:
c:\Play-2.4.2\activator-dist-1.3.5; SBT_HOME por exemplo:
c:\Program Files (x86)\sbt\bin; Adicione o caminho para todos os três programas instalados às variáveis ​​de caminho:</description>
    </item>
    
    <item>
      <title>Injeção de dependência - Java</title>
      <link>https://www.wikiod.com/pt/playframework/injecao-de-dependencia---java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/injecao-de-dependencia---java/</guid>
      <description>Injeção de dependência com Guice - Play 2.4, 2.5 # Guice é a estrutura de injeção de dependência padrão (mais DI) do Play. Outros frameworks também podem ser usados, mas usar o Guice facilita os esforços de desenvolvimento, já que o Play cuida das coisas sob o véu.
Injeção de APIs do Google Play # A partir do Play 2.5, várias APIs, que eram estáticas nas versões anteriores, devem ser criadas com DI.</description>
    </item>
    
    <item>
      <title>Configurando seu IDE preferido</title>
      <link>https://www.wikiod.com/pt/playframework/configurando-seu-ide-preferido/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/configurando-seu-ide-preferido/</guid>
      <description>IDEIA do IntelliJ # Pré-requisitos # Intellij IDEA instalado (edição Community ou Ultimate) Plugin Scala instalado no IntelliJ Um projeto padrão do Play, criado por exemplo com o Activator (activator new [nameoftheproject] play-scala). Abrindo o projeto # Abra o IntelliJ IDEA Vá para o menu File &amp;gt; Open ... &amp;gt; clique em toda a pasta [nameoftheproject] &amp;gt; OK Um pop-up é aberto com algumas opções. Os valores padrão são bons o suficiente na maioria dos casos e, se você não gostar deles, poderá alterá-los em outro lugar mais tarde.</description>
    </item>
    
    <item>
      <title>Teste de unidade</title>
      <link>https://www.wikiod.com/pt/playframework/teste-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/teste-de-unidade/</guid>
      <description>Teste de unidade - Java, Play 2.4,2.5 # Helpers e fakeApplication # A classe Helpers é muito usada para testes unitários. Ele imita um aplicativo Play, falsifica solicitações e respostas HTTP, sessão, cookies - tudo o que for necessário para testes. Um controlador em teste deve ser executado em um contexto de um aplicativo Play. O método Helpers fakeApplication fornece um aplicativo para execução de testes. Para usar Helpers e fakeApplication, uma classe de teste deve derivar de WithApplication.</description>
    </item>
    
    <item>
      <title>Injeção de dependência - Scala</title>
      <link>https://www.wikiod.com/pt/playframework/injecao-de-dependencia---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/injecao-de-dependencia---scala/</guid>
      <description>Sintaxe # class MyClassUsingAnother @Inject() (myOtherClassInjected: MyOtherClass) { (&amp;hellip;) } @Singleton class MyClassThatShouldBeASingleton (&amp;hellip;) Uso básico # Uma classe singleton típica:
import javax.inject._ @Singleton class BurgersRepository { // implementation goes here } Outra classe, exigindo acesso à primeira.
import javax.inject._ class FastFoodService @Inject() (burgersRepository: BurgersRepository){ // implementation goes here // burgersRepository can be used } Finalmente um controlador usando o último. Observe que, como não marcamos o FastFoodService como singleton, uma nova instância dele é criada cada vez que é injetado.</description>
    </item>
    
    <item>
      <title>Uso de webservice com play WSClient</title>
      <link>https://www.wikiod.com/pt/playframework/uso-de-webservice-com-play-wsclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/uso-de-webservice-com-play-wsclient/</guid>
      <description>Link para a documentação oficial: https://www.playframework.com/documentation/2.5.x/ScalaWS
Uso básico (Scala) # As solicitações HTTP são feitas por meio da classe WSClient, que você pode usar como um parâmetro injetado em suas próprias classes.
import javax.inject.Inject import play.api.libs.ws.WSClient import scala.concurrent.{ExecutionContext, Future} class MyClass @Inject() ( wsClient: WSClient )(implicit ec: ExecutionContext){ def doGetRequest(): Future[String] = { wsClient .url(&amp;quot;http://www.google.com&amp;quot;) .get() .map { response =&amp;gt; // Play won&#39;t check the response status, // you have to do it manually if ((200 to 299).</description>
    </item>
    
    <item>
      <title>Java - Olá Mundo</title>
      <link>https://www.wikiod.com/pt/playframework/java---ola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/java---ola-mundo/</guid>
      <description>Este tutorial é direcionado para executar o Play em um sistema Linux/MacOS Crie seu primeiro projeto # Para criar um novo projeto use o seguinte comando (HelloWorld é o nome do projeto e play-java é o template)
$ ~/activator-1.3.10-minimal/bin/activator new HelloWorld play-java Você deve obter uma saída semelhante a esta
Fetching the latest list of templates... OK, application &amp;quot;HelloWorld&amp;quot; is being created using the &amp;quot;play-java&amp;quot; template. To run &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator run To run the test for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator test To run the Activator UI for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator ui O projeto será criado no diretório atual (neste caso era minha pasta pessoal)</description>
    </item>
    
    <item>
      <title>Trabalhando com JSON - Scala</title>
      <link>https://www.wikiod.com/pt/playframework/trabalhando-com-json---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/trabalhando-com-json---scala/</guid>
      <description>Documentação oficial Documentação do pacote
Você pode usar o pacote play json independentemente do Play incluindo
&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;play-json_2.11&amp;quot; % &amp;quot;2.5.3&amp;quot; em seu build.sbt, veja
https://mvnrepository.com/artifact/com.typesafe.play/play-json_2.11 http://stackoverflow.com/questions/19436069/adding-play-json-library-to-sbt Criando um JSON manualmente # Você pode construir uma árvore de objetos JSON (um JsValue) manualmente
import play.api.libs.json._ val json = JsObject(Map( &amp;quot;name&amp;quot; -&amp;gt; JsString(&amp;quot;Jsony McJsonface&amp;quot;), &amp;quot;age&amp;quot; -&amp;gt; JsNumber(18), &amp;quot;hobbies&amp;quot; -&amp;gt; JsArray(Seq( JsString(&amp;quot;Fishing&amp;quot;), JsString(&amp;quot;Hunting&amp;quot;), JsString(&amp;quot;Camping&amp;quot;) )) )) Ou com a sintaxe equivalente mais curta, com base em algumas conversões implícitas:</description>
    </item>
    
    <item>
      <title>Liso</title>
      <link>https://www.wikiod.com/pt/playframework/liso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/liso/</guid>
      <description>Código de introdução inteligente # Em build.sbt, certifique-se de incluir (aqui para Mysql e PostGreSQL):
&amp;quot;mysql&amp;quot; % &amp;quot;mysql-connector-java&amp;quot; % &amp;quot;5.1.20&amp;quot;, &amp;quot;org.postgresql&amp;quot; % &amp;quot;postgresql&amp;quot; % &amp;quot;9.3-1100-jdbc4&amp;quot;, &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.1.1&amp;quot;, &amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-slick&amp;quot; % &amp;quot;1.1.1&amp;quot; Em seu application.conf, adicione:
mydb.driverjava=&amp;quot;slick.driver.MySQLDriver$&amp;quot; mydb.driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot; mydb.url=&amp;quot;jdbc:mysql://hostaddress:3306/dbname?zeroDateTimeBehavior=convertToNull&amp;quot; mydb.user=&amp;quot;username&amp;quot; mydb.password=&amp;quot;password&amp;quot; Para ter uma arquitetura independente de RDBMS crie um objeto como o seguinte
package mypackage import slick.driver.MySQLDriver import slick.driver.PostgresDriver object SlickDBDriver{ val env = &amp;quot;something here&amp;quot; val driver = env match{ case &amp;quot;postGreCondition&amp;quot; =&amp;gt; PostgresDriver case _ =&amp;gt; MySQLDriver } } ao criar um novo modelo novo:</description>
    </item>
    
    <item>
      <title>Java - Trabalhando com JSON</title>
      <link>https://www.wikiod.com/pt/playframework/java---trabalhando-com-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/playframework/java---trabalhando-com-json/</guid>
      <description>Documentação do jogo: https://www.playframework.com/documentation/2.5.x/JavaJsonActions
Criação manual de JSON # import play.libs.Json; public JsonNode createJson() { // {&amp;quot;id&amp;quot;: 33, &amp;quot;values&amp;quot;: [3, 4, 5]} ObjectNode rootNode = Json.newObject(); ArrayNode listNode = Json.newArray(); long values[] = {3, 4, 5}; for (long val: values) { listNode.add(val); } rootNode.put(&amp;quot;id&amp;quot;, 33); rootNode.set(&amp;quot;values&amp;quot;, listNode); return rootNode; } Carregando json de string/arquivo # import play.libs.Json; // (...) Carregando um arquivo da sua pasta pública # // Note: &amp;quot;app&amp;quot; is an play.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial pyqt on </title>
    <link>https://www.wikiod.com/pt/docs/pyqt/</link>
    <description>Recent content in tutorial pyqt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/pyqt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao pyqt</title>
      <link>https://www.wikiod.com/pt/pyqt/introducao-ao-pyqt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pyqt/introducao-ao-pyqt/</guid>
      <description>Um aplicativo básico # O exemplo a seguir mostra uma janela GUI principal básica com um widget de rótulo, uma barra de ferramentas e uma barra de status usando PyQt4.
import sys from PyQt4 import QtGui class App(QtGui.QApplication): def __init__(self, sys_argv): super(App, self).__init__(sys_argv) self.build_ui() def build_ui(self): # build a main GUI window self.main_window = QtGui.QMainWindow() self.main_window.setWindowTitle(&#39;App&#39;) self.main_window.show() # add a label to the main window label = QtGui.QLabel(&#39;Label&#39;) self.main_window.setCentralWidget(label) # add a toolbar with an action button to the main window action = QtGui.</description>
    </item>
    
    <item>
      <title>Usando threads com PyQt</title>
      <link>https://www.wikiod.com/pt/pyqt/usando-threads-com-pyqt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pyqt/usando-threads-com-pyqt/</guid>
      <description>Enquanto algumas partes do framework Qt são thread-safe, grande parte não é. A documentação do Qt C++ fornece uma boa visão geral de quais classes são reentrantes (podem ser usadas para instanciar objetos em várias threads). As seguintes regras são as mais procuradas:
Você não pode criar ou acessar um objeto Qt GUI de fora do thread principal (por exemplo, qualquer coisa que subclasse QWidget ou similar). Mesmo que a classe Qt seja reentrante, você não pode compartilhar o acesso a um objeto Qt entre threads, a menos que a documentação do Qt para essa classe declare explicitamente que as instâncias são thread-safe.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de teste de unidade on </title>
    <link>https://www.wikiod.com/pt/docs/unit-testing/</link>
    <description>Recent content in Tutorial de teste de unidade on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao teste de unidade</title>
      <link>https://www.wikiod.com/pt/unit-testing/introducao-ao-teste-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/introducao-ao-teste-de-unidade/</guid>
      <description>Um teste de unidade básico # Na sua forma mais simples, um teste de unidade consiste em três etapas:
Preparar o ambiente para o teste Execute o código a ser testado Validar o comportamento esperado corresponde ao comportamento observado Esses três estágios são frequentemente chamados de &amp;lsquo;Arrange-Act-Assert&amp;rsquo;, ou &amp;lsquo;Dado-Quando-Então&amp;rsquo;.
Abaixo está um exemplo em C# que usa a estrutura NUnit.
[TestFixture] public CalculatorTest { [Test] public void Add_PassSevenAndThree_ExpectTen() { // Arrange - setup environment var systemUnderTest = new Calculator(); // Act - Call system under test var calculatedSum = systemUnderTest.</description>
    </item>
    
    <item>
      <title>Injeção de dependência</title>
      <link>https://www.wikiod.com/pt/unit-testing/injecao-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/injecao-de-dependencia/</guid>
      <description>Uma abordagem que pode ser adotada para escrever software é criar dependências à medida que forem necessárias. Esta é uma maneira bastante intuitiva de escrever um programa e é a maneira que a maioria das pessoas tende a ser ensinada, em parte porque é fácil de seguir. Um dos problemas com essa abordagem é que pode ser difícil de testar. Considere um método que faz algum processamento com base na data atual.</description>
    </item>
    
    <item>
      <title>Duplas de teste</title>
      <link>https://www.wikiod.com/pt/unit-testing/duplas-de-teste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/duplas-de-teste/</guid>
      <description>Ao testar, às vezes é útil usar um duplo de teste para manipular ou verificar o comportamento do sistema em teste. Os doubles são passados ​​ou injetados na classe ou método em teste em vez de instâncias de código de produção.
Usando um stub para fornecer respostas prontas # Um stub é um duplo de teste leve que fornece respostas prontas quando os métodos são chamados. Onde uma classe sob teste depende de uma interface ou classe base, uma classe &amp;lsquo;stub&amp;rsquo; alternativa pode ser implementada para teste que esteja em conformidade com a interface.</description>
    </item>
    
    <item>
      <title>Práticas recomendadas de teste de unidade</title>
      <link>https://www.wikiod.com/pt/unit-testing/praticas-recomendadas-de-teste-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/praticas-recomendadas-de-teste-de-unidade/</guid>
      <description>Um teste de unidade é a menor parte testável de um aplicativo, como funções, classes, procedimentos, interfaces. O teste de unidade é um método pelo qual unidades individuais de código-fonte são testadas para determinar se são adequadas para uso. Os testes de unidade são basicamente escritos e executados por desenvolvedores de software para garantir que o código atenda ao seu design e requisitos e se comporte conforme o esperado.
Conceito MakeSut # O Testcode tem as mesmas exigências de qualidade que o código de produção.</description>
    </item>
    
    <item>
      <title>As regras gerais para teste de unidade para todos os idiomas</title>
      <link>https://www.wikiod.com/pt/unit-testing/as-regras-gerais-para-teste-de-unidade-para-todos-os-idiomas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/as-regras-gerais-para-teste-de-unidade-para-todos-os-idiomas/</guid>
      <description>Ao começar com o teste de unidade, todos os tipos de perguntas surgem:
O que é teste de unidade? O que é uma configuração e desmontagem? Como lidar com dependências? Por que fazer testes unitários? Como fazer bons testes de unidade?
Este artigo responderá a todas essas perguntas, para que você possa iniciar o teste de unidade em qualquer idioma que desejar.
O que é teste de unidade? # O teste de unidade é o teste de código para garantir que ele execute a tarefa que deve executar.</description>
    </item>
    
    <item>
      <title>Guia de teste de unidade no Visual Studio para C#</title>
      <link>https://www.wikiod.com/pt/unit-testing/guia-de-teste-de-unidade-no-visual-studio-para-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/guia-de-teste-de-unidade-no-visual-studio-para-c/</guid>
      <description>Como criar projeto de teste de unidade e testes de unidade e como executar os testes de unidade e ferramenta de cobertura de código.
Neste guia, a estrutura padrão do MSTest será usada e a ferramenta padrão de análise de cobertura de código que está disponível no Visual Studio.
O guia foi escrito para o Visual Studio 2015, então é possível que algumas coisas sejam diferentes em outras versões.
Criando um projeto de teste de unidade # Abra o projeto C# Clique com o botão direito do mouse na solução -&amp;gt; Adicionar -&amp;gt; Novo projeto… (Figura 1) Vá para Instalado -&amp;gt; Visual C# -&amp;gt; Teste Clique em Projeto de teste unitário Dê um nome e clique em OK (Figura 2) O projeto de teste de unidade é adicionado à solução (Figura 3) Adicionando a referência ao aplicativo que você deseja testar</description>
    </item>
    
    <item>
      <title>Testes unitários de Loops (Java)</title>
      <link>https://www.wikiod.com/pt/unit-testing/testes-unitarios-de-loops-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/testes-unitarios-de-loops-java/</guid>
      <description>Loops considerados como uma das estruturas de controle importantes em qualquer linguagem de programação. Existem diferentes maneiras pelas quais podemos alcançar a cobertura de loop.
Esses métodos diferem com base no tipo de loop.
Loops simples
Loops aninhados
Loops concatenados
Teste de loop único # Esses são loops em que seu corpo de loop não contém outros loops (o loop mais interno no caso de aninhado).
Para ter cobertura de loop, os testadores devem realizar os testes abaixo.</description>
    </item>
    
    <item>
      <title>Tipos de declaração</title>
      <link>https://www.wikiod.com/pt/unit-testing/tipos-de-declaracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/unit-testing/tipos-de-declaracao/</guid>
      <description>Verificando um valor retornado # [Test] public void Calculator_Add_ReturnsSumOfTwoNumbers() { Calculator calculatorUnderTest = new Calculator(); double result = calculatorUnderTest.Add(2, 3); Assert.AreEqual(5, result); } Teste baseado em estado # Dada esta classe simples, podemos testar se o método ShaveHead está funcionando corretamente, afirmando que o estado da variável HairLength é definido como zero após o método ShaveHead ser chamado.
public class Person { public string Name; public int HairLength; public Person(string name, int hairLength) { this.</description>
    </item>
    
  </channel>
</rss>

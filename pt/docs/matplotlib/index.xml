<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial matplotlib on </title>
    <link>https://www.wikiod.com/pt/docs/matplotlib/</link>
    <description>Recent content in tutorial matplotlib on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao matplotlib</title>
      <link>https://www.wikiod.com/pt/matplotlib/introducao-ao-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/introducao-ao-matplotlib/</guid>
      <description>Sintaxe Imperativa vs. Orientada a Objetos # O Matplotlib suporta tanto a sintaxe orientada a objetos quanto a imperativa para plotagem. A sintaxe imperativa é intencionalmente projetada para ser muito próxima da sintaxe do Matlab.
A sintaxe imperativa (às vezes chamada de sintaxe de &amp;lsquo;máquina de estado&amp;rsquo;) emite uma sequência de comandos que atuam na figura ou eixo mais recente (como Matlab). A sintaxe orientada a objetos, por outro lado, atua explicitamente sobre os objetos (figura, eixo, etc.</description>
    </item>
    
    <item>
      <title>Mapas de cores</title>
      <link>https://www.wikiod.com/pt/matplotlib/mapas-de-cores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/mapas-de-cores/</guid>
      <description>Mapas de cores perceptivelmente uniformes # O mapa de cores padrão original do MATLAB (substituído na versão R2014b) chamado jet é onipresente devido ao seu alto contraste e familiaridade (e era o padrão do matplotlib por motivos de compatibilidade). Apesar de sua popularidade, mapas de cores tradicionais geralmente apresentam deficiências quando se trata de representar dados com precisão. A mudança percebida nestes mapas de cores não corresponde a mudanças nos dados; e uma conversão do mapa de cores para escala de cinza (por exemplo, imprimindo uma figura usando uma impressora em preto e branco) pode causar perda de informações.</description>
    </item>
    
    <item>
      <title>Vários lotes</title>
      <link>https://www.wikiod.com/pt/matplotlib/varios-lotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/varios-lotes/</guid>
      <description>Sintaxe # Item da lista Grade de subtramas usando subtrama # &amp;quot;&amp;quot;&amp;quot; ================================================================================ CREATE A 2 BY 2 GRID OF SUB-PLOTS WITHIN THE SAME FIGURE. ================================================================================ &amp;quot;&amp;quot;&amp;quot; import matplotlib.pyplot as plt # The data x = [1,2,3,4,5] y1 = [0.59705847, 0.25786401, 0.63213726, 0.63287317, 0.73791151] y2 = [1.19411694, 0.51572803, 1.26427451, 1.26574635, 1.47582302] y3 = [0.86793828, 0.07563408, 0.67670068, 0.78932712, 0.0043694] # 5 more random values y4 = [0.43396914, 0.03781704, 0.33835034, 0.39466356, 0.0021847] # Initialise the figure and a subplot axes.</description>
    </item>
    
    <item>
      <title>Sistemas de Coordenadas</title>
      <link>https://www.wikiod.com/pt/matplotlib/sistemas-de-coordenadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/sistemas-de-coordenadas/</guid>
      <description>O Matplotlib possui quatro sistemas de coordenadas distintos que podem ser aproveitados para facilitar o posicionamento de diferentes objetos, por exemplo, texto. Cada sistema tem um objeto de transformação correspondente que transforma as coordenadas desse sistema para o chamado sistema de coordenadas de exibição.
Sistema de coordenadas de dados é o sistema definido pelos dados nos respectivos eixos. É útil ao tentar posicionar algum objeto em relação aos dados plotados. O intervalo é dado pelas propriedades xlim e ylim de Axes.</description>
    </item>
    
    <item>
      <title>Animações e plotagem interativa</title>
      <link>https://www.wikiod.com/pt/matplotlib/animacoes-e-plotagem-interativa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/animacoes-e-plotagem-interativa/</guid>
      <description>Com python matplotlib você pode criar gráficos animados corretamente.
Animação básica com FuncAnimation # O pacote matplotlib.animation oferece algumas classes para criação de animações. FuncAnimation cria animações chamando repetidamente uma função. Aqui usamos uma função animate() que altera as coordenadas de um ponto no gráfico de uma função seno.
import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation TWOPI = 2*np.pi fig, ax = plt.subplots() t = np.</description>
    </item>
    
    <item>
      <title>Integração com TeXLaTeX</title>
      <link>https://www.wikiod.com/pt/matplotlib/integracao-com-texlatex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/integracao-com-texlatex/</guid>
      <description>O suporte ao LaTeX do Matplotlib requer uma instalação do LaTeX em funcionamento, dvipng (que pode ser incluído com sua instalação do LaTeX) e Ghostscript (GPL Ghostscript 8.60 ou posterior é recomendado). O suporte a pgf do Matplotlib requer uma instalação recente do LaTeX que inclua os pacotes TikZ/PGF (como TeXLive), de preferência com XeLaTeX ou LuaLaTeX instalados. Inserindo fórmulas TeX em gráficos # Fórmulas TeX podem ser inseridas no gráfico usando a função rc</description>
    </item>
    
    <item>
      <title>Legendas</title>
      <link>https://www.wikiod.com/pt/matplotlib/legendas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/legendas/</guid>
      <description>Legenda única compartilhada em várias subtramas # Às vezes, você terá uma grade de subtramas e deseja ter uma única legenda que descreve todas as linhas para cada uma das subtramas como na imagem a seguir.
Para fazer isso, você precisará criar uma legenda global para a figura em vez de criar uma legenda no nível dos eixos (o que criará um legenda para cada subtrama). Isto é conseguido chamando fig.</description>
    </item>
    
    <item>
      <title>Gráficos tridimensionais</title>
      <link>https://www.wikiod.com/pt/matplotlib/graficos-tridimensionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/graficos-tridimensionais/</guid>
      <description>A plotagem tridimensional no matplotlib tem sido historicamente um pouco kludge, já que o mecanismo de renderização é inerentemente 2d. O fato de que as configurações 3D são renderizadas plotando um pedaço 2D após o outro implica que muitas vezes há problemas de renderização relacionados à profundidade aparente dos objetos. O núcleo do problema é que dois objetos não conectados podem estar totalmente atrás ou totalmente à frente um do outro, o que leva a artefatos como mostrado na figura abaixo de dois anéis interligados (clique para gif animado):</description>
    </item>
    
    <item>
      <title>Parcelas Básicas</title>
      <link>https://www.wikiod.com/pt/matplotlib/parcelas-basicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/parcelas-basicas/</guid>
      <description>Gráficos de dispersão # Um gráfico de dispersão simples # import matplotlib.pyplot as plt # Data x = [43,76,34,63,56,82,87,55,64,87,95,23,14,65,67,25,23,85] y = [34,45,34,23,43,76,26,18,24,74,23,56,23,23,34,56,32,23] fig, ax = plt.subplots(1, figsize=(10, 6)) fig.suptitle(&#39;Example Of Scatterplot&#39;) # Create the Scatter Plot ax.scatter(x, y, color=&amp;quot;blue&amp;quot;, # Color of the dots s=100, # Size of the dots alpha=0.5, # Alpha/transparency of the dots (1 is opaque, 0 is transparent) linewidths=1) # Size of edge around the dots # Show the plot plt.</description>
    </item>
    
    <item>
      <title>Objetos de Figuras e Eixos</title>
      <link>https://www.wikiod.com/pt/matplotlib/objetos-de-figuras-e-eixos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/matplotlib/objetos-de-figuras-e-eixos/</guid>
      <description>Criando um eixo # Existem duas maneiras principais de criar um eixo no matplotlib: usando pyplot ou usando a API orientada a objetos.
Usando pyplot:
import matplotlib.pyplot as plt ax = plt.subplot(3, 2, 1) # 3 rows, 2 columns, the first subplot Usando a API orientada a objetos:
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(3, 2, 1) A função de conveniência plt.subplots() pode ser usada para produzir uma figura e uma coleção de subplots em um comando:</description>
    </item>
    
  </channel>
</rss>

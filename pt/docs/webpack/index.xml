<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial do webpack on </title>
    <link>https://www.wikiod.com/pt/docs/webpack/</link>
    <description>Recent content in tutorial do webpack on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/webpack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao webpack</title>
      <link>https://www.wikiod.com/pt/webpack/introducao-ao-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/introducao-ao-webpack/</guid>
      <description>Exemplo de Javascript + CSS + Fontes + Imagens # Módulos obrigatórios
npm install --save-dev webpack extract-text-webpack-plugin file-loader css-loader style-loader Estrutura de pastas
. └── assets ├── css ├── images └── js webpack.config.js
const webpack = require(&#39;webpack&#39;); const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;); const path = require(&#39;path&#39;); const glob = require(&#39;glob&#39;); module.exports = { entry: { script: path.resolve(__dirname, &#39;./assets/js/app.js&#39;), style: path.resolve(__dirname, &#39;./assets/css/app.css&#39;), images: glob.sync(path.resolve(__dirname, &#39;./assets/images/**/*.*&#39;)), }, context: __dirname, output: { path: path.resolve(&#39;./dist/assets&#39;), publicPath: &#39;/dist/assets&#39;, filename: &#39;[name].</description>
    </item>
    
    <item>
      <title>DllPlugin e DllReferencePlugin</title>
      <link>https://www.wikiod.com/pt/webpack/dllplugin-e-dllreferenceplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/dllplugin-e-dllreferenceplugin/</guid>
      <description>Os plugins Dll e DllReference permitem que o código seja dividido em vários pacotes de forma que os pacotes possam ser compilados independentemente.
É possível construir scripts &amp;ldquo;fornecedor&amp;rdquo; em uma biblioteca que não precisa ser compilada com frequência (ex: React, jQuery, Bootstrap, Fontawesome&amp;hellip;) e referenciá-la em seu pacote de aplicativos que precisará desses scripts.
O pacote de aplicativos, aquele que será constantemente alterado, estará em uma configuração separada apenas referenciando um pacote de &amp;ldquo;fornecedor&amp;rdquo; já construído.</description>
    </item>
    
    <item>
      <title>Substituição do módulo quente</title>
      <link>https://www.wikiod.com/pt/webpack/substituicao-do-modulo-quente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/substituicao-do-modulo-quente/</guid>
      <description>webpack-hot-middleware # Use com webpack-dev-middleware, adicionando webpack-hot-middleware/client à entrada.
Configuração # Adicione configurações como string de consulta ao caminho. Exemplo:
webpack-hot-middleware/client?path=/__what&amp;amp;timeout=2000&amp;amp;overlay=false Opção Descrição caminho O caminho no qual o middleware está servindo ao fluxo de eventos tempo limite O tempo de espera após uma desconexão antes de tentar reconectar sobreposição Defina como false para desabilitar a sobreposição do lado do cliente baseada em DOM. recarregar Defina como true para recarregar automaticamente a página quando o webpack travar.</description>
    </item>
    
    <item>
      <title>Carregadores</title>
      <link>https://www.wikiod.com/pt/webpack/carregadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/carregadores/</guid>
      <description>Os carregadores do Webpack podem ser configurados como &amp;ldquo;preLoaders&amp;rdquo;, &amp;ldquo;loaders&amp;rdquo; e &amp;ldquo;postLoaders&amp;rdquo;. Embora não precisem ser, as configurações que usam linting ou outras operações imperativas ou seriais podem aproveitar esses estágios de construção no pipeline.
A chave para entender os loaders e seu uso é que o Webpack executará cada módulo no gráfico require por meio do sistema loader. Seguindo o exemplo acima, isso significa que, à medida que o Webpack começar a rastrear as importações de seu aplicativo, ele identificará os arquivos necessários e, usando um regex simples, determinará qual arquivo ou tipo de arquivo requer qual carregador ou série de carregadores.</description>
    </item>
    
    <item>
      <title>Carregadores e plug-ins</title>
      <link>https://www.wikiod.com/pt/webpack/carregadores-e-plug-ins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/carregadores-e-plug-ins/</guid>
      <description>Carregadores e plugins compõem os blocos de construção do Webpack.
Os carregadores geralmente são delegados a uma única tarefa e tipo de arquivo. Eles são mais fáceis de configurar e geralmente exigem menos código clichê.
Os plugins, por outro lado, têm acesso ao sistema de compilação interno do Webpack por meio de ganchos e, portanto, são mais poderosos. Os plug-ins podem modificar o ambiente Webpack totalmente configurado e podem executar ações personalizadas durante todo o processo de compilação.</description>
    </item>
    
    <item>
      <title>Uso do Webpack</title>
      <link>https://www.wikiod.com/pt/webpack/uso-do-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/uso-do-webpack/</guid>
      <description>Exemplo de uso de módulos CommonJS # Criar pasta. Abra-o na linha de comando. Execute npm install webpack -g. Crie 2 arquivos:
gatos.js:
var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; app.js
cats = require(&#39;./cats.js&#39;); console.log(cats); Execute na linha de comando: webpack ./app.js app.bundle.js
Agora na pasta estará o arquivo app.bundle.js. Você pode incluí-lo na página index.html, abri-lo no navegador e ver o resultado no console.
Mas a maneira mais rápida é executar na linha de comando: node app.</description>
    </item>
    
    <item>
      <title>Agitação da árvore</title>
      <link>https://www.wikiod.com/pt/webpack/agitacao-da-arvore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/agitacao-da-arvore/</guid>
      <description>ES2015 sacudindo a árvore # O webpack 2 introduz o tree shake que pode remover o código não utilizado quando os módulos ES2015 são usados ​​para importar e exportar código.
Instalar # npm install babel-preset-es2015-webpack --save-dev Uso # em .babelrc:
{ &amp;quot;presets&amp;quot;: [ &amp;quot;es2015-webpack&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>Servidor de desenvolvimento webpack-dev-server</title>
      <link>https://www.wikiod.com/pt/webpack/servidor-de-desenvolvimento-webpack-dev-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/webpack/servidor-de-desenvolvimento-webpack-dev-server/</guid>
      <description>Instalação # webpack-dev-server pode ser instalado via npm
npm --save-dev webpack-dev-server agora você pode iniciar o servidor
./node_modules/.bin/webpack-dev-server Para simplificar o uso, você pode adicionar script ao package.json
// package.json { ... &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }, ... } agora para executar o servidor você pode usar
npm run start webpack-dev-server está configurado no arquivo webpack.config.js na seção devServer.
Para alterar o diretório base de conteúdo do servidor você pode usar a opção contentBase.</description>
    </item>
    
  </channel>
</rss>

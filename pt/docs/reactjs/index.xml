<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reagir Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/reactjs/</link>
    <description>Recent content in Reagir Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o React</title>
      <link>https://www.wikiod.com/pt/reactjs/comecando-com-o-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/comecando-com-o-react/</guid>
      <description>O que é ReactJS? # O ReactJS é uma biblioteca front-end de código aberto, baseada em componentes, responsável apenas pela camada de visualização do aplicativo. É mantido pelo Facebook.
ReactJS usa mecanismo baseado em DOM virtual para preencher dados (views) em HTML DOM. O DOM virtual funciona rapidamente devido ao fato de que ele altera apenas elementos individuais do DOM em vez de recarregar o DOM completo toda vez
Um aplicativo React é composto de vários componentes, cada um responsável por gerar um pequeno pedaço de HTML reutilizável.</description>
    </item>
    
    <item>
      <title>React.createClass vs estende React.Component</title>
      <link>https://www.wikiod.com/pt/reactjs/reactcreateclass-vs-estende-reactcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/reactcreateclass-vs-estende-reactcomponent/</guid>
      <description>Sintaxe # Caso 1: React.createClass({ }) Caso 2: classe MyComponent estende React.Component { } React.createClass foi obsoleto na v15.5 e deve ser removido na v16. Há um pacote de substituição drop-in para aqueles que ainda precisam dele. Os exemplos que o utilizam devem ser atualizados.
Criar componente React # Vamos explorar as diferenças de sintaxe comparando dois exemplos de código.
React.createClass (obsoleto) # Aqui temos um const com uma classe React atribuída, com a função render seguindo para completar uma definição típica de componente base.</description>
    </item>
    
    <item>
      <title>Usando ReactJS com Typescript</title>
      <link>https://www.wikiod.com/pt/reactjs/usando-reactjs-com-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/usando-reactjs-com-typescript/</guid>
      <description>Componente ReactJS escrito em Typescript # Na verdade você pode usar os componentes do ReactJS no Typescript como no exemplo do facebook. Basta substituir a extensão do arquivo &amp;lsquo;jsx&amp;rsquo; por &amp;rsquo;tsx&amp;rsquo;:
//helloMessage.tsx: var HelloMessage = React.createClass({ render: function() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } }); ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode); Mas para fazer pleno uso do recurso principal do Typescript (verificação de tipo estático) deve ser feito algumas coisas:
1) converta o exemplo React.</description>
    </item>
    
    <item>
      <title>Componentes</title>
      <link>https://www.wikiod.com/pt/reactjs/componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/componentes/</guid>
      <description>React.createClass foi obsoleto na v15.5 e deve ser removido na v16. Há um pacote de substituição drop-in para aqueles que ainda precisam dele. Os exemplos que o utilizam devem ser atualizados.
Criando componentes # Esta é uma extensão do Exemplo Básico:
Estrutura básica # import React, { Component } from &#39;react&#39;; import { render } from &#39;react-dom&#39;; class FirstComponent extends Component { render() { return ( &amp;lt;div&amp;gt; Hello, {this.props.name}! I am a FirstComponent.</description>
    </item>
    
    <item>
      <title>Ciclo de vida do componente React</title>
      <link>https://www.wikiod.com/pt/reactjs/ciclo-de-vida-do-componente-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/ciclo-de-vida-do-componente-react/</guid>
      <description>Os métodos de ciclo de vida devem ser usados ​​para executar código e interagir com seu componente em diferentes pontos da vida útil dos componentes. Esses métodos são baseados em um componente de montagem, atualização e desmontagem.
Criação de componentes # Quando um componente React é criado, várias funções são chamadas:
Se você estiver usando React.createClass (ES5), 5 funções definidas pelo usuário são chamadas Se você estiver usando class Component extends React.</description>
    </item>
    
    <item>
      <title>Comunicação entre componentes</title>
      <link>https://www.wikiod.com/pt/reactjs/comunicacao-entre-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/comunicacao-entre-componentes/</guid>
      <description>Há um total de 3 casos de comunicação entre componentes React:
Caso 1: Comunicação de Pai para Filho Caso 2: Comunicação entre pais e filhos Caso 3: Comunicação de componentes não relacionados (qualquer componente para qualquer componente) Componentes filho para pai # Enviando dados de volta para o pai, para fazer isso, simplesmente passamos uma função como prop do componente pai para o componente filho, e o componente filho chama essa função.</description>
    </item>
    
    <item>
      <title>Adereços em React</title>
      <link>https://www.wikiod.com/pt/reactjs/aderecos-em-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/aderecos-em-react/</guid>
      <description>OBSERVAÇÃO: a partir do React 15.5, o componente PropTypes vive em seu próprio pacote npm, ou seja, &amp;lsquo;prop-types&amp;rsquo; e precisa de sua própria instrução de importação ao usar PropTypes. Veja a documentação oficial do react para a mudança: https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html
Introdução # props são usados ​​para passar dados e métodos de um componente pai para um componente filho.
Coisas interessantes sobre props
Eles são imutáveis. Eles nos permitem criar componentes reutilizáveis. Exemplo básico</description>
    </item>
    
    <item>
      <title>Reagir chamada AJAX</title>
      <link>https://www.wikiod.com/pt/reactjs/reagir-chamada-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/reagir-chamada-ajax/</guid>
      <description>Solicitação HTTP GET # Às vezes, um componente precisa renderizar alguns dados de um endpoint remoto (por exemplo, uma API REST). Uma prática padrão é fazer tais chamadas no método componentDidMount.
Aqui está um exemplo, usando superagent como auxiliar AJAX:
import React from &#39;react&#39; import request from &#39;superagent&#39; class App extends React.Component { constructor () { super() this.state = {} } componentDidMount () { request .get(&#39;/search&#39;) .query({ query: &#39;Manny&#39; }) .</description>
    </item>
    
    <item>
      <title>Estado em Reagir</title>
      <link>https://www.wikiod.com/pt/reactjs/estado-em-reagir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/estado-em-reagir/</guid>
      <description>Estado Básico # Os componentes State in React são essenciais para gerenciar e comunicar dados em seu aplicativo. Ele é representado como um objeto JavaScript e tem escopo nível de componente, pode ser considerado como os dados privados do seu componente.
No exemplo abaixo estamos definindo algum estado inicial na função constructor do nosso componente e fazemos uso dele na função render.
class ExampleComponent extends React.Component { constructor(props){ super(props); // Set-up our initial state this.</description>
    </item>
    
    <item>
      <title>Componentes funcionais sem estado</title>
      <link>https://www.wikiod.com/pt/reactjs/componentes-funcionais-sem-estado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/reactjs/componentes-funcionais-sem-estado/</guid>
      <description>Componentes funcionais sem estado no React são funções puras do passado em props. Esses componentes não dependem do estado e descartam o uso de métodos de ciclo de vida do componente. Você pode, no entanto, ainda definir propTypes e defaultPropts.
Consulte https://facebook.github.io/react/docs/reusable-components.html#stateless-functions para obter mais informações sobre componentes funcionais sem estado.
Componente funcional sem estado # Os componentes permitem dividir a interface do usuário em partes independentes e reutilizáveis. Essa é a beleza do React; podemos separar uma página em vários pequenos componentes reutilizáveis.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de soquetes on </title>
    <link>https://www.wikiod.com/pt/docs/sockets/</link>
    <description>Recent content in Tutorial de soquetes on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução aos soquetes</title>
      <link>https://www.wikiod.com/pt/sockets/introducao-aos-soquetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sockets/introducao-aos-soquetes/</guid>
      <description>Como instanciar um objeto de classe de soquete # A instanciação de um soquete pode ser feita de várias maneiras.
declaração e instanciação de 2 linhas:
First we need to define a variable which will hold a Socket class object:
Socket socket; then we can create a Socket class object:
socket = new Socket(); Também podemos fazer uma definição e instanciação de uma linha:
Socket socket = new Socket(); ambas as maneiras criarão um soquete desconectado.</description>
    </item>
    
    <item>
      <title>Soquetes TCP do Python; exemplos simples de servidor e cliente com anotação</title>
      <link>https://www.wikiod.com/pt/sockets/soquetes-tcp-do-python-exemplos-simples-de-servidor-e-cliente-com-anotacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sockets/soquetes-tcp-do-python-exemplos-simples-de-servidor-e-cliente-com-anotacao/</guid>
      <description>Estes são dois programas de exemplo que funcionam juntos. Um é um servidor simples, o outro um cliente simples. Inicie o servidor em uma janela:
python tserver.py Edite o endereço do servidor no arquivo de origem do cliente, se desejar. Então corra
python tclient.py O cliente se conecta ao servidor, solicita a entrada do console e a envia ao servidor. Para cada buffer recebido, o servidor adiciona algumas informações predefinidas e as envia de volta ao cliente.</description>
    </item>
    
    <item>
      <title>Soquetes C&#43;&#43;</title>
      <link>https://www.wikiod.com/pt/sockets/soquetes-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sockets/soquetes-c-/</guid>
      <description>Este tópico será sobre a Programação de Soquete Berkeley no estilo C++ moderno (Este é um código para Linux, mas facilmente portátil para outras plataformas)
Exemplo de código do servidor # constexpr const size_t addressSize = sizeof(sockaddr_in); constexpr const uint16_t defaultPort = 80; // The port you want to use int serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); sockaddr_in serverAddress, clientAddress; memset(&amp;amp;serverAddress, 0, addressSize); serverAddress.sin_family = AF_INET; serverAddress.sin_addr.s_addr = htonl(INADDR_ANY); serverAddress.sin_port = htons(defaultPort); bind(serverSocket, (sockaddr*)&amp;amp;serverAddress, addressSize); listen(serverSocket, SOMAXCONN); while (true) { // Infinite running app std::thread{ // Create new thread for every client handleConnection, //Connection handler accept(serverSocket, (sockaddr*)&amp;amp;clientAddress, &amp;amp;addressSize) //Client socket // Any other parameters for the handler here }.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de script nativo on </title>
    <link>https://www.wikiod.com/pt/docs/nativescript/</link>
    <description>Recent content in Tutorial de script nativo on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/nativescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com script nativo</title>
      <link>https://www.wikiod.com/pt/nativescript/comecando-com-script-nativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/comecando-com-script-nativo/</guid>
      <description>Janelas # Verifique se você tem o nodeJS LTS mais recente instalado Abra o prompt de comando e digite $ npm install -g nativescript No prompt de comando, digite $ @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://www.nativescript.org/setup/win&#39;))&amp;quot; - isso pode demorar um pouco Para verificar se o acima funcionou, digite $ tns doctor no prompt de comando (seu cmd) Se houver algum erro, consulte o guia de solução de problemas Instalação ou configuração # Instruções detalhadas sobre como configurar ou instalar o Nativescript.</description>
    </item>
    
    <item>
      <title>Exibindo dados como lista (usando Repeater, ListView ou *ngFor para aplicativos {N}&#43;Angular-2)</title>
      <link>https://www.wikiod.com/pt/nativescript/exibindo-dados-como-lista-usando-repeater-listview-ou-ngfor-para-aplicativos-n-angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/exibindo-dados-como-lista-usando-repeater-listview-ou-ngfor-para-aplicativos-n-angular-2/</guid>
      <description>Nota: Não use Repetidor em aplicativos {N}+Angular-2! O *ngRepeat é uma diretiva obsoleta em Angular-2. Quando você precisar exibir padrões de itens repetidos, use a diretiva estrutural ListView ou *ngFor.
Usando *ngFor Structural Directive para exibir dados (nativeScript + Angular-2) # ngfor.component.html
&amp;lt;StackLayout&amp;gt; &amp;lt;Label *ngFor=&amp;quot;let item of items&amp;quot; [text]=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/Label&amp;gt; &amp;lt;/StackLayout&amp;gt; ngfor.component.ts
import { Component } from &amp;quot;@angular/core&amp;quot;; var dataItems = [&amp;quot;data-item 1&amp;quot;, &amp;quot;data-item 2&amp;quot;, &amp;quot;data-item 3&amp;quot;] @Component({ selector: &#39;ngfor-component&#39;, styleUrls:[&amp;quot;.</description>
    </item>
    
    <item>
      <title>Implementando Animações em Nativescript</title>
      <link>https://www.wikiod.com/pt/nativescript/implementando-animacoes-em-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/implementando-animacoes-em-nativescript/</guid>
      <description>Uso de função de tempo de animação e propriedades de animação. # pages/main.component.ts
import {Component, ElementRef, ViewChild} from &amp;quot;@angular/core&amp;quot;; import {View} from &amp;quot;ui/core/view&amp;quot;; import {AnimationCurve} from &amp;quot;ui/enums&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;Image #img src=&amp;quot;~/assets/images/user-shape.png&amp;quot;&amp;gt;&amp;lt;/Image&amp;gt; &amp;lt;Button text=&amp;quot;Apply Changes&amp;quot; (tap)=&amp;quot;animateImage()&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;], }) export class MainComponent { @ViewChild(&amp;quot;img&amp;quot;) img: ElementRef; animateImage() { let img = &amp;lt;View&amp;gt;this.img.nativeElement; img.animate({ translate: { x: 0, y: 120 }, duration: 2000, curve: AnimationCurve.easeIn }); } } #snippet para outras propriedades de animação</description>
    </item>
    
    <item>
      <title>Estilizando o modelo de script nativo</title>
      <link>https://www.wikiod.com/pt/nativescript/estilizando-o-modelo-de-script-nativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/estilizando-o-modelo-de-script-nativo/</guid>
      <description>Adicionando um layout de amostra em seu aplicativo # main.component.ts
import {Component} from &amp;quot;@angular/core&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;TextField hint=&amp;quot;some text&amp;quot;&amp;gt;&amp;lt;/TextField&amp;gt; &amp;lt;Button text=&amp;quot;Click me&amp;quot; class=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;, &amp;quot;pages/main/main.css&amp;quot;] }) export class MainComponent { } Método 1: CSS global # app.css &amp;ndash; Aplica-se globalmente a todos os layouts.
StackLayout { margin: 10; background-color: white; } .btn, TextField { margin-left: 16; margin-right: 16; } Método 2: CSS específico da plataforma # platform.</description>
    </item>
    
    <item>
      <title>Acessando apis nativas</title>
      <link>https://www.wikiod.com/pt/nativescript/acessando-apis-nativas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/acessando-apis-nativas/</guid>
      <description>Escreva código java em script nativo e use-o diretamente em javascript # Esta é a imagem da estrutura do projeto no estúdio Android:
Esta é a imagem da estrutura do projeto do projeto nativescript:
Como você vê, eles são iguais. para que possamos escrever código java em script nativo enquanto escrevemos no android studio.
Queremos adicionar o Toast ao aplicativo padrão do nativescript. depois de criar um novo projeto nativescript crie um diretório o diretório java/org/example como este:</description>
    </item>
    
    <item>
      <title>usando widget nativo</title>
      <link>https://www.wikiod.com/pt/nativescript/usando-widget-nativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/usando-widget-nativo/</guid>
      <description>Usando surfaceView em ng2-TNS-Android: passo a passo # Por exemplo, você deseja usar surfaceView em ng2-nativescript. Como não temos o surfaceView no script nativo, devemos usar o placeholder.
primeiro devemos importar os requisitos:
import {Component} from &amp;quot;@angular/core&amp;quot;; import placeholder = require(&amp;quot;ui/placeholder&amp;quot;); let application= require(&amp;quot;application&amp;quot;); em seguida, adicione o espaço reservado ao seu arquivo html:
&amp;lt;Placeholder (creatingView)=&amp;quot;creatingView($event)&amp;quot;&amp;gt;&amp;lt;/Placeholder&amp;gt; Adicione este método à sua classe:
public creatingView(args: any) { var nativeView = new android.</description>
    </item>
    
    <item>
      <title>Barra de status</title>
      <link>https://www.wikiod.com/pt/nativescript/barra-de-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/barra-de-status/</guid>
      <description>Ocultar/exibir - android # Esta é uma barra de status que você vê na parte superior da tela com ícones de bateria, relógio &amp;hellip; . let frame = require(&amp;quot;ui/frame&amp;quot;); Esconder:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN); Mostrar:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_VISIBLE ); Tornar statusBar Transparente android # abra APP_Resources/values/styles.xml e adicione o
&amp;lt;item name=&amp;quot;android:windowTranslucentStatus&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
in the
&amp;lt;style name=&amp;quot;AppThemeBase&amp;quot; parent=&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt; &amp;lt;/style&amp;gt; section.</description>
    </item>
    
    <item>
      <title>Variáveis ​​globais</title>
      <link>https://www.wikiod.com/pt/nativescript/variaveis-globais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/variaveis-globais/</guid>
      <description>Consola # A variável global console do NativeScript permite que você imprima valores em seu terminal para depuração. O uso mais simples é passar um valor para a função console.log():
console.log(&amp;quot;hello world&amp;quot;); O objeto console tem vários outros métodos, incluindo dump(), trace(), assert() e mais.
// Prints the state of a full object. console.dump({ firstName: &amp;quot;Native&amp;quot;, lastName: &amp;quot;Script&amp;quot;}); // Prints the current stack trace console.trace(); // Asserts a boolean condition, and prints to the console if the assertion fails.</description>
    </item>
    
    <item>
      <title>implementar interface</title>
      <link>https://www.wikiod.com/pt/nativescript/implementar-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/implementar-interface/</guid>
      <description>implemente View.OnLayoutChangeListener em Nativescript # let playerLayoutChangeListener = new android.view.View.OnLayoutChangeListener( { onLayoutChange : function ( v:View, left:number, top:number, right:number, bottom:number, oldLeft:number, oldTop:number, oldRight:number, oldBottom:number):any { if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) { console.log(&amp;quot;OnLayoutChangeListener&amp;quot;); __this.changeSurfaceLayout(); } } }); crie um surfaceView https://www.wikiod.com/pt/proposed
Adicionar Ouvinte:
surfaceView.addOnLayoutChangeListener(playerLayoutChangeListener); remover Ouvinte:
surfaceView.removeOnLayoutChangeListener(playerLayoutChangeListener); </description>
    </item>
    
    <item>
      <title>Modelo multithread</title>
      <link>https://www.wikiod.com/pt/nativescript/modelo-multithread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nativescript/modelo-multithread/</guid>
      <description>O novo mecanismo chrome v8 é parcialmente compatível com ES7. Portanto, se adicionarmos &amp;quot;use strict&amp;quot;; no topo do nosso arquivo (o typescript faz isso quando transpila o typescript), temos que ter certeza de que todas as funções que estão no escopo global são realmente atribuídas ao escopo global. então devemos usar self.functionName ou global.functionName.
use Trabalhadores no serviço angular2 # /app/services/greeting.service.ts:
import { Injectable } from &#39;@angular/core&#39;; import {greetingTypes,request,response} from &#39;.</description>
    </item>
    
  </channel>
</rss>

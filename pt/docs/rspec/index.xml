<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial rspec on </title>
    <link>https://www.wikiod.com/pt/docs/rspec/</link>
    <description>Recent content in Tutorial rspec on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/rspec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao rspec</title>
      <link>https://www.wikiod.com/pt/rspec/introducao-ao-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/rspec/introducao-ao-rspec/</guid>
      <description>Um exemplo simples de RSpec # Em greeter.rb (onde quer que vá em seu projeto):
class Greeter def greet &amp;quot;Hello, world!&amp;quot; end end Em spec/greeter_spec.rb:
require_relative &#39;../greeter.rb&#39; RSpec.describe Greeter do describe &#39;#greet&#39; do it &amp;quot;says hello&amp;quot; do expect(Greeter.new.greet).to eq(&amp;quot;Hello, world!&amp;quot;) end end end Portanto, nossa estrutura de arquivos se parece com:
$ tree . . ├── greeter.rb └── spec └── greeter_spec.rb 1 directory, 2 files Resultado
$rspec greeter_spec.rb Finished in 0.</description>
    </item>
    
    <item>
      <title>Expectativas RSspec</title>
      <link>https://www.wikiod.com/pt/rspec/expectativas-rsspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/rspec/expectativas-rsspec/</guid>
      <description>RSpec::Expectations permite expressar os resultados esperados em um objeto usando uma sintaxe DSL baseada em exemplo.
Este tópico fornece exemplos de como esperar resultados de teste no RSpec usando expect .to e os muitos correspondentes integrados.
Essa funcionalidade é fornecida pela [gem rspec-expectations] 1.
Uso básico # Dada uma class da seguinte forma:
class Cube attr_reader :height, :width, :depth def initialize(args) @height = args[:height] || args[:y] || 1 @width = args[:width] || args[:x] || 1 @depth = args[:depth] || args[:z] || 1 end def volume height * width * depth end end O exemplo a seguir é aprovado se cube.</description>
    </item>
    
    <item>
      <title>Simulação de RSpec</title>
      <link>https://www.wikiod.com/pt/rspec/simulacao-de-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/rspec/simulacao-de-rspec/</guid>
      <description>Este tópico documenta o suporte do RSpec para duplos de teste (stubs, mocks, etc.). Esse suporte é fornecido por the rspec-mocks gem.
Stubbing com permitir # O exemplo a seguir usa allow e receive para stub uma chamada de Cart para um CreditCardService para que o exemplo não precise esperar por uma chamada de rede ou usar um número de cartão de crédito que o processador conheça .
class Cart def check_out begin transaction_id = CreditCardService.</description>
    </item>
    
    <item>
      <title>Núcleo RSpec</title>
      <link>https://www.wikiod.com/pt/rspec/nucleo-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/rspec/nucleo-rspec/</guid>
      <description>Executando exemplos com uma determinada tag # Adicionar tags aos blocos &amp;ldquo;describe&amp;rdquo; ou &amp;ldquo;it&amp;rdquo; permite que você execute apenas os exemplos com uma determinada tag. Use a opção --tag (ou -t) para executar exemplos que correspondam a uma tag especificada. A tag pode ser um nome simples ou um par nome:valor.
Se um nome simples for fornecido, apenas exemplos com :name =&amp;gt; true serão executados. Por exemplo, rspec &amp;lt;spec_file&amp;gt; --tag smoke executaria o exemplo marcado com &amp;ldquo;Smoke&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>RSpec Matcher</title>
      <link>https://www.wikiod.com/pt/rspec/rspec-matcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/rspec/rspec-matcher/</guid>
      <description>rspec-expectations vem com vários matchers embutidos. Cada matcher pode ser usado com expect(..).to ou expect(..).not_to para definir expectativas positivas e negativas respectivamente em um objeto.
Correspondentes de igualdade # compare usando a eq (==)
RSpec.describe &amp;quot;a string&amp;quot; do it &amp;quot;is equal to another string of the same value&amp;quot; do expect(&amp;quot;this string&amp;quot;).to eq(&amp;quot;this string&amp;quot;) end it &amp;quot;is not equal to another string of a different value&amp;quot; do expect(&amp;quot;this string&amp;quot;).not_to eq(&amp;quot;a different string&amp;quot;) end end RSpec.</description>
    </item>
    
  </channel>
</rss>

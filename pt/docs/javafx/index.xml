<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial javafx on </title>
    <link>https://www.wikiod.com/pt/docs/javafx/</link>
    <description>Recent content in tutorial javafx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/javafx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com javafx</title>
      <link>https://www.wikiod.com/pt/javafx/comecando-com-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/comecando-com-javafx/</guid>
      <description>programa Olá Mundo # O código a seguir cria uma interface de usuário simples contendo um único Button que imprime uma String no console ao clicar.
import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Alert.AlertType; import javafx.scene.control.Button; import javafx.scene.layout.StackPane; import javafx.stage.Stage; public class HelloWorld extends Application { @Override public void start(Stage primaryStage) { // create a button with specified text Button button = new Button(&amp;quot;Say &#39;Hello World&#39;&amp;quot;); // set a handler that is executed when the user activates the button // e.</description>
    </item>
    
    <item>
      <title>Internacionalização em JavaFX</title>
      <link>https://www.wikiod.com/pt/javafx/internacionalizacao-em-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/internacionalizacao-em-javafx/</guid>
      <description>Carregando pacote de recursos # JavaFX fornece uma maneira fácil de internacionalizar suas interfaces de usuário. Ao criar uma visualização de um arquivo FXML, você pode fornecer ao FXMLLoader um pacote de recursos:
Locale locale = new Locale(&amp;quot;en&amp;quot;, &amp;quot;UK&amp;quot;); ResourceBundle bundle = ResourceBundle.getBundle(&amp;quot;strings&amp;quot;, locale); Parent root = FXMLLoader.load(getClass().getClassLoader() .getResource(&amp;quot;ui/main.fxml&amp;quot;), bundle); Este pacote fornecido é usado automaticamente para traduzir todos os textos em seu arquivo FXML que começam com um %. Digamos que seu arquivo de propriedades strings_en_UK.</description>
    </item>
    
    <item>
      <title>FXML e controladores</title>
      <link>https://www.wikiod.com/pt/javafx/fxml-e-controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/fxml-e-controladores/</guid>
      <description>Sintaxe # xmlns:fx=&amp;ldquo;http://javafx.com/fxml&amp;rdquo; // declaração de namespace Propriedades de configuração # Existem várias maneiras de adicionar dados a um objeto em fxml:
tag &amp;lt;propriedade&amp;gt; # Uma tag com o nome de uma propriedade pode ser adicionada como filha de um elemento usado para criar uma instância. O filho desta tag é atribuído à propriedade usando o setter ou adicionado ao conteúdo da propriedade (propriedades de lista/mapa somente leitura).
Propriedade padrão # Uma classe pode ser anotada com a anotação @DefaultProperty.</description>
    </item>
    
    <item>
      <title>Construtor de Cenas</title>
      <link>https://www.wikiod.com/pt/javafx/construtor-de-cenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/construtor-de-cenas/</guid>
      <description>JavaFX Scene Builder é uma ferramenta de layout visual que permite aos usuários projetar rapidamente interfaces de usuário de aplicativos JavaFX, sem codificação. É usado para gerar arquivos FXML.
JavaFX Scene Builder é uma ferramenta de layout visual que permite aos usuários projetar rapidamente interfaces de usuário de aplicativos JavaFX, sem codificação. Os usuários podem arrastar e soltar componentes da interface do usuário em uma área de trabalho, modificar suas propriedades, aplicar folhas de estilo e o código FXML para o layout que eles estão criando é gerado automaticamente em segundo plano.</description>
    </item>
    
    <item>
      <title>Layouts</title>
      <link>https://www.wikiod.com/pt/javafx/layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/layouts/</guid>
      <description>BorderPane # O BorderPane é separado em cinco áreas diferentes.
As áreas de borda (Top, Right, Bottom, Left) têm tamanho preferencial com base em seu conteúdo. Por padrão, eles apenas levarão o que precisam, enquanto a área &amp;lsquo;Centro&amp;rsquo; ocupará qualquer espaço restante. Quando as áreas de fronteira estão vazias, elas não ocupam espaço.
Cada área pode conter apenas um elemento. Ele pode ser adicionado usando os métodos setTop(Node), setRight(Node), setBottom(Node), setLeft(Node), setCenter(Node).</description>
    </item>
    
    <item>
      <title>Vista de mesa</title>
      <link>https://www.wikiod.com/pt/javafx/vista-de-mesa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/vista-de-mesa/</guid>
      <description>PropertyValueFactory # PropertyValueFactory pode ser usado como cellValueFactory em uma TableColumn. Ele usa reflexão para acessar métodos que correspondem a um determinado padrão para recuperar os dados de um item TableView:
Exemplo
TableColumn&amp;lt;Person, String&amp;gt; nameColumn = ... PropertyValueFactory&amp;lt;Person, String&amp;gt; valueFactory = new PropertyValueFactory&amp;lt;&amp;gt;(&amp;quot;name&amp;quot;); nameColumn.setCellValueFactory(valueFactory); O nome do método usado para obter os dados depende do parâmetro do construtor para PropertyValueFactory.
Método da propriedade: Espera-se que esse tipo de método retorne um ObservableValue contendo os dados.</description>
    </item>
    
    <item>
      <title>WebView e WebEngine</title>
      <link>https://www.wikiod.com/pt/javafx/webview-e-webengine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/webview-e-webengine/</guid>
      <description>O WebView é o nó JavaFX que é integrado à árvore de componentes JavaFX. Ele gerencia um WebEngine e exibe seu conteúdo.
O WebEngine é o Browser Engine subjacente, que basicamente faz todo o trabalho.
Carregando uma página # WebView wv = new WebView(); WebEngine we = wv.getEngine(); we.load(&amp;quot;https://stackoverflow.com&amp;quot;); WebView é o shell de interface do usuário em torno do [WebEngine](https:// docs.oracle.com/javase/8/javafx/api/javafx/scene/web/WebEngine.html). Quase todos os controles para interação não UI com uma página são feitos através da classe WebEngine.</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://www.wikiod.com/pt/javafx/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/css/</guid>
      <description>Sintaxe # NodeClass /* seletor pela classe do Node */ .someclass /* seletor por classe */ #someId /* seletor por id */ [selector1] &amp;gt; [selector2] /* seletor para um filho direto de um nó correspondente a selector1 que corresponde a selector2 */ [selector1] [selector2] /* seletor para um descendente de um nó correspondente a selector1 que corresponde a selector2 */ Usando CSS para estilizar # CSS pode ser aplicado em vários lugares:</description>
    </item>
    
    <item>
      <title>Propriedades e observáveis</title>
      <link>https://www.wikiod.com/pt/javafx/propriedades-e-observaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/propriedades-e-observaveis/</guid>
      <description>As propriedades são observáveis ​​e ouvintes podem ser adicionados a elas. Eles são usados ​​consistentemente para propriedades de Nodes.
Tipos de propriedades e nomenclatura # Propriedades padrão # Dependendo do tipo de propriedade, existem até 3 métodos para uma única propriedade. Deixe &amp;lt;propriedade&amp;gt; denotar o nome de uma propriedade e &amp;lt;Propriedade&amp;gt; o nome da propriedade com uma primeira letra maiúscula. E seja T o tipo da propriedade; para wrappers primitivos, usamos o tipo primitivo aqui, por exemplo.</description>
    </item>
    
    <item>
      <title>Diálogos</title>
      <link>https://www.wikiod.com/pt/javafx/dialogos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/javafx/dialogos/</guid>
      <description>As caixas de diálogo foram adicionadas na atualização 40 do JavaFX 8.
TextInputDialog # TextInputDialog permite que o usuário insira uma única String.
TextInputDialog dialog = new TextInputDialog(&amp;quot;42&amp;quot;); dialog.setHeaderText(&amp;quot;Input your favourite int.&amp;quot;); dialog.setTitle(&amp;quot;Favourite number?&amp;quot;); dialog.setContentText(&amp;quot;Your favourite int: &amp;quot;); Optional&amp;lt;String&amp;gt; result = dialog.showAndWait(); String s = result.map(r -&amp;gt; { try { Integer n = Integer.valueOf(r); return MessageFormat.format(&amp;quot;Nice! I like {0} too!&amp;quot;, n); } catch (NumberFormatException ex) { return MessageFormat.format(&amp;quot;Unfortunately \&amp;quot;{0}\&amp;quot; is not a int!</description>
    </item>
    
  </channel>
</rss>

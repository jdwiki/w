<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Keras on </title>
    <link>https://www.wikiod.com/pt/docs/keras/</link>
    <description>Recent content in Tutorial Keras on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/keras/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com keras</title>
      <link>https://www.wikiod.com/pt/keras/comecando-com-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/comecando-com-keras/</guid>
      <description>Introdução ao Keras: 30 segundos # A estrutura de dados principal do Keras é um modelo, uma forma de organizar camadas. O principal tipo de modelo é o modelo Sequencial, uma pilha linear de camadas. Para arquiteturas mais complexas, você deve usar a API funcional Keras.
Aqui está o modelo Sequencial:
from keras.models import Sequential model = Sequential() Empilhar camadas é tão fácil quanto .add():
from keras.layers import Dense, Activation model.</description>
    </item>
    
    <item>
      <title>Lidando com grandes conjuntos de dados de treinamento usando Keras fit_generator, geradores Python e formato de arquivo HDF5</title>
      <link>https://www.wikiod.com/pt/keras/lidando-com-grandes-conjuntos-de-dados-de-treinamento-usando-keras-fit_generator-geradores-python-e-formato-de-arquivo-hdf5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/lidando-com-grandes-conjuntos-de-dados-de-treinamento-usando-keras-fit_generator-geradores-python-e-formato-de-arquivo-hdf5/</guid>
      <description>Os problemas de aprendizado de máquina geralmente exigem lidar com grandes quantidades de dados de treinamento com recursos de computação limitados, principalmente memória. Nem sempre é possível carregar um conjunto de treinamento inteiro na memória. Felizmente, isso pode ser resolvido com o uso do método fit_generator do Keras, geradores Python e formato de arquivo HDF5.
Este exemplo assume que keras, numpy (como np) e h5py já foram instalados e importados. Também assume que as entradas e rótulos de vídeo já foram processados ​​e salvos no arquivo HDF5 especificado, no formato mencionado, e um modelo de classificação de vídeo já foi construído para funcionar com a entrada fornecida.</description>
    </item>
    
    <item>
      <title>Crie um modelo sequencial simples</title>
      <link>https://www.wikiod.com/pt/keras/crie-um-modelo-sequencial-simples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/crie-um-modelo-sequencial-simples/</guid>
      <description>O modelo Sequencial é uma pilha linear de camadas.
Simples Perceptron de várias camadas com modelos sequenciais # Você pode criar um modelo Sequencial passando uma lista de instâncias de camada para o construtor:
from keras.models import Sequential from keras.layers import Dense, Activation model = Sequential([ Dense(32, input_dim=784), Activation(&#39;relu&#39;), Dense(10), Activation(&#39;softmax&#39;), ]) Você também pode simplesmente adicionar camadas através do método .add():
model = Sequential() model.add(Dense(32, input_dim=784)) model.add(Activation(&#39;relu&#39;)) Os modelos devem ser compilados antes do uso:</description>
    </item>
    
    <item>
      <title>Função de perda personalizada e métricas no Keras</title>
      <link>https://www.wikiod.com/pt/keras/funcao-de-perda-personalizada-e-metricas-no-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/funcao-de-perda-personalizada-e-metricas-no-keras/</guid>
      <description>Você pode criar uma função de perda personalizada e métricas no Keras definindo uma função simbólica TensorFlow/Theano que retorna um escalar para cada ponto de dados e recebe os dois argumentos a seguir: tensor de valores verdadeiros, tensor dos valores previstos correspondentes.
Observe que a perda/métrica (para exibição e otimização) é calculada como a média das perdas/métrica em todos os pontos de dados no lote.
As funções de perda Keras são definidas em losses.</description>
    </item>
    
    <item>
      <title>Classificando entradas espaço-temporais com CNNs, RNNs e MLPs</title>
      <link>https://www.wikiod.com/pt/keras/classificando-entradas-espaco-temporais-com-cnns-rnns-e-mlps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/classificando-entradas-espaco-temporais-com-cnns-rnns-e-mlps/</guid>
      <description>Dados espaço-temporais, ou dados com qualidades espaciais e temporais, são uma ocorrência comum. Os exemplos incluem vídeos, bem como sequências de dados semelhantes a imagens, como espectrogramas.
As Redes Neurais Convolucionais (CNNs) são particularmente adequadas para encontrar padrões espaciais. As Redes Neurais Recorrentes (RNNs), por outro lado, são particularmente adequadas para encontrar padrões temporais. Esses dois, em combinação com os Perceptrons Multicamadas, podem ser eficazes para classificar entradas espaço-temporais.
Neste exemplo, foi utilizado um modelo VGG-16 pré-treinado no banco de dados ImageNet.</description>
    </item>
    
    <item>
      <title>Transferência de aprendizado e ajuste fino usando Keras</title>
      <link>https://www.wikiod.com/pt/keras/transferencia-de-aprendizado-e-ajuste-fino-usando-keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/keras/transferencia-de-aprendizado-e-ajuste-fino-usando-keras/</guid>
      <description>Este tópico inclui exemplos curtos, breves, mas abrangentes, de carregamento de pesos pré-treinados, inserção de novas camadas no topo ou no meio de camadas pré-contidas e treinamento de uma nova rede com pesos parcialmente pré-treinados. É necessário um exemplo para cada uma das redes pré-treinadas prontas para uso, disponíveis na biblioteca Keras (VGG, ResNet, Inception, Xception, MobileNet).
Transferência de Aprendizagem usando Keras e VGG # Neste exemplo, três sub-exemplos breves e abrangentes são apresentados:</description>
    </item>
    
  </channel>
</rss>

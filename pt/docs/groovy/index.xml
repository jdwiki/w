<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial legal on </title>
    <link>https://www.wikiod.com/pt/docs/groovy/</link>
    <description>Recent content in Tutorial legal on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Groovy</title>
      <link>https://www.wikiod.com/pt/groovy/comecando-com-groovy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/comecando-com-groovy/</guid>
      <description>Instalação ou Configuração # Existem duas maneiras comuns de instalar o Groovy.
Download
O binário do Groovy pode ser baixado na página download do site do Groovy. Você pode descompactar o arquivo e adicionar o caminho para %GROOVY_HOME%/bin/groovy.bat à variável de ambiente do sistema PATH, onde %GROOVY_HOME% é o diretório onde o Groovy é descompactado.
SDKMAN
A outra opção é usar SDKMAN. Essa opção cresceu rapidamente em popularidade e torna o gerenciamento de várias versões do Groovy muito simples.</description>
    </item>
    
    <item>
      <title>Groovy Truth (verdade)</title>
      <link>https://www.wikiod.com/pt/groovy/groovy-truth-verdade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/groovy-truth-verdade/</guid>
      <description>O Groovy avalia condições em instruções if, while e for da mesma forma que Java faz para condições Java padrão : em Java você deve fornecer uma expressão booleana (uma expressão que é avaliada como booleana) e o resultado é o resultado da avaliação.
Em Groovy , o resultado é o mesmo que em Java para essas condições (nenhum exemplo fornecido, este é o Java padrão).
O outro mecanismo de avaliação de veracidade mostrado por exemplos pode ser resumido como:</description>
    </item>
    
    <item>
      <title>Interpolação de String</title>
      <link>https://www.wikiod.com/pt/groovy/interpolacao-de-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/interpolacao-de-string/</guid>
      <description>Sintaxe # $ ${} ${-&amp;gt;} Básico # def str = &#39;nice&#39; assert &amp;quot;Groovy is $str&amp;quot; == &#39;Groovy is nice&#39; Expressão pontilhada # def arg = [phrase: &#39;interpolated&#39;] assert &amp;quot;This is $arg.phrase&amp;quot; == &#39;This is interpolated&#39; Expressão ansiosa # def str = &#39;old&#39; def interpolated = &amp;quot;I am the ${str} value&amp;quot; assert interpolated == &#39;I am the old value&#39; str = &#39;new&#39; assert interpolated == &#39;I am the old value&#39; Expressão preguiçosa # Podemos ter interpolação preguiçosa em Strings.</description>
    </item>
    
    <item>
      <title>Strings e literais GString</title>
      <link>https://www.wikiod.com/pt/groovy/strings-e-literais-gstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/strings-e-literais-gstring/</guid>
      <description>Sintaxe # &amp;lsquo;String entre aspas simples&amp;rsquo; &amp;ldquo;String com aspas duplas&amp;rdquo; &amp;lsquo;&amp;lsquo;&amp;lsquo;String multilinha&amp;rsquo;&amp;rsquo;&amp;rsquo; &amp;ldquo;&amp;ldquo;&amp;ldquo;String com aspas duplas triplas&amp;rdquo;&amp;rdquo;&amp;rdquo; /Corda slashy/ $/cadeia de barra de dólar/$ Groovy tem dois tipos de string, o java java.lang.String e groovy.lang.GString, bem como várias formas de literais de string (veja sintaxe e exemplos).
A principal diferença entre os dois tipos de strings é que GString suporta interpolação de strings.
Sequência de barra de dólar # def param = &#39;string&#39; def str = $/ multiline $param no need to escape slash \n $ $$ /$ assert str instanceof GString assert str.</description>
    </item>
    
    <item>
      <title>Fechamentos</title>
      <link>https://www.wikiod.com/pt/groovy/fechamentos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/fechamentos/</guid>
      <description>Fechamento com parâmetros implícitos # [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { it.length() } it é o nome padrão do parâmetro se você tiver um único parâmetro e não nomear explicitamente o parâmetro. Opcionalmente, você também pode declarar o parâmetro.
[&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { animal -&amp;gt; animal.length() } Fechamento com parâmetros explícitos # def addNumbers = { a, b -&amp;gt; a + b } addNumbers(-7, 15) // returns 8 Fechamento com destino personalizado para chamadas de método com receptor implícito # class MyHello { def sayHello() { &amp;quot;Hello, world&amp;quot; } } def cl = { sayHello() } cl() // groovy.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/pt/groovy/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/json/</guid>
      <description>Analisar uma string json # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() def obj = jsonSlurper.parseText(&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [1] }&#39;) assert obj.foo == &#39;bar&#39; assert obj.baz == [1] Impressão bonita de uma string json # import groovy.json.JsonOutput; def json = JsonOutput.toJson([foo: &#39;bar&#39;, baz: [1]]) assert json == &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;,&amp;quot;baz&amp;quot;:[1]}&#39; def pretty = JsonOutput.prettyPrint(json) assert pretty == &#39;&#39;&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [ 1 ] }&#39;&#39;&#39; Analisar um arquivo json # import groovy.</description>
    </item>
    
    <item>
      <title>Operador de Spread</title>
      <link>https://www.wikiod.com/pt/groovy/operador-de-spread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/operador-de-spread/</guid>
      <description>Na maioria dos casos, o operador spread *. é idêntico a chamar .collect { it.________ }.
def animals = [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;] assert animals*.length() == animals.collect { it.length() } Mas se o sujeito for nulo, eles se comportam de maneira diferente:
def animals = null assert animals*.length() == null assert animals.collect { it.length() } == [] Acessando uma propriedade # class Vector { double x double y } def points = [ new Vector(x: 10, y: -5), new Vector(x: -17.</description>
    </item>
    
    <item>
      <title>Operador de nave espacial</title>
      <link>https://www.wikiod.com/pt/groovy/operador-de-nave-espacial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/operador-de-nave-espacial/</guid>
      <description>Operador de nave espacial para classificações personalizadas # class User { String name int age } def users = [ new User(name: &amp;quot;Bob&amp;quot;, age: 20), new User(name: &amp;quot;Tom&amp;quot;, age: 50), new User(name: &amp;quot;Bill&amp;quot;, age: 45) ] // sort by age users.sort { a, b -&amp;gt; a.age &amp;lt;=&amp;gt; b.age } Uso básico # o operador nave espacial retorna -1 quando o operador esquerdo é menor, 0 quando os operadores são iguais e 1 caso contrário:</description>
    </item>
    
    <item>
      <title>Operadores de cobrança</title>
      <link>https://www.wikiod.com/pt/groovy/operadores-de-cobranca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/operadores-de-cobranca/</guid>
      <description>Iterar sobre uma coleção # Listas # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // using implicit argument lst.each { println it } // using explicit argument lst.each { val -&amp;gt; println val } // both print: // foo // bar // baz Iterar com índice # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // explicit arguments are required lst.eachWithIndex { val, idx -&amp;gt; println &amp;quot;$val in position $idx&amp;quot; }​​​​​​​​​​​​​​ // prints: // foo in position 0 // bar in position 1 // baz in position 2 Mapas # def map = [foo: &#39;FOO&#39;, bar: &#39;BAR&#39;, baz: &#39;BAZ&#39;] // using implicit argument map.</description>
    </item>
    
    <item>
      <title>RESTCliente</title>
      <link>https://www.wikiod.com/pt/groovy/restcliente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/groovy/restcliente/</guid>
      <description>Uso, exemplos e armadilhas do cliente HTTP do Groovy.
Solicitação GET # @Grab(group=&#39;org.codehaus.groovy.modules.http-builder&#39;, module=&#39;http-builder&#39;, version=&#39;0.7&#39; ) import groovyx.net.http.RESTClient try { def restClient = new RESTClient(&amp;quot;http://weathers.co&amp;quot;) def response = restClient.get(path: &#39;/api.php&#39;, query: [&#39;city&#39;: &#39;Prague&#39;]) println &amp;quot;Status : ${response.status}&amp;quot; println &amp;quot;Body : ${response.data.text}&amp;quot; } catch (Exception e) { println &amp;quot;Error : ${e.statusCode}&amp;quot; println &amp;quot;Message : ${e.response.data}&amp;quot; } </description>
    </item>
    
  </channel>
</rss>

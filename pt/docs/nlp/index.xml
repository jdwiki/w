<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial nlp on </title>
    <link>https://www.wikiod.com/pt/docs/nlp/</link>
    <description>Recent content in tutorial nlp on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com nlp</title>
      <link>https://www.wikiod.com/pt/nlp/comecando-com-nlp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nlp/comecando-com-nlp/</guid>
      <description>Stanford CoreNLP # Stanford CoreNLP é um popular kit de ferramentas de processamento de linguagem natural que suporta muitas tarefas principais de NLP.
Para baixar e instalar o programa, baixe um pacote de lançamento e inclua os arquivos *.jar necessários em seu classpath, ou adicione a dependência do Maven central. Veja a página de download para mais detalhes. Por exemplo:
curl http://nlp.stanford.edu/software/stanford-corenlp-full-2015-12-09.zip -o corenlp.zip unzip corenlp.zip cd corenlp export CLASSPATH=&amp;quot;$CLASSPATH:`pwd`/* Existem três maneiras suportadas de executar as ferramentas CoreNLP: (1) usando a API base totalmente personalizável, (2) usando o Simple CoreNLP ou (3) usando o servidor CoreNLP.</description>
    </item>
    
    <item>
      <title>Detecção de limite de sentença em Python</title>
      <link>https://www.wikiod.com/pt/nlp/deteccao-de-limite-de-sentenca-em-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nlp/deteccao-de-limite-de-sentenca-em-python/</guid>
      <description>Com Stanford CoreNLP, do Python # Primeiro você precisa executar um servidor Stanford CoreNLP:
java -mx4g -cp &amp;quot;*&amp;quot; edu.stanford.nlp.pipeline.StanfordCoreNLPServer -port 9000 -timeout 50000 Aqui está um trecho de código mostrando como passar dados para o servidor Stanford CoreNLP, usando o pacote Python pycorenlp.
from pycorenlp import StanfordCoreNLP import pprint if __name__ == &#39;__main__&#39;: nlp = StanfordCoreNLP(&#39;http://localhost:9000&#39;) fp = open(&amp;quot;long_text.txt&amp;quot;) text = fp.read() output = nlp.annotate(text, properties={ &#39;annotators&#39;: &#39;tokenize,ssplit,pos,depparse,parse&#39;, &#39;outputFormat&#39;: &#39;json&#39; }) pp = pprint.</description>
    </item>
    
    <item>
      <title>OpenNLP</title>
      <link>https://www.wikiod.com/pt/nlp/opennlp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nlp/opennlp/</guid>
      <description>Sintaxe # opennlp SentenceDetector ./en-sent.bin &amp;lt; ./input.txt &amp;gt; output.txt
Inicialize SentenceDetectorME assim: SentenceDetectorME fraseDetector = new SentenceDetectorME(model);
Use o método &amp;lsquo;sentDetect&amp;rsquo; para obter frases como esta: String frases[] = fraseDetector.sentDetect(&amp;ldquo;string of information&amp;rdquo;);
baixe modelos (como en-sent.bin) do seguinte link
Detecção de sentença usando openNLP usando CLI e API Java # usando CLI:
$ opennlp SentenceDetector ./en-sent.bin &amp;lt; ./input.txt &amp;gt; output.txt usando API:
import static java.nio.file.Files.readAllBytes; import static java.nio.file.Paths.get; import java.io.IOException; import java.</description>
    </item>
    
    <item>
      <title>N-GRAMAS</title>
      <link>https://www.wikiod.com/pt/nlp/n-gramas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/nlp/n-gramas/</guid>
      <description>N-GRAMs são modelos estatísticos que preveem a próxima palavra na frase usando as n-1 palavras anteriores. Esse tipo de modelo estatístico que usa sequências de palavras também é chamado de Modelos de Linguagem. Por exemplo, temos uma frase &amp;ldquo;Não consigo ler sem ler _____&amp;rdquo;, podemos dizer que a próxima palavra mais provável seria &amp;ldquo;óculos&amp;rdquo;. O N-GRAMS prevê a próxima palavra na sequência usando a probabilidade condicional da próxima palavra. O modelo N-GRAM é muito essencial no processamento de fala e linguagem.</description>
    </item>
    
  </channel>
</rss>

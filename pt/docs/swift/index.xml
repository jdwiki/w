<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Swift on </title>
    <link>https://www.wikiod.com/pt/docs/swift/</link>
    <description>Recent content in Tutorial de linguagem Swift on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com a linguagem Swift</title>
      <link>https://www.wikiod.com/pt/swift/comecando-com-a-linguagem-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/comecando-com-a-linguagem-swift/</guid>
      <description>Seu primeiro programa Swift # Escreva seu código em um arquivo chamado hello.swift:
print(&amp;quot;Hello, world!&amp;quot;) Para compilar e executar um script em uma única etapa, use swift do terminal (em um diretório onde este arquivo está localizado): Para iniciar um terminal, pressione CTRL+ALT+T no Linux, ou encontre-o no Launchpad no macOS. Para alterar o diretório, digite cddirectory_name (ou cd .. para voltar)
$ rápido olá.rápido Olá, mundo! Um compilador é um programa de computador (ou um conjunto de programas) que transforma o código-fonte escrito em uma linguagem de programação (a linguagem de origem) em outra linguagem de computador (a linguagem de destino), sendo que esta última geralmente tem uma forma binária conhecido como código objeto.</description>
    </item>
    
    <item>
      <title>Strings e Personagens</title>
      <link>https://www.wikiod.com/pt/swift/strings-e-personagens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/strings-e-personagens/</guid>
      <description>Sintaxe # String.characters // Retorna um Array dos caracteres na String String.characters.count // Retorna o número de caracteres String.utf8 // Um ​​String.UTF8View, retorna os pontos de caractere UTF-8 na String String.utf16 // Um ​​String.UTF16View, retorna os pontos de caractere UTF-16 na String String.unicodeScalars // Um ​​String.UnicodeScalarView, retorna os pontos de caractere UTF-32 na String String.isEmpty // Retorna true se a String não contiver nenhum texto String.hasPrefix(String) // Retorna true se a String for prefixada com o argumento String.</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://www.wikiod.com/pt/swift/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/enums/</guid>
      <description>Como structs e diferentemente de classes, enums são tipos de valor e são copiados em vez de referenciados quando passados.
Para obter mais informações sobre enums, consulte The Swift Programming Language.
Enumerações básicas # Um enum fornece um conjunto de valores relacionados:
enum Direction { case up case down case left case right } enum Direction { case up, down, left, right } Os valores de enumeração podem ser usados ​​por seu nome totalmente qualificado, mas você pode omitir o nome do tipo quando puder ser inferido:</description>
    </item>
    
    <item>
      <title>Lendo e escrevendo JSON</title>
      <link>https://www.wikiod.com/pt/swift/lendo-e-escrevendo-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/lendo-e-escrevendo-json/</guid>
      <description>Sintaxe # NSJSONSerialization.JSONObjectWithData(jsonData, options: NSJSONReadingOptions) // Retorna um objeto de jsonData. Este método lança em caso de falha. NSJSONSerialization.dataWithJSONObject(jsonObject, options: NSJSONWritingOptions) // Retorna NSData de um objeto JSON. Passe NSJSONWritingOptions.PrettyPrinted nas opções para uma saída mais legível. Serialização, codificação e decodificação JSON com a Apple Foundation e a Swift Standard Library # A classe JSONSerialization é incorporada à estrutura Foundation da Apple.
Leia JSON # A função JSONObjectWithData recebe NSData e retorna AnyObject.</description>
    </item>
    
    <item>
      <title>Criptografia AES</title>
      <link>https://www.wikiod.com/pt/swift/criptografia-aes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/criptografia-aes/</guid>
      <description>Criptografia AES no modo CBC com IV aleatório (Swift 3.0) # O iv é prefixado para os dados criptografados
aesCBC128Encrypt criará um IV aleatório e prefixado para o código criptografado. aesCBC128Decrypt usará o prefixo IV durante a descriptografia.
As entradas são os dados e a chave são os objetos de dados. Se um formulário codificado, como Base64, se necessário, converter para e/ou de no método de chamada.
A chave deve ter exatamente 128 bits (16 bytes), 192 bits (24 bytes) ou 256 bits (32 bytes) de comprimento.</description>
    </item>
    
    <item>
      <title>Reflexão</title>
      <link>https://www.wikiod.com/pt/swift/reflexao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/reflexao/</guid>
      <description>Sintaxe # Mirror(reflecting: instance) // Inicializa um espelho com o assunto a ser refletido mirror.displayStyle // Estilo de exibição usado para playgrounds Xcode mirror.description // Representação textual desta instância, consulte CustomStringConvertible mirror.subjectType // Retorna o tipo do assunto que está sendo refletido mirror.superclassMirror // Retorna o espelho da superclasse do objeto refletido Observações Gerais: Um Mirror é uma struct usada na introspecção de um objeto em Swift. Sua propriedade mais proeminente é o array children.</description>
    </item>
    
    <item>
      <title>Protocolos</title>
      <link>https://www.wikiod.com/pt/swift/protocolos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/protocolos/</guid>
      <description>Os protocolos são uma maneira de especificar como usar um objeto. Eles descrevem um conjunto de propriedades e métodos que uma classe, estrutura ou enumeração deve fornecer, embora os protocolos não imponham restrições à implementação.
Um protocolo Swift é uma coleção de requisitos que os tipos em conformidade devem implementar. O protocolo pode então ser usado na maioria dos lugares onde um tipo é esperado, por exemplo, Arrays e requisitos genéricos.</description>
    </item>
    
    <item>
      <title>Opcionais</title>
      <link>https://www.wikiod.com/pt/swift/opcionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/opcionais/</guid>
      <description>“Um valor opcional contém um valor ou contém nil para indicar que um valor está faltando”
Trecho de: Apple Inc. “The Swift Programming Language (Swift 3.1 Edition).” iBooks. https://itun.es/us/k5SW7.l
Os casos de uso opcionais básicos incluem: para uma constante (let), o uso de um opcional dentro de um loop (if-let), o desempacotamento seguro de um valor opcional dentro de um método (guard-let) e como parte de loops de comutação (case-let ), padronizando para um valor se nil, usando o operador coalesce (?</description>
    </item>
    
    <item>
      <title>Método Swizzling</title>
      <link>https://www.wikiod.com/pt/swift/metodo-swizzling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/metodo-swizzling/</guid>
      <description>Ao usar o método swizzling no Swift, há dois requisitos que suas classes/métodos devem cumprir:
Sua classe deve estender NSObject As funções que você deseja swizzle devem ter o atributo dynamic Para uma explicação completa de por que isso é necessário, confira Usando Swift com Cocoa e Objective-C:
Exigindo Despacho Dinâmico
Enquanto o atributo @objc expõe sua API Swift ao Objective-C runtime, não garante o despacho dinâmico de uma propriedade, método, subscrito ou inicializador.</description>
    </item>
    
    <item>
      <title>Fechamentos</title>
      <link>https://www.wikiod.com/pt/swift/fechamentos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swift/fechamentos/</guid>
      <description>Sintaxe # var closureVar: (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) // Como uma variável ou tipo de propriedade typealias ClosureType = (&amp;lt;parâmetros&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) { [&amp;lt;captureList&amp;gt;] (&amp;lt;parameters&amp;gt;) &amp;lt;throws-ness&amp;gt; -&amp;gt; &amp;lt;returnType&amp;gt; in &amp;lt;statements&amp;gt; } // Sintaxe de fechamento completa Para obter mais informações sobre encerramentos do Swift, consulte documentação da Apple.
Noções básicas de fechamento # Fechamentos (também conhecidos como blocos ou lambdas) são pedaços de código que podem ser armazenados e repassados ​​dentro do seu programa.</description>
    </item>
    
  </channel>
</rss>

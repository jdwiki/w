<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial java-ee on </title>
    <link>https://www.wikiod.com/pt/docs/java-ee/</link>
    <description>Recent content in tutorial java-ee on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/java-ee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com java-ee</title>
      <link>https://www.wikiod.com/pt/java-ee/comecando-com-java-ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/comecando-com-java-ee/</guid>
      <description>O que é Java EE? # Java EE significa Java Enterprise Edition. Java EE estende o Java SE (que significa Java Standard Edition). Java EE é um conjunto de tecnologias e especificações relacionadas que são orientadas para o desenvolvimento de aplicativos corporativos de grande escala. Java EE é desenvolvido em um processo orientado pela comunidade. Até agora, as seguintes versões do Java EE foram lançadas:
J2EE 1.2 (12 de dezembro de 1999) J2EE 1.</description>
    </item>
    
    <item>
      <title>Java RESTful Web Services (JAX-RS)</title>
      <link>https://www.wikiod.com/pt/java-ee/java-restful-web-services-jax-rs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/java-restful-web-services-jax-rs/</guid>
      <description>Ao contrário do SOAP e do WS-stack, que são especificados como padrões W3C, o REST é realmente um conjunto de princípios para projetar e usar uma interface baseada na web. Os aplicativos REST / RESTful dependem muito de outros padrões:
HTTP URI, URL XML, JSON, HTML, GIF, JPEG, and so forth (resource representations) A função do JAX-RS (Java API for RESTful Web Services) é fornecer APIs que suportem a construção de serviços RESTful.</description>
    </item>
    
    <item>
      <title>Serviço de mensagens Java (JMS)</title>
      <link>https://www.wikiod.com/pt/java-ee/servico-de-mensagens-java-jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/servico-de-mensagens-java-jms/</guid>
      <description>O Java Message Service é uma API Java que permite que aplicativos criem, enviem, recebam e leiam mensagens. A API JMS define um conjunto comum de interfaces e semânticas associadas que permitem que programas escritos na linguagem de programação Java se comuniquem com outras implementações de mensagens. O JMS permite a comunicação não apenas fracamente acoplada, mas também assíncrona e confiável.
O Java Message Service (JMS) é uma API Java padrão que permite que os aplicativos criem, enviem, recebam e leiam mensagens de forma assíncrona.</description>
    </item>
    
    <item>
      <title>A API Javamail</title>
      <link>https://www.wikiod.com/pt/java-ee/a-api-javamail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/a-api-javamail/</guid>
      <description>A página JavaMail no site da Oracle o descreve da seguinte forma
A API JavaMail fornece uma estrutura independente de plataforma e protocolo para criar aplicativos de correio e mensagens. A API JavaMail está disponível como um pacote opcional para uso com a plataforma Java SE e também está incluída na plataforma Java EE.
O site principal do projeto JavaMail agora está em java.net. A partir daí você pode encontrar os javadocs para muitas versões das APIs, links para os repositórios de código fonte, links para downloads, exemplos e dicas para usar JavaMail com alguns provedores de serviços de e-mail populares.</description>
    </item>
    
    <item>
      <title>A API WebSockets</title>
      <link>https://www.wikiod.com/pt/java-ee/a-api-websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/a-api-websockets/</guid>
      <description>WebSocket é um protocolo que permite a comunicação entre o cliente e o servidor/endpoint usando uma única conexão TCP.
O WebSocket foi projetado para ser implementado em navegadores e servidores da Web, mas pode ser usado por qualquer aplicativo cliente ou servidor.
Este tópico sobre as APIs Java para websockets que foram desenvolvidas por JSR 356 e incorporadas às especificações Java EE 7.
Criando uma comunicação WebSocket # Codificadores e Decodificadores: WebSockets Orientados a Objetos # Graças aos codificadores e decodificadores, o JSR 356 oferece modelos de comunicação orientados a objetos.</description>
    </item>
    
    <item>
      <title>Arquitetura do conector Java (JCA)</title>
      <link>https://www.wikiod.com/pt/java-ee/arquitetura-do-conector-java-jca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/java-ee/arquitetura-do-conector-java-jca/</guid>
      <description>Vamos esclarecer algumas terminologias primeiro:
Outbound Messaging é onde a mensagem começa a partir do servidor (para ser mais preciso, é iniciada a partir de seu aplicativo que você tem no servidor, WebSphere Liberty neste caso) e termina no EIS. Inbound Messaging é onde a mensagem começa no EIS e termina no servidor. Message Endpoint em geral o local onde a mensagem acaba ficando/recebida em um estágio específico de seu ciclo de vida.</description>
    </item>
    
  </channel>
</rss>

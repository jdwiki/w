<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial iOS on </title>
    <link>https://www.wikiod.com/pt/docs/ios/</link>
    <description>Recent content in Tutorial iOS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao iOS</title>
      <link>https://www.wikiod.com/pt/ios/introducao-ao-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/introducao-ao-ios/</guid>
      <description>Criando um aplicativo de exibição única padrão # Para desenvolver um aplicativo para iOS, você deve começar com um aplicativo chamado Xcode. Existem outras ferramentas alternativas que você pode usar, mas o Xcode é a ferramenta oficial da Apple. Observe, no entanto, que ele é executado apenas no macOS. A versão oficial mais recente é o Xcode 8.3.3 com o Xcode 9 (atualmente em beta) que deve ser lançado ainda este ano.</description>
    </item>
    
    <item>
      <title>UIViews personalizados de arquivos XIB</title>
      <link>https://www.wikiod.com/pt/ios/uiviews-personalizados-de-arquivos-xib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uiviews-personalizados-de-arquivos-xib/</guid>
      <description>Da Apple: Criando uma visualização personalizada que renderiza no Interface Builder
• Nota: Tenha em mente que se você usar fontes &amp;lsquo;personalizadas&amp;rsquo; sofisticadas em seus elementos XIB (como UILabel, UITextField etc), então o tempo de carregamento inicial de seu XIB será maior dependendo da fonte escolhida e da versão do sistema.
Elementos de fiação # Criar um arquivo XIB
Barra de menus do Xcode &amp;gt; Arquivo &amp;gt; Novo &amp;gt; Arquivo. Selecione iOS, Interface do usuário e depois &amp;ldquo;Visualizar&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>UILabel</title>
      <link>https://www.wikiod.com/pt/ios/uilabel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uilabel/</guid>
      <description>A classe UILabel implementa uma exibição de texto somente leitura. Você pode usar essa classe para desenhar uma ou várias linhas de texto estático, como aquelas que você pode usar para identificar outras partes da interface do usuário. A classe base UILabel fornece suporte para estilos simples e complexos do texto do rótulo. Você também pode controlar aspectos da aparência, como se o rótulo usa uma sombra ou desenha com realce.</description>
    </item>
    
    <item>
      <title>Passando dados entre controladores de exibição</title>
      <link>https://www.wikiod.com/pt/ios/passando-dados-entre-controladores-de-exibicao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/passando-dados-entre-controladores-de-exibicao/</guid>
      <description>Usando o padrão de delegado (passando dados de volta) # Para passar dados do controlador de exibição atual de volta para o controlador de exibição anterior, você pode usar o padrão delegado.
Este exemplo assume que você fez um segue no Interface Builder e que você definiu o identificador do segue como showSecondViewController. As saídas e ações também devem ser vinculadas aos nomes no código a seguir.
Controlador de primeira visualização</description>
    </item>
    
    <item>
      <title>Layout automático</title>
      <link>https://www.wikiod.com/pt/ios/layout-automatico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/layout-automatico/</guid>
      <description>O Layout automático calcula dinamicamente o tamanho e a posição de todas as visualizações em sua hierarquia de visualizações, com base nas restrições colocadas nessas visualizações. Fonte
Sintaxe # NSLayoutConstraint(item: Any, attribute: NSLayoutAttribute, relatedBy: NSLayoutRelation, toItem: Any?, attribute: NSLayoutAttribute, multiplicador: CGFloat, constant: CGFloat) // Cria uma restrição programaticamente Espaço visualiza uniformemente # É comum querer que duas visualizações fiquem lado a lado, centralizadas em sua supervisão. A resposta comum dada no Stack Overflow é incorporar essas duas visualizações em um UIView e centralizar o UIView.</description>
    </item>
    
    <item>
      <title>UIalertController</title>
      <link>https://www.wikiod.com/pt/ios/uialertcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uialertcontroller/</guid>
      <description>Um objeto UIAlertController exibe uma mensagem de alerta para o usuário. Esta classe substitui as classes UIActionSheet e UIAlertView para exibir alertas. Depois de configurar o controlador de alerta com o ações e estilo que você deseja, apresente-o usando o método presentViewController:animated:completion:.
Da Documentação da Apple
UIAlertController em Swift
AlertViews com UIAlertController # UIAlertView e UIActionSheet estão obsoletos no iOS 8 e posterior. Então a Apple introduziu um novo controlador para AlertView e ActionSheet chamado UIAlertController , alterando o preferredStyle, você pode alternar entre AlertView e ActionSheet.</description>
    </item>
    
    <item>
      <title>UILocalNotification</title>
      <link>https://www.wikiod.com/pt/ios/uilocalnotification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uilocalnotification/</guid>
      <description>As notificações locais permitem que seu aplicativo notifique o usuário sobre o conteúdo que não requer o uso de um servidor.
Ao contrário das notificações remotas que são acionadas a partir de um servidor, as notificações locais são agendadas e acionadas dentro de um aplicativo. As notificações em geral são direcionadas para aumentar a interação do usuário com o aplicativo, convidando ou tentando o usuário a abrir e interagir com ele.</description>
    </item>
    
    <item>
      <title>Notificações via push</title>
      <link>https://www.wikiod.com/pt/ios/notificacoes-via-push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/notificacoes-via-push/</guid>
      <description>Sintaxe # UIUserNotificationSettings.types: UIUserNotificationType // Uma máscara de bits dos tipos de notificação que seu aplicativo tem permissão para usar UIUserNotificationSettings.categories: Set // Grupos de ações registrados do aplicativo Parâmetros # Parâmetro Descrição userInfo Um dicionário que contém informações de notificação remota, possivelmente incluindo um número de crachá para o ícone do aplicativo, som de alerta, mensagem de alerta, um identificador de notificação e dados personalizados. Registrando dispositivo para notificações push # Para registrar seu dispositivo para notificações push, adicione o seguinte código ao seu arquivo AppDelegate no método didFinishLaunchingWithOptions:</description>
    </item>
    
    <item>
      <title>UIColor</title>
      <link>https://www.wikiod.com/pt/ios/uicolor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uicolor/</guid>
      <description>Criando uma UIColor # Há muitas maneiras de criar um UIColor:
Rápido
Usando uma das cores predefinidas:
let redColor = UIColor.redColor() let blueColor: UIColor = .blueColor() // In Swift 3, the &amp;quot;Color()&amp;quot; suffix is removed: let redColor = UIColor.red let blueColor: UIColor = .blue Se o compilador já sabe que a variável é uma instância de UIColor você pode pular o tipo todos juntos:
let view = UIView() view.backgroundColor = .</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://www.wikiod.com/pt/ios/uitableview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ios/uitableview/</guid>
      <description>Uma visão simples, amplamente usada, mas muito poderosa, que pode apresentar dados em um formulário de lista usando linhas e uma única coluna. Os usuários podem rolar verticalmente pelos itens em uma visualização de tabela e, opcionalmente, manipular e selecionar o conteúdo.
Sintaxe # - (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section;
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section;
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)seção;
- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)seção;
- (UITableViewCellAccessoryType)tableView:(UITableView *)tableView acessórioTypeForRowWithIndexPath:(NSIndexPath *)indexPath</description>
    </item>
    
  </channel>
</rss>

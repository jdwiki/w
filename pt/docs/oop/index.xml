<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oop tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/oop/</link>
    <description>Recent content in oop tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com oop</title>
      <link>https://www.wikiod.com/pt/oop/comecando-com-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/comecando-com-oop/</guid>
      <description>Introdução OOP # #Introdução A Programação Orientada a Objetos (principalmente conhecida como OOP) é ​​um paradigma de programação para resolver problemas.
A beleza de um programa OO (orientado a objetos) é que pensamos no programa como um monte de objetos se comunicando entre si, em vez de um script sequencial seguindo ordens específicas.
Existem muitas linguagens de programação que suportam OOP, algumas das mais populares são:
-Java
C++ c# O Python também é conhecido por oferecer suporte a OOP, mas não possui algumas propriedades.</description>
    </item>
    
    <item>
      <title>Encapsulamento</title>
      <link>https://www.wikiod.com/pt/oop/encapsulamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/encapsulamento/</guid>
      <description>Ocultação de informações # O estado de um objeto em um determinado momento é representado pelas informações que ele contém naquele ponto. Em uma linguagem OO, o estado é implementado como variáveis ​​de membro.
Em um objeto projetado adequadamente, o estado pode ser alterado apenas por meio de chamadas a seus métodos e não por manipulação direta de suas variáveis ​​de membro. Isso é obtido fornecendo métodos públicos que operam nos valores de variáveis ​​de membros privados.</description>
    </item>
    
    <item>
      <title>Herança</title>
      <link>https://www.wikiod.com/pt/oop/heranca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/heranca/</guid>
      <description>Nota: A herança multinível é permitida em Java, mas não a herança múltipla. Saiba mais em http://beginnersbook.com/2013/04/oops-concepts/
Herança - Definição # A herança é um dos principais conceitos em Programação Orientada a Objetos (OOP). Usando herança, podemos modelar um problema corretamente e podemos reduzir o número de linhas que temos que escrever. Vamos ver a herança usando um exemplo popular.
Considere que você tem que modelar o reino animal (Reino animal simplificado, é claro.</description>
    </item>
    
    <item>
      <title>Problema de diamante</title>
      <link>https://www.wikiod.com/pt/oop/problema-de-diamante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/problema-de-diamante/</guid>
      <description>Problema do Diamante - Exemplo # O problema do diamante é um problema comum ocorrido em Programação Orientada a Objetos, ao usar múltipla herança.
Considere o caso em que a classe C é herdada da classe A e da classe B. Suponha que tanto class A quanto class B tenham um método chamado foo().
Então, quando estamos chamando o método foo(), o compilador não consegue identificar o método exato que estamos tentando usar</description>
    </item>
    
    <item>
      <title>Polimorfismo</title>
      <link>https://www.wikiod.com/pt/oop/polimorfismo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/polimorfismo/</guid>
      <description>Sobreposição de método # A substituição de método é a maneira de usar o polimorfismo entre as classes. se uma classe é herdada de outra, a primeira (subclasse) pode substituir os métodos da última (superclasse) e alterar a implementação.
isso é usado onde a superclasse define a implementação mais geral do método enquanto a subclasse usa uma mais específica.
Considere o seguinte exemplo:
Temos uma classe para Mamíferos:
class Mammal { void whoIam () { System.</description>
    </item>
    
    <item>
      <title>Abstração</title>
      <link>https://www.wikiod.com/pt/oop/abstracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/abstracao/</guid>
      <description>Modificadores de acesso # Modificadores de acesso são usados ​​para controlar o acesso a um objeto ou a uma função/método. Esta é uma parte principal do conceito de Abstração.
Diferentes linguagens de programação usam modificadores de acesso diferentes. aqui estão alguns exemplos:
Java
Java has 4 access modifiers.
private - These attributes can be accessed only inside the class. protected - These attributes can be accessed by sub classes and classes from the same package.</description>
    </item>
    
    <item>
      <title>Objeto</title>
      <link>https://www.wikiod.com/pt/oop/objeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/objeto/</guid>
      <description>Introdução # Object é o módulo base na Object Oriented Programming (OOP). Um objeto pode ser uma variável, uma estrutura de dados (como um array, mapa, etc), ou até mesmo uma função ou método. Na OOP, modelamos objetos do mundo real como animais, veículos, etc.
Um objeto pode ser definido em uma classe, que pode ser definida como o projeto do objeto. Então podemos criar instâncias dessa classe, que chamamos de objetos.</description>
    </item>
    
    <item>
      <title>Classe</title>
      <link>https://www.wikiod.com/pt/oop/classe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/oop/classe/</guid>
      <description>Introdução # Classe é o pedaço de código onde definimos os atributos e/ou comportamentos de um objeto. Você pode definir variáveis, constantes, métodos e construtores para o objeto, dentro da classe. Em outras palavras, classe é o projeto de um objeto.
Vamos ver uma classe de exemplo em Java, que define um carro (simples):
public class Car { private Engine engine; private Body body; private Tire [] tire; private Interior interior; // Constructor public Car (Engine engine, Body body, Tire[] tires, Interior interior) { } // Another constructor public Car () { } public void drive(Direction d) { // Method to drive } public void start(Key key) { // Start } } Isto é apenas para um exemplo.</description>
    </item>
    
  </channel>
</rss>

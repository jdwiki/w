<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>itext Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/itext/</link>
    <description>Recent content in itext Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/itext/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao itext</title>
      <link>https://www.wikiod.com/pt/itext/introducao-ao-itext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/introducao-ao-itext/</guid>
      <description>Olá Mundo # Este é um programa muito simples para criar um PDF usando iText 7 / Java:
//Initialize writer PdfWriter writer = new PdfWriter(dest); //Initialize document PdfDocument pdfDoc = new PdfDocument(writer); Document doc = new Document(pdfDoc); //Add paragraph to the document doc.add(new Paragraph(&amp;quot;Hello World!&amp;quot;)); //Close document doc.close(); (Listing_01_01_HelloWorld.java)
Você pode navegar para muitos outros exemplos dessa página.
E este é um programa muito simples para criar um PDF usando o precursor iText 5.</description>
    </item>
    
    <item>
      <title>Texto para PDF iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/texto-para-pdf-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/texto-para-pdf-itext-5-versus-itext-7/</guid>
      <description>O código para converter um arquivo de texto simples em um documento PDF é bastante simples se você usar o iText 5 ou o iText 7. No iText 7, você tem a vantagem de poder definir o alinhamento no nível do documento. No iText 5, você deve definir o alinhamento para cada objeto Parágrafo separado.
Para entender a real diferença entre o iText 5 e o iText 7 neste par de exemplos, temos que dar uma olhada no PDF resultante.</description>
    </item>
    
    <item>
      <title>Tabelas iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/tabelas-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/tabelas-itext-5-versus-itext-7/</guid>
      <description>Os nomes das classes do iText 5 PdfPTable e PdfPCell foram escolhidos porque já tínhamos classes chamadas Table e Cell para criar objetos de tabela e célula no mais alto nível de programação. Havia também uma classe chamada PdfTable para ser usada pelo iText internamente. Essas classes tinham muitas falhas e foram preteridas em favor de PdfPTable e PdfPCell. Eles foram removidos há muito tempo.
Ao longo dos anos, PdfPTable e PdfPCell também receberam algumas críticas dos usuários.</description>
    </item>
    
    <item>
      <title>Criação de PDF iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/criacao-de-pdf-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/criacao-de-pdf-itext-5-versus-itext-7/</guid>
      <description>No design original do iText, era possível criar um objeto Document de alto nível, e então ter diferentes objetos DocListener escutando aquele objeto Document. Isso foi conseguido usando diferentes escritores: um PdfWriter, um HTMLWriter e um RtfWriter. Ao usar um PdfWriter, um PdfDocument foi criado internamente. Essa classe de baixo nível cuidou de todas as estruturas relacionadas a PDF. Mais ou menos o mesmo aconteceu com os outros formatos.
Ao longo dos anos, o iText se especializou e se tornou uma biblioteca de PDF pura.</description>
    </item>
    
    <item>
      <title>Formulários iText 5 vs iText 7</title>
      <link>https://www.wikiod.com/pt/itext/formularios-itext-5-vs-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/formularios-itext-5-vs-itext-7/</guid>
      <description>iText 5 é uma biblioteca que cresceu organicamente. Muitos desenvolvedores contribuíram com código. Por exemplo: um desenvolvedor contribuiu com código para criar campos de formulário do zero, usando classes como TextField e PdfFormField; outro desenvolvedor contribuiu com código para alterar os campos de formulário existentes, usando a classe AcroField e uma série de métodos setFieldProperty().
No iText 5, as classes usadas para criar campos de formulário não podem ser usadas para alterar campos de formulário e vice-versa.</description>
    </item>
    
    <item>
      <title>Fontes iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/fontes-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/fontes-itext-5-versus-itext-7/</guid>
      <description>Nas primeiras versões do iText, havia apenas uma classe de fonte: Font.
Com esta fonte, você pode criar um objeto Font para quatorze fontes de cinco famílias de fontes: Helvetica (regular, negrito, oblíquo, negrito-oblíquo), Times Roman (regular, negrito, itálico, negrito-itálico), Courier (regular , bold, oblique, bold-oblique), Symbol e Zapf Dingbats.
Tal objeto Font foi criado assim:
Font font = new Font(FontFamily.TIMES_ROMAN); Você também teve que definir o tamanho da fonte, por exemplo:</description>
    </item>
    
    <item>
      <title>Estilos iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/estilos-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/estilos-itext-5-versus-itext-7/</guid>
      <description>Criar um documento no qual você tem que alternar entre estilos freqüentemente tende a ser tedioso no iText 5. Você precisa criar muitos objetos Chunk e você sempre tem que fazer uma troca entre aplicar os estilos diretamente a cada novo `` Chunkou criando um método auxiliar que cria oChunk` para você.
O que corrigimos no iText 7:
Agora é possível encadear métodos. Os métodos setFont(), setFontSize(), addStyle() e outros métodos retornam o objeto no qual são invocados.</description>
    </item>
    
    <item>
      <title>Eventos de página (iText 5) versus manipuladores de eventos e renderizadores (iText 7)</title>
      <link>https://www.wikiod.com/pt/itext/eventos-de-pagina-itext-5-versus-manipuladores-de-eventos-e-renderizadores-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/eventos-de-pagina-itext-5-versus-manipuladores-de-eventos-e-renderizadores-itext-7/</guid>
      <description>No iText 5, introduzimos o conceito de eventos de página para permitir que os desenvolvedores adicionem um comportamento específico quando um documento é aberto, quando uma nova página é aberta, quando uma página termina e quando um documento é fechado.
Na documentação, deixamos bem claro que era proibido adicionar conteúdo no método onStartPage(); conteúdo só pode ser adicionado no método onEndPage(). Também deixamos bem claro que o objeto Document passado para os métodos de evento de página foi passado apenas para fins somente leitura.</description>
    </item>
    
    <item>
      <title>Colunas iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/pt/itext/colunas-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/colunas-itext-5-versus-itext-7/</guid>
      <description>No iText 5, você não pode usar o método add() para adicionar um Parágrafo a um Documento se quiser organizar o conteúdo em colunas. Não podemos reutilizar o código do exemplo https://www.wikiod.com/pt/itext/texto-para-pdf-itext-5-versus-itext-7#Text2Pdf.java (iText 5)
Em vez disso, temos que criar um objeto ColumnText, temos que adicionar todos os objetos Paragraph a este objeto e, quando terminarmos de adicionar todo o conteúdo, podemos começar a renderizar esse conteúdo usando o método go() .</description>
    </item>
    
    <item>
      <title>Perguntas e respostas sobre as versões</title>
      <link>https://www.wikiod.com/pt/itext/perguntas-e-respostas-sobre-as-versoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/itext/perguntas-e-respostas-sobre-as-versoes/</guid>
      <description>Algumas perguntas frequentes sobre os números de versão no iText.
Por que os números de versão saltam de 2 para 5 e de 5 para 7? Há vários motivos para pular os números de versão. Em 2009, o número da versão do iText (Java) e do iTextSharp (C#) não estavam sincronizados. A versão Java estava na versão 2.1.7; a versão C# estava na versão 4.1.6. Foi tomada a decisão de migrar para o Java 5 para a versão Java e harmonizar os números de versão do iText e do iTextSharp.</description>
    </item>
    
  </channel>
</rss>

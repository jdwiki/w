<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial jpa on </title>
    <link>https://www.wikiod.com/pt/docs/jpa/</link>
    <description>Recent content in tutorial jpa on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com jpa</title>
      <link>https://www.wikiod.com/pt/jpa/comecando-com-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/comecando-com-jpa/</guid>
      <description>Exemplo mínimo de persistence.xml # Hibernação (e banco de dados H2 incorporado) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_1.xsd&amp;quot; version=&amp;quot;2.1&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;persistenceUnit&amp;quot;&amp;gt; &amp;lt;provider&amp;gt;org.hibernate.ejb.HibernatePersistence&amp;lt;/provider&amp;gt; &amp;lt;class&amp;gt;my.application.entities.MyEntity&amp;lt;/class&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.driver&amp;quot; value=&amp;quot;org.h2.Driver&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.url&amp;quot; value=&amp;quot;jdbc:h2:data/myDB.db&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.user&amp;quot; value=&amp;quot;sa&amp;quot; /&amp;gt; &amp;lt;!-- DDL change options --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot; value=&amp;quot;org.hibernate.dialect.H2Dialect&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.flushMode&amp;quot; value=&amp;quot;FLUSH_AUTO&amp;quot; /&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt; &amp;lt;/persistence&amp;gt; Eclipselink (e banco de dados H2 incorporado) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Mapeamento básico</title>
      <link>https://www.wikiod.com/pt/jpa/mapeamento-basico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/mapeamento-basico/</guid>
      <description>Parâmetros # Anotação Detalhes @Id Marca campo/coluna como a chave da entidade @Basic Marca o campo solicitado para mapeado como um tipo basic. Isso é aplicável a tipos primitivos e seus wrappers, String, Date e Calendar. A anotação é realmente opcional se nenhum parâmetro for fornecido, mas um bom estilo ditaria para tornar suas intenções explícitas. @Transient Campos marcados como transientes não são considerados para persistência, assim como a palavra-chave transient para serialização.</description>
    </item>
    
    <item>
      <title>Relacionamento Um para Muitos</title>
      <link>https://www.wikiod.com/pt/jpa/relacionamento-um-para-muitos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/relacionamento-um-para-muitos/</guid>
      <description>Parâmetros # Anotação Finalidade @TableGenerator Especifica o nome do gerador e o nome da tabela onde o gerador pode ser encontrado @GeneratedValue Especifica a estratégia de geração e refere-se ao nome do gerador @ManyToOne Especifica muitos para um relacionamento entre Employee e Department @OneToMany(mappedBy=&amp;ldquo;departamento&amp;rdquo;) cria um relacionamento bidirecional entre Funcionário e Departamento simplesmente referindo-se à anotação @ManyToOne na entidade Funcionário Relacionamento um para muitos # O mapeamento Um para Muitos é geralmente simplesmente uma relação bidirecional do mapeamento Muitos para Um.</description>
    </item>
    
    <item>
      <title>Estratégia de herança associada</title>
      <link>https://www.wikiod.com/pt/jpa/estrategia-de-heranca-associada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/estrategia-de-heranca-associada/</guid>
      <description>Parâmetros # Anotação Finalidade @Herança Especifica o tipo de estratégia de herança usada @DiscriminatorColumn Especifica uma coluna no banco de dados que será usada para identificar diferentes entidades com base em determinado ID atribuído a cada entidade @MappedSuperClass superclasses mapeadas não são persistentes e usadas apenas para manter o estado de suas subclasses. Geralmente classes java abstratas são marcadas com @MapperSuperClass Estratégia de herança conjunta # Um diagrama de classe de amostra com base no qual veremos a implementação do JPA.</description>
    </item>
    
    <item>
      <title>Mapeamento de um para um</title>
      <link>https://www.wikiod.com/pt/jpa/mapeamento-de-um-para-um/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/mapeamento-de-um-para-um/</guid>
      <description>Parâmetros # Anotação Finalidade @TableGenerator Especifica o nome do gerador e o nome da tabela onde o gerador pode ser encontrado @GeneratedValue Especifica a estratégia de geração e refere-se ao nome do gerador @OneToOne Especifica uma relação de um para um entre funcionário e mesa, aqui Employee é o proprietário da relação mapeadoPor Este elemento é fornecido no verso da relação. Isso permite o relacionamento bidirecional Relação um a um entre funcionário e mesa # Considere um relacionamento bidirecional de um para um entre funcionário e mesa.</description>
    </item>
    
    <item>
      <title>Relações entre entidades</title>
      <link>https://www.wikiod.com/pt/jpa/relacoes-entre-entidades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/relacoes-entre-entidades/</guid>
      <description>Fundamentos das Relações entre Entidades # Uma chave estrangeira pode ser uma ou mais colunas que fazem referência a uma chave exclusiva, geralmente a chave primária, em outra tabela.
Uma chave estrangeira e a chave pai primária a que ela faz referência devem ter o mesmo número e tipo de campos.
Chaves estrangeiras representam relacionamentos de uma coluna ou colunas em uma tabela para uma coluna ou colunas em outra tabela.</description>
    </item>
    
    <item>
      <title>Mapeamento de muitos para muitos</title>
      <link>https://www.wikiod.com/pt/jpa/mapeamento-de-muitos-para-muitos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/mapeamento-de-muitos-para-muitos/</guid>
      <description>Um mapeamento ManyToMany descreve um relacionamento entre entidades onde ambas podem estar relacionadas a mais de uma instância uma da outra, e é definido pela anotação @ManyToMany.
Ao contrário de @OneToMany onde uma coluna de chave estrangeira na tabela da entidade pode ser usada, ManyToMany requer uma tabela de junção, que mapeia as entidades entre si.
Parâmetros # Anotação Objetivo @TableGenerator Define um gerador de chave primária que pode ser referenciado por nome quando um elemento gerador é especificado para a anotação GeneratedValue @GeneratedValue Fornece a especificação de estratégias de geração para os valores das chaves primárias.</description>
    </item>
    
    <item>
      <title>Tabela por estratégia de herança de classe concreta</title>
      <link>https://www.wikiod.com/pt/jpa/tabela-por-estrategia-de-heranca-de-classe-concreta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/tabela-por-estrategia-de-heranca-de-classe-concreta/</guid>
      <description>Veículo, Veículo de Transporte e Veículo de Passageiro são abstratos classes e eles não terão tabela separada no banco de dados. Truck, Car e Bike são classes concretas, então elas serão mapeadas para tabelas correspondentes. Essas tabelas devem incluir todos os campos para classes anotadas com @MappedSuperClass porque não têm tabelas correspondentes no banco de dados. Assim, a tabela Truck terá colunas para armazenar os campos herdados TransporteVeículo e Veículo.</description>
    </item>
    
    <item>
      <title>Estratégia de herança de tabela única</title>
      <link>https://www.wikiod.com/pt/jpa/estrategia-de-heranca-de-tabela-unica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/estrategia-de-heranca-de-tabela-unica/</guid>
      <description>Parâmetros # Anotação Finalidade @Herança Especifica o tipo de estratégia de herança usada @DiscriminatorColumn Especifica uma coluna no banco de dados que será usada para identificar diferentes entidades com base em determinado ID atribuído a cada entidade @MappedSuperClass superclasses mapeadas não são persistentes e usadas apenas para manter o estado de suas subclasses. Geralmente classes java abstratas são marcadas com @MapperSuperClass @DiscriminatorValue Um valor especificado na coluna definida por @DiscriminatorColumn. Este valor ajuda a identificar o tipo de entidade A vantagem da estratégia de tabela única é que ela não requer junções complexas para recuperação e inserção de entidades, mas, por outro lado, desperdiça espaço no banco de dados, pois muitas colunas precisam ser anuláveis ​​e não há dados para elas.</description>
    </item>
    
    <item>
      <title>Mapeamento de muitos para um</title>
      <link>https://www.wikiod.com/pt/jpa/mapeamento-de-muitos-para-um/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jpa/mapeamento-de-muitos-para-um/</guid>
      <description>Parâmetros # Coluna Coluna @TableGenerator Usa estratégia de gerador de tabela para criação automática de id @GeneratedValue Especifica que o valor aplicado aos campos é um valor gerado @Id Anota o campo como identificador @ManyToOne Especifica o relacionamento Muitos para Um entre Funcionário e Departamento. Esta anotação está marcada em muitos lados. ou seja, vários funcionários pertencem a um único departamento. Portanto, o Departamento é anotado com @ManyToOne na entidade Funcionário.</description>
    </item>
    
  </channel>
</rss>

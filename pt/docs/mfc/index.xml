<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial mfc on </title>
    <link>https://www.wikiod.com/pt/docs/mfc/</link>
    <description>Recent content in Tutorial mfc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/mfc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com mfc</title>
      <link>https://www.wikiod.com/pt/mfc/comecando-com-mfc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/mfc/comecando-com-mfc/</guid>
      <description>Um programa básico de MFC # // Include the MFC header: // (you do not need to and should not include the standard Windows headers, e.g. // Windows.h) #include &amp;lt;AfxWin.h&amp;gt; // MFC core and standard components // The following header defines resource constants, such as dialog and control IDs: #include &amp;quot;resource.h&amp;quot; // The basic element of an MFC application is a class that inherits from CWinApp. class CMyApp : public CWinApp { // This gets called as the application gets initialized.</description>
    </item>
    
    <item>
      <title>Barras de controle encaixáveis ​​(painéis)</title>
      <link>https://www.wikiod.com/pt/mfc/barras-de-controle-encaixaveis-paineis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/mfc/barras-de-controle-encaixaveis-paineis/</guid>
      <description>Quase todos os aplicativos MFC têm barra de ferramentas e barra de status - tipos especiais de barra de controle que se encaixam nas partes superior e inferior do quadro principal do aplicativo. Mas muitas vezes a lógica do aplicativo requer mais as barras de informações ancoradas em algum lado do quadro, por exemplo, pode ser barra de propriedades ou barra de classes, barra de visualização, barra de saída e muitos outros.</description>
    </item>
    
    <item>
      <title>Migrando o projeto DLL VS2005 da extensão ISAPI MFC (C&#43;&#43;) para o VS2015.</title>
      <link>https://www.wikiod.com/pt/mfc/migrando-o-projeto-dll-vs2005-da-extensao-isapi-mfc-c-para-o-vs2015/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/mfc/migrando-o-projeto-dll-vs2005-da-extensao-isapi-mfc-c-para-o-vs2015/</guid>
      <description>Você pode ter visto vários sites que mostrarão como criar um projeto de extensão ISAPI, mas nenhum deles demonstrará como migrar o projeto de extensão ISAPI legado existente (VS2005) para o VS2015. Eu enfrentei um problema semelhante enquanto trabalhava em um desses requisitos. Este artigo demonstra a maneira experimental que tomei para resolver meu problema.
Eu estava trabalhando em uma tarefa de migração onde me deparei com um projeto. O projeto ISAPI legado era um projeto DLL de extensão MFC construído no VS2005 e depois de pesquisar algumas coisas eu vim a saber que as classes ISAPI do MFC (CHttpServerContext, CHttpServer etc.</description>
    </item>
    
    <item>
      <title>Multithreading</title>
      <link>https://www.wikiod.com/pt/mfc/multithreading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/mfc/multithreading/</guid>
      <description>O MFC oferece suporte a threads de trabalho e threads gui (threads com loops de mensagem). Consulte https://msdn.microsoft.com/en-us/library/975t8ks0.aspx para obter mais documentação.
Exemplo simples de thread de trabalho AfxBeginThread # Este exemplo mostra uma chamada de AfxBeginThread que inicia o thread de trabalho e um procedimento de thread de trabalho de exemplo para esse thread.
// example simple thread procedure. UINT __cdecl threadProc(LPVOID rawInput) { // convert it to the correct data type.</description>
    </item>
    
  </channel>
</rss>

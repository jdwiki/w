<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial jdbc on </title>
    <link>https://www.wikiod.com/pt/docs/jdbc/</link>
    <description>Recent content in tutorial jdbc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao jdbc</title>
      <link>https://www.wikiod.com/pt/jdbc/introducao-ao-jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/introducao-ao-jdbc/</guid>
      <description>Criando uma conexão # Para poder usar o JDBC, você precisa ter o driver JDBC do seu banco de dados no caminho de classe do seu aplicativo.
Existem várias maneiras de se conectar a um banco de dados, mas as maneiras comuns são usar o java.sql.DriverManager ou configurar e usar uma implementação específica de banco de dados de javax.sql.DataSource .
Um exemplo simples para criar uma conexão com um banco de dados com a url jdbc:somedb://localhost/foobar e executar uma instrução de atualização para dar a todos os funcionários um aumento de 5%:</description>
    </item>
    
    <item>
      <title>Criando uma conexão de banco de dados</title>
      <link>https://www.wikiod.com/pt/jdbc/criando-uma-conexao-de-banco-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/criando-uma-conexao-de-banco-de-dados/</guid>
      <description>Sintaxe # DB_URL = &amp;ldquo;jdbc:DBMS://DB_HOST:DB_PORT/DB_NAME&amp;rdquo;
DBMS: Data Base Driver Manager, pode ser qualquer DBMS (mysql, oracle, postgresql, sqlite, &amp;hellip;), exemplo de mysql: &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo;
DB_HOST: seu host base do banco de dados, o endereço IP do seu banco de dados exemplo: 10.6.0.1, o padrão é localhost ou 127.0.0.1
DB_PORT: Porta de banco de dados, todo DBMS tem uma porta de derrota exemplo mysql=3306, postegesql=5432
DB_NAME: o nome do seu banco de dados</description>
    </item>
    
    <item>
      <title>Declaração preparada</title>
      <link>https://www.wikiod.com/pt/jdbc/declaracao-preparada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/declaracao-preparada/</guid>
      <description>Um PreparedStatement declara a instrução antes de ser executada e permite espaços reservados para parâmetros. Isso permite que a instrução seja preparada (e otimizada) uma vez no servidor e, em seguida, reutilizada com diferentes conjuntos de parâmetros.
O benefício adicional dos espaços reservados de parâmetro é que ele fornece proteção contra injeção de SQL. Isso é obtido enviando os valores de parâmetro separadamente ou porque o driver escapa os valores corretamente conforme necessário.</description>
    </item>
    
    <item>
      <title>Agrupamento de extratos</title>
      <link>https://www.wikiod.com/pt/jdbc/agrupamento-de-extratos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/agrupamento-de-extratos/</guid>
      <description>O lote de instruções está executando várias instruções como uma unidade (com um java.sql.Statement normal), ou uma única instrução com vários conjuntos de valores de parâmetro (com um java.sql.PreparedStatement).
O lote de instruções permite que um programa colete instruções relacionadas ou, no caso de conjuntos de valores de parâmetros relacionados a instruções preparadas, e as envie ao servidor de banco de dados como uma única execução.
Os benefícios do lote de instruções podem incluir desempenho aprimorado.</description>
    </item>
    
    <item>
      <title>Conjunto de resultados</title>
      <link>https://www.wikiod.com/pt/jdbc/conjunto-de-resultados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/conjunto-de-resultados/</guid>
      <description>Um objeto ResultSet mantém um cursor apontando para sua linha de dados atual. Inicialmente o cursor é posicionado antes da primeira linha. O método next move o cursor para a próxima linha e, como retorna false quando não há mais linhas no objeto ResultSet, ele pode ser usado em um loop while para iterar pelo resultado se
Conjunto de resultados # Para criar um ResultSet você deve criar um Statement ou PrepapredStatement :</description>
    </item>
    
    <item>
      <title>JDBC - Injeção de Declaração</title>
      <link>https://www.wikiod.com/pt/jdbc/jdbc---injecao-de-declaracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/jdbc---injecao-de-declaracao/</guid>
      <description>A injeção de SQL é uma técnica de injeção de código, usada para atacar aplicativos orientados a dados, em que instruções SQL nefastas são inseridas em um campo de entrada para execução (por exemplo, para despejar o conteúdo do banco de dados para o invasor).
Nesta seção falaremos sobre isso e sua relação com a Declaração JDBC.
Declaração e injeção de SQL mal # Observação neste exemplo usaremos o DBMS PostgreSQL, mas você pode usar qualquer DBMS</description>
    </item>
    
    <item>
      <title>ResultSetMetaData</title>
      <link>https://www.wikiod.com/pt/jdbc/resultsetmetadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jdbc/resultsetmetadata/</guid>
      <description>Como todos sabemos, metadados significam dados sobre dados.
Para buscar metadados de uma tabela como número total de coluna, nome da coluna, tipo de coluna etc., a interface ResultSetMetaData é útil porque fornece métodos para obter metadados do objeto ResultSet.
ResultSetMetaData # import java.sql.*; class Rsmd { public static void main(String args[]) { try { Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;); Connection con = DriverManager.getConnection( &amp;quot;jdbc:oracle:thin:@localhost:1521:xe&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;oracle&amp;quot;); PreparedStatement ps = con.prepareStatement(&amp;quot;select * from emp&amp;quot;); ResultSet rs = ps.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de idioma Erlang on </title>
    <link>https://www.wikiod.com/pt/docs/erlang/</link>
    <description>Recent content in Tutorial de idioma Erlang on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Erlang</title>
      <link>https://www.wikiod.com/pt/erlang/introducao-a-linguagem-erlang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/introducao-a-linguagem-erlang/</guid>
      <description>Olá Mundo # Há duas coisas que você precisa saber ao escrever um aplicativo &amp;ldquo;hello world&amp;rdquo; em Erlang:
O código-fonte está escrito na linguagem de programação erlang usando o editor de texto de sua escolha A aplicação é então executada na máquina virtual erlang. Neste exemplo vamos interagir com a VM erlang através do shell erlang. Primeiro o código fonte do aplicativo: # Crie um novo arquivo hello.erl contendo o seguinte:</description>
    </item>
    
    <item>
      <title>Instalação</title>
      <link>https://www.wikiod.com/pt/erlang/instalacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/instalacao/</guid>
      <description>Construa e instale Erlang/OTP no FreeBSD # Os exemplos a seguir mostram 3 métodos principais para instalar Erlang/OTP no FreeBSD.
Método 1 - Pacote Binário Pré-construído # Use pkg para instalar o pacote binário pré-construído:
$ pkg install erlang Teste sua nova instalação:
$ erl Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false] Eshell V7.3.1 (abort with ^G) Método 2 - Compile e instale usando a coleção de portas (recomendado) # Compile e instale a porta como de costume:</description>
    </item>
    
    <item>
      <title>Tipos de dados</title>
      <link>https://www.wikiod.com/pt/erlang/tipos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/tipos-de-dados/</guid>
      <description>Todo tipo de dado em erlang é chamado Termo. É um nome genérico que significa qualquer tipo de dado.
Números # Em Erlang, os números são inteiros ou flutuantes. Erlang usa precisão arbitrária para inteiros (bignums), então seus valores são limitados apenas pelo tamanho da memória do seu sistema.
1&amp;gt; 11. 11 2&amp;gt; -44. -44 3&amp;gt; 0.1. 0.1 4&amp;gt; 5.1e-3. 0.0051 5&amp;gt; 5.2e2. 520.0 Os números podem ser usados ​​em várias bases:</description>
    </item>
    
    <item>
      <title>Processos</title>
      <link>https://www.wikiod.com/pt/erlang/processos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/processos/</guid>
      <description>Criando processos # Criamos um novo processo simultâneo chamando a função spawn. A função spawn terá como parâmetro uma função Fun que o processo irá avaliar. O valor de retorno da função spawn é o identificador do processo criado (pid).
1&amp;gt; Fun = fun() -&amp;gt; 2+2 end. #Fun&amp;lt;erl_eval.20.52032458&amp;gt; 2&amp;gt; Pid = spawn(Fun). &amp;lt;0.60.0&amp;gt; Você também pode usar spawn/3 para iniciar um processo que irá executar uma função específica de um módulo: spawn(Module, Function, Args).</description>
    </item>
    
    <item>
      <title>Vergalhão3</title>
      <link>https://www.wikiod.com/pt/erlang/vergalhao3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/vergalhao3/</guid>
      <description>Instalando o Rebar3 # Rebar3 é escrito em Erlang, então você precisa de Erlang para executá-lo. Está disponível como um binário que você pode baixar e executar. Basta buscar a compilação noturna e conceder permissões de execução:
$ wget https://s3.amazonaws.com/rebar3/rebar3 &amp;amp;&amp;amp; chmod +x rebar3 Coloque este binário em um local conveniente e adicione-o ao seu caminho. Por exemplo, em um diretório bin em sua casa:
$ mkdir ~/bin &amp;amp;&amp;amp; mv rebar3 ~/bin $ export PATH=~/bin:$PATH Esta última linha deve ser colocada em seu .</description>
    </item>
    
    <item>
      <title>Comportamentos</title>
      <link>https://www.wikiod.com/pt/erlang/comportamentos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/comportamentos/</guid>
      <description>Definindo um comportamento # Você pode definir seu próprio comportamento adicionando diretivas -callback em seu módulo. Por exemplo, se os módulos que implementam seu comportamento precisam ter uma função foo que recebe um inteiro e retorna um átomo:
-module(my_behaviour). -callback foo(integer()) -&amp;gt; atom(). Se você usar este comportamento em outro módulo, o compilador avisará se não exportar foo/1, e o Dialyzer avisará se os tipos não estiverem corretos. Com este módulo:</description>
    </item>
    
    <item>
      <title>Strings de formato</title>
      <link>https://www.wikiod.com/pt/erlang/strings-de-formato/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/strings-de-formato/</guid>
      <description>Sintaxe # io:format(FormatString, Args) % escreve na saída padrão io:format(standard_error, FormatString, Args) % escreve no erro padrão io:format(F, FormatString, Args) % escreve no arquivo aberto io_lib:format(FormatString, Args) % retorna um iolist Sequências de controle comuns em strings de formato # Embora há muitas sequências de controle diferentes para io:format e io_lib:format, na maioria das vezes você use apenas três diferentes: ~s, ~p e ~w.
~s # O ~s é para strings.</description>
    </item>
    
    <item>
      <title>iolistas</title>
      <link>https://www.wikiod.com/pt/erlang/iolistas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/iolistas/</guid>
      <description>Enquanto uma string Erlang é uma lista de inteiros, uma &amp;ldquo;iolist&amp;rdquo; é uma lista cujos elementos são inteiros, binários ou outros iolists, por exemplo [&amp;quot;foo&amp;quot;, $b, $a, $r, &amp;lt;&amp;lt;&amp;quot;baz&amp;quot;&amp;gt;&amp;gt;]. Esse iolist representa a string &amp;quot;foobarbaz&amp;quot;.
Embora você possa converter uma iolist para um binário com iolist_to_binary/1, muitas vezes você não precisa, pois as funções da biblioteca Erlang como file:write_file/2 e gen_tcp:send/2 aceitam iolists assim como strings e binários.
Sintaxe # -type iolist() :: lista_imprópria(byte() | binary() | iolist(), binary() | []).</description>
    </item>
    
    <item>
      <title>comportamento do gen_server</title>
      <link>https://www.wikiod.com/pt/erlang/comportamento-do-gen_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/comportamento-do-gen_server/</guid>
      <description>gen_server é um recurso importante do Erlang e requer alguns pré-requisitos para entender todos os aspectos dessa funcionalidade:
Loop, recursão e estado Processos de desova Mensagem passando princípios OTP Uma boa maneira de aprender mais sobre um recurso em Erlang é ler diretamente o código-fonte do repositório oficial do github. O comportamento gen_server incorpora muitas informações úteis e estrutura interessante em seu núcleo.
gen_server é definido em gen_server.erl e sua documentação associada pode ser encontrada em stdlib Erlang documentation.</description>
    </item>
    
    <item>
      <title>NIFs</title>
      <link>https://www.wikiod.com/pt/erlang/nifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/erlang/nifs/</guid>
      <description>Exemplo: hora atual do UNIX # Aqui está um exemplo muito simples para ilustrar como escrever um NIF.
Estrutura de diretórios:
nif_test ├── c_src │ ├── Makefile │ └── nif_test.c ├── rebar.config └── src ├── nif_test.app.src └── nif_test.erl Essa estrutura pode ser facilmente inicializada usando Rebar3:
$ rebar3 new lib nif_test &amp;amp;&amp;amp; cd nif_test &amp;amp;&amp;amp; rebar3 new cmake Conteúdo de nif_test.c:
#include &amp;quot;erl_nif.h&amp;quot; #include &amp;quot;time.h&amp;quot; static ERL_NIF_TERM now(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_int(env, time(0)); } static ErlNifFunc nif_funcs[] = { {&amp;quot;now&amp;quot;, 0, now} }; ERL_NIF_INIT(nif_test,nif_funcs,NULL,NULL,NULL,NULL); Conteúdo de nif_test.</description>
    </item>
    
  </channel>
</rss>

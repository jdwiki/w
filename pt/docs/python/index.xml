<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Python on </title>
    <link>https://www.wikiod.com/pt/docs/python/</link>
    <description>Recent content in Tutorial de linguagem Python on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Python</title>
      <link>https://www.wikiod.com/pt/python/introducao-a-linguagem-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/introducao-a-linguagem-python/</guid>
      <description>Começando # Python é uma linguagem de programação de alto nível amplamente utilizada para programação de uso geral, criada por Guido van Rossum e lançada pela primeira vez em 1991. Python apresenta um sistema de tipo dinâmico e gerenciamento automático de memória e suporta vários paradigmas de programação, incluindo orientado a objetos, imperativo, programação funcional e estilos procedurais. Possui uma grande e abrangente biblioteca padrão.
Duas versões principais do Python estão atualmente em uso ativo:</description>
    </item>
    
    <item>
      <title>Incompatibilidades migrando do Python 2 para o Python 3</title>
      <link>https://www.wikiod.com/pt/python/incompatibilidades-migrando-do-python-2-para-o-python-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/incompatibilidades-migrando-do-python-2-para-o-python-3/</guid>
      <description>Ao contrário da maioria das linguagens, o Python suporta duas versões principais. Desde 2008, quando o Python 3 foi lançado, muitos fizeram a transição, enquanto muitos não. Para entender ambos, esta seção aborda as diferenças importantes entre o Python 2 e o Python 3.
Atualmente, existem duas versões suportadas do Python: 2.7 (Python 2) e 3.6 (Python 3). Além disso, as versões 3.3 e 3.4 recebem atualizações de segurança no formato de origem.</description>
    </item>
    
    <item>
      <title>Geradores</title>
      <link>https://www.wikiod.com/pt/python/geradores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/geradores/</guid>
      <description>Geradores são iteradores preguiçosos criados por funções geradoras (usando yield) ou expressões geradoras (usando (an_expression for x in an_iterator)).
Sintaxe # rendimento &amp;lt;expr&amp;gt; rendimento de &amp;lt;expr&amp;gt; &amp;lt;var&amp;gt; = rendimento &amp;lt;expr&amp;gt; next(&amp;lt;iter&amp;gt;) Introdução # Expressões de gerador são semelhantes às compreensões de lista, dicionário e conjunto, mas estão entre parênteses. Os parênteses não precisam estar presentes quando são usados ​​como o único argumento para uma chamada de função.
expression = (x**2 for x in range(10)) Este exemplo gera os 10 primeiros quadrados perfeitos, incluindo 0 (no qual x = 0).</description>
    </item>
    
    <item>
      <title>Aulas</title>
      <link>https://www.wikiod.com/pt/python/aulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/aulas/</guid>
      <description>Python se oferece não apenas como uma linguagem de script popular, mas também suporta o paradigma de programação orientada a objetos. As classes descrevem dados e fornecem métodos para manipular esses dados, todos englobados em um único objeto. Além disso, as classes permitem a abstração separando detalhes de implementação concretos de representações abstratas de dados.
O código que utiliza classes geralmente é mais fácil de ler, entender e manter.
Introdução às aulas # Uma classe funciona como um modelo que define as características básicas de um determinado objeto.</description>
    </item>
    
    <item>
      <title>Armadilhas comuns</title>
      <link>https://www.wikiod.com/pt/python/armadilhas-comuns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/armadilhas-comuns/</guid>
      <description>Python é uma linguagem destinada a ser clara e legível, sem ambiguidades e comportamentos inesperados. Infelizmente, esses objetivos não são alcançáveis ​​em todos os casos, e é por isso que o Python tem alguns casos de canto onde pode fazer algo diferente do que você esperava.
Esta seção mostrará alguns problemas que você pode encontrar ao escrever código Python.
Multiplicação de listas e referências comuns # Considere o caso de criar uma estrutura de lista aninhada multiplicando:</description>
    </item>
    
    <item>
      <title>Formatação de String</title>
      <link>https://www.wikiod.com/pt/python/formatacao-de-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/formatacao-de-string/</guid>
      <description>Ao armazenar e transformar dados para humanos verem, a formatação de strings pode se tornar muito importante. O Python oferece uma ampla variedade de métodos de formatação de strings descritos neste tópico.
Sintaxe # &amp;ldquo;{}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0:.2f}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42,00&amp;rdquo;
&amp;ldquo;{0:.0f}&amp;quot;.format(42.1234) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer:.2f}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42,00&amp;rdquo;
&amp;ldquo;{[chave]}&amp;quot;.format({&amp;lsquo;chave&amp;rsquo;: &amp;lsquo;valor&amp;rsquo;}) ==&amp;gt; &amp;ldquo;valor&amp;rdquo;
&amp;ldquo;{1}&amp;quot;.format([&amp;lsquo;zero&amp;rsquo;, &amp;lsquo;um&amp;rsquo;, &amp;lsquo;dois&amp;rsquo;]) ==&amp;gt; &amp;ldquo;um&amp;rdquo;
&amp;ldquo;{answer} = {answer}&amp;quot;.format(answer=42) ==&amp;gt; &amp;ldquo;42 = 42&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Decoradores</title>
      <link>https://www.wikiod.com/pt/python/decoradores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/decoradores/</guid>
      <description>As funções do decorador são padrões de projeto de software. Eles alteram dinamicamente a funcionalidade de uma função, método ou classe sem precisar usar subclasses diretamente ou alterar o código-fonte da função decorada. Quando usados ​​corretamente, os decoradores podem se tornar ferramentas poderosas no processo de desenvolvimento. Este tópico abrange a implementação e aplicações de funções de decorador em Python.
Sintaxe # def decorator_function(f): pass # define um decorador chamado decorator_function</description>
    </item>
    
    <item>
      <title>Listar Compreensão</title>
      <link>https://www.wikiod.com/pt/python/listar-compreensao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/listar-compreensao/</guid>
      <description>Uma compreensão de lista é uma ferramenta sintática para criar listas de forma natural e concisa, conforme ilustrado no código a seguir para fazer uma lista de quadrados dos números de 1 a 10:
[i ** 2 para i no intervalo(1,11)]
O i fictício de uma lista existente range é usado para criar um novo padrão de elemento. É usado onde um loop for seria necessário em linguagens menos expressivas.</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/python/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/funcoes/</guid>
      <description>Funções em Python fornecem código organizado, reutilizável e modular para realizar um conjunto de ações específicas. As funções simplificam o processo de codificação, evitam lógica redundante e tornam o código mais fácil de seguir. Este tópico descreve a declaração e a utilização de funções em Python.
Python tem muitas funções embutidas como print(), input(), len(). Além dos built-ins, você também pode criar suas próprias funções para fazer trabalhos mais específicos—elas são chamadas de funções definidas pelo usuário.</description>
    </item>
    
    <item>
      <title>Desestruturação da lista (também conhecida como embalagem e descompactação)</title>
      <link>https://www.wikiod.com/pt/python/desestruturacao-da-lista-tambem-conhecida-como-embalagem-e-descompactacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/python/desestruturacao-da-lista-tambem-conhecida-como-embalagem-e-descompactacao/</guid>
      <description>Atribuição de desestruturação # Em atribuições, você pode dividir um Iterable em valores usando a sintaxe &amp;ldquo;unpacking&amp;rdquo;:
Desestruturando como valores # a, b = (1, 2) print(a) # Prints: 1 print(b) # Prints: 2 Se você tentar descompactar mais do que o comprimento do iterável, receberá um erro:
a, b, c = [1] # Raises: ValueError: not enough values to unpack (expected 3, got 1) Desestruturando como uma lista # Você pode descompactar uma lista de comprimento desconhecido usando a seguinte sintaxe:</description>
    </item>
    
  </channel>
</rss>

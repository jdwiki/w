<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial wcf on </title>
    <link>https://www.wikiod.com/pt/docs/wcf/</link>
    <description>Recent content in tutorial wcf on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/wcf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com wcf</title>
      <link>https://www.wikiod.com/pt/wcf/comecando-com-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/comecando-com-wcf/</guid>
      <description>Demonstração do Serviço Restful WCF # svc
public class WCFRestfulService : IWCFRestfulService { public string GetServiceName(int Id) { return &amp;quot;This is a WCF Restful Service&amp;quot;; } } Interface
[ServiceContract(Name = &amp;quot;WCRestfulService &amp;quot;)] public interface IWCFRestfulService { [OperationContract] [WebInvoke(Method = &amp;quot;GET&amp;quot;, ResponseFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped, UriTemplate = &amp;quot;GetServiceName?Id={Id}&amp;quot;)] string GetServiceName(int Id); } svc Markup (Clique com o botão direito do mouse no arquivo svc e clique em visualizar MarkUp)</description>
    </item>
    
    <item>
      <title>Como usar um contêiner de injeção de dependência com um serviço WCF</title>
      <link>https://www.wikiod.com/pt/wcf/como-usar-um-conteiner-de-injecao-de-dependencia-com-um-servico-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/como-usar-um-conteiner-de-injecao-de-dependencia-com-um-servico-wcf/</guid>
      <description>Como configurar um serviço WCF para usar um contêiner de injeção de dependência (Castle Windsor) # Este exemplo tem duas partes - algumas etapas padrão para adicionar o Castle Windsor ao seu serviço WCF e, em seguida, um exemplo simples e concreto para mostrar como configuramos e usamos o contêiner do Windsor.
Isso torna o exemplo um pouco longo. Se você já entende o uso de um contêiner DI, provavelmente só se importa com as etapas do clichê.</description>
    </item>
    
    <item>
      <title>Seu primeiro serviço</title>
      <link>https://www.wikiod.com/pt/wcf/seu-primeiro-servico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/seu-primeiro-servico/</guid>
      <description>Adicionando um endpoint de metadados ao seu serviço # Os serviços SOAP podem publicar metadados que descrevem os métodos que podem ser invocados pelos clientes. Os clientes podem usar ferramentas como o Visual Studio para gerar código automaticamente (conhecido como client proxies). Os proxies escondem a complexidade de invocar um serviço. Para invocar um serviço, basta invocar um método em um proxy de cliente.
Primeiro você deve adicionar um endpoint de metadados ao seu serviço.</description>
    </item>
    
    <item>
      <title>Serviço de descanso WCF</title>
      <link>https://www.wikiod.com/pt/wcf/servico-de-descanso-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/servico-de-descanso-wcf/</guid>
      <description>Serviço Resful WCF # [ServiceContract] public interface IBookService { [OperationContract] [WebGet] List&amp;lt;Book&amp;gt; GetBooksList(); [OperationContract] [WebGet(UriTemplate = &amp;quot;Book/{id}&amp;quot;)] Book GetBookById(string id); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;AddBook/{name}&amp;quot;)] void AddBook(string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;UpdateBook/{id}/{name}&amp;quot;)] void UpdateBook(string id, string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;DeleteBook/{id}&amp;quot;)] void DeleteBook(string id); } Implementando o Serviço
Agora a parte de implementação do serviço usará o contexto gerado pelo framework de entidades e entidades para realizar todas as respectivas operações.</description>
    </item>
    
    <item>
      <title>Rastreamento</title>
      <link>https://www.wikiod.com/pt/wcf/rastreamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/rastreamento/</guid>
      <description>Configurações de rastreamento # O rastreamento WCF é construído sobre System.Diagnostics. Para usar o rastreamento, você deve definir as origens de rastreamento no arquivo de configuração ou no código.
O rastreamento não está habilitado por padrão. Para ativar o rastreamento, você deve criar um ouvinte de rastreamento e definir um nível de rastreamento diferente de &amp;ldquo;Desativado&amp;rdquo; para a origem de rastreamento selecionada na configuração; caso contrário, o WCF não gera nenhum rastreamento.</description>
    </item>
    
    <item>
      <title>Segurança WCF</title>
      <link>https://www.wikiod.com/pt/wcf/seguranca-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/seguranca-wcf/</guid>
      <description>Segurança WCF # A segurança é uma peça crítica de qualquer tecnologia de programação ou estrutura para implementação aplicativos orientados a serviços
O WCF foi construído do zero para fornecendo a infra-estrutura de segurança necessária no nível de mensagem e serviço.
Nas seções a seguir, você verá como usar muitas das configurações de segurança disponíveis no WCF e alguns cenários de implantação comuns.
Para proteção de mensagens, o WCF suporta os dois modelos de segurança tradicionais, segurança de transporte e segurança de mensagens.</description>
    </item>
    
    <item>
      <title>Serialização</title>
      <link>https://www.wikiod.com/pt/wcf/serializacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/serializacao/</guid>
      <description>Serialização no WCF # A serialização é o processo de converter um objeto em um fluxo de bytes para armazenar o objeto ou transmiti-lo para a memória, um banco de dados ou um arquivo. Serialização de página da Microsoft
O exemplo a seguir demonstra a serialização no WCF:
[ServiceContract(Namespace=&amp;quot;http://Microsoft.ServiceModel.Samples&amp;quot;)] public interface IPerson { [OperationContract] void Add(Person person); [DataContract] public class Person { private int id; [DataMember] public int Age{ set; get;} } } O atributo [DataContract] é usado com as classes.</description>
    </item>
    
    <item>
      <title>Tratamento de exceções</title>
      <link>https://www.wikiod.com/pt/wcf/tratamento-de-excecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/tratamento-de-excecoes/</guid>
      <description>Leitura adicional
Mais sobre FaultException: MSDN FaultException
Usando uma estrutura de registro de erros personalizada # Às vezes, é útil integrar uma estrutura de log de erros personalizada para garantir que todas as exceções sejam registradas.
[ServiceContract] [ErrorHandler] public interface IMyService { } [AttributeUsage(AttributeTargets.Interface)] public class CustomErrorHandler : Attribute, IContractBehavior, IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) { return; } //my custom logging framework } public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) { dispatchRuntime.</description>
    </item>
    
    <item>
      <title>Como desabilitarhabilitar o rastreamento WCF no código do aplicativo C#</title>
      <link>https://www.wikiod.com/pt/wcf/como-desabilitarhabilitar-o-rastreamento-wcf-no-codigo-do-aplicativo-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/como-desabilitarhabilitar-o-rastreamento-wcf-no-codigo-do-aplicativo-c/</guid>
      <description>Uma maneira: use um ouvinte personalizado definido em seu código C# # Demorei um pouco para acertar, então decidi compartilhar uma solução, porque isso pode salvar outra pessoa vários dias de tentativa e erro.
O problema: quero habilitar/desabilitar o rastreamento WCF em meu aplicativo C# .NET e escolher o nome do arquivo de saída do rastreamento. Não quero que os usuários editem o arquivo .config, há muito espaço para erros lá.</description>
    </item>
    
    <item>
      <title>DataContractSerializer é um serializador Opt-In e Opt-Out.</title>
      <link>https://www.wikiod.com/pt/wcf/datacontractserializer-e-um-serializador-opt-in-e-opt-out/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wcf/datacontractserializer-e-um-serializador-opt-in-e-opt-out/</guid>
      <description>na verdade, é tão simples: a abordagem Opt-In diz que as propriedades que são consideradas parte do DataContract devem ser explicitamente marcadas, caso contrário, serão ignoradas, enquanto Opt-Out significa que todas as propriedades serão consideradas parte do DataContract, a menos que marcadas explicitamente.
O que é opt in serializer # /// &amp;lt;summary&amp;gt; /// Defines a student. /// &amp;lt;/summary&amp;gt; [DataContract] public class Student { /// &amp;lt;summary&amp;gt; /// Gets or sets the student number.</description>
    </item>
    
  </channel>
</rss>

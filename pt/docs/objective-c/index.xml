<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Objective-C on </title>
    <link>https://www.wikiod.com/pt/docs/objective-c/</link>
    <description>Recent content in Tutorial de linguagem Objective-C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Objective-C</title>
      <link>https://www.wikiod.com/pt/objective-c/introducao-a-linguagem-objective-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/introducao-a-linguagem-objective-c/</guid>
      <description>Olá Mundo # Este programa produzirá &amp;ldquo;Hello World!&amp;rdquo;
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, char * argv[]) { NSLog(@&amp;quot;Hello World!&amp;quot;); } #import é uma diretiva de pré-processador, que indica que queremos importar ou incluir as informações desse arquivo no programa. Neste caso, o compilador copiará o conteúdo de Foundation.h no framework Foundation para o topo do arquivo. A principal diferença entre #import e #include é que #import é &amp;ldquo;inteligente&amp;rdquo; o suficiente para não reprocessar arquivos que já foram incluídos em outros #includes.</description>
    </item>
    
    <item>
      <title>Exploração madeireira</title>
      <link>https://www.wikiod.com/pt/objective-c/exploracao-madeireira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/exploracao-madeireira/</guid>
      <description>Sintaxe # NSLog(@&amp;ldquo;texto para log&amp;rdquo;); // Log de texto básico NSLog(@&amp;ldquo;dados: %f - %.2f&amp;rdquo;, meuFloat, outroFloat); // Texto de registro incluindo números flutuantes. NSLog(@&amp;ldquo;dados: %i&amp;rdquo;, meuInteger); // Texto de registro incluindo número inteiro. NSLog(@&amp;ldquo;dados: %@&amp;rdquo;, myStringOrObject); // Texto de log referenciando outra String ou qualquer objeto derivado de NSObject. Para registrar vários tipos de objetos e tipos de dados, consulte: Objective-C, Format Specifiers
Exploração madeireira # NSLog(@&amp;quot;Log Message!&amp;quot;); NSLog(@&amp;quot;NSString value: %@&amp;quot;, stringValue); NSLog(@&amp;quot;Integer value: %d&amp;quot;, intValue); O primeiro argumento de NSLog é um NSString contendo o formato da mensagem de log.</description>
    </item>
    
    <item>
      <title>NSString</title>
      <link>https://www.wikiod.com/pt/objective-c/nsstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/nsstring/</guid>
      <description>A classe NSString faz parte do framework Foundation para trabalhar com strings (séries de caracteres). Também inclui métodos para comparar, pesquisar e modificar strings.
Para aninhar vários tipos de objetos e tipos de dados em NSStrings, consulte: Objective-C, Format Specifiers
Codificação e Decodificação # // decode NSString *string = [[NSString alloc] initWithData:utf8Data encoding:NSUTF8StringEncoding]; // encode NSData *utf8Data = [string dataUsingEncoding:NSUTF8StringEncoding]; Algumas codificações suportadas são:
NSASCIIStringEncoding NSUTF8StringEncoding NSUTF16StringEncoding (== NSUnicodeStringEncoding) Observe que utf8Data.</description>
    </item>
    
    <item>
      <title>Blocos</title>
      <link>https://www.wikiod.com/pt/objective-c/blocos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/blocos/</guid>
      <description>Sintaxe # // Declare as a local variable:
returnType (^blockName)(parameterType1, parameterType2, &amp;hellip;) = ^returnType(argument1, argument2, &amp;hellip;) {&amp;hellip;};
// Declare as a property:
@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);
// Declare as a method parameter:
- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;
// Declare as an argument to a method call:
[someObject someMethodThatTakesABlock:^returnType (parameters) {&amp;hellip;}];
// Declare as a typedef:
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&amp;hellip;};
// Declare a C function return a block object:</description>
    </item>
    
    <item>
      <title>Singletons</title>
      <link>https://www.wikiod.com/pt/objective-c/singletons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/singletons/</guid>
      <description>Apenas certifique-se de ler este tópico ( http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons ) antes de usá-lo.
Usando o Grand Central Dispatch (GCD) # O GCD garantirá que seu singleton seja instanciado apenas uma vez, mesmo se chamado de vários threads. Insira isso em qualquer classe para uma instância singleton chamada shared.
+ (instancetype)shared { // Variable that will point to the singleton instance. The `static` // modifier makes it behave like a global variable: the value assigned // to it will &amp;quot;survive&amp;quot; the method call.</description>
    </item>
    
    <item>
      <title>Ambiente de execução de baixo nível</title>
      <link>https://www.wikiod.com/pt/objective-c/ambiente-de-execucao-de-baixo-nivel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/ambiente-de-execucao-de-baixo-nivel/</guid>
      <description>Para usar o tempo de execução do Objective-C, você precisa importá-lo.
#import &amp;lt;objc/objc.h&amp;gt; Métodos de aumento usando o método Swizzling # O tempo de execução do Objective-C permite alterar a implementação de um método em tempo de execução. Isso é chamado de method swizzling e é frequentemente usado para trocar as implementações de dois métodos. Por exemplo, se os métodos foo e bar forem trocados, o envio da mensagem foo agora executará a implementação de bar e vice-versa.</description>
    </item>
    
    <item>
      <title>Protocolos</title>
      <link>https://www.wikiod.com/pt/objective-c/protocolos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/protocolos/</guid>
      <description>Métodos opcionais e obrigatórios # Por padrão, todos os métodos declarados em um protocolo são obrigatórios. Isso significa que qualquer classe que esteja em conformidade com esse protocolo deve implementar esses métodos.
Também é possível declarar métodos opcionais. Esses métodos podem ser implementados somente se necessário.
Você marca métodos opcionais com a diretiva @opcional.
@protocol NewProtocol - (void)protocolMethod:(id)argument; @optional - (id)anotherMethod; @end Neste caso, apenas anotherMethod é marcado como opcional; os métodos sem a diretiva @opcional são considerados obrigatórios.</description>
    </item>
    
    <item>
      <title>Codificação do valor-chave  Observação do valor-chave</title>
      <link>https://www.wikiod.com/pt/objective-c/codificacao-do-valor-chave--observacao-do-valor-chave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/codificacao-do-valor-chave--observacao-do-valor-chave/</guid>
      <description>Exemplo de codificação de valor-chave da vida real mais comum # A codificação de valor-chave é integrada ao NSObject usando o protocolo NSKeyValueCoding.
O que isto significa?
Isso significa que qualquer objeto id é capaz de chamar o método valueForKey e suas várias variantes como valueForKeyPath etc. &#39;
Isso também significa que qualquer objeto id pode invocar o método setValue e suas várias variantes também.
Exemplo:
id obj = [[MyClass alloc] init]; id value = [obj valueForKey:@&amp;quot;myNumber&amp;quot;]; int myNumberAsInt = [value intValue]; myNumberAsInt = 53; [obj setValue:@(myNumberAsInt) forKey:@&amp;quot;myNumber&amp;quot;]; Exceções:</description>
    </item>
    
    <item>
      <title>Classes e objetos</title>
      <link>https://www.wikiod.com/pt/objective-c/classes-e-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/classes-e-objetos/</guid>
      <description>Sintaxe # Cat *cat = [[Cat alloc] init]; // Cria um objeto cat do tipo Cat Cachorro *cachorro = [[Dog alloc] init]; // Cria um objeto dog do tipo Dog NSObject *someObject = [NSObject alloc]; [inicialização de algum objeto]; // não faça isso XYZObject *objeto = [XYZObject novo]; // Use new para criar objetos se NENHUM argumento for necessário para inicialização NSString *someString = @&amp;ldquo;Olá, Mundo!&amp;rdquo;; // Criando uma NSString com sintaxe literal NSNumber *myFloat = @3.</description>
    </item>
    
    <item>
      <title>NSURL</title>
      <link>https://www.wikiod.com/pt/objective-c/nsurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/objective-c/nsurl/</guid>
      <description>Crio # De NSString:
NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; Você também pode usar os seguintes métodos:
- initWithString: + URLWithString:relativeToURL: - initWithString:relativeToURL: + fileURLWithPath:isDirectory: - initFileURLWithPath:isDirectory: + fileURLWithPath: - initFileURLWithPath: Designated Initializer + fileURLWithPathComponents: + URLByResolvingAliasFileAtURL:options:error: + URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: - initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: + fileURLWithFileSystemRepresentation:isDirectory:relativeToURL: - getFileSystemRepresentation:maxLength: - initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL: Comparar NSURL # NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; NSURL *myUrl2 = [NSURL URLWithString: urlString]; if ([myUrl isEqual:myUrl2]) return YES; Modificando e convertendo um URL de arquivo com remoção e anexação de caminho # 1.</description>
    </item>
    
  </channel>
</rss>

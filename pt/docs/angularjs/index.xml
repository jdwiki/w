<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial AngularJS on </title>
    <link>https://www.wikiod.com/pt/docs/angularjs/</link>
    <description>Recent content in Tutorial AngularJS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com AngularJS</title>
      <link>https://www.wikiod.com/pt/angularjs/comecando-com-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/comecando-com-angularjs/</guid>
      <description>Começando # Crie um novo arquivo HTML e cole o seguinte conteúdo:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, Angular&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-init=&amp;quot;name=&#39;World&#39;&amp;quot;&amp;gt; &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt; &amp;lt;input ng-model=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;span&amp;gt;Hello, {{ name }}!&amp;lt;/span&amp;gt; &amp;lt;p ng-bind=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Demonstração ao vivo
Ao abrir o arquivo com um navegador, você verá um campo de entrada seguido pelo texto Hello, World!. A edição do valor na entrada atualizará o texto em tempo real, sem a necessidade de atualizar a página inteira.</description>
    </item>
    
    <item>
      <title>Perfil e Desempenho</title>
      <link>https://www.wikiod.com/pt/angularjs/perfil-e-desempenho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/perfil-e-desempenho/</guid>
      <description>7 Melhorias de desempenho simples # 1) Use ng-repeat com moderação
Usar ng-repeat em visualizações geralmente resulta em desempenho ruim, principalmente quando há ng-repeats aninhados.
Isso é super lento!
&amp;lt;div ng-repeat=&amp;quot;user in userCollection&amp;quot;&amp;gt; &amp;lt;div ng-repeat=&amp;quot;details in user&amp;quot;&amp;gt; {{details}} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Tente evitar repetições aninhadas tanto quanto possível. Uma maneira de melhorar o desempenho de ng-repeat é usar track by $index (ou algum outro campo de id). Por padrão, ng-repeat rastreia todo o objeto.</description>
    </item>
    
    <item>
      <title>Diretivas personalizadas</title>
      <link>https://www.wikiod.com/pt/angularjs/diretivas-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/diretivas-personalizadas/</guid>
      <description>Aqui você aprenderá sobre o recurso Diretivas do AngularJS. Abaixo você encontrará informações sobre o que são as Diretivas, bem como exemplos Básicos e Avançados de como usá-las.
Parâmetros # Parâmetro Detalhes escopo Propriedade para definir o escopo da diretiva. Pode ser definido como falso, verdadeiro ou como um escopo isolado: { @, =, &amp;lt;, &amp;amp; }. escopo: falso A diretiva usa o escopo pai. Nenhum escopo criado para diretiva. escopo: verdadeiro A diretiva herda o escopo pai prototipicamente como um novo escopo filho.</description>
    </item>
    
    <item>
      <title>Diretivas incorporadas</title>
      <link>https://www.wikiod.com/pt/angularjs/diretivas-incorporadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/diretivas-incorporadas/</guid>
      <description>Expressões angulares - Texto vs. Número # Este exemplo demonstra como as expressões angulares são avaliadas ao usar type=&amp;quot;text&amp;quot; e type=&amp;quot;number&amp;quot; para o elemento de entrada. Considere o seguinte controlador e visualização:
Controlador
var app = angular.module(&#39;app&#39;, []); app.controller(&#39;ctrl&#39;, function($scope) { $scope.textInput = { value: &#39;5&#39; }; $scope.numberInput = { value: 5 }; }); Visão
&amp;lt;div ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;ctrl&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;textInput.value&amp;quot;&amp;gt; {{ textInput.value + 5 }} &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;numberInput.value&amp;quot;&amp;gt; {{ numberInput.</description>
    </item>
    
    <item>
      <title>Controladores</title>
      <link>https://www.wikiod.com/pt/angularjs/controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/controladores/</guid>
      <description>Sintaxe # &amp;lt;htmlElement of-controller=&amp;ldquo;controllerName&amp;rdquo;&amp;gt; &amp;hellip; &amp;lt;/htmlElement&amp;gt; &amp;lt;script&amp;gt; app.controller(&amp;lsquo;controllerName&amp;rsquo;, controllerFunction); &amp;lt;/script&amp;gt; Seu primeiro controlador # Um controlador é uma estrutura básica usada em Angular para preservar o escopo e lidar com certas ações dentro de uma página. Cada controlador é acoplado a uma visualização HTML.
Abaixo está um clichê básico para um aplicativo Angular:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&#39;MyFirstApp&#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First App&amp;lt;/title&amp;gt; &amp;lt;!-- angular source --&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.3/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- Your custom controller code --&amp;gt; &amp;lt;script src=&amp;quot;js/controllers.</description>
    </item>
    
    <item>
      <title>Componentes</title>
      <link>https://www.wikiod.com/pt/angularjs/componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/componentes/</guid>
      <description>Parâmetros # Parâmetro Detalhes *= Para usar a vinculação de dados bidirecional. Isso significa que, se você atualizar essa variável no escopo do componente, a alteração será refletida no escopo pai. ****** Ligações unidirecionais quando queremos apenas ler um valor de um escopo pai e não atualizá-lo. @ Parâmetros de string. *&amp;amp; Para retornos de chamada caso seu componente precise enviar algo para seu escopo pai. - - Ganchos LifeCycle Detalhes (requer angular.</description>
    </item>
    
    <item>
      <title>Promessas angulares com serviço $q</title>
      <link>https://www.wikiod.com/pt/angularjs/promessas-angulares-com-servico-q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/promessas-angulares-com-servico-q/</guid>
      <description>Envolva um valor simples em uma promessa usando $q.when() # Se tudo que você precisa é envolver o valor em uma promessa, você não precisa usar a sintaxe longa como aqui:
//OVERLY VERBOSE var defer; defer = $q.defer(); defer.resolve([&#39;one&#39;, &#39;two&#39;]); return defer.promise; Neste caso, você pode simplesmente escrever:
//BETTER return $q.when([&#39;one&#39;, &#39;two&#39;]); $q.when e seu alias $q.resolve # Envolve um objeto que pode ser um valor ou uma promessa (de terceiros) então capaz em uma promessa $q.</description>
    </item>
    
    <item>
      <title>Validação de formulário</title>
      <link>https://www.wikiod.com/pt/angularjs/validacao-de-formulario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/validacao-de-formulario/</guid>
      <description>Forma e Estados de entrada # Formulários e entradas angulares têm vários estados que são úteis ao validar conteúdo
Estados de entrada
Estado Descrição $tocado Campo foi tocado $intocado O campo não foi tocado $pristine O campo não foi modificado $sujo O campo foi modificado $válido O conteúdo do campo é válido $inválido O conteúdo do campo é inválido Todos os estados acima são propriedades booleanas e podem ser verdadeiros ou falsos.</description>
    </item>
    
    <item>
      <title>Testes de unidade</title>
      <link>https://www.wikiod.com/pt/angularjs/testes-de-unidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/testes-de-unidade/</guid>
      <description>Este tópico fornece exemplos para teste de unidade das várias construções em AngularJS. Os testes de unidade geralmente são escritos usando Jasmine, uma estrutura de teste orientada a comportamento popular. Ao testar construções angulares de unidade, você precisará incluir ngMock como uma dependência ao executar os testes de unidade.
Teste de unidade de um componente (1.5+) # Código do componente:
angular.module(&#39;myModule&#39;, []).component(&#39;myComponent&#39;, { bindings: { myValue: &#39;&amp;lt;&#39; }, controller: function(MyService) { this.</description>
    </item>
    
    <item>
      <title>Serviços</title>
      <link>https://www.wikiod.com/pt/angularjs/servicos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angularjs/servicos/</guid>
      <description>Criando um serviço usando angular.factory # Primeiro defina o serviço (neste caso ele usa o padrão de fábrica):
.factory(&#39;dataService&#39;, function() { var dataObject = {}; var service = { // define the getter method get data() { return dataObject; }, // define the setter method set data(value) { dataObject = value || {}; } }; // return the &amp;quot;service&amp;quot; object to expose the getter/setter return service; }) Agora você pode usar o serviço para compartilhar dados entre controladores:</description>
    </item>
    
  </channel>
</rss>

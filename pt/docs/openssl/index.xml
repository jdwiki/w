<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial openssl on </title>
    <link>https://www.wikiod.com/pt/docs/openssl/</link>
    <description>Recent content in tutorial openssl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/openssl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o openssl</title>
      <link>https://www.wikiod.com/pt/openssl/comecando-com-o-openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/openssl/comecando-com-o-openssl/</guid>
      <description>Instalação ou Configuração # OpenSSL é um projeto de código aberto que fornece um kit de ferramentas robusto, de nível comercial e completo para os protocolos Transport Layer Security (TLS) e Secure Sockets Layer (SSL). É também uma biblioteca de criptografia de uso geral.
O kit de ferramentas OpenSSL é licenciado sob uma licença no estilo Apache, o que basicamente significa que você é livre para obtê-lo e usá-lo para fins comerciais e não comerciais, sujeito a algumas condições de licença simples.</description>
    </item>
    
    <item>
      <title>Chaves</title>
      <link>https://www.wikiod.com/pt/openssl/chaves/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/openssl/chaves/</guid>
      <description>Sintaxe # EVP_PKEY *EVP_PKEY_new(void); RSA * RSA_novo(void); int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb); int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key); int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); void EVP_PKEY_free(EVP_PKEY *chave); Gerar chave RSA # Para gerar uma chave RSA, um EVP_PKEY deve primeiro ser alocado com EVP_PKEY_new:</description>
    </item>
    
  </channel>
</rss>

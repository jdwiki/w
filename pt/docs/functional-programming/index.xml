<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de programação funcional on </title>
    <link>https://www.wikiod.com/pt/docs/functional-programming/</link>
    <description>Recent content in Tutorial de programação funcional on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à programação funcional</title>
      <link>https://www.wikiod.com/pt/functional-programming/introducao-a-programacao-funcional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/functional-programming/introducao-a-programacao-funcional/</guid>
      <description>Funções puras # As funções puras são independentes e não têm efeitos colaterais. Dado o mesmo conjunto de entradas, uma função pura sempre retornará o mesmo valor de saída.
A seguinte função é pura:
function pure(data) { return data.total + 3; } No entanto, esta função não é pura, pois modifica uma variável externa:
function impure(data) { data.total += 3; return data.total; } Exemplo:
data = { total: 6 }; pure(data); // outputs: 9 impure(data); // outputs: 9 (but now data.</description>
    </item>
    
    <item>
      <title>Loops por funções recursivas e recursivas de cauda</title>
      <link>https://www.wikiod.com/pt/functional-programming/loops-por-funcoes-recursivas-e-recursivas-de-cauda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/functional-programming/loops-por-funcoes-recursivas-e-recursivas-de-cauda/</guid>
      <description>Como você já sabe, por uma questão de imutabilidade, você não pode processar dados usando loops for e while. Portanto, temos funções recursivas para resgatar.
não recursivo (onde a imutabilidade não é uma preocupação) # function sum(numbers) { var total = 0; for (var i = numbers.length - 1; i &amp;gt;= 0; i--) { total += numbers[i]; } return total; } É um código procedural com mutações (sobre total).
recursivo para resgatar # function sum(numbers) { if(numbers.</description>
    </item>
    
  </channel>
</rss>

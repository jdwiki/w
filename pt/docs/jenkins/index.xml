<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jenkins tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/jenkins/</link>
    <description>Recent content in jenkins tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jenkins/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Jenkins</title>
      <link>https://www.wikiod.com/pt/jenkins/comecando-com-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/comecando-com-jenkins/</guid>
      <description>Configurando o proxy Nginx # Nativamente, Jenkins é executado na porta 8080. Podemos estabelecer um proxy da porta 80 -&amp;gt; 8080 para que Jenkins possa ser acessado via:
http://&amp;lt;url&amp;gt;.com em vez do padrão
http://&amp;lt;url&amp;gt;.com:8080 Comece instalando o Nginx.
sudo aptitude -y install nginx
Remova as configurações padrão do Nginx
cd /etc/nginx/sites-available
sudo rm default ../sites-enabled/default
Crie o novo arquivo de configuração
sudo touch jenkins
Copie o seguinte código no arquivo jenkins recém-criado.</description>
    </item>
    
    <item>
      <title>Scripts Groovy Jenkins</title>
      <link>https://www.wikiod.com/pt/jenkins/scripts-groovy-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/scripts-groovy-jenkins/</guid>
      <description>Criar usuário padrão # Crie um arquivo groovy pelo caminho $JENKINS_HOME/init.groovy.d/basic-security.groovy No diretório inicial do Ubuntu 16 Jenkins coloca em /var/lib/jenkins
Coloque no arquivo o próximo código
#!groovy
import jenkins.model.* import hudson.security.*
def instance = Jenkins.getInstance()
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount(&amp;ldquo;admin_name&amp;rdquo;,&amp;ldquo;admin_password&amp;rdquo;) instance.setSecurityRealm(hudsonRealm) instance.save()
Reinicie o serviço Jenkins
Após o Jenkins iniciar, você precisa remover o arquivo $JENKINS_HOME/init.groovy.d/basic-security.groovy
Desativar o assistente de configuração # Abra o arquivo de configuração padrão do Jenkins e adicione a próxima chave JAVA_ARGS -Djenkins.</description>
    </item>
    
    <item>
      <title>Configurar o Auto Git Push na compilação bem-sucedida no Jenkins</title>
      <link>https://www.wikiod.com/pt/jenkins/configurar-o-auto-git-push-na-compilacao-bem-sucedida-no-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/configurar-o-auto-git-push-na-compilacao-bem-sucedida-no-jenkins/</guid>
      <description>Este documento o guiará pelas etapas para configurar um trabalho do Jenkins que permite ao usuário configurar o envio automático em uma compilação bem-sucedida. A operação de envio pode ser controlada pelo usuário. O usuário pode escolher se deseja executar a operação de envio automático na compilação bem-sucedida ou não.
Configurando o trabalho de envio automático # Crie um trabalho de construção (de acordo com sua necessidade). Para este exemplo, criei um trabalho de estilo livre (AutoPush) para executar a compilação ANT.</description>
    </item>
    
    <item>
      <title>Instale o Jenkins no Windows com suporte a SSH para repositórios privados do GitHub</title>
      <link>https://www.wikiod.com/pt/jenkins/instale-o-jenkins-no-windows-com-suporte-a-ssh-para-repositorios-privados-do-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/instale-o-jenkins-no-windows-com-suporte-a-ssh-para-repositorios-privados-do-github/</guid>
      <description>Falha nas solicitações de pull do GitHub # Instalações prontas para uso do Jenkins com os plugins Git e SSH não funcionarão ao tentar extrair um repositório privado do GitHub. PSExec.exe Ferramenta PS da Microsoft # O primeiro passo para corrigir esse problema que encontrei foi baixar PSTools e extrair as ferramentas para um local conveniente no servidor de compilação (por exemplo, c:\Programs\PSTools é lá que extraí o meu).
Gere uma nova chave SSH apenas para Jenkins usando PSExec ou PSExec64 # Primeiro abra o prompt de comando e &amp;ldquo;Executar como administrador&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Configurando o Jenkins para automação de compilação do iOS.</title>
      <link>https://www.wikiod.com/pt/jenkins/configurando-o-jenkins-para-automacao-de-compilacao-do-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/configurando-o-jenkins-para-automacao-de-compilacao-do-ios/</guid>
      <description>Agora você pode definir o processo de Integração Contínua e Entrega Contínua (CI/CD) como código com Jenkins 2.0 para seus projetos no iOS 10. Atividades como construir, testar, cobertura de código, verificar estilo, relatórios e notificações podem ser descrito em apenas um arquivo.
Para ler o artigo completo, acesse Pipeline in Jenkins 2.0 as Code for iOS 10 and XCode 8
Parâmetros # Parâmetro Detalhes node(&amp;lsquo;Nó iOS&amp;rsquo;) Nó Jenkins com Mac OS.</description>
    </item>
    
    <item>
      <title>Plugin de Estratégia de Função</title>
      <link>https://www.wikiod.com/pt/jenkins/plugin-de-estrategia-de-funcao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/plugin-de-estrategia-de-funcao/</guid>
      <description>Configuração # Gerenciar funções # Funções globais- Crie funções com um conjunto selecionado de recursos do Jenkins por exemplo. Normalmente, para um projeto de desenvolvimento, 2 funções podem ser criadas.
Desenvolvedor- A função global pode ser definida apenas como Geral: Leia ProjectOwner- A função global pode ser definida como Overall: Leia Isso restringe o desenvolvedor e o proprietário do projeto de ler o acesso a todos os recursos do Jenkins.</description>
    </item>
    
    <item>
      <title>Configurando o Build Automation para iOS usando Shenzhen</title>
      <link>https://www.wikiod.com/pt/jenkins/configurando-o-build-automation-para-ios-usando-shenzhen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jenkins/configurando-o-build-automation-para-ios-usando-shenzhen/</guid>
      <description>Configuração de automação de compilação do iOS usando Shenzhen # Parte I: Configure a máquina Mac para usar shenzhen
Ir para o terminal
Instalar Shenzhen
sudo gem install shenzhen
sudo gem install nomad-cli
Baixe o utilitário de linha de comando XCode
xcode-select &amp;ndash;install
Popup aparece com o texto abaixo
O comando xcode-select requer as ferramentas de desenvolvedor de linha de comando. Você gostaria de instalar as ferramentas agora?”
Clique - Instalar</description>
    </item>
    
  </channel>
</rss>

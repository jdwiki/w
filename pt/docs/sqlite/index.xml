<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial sqlite on </title>
    <link>https://www.wikiod.com/pt/docs/sqlite/</link>
    <description>Recent content in Tutorial sqlite on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com sqlite</title>
      <link>https://www.wikiod.com/pt/sqlite/comecando-com-sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sqlite/comecando-com-sqlite/</guid>
      <description>Instalação # SQLite é uma biblioteca C que normalmente é compilada diretamente no aplicativo [baixando](http://www.sqlite.org/ download.html) o código-fonte da versão mais recente e adicionando o arquivo sqlite3.c ao projeto.
Muitas linguagens de script (por exemplo, Perl, Python, Ruby, etc.) e estruturas (por exemplo, Android) têm suporte para SQLite; isso é feito com uma cópia integrada da biblioteca SQLite, que não precisa ser instalada separadamente.
Para testar o SQL, pode ser útil usar o shell de linha de comando (sqlite3 ou sqlite3.</description>
    </item>
    
    <item>
      <title>Declaração preparada sqlite3_stmt (API C)</title>
      <link>https://www.wikiod.com/pt/sqlite/declaracao-preparada-sqlite3_stmt-api-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sqlite/declaracao-preparada-sqlite3_stmt-api-c/</guid>
      <description>documentação oficial: Prepared Statement Object
Executando uma declaração # Uma instrução é construída com uma função como sqlite3_prepare_v2().
Um objeto de instrução preparado deve ser limpo com sqlite3_finalize(). Não se esqueça disso em caso de erro.
Se parâmetros forem usados, defina seus valores com as [funções sqlite3_bind_xxx()](http://www.sqlite.org/c3ref/bind_blob. html).
A execução real acontece quando sqlite3_step() é chamado.
const char *sql = &amp;quot;INSERT INTO MyTable(ID, Name) VALUES (?, ?)&amp;quot;; sqlite3_stmt *stmt; int err; err = sqlite3_prepare_v2(db, sql, -1, &amp;amp;stmt, NULL); if (err !</description>
    </item>
    
    <item>
      <title>Declarações PRAGMA</title>
      <link>https://www.wikiod.com/pt/sqlite/declaracoes-pragma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sqlite/declaracoes-pragma/</guid>
      <description>A documentação do SQLite tem uma referência de todas as instruções PRAGMA.
PRAGMAs com efeitos permanentes # A maioria das instruções PRAGMA afeta apenas a conexão do banco de dados atual, o que significa que elas precisam ser reaplicadas sempre que o banco de dados for aberto.
No entanto, os seguintes PRAGMAs gravam no arquivo de banco de dados e podem ser executados a qualquer momento (mas em alguns casos, não dentro de uma transação):</description>
    </item>
    
    <item>
      <title>Tipos de dados</title>
      <link>https://www.wikiod.com/pt/sqlite/tipos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sqlite/tipos-de-dados/</guid>
      <description>documentação oficial: Datatypes In SQLite Version 3
Tipos de data/hora # SQLite não tem tipo de dados separado para valores de data ou hora.
Cordas ISO8601 # As palavras-chave internas CURRENT_DATE, CURRENT_TIME e CURRENT_TIMESTAMP retornam strings no formato ISO8601:
&amp;gt; SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP; CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP ------------ ------------ ------------------- 2016-07-08 12:34:56 2016-07-08 12:34:56 Esses valores também são entendidos por todas as funções de data/hora incorporadas:
&amp;gt; SELECT strftime(&#39;%Y&#39;, &#39;2016-07-08&#39;); 2016 Números do dia juliano # As funções de data/hora incorporadas interpretam números como dias julianos:</description>
    </item>
    
    <item>
      <title>Comandos de ponto de linha de comando</title>
      <link>https://www.wikiod.com/pt/sqlite/comandos-de-ponto-de-linha-de-comando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sqlite/comandos-de-ponto-de-linha-de-comando/</guid>
      <description>O sqlite3 shell de linha de comando implementa um conjunto adicional de comandos (que não estão disponíveis em programas que usam a biblioteca SQLite).
Documentação oficial: Comandos especiais para sqlite3
Exportando e importando uma tabela como um script SQL # A exportação de um banco de dados é um processo simples de duas etapas:
sqlite&amp;gt; .output mydatabase_dump.sql sqlite&amp;gt; .dump A exportação de uma tabela é bastante semelhante:
sqlite&amp;gt; .output mytable_dump.sql sqlite&amp;gt; .</description>
    </item>
    
  </channel>
</rss>

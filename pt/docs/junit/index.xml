<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial junit on </title>
    <link>https://www.wikiod.com/pt/docs/junit/</link>
    <description>Recent content in Tutorial junit on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/junit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao junit</title>
      <link>https://www.wikiod.com/pt/junit/introducao-ao-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/introducao-ao-junit/</guid>
      <description>Capturar a exceção esperada # É possível capturar facilmente a exceção sem nenhum bloco try catch.
public class ListTest { private final List&amp;lt;Object&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); @Test(expected = IndexOutOfBoundsException.class) public void testIndexOutOfBoundsException() { list.get(0); } } O exemplo acima deve ser suficiente para casos mais simples, quando você não quer/precisa verificar a mensagem transportada pela exceção lançada.
Se você quiser verificar as informações sobre a exceção, você pode usar o bloco try/catch:</description>
    </item>
    
    <item>
      <title>Testando com DataProviders</title>
      <link>https://www.wikiod.com/pt/junit/testando-com-dataproviders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/testando-com-dataproviders/</guid>
      <description>Instalação e uso # Instalação:
Para usar DataProviders, você precisa de junit-dataprovider .jar :
Github
Download direto
Hamcrest-core-1.3.jar :
Github
Download direto
E adicione ambos .jar ao seu projeto.
Uso:
Adicione este import ao seu código:
import com.tngtech.java.junit.dataprovider.DataProvider; import com.tngtech.java.junit.dataprovider.DataProviderRunner; import com.tngtech.java.junit.dataprovider.UseDataProvider; Antes da declaração da sua classe:
@RunWith(DataProviderRunner.class) Então fica assim:
@RunWith(DataProviderRunner.class) public class example { //code } Como criar DataProviders:
Antes de qualquer função que você queira que seja um DataProvider, adicione este decorador:</description>
    </item>
    
    <item>
      <title>Testes</title>
      <link>https://www.wikiod.com/pt/junit/testes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/testes/</guid>
      <description>Parâmetro Contexto Detalhes @BeforeClass Estático Executado quando a classe é criada pela primeira vez @Antes Instância Executado antes de each test na classe @Teste Instância Deve ser declarado cada método a testar @Depois Instância Executado após cada teste na classe @AfterClass Estático Executado antes da destruição da classe Exemplo de formato de aula de teste
public class TestFeatureA { @BeforeClass public static void setupClass() {} @Before public void setupTest() {} @Test public void testA() {} @Test public void testB() {} @After public void tearDownTest() {} @AfterClass public static void tearDownClass() {} } } Medição de desempenho # Se você precisar verificar se o seu método de teste demora muito para ser executado, você pode fazer isso mencionando o tempo de execução esperado usando a propriedade timeout da anotação @Test.</description>
    </item>
    
    <item>
      <title>Gerar esqueleto de casos de teste Junit para código existente</title>
      <link>https://www.wikiod.com/pt/junit/gerar-esqueleto-de-casos-de-teste-junit-para-codigo-existente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/gerar-esqueleto-de-casos-de-teste-junit-para-codigo-existente/</guid>
      <description>Às vezes você precisa gerar o esqueleto para os casos de teste com base nas classes que você tem em seu projeto.
Gerar esqueleto de casos de teste Junit para código existente no Eclipse # Aqui estão as etapas para gerar o esqueleto de teste para o código existente:
Abra o Eclipse e escolha o projeto para o qual deseja criar casos de teste No Package Explorer, selecione a classe Java para a qual deseja gerar o teste Junit Vá para Arquivo -&amp;gt; Novo -&amp;gt; Junit Test Cases Altere a Pasta de origem para apontar para o teste usando Procurar (Observação: é melhor separar o código-fonte do código de teste) Altere o Pacote com base no pacote de destino desejado Em Class under test, certifique-se de inserir a classe para a qual deseja gerar os casos de teste.</description>
    </item>
    
    <item>
      <title>Ordem de Execução de Teste</title>
      <link>https://www.wikiod.com/pt/junit/ordem-de-execucao-de-teste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/ordem-de-execucao-de-teste/</guid>
      <description>Sintaxe # @FixMethodOrder // Executa o teste usando o classificador de método padrão @FixMethodOrder(MethodSorters) // Executa o teste usando MethodSorter associado ao MethodSorters enum. Pedido padrão # Use a anotação &amp;ndash; @FixMethodOrder(MethodSorters.DEFAULT). Isso executa todos os testes dentro da classe em uma ordem determinística e um tanto previsível. A implementação faz hash dos nomes dos métodos e os compara. No cenário de empate, classifica por ordem lexicográfica.
Segmento de código abaixo retirado do JUnit Github &amp;ndash; MethodSorter.</description>
    </item>
    
    <item>
      <title>Regras de teste personalizadas</title>
      <link>https://www.wikiod.com/pt/junit/regras-de-teste-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/regras-de-teste-personalizadas/</guid>
      <description>Há benefícios para ambos. Estender o ExternalResource é conveniente, especialmente se nós necessitarmos apenas de um before() para configurar algo.
No entanto, devemos estar cientes de que, como o método before() é executado fora do try...finally, qualquer código que seja necessário para fazer a limpeza em after() não será executado se há um erro durante a execução de before().
É assim que fica dentro de ExternalResource:
before(); try { base.evaluate(); } finally { after(); } Obviamente, se alguma exceção for lançada no próprio teste, ou por outra regra aninhada, o after ainda será executado.</description>
    </item>
    
    <item>
      <title>Testes de parametrização</title>
      <link>https://www.wikiod.com/pt/junit/testes-de-parametrizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/testes-de-parametrizacao/</guid>
      <description>Às vezes, você tem um teste que precisa executar várias vezes, cada vez com dados diferentes. A parametrização do teste permite fazer isso de maneira fácil e sustentável.
Sintaxe # @RunWith(Parameterized.class) //anotação para classe de teste @Parameters//anotação para dados
Um benefício de usar parâmetros é que, se um conjunto de dados falhar, a execução apenas passará para o próximo conjunto de dados em vez de interromper todo o teste.
Usando um Construtor # import static org.</description>
    </item>
    
    <item>
      <title>Ignorar casos de teste no Junit</title>
      <link>https://www.wikiod.com/pt/junit/ignorar-casos-de-teste-no-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/junit/ignorar-casos-de-teste-no-junit/</guid>
      <description>Às vezes você quer ignorar alguns dos casos de teste que você tem no Junit. Por exemplo, eles estão parcialmente prontos e você deseja voltar a eles mais tarde.
Ignorar caso de teste em Junit # Vá para o método de teste que deseja ignorar Antes da anotação @Test, digite @Ignore opcional: Você pode adicionar uma descrição por que você está ignorando este método de teste, algo como: @Ignore (&amp;quot;ignorando este caso de teste por enquanto&amp;quot;) um método de exemplo seria:</description>
    </item>
    
  </channel>
</rss>

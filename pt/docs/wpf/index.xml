<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial wpf on </title>
    <link>https://www.wikiod.com/pt/docs/wpf/</link>
    <description>Recent content in tutorial wpf on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com wpf</title>
      <link>https://www.wikiod.com/pt/wpf/comecando-com-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/comecando-com-wpf/</guid>
      <description>Aplicativo Olá Mundo # Para criar e executar um novo projeto WPF no Visual Studio:
Clique em Arquivo → Novo → Projeto Selecione o modelo clicando em Modelos → Visual C# → Windows → Aplicativo WPF e pressione OK: Abra o arquivo MainWindow.xaml no Solution Explorer (se você não vir a janela Solution Explorer, abra-a clicando em Exibir → Solution Explorer): Na seção XAML (por padrão abaixo da seção Design), adicione este código</description>
    </item>
    
    <item>
      <title>MVVM no WPF</title>
      <link>https://www.wikiod.com/pt/wpf/mvvm-no-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/mvvm-no-wpf/</guid>
      <description>Modelos e modelos de visualização
A definição de um modelo é frequentemente debatida acaloradamente, e a linha entre um modelo e um modelo de visualização pode ser borrada. Alguns preferem não &amp;ldquo;poluir&amp;rdquo; seus modelos com a interface INotifyPropertyChanged e, em vez disso, duplicar as propriedades do modelo no modelo de exibição, que implementa essa interface. Como muitas coisas no desenvolvimento de software, não há resposta certa ou errada. Seja pragmático e faça o que parecer certo.</description>
    </item>
    
    <item>
      <title>Criando tela inicial no WPF</title>
      <link>https://www.wikiod.com/pt/wpf/criando-tela-inicial-no-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/criando-tela-inicial-no-wpf/</guid>
      <description>Quando o aplicativo WPF é iniciado, pode demorar um pouco para que um tempo de execução de linguagem atual (CLR) inicialize o .NET Framework. Como resultado, a primeira janela do aplicativo pode aparecer algum tempo após o lançamento do aplicativo, dependendo da complexidade do aplicativo.
A tela inicial no WPF permite que o aplicativo mostre imagens estáticas ou conteúdo dinâmico personalizado durante a inicialização antes que a primeira janela apareça.</description>
    </item>
    
    <item>
      <title>Introdução à vinculação de dados WPF</title>
      <link>https://www.wikiod.com/pt/wpf/introducao-a-vinculacao-de-dados-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/introducao-a-vinculacao-de-dados-wpf/</guid>
      <description>Sintaxe # {Binding PropertyName} é equivalente a {Binding Path=PropertyName} {Binding Path=SomeProperty.SomeOtherProperty.YetAnotherProperty} {Binding Path=SomeListProperty1} Parâmetros # Parâmetro Detalhes Caminho Especifica o caminho para vincular. Se não especificado, vincula-se ao próprio DataContext. UpdateSourceTrigger Especifica quando a origem da ligação tem seu valor atualizado. O padrão é LostFocus. O valor mais usado é PropertyChanged. Modo Normalmente OneWay ou TwoWay. Se não for especificado pela vinculação, o padrão será OneWay, a menos que o destino da vinculação solicite que seja TwoWay.</description>
    </item>
    
    <item>
      <title>Conversores de valor e multivalor</title>
      <link>https://www.wikiod.com/pt/wpf/conversores-de-valor-e-multivalor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/conversores-de-valor-e-multivalor/</guid>
      <description>Parâmetros # Parâmetro Detalhes valor O valor produzido pela origem da associação. valores A matriz de valores, produzida pela origem da associação. targetType O tipo da propriedade de destino de associação. parâmetro O parâmetro do conversor a ser usado. cultura A cultura a ser usada no conversor. O que são IValueConverter e IMultiValueConverter # IValueConverter e IMultiValueConverter - interfaces que fornecem uma maneira de aplicar uma lógica personalizada a uma associação.</description>
    </item>
    
    <item>
      <title>Propriedades de dependência</title>
      <link>https://www.wikiod.com/pt/wpf/propriedades-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/propriedades-de-dependencia/</guid>
      <description>Propriedades de dependência são um tipo de propriedade que estende uma propriedade CLR. Enquanto uma propriedade CLR é lida diretamente de um membro de sua classe, uma propriedade de dependência será resolvida dinamicamente ao chamar o método GetValue() que seu objeto ganha por meio de herança da classe base DependencyObject.
Esta seção detalhará as Propriedades de Dependência e explicará seu uso conceitualmente e por meio de exemplos de código.
Sintaxe # DependencyProperty.</description>
    </item>
    
    <item>
      <title>Arquitetura WPF</title>
      <link>https://www.wikiod.com/pt/wpf/arquitetura-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/arquitetura-wpf/</guid>
      <description>DispatcherObject # Deriva de # Objeto
Membros-chave # public Dispatcher Dispatcher { get; } Resumo # A maioria dos objetos no WPF deriva de DispatcherObject, que fornece as construções básicas para lidar com simultaneidade e encadeamento. Esses objetos estão associados a um Dispatcher.
Somente o thread em que o Dispatcher foi criado pode acessar o DispatcherObject diretamente. Para acessar um DispatcherObject de um encadeamento diferente do encadeamento no qual o DispatcherObject foi criado, é necessária uma chamada para Invoke ou BeginInvoke no Dispatcher ao qual o objeto está associado.</description>
    </item>
    
    <item>
      <title>Estilos no WPF</title>
      <link>https://www.wikiod.com/pt/wpf/estilos-no-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/estilos-no-wpf/</guid>
      <description>Observações introdutórias # No WPF, um Estilo define os valores de uma ou mais propriedades de dependência para um determinado elemento visual. Os estilos são usados ​​em todo o aplicativo para tornar a interface do usuário mais consistente (por exemplo, dando a todos os botões de diálogo um tamanho consistente) e para facilitar as alterações em massa (por exemplo, alterando a largura de todos os botões).
Os estilos são normalmente definidos em um ResourceDictionary em um nível alto no aplicativo (por exemplo, em App.</description>
    </item>
    
    <item>
      <title>Comportamentos WPF</title>
      <link>https://www.wikiod.com/pt/wpf/comportamentos-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/comportamentos-wpf/</guid>
      <description>Os comportamentos do WPF permitem que um desenvolvedor altere a maneira como os controles do WPF atuam em resposta aos eventos do sistema e do usuário.
Os comportamentos são herdados da classe Behavior do namespace System.Windows.Interactity. Esse namespace faz parte do abrangente Expression Blend SDK, mas uma versão mais leve, adequada para bibliotecas de comportamento, está disponível como um pacote nuget.
Comportamento simples para interceptar eventos da roda do mouse # Implementando o Comportamento</description>
    </item>
    
    <item>
      <title>Localização WPF</title>
      <link>https://www.wikiod.com/pt/wpf/localizacao-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/wpf/localizacao-wpf/</guid>
      <description>O conteúdo dos controles pode ser localizado usando arquivos de recursos, assim como isso é possível nas classes. Para XAML existe uma sintaxe específica, que é diferente entre um aplicativo C# e um aplicativo VB.
Os passos são:
Para qualquer projeto WPF: torne o arquivo de recurso público, o padrão é interno. Para projetos C# WPF, use o XAML fornecido no exemplo Para projetos VB WPF, use o XAML fornecido no exemplo e altere a propriedade Custom Tool para PublicVbMyResourcesResXFileCodeGenerator.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Aurélia on </title>
    <link>https://www.wikiod.com/pt/docs/aurelia/</link>
    <description>Recent content in Tutorial Aurélia on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/aurelia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Aurélia</title>
      <link>https://www.wikiod.com/pt/aurelia/comecando-com-aurelia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/comecando-com-aurelia/</guid>
      <description>Hello World: Começando com aurelia-cli # Este exemplo mostrará como obter rapidamente um aplicativo hello world Aurelia em funcionamento usando a CLI do Aurelia.
Pré-requisitos # O Aurelia CLI é um aplicativo baseado em Node.js, portanto, certifique-se de instalá-lo antes de continuar. Você precisará do Node.js 4.4.7 ou posterior.
Você também precisará de um cliente Git instalado. Algumas ótimas opções incluem: Github Desktop, Sourcetree e Git SCM.
Instalando a CLI # Desde que você tenha instalado o Node.</description>
    </item>
    
    <item>
      <title>Conversores de valor</title>
      <link>https://www.wikiod.com/pt/aurelia/conversores-de-valor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/conversores-de-valor/</guid>
      <description>Esta seção fornece uma visão geral dos Conversores de Valor no Aurelia. Ele deve detalhar não apenas como criar um conversor de valor, mas também por que você pode querer usá-lo e muitos exemplos de tarefas básicas realizadas com o uso de um conversor de valor.
Os conversores de valor podem ser encadeados e usados ​​juntamente com outros recursos de associação no Aurelia, como comportamentos de associação.
Criando um conversor de valor básico # Embora os Conversores de Valor possam ser compostos por um método toView ou fromView, no exemplo abaixo estaremos criando um Conversor de Valor básico que apenas usa o método toView que aceita o valor que está sendo enviado para a visualização como o primeiro argumento.</description>
    </item>
    
    <item>
      <title>Aurelia CLI</title>
      <link>https://www.wikiod.com/pt/aurelia/aurelia-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/aurelia-cli/</guid>
      <description>Adicionando Bootstrap a um aplicativo CLI # Uma biblioteca CSS/Javascript comumente usada é Bootstrap. Para instalá-lo em seu aplicativo Aurelia CLI, primeiro você precisa instalá-lo usando Npm.
npm install bootstrap --save Como o Bootstrap tem uma dependência rígida do jQuery, precisamos ter certeza de que também temos o jQuery instalado:
npm install jquery --save Agora, em seu IDE/editor de código preferido, abra o seguinte arquivo no diretório do seu projeto: aurelia_project/aurelia.</description>
    </item>
    
    <item>
      <title>Elementos personalizados</title>
      <link>https://www.wikiod.com/pt/aurelia/elementos-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/elementos-personalizados/</guid>
      <description>Um elemento personalizado no Aurelia é usado para estender o conjunto básico de elementos HTML por componentes reutilizáveis ​​e enriquecidos com recursos. Um Custom Element normalmente existe a partir de dois arquivos, um View-Model baseado em Javasciprt e uma view correspondente escrita em HTML. Ambos os arquivos compõem o elemento HTML que pode ser usado em toda a aplicação como qualquer outro elemento HTML.
Criando um elemento personalizado com base em convenções de nomenclatura # Um elemento personalizado básico é criado no Aurelia com base em convenções de nomenclatura, simplesmente adicionando o sufixo CustomElement ao nome de uma classe.</description>
    </item>
    
    <item>
      <title>Aurelia CLI explicada</title>
      <link>https://www.wikiod.com/pt/aurelia/aurelia-cli-explicada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/aurelia-cli-explicada/</guid>
      <description>Como configurar o ambiente para Aurelia-cli explicado # SO: Mac OS X 10.11 (deve funcionar no Windows/Linux já que estamos usando o Vagrant) Vagrant 1.8.4 Installed Estrutura de diretório no sistema operacional host (Mac OS): /caminho/para/projeto /provision /packages Note: If you use different vesions, be sure to update Variables at top of provision.sh script below. atom.x86_64.rpm (Download: Atom) node-v6.4.0-linux-x64.tar.xz (Download: Node) /vagrant Vagrantfile (File contents below) provision.sh (File contents below) Iniciando a máquina virtual ($ == prompt do terminal) In Mac OS Terminal $cd /path/to/project/vagrant $vagrant up Downloads CentOS 7 vagrant box, runs provision script Launches VM window outside of your Mac OS terminal When all done, log into VM using gui User: vagrant PW: vagrant Launch X Windows: $startx (Starts a Gnome UI) Configurando a VM Launch a Terminal window (Applications Drop Down Menu / Utilities) Set up sudo to run &amp;ldquo;npm&amp;rdquo; Get path to npm: $which npm (/opt/node-v6.</description>
    </item>
    
    <item>
      <title>Vinculativo</title>
      <link>https://www.wikiod.com/pt/aurelia/vinculativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/vinculativo/</guid>
      <description>Vinculando a caixas de seleção # Caixas de seleção básicas
export class MyViewModel { favoriteColors = []; colors = [&#39;Red&#39;, &#39;Yellow&#39;, &#39;Pink&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Blue&#39;]; } &amp;lt;template&amp;gt; &amp;lt;label repeat.for=&amp;quot;color of colors&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; value.bind=&amp;quot;color&amp;quot; checked.bind=&amp;quot;favoriteColors&amp;quot; /&amp;gt; ${color} &amp;lt;/label&amp;gt; &amp;lt;p&amp;gt;Favourite colors:&amp;lt;/p&amp;gt; &amp;lt;ul if.bind=&amp;quot;favoriteColors&amp;quot;&amp;gt; &amp;lt;li repeat.for=&amp;quot;color of favoriteColors&amp;quot;&amp;gt;${color}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt; Caixas de seleção com matrizes de objetos
export class MyViewModel { people = []; selectedPeople = []; constructor() { this.people = [ {name: &#39;John Michaels&#39;}, {name: &#39;Gary Stevens&#39;}, {name: &#39;Carrie Smitch&#39;}, {name: &#39;Jesus Wohau&#39;} ]; } } &amp;lt;template&amp;gt; &amp;lt;label repeat.</description>
    </item>
    
    <item>
      <title>Injeção de dependência</title>
      <link>https://www.wikiod.com/pt/aurelia/injecao-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/injecao-de-dependencia/</guid>
      <description>Se injetar mais de uma classe, a ordem em que você as coloca na instrução @inject() não importa. No entanto, a ordem em que aparecem na instrução @inject() deve corresponder à ordem dos parâmetros no construtor.
Obter e exibir nome de usuário por ID # import {User} from &#39;backend/user&#39;; // import custom class import {inject} from &#39;aurelia-framework&#39;; // allows us to inject @inject(User) // inject custom class export class ProfileView { constructor(user) { // use instance of custom class as a parameter to the constructor this.</description>
    </item>
    
    <item>
      <title>Modelagem</title>
      <link>https://www.wikiod.com/pt/aurelia/modelagem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/modelagem/</guid>
      <description>Criando um modelo básico # No Aurelia todos os templates HTML são definidos dentro das tags de abertura e fechamento &amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;. Toda a sua lógica específica de HTML e Aurelia vai dentro dessas tags de modelo e não pode existir fora delas.
&amp;lt;template&amp;gt; &amp;lt;/template&amp;gt; Trabalhando com Loops Usando &amp;ldquo;repeat.for&amp;rdquo; # Fazer um loop sobre um iterável definido dentro de seu viewmodel ou passado como um vinculável (se um atributo personalizado ou elemento personalizado) puder ser feito assim.</description>
    </item>
    
    <item>
      <title>Trabalhando com &lt;compose&gt;</title>
      <link>https://www.wikiod.com/pt/aurelia/trabalhando-com-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/aurelia/trabalhando-com-compose/</guid>
      <description>Compor apenas com visualização # Presumivelmente, a maneira mais simples de usar compose é apenas com uma View. Isso permite incluir modelos HTML sem a necessidade de declarar um ViewModel com propriedades vinculáveis ​​para cada um deles, facilitando a reutilização de partes menores de HTML.
O BindingContext (ViewModel) do View será definido como o do ViewModel pai.
Uso:
src/app.html
&amp;lt;template&amp;gt; &amp;lt;compose view=&amp;quot;./greeter.html&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt; &amp;lt;/template&amp;gt; src/greeter.html
&amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;Hello, ${name}!&amp;lt;/h1&amp;gt; &amp;lt;/template&amp;gt; src/app.ts
export class App { /* This property is directly available to the child view because it does not have its own ViewModel */ name = &amp;quot;Rob&amp;quot;; } Compor com View, ViewModel e Model # Usar compose com uma View, ViewModel e Model é uma maneira fácil de reutilizar e combinar diferentes Views e ViewModels.</description>
    </item>
    
  </channel>
</rss>

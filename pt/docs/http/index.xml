<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial HTTP on </title>
    <link>https://www.wikiod.com/pt/docs/http/</link>
    <description>Recent content in Tutorial HTTP on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao HTTP</title>
      <link>https://www.wikiod.com/pt/http/introducao-ao-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/introducao-ao-http/</guid>
      <description>HTTP/2 # Solicitações e respostas HTTP # HTTP descreve como um cliente HTTP, como um navegador da Web, envia uma solicitação HTTP por meio de uma rede para um servidor HTTP, que então envia uma resposta HTTP de volta ao cliente.
A solicitação HTTP normalmente é uma solicitação de um recurso online, como uma página da Web ou imagem, mas também pode incluir informações adicionais, como dados inseridos em um formulário.</description>
    </item>
    
    <item>
      <title>Solicitações HTTP</title>
      <link>https://www.wikiod.com/pt/http/solicitacoes-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/solicitacoes-http/</guid>
      <description>Parâmetros # Método HTTP Finalidade OPÇÕES Recupere informações sobre as opções de comunicação (métodos e cabeçalhos disponíveis) disponíveis no URI de solicitação especificado. GET Recupere os dados identificados pelo URI de solicitação ou os dados produzidos pelo script disponíveis no URI de solicitação. CABEÇA Idêntico ao GET exceto que nenhum corpo da mensagem será retornado pelo servidor: somente cabeçalhos. POST Envie um bloco de dados (especificado no corpo da mensagem) ao servidor para adição ao recurso especificado no URI de solicitação.</description>
    </item>
    
    <item>
      <title>Códigos de status HTTP</title>
      <link>https://www.wikiod.com/pt/http/codigos-de-status-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/codigos-de-status-http/</guid>
      <description>No HTTP, os códigos de status são um mecanismo legível por máquina que indica o resultado de uma solicitação emitida anteriormente. De RFC 7231, seg. 6: &amp;ldquo;O elemento status-code é um código inteiro de três dígitos que fornece o resultado da tentativa de entender e satisfazer a solicitação.&amp;rdquo;
A gramática formal permite que os códigos sejam qualquer coisa entre 000 e 999. No entanto, apenas o intervalo de 100 a 599 atribuiu significado.</description>
    </item>
    
    <item>
      <title>Respostas HTTP</title>
      <link>https://www.wikiod.com/pt/http/respostas-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/respostas-http/</guid>
      <description>Parâmetros # Código de estado Frase-Motivo — Descrição 100 Continue — o cliente deve enviar a seguinte parte de uma solicitação de várias partes. 101 Protocolos de comutação — o servidor está alterando a versão ou o tipo de protocolo usado nesta comunicação. 200 OK — o servidor recebeu e concluiu a solicitação do cliente. 201 Criado — o servidor aceitou a solicitação e criou um novo recurso, que está disponível no URI no cabeçalho Localização.</description>
    </item>
    
    <item>
      <title>Como armazenar respostas HTTP em cache</title>
      <link>https://www.wikiod.com/pt/http/como-armazenar-respostas-http-em-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/como-armazenar-respostas-http-em-cache/</guid>
      <description>As respostas são armazenadas em cache separadamente para cada URL e cada método HTTP.
O cache HTTP é definido em RFC 7234.
Glossário # fresh — estado de uma resposta em cache, que ainda não expirou. Normalmente, uma nova resposta pode satisfazer solicitações sem a necessidade de entrar em contato com o servidor de onde a resposta foi originada. stale — estado de uma resposta em cache, que já passou da data de expiração.</description>
    </item>
    
    <item>
      <title>Autenticação</title>
      <link>https://www.wikiod.com/pt/http/autenticacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/autenticacao/</guid>
      <description>Parâmetros # Parâmetro Detalhes Estado da resposta 401 se o servidor de origem exigir autenticação, [407](https://tools.ietf.org/html/rfc7235 #section-3.2) se um proxy intermediário requer autenticação Cabeçalhos de resposta WWW-Authenticate pelo servidor de origem, [Proxy-Authenticate](https://tools.ietf.org/html /rfc7235#section-4.3) por um proxy intermediário Cabeçalhos de solicitação Authorization para autorização em um servidor de origem, [Proxy-Authorization](https://tools.ietf.org/html /rfc7235#section-4.4) em relação a um proxy intermediário Esquema de autenticação Basic para autenticação básica, mas outros como Digest e SPNEGO podem ser usados.</description>
    </item>
    
    <item>
      <title>Codificações e compactação de resposta</title>
      <link>https://www.wikiod.com/pt/http/codificacoes-e-compactacao-de-resposta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/codificacoes-e-compactacao-de-resposta/</guid>
      <description>Compressão HTTP # O corpo da mensagem HTTP pode ser compactado (desde HTTP/1.1). Ou pelo servidor compacta a solicitação e adiciona um cabeçalho Content-Encoding, ou por um proxy faz e adiciona um cabeçalho Transfer-Encoding.
Um cliente pode enviar um cabeçalho de solicitação Accept-Encoding para indicar quais codificações ele aceita.
As codificações mais usadas são:
gzip - algoritmo deflate (LZ77) com checksum CRC32 implementado no programa de compressão do arquivo &amp;ldquo;gzip&amp;rdquo; (RFC1952) deflate - formato de dados &amp;ldquo;zlib&amp;rdquo; (RFC1950), algoritmo deflate (híbrido LZ77 e Huffman) com soma de verificação Adler32 Vários métodos de compactação # É possível compactar um corpo de mensagem de resposta HTTP mais de uma vez.</description>
    </item>
    
    <item>
      <title>HTTP para APIs</title>
      <link>https://www.wikiod.com/pt/http/http-para-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/http-para-apis/</guid>
      <description>As APIs HTTP usam um amplo espectro de verbos HTTP e normalmente retornam respostas JSON ou XML.
Crie um recurso # Nem todos concordam sobre qual é o método semanticamente mais correto para a criação de recursos. Assim, sua API pode aceitar solicitações POST ou PUT, ou qualquer um.
O servidor deve responder com 201 Created se o recurso foi criado com sucesso. Escolha o código de erro mais apropriado se não for.</description>
    </item>
    
    <item>
      <title>Origem cruzada e controle de acesso</title>
      <link>https://www.wikiod.com/pt/http/origem-cruzada-e-controle-de-acesso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/http/origem-cruzada-e-controle-de-acesso/</guid>
      <description>Compartilhamento de recursos de origem cruzada foi projetado para permitir solicitações dinâmicas entre domínios, geralmente usando técnicas como AJAX. Embora o script faça a maior parte do trabalho, o servidor HTTP deve oferecer suporte à solicitação usando os cabeçalhos corretos.
Cliente: enviando uma solicitação de compartilhamento de recursos entre origens (CORS) # Uma solicitação de origem cruzada deve ser enviada incluindo o cabeçalho &amp;ldquo;Origem&amp;rdquo;. Isso indica de onde a solicitação se originou.</description>
    </item>
    
  </channel>
</rss>

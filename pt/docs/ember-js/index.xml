<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial ember.js on </title>
    <link>https://www.wikiod.com/pt/docs/ember-js/</link>
    <description>Recent content in Tutorial ember.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/ember-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao ember.js</title>
      <link>https://www.wikiod.com/pt/ember-js/introducao-ao-emberjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/introducao-ao-emberjs/</guid>
      <description>Instalação ou configuração # Começar com o Ember é fácil. Projetos Ember são criados e gerenciados através de nossa ferramenta de construção de linha de comando Ember CLI. Esta ferramenta fornece:
Gerenciamento de ativos de aplicativos modernos (incluindo concatenação, minificação e controle de versão). Geradores para ajudar a criar componentes, rotas e muito mais. Um layout de projeto convencional, facilitando a abordagem dos aplicativos Ember existentes. Suporte para JavaScript ES2015/ES6 através do projeto Babel.</description>
    </item>
    
    <item>
      <title>Tarefas assíncronas em componentes</title>
      <link>https://www.wikiod.com/pt/ember-js/tarefas-assincronas-em-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/tarefas-assincronas-em-componentes/</guid>
      <description>em ember-concurrency a configuração extra de error é uma solução para evitar que exceções lançadas borbulhem até o onerror do Ember (já que ele deve ser tratado no template). Existe uma solicitação de recurso para lidar melhor com isso.
tarefa de simultaneidade ember # Um padrão alternativo de fato da comunidade é um addon chamado ember-concurrency que faz com que grande parte da confusão da promessa desapareça.
Ele pode ser instalado com o comando ember install ember-concurrency.</description>
    </item>
    
    <item>
      <title>Componente - comunicação entre o componente filho e o componente pai.</title>
      <link>https://www.wikiod.com/pt/ember-js/componente---comunicacao-entre-o-componente-filho-e-o-componente-pai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/componente---comunicacao-entre-o-componente-filho-e-o-componente-pai/</guid>
      <description>Sintaxe # (yield &amp;ndash; Permite exportar itens de um componente (hash &amp;ndash; Permite exportar um hash ou objeto, pois isso é necessário para chamar componentes filho dentro do bloco pai. O requisito é que haja um . para o componente a ser criado (component &amp;ndash; Cria o componente filho que pode pegar qualquer coisa no contexto do pai. O componente pode ser curry, já que ele só é chamado quando o usuário o usa, então adicione quantos atributos você precisar, e o usuário pode adicione o restante.</description>
    </item>
    
    <item>
      <title>Como atualizar Ember, Ember Data e Ember CLI</title>
      <link>https://www.wikiod.com/pt/ember-js/como-atualizar-ember-ember-data-e-ember-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/como-atualizar-ember-ember-data-e-ember-cli/</guid>
      <description>Para encontrar a versão estável mais recente do Ember, clique aqui. Para encontrar a versão estável mais recente do Ember Data, clique aqui. Para encontrar a versão estável mais recente do Ember CLI, clique aqui. Todas essas etapas foram encontradas em nota de versão do Ember cli.
Atualizando CLI do Ember # Ember CLI é um pacote npm normal. Para atualizá-lo, precisamos desinstalá-lo e instalar a versão que queremos.</description>
    </item>
    
    <item>
      <title>Depuração</title>
      <link>https://www.wikiod.com/pt/ember-js/depuracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/depuracao/</guid>
      <description>Executando código somente de depuração # Ember tem um método global estático chamado runInDebug que pode executar uma função destinada à depuração.
Ember.runInDebug(() =&amp;gt; { // this code only runs in dev mode }); Em uma compilação de produção, esse método é definido como uma função vazia (NOP). Os usos deste método no próprio Ember são retirados da compilação ember.prod.js.
Registrando EmberData # Os modelos de dados ember têm um método toJSON que extrai os dados relevantes:</description>
    </item>
    
    <item>
      <title>Auxiliar de modelo de formatação de moeda</title>
      <link>https://www.wikiod.com/pt/ember-js/auxiliar-de-modelo-de-formatacao-de-moeda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/auxiliar-de-modelo-de-formatacao-de-moeda/</guid>
      <description>Mais detalhes disponíveis em Guias Ember, de onde este exemplo foi retirado.
Compatível com Ember 2.2.0+ (2.11.0 era o mais recente no momento da escrita)
Criando um novo auxiliar # Use o Ember CLI para gerar um novo auxiliar em seu aplicativo:
ember gera moeda de formato auxiliar
Em seguida, edite helpers/format-currency.js para conter o seguinte:
import Ember from &#39;ember&#39;; export function formatCurrency([value, ...rest]) { const dollars = Math.floor(value / 100); const cents = value % 100; const sign = &#39;$&#39;; if (cents.</description>
    </item>
    
    <item>
      <title>Como importar bibliotecaplugin JavaScript</title>
      <link>https://www.wikiod.com/pt/ember-js/como-importar-bibliotecaplugin-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/como-importar-bibliotecaplugin-javascript/</guid>
      <description>Abra o diretório do seu projeto ember.js, você encontrará lá um arquivo chamado ember-cli-build.js. Você pode instalar Suas bibliotecas ou plugins usando o bower, depois apontar a importação para a pasta bower_components, mas se você tiver um arquivo que deseja adicionar, basta arrastá-los para a pasta do seu projeto e gravar o app.import nesse arquivo.
Sintaxe # app.import(&amp;lsquo;caminho para o arquivo a partir da pasta/arquivo.js do projeto&amp;rsquo;); Exemplo de arquivo ember-cli-build.</description>
    </item>
    
    <item>
      <title>Inicialize Foundation ou Bootstrap no ember-cli de maneira adequada</title>
      <link>https://www.wikiod.com/pt/ember-js/inicialize-foundation-ou-bootstrap-no-ember-cli-de-maneira-adequada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/inicialize-foundation-ou-bootstrap-no-ember-cli-de-maneira-adequada/</guid>
      <description>Bootstrap: Eu acho que não é a maneira correta. A melhor maneira na minha opinião é um addon ember-bootstrap.
O ember-bootstrap usa as classes CSS do Bootstrap enquanto substitui os comportamentos dos componentes que o Bootstrap implementa no bootstrap.js, como alternância, barra de navegação, modal etc., por componentes Ember nativos compatíveis com classes CSS equivalentes.
Fundação: Existe um addon chamado Ember CLI Foundation 6 SASS, ele também é instalado usando a linha de comando.</description>
    </item>
    
    <item>
      <title>Auxiliar de formato de data</title>
      <link>https://www.wikiod.com/pt/ember-js/auxiliar-de-formato-de-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/auxiliar-de-formato-de-data/</guid>
      <description>Auxiliar para um formato limpo de data e hora. # Quando você quiser a data e hora atuais, você pode fazer isso com a função Javascript Date, mas retornará o seguinte formato que nem sempre é útil: `Wed Jun 07 2017 13:26:15 GMT+0200 (Romance ( zomertijd))».
Copie o código a seguir em app/helpers/helpers.js e simplesmente chame getCurrentDateAndFormat() em vez de new Date().
export function getCurrentDateAndFormat() { let today = new Date(); let dd = today.</description>
    </item>
    
    <item>
      <title>Teste</title>
      <link>https://www.wikiod.com/pt/ember-js/teste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/ember-js/teste/</guid>
      <description>Criar e manter um conjunto de testes abrangente deve ser uma prioridade para cada desenvolvedor. Testar em Ember.js envolve lidar com assincronia, Ember Run Loop e simular sua API. É comum que os desenvolvedores do Ember.js tenham dificuldades ao escrever testes. No entanto, existem algumas dicas que podem economizar seu tempo e energia.
Aguardando promessas em testes de forma elegante # Você pode fazer function passado para o método test() async - então você pode usar a palavra-chave await.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de estruturas de dados on </title>
    <link>https://www.wikiod.com/pt/docs/data-structures/</link>
    <description>Recent content in Tutorial de estruturas de dados on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução às estruturas de dados</title>
      <link>https://www.wikiod.com/pt/data-structures/introducao-as-estruturas-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/introducao-as-estruturas-de-dados/</guid>
      <description>Introdução às estruturas de dados # Uma estrutura de dados é uma maneira de organizar e armazenar informações.
Deixe um &amp;ldquo;Olá, Mundo!&amp;rdquo; string seja a informação que precisamos para organizar e armazenar na memória endereçável por byte.
Cada caractere ASCII requer 7 bits de armazenamento. A maioria dos sistemas reserva 8 bits (1 byte) para cada caractere, então cada caractere em &amp;ldquo;Hello, World!&amp;rdquo; é armazenado em uma unidade de memória de tamanho de byte individual, um após o outro, consecutivamente.</description>
    </item>
    
    <item>
      <title>Lista vinculada</title>
      <link>https://www.wikiod.com/pt/data-structures/lista-vinculada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/lista-vinculada/</guid>
      <description>Lista vinculada XOR # Uma Lista vinculada XOR também é chamada de Lista vinculada com eficiência de memória. É outra forma de uma lista duplamente ligada. Isso depende muito da porta lógica XOR e de suas propriedades.
Por que isso é chamado de lista vinculada com eficiência de memória? Isso é chamado assim porque usa menos memória do que uma lista duplamente vinculada tradicional.
*Isso é diferente de uma lista duplamente vinculada?</description>
    </item>
    
    <item>
      <title>Trie (Árvore PrefixoÁrvore Radix)</title>
      <link>https://www.wikiod.com/pt/data-structures/trie-arvore-prefixoarvore-radix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/trie-arvore-prefixoarvore-radix/</guid>
      <description>Introdução ao Trie # Você já se perguntou como funcionam os mecanismos de busca? Como o Google alinha milhões de resultados à sua frente em apenas alguns milissegundos? Como um enorme banco de dados situado a milhares de quilômetros de você descobre as informações que você está procurando e as envia de volta para você? A razão por trás disso não é possível apenas usando internet mais rápida e supercomputadores. Alguns algoritmos de pesquisa e estruturas de dados fascinantes funcionam por trás disso.</description>
    </item>
    
    <item>
      <title>Árvore de pesquisa binária</title>
      <link>https://www.wikiod.com/pt/data-structures/arvore-de-pesquisa-binaria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/arvore-de-pesquisa-binaria/</guid>
      <description>Criando um nó no BST # A Binary Search Tree (BST) é uma estrutura de dados hierárquica com um único ponteiro para o nó raiz.
O Node no BST geralmente contém &amp;ldquo;itens&amp;rdquo; (como números ou nomes) para pesquisa rápida. Cada nó tem no máximo dois filhos (esquerda e direita). Cada nó é organizado por algum campo de dados chave. Para cada nó em BST sua chave é maior que a chave do filho esquerdo e menor que a chave do filho direito</description>
    </item>
    
    <item>
      <title>Pilha</title>
      <link>https://www.wikiod.com/pt/data-structures/pilha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/pilha/</guid>
      <description>Introdução à pilha # A pilha é uma estrutura de dados LIFO (last-in, first-out), ou seja, o elemento mais recente (ou &amp;ldquo;last in&amp;rdquo;) adicionado à pilha será o primeiro elemento removido (&amp;ldquo;first out&amp;rdquo;).
Consideremos o exemplo dos livros em uma caixa. Apenas um livro pode ser adicionado ou removido da caixa por vez, e só pode ser adicionado e removido pela parte superior.
Agora, a caixa com os dois primeiros livros fica assim:</description>
    </item>
    
    <item>
      <title>Árvore de segmentos</title>
      <link>https://www.wikiod.com/pt/data-structures/arvore-de-segmentos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/arvore-de-segmentos/</guid>
      <description>Introdução à árvore de segmentos # Suponha que temos um array:
+-------+-----+-----+-----+-----+-----+-----+ | Index | 0 | 1 | 2 | 3 | 4 | 5 | +-------+-----+-----+-----+-----+-----+-----+ | Value | -1 | 3 | 4 | 0 | 2 | 1 | +-------+-----+-----+-----+-----+-----+-----+ Queremos realizar alguma consulta neste array. Por exemplo:
Qual é o mínimo do índice-2 ao índice-4? -&amp;gt; 0 Qual é o máximo de index-0 para index-3? -&amp;gt; 4 Qual é a soma do índice-1 ao índice-5?</description>
    </item>
    
    <item>
      <title>Fila</title>
      <link>https://www.wikiod.com/pt/data-structures/fila/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/fila/</guid>
      <description>Introdução à fila # A fila é uma estrutura de dados FIFO (first-in, first-out), ou seja, o primeiro elemento adicionado à fila será o primeiro elemento removido (&amp;ldquo;first out&amp;rdquo;).
Consideremos o exemplo de clientes esperando para serem atendidos. Alice, Bob e Dan estão todos no supermercado. Alice está pronta para pagar, então ela se aproxima do caixa. Alice está agora na fila. Ela é a única pessoa na fila, então ela está na frente e atrás.</description>
    </item>
    
    <item>
      <title>Percursos de gráfico</title>
      <link>https://www.wikiod.com/pt/data-structures/percursos-de-grafico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/percursos-de-grafico/</guid>
      <description>Todos os algoritmos relacionados a travessias de grafos. Suas complexidades, tanto em tempo de execução quanto em espaço
Primeira pesquisa de profundidade # O Depth First Traversal (ou Search) para um gráfico é semelhante ao Depth First Traversal de uma árvore. O único problema aqui é que, diferentemente das árvores, os grafos podem conter ciclos, então podemos chegar ao mesmo nó novamente. Para evitar o processamento de um nó mais de uma vez, usamos uma matriz booleana visitada.</description>
    </item>
    
    <item>
      <title>Deque (fila com dupla terminação)</title>
      <link>https://www.wikiod.com/pt/data-structures/deque-fila-com-dupla-terminacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/deque-fila-com-dupla-terminacao/</guid>
      <description>Inserção e exclusão do início e do fim da fila # </description>
    </item>
    
    <item>
      <title>Estrutura de dados de localização de união</title>
      <link>https://www.wikiod.com/pt/data-structures/estrutura-de-dados-de-localizacao-de-uniao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/data-structures/estrutura-de-dados-de-localizacao-de-uniao/</guid>
      <description>Uma estrutura de dados union-find (ou disjoint-set) é uma estrutura de dados simples, uma partição de um número de elementos em conjuntos disjuntos. Cada conjunto tem um representante que pode ser usado para distingui-lo dos outros conjuntos.
É usado em muitos algoritmos, por exemplo. calcular árvores geradoras mínimas através do algoritmo de Kruskal, calcular componentes conectados em grafos não direcionados e muito mais.
Teoria # As estruturas de dados de localização de união fornecem as seguintes operações:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Visual Basic .NET on </title>
    <link>https://www.wikiod.com/pt/docs/vb-dotnet/</link>
    <description>Recent content in Tutorial de linguagem Visual Basic .NET on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/vb-dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Visual Basic .NET</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/introducao-a-linguagem-visual-basic-net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/introducao-a-linguagem-visual-basic-net/</guid>
      <description>Olá Mundo # Primeiro, instale uma versão do Microsoft Visual Studio, incluindo a edição gratuita da Comunidade. Em seguida, crie um projeto Visual Basic Console Application do tipo Console Application e o código a seguir imprimirá a string &#39;Hello World&#39; no Console:
Module Module1 Sub Main() Console.WriteLine(&amp;quot;Hello World&amp;quot;) End Sub End Module Em seguida, salve e pressione F5 no teclado (ou vá para o menu Debug e clique em Executar sem Depurar ou Executar) para compilar e executar o programa.</description>
    </item>
    
    <item>
      <title>Recursos do Visual Basic 14.0</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/recursos-do-visual-basic-140/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/recursos-do-visual-basic-140/</guid>
      <description>Visual Basic 14 é a versão do Visual Basic que foi enviada como parte do Visual Studio 2015.
Esta versão foi reescrita do zero em cerca de 1,3 milhão de linhas de VB. Muitos recursos foram adicionados para remover irritações comuns e tornar os padrões de codificação comuns mais limpos.
O número da versão do Visual Basic foi direto de 12 para 14, pulando 13. Isso foi feito para manter o VB alinhado com a numeração de versão do próprio Visual Studio.</description>
    </item>
    
    <item>
      <title>Variedade</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/variedade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/variedade/</guid>
      <description>Dim myArray(2) As Integer someFunc(myArray) Um array é uma coleção de objetos ordenados por índice. O tipo de objeto é definido pelo tipo fornecido na declaração do array.
Matrizes no Visual Basic .NET são mais comumente (e por padrão) baseadas em zero (0), o que significa que o primeiro índice é 0. Uma matriz de 10 elementos terá um intervalo de índice de 0 a 9. Ao acessar elementos da matriz, o índice máximo acessível é um a menos que o número total de elementos.</description>
    </item>
    
    <item>
      <title>Loop</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/loop/</guid>
      <description>A seguir # O loop For&amp;hellip;Next é usado para repetir a mesma ação por um número finito de vezes. As instruções dentro do loop a seguir serão executadas 11 vezes. Na primeira vez, i terá o valor 0, na segunda vez terá o valor 1, a última vez terá o valor 10.
For i As Integer = 0 To 10 &#39;Execute the action Console.Writeline(i.ToString) Next Qualquer expressão inteira pode ser usada para parametrizar o loop.</description>
    </item>
    
    <item>
      <title>Enum</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/enum/</guid>
      <description>ObterNomes() # Retorna os nomes das constantes no Enum especificado como uma matriz de strings:
Module Module1 Enum Size Small Medium Large End Enum Sub Main() Dim sizes = [Enum].GetNames(GetType(Size)) For Each size In sizes Console.WriteLine(size) Next End Sub End Module Resultado:
Pequeno
Médio
Grande
TemFlag() # O método HasFlag() pode ser usado para verificar se um sinalizador está definido.
Module Module1 &amp;lt;Flags&amp;gt; Enum Material Wood = 1 Plastic = 2 Metal = 4 Stone = 8 End Enum Sub Main() Dim houseMaterials As Material = Material.</description>
    </item>
    
    <item>
      <title>Opção Estrita</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/opcao-estrita/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/opcao-estrita/</guid>
      <description>Sintaxe # Opção Estrita { Ligado | Desligado } Option Strict On é uma boa prática recomendada com Visual Basic .Net. Ele ajuda você como desenvolvedor a produzir um código mais limpo, mais estável, mais livre de bugs e mais sustentável. Em alguns casos, também pode ajudá-lo a escrever programas com melhor desempenho, evitando coisas como Conversão Implícita.
On não é a configuração padrão para uma nova instalação do Visual Studio.</description>
    </item>
    
    <item>
      <title>Palavras-chave OOP</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/palavras-chave-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/palavras-chave-oop/</guid>
      <description>Definindo uma classe # Classes são aspectos vitais da OOP. Uma classe é como o &amp;ldquo;projeto&amp;rdquo; de um objeto. Um objeto tem as propriedades de uma classe, mas as características não são definidas dentro da própria classe. Como cada objeto pode ser diferente, eles definem suas próprias características.
Public Class Person End Class Public Class Customer End Class Uma classe também pode conter subclasses. Uma subclasse herda as mesmas propriedades e comportamentos de sua classe pai, mas pode ter suas próprias propriedades e classes exclusivas.</description>
    </item>
    
    <item>
      <title>Introdução à Sintaxe</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/introducao-a-sintaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/introducao-a-sintaxe/</guid>
      <description>Auxiliar Intellisense # Uma coisa interessante é a capacidade de adicionar seus próprios comentários ao Visual Studio Intellisense. Assim, você pode fazer suas próprias funções e classes escritas autoexplicativas. Para fazer isso, você deve digitar o símbolo de comentário três vezes a linha acima de sua função.
Uma vez feito, o Visual Studio adicionará automaticamente uma documentação XML:
&#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; This function returns a hello to your name &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;Name&amp;quot;&amp;gt;Your Name&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; &#39;&#39;&#39; &amp;lt;remarks&amp;gt;&amp;lt;/remarks&amp;gt; Public Function Test(Name As String) As String Return &amp;quot;Hello &amp;quot; &amp;amp; Name End Function Depois disso, se você digitar sua função Test em algum lugar do seu código, esta pequena ajuda aparecerá:</description>
    </item>
    
    <item>
      <title>Rosqueamento</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/rosqueamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/rosqueamento/</guid>
      <description>Executando chamadas thread-safe usando Control.Invoke() # Usando o método Control.Invoke() você pode mover a execução de um método ou função de uma thread em segundo plano para a thread em que o controle foi criado, que geralmente é a thread UI (User Interface). Ao fazer isso, seu código será enfileirado para ser executado no thread do controle, o que elimina a possibilidade de simultaneidade.
A propriedade Control.InvokeRequired também deve ser verificada para determinar se você precisa invocar ou se o código já está sendo executado no mesmo thread que o controle.</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/pt/vb-dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vb-dotnet/linq/</guid>
      <description>LINQ (Language Integrated Query) é uma expressão que recupera dados de uma fonte de dados. O LINQ simplifica essa situação oferecendo um modelo consistente para trabalhar com dados em vários tipos de fontes e formatos de dados. Em uma consulta LINQ, você está sempre trabalhando com objetos. Você usa os mesmos padrões básicos de codificação para consultar e transformar dados em documentos XML, bancos de dados SQL, conjuntos de dados ADO.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial brilhante on </title>
    <link>https://www.wikiod.com/pt/docs/shiny/</link>
    <description>Recent content in tutorial brilhante on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com brilhante</title>
      <link>https://www.wikiod.com/pt/shiny/comecando-com-brilhante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/shiny/comecando-com-brilhante/</guid>
      <description>Aplicativo Simples # Cada aplicativo shiny contém duas partes: uma definição de interface de usuário (UI) e um script de servidor (server). Este exemplo mostra como você pode imprimir &amp;ldquo;Hello world&amp;rdquo; da interface do usuário ou do servidor.
UI.R
Na interface do usuário você pode colocar alguns objetos de visualização (div, entradas, botões, etc).
library(shiny) # Define UI for application print &amp;quot;Hello world&amp;quot; shinyUI( # Create bootstrap page fluidPage( # Paragraph &amp;quot;Hello world&amp;quot; p(&amp;quot;Hello world&amp;quot;), # Create button to print &amp;quot;Hello world&amp;quot; from server actionButton(inputId = &amp;quot;Print_Hello&amp;quot;, label = &amp;quot;Print_Hello World&amp;quot;), # Create position for server side text textOutput(&amp;quot;Server_Hello&amp;quot;) ) ) Servidor.</description>
    </item>
    
    <item>
      <title>API Javascript</title>
      <link>https://www.wikiod.com/pt/shiny/api-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/shiny/api-javascript/</guid>
      <description>Sintaxe # session$sendCustomMessage(nome,lista de parâmetros) Shiny.addCustomMessageHandler(nome, função JS que aceita lista de parâmetros) Shiny.onInputChange(nome,valor) Enviando dados do servidor para o cliente # Em muitos casos, você desejará enviar dados do servidor R para o cliente JS. Aqui está um exemplo muito simples:
library(shiny) runApp( list( ui = fluidPage( tags$script( &amp;quot;Shiny.addCustomMessageHandler(&#39;message&#39;, function(params) { alert(params); });&amp;quot; ), actionButton(&amp;quot;btn&amp;quot;,&amp;quot;Press Me&amp;quot;) ), server = function(input, output, session) { observeEvent(input$btn,{ randomNumber &amp;lt;- runif(1,0,100) session$sendCustomMessage(&amp;quot;message&amp;quot;,list(paste0(randomNumber,&amp;quot; is a random number!</description>
    </item>
    
    <item>
      <title>reactive, reactiveValue e eventReactive, observe e observeEvent em Shiny</title>
      <link>https://www.wikiod.com/pt/shiny/reactive-reactivevalue-e-eventreactive-observe-e-observeevent-em-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/shiny/reactive-reactivevalue-e-eventreactive-observe-e-observeevent-em-shiny/</guid>
      <description>reactive, reactiveValue e eventReactive são vários tipos de expressões reativas no Shiny. Eles produzem uma saída que pode ser usada como entrada em outras expressões, que por sua vez terão uma dependência da expressão reativa.
observe e observeEvent são semelhantes a expressões reativas. A grande diferença é que os observadores não produzem nenhum resultado e, portanto, são úteis apenas por seus efeitos colaterais.
Exemplos de seu uso são dados neste documento.</description>
    </item>
    
    <item>
      <title>Carregar dados para brilhante</title>
      <link>https://www.wikiod.com/pt/shiny/carregar-dados-para-brilhante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/shiny/carregar-dados-para-brilhante/</guid>
      <description>Fazendo upload de arquivos csv para o Shiny # Também é possível que um usuário carregue csvs para o seu aplicativo Shiny. O código abaixo mostra um pequeno exemplo de como isso pode ser alcançado. Ele também inclui uma entrada radioButton para que o usuário possa escolher interativamente o separador a ser usado.
library(shiny) library(DT) # Define UI ui &amp;lt;- shinyUI(fluidPage( fileInput(&#39;target_upload&#39;, &#39;Choose file to upload&#39;, accept = c( &#39;text/csv&#39;, &#39;text/comma-separated-values&#39;, &#39;.</description>
    </item>
    
    <item>
      <title>Como escrever aplicativos brilhantes MCVE (exemplo mínimo, completo e verificável)</title>
      <link>https://www.wikiod.com/pt/shiny/como-escrever-aplicativos-brilhantes-mcve-exemplo-minimo-completo-e-verificavel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/shiny/como-escrever-aplicativos-brilhantes-mcve-exemplo-minimo-completo-e-verificavel/</guid>
      <description>Se você está tendo problemas com seus aplicativos Shiny, é uma boa prática criar um aplicativo que ilustre seu ponto. Este aplicativo deve ser o mais simples possível e ainda refletir seu problema. Isso significa usar conjuntos de dados simples, nomes autoexplicativos (especialmente para IDs de E/S) e substituir gráficos por outros mais simples.
Também é aconselhável criar seu MCVE de forma que seja necessário o mínimo possível de bibliotecas não padrão.</description>
    </item>
    
  </channel>
</rss>

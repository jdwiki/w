<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Primefaces on </title>
    <link>https://www.wikiod.com/pt/docs/primefaces/</link>
    <description>Recent content in Tutorial Primefaces on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/primefaces/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Primefaces</title>
      <link>https://www.wikiod.com/pt/primefaces/introducao-ao-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/primefaces/introducao-ao-primefaces/</guid>
      <description>Instalando o PrimeFaces # PrimeFaces pode ser usado em todos os aplicativos da web baseados em Java Server Faces (versão 2.x) que são executados em Servlet Containers (por exemplo, Wildlfy ou Tomcat ou GlassFish).
Existem várias maneiras de adicionar PrimeFaces ao seu aplicativo.
Manualmente # Baixe o primefaces-{version}.jar e adicione-o ao seu classpath.
Especialista # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.primefaces&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;primefaces&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Para versões mais antigas (3.5 e abaixo), você também precisa adicionar o repositório PrimeFaces:</description>
    </item>
    
    <item>
      <title>widget Var</title>
      <link>https://www.wikiod.com/pt/primefaces/widget-var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/primefaces/widget-var/</guid>
      <description>widgetVar é o nome das variáveis ​​do lado do cliente que contém todos os widgets PF de javascript na página. Existe uma ótima introdução/tutorial para usar o componente widgetVar escrito por Hatem Alimam chamado Intro To PrimeFaces widgetVar
Uso básico do widgetVar # &amp;lt;h:form&amp;gt; &amp;lt;p:dialog widgetVar=&amp;quot;myDialog&amp;quot;&amp;gt;&amp;lt;/p:dialog&amp;gt; &amp;lt;p:commandButton onclick=&amp;quot;PF(&#39;myDialog&#39;).show();&amp;quot; /&amp;gt; &amp;lt;/h:form&amp;gt; Tabela de dados # datatable.js no repositório do GitHub
Função Detalhes bindPaginator: function() Vincula o ouvinte do evento de alteração e renderiza o paginador loadLiveRows: function() Carrega linhas dinamicamente ao rolar ao vivo paginar: function(newState) Paginação Ajax fetchNextPage: function(newState) Carrega a próxima página de forma assíncrona para mantê-la no estado de visualização e Atualiza o estado de visualização sort: function(columnHeader, order, multi) Ajax classificar filtro: função() Filtro Ajax onRowClick: function(event, rowElement, silent) onRowDblclick: function(evento, linha) highlightRow: function(row) Destaca a linha como selecionada unhighlightRow: function(row) Limpa os visuais selecionados fireRowSelectEvent: function(rowKey, behaviorEvent) Envia um rowSelectEvent no lado do servidor para invocar um rowSelectListener se definido fireRowUnselectEvent: function(rowKey, behaviorEvent) Envia um rowUnselectEvent no lado do servidor para invocar um rowUnselectListener se definido selectRowWithRadio: function(radio) Seleciona a linha correspondente de uma seleção de coluna baseada em rádio unselectAllRows: function() selectAllRowsOnPage: function() unselectAllRowsOnPage: function() selectAllRows: function() toggleExpansion: function(toggler) Expande uma linha para exibir o conteúdo de detalhes collapseRow: function(row) collapseAllRows: function() getExpandedRows: function() switchToRowEdit: function(row) showRowEditors: function(row) saveRowEdit: function(rowEditor) Salva a linha editada cancelRowEdit: function(rowEditor) updateRow: function(linha, conteúdo) Atualiza a linha com o conteúdo fornecido clearSelection: function() Limpa o estado de seleção clearFilters: function() Limpa filtros de tabela removeSelection: function(rowIndex) Remover determinado rowIndex da seleção addSelection: function(rowKey) Adiciona a rowKey fornecida à seleção se ela ainda não existir isSelected: function(rowKey) Localiza se a rowKey fornecida está na seleção saveColumnOrder: function() isEmpty: function() Retorna se houver algum dado exibido getSelectedRowsCount: function() </description>
    </item>
    
    <item>
      <title>Olá Primefaces</title>
      <link>https://www.wikiod.com/pt/primefaces/ola-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/primefaces/ola-primefaces/</guid>
      <description>Olá Primefaces # Esta é uma aplicação simples com primefaces, é uma página de login:
1-Configuração do web.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app version=&amp;quot;3.1&amp;quot; xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;quot;&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;javax.faces.PROJECT_STAGE&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;Development&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;javax.faces.webapp.FacesServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.xhtml&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;session-config&amp;gt; &amp;lt;session-timeout&amp;gt; 30 &amp;lt;/session-timeout&amp;gt; &amp;lt;/session-config&amp;gt; &amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt;index.xhtml&amp;lt;/welcome-file&amp;gt; &amp;lt;/welcome-file-list&amp;gt; &amp;lt;/web-app&amp;gt; 2-Criar ManagedBean:
import javax.faces.application.FacesMessage; import javax.faces.bean.ManagedBean; import javax.faces.bean.RequestScoped; import javax.faces.context.FacesContext; @ManagedBean @RequestScoped public class LoginBean { private String username; private String password; public LoginBean() { } public void login() { //Simple login if (!</description>
    </item>
    
    <item>
      <title>Como usar a vitrine do Primefaces</title>
      <link>https://www.wikiod.com/pt/primefaces/como-usar-a-vitrine-do-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/primefaces/como-usar-a-vitrine-do-primefaces/</guid>
      <description>O exemplo do componente panelGrid Primefaces em seu Showcase. # A vitrine dos componentes do Primefaces você encontra aqui e a documentação está aqui
Frontend precisa ser salvo como um arquivo XHTML. Este arquivo pode conter JSF, JSTL, JSP, HTML, CSS, jQuery, javaScript e seu framework e mais tecnologias front-end. Por favor, não misture as tecnologias JSF e JSP. Não é uma boa abordagem.
Observação você precisa definir namespaces como c, f, h, p, pe e assim por diante no início.</description>
    </item>
    
  </channel>
</rss>

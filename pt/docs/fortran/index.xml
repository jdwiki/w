<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Fortran on </title>
    <link>https://www.wikiod.com/pt/docs/fortran/</link>
    <description>Recent content in Tutorial de Fortran on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/fortran/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Fortran</title>
      <link>https://www.wikiod.com/pt/fortran/introducao-ao-fortran/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/introducao-ao-fortran/</guid>
      <description>Olá Mundo # Qualquer programa Fortran deve incluir end como última instrução. Portanto, o programa Fortran mais simples se parece com isso:
end Aqui estão alguns exemplos de programas &amp;ldquo;hello, world&amp;rdquo;:
print *, &amp;quot;Hello, world&amp;quot; end Com a instrução write:
write(*,*) &amp;quot;Hello, world&amp;quot; end Para maior clareza, agora é comum usar a instrução program para iniciar um programa e dar-lhe um nome. A instrução end pode então se referir a esse nome para tornar óbvio a que está se referindo e deixar o compilador verificar se o código está correto.</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/fortran/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/matrizes/</guid>
      <description>Construtores de matriz # Um valor de matriz de classificação 1 pode ser criado usando um construtor de matriz, com a sintaxe
(/ ... /) [ ... ] A forma [...] foi introduzida no Fortran 2003 e é geralmente considerada mais clara para ler, especialmente em expressões complexas. Este formulário é usado exclusivamente neste exemplo.
Os valores apresentados em um construtor de matriz podem ser valores escalares, valores de matriz ou loops implícitos.</description>
    </item>
    
    <item>
      <title>Tipos de dados</title>
      <link>https://www.wikiod.com/pt/fortran/tipos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/tipos-de-dados/</guid>
      <description>Precisão de números de ponto flutuante # Números de ponto flutuante do tipo real não podem ter nenhum valor real. Eles podem representar números reais até certa quantidade de dígitos decimais.
O FORTRAN 77 garantiu dois tipos de ponto flutuante e os padrões mais recentes garantem pelo menos dois tipos reais. Variáveis ​​reais podem ser declaradas como
real x double precision y x aqui é um real de tipo padrão e y é um real de tipo com maior precisão decimal que x.</description>
    </item>
    
    <item>
      <title>Programação Orientada a Objetos</title>
      <link>https://www.wikiod.com/pt/fortran/programacao-orientada-a-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/programacao-orientada-a-objetos/</guid>
      <description>Definição de tipo derivado # Fortran 2003 introduziu suporte para programação orientada a objetos. Esta funcionalidade permite tirar partido das modernas técnicas de programação. Os tipos derivados são definidos com o seguinte formato:
TYPE [[, attr-list] :: ] name [(name-list)] [def-stmts] [PRIVATE statement or SEQUENCE statement]. . . [component-definition]. . . [procedure-part] END TYPE [name] Onde,
attr-list - uma lista de especificadores de atributos nome - o nome do tipo de dados derivado name-list - uma lista de nomes de parâmetros de tipo separados por vírgulas def-stmts - uma ou mais declarações INTEGER dos parâmetros de tipo nomeados na lista de nomes definição do componente - uma ou mais instruções de declaração de tipo ou instruções de ponteiro de procedimento definindo o componente do tipo derivado procedure-part - uma instrução CONTAINS, opcionalmente seguida por uma instrução PRIVATE e uma ou mais instruções de vinculação de procedimento Exemplo:</description>
    </item>
    
    <item>
      <title>Alternativas modernas para características históricas</title>
      <link>https://www.wikiod.com/pt/fortran/alternativas-modernas-para-caracteristicas-historicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/alternativas-modernas-para-caracteristicas-historicas/</guid>
      <description>Aritmética if declaração # A instrução aritmética if permite usar três ramificações dependendo do resultado de uma expressão aritmética
if (arith_expr) label1, label2, label3 Esta instrução if transfere o fluxo de controle para um dos rótulos em um código. Se o resultado de arith_expr for negativo label1 está envolvido, se o resultado for zero label2 é usado, e se o resultado for positivo o último label3 é aplicado. Aritmética if requer todos os três rótulos, mas permite a reutilização de rótulos, portanto, esta declaração pode ser simplificada para um if de dois ramos.</description>
    </item>
    
    <item>
      <title>Unidades de programa e layout de arquivo</title>
      <link>https://www.wikiod.com/pt/fortran/unidades-de-programa-e-layout-de-arquivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/unidades-de-programa-e-layout-de-arquivo/</guid>
      <description>Subprogramas internos # Uma unidade de programa que não é um subprograma interno pode conter outras unidades de programa, chamadas subprogramas internos.
program prog implicit none contains function f() end function f subroutine g() end subroutine g end program Esse subprograma interno possui vários recursos:
existe associação de acolhimento entre entidades no subprograma e o programa externo regras de tipagem implícitas são herdadas (implicit none está em vigor em f acima) os subprogramas internos têm uma interface explícita disponível no host Subprogramas de módulo e subprogramas externos podem ter subprogramas internos, como</description>
    </item>
    
    <item>
      <title>Procedimentos - Funções e Sub-rotinas</title>
      <link>https://www.wikiod.com/pt/fortran/procedimentos---funcoes-e-sub-rotinas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/procedimentos---funcoes-e-sub-rotinas/</guid>
      <description>Funções e sub-rotinas, em conjunto com módulos, são as ferramentas para dividir um programa em unidades. Isso torna o programa mais legível e gerenciável. Cada uma dessas unidades pode ser pensada como parte do código que, idealmente, poderia ser compilado e testado isoladamente. O(s) programa(s) principal(is) pode(m) chamar (ou invocar) tais subprogramas (funções ou sub-rotinas) para realizar uma tarefa.
Funções e sub-rotinas são diferentes no seguinte sentido:
Funções retornam um único objeto e - normalmente - não alteram os valores de seus argumentos (ou seja, eles agem como uma função matemática!</description>
    </item>
    
    <item>
      <title>Uso de Módulos</title>
      <link>https://www.wikiod.com/pt/fortran/uso-de-modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/uso-de-modulos/</guid>
      <description>Sintaxe do módulo # Módulo é uma coleção de declarações de tipo, declarações de dados e procedimentos. A sintaxe básica é:
module module_name use other_module_being_used ! The use of implicit none here will set it for the scope of the module. ! Therefore, it is not required (although considered good practice) to repeat ! it in the contained subprograms. implicit none ! Parameters declaration real, parameter, public :: pi = 3.</description>
    </item>
    
    <item>
      <title>Interfaces explícitas e implícitas</title>
      <link>https://www.wikiod.com/pt/fortran/interfaces-explicitas-e-implicitas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/interfaces-explicitas-e-implicitas/</guid>
      <description>Subprogramas externos e interfaces implícitas # Um subprograma é dito externo quando não está contido no programa principal, nem em um módulo ou outro subprograma. Em particular, pode ser definido por meio de uma linguagem de programação diferente de Fortran.
Quando um subprograma externo é invocado, o compilador não pode acessar seu código, então todas as informações permitidas ao compilador estão implicitamente contidas na instrução de chamada do programa chamador e nas propriedades type dos argumentos reais, não nos argumentos fictícios ( cuja declaração é desconhecida do compilador).</description>
    </item>
    
    <item>
      <title>Controle de execução</title>
      <link>https://www.wikiod.com/pt/fortran/controle-de-execucao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/fortran/controle-de-execucao/</guid>
      <description>Se construir # A construção if (chamada de bloco IF em FORTRAN 77) é comum em muitas linguagens de programação. Ele executa condicionalmente um bloco de código quando uma expressão lógica é avaliada como verdadeira.
[name:] IF (expr) THEN block [ELSE IF (expr) THEN [name] block] [ELSE [name] block] END IF [name] Onde,
nome - o nome da construção if (opcional) expr - uma expressão lógica escalar entre parênteses bloco - uma sequência de zero ou mais instruções ou construções Um nome de construção no início de uma instrução if then deve ter o mesmo valor que o nome de construção na instrução end if e deve ser exclusivo para a unidade de escopo atual.</description>
    </item>
    
  </channel>
</rss>

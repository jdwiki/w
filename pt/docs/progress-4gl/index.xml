<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Progress-4gl Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/progress-4gl/</link>
    <description>Recent content in Progress-4gl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/progress-4gl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o progresso-4gl</title>
      <link>https://www.wikiod.com/pt/progress-4gl/comecando-com-o-progresso-4gl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/comecando-com-o-progresso-4gl/</guid>
      <description>FizzBuzz # Outro exemplo de programas no estilo &amp;ldquo;Hello World&amp;rdquo; é FizzBuzz.
DEFINE VARIABLE i AS INTEGER NO-UNDO. DEFINE VARIABLE cOut AS CHARACTER NO-UNDO. DO i = 1 TO 100: /* Dividable by 3: fizz */ IF i MODULO 3 = 0 THEN cOut = &amp;quot;Fizz&amp;quot;. /* Dividable by 5: buzz */ ELSE IF i MODULO 5 = 0 THEN cOut = &amp;quot;Buzz&amp;quot;. /* Otherwise just the number */ ELSE cOut = STRING(i).</description>
    </item>
    
    <item>
      <title>Compilando</title>
      <link>https://www.wikiod.com/pt/progress-4gl/compilando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/compilando/</guid>
      <description>Compile o código Progress como chamado &amp;ldquo;r-code&amp;rdquo; e normalmente é salvo em um arquivo com a extensão .r. Existem algumas maneiras diferentes de compilar: usando a instrução COMPILE ou no Linux ou AppBuilder: o compilador de aplicativos embutido. O Developer Studio (o ambiente Eclipse) tem compilação embutida em seu processo de construção.
Você deve ter 4GL Development ou OpenEdge Studio instalado para compilar programas 4GL que atualizam o banco de dados.</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/progress-4gl/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/funcoes/</guid>
      <description>Uma função definida pelo usuário no Progress ABL é um módulo de programa reutilizável.
Uma função deve ser declarada no procedimento &amp;ldquo;principal&amp;rdquo;. Não pode ser declarado dentro de um procedimento ou dentro de outra função. Uma função em Progress ABL não é um &amp;ldquo;cidadão de primeira classe&amp;rdquo; ao contrário de linguagens de programação como Haskell ou Javascript. Você não pode passar uma função como parâmetro de entrada ou saída. No entanto, você pode invocá-los dinamicamente usando DYNAMIC-FUNCTION ou o objeto CALL.</description>
    </item>
    
    <item>
      <title>Trabalhando com números</title>
      <link>https://www.wikiod.com/pt/progress-4gl/trabalhando-com-numeros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/trabalhando-com-numeros/</guid>
      <description>Progress ABL suporta três formatos numéricos: inteiros de 32 e 64 bits e floats.
Operadores # Progress suporta + / - * como operadores. Eles não podem ser sobrecarregados. A divisão sempre retorna um decimal. Se algum dos números em um cálculo for um decimal, um decimal será retornado. Caso contrário, um INTEGER ou INT64.
Não há operador += ou ++. Para aumentar ou diminuir uma variável, você deve atribuí-la a si mesma mais ou menos algo.</description>
    </item>
    
    <item>
      <title>TABELA TEMP</title>
      <link>https://www.wikiod.com/pt/progress-4gl/tabela-temp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/tabela-temp/</guid>
      <description>O TEMP-TABLE é um recurso muito poderoso do Progress ABL. É uma tabela temporária na memória (principalmente pelo menos) que pode ser usada para escrever lógica complexa. Pode ser utilizado como parâmetros de entrada/saída para procedimentos, funções e outros programas. Uma ou mais tabelas temporárias podem constituir a base de um DATASET (geralmente chamado de ProDataset).
Quase tudo o que pode ser feito com uma tabela de banco de dados Progress nativa pode ser feito com uma tabela temporária.</description>
    </item>
    
    <item>
      <title>Cordas</title>
      <link>https://www.wikiod.com/pt/progress-4gl/cordas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/cordas/</guid>
      <description>No Progress ABL existem dois tipos de strings, aquelas definidas como CHARACTER e aquelas definidas como LONGCHAR. Um arquivo com mais de 32K de comprimento é um LONGCHAR. A maioria das strings são, a menos que especificadas de outra forma, insensíveis a maiúsculas e minúsculas.
Lembre-se - todas as posições começam com a posição 1!
Concatenando strings # Usando o operador + você pode facilmente concatenar duas ou mais strings.</description>
    </item>
    
    <item>
      <title>Procedimentos</title>
      <link>https://www.wikiod.com/pt/progress-4gl/procedimentos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/procedimentos/</guid>
      <description>Existem dois tipos de procedimentos em Progress ABL: procedimentos internos e protótipos de procedimentos que são fachadas para dlls do Windows ou procedimentos de biblioteca compartilhada Unix/Linux.
Assim como as funções, os procedimentos não podem ser aninhados. Você não pode aninhar funções em procedimentos e vice-versa.
Um procedimento é chamado com a instrução RUN.
Sintaxe # EXECUTAR nome do procedimento. //Executa um procedimento chamado procedurename.
RUN proc1(INPUT &amp;ldquo;HELLO&amp;rdquo;). //Insere a string HELLO para proc1</description>
    </item>
    
    <item>
      <title>Utilitários do SO</title>
      <link>https://www.wikiod.com/pt/progress-4gl/utilitarios-do-so/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/utilitarios-do-so/</guid>
      <description>Existem várias funções e instruções incorporadas para acessar o sistema operacional.
OS-COMMAND # Executa um comando do SO.
OS-COMMAND sem nenhuma opção iniciará um novo shell e não sairá dele - assim, você deixará em OS gráficos: es uma janela &amp;ldquo;pendurada&amp;rdquo;.
DEFINE VARIABLE cmd AS CHARACTER NO-UNDO. cmd = &amp;quot;dir&amp;quot;. OS-COMMAND VALUE(cmd). Existem três opções: SILENT, NO-WAIT e NO-CONSOLE.
SILENCIOSO
Depois de processar um comando do sistema operacional, o shell AVM pausa.</description>
    </item>
    
    <item>
      <title>Consultas</title>
      <link>https://www.wikiod.com/pt/progress-4gl/consultas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/consultas/</guid>
      <description>Os exemplos serão baseados em uma cópia do banco de dados de demonstração Sports 2000 fornecido com a configuração do Progress.
Ao trabalhar com consultas em andamento, você precisa:
DEFINE a consulta e defina com quais buffers (tabelas) e campos ela funciona.
OPEN a consulta com uma cláusula WHERE específica que define como recuperar os registros. Possivelmente também ordenando (BY/BREAK BY)
GET os dados reais - que podem ser o registro correspondente FIRST, NEXT, PREV (para anterior) ou LAST.</description>
    </item>
    
    <item>
      <title>FIND declaração</title>
      <link>https://www.wikiod.com/pt/progress-4gl/find-declaracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/progress-4gl/find-declaracao/</guid>
      <description>A instrução FIND é usada para recuperar um único registro de uma única tabela. Tem algumas limitações em comparação com FOR ou QUERY, mas é uma instrução simples e prática para acesso rápido aos registros.
ENCONTRE exemplos básicos # Um exemplo simples do sports2000:
FIND FIRST Customer NO-LOCK WHERE CustNum = 1 NO-ERROR. IF AVAILABLE Customer THEN DO: DISPLAY Customer.NAME. END. ELSE DO: MESSAGE &amp;quot;No record available&amp;quot;. END. PRIMEIRO - encontre o primeiro registro que corresponde à consulta</description>
    </item>
    
  </channel>
</rss>

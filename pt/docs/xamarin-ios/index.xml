<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Xamarin.iOS on </title>
    <link>https://www.wikiod.com/pt/docs/xamarin-ios/</link>
    <description>Recent content in Tutorial Xamarin.iOS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/xamarin-ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Xamarin.iOS</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/introducao-ao-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/introducao-ao-xamarinios/</guid>
      <description>Introdução ao Visual Studio # Navegue até File &amp;gt; New &amp;gt; Project para abrir a caixa de diálogo New Project. Navegue até Visual C# &amp;gt; iOS &amp;gt; iPhone e selecione Single View App: Dê um Nome ao seu aplicativo e pressione OK para criar seu projeto. Selecione o ícone do Mac Agent na barra de ferramentas, conforme ilustrado abaixo: Selecione o Mac que construirá seu aplicativo na lista (certifique-se de que seu Mac esteja configurado para receber a conexão!</description>
    </item>
    
    <item>
      <title>Vinculando bibliotecas Swift</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/vinculando-bibliotecas-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/vinculando-bibliotecas-swift/</guid>
      <description>Um guia fácil de seguir que o guiará pelo processo de vinculação de arquivos Swift .framework para uso em um projeto Xamarin.
Ao construir uma biblioteca no Xcode tem a opção de incluir as bibliotecas swift. Não! Eles serão incluídos em seu aplicativo final como NAME.app/Frameworks/LIBRARY.framework/Frameworks/libswift*.dylib, mas devem ser incluídos como NAME.app/Frameworks/libswift*.dylib
Você pode encontrar essa informação em outro lugar, mas vale a pena mencionar: Não inclua Bitcode na biblioteca. A partir de agora, o Xamarin não inclui Bitcode para iOS e a Apple exige que todas as bibliotecas suportem as mesmas arquiteturas.</description>
    </item>
    
    <item>
      <title>Métodos de redimensionamento para UIImage</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/metodos-de-redimensionamento-para-uiimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/metodos-de-redimensionamento-para-uiimage/</guid>
      <description>Redimensionar imagem - com proporção # // resize the image to be contained within a maximum width and height, keeping aspect ratio public static UIImage MaxResizeImage(this UIImage sourceImage, float maxWidth, float maxHeight) { var sourceSize = sourceImage.Size; var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height); if (maxResizeFactor &amp;gt; 1) return sourceImage; var width = maxResizeFactor * sourceSize.Width; var height = maxResizeFactor * sourceSize.Height; UIGraphics.BeginImageContext(new CGSize(width, height)); sourceImage.Draw(new CGRect(0, 0, width, height)); var resultImage = UIGraphics.</description>
    </item>
    
    <item>
      <title>ID de toque</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/id-de-toque/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/id-de-toque/</guid>
      <description>Parâmetros # Coluna Coluna Célula Célula Primeiro, estabeleça se o dispositivo é capaz de aceitar a entrada de Touch ID.
if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)) Se isso acontecer, podemos exibir a interface do usuário do Touch ID usando:
context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler); Existem três informações que temos que passar para o EvaluatePolicy – a política em si, uma string explicando por que a autenticação é necessária e um manipulador de resposta. O manipulador de resposta informa ao aplicativo o que ele deve fazer no caso de uma autenticação bem-sucedida ou malsucedida.</description>
    </item>
    
    <item>
      <title>Programação simultânea no Xamarin.iOS</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/programacao-simultanea-no-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/programacao-simultanea-no-xamarinios/</guid>
      <description>Manipulando a interface do usuário de threads em segundo plano # Os threads em segundo plano não podem modificar a interface do usuário; quase todos os métodos UIKit devem ser chamados no thread principal.
De uma subclasse de NSObject (incluindo qualquer UIViewController ou UIView):
InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); De uma classe C# padrão:
UIApplication.SharedApplication.InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); InvokeOnMainThread aguarda a execução do seu código em execução no thread principal antes de continuar.</description>
    </item>
    
    <item>
      <title>Calculando a altura da linha variável em GetHeightForRow</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/calculando-a-altura-da-linha-variavel-em-getheightforrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/calculando-a-altura-da-linha-variavel-em-getheightforrow/</guid>
      <description>Calcular alturas de linha pode ser caro e o desempenho de rolagem pode ser prejudicado se você tiver grandes quantidades de dados. Nesse cenário, substitua UITableViewSource.EstimatedHeight(UITableView, NSIndexPath) para fornecer rapidamente um número suficiente para rolagem rápida, por exemplo:
public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath) { return 44.0f; } Usando GetHeightForRow # Para definir uma altura de linha personalizada, substitua UITableViewSource.GetHeightForRow(UITableView,NSIndexPath):
public class ColorTableDataSource : UITableViewSource { List&amp;lt;DomainClass&amp;gt; Model { get; set; } public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath) { var height = Model[indexPath.</description>
    </item>
    
    <item>
      <title>Layout automático no Xamarin.iOS</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/layout-automatico-no-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/layout-automatico-no-xamarinios/</guid>
      <description>Adicionando restrições com âncoras de layout do iOS 9+ # // Since the anchor system simply returns constraints, you still need to add them somewhere. View.AddConstraints( new[] { someLabel.TopAnchor.ConstraintEqualTo(TopLayoutGuide.GetBottomAnchor()), anotherLabel.TopAnchor.ConstraintEqualTo(someLabel.BottomAnchor, 6), oneMoreLabel.TopAnchor.ConstraintEqualTo(anotherLabel.BottomAnchor, 6), oneMoreLabel.BottomAnchor.ConstraintGreaterThanOrEqualTo(BottomLayoutGuide.GetTopAnchor(), -10), } ); Adicionando restrições usando a linguagem de formato visual (VFL) # // Using Visual Format Language requires a special look-up dictionary of names&amp;lt;-&amp;gt;views. var views = new NSDictionary( nameof(someLabel), someLabel, nameof(anotherLabel), anotherLabel, nameof(oneMoreLabel), oneMoreLabel ); // It can also take a look-up dictionary for metrics (such as size values).</description>
    </item>
    
    <item>
      <title>Alertas</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/alertas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/alertas/</guid>
      <description>Exibir um alerta # Para Alertas desde o iOS 8, você usaria um UIAlertController, mas para versões anteriores, você teria usado um UIAlertView, que agora está obsoleto.
var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert); alert.AddAction(UIAlertAction.Create(otherTitle, UIAlertActionStyle.Destructive, (action) =&amp;gt; { // otherTitle(); })); alert.AddAction(UIAlertAction.Create(cancelTitle, UIAlertActionStyle.Cancel, null)); this.PresentViewController(alert, true, null); var alert = new UIAlertView (title, message, null, cancelTitle, otherTitle); alert.Clicked += (object sender, UIButtonEventArgs e) =&amp;gt; { if(e.ButtonIndex == 1) // otherTitle(); }; alert.</description>
    </item>
    
    <item>
      <title>Usando catálogos de ativos</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/usando-catalogos-de-ativos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/usando-catalogos-de-ativos/</guid>
      <description>Adicionando recursos de imagem ao catálogo de recursos # É assim que o Asset Catalog no Xamarin Studio se parece,
Como mostrado na imagem acima, existem 5 tipos de ativos que você pode criar dentro do catálogo.
Vou cobrir apenas o conjunto de imagens, porque é o mais simples.
Quando você cria um novo conjunto de imagens. Você terá opções como esta Para adicionar imagens ao catálogo, você pode simplesmente clicar nos quadrados tracejadas e selecionar a imagem que deseja definir para determinada opção.</description>
    </item>
    
    <item>
      <title>Práticas recomendadas para migrar do UILocalNotification para a estrutura de notificações do usuário</title>
      <link>https://www.wikiod.com/pt/xamarin-ios/praticas-recomendadas-para-migrar-do-uilocalnotification-para-a-estrutura-de-notificacoes-do-usuario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xamarin-ios/praticas-recomendadas-para-migrar-do-uilocalnotification-para-a-estrutura-de-notificacoes-do-usuario/</guid>
      <description>Notificações do usuário # Você terá que importar UserNotifications
@import UserNotifications; Solicitar autorização para notificação local
let center = UNUserNotificationCenter.current() center.requestAuthorization([.alert, .sound]) { (granted, error) in // Enable or disable features based on authorization. }
Agora vamos atualizar o número do crachá do ícone do aplicativo
@IBAction func triggerNotification(){ let content = UNMutableNotificationContent() content.title = NSString.localizedUserNotificationString(forKey: &amp;quot;Tom said:&amp;quot;, arguments: nil) content.body = NSString.localizedUserNotificationString(forKey: &amp;quot;Hello Mike！Let&#39;s go.&amp;quot;, arguments: nil) content.sound = UNNotificationSound.</description>
    </item>
    
  </channel>
</rss>

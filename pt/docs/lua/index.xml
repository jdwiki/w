<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Lua on </title>
    <link>https://www.wikiod.com/pt/docs/lua/</link>
    <description>Recent content in Tutorial Lua on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Lua</title>
      <link>https://www.wikiod.com/pt/lua/comecando-com-lua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/comecando-com-lua/</guid>
      <description>Comentários # Comentários de linha única em Lua começam com -- e continuam até o final da linha:
-- this is single line comment -- need another line -- huh? Comentários em bloco começam com --[[ e terminam com ]]:
--[[ This is block comment. So, it can go on... and on... and on.... ]] Comentários em bloco usam o mesmo estilo de delimitadores que strings longas; qualquer número de sinais de igual pode ser adicionado entre colchetes para delimitar um comentário:</description>
    </item>
    
    <item>
      <title>Correspondência de padrões</title>
      <link>https://www.wikiod.com/pt/lua/correspondencia-de-padroes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/correspondencia-de-padroes/</guid>
      <description>Sintaxe # string.find(str, pattern [, init [, plain]]) &amp;ndash; Retorna o índice inicial e final da correspondência em str
string.match(str, pattern [, index]) &amp;ndash; Corresponde a um padrão uma vez (começando no índice)
string.gmatch(str, pattern) &amp;ndash; Retorna uma função que itera por todas as correspondências em str
string.gsub(str, pattern, repl [, n]) &amp;ndash; Substitui substrings (até um máximo de n vezes)
. representa todos os caracteres
%a representa todas as letras</description>
    </item>
    
    <item>
      <title>Conjuntos</title>
      <link>https://www.wikiod.com/pt/lua/conjuntos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/conjuntos/</guid>
      <description>Usando uma tabela como um conjunto # Crie um conjunto # local set = {} -- empty set Crie um conjunto com elementos definindo seu valor como true:
local set = {pear=true, plum=true} -- or initialize by adding the value of a variable: local fruit = &#39;orange&#39; local other_set = {[fruit] = true} -- adds &#39;orange&#39; Adicione um membro ao conjunto # adicione um membro definindo seu valor como true</description>
    </item>
    
    <item>
      <title>Tabelas</title>
      <link>https://www.wikiod.com/pt/lua/tabelas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/tabelas/</guid>
      <description>Sintaxe # ipairs(numeric_table) &amp;ndash; Tabela Lua com iterador de índices numéricos pairs(input_table) &amp;ndash; iterador genérico da tabela Lua key, value = next(input_table, input_key) &amp;ndash; Seletor de valor da tabela Lua table.insert(input_table, [position], value) &amp;ndash; insere o valor especificado na tabela de entrada valor_removido = table.remove(tabela_de_entrada, [posição]) &amp;ndash; aparece por último ou remove o valor especificado pela posição As tabelas são a única estrutura de dados embutida disponível em Lua. Esta é uma simplicidade elegante ou confusa, dependendo de como você olha para isso.</description>
    </item>
    
    <item>
      <title>Booleanos em Lua</title>
      <link>https://www.wikiod.com/pt/lua/booleanos-em-lua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/booleanos-em-lua/</guid>
      <description>Booleanos, verdade e falsidade são diretos em Lua. Rever:
Existe um tipo booleano com exatamente dois valores: true e false. Em um contexto condicional (if, elseif, while, until), um booleano não é necessário. Qualquer expressão pode ser usada. Em um contexto condicional, false e ​​nil contam como falsos, e todo o resto conta como verdadeiro. Embora 3 já implique isso: se você está vindo de outras linguagens, lembre-se que 0 e a string vazia contam como verdadeiros em contextos condicionais em Lua.</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/lua/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/funcoes/</guid>
      <description>Sintaxe # funcname = function(paramA, paramB, &amp;hellip;) corpo; return exprlist end &amp;ndash; uma função simples função funcname(paramA, paramB, &amp;hellip;) corpo; return exprlist end &amp;ndash; abreviação para acima local funcname = function(paramA, paramB, &amp;hellip;) corpo; return exprlist end &amp;ndash; um lambda local funcname; funcname = function(paramA, paramB, &amp;hellip;) corpo; return exprlist end &amp;ndash; lambda que pode fazer chamadas recursivas função local funcname(paramA, paramB, &amp;hellip;) corpo; return exprlist end &amp;ndash; abreviação para acima funcname(paramA, paramB, &amp;hellip;) &amp;ndash; chama uma função local var = var ou &amp;ldquo;Default&amp;rdquo; &amp;ndash; um parâmetro padrão return nil, &amp;ldquo;mensagens de erro&amp;rdquo; - maneira padrão de abortar com um erro As funções geralmente são definidas com function a(b,c) .</description>
    </item>
    
    <item>
      <title>Manipulação de erros</title>
      <link>https://www.wikiod.com/pt/lua/manipulacao-de-erros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/manipulacao-de-erros/</guid>
      <description>Manipulando erros em Lua # Supondo que temos a seguinte função:
function foo(tab) return tab.a end -- Script execution errors out w/ a stacktrace when tab is not a table Vamos melhorar um pouco
function foo(tab) if type(tab) ~= &amp;quot;table&amp;quot; then error(&amp;quot;Argument 1 is not a table!&amp;quot;, 2) end return tab.a end -- This gives us more information, but script will still error out Se não queremos que uma função trave um programa mesmo em caso de erro, é padrão em lua fazer o seguinte:</description>
    </item>
    
    <item>
      <title>Introdução à API Lua C</title>
      <link>https://www.wikiod.com/pt/lua/introducao-a-api-lua-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/introducao-a-api-lua-c/</guid>
      <description>Sintaxe # lua_State *L = lua_open(); // Cria um novo estado de VM; Lua 5.0 two_State *L = twoL_newstate(); // Cria um novo estado de VM; Dois 5.1+ int luaL_dofile(lua_State *L, const char *nome do arquivo); // Executa um script lua com o nome do arquivo fornecido usando o lua_State especificado void luaL_openlibs(lua_State *L); // Carrega todas as bibliotecas padrão no lua_State especificado void lua_close(lua_State *L); // Fecha o estado da VM e libera todos os recursos dentro void lua_call(lua_State *L, int nargs, int nresults); // Chama o valor lua no índice -(nargs + 1) Lua também fornece uma API C adequada para sua máquina virtual.</description>
    </item>
    
    <item>
      <title>Metatabelas</title>
      <link>https://www.wikiod.com/pt/lua/metatabelas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/metatabelas/</guid>
      <description>Sintaxe # [[local] mt = ]getmetatable(t) &amp;ndash;&amp;gt; recupera a metatabela associada para &amp;lsquo;t&amp;rsquo; [[local] t = ]setmetatable(t, mt) &amp;ndash;&amp;gt; define a metatabela de &amp;lsquo;t&amp;rsquo; para &amp;lsquo;mt&amp;rsquo; e retorna &amp;lsquo;t&amp;rsquo; Parâmetros # Parâmetro Detalhes t Variável referente a uma tabela lua; também pode ser um literal de tabela. mt Tabela para usar como metatabela; pode ter zero ou mais campos de metamétodo definidos. Existem alguns metamétodos não mencionados aqui. Para a lista completa e seu uso, veja a entrada correspondente no lua manual.</description>
    </item>
    
    <item>
      <title>Argumentos Variados</title>
      <link>https://www.wikiod.com/pt/lua/argumentos-variados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/lua/argumentos-variados/</guid>
      <description>Varargs, como são comumente conhecidos, permitem que funções recebam um número arbitrário de argumentos sem especificação. Todos os argumentos dados a tal função são empacotados em uma única estrutura conhecida como vararg list; que é escrito como ... em Lua. Existem métodos básicos para extrair o número de argumentos fornecidos e o valor desses argumentos usando a função select(), mas padrões de uso mais avançados podem alavancar a estrutura para sua utilidade total.</description>
    </item>
    
  </channel>
</rss>

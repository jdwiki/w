<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roslyn tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/roslyn/</link>
    <description>Recent content in roslyn tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/roslyn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com Roslyn</title>
      <link>https://www.wikiod.com/pt/roslyn/comecando-com-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/comecando-com-roslyn/</guid>
      <description>Instalação ou Configuração # Para começar a mexer no Roslyn, você precisará dos seguintes pacotes NuGet:
Os compiladores C# e VB - Microsoft.Net.Compilers. Para instalá-lo, você pode executar o seguinte comando no Console do Gerenciador de Pacotes:
nuget install Microsoft.Net.Compilers
As APIs e Serviços de Linguagem - Microsoft.CodeAnalysis. Para instalá-lo, você pode executar o seguinte comando no Console do Gerenciador de Pacotes:
nuget install Microsoft.CodeAnalysis
Além disso, é bom instalar os modelos do SDK da plataforma do compilador .</description>
    </item>
    
    <item>
      <title>Como usar espaços de trabalho</title>
      <link>https://www.wikiod.com/pt/roslyn/como-usar-espacos-de-trabalho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/como-usar-espacos-de-trabalho/</guid>
      <description>O espaço de trabalho é uma representação programática da hierarquia C# que consiste em uma solução, projetos filho e documentos filho.
Atualmente, não há espaço de trabalho do MSBuild que ofereça suporte a projetos compatíveis com .NET Standard. Para mais informações veja aqui. Criando um MSBuildWorspace, carregando uma solução e obtendo todos os documentos em toda aquela solução # O MSBuildWorspace é construído em torno do conceito de manipulação de soluções MSBuild (arquivos .</description>
    </item>
    
    <item>
      <title>Altere o código-fonte com Roslyn</title>
      <link>https://www.wikiod.com/pt/roslyn/altere-o-codigo-fonte-com-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/altere-o-codigo-fonte-com-roslyn/</guid>
      <description>Exemplos práticos de uso do Roslyn para transformações de código-fonte.
As árvores de sintaxe Roslyn são imutáveis. Ao chamar um método como ReplaceNodes, geramos um novo nó em vez de modificar o existente. Isso exige que você sempre altere o objeto em que está trabalhando. Substitua os atributos existentes para todos os métodos em C# usando a árvore de sintaxe # O snippet a seguir substitui todos os atributos chamados PreviousAttribute por um atributo chamado ReplacementAttribute para uma solução inteira.</description>
    </item>
    
    <item>
      <title>Analise o código-fonte com Roslyn</title>
      <link>https://www.wikiod.com/pt/roslyn/analise-o-codigo-fonte-com-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/analise-o-codigo-fonte-com-roslyn/</guid>
      <description>Analise um aplicativo simples &amp;ldquo;Hello World&amp;rdquo; em C# # Crie um novo aplicativo de console com uma linha no método Main: Console.WriteLine(&amp;quot;Hello World&amp;quot;)
Lembre-se do caminho para o arquivo .csproj e substitua-o no exemplo.
Crie um novo Aplicativo de console e instale o pacote NuGet Microsoft.CodeAnalysis e tente o seguinte código:
const string projectPath = @&amp;quot;C:\HelloWorldApplication\HelloWorldProject.csproj&amp;quot;; // Creating a build workspace. var workspace = MSBuildWorkspace.Create(); // Opening the Hello World project.</description>
    </item>
    
    <item>
      <title>Árvore de sintaxe</title>
      <link>https://www.wikiod.com/pt/roslyn/arvore-de-sintaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/arvore-de-sintaxe/</guid>
      <description>Uma das partes principais do compilador Roslyn é a API de sintaxe. Ele expõe as árvores de sintaxe que os compiladores usam para entender os programas Visual Basic e C#.
A Syntax Tree é uma Parse Tree no contexto do compilador Roslyn. Percorrendo a árvore de sintaxe usando LINQ # Você pode navegar facilmente em uma árvore de sintaxe usando o LINQ. Por exemplo, é fácil obter todos os nós ClassDeclarationSyntax (classes declaradas), que têm um nome começando com a letra A:</description>
    </item>
    
    <item>
      <title>Modelo Semântico</title>
      <link>https://www.wikiod.com/pt/roslyn/modelo-semantico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/roslyn/modelo-semantico/</guid>
      <description>Em contraste com a Syntax API, que expõe todos os tipos de informações de nível de sintaxe, o modelo semântico dá ao nosso código mais &amp;ldquo;significado&amp;rdquo; e nos permite responder a perguntas como &amp;ldquo;Quais nomes estão no escopo neste local?&amp;rdquo;, &amp;ldquo;Quais membros são acessíveis a partir de este método?&amp;rdquo;, &amp;ldquo;Quais variáveis ​​são usadas neste bloco de texto?&amp;rdquo;, &amp;ldquo;A que se refere este nome/expressão?&amp;rdquo;.
Consultar o Modelo Semântico é mais caro do que consultar a Árvore de Sintaxe, devido ao fato de que mais comumente aciona uma compilação.</description>
    </item>
    
  </channel>
</rss>

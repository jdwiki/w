<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Git on </title>
    <link>https://www.wikiod.com/pt/docs/git/</link>
    <description>Recent content in Tutorial Git on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Git</title>
      <link>https://www.wikiod.com/pt/git/introducao-ao-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/introducao-ao-git/</guid>
      <description>Crie seu primeiro repositório e adicione e confirme os arquivos # Na linha de comando, primeiro verifique se o Git está instalado:
Em todos os sistemas operacionais:
git --version Em sistemas operacionais do tipo UNIX:
which git Se nada for retornado ou o comando não for reconhecido, talvez seja necessário instalar o Git em seu sistema baixando e executando o instalador. Consulte a página inicial do Git para obter instruções de instalação excepcionalmente claras e fáceis.</description>
    </item>
    
    <item>
      <title>Ignorando arquivos e pastas</title>
      <link>https://www.wikiod.com/pt/git/ignorando-arquivos-e-pastas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/ignorando-arquivos-e-pastas/</guid>
      <description>Este tópico ilustra como evitar adicionar arquivos indesejados (ou alterações de arquivo) em um repositório Git. Existem várias maneiras (global ou local .gitignore, .git/exclude, git update-index --assume-unchanged e git update-index --skip-tree), mas tenha em mente O Git está gerenciando conteúdo, o que significa: ignorar na verdade ignora uma pasta conteúdo (ou seja, arquivos). Uma pasta vazia seria ignorada por padrão, pois não pode ser adicionada de qualquer maneira.
Ignorando arquivos e diretórios com um arquivo .</description>
    </item>
    
    <item>
      <title>Apanhar cerejas</title>
      <link>https://www.wikiod.com/pt/git/apanhar-cerejas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/apanhar-cerejas/</guid>
      <description>Um cherry-pick pega o patch que foi introduzido em um commit e tenta reaplicá-lo no branch que você está atualmente.
Fonte: Git SCM Book
Sintaxe # git cherry-pick [&amp;ndash;edit] [-n] [-m parent-number] [-s] [-x] [&amp;ndash;ff] [-S[key-id]] commit&amp;hellip; git cherry-pick &amp;ndash;continue git cherry-pick &amp;ndash;quit git cherry-pick &amp;ndash;abort Parâmetros # Parâmetros Detalhes -e, &amp;ndash;edit Com esta opção, git cherry-pick permitirá que você edite a mensagem do commit antes do commit. -x Ao gravar o commit, acrescente uma linha que diz &amp;ldquo;(cherry picking from commit …​)&amp;rdquo; à mensagem do commit original para indicar de qual commit essa mudança foi selecionada.</description>
    </item>
    
    <item>
      <title>Rebase</title>
      <link>https://www.wikiod.com/pt/git/rebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/rebase/</guid>
      <description>Sintaxe # git rebase [-i | --interactive] [opções] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] [&amp;lt;upstream&amp;gt;] [&amp;lt;branch&amp;gt;] git rebase [-i | --interactive] [opções] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] --root [&amp;lt;branch&amp;gt;] git rebase --continue | --pular | --abortar | --edit-all Parâmetros # Parâmetro Detalhes &amp;ndash;continuar Reinicie o processo de rebase depois de resolver um conflito de mesclagem. &amp;ndash;abortar Interrompa a operação de rebase e redefina HEAD para a ramificação original. Se a ramificação foi fornecida quando a operação de rebase foi iniciada, HEAD será redefinido para ramificação.</description>
    </item>
    
    <item>
      <title>Ramificação</title>
      <link>https://www.wikiod.com/pt/git/ramificacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/ramificacao/</guid>
      <description>Sintaxe # git branch [--set-upstream | --track | --no-track] [-l] [-f] &amp;lt;branchname&amp;gt; [&amp;lt;start-point&amp;gt;] git branch (--set-upstream-to=&amp;lt;upstream&amp;gt; | -u &amp;lt;upstream&amp;gt;) [&amp;lt;branchname&amp;gt;] git branch --unset-upstream [&amp;lt;branchname&amp;gt;] git branch (-m | -M) [&amp;lt;oldbranch&amp;gt;] &amp;lt;newbranch&amp;gt; git branch (-d | -D) [-r] &amp;lt;branchname&amp;gt;…​ git branch --edit-description [&amp;lt;branchname&amp;gt;] git branch [--color[=&amp;lt;quando&amp;gt;] | --sem cor] [-r | -a] [--list] [-v [--abbrev=&amp;lt;comprimento&amp;gt; | --no-abbrev]] [--column[=&amp;lt;opções&amp;gt;] | --no-column] [(--merged | --no-merged | --contains) [&amp;lt;commit&amp;gt;]] [--sort=&amp;lt;key&amp;gt;] [--points-at &amp;lt;object&amp;gt;] [&amp;lt;pattern &amp;gt;…​] Parâmetros # Parâmetro Detalhes -d, &amp;ndash;delete Excluir uma ramificação.</description>
    </item>
    
    <item>
      <title>Esconder</title>
      <link>https://www.wikiod.com/pt/git/esconder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/esconder/</guid>
      <description>Sintaxe # git stash list [&amp;lt;options&amp;gt;] git stash show [&amp;lt;stash&amp;gt;] git stash drop [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash ( pop | apply ) [--index] [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash branch &amp;lt;branchname&amp;gt; [&amp;lt;stash&amp;gt;] git stash [salvar [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a| --all] [&amp;lt;mensagem&amp;gt;]] git stash clear git stash create [&amp;lt;message&amp;gt;] git stash store [-m|--message &amp;lt;message&amp;gt;] [-q|--quiet] &amp;lt;commit&amp;gt; Parâmetros # Parâmetro Detalhes mostrar Mostre as alterações registradas no stash como uma diferença entre o estado stashed e seu pai original.</description>
    </item>
    
    <item>
      <title>Git Diff</title>
      <link>https://www.wikiod.com/pt/git/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/git-diff/</guid>
      <description>Sintaxe # git diff [opções] [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​] git diff [opções] --cached [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​] git diff [opções] &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; [--] [&amp;lt;path&amp;gt;…​] git diff [opções] &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt; git diff [opções] [--no-index] [--] &amp;lt;caminho&amp;gt; &amp;lt;caminho&amp;gt; Parâmetros # Parâmetro Detalhes -p, -u, &amp;ndash;patch Gerar patch -s, &amp;ndash;sem patch Suprima a saída do diferencial. Útil para comandos como git show que mostram o patch por padrão, ou para cancelar o efeito de --patch &amp;ndash;cru Gere o diff em formato bruto &amp;ndash;diff-algoritmo= Escolha um algoritmo de comparação.</description>
    </item>
    
    <item>
      <title>Confirmando</title>
      <link>https://www.wikiod.com/pt/git/confirmando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/confirmando/</guid>
      <description>Os commits com o Git fornecem responsabilidade atribuindo aos autores alterações no código. O Git oferece vários recursos para a especificidade e segurança dos commits. Este tópico explica e demonstra as práticas e procedimentos adequados para se comprometer com o Git.
Sintaxe # git commit [sinalizadores] Parâmetros # Parâmetro Detalhes &amp;ndash;mensagem, -m Mensagem para incluir no commit. Especificar este parâmetro ignora o comportamento normal do Git de abrir um editor. &amp;ndash;alterar Especifique que as mudanças atualmente preparadas devem ser adicionadas (alteradas) ao commit anterior.</description>
    </item>
    
    <item>
      <title>Esmagamento</title>
      <link>https://www.wikiod.com/pt/git/esmagamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/esmagamento/</guid>
      <description>O que é esmagar? # Squashing é o processo de pegar vários commits e combiná-los em um único commit encapsulando todas as alterações dos commits iniciais.
Squashing e Ramos Remotos # Preste atenção especial ao compactar commits em uma ramificação que está rastreando uma ramificação remota; se você esmagar um commit que já foi enviado para uma ramificação remota, as duas ramificações serão divergidas e você terá que usar git push -f para forçar essas alterações na ramificação remota.</description>
    </item>
    
    <item>
      <title>Encenação</title>
      <link>https://www.wikiod.com/pt/git/encenacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/git/encenacao/</guid>
      <description>Vale a pena notar que o staging tem pouco a ver com os próprios &amp;lsquo;arquivos&amp;rsquo; e tudo a ver com as mudanças dentro de cada arquivo. Nós preparamos arquivos que contêm alterações e o git rastreia as alterações como commits (mesmo quando as alterações em um commit são feitas em vários arquivos).
A distinção entre arquivos e commits pode parecer pequena, mas entender essa diferença é fundamental para entender funções essenciais como cherry-pick e diff.</description>
    </item>
    
  </channel>
</rss>

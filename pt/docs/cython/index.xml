<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cython Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/cython/</link>
    <description>Recent content in cython Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/cython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao cython</title>
      <link>https://www.wikiod.com/pt/cython/introducao-ao-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cython/introducao-ao-cython/</guid>
      <description>Olá Mundo # Um arquivo Cython pyx precisa ser traduzido para código C (cythonized) e compilado antes que possa ser usado a partir do Python. Uma abordagem comum é criar um módulo de extensão que é importado em um programa Python.
#Código# Para este exemplo, criamos três arquivos:
hello.pyx contém o código Cython. test.py é um script Python que usa a extensão hello. setup.py é usado para compilar o código Cython.</description>
    </item>
    
    <item>
      <title>Envolvendo C&#43;&#43;</title>
      <link>https://www.wikiod.com/pt/cython/envolvendo-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cython/envolvendo-c-/</guid>
      <description>Envolvendo uma DLL: C++ para Cython para Python # Isso demonstra um exemplo não trivial de encapsulamento de uma dll C++ com Cython. Ele abrangerá as seguintes etapas principais:
Crie uma DLL de exemplo com C++ usando o Visual Studio. Envolva a DLL com Cython para que possa ser chamada em Python. Supõe-se que você tenha o Cython instalado e possa importá-lo com sucesso em Python.
Para a etapa DLL, também supõe-se que você esteja familiarizado com a criação de uma DLL no Visual Studio.</description>
    </item>
    
    <item>
      <title>Agrupamento de Cython</title>
      <link>https://www.wikiod.com/pt/cython/agrupamento-de-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cython/agrupamento-de-cython/</guid>
      <description>Agrupando um programa Cython usando pyinstaller # Comece a partir de um programa Cython com um ponto de entrada:
def do_stuff(): cdef int a,b,c a = 1 b = 2 c = 3 print(&amp;quot;Hello World!&amp;quot;) print([a,b,c]) input(&amp;quot;Press Enter to continue.&amp;quot;) Crie um arquivo setup.py na mesma pasta:
from distutils.core import setup from Cython.Build import cythonize setup( name = &amp;quot;Hello World&amp;quot;, ext_modules = cythonize(&#39;program.pyx&#39;), ) Executá-lo com python setup.py build_ext --inplace produzirá uma biblioteca .</description>
    </item>
    
    <item>
      <title>Embrulhando o código C</title>
      <link>https://www.wikiod.com/pt/cython/embrulhando-o-codigo-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/cython/embrulhando-o-codigo-c/</guid>
      <description>Usando funções de uma biblioteca C personalizada # Temos uma biblioteca C chamada my_random que produz números aleatórios de uma distribuição personalizada. Ele fornece duas funções que queremos usar: set_seed(long seed) e rand() (e muitas outras que não precisamos). Para usá-los no Cython, precisamos
defina uma interface no arquivo .pxd e chame a função no arquivo .pyx. #Código#
test_extern.pxd # # extern blocks define interfaces for Cython to C code cdef extern from &amp;quot;my_random.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do Docker on </title>
    <link>https://www.wikiod.com/pt/docs/docker/</link>
    <description>Recent content in Tutorial do Docker on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Docker</title>
      <link>https://www.wikiod.com/pt/docker/introducao-ao-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/introducao-ao-docker/</guid>
      <description>Instalando o Docker no Windows # Requisitos: versão de 64 bits do Windows 7 ou superior em uma máquina que suporte a Tecnologia de Virtualização de Hardware e esteja habilitada.
Embora o binário docker possa ser executado nativamente no Windows, para criar e hospedar contêineres, você precisa executar uma máquina virtual Linux na caixa.
Desde a versão 1.12, você não precisa ter uma VM separada para ser instalada, pois o Docker pode usar a funcionalidade nativa do Hyper-V do Windows para iniciar uma pequena máquina Linux para atuar como back-end.</description>
    </item>
    
    <item>
      <title>API do Docker Engine</title>
      <link>https://www.wikiod.com/pt/docker/api-do-docker-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/api-do-docker-engine/</guid>
      <description>Uma API que permite controlar todos os aspectos do Docker de dentro de seus próprios aplicativos, criar ferramentas para gerenciar e monitorar aplicativos executados no Docker e até usá-lo para criar aplicativos no próprio Docker.
Habilite o acesso remoto à API do Docker no Linux executando o systemd # Linux rodando systemd, como Ubuntu 16.04, adicionando -H tcp://0.0.0.0:2375 a /etc/default/docker não tem o efeito que costumava ter.
Em vez disso, crie um arquivo chamado /etc/systemd/system/docker-tcp.</description>
    </item>
    
    <item>
      <title>Contêineres em execução</title>
      <link>https://www.wikiod.com/pt/docker/conteineres-em-execucao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/conteineres-em-execucao/</guid>
      <description>Sintaxe # docker run [OPÇÕES] IMAGEM [COMANDO] [ARG&amp;hellip;] Excluir automaticamente um contêiner após executá-lo # Normalmente, um contêiner do Docker persiste após ser encerrado. Isso permite que você execute o contêiner novamente, inspecione seu sistema de arquivos e assim por diante. No entanto, às vezes você deseja executar um contêiner e excluí-lo imediatamente após sua saída. Por exemplo, para executar um comando ou mostrar um arquivo do sistema de arquivos. O Docker fornece a opção de linha de comando --rm para esta finalidade:</description>
    </item>
    
    <item>
      <title>Depurando um contêiner</title>
      <link>https://www.wikiod.com/pt/docker/depurando-um-conteiner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/depurando-um-conteiner/</guid>
      <description>Sintaxe # estatísticas do docker [OPÇÕES] [CONTAINER&amp;hellip;] logs docker [OPÇÕES] CONTAINER parte superior do docker [OPÇÕES] RECIPIENTE [PS OPÇÕES] Imprimindo os logs # Seguir os logs é a maneira menos intrusiva de depurar um aplicativo em execução ao vivo. Este exemplo reproduz o comportamento do tradicional tail -f some-application.log no container 7786807d8084.
docker logs --follow --tail 10 7786807d8084 Este comando basicamente mostra a saída padrão do processo do contêiner (o processo com pid 1).</description>
    </item>
    
    <item>
      <title>Modo de enxame do Docker</title>
      <link>https://www.wikiod.com/pt/docker/modo-de-enxame-do-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/modo-de-enxame-do-docker/</guid>
      <description>Um swarm é uma série de Docker Engines (ou nós) que implantam serviços coletivamente. O Swarm é usado para distribuir o processamento em muitas máquinas físicas, virtuais ou em nuvem.
Sintaxe # Inicializar um enxame: docker swarm init [OPÇÕES]
Junte-se a um enxame como um nó e/ou gerente: docker swarm join [OPÇÕES] HOST:PORT
Criar um novo serviço: docker service create [OPTIONS] IMAGE [COMMAND] [ARG&amp;hellip;]
Exibir informações detalhadas sobre um ou mais serviços: docker service inspect [OPTIONS] SERVICE [SERVICE&amp;hellip;]</description>
    </item>
    
    <item>
      <title>Dockerfiles</title>
      <link>https://www.wikiod.com/pt/docker/dockerfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/dockerfiles/</guid>
      <description>Dockerfiles são arquivos usados ​​para construir imagens do Docker programaticamente. Eles permitem que você crie uma imagem do Docker de forma rápida e reproduzível e, portanto, são úteis para colaboração. Os Dockerfiles contêm instruções para criar uma imagem do Docker. Cada instrução é escrita em uma linha e é dada na forma &amp;lt;INSTRUCTION&amp;gt;&amp;lt;argument(s)&amp;gt;. Os Dockerfiles são usados ​​para construir imagens do Docker usando o comando docker build.
Os Dockerfiles têm o formato:</description>
    </item>
    
    <item>
      <title>Gerenciando contêineres</title>
      <link>https://www.wikiod.com/pt/docker/gerenciando-conteineres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/gerenciando-conteineres/</guid>
      <description>Sintaxe # docker rm [OPÇÕES] CONTAINER [CONTAINER&amp;hellip;] anexo docker [OPÇÕES] CONTAINER docker exec [OPÇÕES] CONTAINER COMMAND [ARG&amp;hellip;] docker ps [OPÇÕES] logs docker [OPÇÕES] CONTAINER docker inspecionar [OPÇÕES] CONTAINER|IMAGE [CONTAINER|IMAGE&amp;hellip;] Nos exemplos acima, sempre que container é um parâmetro do comando docker, ele é mencionado como &amp;lt;container&amp;gt; ou container id ou &amp;lt;CONTAINER_NAME&amp;gt;. Em todos esses lugares, você pode passar um nome de contêiner ou id de contêiner para especificar um contêiner. Listando contêineres # $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2bc9b1988080 redis &amp;quot;docker-entrypoint.</description>
    </item>
    
    <item>
      <title>Checkpoint e restauração de contêineres</title>
      <link>https://www.wikiod.com/pt/docker/checkpoint-e-restauracao-de-conteineres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/checkpoint-e-restauracao-de-conteineres/</guid>
      <description>Compile o docker com checkpoint e restauração habilitados (ubuntu) # Para compilar o docker é recomendado que você tenha pelo menos 2 GB de RAM. Mesmo com isso, às vezes falha, então é melhor optar por 4 GB.
verifique se git e make estão instalados
sudo apt-get install make git-core -y instale um novo kernel (pelo menos 4.2)
sudo apt-get install linux-generic-lts-xenial reinicie a máquina para ter o novo kernel ativo</description>
    </item>
    
    <item>
      <title>Volumes de dados e contêineres de dados</title>
      <link>https://www.wikiod.com/pt/docker/volumes-de-dados-e-conteineres-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/volumes-de-dados-e-conteineres-de-dados/</guid>
      <description>Contêineres somente de dados # Os contêineres somente de dados estão obsoletos e agora são considerados um antipadrão!
Antigamente, antes do subcomando volume do Docker, e antes que fosse possível criar volumes nomeados, o Docker excluía volumes quando não havia mais referências a eles em nenhum contêiner. Os contêineres somente de dados são obsoletos porque o Docker agora oferece a capacidade de criar volumes nomeados, bem como muito mais utilidade por meio dos vários subcomandos volume do docker.</description>
    </item>
    
    <item>
      <title>Construindo imagens</title>
      <link>https://www.wikiod.com/pt/docker/construindo-imagens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/docker/construindo-imagens/</guid>
      <description>Parâmetros # | Parâmetro | Detalhes | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| | &amp;ndash;puxar | Garante que a imagem base (FROM) esteja atualizada antes de construir o restante do Dockerfile.|
Construindo uma imagem de um Dockerfile # Uma vez que você tenha um Dockerfile, você pode construir uma imagem dele usando docker build. A forma básica deste comando é:
compilação do docker -t nome da imagem caminho Se o seu Dockerfile não for chamado de Dockerfile, você pode usar o sinalizador -f para dar o nome do Dockerfile a ser compilado.</description>
    </item>
    
  </channel>
</rss>

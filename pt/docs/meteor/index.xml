<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial meteoro on </title>
    <link>https://www.wikiod.com/pt/docs/meteor/</link>
    <description>Recent content in tutorial meteoro on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/meteor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o meteoro</title>
      <link>https://www.wikiod.com/pt/meteor/comecando-com-o-meteoro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/comecando-com-o-meteoro/</guid>
      <description>Começando # #Instala Meteoro
No OS X e Linux # Instale a versão oficial mais recente do Meteor do seu terminal:
$ curl https://install.meteor.com/ | sh No Windows # Baixe o instalador oficial do Meteor aqui.
Crie seu aplicativo # Depois de instalar o Meteor, crie um projeto:
$ meteor create myapp Executá-lo # Execute-o localmente:
$ cd myapp $ meteor npm install $ meteor Nota: Servidor Meteor rodando em: http://localhost:3000/</description>
    </item>
    
    <item>
      <title>Publicando dados</title>
      <link>https://www.wikiod.com/pt/meteor/publicando-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/publicando-dados/</guid>
      <description>Dentro do subsistema de dados do Meteor, uma publicação do servidor e suas assinaturas de clientes correspondentes são os principais mecanismos de transporte de dados reativo e ao vivo, onde os dados subjacentes são constantemente sincronizados entre o servidor e o cliente.
Publicações globais # Uma publicação global não possui um nome e não requer uma assinatura do cliente conectado e, portanto, está disponível para o cliente conectado assim que o cliente se conectar ao servidor.</description>
    </item>
    
    <item>
      <title>Estrutura de diretórios</title>
      <link>https://www.wikiod.com/pt/meteor/estrutura-de-diretorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/estrutura-de-diretorios/</guid>
      <description>Antes do lançamento do Meteor 1.3, os desenvolvedores do Meteor estavam frustrados com o manuseio do Meteor.js de dependências de arquivos e variáveis ​​globais. Em resposta, o Meteor estabeleceu novos padrões para estruturas de projeto, a fim de tornar o sistema de dependência do projeto mais simplificado. Este tópico explica a estrutura padronizada do projeto e os princípios por trás dela.
cliente Todo o código no diretório do cliente é executado apenas no lado do cliente ou no navegador da web.</description>
    </item>
    
    <item>
      <title>Guia para iniciantes para instalar o Meteor 1.4 no AWS EC2</title>
      <link>https://www.wikiod.com/pt/meteor/guia-para-iniciantes-para-instalar-o-meteor-14-no-aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/guia-para-iniciantes-para-instalar-o-meteor-14-no-aws-ec2/</guid>
      <description>Inscreva-se no serviço da AWS # Como muitos iniciantes estão confusos sobre hospedagem na nuvem. Estou escrevendo este guia para percorrer a configuração do meteoro no aws com o ubuntu os. Se você já tem sua instância em execução, sinta-se à vontade para pular esta etapa e ir direto para a instalação do meteor no aws.
Faça login no Console AWS. Selecione EC2. Vá para o Painel EC2. Em Criar instância, clique em iniciar instância.</description>
    </item>
    
    <item>
      <title>Meteoro &#43; Reagir</title>
      <link>https://www.wikiod.com/pt/meteor/meteoro--reagir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/meteoro--reagir/</guid>
      <description>React é uma biblioteca JavaScript para construir interfaces de usuário. É código aberto, desenvolvido e mantido pelo Facebook. Meteor tem suporte pronto para produção para React.
Recursos:
tutorial do React tutorial Meteor + React Configuração e &amp;ldquo;Hello World&amp;rdquo; # Adicione React ao seu projeto:
meteor npm install --save react react-dom react-mounter Crie o arquivo client/helloworld.jsx para exibir um componente React simples:
import React, { Component } from &#39;react&#39;; import { mount } from &#39;react-mounter&#39;; // This component only renders a paragraph containing &amp;quot;Hello World!</description>
    </item>
    
    <item>
      <title>Usando Meteor com um servidor proxy</title>
      <link>https://www.wikiod.com/pt/meteor/usando-meteor-com-um-servidor-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/usando-meteor-com-um-servidor-proxy/</guid>
      <description>Usando a variável de ambiente HTTP[S]_PROXY # Esta página descreve como usar a ferramenta de linha de comando Meteor (por exemplo, ao baixar pacotes, implantar seu aplicativo etc.) atrás de um servidor proxy.
Como muitos outros softwares de linha de comando, a ferramenta Meteor lê a configuração de proxy das variáveis ​​de ambiente HTTP_PROXY e HTTPS_PROXY (as variantes em minúsculas também funcionam). Exemplos de execução do Meteor atrás de um proxy:</description>
    </item>
    
    <item>
      <title>Electrify - Compilando Meteor como um aplicativo instalável localmente</title>
      <link>https://www.wikiod.com/pt/meteor/electrify---compilando-meteor-como-um-aplicativo-instalavel-localmente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/electrify---compilando-meteor-como-um-aplicativo-instalavel-localmente/</guid>
      <description>Instalando o Electrify para um aplicativo Meteor # O Electron transfere aplicativos da Web HTML para aplicativos nativos para uma variedade de dispositivos, incluindo a criação de aplicativos de desktop nativos. Também é muito fácil começar!
Para começar, devemos ter electron, nodejs, npm, git e meteor instalados. A familiaridade com essas ferramentas é vital para trabalhar com o Meteor, portanto, certifique-se de conhecer essas coisas primeiro.
Elétron
npm install -g electrify electron é o que estamos usando!</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.wikiod.com/pt/meteor/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/mongodb/</guid>
      <description>MongoDB é um programa de banco de dados orientado a documentos multiplataforma gratuito e de código aberto. Ao contrário dos bancos de dados SQL clássicos, o MongoDB usa BSON (como JSON) para armazenar dados. O Meteor foi projetado para usar o MongoDB para armazenamento de banco de dados e este tópico explica como implementar o armazenamento do MongoDB em aplicativos Meteor.
Exportar um Mongo DB remoto, importar para um Meteor Mongo DB local # Útil quando você deseja obter uma cópia de um banco de dados de produção para brincar localmente.</description>
    </item>
    
    <item>
      <title>Modelo Blaze</title>
      <link>https://www.wikiod.com/pt/meteor/modelo-blaze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/modelo-blaze/</guid>
      <description>Blaze é uma biblioteca poderosa para criar interfaces de usuário escrevendo modelos HTML dinâmicos e reativos. O modelo Blaze permite que loops e lógica condicional sejam usados ​​diretamente na marcação HTML. Esta seção explica e demonstra o uso adequado de modelagem no Meteor.js com o Blaze.
Preencha um modelo de uma chamada de método # &amp;lt;template name=&amp;quot;myTemplate&amp;quot;&amp;gt; {{#each results}} &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;{{name}}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;{{age}}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; {{/each}} &amp;lt;/template&amp;gt; Template.myTemplate.onCreated(function() { this.results = new ReactiveVar(); Meteor.call(&#39;myMethod&#39;, (error, result) =&amp;gt; { if (error) { // do something with the error } else { // results is an array of {name, age} objects this.</description>
    </item>
    
    <item>
      <title>Recuperando dados de um Meteor.call</title>
      <link>https://www.wikiod.com/pt/meteor/recuperando-dados-de-um-meteorcall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/meteor/recuperando-dados-de-um-meteorcall/</guid>
      <description>O básico do Meteor.call # Meteor.call(name, [arg1, arg2...], [asyncCallback]) (1) nome String (2) Nome do método para invocar (3) arg1, arg2&amp;hellip; Objeto compatível com EJSON [Opcional]
(4) Função asyncCallback [Opcional]
Por um lado, você pode fazer: (via Session variable ou via ReactiveVar)
var syncCall = Meteor.call(&amp;quot;mymethod&amp;quot;) // Sync call Isso significa que se você fizer algo assim, no lado do servidor, você fará:
Meteor.methods({ mymethod: function() { let asyncToSync = Meteor.</description>
    </item>
    
  </channel>
</rss>

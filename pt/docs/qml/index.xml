<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial qml on </title>
    <link>https://www.wikiod.com/pt/docs/qml/</link>
    <description>Recent content in Tutorial qml on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com qml</title>
      <link>https://www.wikiod.com/pt/qml/comecando-com-qml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qml/comecando-com-qml/</guid>
      <description>Olá Mundo # Um aplicativo simples mostrando o texto &amp;ldquo;Hello World&amp;rdquo; no centro da janela.
import QtQuick 2.3 import QtQuick.Window 2.0 Window { visible: true width: 640 height: 480 title: qsTr(&amp;quot;Hello World&amp;quot;) //The method qsTr() is used for translations from one language to other. Text { text: qsTr(&amp;quot;Hello World&amp;quot;) anchors.centerIn: parent } } Instalação # QML vem com a versão mais recente do framework de aplicação multiplataforma Qt. Você pode encontrar a versão mais recente do Qt na seção de downloads.</description>
    </item>
    
    <item>
      <title>Criando elementos personalizados em C&#43;&#43;</title>
      <link>https://www.wikiod.com/pt/qml/criando-elementos-personalizados-em-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qml/criando-elementos-personalizados-em-c-/</guid>
      <description>Criando elementos personalizados em C++ # QML veio com um rico conjunto de elementos visuais. Usando apenas QML podemos construir aplicações complexas com esses elementos. Também é muito fácil construir seu próprio elemento baseado em um conjunto de itens padrão como Retângulo, Botão, Imagem etc. Além disso, podemos usar itens como Canvas para construir elementos com pintura personalizada. Parece que podemos construir uma variedade de aplicativos apenas em QML, sem tocar nos recursos de C++.</description>
    </item>
    
    <item>
      <title>Vinculação de propriedade</title>
      <link>https://www.wikiod.com/pt/qml/vinculacao-de-propriedade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qml/vinculacao-de-propriedade/</guid>
      <description>A propriedade de um objeto pode receber um valor estático que permanece constante até que seja explicitamente atribuído um novo valor. No entanto, para aproveitar ao máximo o QML e seu suporte interno para comportamentos de objetos dinâmicos, a maioria dos objetos QML usa associações de propriedade.
As associações de propriedade são um recurso central do QML que permite que os desenvolvedores especifiquem relacionamentos entre diferentes propriedades de objetos. Quando as dependências de uma propriedade mudam de valor, a propriedade é atualizada automaticamente de acordo com o relacionamento especificado.</description>
    </item>
    
    <item>
      <title>Integração com C&#43;&#43;</title>
      <link>https://www.wikiod.com/pt/qml/integracao-com-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qml/integracao-com-c-/</guid>
      <description>Criando um modelo simples para TreeView # Desde o Qt 5.5 temos um novo e maravilhoso TreeView, um controle que todos estávamos esperando. Um TreeView implementa uma representação em árvore de itens de um modelo. Em geral, parece com outras visualizações QML - ListView ou TableView. Mas a estrutura de dados do TreeView é mais complexa.
Um dado em ListView ou TableView é representado por uma matriz unidimensional de nós. Em TreeView cada nó pode conter seu próprio array de nós.</description>
    </item>
    
    <item>
      <title>Animação</title>
      <link>https://www.wikiod.com/pt/qml/animacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/qml/animacao/</guid>
      <description>Animação de números simples # Uma das animações básicas que você pode encontrar é a NumberAnimation. Esta animação funciona alterando o valor numérico de uma propriedade de um item de um estado inicial para um estado final. Considere o seguinte exemplo completo:
import QtQuick 2.7 import QtQuick.Controls 2.0 ApplicationWindow { visible: true width: 400 height: 640 Rectangle{ id: rect anchors.centerIn: parent height: 100 width: 100 color: &amp;quot;blue&amp;quot; MouseArea{ anchors.fill: parent onClicked: na.</description>
    </item>
    
  </channel>
</rss>

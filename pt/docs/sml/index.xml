<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sml Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/sml/</link>
    <description>Recent content in sml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com sml</title>
      <link>https://www.wikiod.com/pt/sml/comecando-com-sml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sml/comecando-com-sml/</guid>
      <description>Instalação # Há uma dúzia de implementações do Standard ML. MLton produz código muito otimizado, mas não tem REPL. SML/NJ é o mais usado, mas tem mensagens de erro um pouco difíceis para fins de aprendizado. Moscow ML e Poly/ML são fáceis de usar, mas não suportam o formato de pacote .mlb. Isso não é essencial para começar, no entanto.
Aqui estão as instruções para instalar cada SML/NJ, Moscow ML e Poly/ML divididos por sistema operacional.</description>
    </item>
    
    <item>
      <title>Comentários</title>
      <link>https://www.wikiod.com/pt/sml/comentarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sml/comentarios/</guid>
      <description>Sintaxe # (* abre um comentário de bloco *) fecha um comentário de bloco (* e *) devem ser balanceados em número Todos os comentários são comentários de bloco # (************************************************* * All comments in SML are block comments * Block Comments begin with &#39;(*&#39; * Block Comments end with &#39;*)&#39; * (* Block Comments can be nested *) * The additional framing asterisks at the beginning * and end of this block comment are common to languages * of SML&#39;s vintage.</description>
    </item>
    
    <item>
      <title>Tipos Numéricos</title>
      <link>https://www.wikiod.com/pt/sml/tipos-numericos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sml/tipos-numericos/</guid>
      <description>Sintaxe # Os números reais devem começar com um ou mais dígitos seguidos por um ponto seguido de um ou mais dígitos. *~ é o operador para denotar números negativos div é o operador para divisão de inteiros. / é o operador para divisão real. Inteiro # Noções básicas de números inteiros
Standard ML of New Jersey v110.78 [built: Thu Jul 23 11:21:58 2015] - 6; val it = 6 : int - ~6; val it = ~6 : int - 6 + ~6; val it = 0 : int Divisão inteira</description>
    </item>
    
    <item>
      <title>Programação interativa usando o REPL</title>
      <link>https://www.wikiod.com/pt/sml/programacao-interativa-usando-o-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sml/programacao-interativa-usando-o-repl/</guid>
      <description>Sintaxe # Ao contrário dos arquivos de código-fonte, o ponto e vírgula &amp;lsquo;;&amp;rsquo; é obrigatório terminar cada expressão no REPL. Iniciando o SMLNJ REPL # REPL significa &amp;lsquo;Ler Evaluate Print Loop&amp;rsquo;. O REPL pode ser usado para escrever e executar código uma linha por vez e é uma alternativa para escrever código em um arquivo e então compilar ou interpretar o arquivo inteiro antes da execução.
Para iniciar o SMLNJ REPL a partir de um prompt de comando:</description>
    </item>
    
    <item>
      <title>Sistema de Módulos</title>
      <link>https://www.wikiod.com/pt/sml/sistema-de-modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sml/sistema-de-modulos/</guid>
      <description>Avaliação preguiçosa # O ML padrão não tem suporte interno para avaliação lenta. Algumas implementações, notadamente SML/NJ, têm primitivas de avaliação preguiçosa não padronizadas, mas programas que usam essas primitivas não serão portáveis. As suspensões preguiçosas também podem ser implementadas de forma portátil, utilizando o sistema de módulos da Standard ML.
Primeiro definimos uma interface, ou assinatura, para manipular suspensões lentas:
signature LAZY = sig type &#39;a lazy val pure : &#39;a -&amp;gt; &#39;a lazy val delay : (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;a -&amp;gt; &#39;b lazy val force : &#39;a lazy -&amp;gt; &#39;a exception Diverge val fix : (&#39;a lazy -&amp;gt; &#39;a) -&amp;gt; &#39;a end Esta assinatura indica que:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial jvm on </title>
    <link>https://www.wikiod.com/pt/docs/jvm/</link>
    <description>Recent content in tutorial jvm on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com jvm</title>
      <link>https://www.wikiod.com/pt/jvm/comecando-com-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jvm/comecando-com-jvm/</guid>
      <description>Instalação ou Configuração # Instruções detalhadas sobre como configurar ou instalar o jvm.
Ativando GC Paralelo # Parallel GC é o coletor Stop-The-World (STW) que para todos os encadeamentos do aplicativo ao executar o coletor de lixo.
Quando o Parallel GC foi introduzido, foi habilitado apenas o GC paralelo no coletor de geração jovem e o OldGeneration Collector era um coletor de parada do mundo de thread único, mas posteriormente introduziu a opção de linha de comando separada para habilitar o Old Parallel.</description>
    </item>
    
    <item>
      <title>JVM Heap</title>
      <link>https://www.wikiod.com/pt/jvm/jvm-heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jvm/jvm-heap/</guid>
      <description>Configurando o tamanho máximo de heap. # A maioria das JVMs tem uma opção para definir o tamanho máximo de heap, por exemplo.
-Xmx64m -Xmx8g Em Java 1.0 a 1.2 você pode usar
-mx64m e isso ainda está disponível em algumas JVMs para compatibilidade com versões anteriores (por exemplo, Oracle JVM).
Existem alguns equívocos comuns sobre essa configuração.
Não define o tamanho do heap, apenas o máximo. -Xms define o tamanho do heap inicial.</description>
    </item>
    
    <item>
      <title>Despejo de pilha JVM</title>
      <link>https://www.wikiod.com/pt/jvm/despejo-de-pilha-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jvm/despejo-de-pilha-jvm/</guid>
      <description>Gerando despejo de heap em OutOfMemoryError # Observação: Este exemplo é baseado na implementação Oracle JVM.
Ferramentas integradas como jmap, jconsole e jvisualvm estão disponíveis em um JDK e podem ser usadas para gerar e analisar dumps de memória heap obtidos de um aplicativo JVM em execução. No entanto, uma opção para gerar um heap dump sem usar ferramentas JDK é adicionar o argumento VM -XX:+HeapDumpOnOutOfMemoryError que diz à JVM para gerar automaticamente um heap dump quando ocorrer um OutOfMemoryError, e o argumento -XX:HeapDumpPath para especificar o caminho para o dump de heap.</description>
    </item>
    
  </channel>
</rss>

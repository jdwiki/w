<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial three.js on </title>
    <link>https://www.wikiod.com/pt/docs/three-js/</link>
    <description>Recent content in tutorial three.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/three-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeiros passos com o three.js</title>
      <link>https://www.wikiod.com/pt/three-js/primeiros-passos-com-o-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/primeiros-passos-com-o-threejs/</guid>
      <description>Instalação ou Configuração # Você pode instalar three.js via npm:
npm install three
Você pode adicioná-lo de um CDN ao seu HTML:
Você pode usar o three.js editor para experimentar e baixar o projeto como exemplo ou ponto de partida.
Caldeira simples: cubo giratório e controles de órbita com amortecimento # Este é o arquivo HTML básico que pode ser usado como padrão ao iniciar um projeto. Este clichê usa controles de órbita com amortecimento (câmera que pode se mover em torno de um objeto com efeito de desaceleração) e cria um cubo giratório.</description>
    </item>
    
    <item>
      <title>Controles de câmera em Three.js</title>
      <link>https://www.wikiod.com/pt/three-js/controles-de-camera-em-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/controles-de-camera-em-threejs/</guid>
      <description>Este documento descreve como você pode adicionar facilmente alguns controles de câmera existentes à sua cena, além de fornecer orientações sobre como criar controles personalizados.
Observe que os scripts de controle pré-fabricados podem ser encontrados na pasta /examples/js/controls da biblioteca.
Controles de órbita # Uma Orbit Camera é aquela que permite ao usuário girar em torno de um ponto central, mas mantendo um determinado eixo travado. Isso é extremamente popular porque evita que a cena fique &amp;ldquo;inclinada&amp;rdquo; fora do eixo.</description>
    </item>
    
    <item>
      <title>Seleção de objetos</title>
      <link>https://www.wikiod.com/pt/three-js/selecao-de-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/selecao-de-objetos/</guid>
      <description>Seleção de objetos / Raycasting # Raycasting significa lançar um raio da posição do mouse na tela para a cena, é assim que o threejs determina em qual objeto você deseja clicar se o tiver implementado. Threejs obtém essa informação usando um octree, mas ainda em produção você pode não querer calcular o resultado em cada frame ou no evento mousemove, mas sim no evento click para um aplicativo mais acessível com requisitos baixos.</description>
    </item>
    
    <item>
      <title>Geometrias</title>
      <link>https://www.wikiod.com/pt/three-js/geometrias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/geometrias/</guid>
      <description>Os exemplos funcionam a partir do three.js R79 (revisão 79).
TRÊS.BoxGeometria # THREE.BoxGeometry constrói caixas como cubóides e cubos.
Cubos # Cubos criados usando THREE.BoxGeometry usariam o mesmo comprimento para todos os lados.
JavaScript
//Creates scene and camera var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); //Creates renderer and adds it to the DOM var renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.</description>
    </item>
    
    <item>
      <title>Loops de renderização para animação Atualizando objetos dinamicamente</title>
      <link>https://www.wikiod.com/pt/three-js/loops-de-renderizacao-para-animacao-atualizando-objetos-dinamicamente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/loops-de-renderizacao-para-animacao-atualizando-objetos-dinamicamente/</guid>
      <description>Este documento descreve algumas maneiras comuns de adicionar animação diretamente às cenas do Three.js. Embora existam bibliotecas e frameworks que podem adicionar movimento dinâmico à sua cena (interpolações, física, etc), é útil entender como você pode fazer isso sozinho simplesmente com algumas linhas de código.
O conceito central da animação é atualizar as propriedades de um objeto (rotação e translação, geralmente) em pequenas quantidades ao longo de um período de tempo.</description>
    </item>
    
    <item>
      <title>Texturas e Materiais</title>
      <link>https://www.wikiod.com/pt/three-js/texturas-e-materiais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/texturas-e-materiais/</guid>
      <description>Uma boa introdução ao material e texturas.
Texturas difusas, salientes, especulares e transparentes.
Parâmetros # Parâmetro Detalhes cor Valor numérico do componente RGB da cor. intensidade Valor numérico da intensidade/intensidade da luz. fov Campo de visão vertical da câmera frustum. aspecto Um pedaço de câmera olha para o sistema. perto Câmera frustum perto de avião. distante Um pedaço de câmera está claramente longe. raio raio da esfera. O padrão é 50.</description>
    </item>
    
    <item>
      <title>Malhas</title>
      <link>https://www.wikiod.com/pt/three-js/malhas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/three-js/malhas/</guid>
      <description>Um Three.js Mesh é uma classe base que herda de [Object3d](https://threejs.org/docs/ ?q=geomet#Reference/Core/Object3D) e é usado para instanciar objetos poligonais combinando um Geometry com um Material . Mesh também é a classe base para as classes mais avançadas MorphAnimMesh e SkinnedMesh.
Sintaxe # novo TRÊS.Malha(geometria, material); Tanto a geometria quanto o material são opcionais e terão como padrão BufferGeometry e MeshBasicMaterial respectivamente se não forem fornecidos no construtor.
Renderize uma malha de cubo com uma geometria de caixa e um material básico # var scene = new THREE.</description>
    </item>
    
  </channel>
</rss>

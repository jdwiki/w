<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do Apache Maven on </title>
    <link>https://www.wikiod.com/pt/docs/maven/</link>
    <description>Recent content in Tutorial do Apache Maven on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Apache Maven</title>
      <link>https://www.wikiod.com/pt/maven/introducao-ao-apache-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/introducao-ao-apache-maven/</guid>
      <description>Instalação ou configuração # Versões binárias do Maven podem ser baixadas [do site do Maven] (https://maven.apache.org/download.cgi).
O binário vem como um arquivo zip ou como um arquivo tar.gz. Após baixá-lo, as instruções da página de instalação podem ser seguidas:
Certifique-se de que a variável de ambiente JAVA_HOME esteja definida e aponte para sua instalação JDK (não JRE). Por exemplo, em uma máquina Windows, esta pasta de instalação pode corresponder a C:\Program Files\Java\jdk1.</description>
    </item>
    
    <item>
      <title>Plug-in de montagem do Maven</title>
      <link>https://www.wikiod.com/pt/maven/plug-in-de-montagem-do-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/plug-in-de-montagem-do-maven/</guid>
      <description>Criando arquivo .jar com todas as dependências do projeto # Para criar um JAR contendo todas as suas dependências, é possível usar o formato do descritor embutido [jar-with-dependencies](http://maven.apache.org/plugins/maven-assembly-plugin/descriptor -refs.html#jar-with-dependencies). O exemplo a seguir configura uma execução do Assembly Plugin vinculado à fase package, usando este descritor interno e declarando uma classe principal de com.example:
&amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;archive&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;mainClass&amp;gt;com.example&amp;lt;/mainClass&amp;gt; &amp;lt;/manifest&amp;gt; &amp;lt;/archive&amp;gt; &amp;lt;descriptorRefs&amp;gt; &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt; &amp;lt;/descriptorRefs&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; Corrida:</description>
    </item>
    
    <item>
      <title>POM - Modelo de Objeto do Projeto</title>
      <link>https://www.wikiod.com/pt/maven/pom---modelo-de-objeto-do-projeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/pom---modelo-de-objeto-do-projeto/</guid>
      <description>Estrutura do POM # O Project Object Model é a unidade básica do Maven e define a estrutura do projeto, dependências, etc.
Os itens a seguir são muito mínimos para criar um POM:
raiz do projeto modelVersion – deve ser definido como 4.0.0 groupId – o ID do grupo do projeto artifactId – o ID do artefato (projeto) version – a versão do artefato no grupo especificado groupId, artifactId e version são chamados de coordenadas Maven e às vezes abreviados com GAV.</description>
    </item>
    
    <item>
      <title>Criar um plug-in Maven</title>
      <link>https://www.wikiod.com/pt/maven/criar-um-plug-in-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/criar-um-plug-in-maven/</guid>
      <description>O Maven permite implementar e usar plugins personalizados. Esses plugins permitem que comportamentos adicionais sejam vinculados a qualquer fase do ciclo de vida do Maven.
Cada objetivo do Maven é criado pela implementação de um MOJO (Maven Ordinary Java Object): uma classe Java implementada com anotações que descrevem como invocá-lo.
O prefixo de meta de um plug-in é derivado de seu nome de artefato. Um artefato hello-world-plugin cria um prefixo de meta hello-world.</description>
    </item>
    
    <item>
      <title>Integração do Eclipse</title>
      <link>https://www.wikiod.com/pt/maven/integracao-do-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/integracao-do-eclipse/</guid>
      <description>Instale o Maven no Eclipse # Você pode aproveitar os recursos poderosos do Apache Maven no Eclipse instalando o recurso M2Eclipse. Siga estas etapas para instalar o Maven no Eclipse:
Abra o Eclipse e selecione Help → Install New Software…
Na caixa de diálogo aberta, selecione o botão Adicionar&amp;hellip; para adicionar um novo repositório.
Preencha o formulário com as informações abaixo e confirme com OK:
Name: M2Eclipse
Location: http://download.eclipse.org/technology/m2e/releases
Depois que Pending&amp;hellip; terminar, Selecione tudo e selecione Próximo.</description>
    </item>
    
    <item>
      <title>Plugin Maven Tomcat</title>
      <link>https://www.wikiod.com/pt/maven/plugin-maven-tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/plugin-maven-tomcat/</guid>
      <description>Inicie o tomcat usando o plugin maven. # No exemplo, iniciaremos o tomcat 7 usando o plugin maven, opcionalmente adicionaremos proteção de usuário/senha para o ponto final REST. Também adicionando recurso de construção de guerra.
Adicione a seção abaixo na seção de plugins do pom para tomcat
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat7-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;url&amp;gt;http://localhost:8090/manager&amp;lt;/url&amp;gt; &amp;lt;server&amp;gt;localhost&amp;lt;/server&amp;gt; &amp;lt;port&amp;gt;8191&amp;lt;/port&amp;gt; &amp;lt;path&amp;gt;/${project.build.finalName}&amp;lt;/path&amp;gt; &amp;lt;tomcatUsers&amp;gt;src/main/tomcatconf/tomcat-users.xml&amp;lt;/tomcatUsers&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Certifique-se de que o plug-in maven war foi adicionado e o web.</description>
    </item>
    
    <item>
      <title>Ciclo de construção do Maven</title>
      <link>https://www.wikiod.com/pt/maven/ciclo-de-construcao-do-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/ciclo-de-construcao-do-maven/</guid>
      <description>A seguir está uma lista completa das fases do ciclo de vida de compilação padrão do Maven. Cada uma dessas fases é invocada adicionando-a ao comando mvn, por exemplo. instalar mvn.
Fases do ciclo de vida da compilação Maven # validate Valida se o projeto está correto e se todas as informações necessárias estão disponíveis para a compilação.
initialize Inicializa o ambiente de compilação, por exemplo. define propriedades ou cria diretórios.</description>
    </item>
    
    <item>
      <title>Plugin Maven Surefire</title>
      <link>https://www.wikiod.com/pt/maven/plugin-maven-surefire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/plugin-maven-surefire/</guid>
      <description>Sintaxe # teste mvn mvn -Dtest=com.example.package.ExampleTest test Testando uma classe Java com JUnit e o plugin Maven Surefire # O plugin Maven Surefire é executado durante a fase de teste do processo de construção do Maven ou quando test é especificado como um objetivo do Maven. A estrutura de diretórios a seguir e o arquivo pom.xml mínimo configurarão o Maven para executar um teste.
Estrutura de diretórios dentro do diretório raiz do projeto:</description>
    </item>
    
    <item>
      <title>Acesse as informações do Maven em código</title>
      <link>https://www.wikiod.com/pt/maven/acesse-as-informacoes-do-maven-em-codigo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/acesse-as-informacoes-do-maven-em-codigo/</guid>
      <description>Às vezes, é útil obter as propriedades do maven, como a versão atual, no código. Aqui estão algumas maneiras de fazer isso.
Obtendo o número da versão de dentro de um jar # Se você empacotar seu aplicativo em um jar usando o maven-jar-plugin ou o maven-assembly-plugin, uma maneira fácil de obter a versão atual do pom é adicionar uma entrada no manifesto, que é então disponível em Java.
O segredo é definir o sinalizador addDefaultImplementationEntries para true (e o addDefaultSpecificationEntries é que você também precisa do id do artefato).</description>
    </item>
    
    <item>
      <title>Faça um lançamento</title>
      <link>https://www.wikiod.com/pt/maven/faca-um-lancamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/maven/faca-um-lancamento/</guid>
      <description>O plugin padrão do Maven usado por um processo de lançamento é o maven-release-plugin – a configuração para este plugin é mínima:
SCM no maven pom: O processo de Release irá interagir com o Source Control do projeto – isso significa que precisamos definir o elemento &amp;ldquo;scm&amp;rdquo; em nosso pom.xml. O elemento &amp;ldquo;scm&amp;rdquo; para uma compilação de lançamento deve conter informações suficientes para confira a tag que foi criada para esta versão.</description>
    </item>
    
  </channel>
</rss>

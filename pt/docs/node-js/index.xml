<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Node.js on </title>
    <link>https://www.wikiod.com/pt/docs/node-js/</link>
    <description>Recent content in Tutorial Node.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/node-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Node.js</title>
      <link>https://www.wikiod.com/pt/node-js/introducao-ao-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/introducao-ao-nodejs/</guid>
      <description>Olá mundo servidor HTTP # Primeiro, instale o Node.js para sua plataforma.
Neste exemplo, criaremos um servidor HTTP escutando na porta 1337, que envia Hello, World! para o navegador. Observe que, em vez de usar a porta 1337, você pode usar qualquer número de porta de sua escolha que não esteja sendo usado por nenhum outro serviço.
O módulo http é um [core module] do Node.js(https://www.wikiod.com/pt/node-js/introducao-ao-nodejs#Módulos principais ) (um módulo incluído na fonte do Node.</description>
    </item>
    
    <item>
      <title>Instalando o Node.js</title>
      <link>https://www.wikiod.com/pt/node-js/instalando-o-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/instalando-o-nodejs/</guid>
      <description>Usando o gerenciador de versões do nó (nvm) # Node Version Manager, também conhecido como nvm, é um script bash que simplifica o gerenciamento de várias versões do Node.js.
Para instalar o nvm, use o script de instalação fornecido:
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash Para o Windows existe um pacote nvm-windows com um instalador. Esta página GithHub contém os detalhes para instalar e usar o pacote nvm-windows.
Depois de instalar o nvm, execute &amp;ldquo;nvm on&amp;rdquo; na linha de comando.</description>
    </item>
    
    <item>
      <title>Aplicativos da Web com Express</title>
      <link>https://www.wikiod.com/pt/node-js/aplicativos-da-web-com-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/aplicativos-da-web-com-express/</guid>
      <description>O Express é uma estrutura de aplicativo da Web Node.js mínima e flexível, que fornece um conjunto robusto de recursos para a criação de aplicativos da Web.
O site oficial do Express é expressjs.com. A fonte pode ser encontrada no GitHub.
Sintaxe # app.get(caminho [, middleware], callback[, callback&amp;hellip;]) app.put(caminho [, middleware], callback[, callback&amp;hellip;]) app.post(caminho [, middleware], callback[, callback&amp;hellip;]) app[&amp;lsquo;delete&amp;rsquo;](caminho [, middleware], callback[, callback&amp;hellip;]) app.use(caminho [, middleware], callback[, callback&amp;hellip;]) app.use(retorno de chamada) Parâmetros # Parâmetro Detalhes caminho Especifica a parte do caminho ou a URL que o retorno de chamada fornecido manipulará.</description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://www.wikiod.com/pt/node-js/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/npm/</guid>
      <description>O Node Package Manager (npm) fornece as seguintes duas funcionalidades principais: Repositórios online para pacotes/módulos node.js que podem ser pesquisados ​​em search.nodejs.org. Utilitário de linha de comando para instalar pacotes Node.js, fazer gerenciamento de versão e gerenciamento de dependências de pacotes Node.js.
Sintaxe # npm &amp;lt;comando&amp;gt; onde &amp;lt;comando&amp;gt; é um dos seguintes: adicionar usuário adicionador apihelp autor caixa insetos c [cache] conclusão [configuração] [ddp][desdupe] [duplicado] reprovar documentos editar explorar Perguntas frequentes achar encontrar dupes [get][config] [ajuda] [ajuda-pesquisa] casa [i][17] [instalar][17] informações [calor][calor] não está questões a [link][11] [Lista] ll ln Conecte-se ls desatualizado [proprietário] pacote prefixo [ameixa seca] publicar r [rb][reconstruir] [reconstruir] remover [reposição] [reiniciar] [rm] raiz [run-script][runscript] [s][pesquisar] [se][pesquisar] [procurar] [configurar][configurar] mostrar embalar a vácuo [estrela][9] [estrelas][16] [iniciar][15] [parar][14] [submódulo][13] [tag][4] [teste][3] [tst][3] [e][12] [desinstalar][12] [desvincular][11] [despublicar][10] [retirar estrela][9] [para cima][8] [atualizar][8] [v][7] [versão][7] [visualizar][6] [whoami][5] 2: https://www.</description>
    </item>
    
    <item>
      <title>Como proteger aplicativos Node.js</title>
      <link>https://www.wikiod.com/pt/node-js/como-proteger-aplicativos-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/como-proteger-aplicativos-nodejs/</guid>
      <description>SSL/TLS em Node.js # Se você optar por lidar com SSL/TLS em seu aplicativo Node.js, considere que você também é responsável por manter a prevenção de ataques SSL/TLS neste momento. Em muitas arquiteturas servidor-cliente, o SSL/TLS termina em um proxy reverso, tanto para reduzir a complexidade do aplicativo quanto para reduzir o escopo da configuração de segurança.
Se seu aplicativo Node.js deve lidar com SSL/TLS, ele pode ser protegido carregando a chave e os arquivos de certificado.</description>
    </item>
    
    <item>
      <title>Integração MySQL</title>
      <link>https://www.wikiod.com/pt/node-js/integracao-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/integracao-mysql/</guid>
      <description>Neste tópico você aprenderá como integrar com Node.js usando a ferramenta de gerenciamento de banco de dados MYSQL. Você aprenderá várias maneiras de conectar e interagir com dados que residem no mysql usando um programa e script nodejs.
Conecte-se ao MySQL # Uma das maneiras mais fáceis de se conectar ao MySQL é usando o módulo mysql. Este módulo lida com a conexão entre o aplicativo Node.js e o servidor MySQL.</description>
    </item>
    
    <item>
      <title>pacote.json</title>
      <link>https://www.wikiod.com/pt/node-js/pacotejson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/pacotejson/</guid>
      <description>Você pode criar package.json com
npm init que perguntará sobre fatos básicos sobre seus projetos, incluindo identificador de licença.
Scripts # Você pode definir scripts que podem ser executados ou acionados antes ou depois de outro script.
{ &amp;quot;scripts&amp;quot;: { &amp;quot;pretest&amp;quot;: &amp;quot;scripts/pretest.js&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;scripts/test.js&amp;quot;, &amp;quot;posttest&amp;quot;: &amp;quot;scripts/posttest.js&amp;quot; } } Nesse caso, você pode executar o script executando um destes comandos:
$ npm run-script test $ npm run test $ npm test $ npm t Scripts predefinidos # Nome do roteiro Descrição pré-publicar Execute antes que o pacote seja publicado.</description>
    </item>
    
    <item>
      <title>ES do sistema de arquivos</title>
      <link>https://www.wikiod.com/pt/node-js/es-do-sistema-de-arquivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/es-do-sistema-de-arquivos/</guid>
      <description>No Node.js, operações com uso intensivo de recursos, como E/S, são executadas assincronamente, mas têm uma contrapartida síncrona (por exemplo, existe um fs.readFile e sua contrapartida é fs.readFileSync). Como o Node é de thread único, você deve ter cuidado ao usar operações síncronas, pois elas bloquearão todo o processo.
Se um processo for bloqueado por uma operação síncrona, todo o ciclo de execução (incluindo o loop de eventos) será interrompido. Isso significa que outro código assíncrono, incluindo eventos e manipuladores de eventos, não será executado e seu programa continuará aguardando até que a operação de bloqueio único seja concluída.</description>
    </item>
    
    <item>
      <title>Como implantar aplicativos Node.js em produção</title>
      <link>https://www.wikiod.com/pt/node-js/como-implantar-aplicativos-nodejs-em-producao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/como-implantar-aplicativos-nodejs-em-producao/</guid>
      <description>Configurando NODE_ENV=&amp;ldquo;produção&amp;rdquo; # As implantações de produção variam de várias maneiras, mas uma convenção padrão ao implantar em produção é definir uma variável de ambiente chamada NODE_ENV e definir seu valor como &amp;ldquo;production&amp;rdquo;.
sinalizadores de tempo de execução # Qualquer código em execução em seu aplicativo (incluindo módulos externos) pode verificar o valor de NODE_ENV:
if(process.env.NODE_ENV === &#39;production&#39;) { // We are running in production mode } else { // We are running in development mode } Dependências # Quando a variável de ambiente NODE_ENV é definida como &amp;lsquo;production&amp;rsquo;, todos os devDependencies em seu arquivo package.</description>
    </item>
    
    <item>
      <title>Emissores de eventos</title>
      <link>https://www.wikiod.com/pt/node-js/emissores-de-eventos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/node-js/emissores-de-eventos/</guid>
      <description>Quando um evento &amp;ldquo;dispara&amp;rdquo; (o que significa o mesmo que &amp;ldquo;publicar um evento&amp;rdquo; ou &amp;ldquo;emitir um evento&amp;rdquo;), cada ouvinte será chamado de forma síncrona (fonte), juntamente com quaisquer dados de acompanhamento que foram passados ​​para emit(), não importa quantos argumentos você passe:
myDog.on(&#39;bark&#39;, (howLoud, howLong, howIntense) =&amp;gt; { // handle the event }) myDog.emit(&#39;bark&#39;, &#39;loudly&#39;, &#39;5 seconds long&#39;, &#39;fiercely&#39;) Os ouvintes serão chamados na ordem em que foram cadastrados:
myDog.on(&#39;urinate&#39;, () =&amp;gt; console.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial atrevido on </title>
    <link>https://www.wikiod.com/pt/docs/sass/</link>
    <description>Recent content in Tutorial atrevido on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com sass</title>
      <link>https://www.wikiod.com/pt/sass/comecando-com-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/comecando-com-sass/</guid>
      <description>Variáveis # Se você tem um valor que usa com frequência, pode armazená-lo em uma variável. Você pode usar isso para definir esquemas de cores, por exemplo. Você só teria que definir seu esquema uma vez e então poderia usá-lo em todas as suas folhas de estilo.
Para definir uma variável, você deve prefixar seu nome com o símbolo $. (Como você faria em PHP.)
Você pode armazenar qualquer valor de propriedade CSS válido dentro de uma variável.</description>
    </item>
    
    <item>
      <title>SCSS vs Sass</title>
      <link>https://www.wikiod.com/pt/sass/scss-vs-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/scss-vs-sass/</guid>
      <description>Principais diferenças # Embora as pessoas muitas vezes digam Sass como o nome deste pré-processador CSS, eles geralmente significam a sintaxe SCSS. Sass usa a extensão de arquivo .sass, enquanto SCSS-Sass usa a extensão .scss. Ambos são referidos como &amp;ldquo;Sass&amp;rdquo;.
Falando em geral, a sintaxe SCSS é mais comumente usada. SCSS parece CSS normal com mais recursos, enquanto Sass parece bem diferente do CSS normal. Ambas as sintaxes têm as mesmas habilidades.</description>
    </item>
    
    <item>
      <title>Variáveis</title>
      <link>https://www.wikiod.com/pt/sass/variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/variaveis/</guid>
      <description>Sintaxe # $variable_name: valor; SCSS # Assim como no Sass, as variáveis ​​SCSS são usadas para armazenar um valor que será usado várias vezes em um documento SCSS.
As variáveis ​​são usadas principalmente para armazenar valores de propriedade usados ​​com frequência (como fontes e cores), mas podem ser usadas para qualquer valor de qualquer propriedade.
O SCSS usa o símbolo $ para declarar uma variável.
$font-stack: Helvetica, sans-serif; $primary-color: #000000; body { font-family: $font-stack; color: $primary-color; } Você pode usar !</description>
    </item>
    
    <item>
      <title>Aninhamento</title>
      <link>https://www.wikiod.com/pt/sass/aninhamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/aninhamento/</guid>
      <description>Aninhamento básico # Sempre que você declara uma nova regra dentro de outra regra, ela é chamada de aninhamento. Com o aninhamento básico, como mostrado abaixo, o seletor aninhado será compilado como um novo seletor CSS com todos os seus pais prefixados, separados por um espaço.
// SCSS .parent { margin: 1rem; .child { float: left; } } // CSS output .parent { margin: 1rem; } .parent .child { float: left; } Profundidade de aninhamento # O aninhamento é um recurso muito poderoso, mas deve ser usado com cautela.</description>
    </item>
    
    <item>
      <title>Loops e Condições</title>
      <link>https://www.wikiod.com/pt/sass/loops-e-condicoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/loops-e-condicoes/</guid>
      <description>##Enquanto loop A diretiva @while fará um loop sobre um bloco de código até que a condição especificada se torne falsa. No exemplo a seguir, esse loop será executado até $font-size &amp;lt;= 18 enquanto incrementa o valor de $font-size em 2.
$font-size: 12; @while $font-size &amp;lt;= 18 { .font-size-#{$font-size} { font-size: ($font-size * 1px); } $font-size: $font-size + 2; } Saída do código acima
.font-size-12 { font-size: 12px; } .font-size-14 { font-size: 14px; } .</description>
    </item>
    
    <item>
      <title>Parciais e Importação</title>
      <link>https://www.wikiod.com/pt/sass/parciais-e-importacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/parciais-e-importacao/</guid>
      <description>Importando # Usar @import permite dividir seus arquivos em vários arquivos menores. Isso faz sentido, pois você pode manter uma melhor estrutura para suas folhas de estilo e evitar arquivos muito grandes.
Exemplo # Digamos que você tenha alguns arquivos.
- application.scss - header.scss - content |-- article.scss &#39;-- list.scss - footer.scss Sua folha de estilo principal application.scss pode importar todos os arquivos, bem como definir seus próprios estilos.
// application.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/pt/sass/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/operadores/</guid>
      <description>Operadores aritméticos # Sass suporta os seguintes operadores aritméticos padrão:
Operador Descrição + Adição – Subtração * Multiplicação / Divisão % Restante Exemplos
p { font-size: 16px + 4px; // 20px } h3 { width: 2px * 5 + 12px; // 22px } h2 { width: 8px + (12px / 2) * 3; // 26px } A ordem normal das operações se aplica como de costume.
Operador de Atribuição # O Sass usa o operador dois pontos (:) para atribuir valores às variáveis.</description>
    </item>
    
    <item>
      <title>Instalação</title>
      <link>https://www.wikiod.com/pt/sass/instalacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/instalacao/</guid>
      <description>Isso cobre apenas Ruby, que é o principal compilador SASS para muitos sistemas, mas existem outras opções. Um muito comum para qualquer desenvolvedor de nós seria node-sass, que poderia ser mais fácil e muito mais rápido para muitos usuários.
Mac # Ruby vem pré-instalado em um computador Mac.
Siga as instruções abaixo para instalar o Sass:
Abra o CMD Execute gem install sass Se você receber uma mensagem de erro, tente sudo gem install sass Verifique se funciona usando sass -v ##Linux Ruby precisará ser instalado antes da configuração.</description>
    </item>
    
    <item>
      <title>Mixins</title>
      <link>https://www.wikiod.com/pt/sass/mixins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/mixins/</guid>
      <description>Sintaxe # @mixin mixin-name ($argument1, $argument, ...){ ... } Mixin com argumento variável # Existem alguns casos em mixins em que pode haver argumentos únicos ou múltiplos ao usá-lo. Vamos pegar um caso de border-radius onde pode haver um único argumento como border-radius:4px; ou vários argumentos como border-radius:4px 3px 2px 1px;.
Tradicional com a mistura de argumentos de palavras-chave será como abaixo: -
@mixin radius($rad1, $rad2, $rad3, $rad4){ -webkit-border-radius: $rad1 $rad2 $rad3 $rad4; -moz-border-radius: $rad1 $rad2 $rad3 $rad4; -ms-border-radius: $rad1 $rad2 $rad3 $rad4; -o-border-radius: $rad1 $rad2 $rad3 $rad4; border-radius: $rad1 $rad2 $rad3 $rad4; } E usado como</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/sass/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sass/funcoes/</guid>
      <description>Sintaxe # @function nome-da-função(parâmetro) { /* Corpo da função */ } Funções básicas # Uma função é semelhante em aparência a um mixin, mas não adiciona nenhum estilo, apenas retorna um valor. As funções devem ser usadas para evitar lógica repetida em seus estilos.
O Sass possui algumas funções internas que são chamadas usando a sintaxe de função CSS padrão.
h1 { background: hsl(0, 25%, 50%); } As funções são declaradas usando a sintaxe abaixo,</description>
    </item>
    
  </channel>
</rss>

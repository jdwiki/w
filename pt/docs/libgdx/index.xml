<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial libgdx on </title>
    <link>https://www.wikiod.com/pt/docs/libgdx/</link>
    <description>Recent content in Tutorial libgdx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/libgdx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com libgdx</title>
      <link>https://www.wikiod.com/pt/libgdx/comecando-com-libgdx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/comecando-com-libgdx/</guid>
      <description>Instalação ou Configuração # LibGDX tem uma configuração bastante simples, com a ajuda de um programa Java simples. Você pode encontrar o download aqui. Quando você inicializar o aplicativo, ele ficará assim: Nota: Esta captura de tela foi feita no Linux e mostra o caminho que difere de uma instalação do Windows. No entanto, o formato é o mesmo em qualquer SO compatível com este aplicativo de configuração
Caixas de entrada # Na caixa de entrada &amp;ldquo;Nome&amp;rdquo;, está o nome do jogo para seu projeto.</description>
    </item>
    
    <item>
      <title>Sistema de Entidades Ashley</title>
      <link>https://www.wikiod.com/pt/libgdx/sistema-de-entidades-ashley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/sistema-de-entidades-ashley/</guid>
      <description>Ashley Entity System é uma biblioteca de Entity System que é gerenciada sob a organização LibGDX e é adequada para o desenvolvimento de jogos. Depende das classes de utilitário LibGDX, mas pode ser usado com outros frameworks de jogos Java não baseados em LibGDX com algum trabalho.
Os sistemas de entidade fornecem uma maneira diferente de gerenciar dados e funcionalidades para grandes conjuntos de objetos sem ter que tornar as classes de objetos ricas em herança.</description>
    </item>
    
    <item>
      <title>Movendo atores no caminho com velocidade constante</title>
      <link>https://www.wikiod.com/pt/libgdx/movendo-atores-no-caminho-com-velocidade-constante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/movendo-atores-no-caminho-com-velocidade-constante/</guid>
      <description>Movimento simples entre dois locais # Para isso a melhor solução é usar actions. Para adicionar uma nova ação a um ator em Scene2D basta chamar:
Action action = Actions.moveTo(x,y,duration); actorObject.addAction(action); Onde x e y são o local de destino e a duração é a velocidade desse movimento em segundos (float).
Se você quiser parar esta ação (e o ator por ela), você pode fazê-lo chamando:
actorObject.removeAction(action); ou você pode remover todas as ações chamando:</description>
    </item>
    
    <item>
      <title>Suporte a várias resoluções</title>
      <link>https://www.wikiod.com/pt/libgdx/suporte-a-varias-resolucoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/suporte-a-varias-resolucoes/</guid>
      <description>Janelas de visualização # Para suportar várias resoluções e proporções, o Libgdx usa as chamadas Viewports. Existem alguns tipos de Viewports que usam estratégias diferentes para lidar com várias resoluções e proporções. Uma Viewport usa uma Camera sob o capô e gerencia sua viewportHeight e viewportWidth. Você pode opcionalmente dar à Viewport uma Camera em seu construtor, caso contrário, ela usará uma OrthographicCamera por padrão:
private Viewport viewport; private Camera camera; public void create() { camera = new PerspectiveCamera(); viewport = new FitViewport(8f, 4.</description>
    </item>
    
    <item>
      <title>Box2D</title>
      <link>https://www.wikiod.com/pt/libgdx/box2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/box2d/</guid>
      <description>Crie corpos Box2D a partir do mapa lado a lado # Os objetos criados dentro de um Tiled Map (.tmx), podem ser simplesmente carregados como corpos em um mundo Box2D usando a classe Libgdx MapObject da seguinte forma:
public void buildBuildingsBodies(TiledMap tiledMap, World world, String layer){ MapObjects objects = tiledMap.getLayers().get(layer).getObjects(); for (MapObject object: objects) { Rectangle rectangle = ((RectangleMapObject)object).getRectangle(); //create a dynamic within the world body (also can be KinematicBody or StaticBody BodyDef bodyDef = new BodyDef(); bodyDef.</description>
    </item>
    
    <item>
      <title>Ciclo da vida</title>
      <link>https://www.wikiod.com/pt/libgdx/ciclo-da-vida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/libgdx/ciclo-da-vida/</guid>
      <description>Crio # Este método é chamado uma vez quando o aplicativo é iniciado. Neste método os recursos devem ser carregados e as variáveis ​​devem ser inicializadas.
Renderizar # O método é chamado a cada quadro e é usado para exibir o que precisa ser exibido. Também é usado para atualizar quaisquer variáveis/classes que possam precisar ser atualizadas, como uma câmera.
Descarte # Este método é chamado quando a aplicação é destruída, e é usado para liberar quaisquer recursos, por exemplo Textures ou o SpriteBatch.</description>
    </item>
    
  </channel>
</rss>

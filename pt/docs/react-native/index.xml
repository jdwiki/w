<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial nativo de reação on </title>
    <link>https://www.wikiod.com/pt/docs/react-native/</link>
    <description>Recent content in tutorial nativo de reação on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/react-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao react-native</title>
      <link>https://www.wikiod.com/pt/react-native/introducao-ao-react-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/introducao-ao-react-native/</guid>
      <description>Configuração para Mac # Instalando o gerenciador de pacotes Homebrew brew
Cole isso em um prompt do Terminal.
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Instalando o Xcode IDE
Faça o download usando o link abaixo ou encontre-o na Mac App Store
https://developer.apple.com/download/
OBSERVAÇÃO: se você tiver Xcode-beta.app instalado junto com a versão de produção do Xcode.app, certifique-se de estar usando a versão de produção da ferramenta xcodebuild. Você pode configurá-lo com:</description>
    </item>
    
    <item>
      <title>Android - Botão Voltar do Hardware</title>
      <link>https://www.wikiod.com/pt/react-native/android---botao-voltar-do-hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/android---botao-voltar-do-hardware/</guid>
      <description>Detectar pressionamentos do botão Voltar do hardware no Android # BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() { if (!this.onMainScreen()) { this.goBack(); return true; } return false; }); Nota: this.onMainScreen() e this.goBack() não são funções embutidas, você também precisa implementá-las. (https://github.com/immidi/react-native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712)
Exemplo de BackAndroid junto com Navigator # Este é um exemplo de como usar o BackAndroid do React Native junto com o Navigator.
componentWillMount registra um ouvinte de eventos para lidar com os toques no botão voltar.</description>
    </item>
    
    <item>
      <title>Fontes personalizadas</title>
      <link>https://www.wikiod.com/pt/react-native/fontes-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/fontes-personalizadas/</guid>
      <description>Fontes personalizadas para Android e IOS # Crie uma pasta na pasta do seu projeto e adicione suas fontes a ela. Exemplo:
Exemplo: Aqui adicionamos uma pasta na raiz chamada &amp;ldquo;mystuff&amp;rdquo;, depois &amp;ldquo;fonts&amp;rdquo;, e dentro dela colocamos nossas fontes:
Adicione o código abaixo em package.json.
{ ... &amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;path/to/fontfolder&amp;quot; ] }, ... } Para o exemplo acima, nosso package.json agora teria um caminho de &amp;ldquo;mystuff/fonts&amp;rdquo;:
&amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;mystuff/fonts&amp;quot; ] } Execute o comando react-native link.</description>
    </item>
    
    <item>
      <title>Adereços</title>
      <link>https://www.wikiod.com/pt/react-native/aderecos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/aderecos/</guid>
      <description>Props, ou propriedades, são dados que são passados ​​para componentes filho em um aplicativo React. Os componentes do React renderizam os elementos da interface do usuário com base em suas props e seu estado interno. Os adereços que um componente recebe (e usa) define como ele pode ser controlado de fora.
PropTypes # O pacote prop-types permite que você adicione verificação de tipo de tempo de execução ao seu componente que garante que os tipos de props passados ​​para o componente estejam corretos.</description>
    </item>
    
    <item>
      <title>Solicitações HTTP</title>
      <link>https://www.wikiod.com/pt/react-native/solicitacoes-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/solicitacoes-http/</guid>
      <description>Sintaxe # buscar(url, opções)[.then(&amp;hellip;)[.catch(&amp;hellip;)]]
A API Fetch é a API mais comumente usada para solicitações HTTP. É moderno, flexível e usa promessas.
A API XMLHttpRequest também é usada para solicitações HTTP e está incluída principalmente para que os desenvolvedores possam usar suas bibliotecas existentes favoritas, como ApiSauce.
A API Websocket pode ser usada para dados &amp;ldquo;ao vivo&amp;rdquo; em cenários de tempo real, como em aplicativos de bate-papo.
Usando Promises com a API de busca e Redux # Redux é a biblioteca de gerenciamento de estado mais comum usada com React-Native.</description>
    </item>
    
    <item>
      <title>RefreshControl com ListView</title>
      <link>https://www.wikiod.com/pt/react-native/refreshcontrol-com-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/refreshcontrol-com-listview/</guid>
      <description>Referências:
RefreshControl: https://facebook.github.io/react-native/docs/refreshcontrol.html
ListView: https://facebook.github.io/react-native/docs/listview.html
Atualize o controle com o exemplo completo do ListView # AtualizarControle é usado dentro de um ScrollView ou ListView para adicionar pull para atualizar a funcionalidade. neste exemplo vamos usá-lo com ListView
&#39;use strict&#39; import React, { Component } from &#39;react&#39;; import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39; class RefreshControlExample extends Component { constructor () { super() this.state = { refreshing: false, dataSource: new ListView.</description>
    </item>
    
    <item>
      <title>Instruções da linha de comando</title>
      <link>https://www.wikiod.com/pt/react-native/instrucoes-da-linha-de-comando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/instrucoes-da-linha-de-comando/</guid>
      <description>Verifique a versão instalada # $ react-native -v Saída de exemplo
react-native-cli: 0.2.0 react-native: n/a - not inside a React Native project directory //Output from different folder react-native: react-native: 0.30.0 // Output from the react native project directory Inicialize e comece com o projeto React Native # Para inicializar
react-native init MyAwesomeProject Para inicializar com uma versão específica do React Native
react-native init --version=&amp;quot;0.36.0&amp;quot; MyAwesomeProject Para executar para Android
cd MyAwesomeProject react-native run-android Para executar para iOS</description>
    </item>
    
    <item>
      <title>Práticas recomendadas do navegador</title>
      <link>https://www.wikiod.com/pt/react-native/praticas-recomendadas-do-navegador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/praticas-recomendadas-do-navegador/</guid>
      <description>Navegador # Navigator é o navegador padrão do React Native. Um componente Navigator gerencia uma pilha de objetos de rota e fornece métodos para gerenciar essa pilha.
&amp;lt;Navigator ref={(navigator) =&amp;gt; { this.navigator = navigator }} initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }} renderScene={this.renderScene.bind(this)} configureScene={(route) =&amp;gt; Navigator.SceneConfigs.FloatFromRight} style={{ flex: 1 }} navigationBar={ // see &amp;quot;Managing the Navigation Bar&amp;quot; below &amp;lt;Navigator.NavigationBar routeMapper={this.routeMapper} /&amp;gt; } /&amp;gt; Gerenciando a pilha de rotas
Primeiro de tudo, observe a prop initialRoute.</description>
    </item>
    
    <item>
      <title>API de animação</title>
      <link>https://www.wikiod.com/pt/react-native/api-de-animacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/api-de-animacao/</guid>
      <description>Animar uma imagem # class AnimatedImage extends Component { constructor(props){ super(props) this.state = { logoMarginTop: new Animated.Value(200) } } componentDidMount(){ Animated.timing( this.state.logoMarginTop, { toValue: 100 } ).start() } render () { return ( &amp;lt;View&amp;gt; &amp;lt;Animated.Image source={require(&#39;../images/Logo.png&#39;)} style={[baseStyles.logo, { marginTop: this.state.logoMarginTop }]} /&amp;gt; &amp;lt;/View&amp;gt; ) } } Este exemplo está animando a posição da imagem alterando a margem.</description>
    </item>
    
    <item>
      <title>Esquema</title>
      <link>https://www.wikiod.com/pt/react-native/esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/react-native/esquema/</guid>
      <description>Flexbox # Flexbox é um modo de layout que fornece o arranjo de elementos em uma página de forma que os elementos se comportem de forma previsível quando o layout da página deve acomodar diferentes tamanhos de tela e diferentes dispositivos de exibição. Por padrão, o flexbox organiza os filhos em uma coluna. Mas você pode alterá-lo para linha usando flexDirection: &#39;row&#39;.
flexDirection # const Direction = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.</description>
    </item>
    
  </channel>
</rss>

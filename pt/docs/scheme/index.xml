<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de esquema on </title>
    <link>https://www.wikiod.com/pt/docs/scheme/</link>
    <description>Recent content in Tutorial de esquema on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o esquema</title>
      <link>https://www.wikiod.com/pt/scheme/comecando-com-o-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/comecando-com-o-esquema/</guid>
      <description>Instalando o esquema CHICKEN # CHICKEN é um interpretador e compilador de Scheme com seu próprio sistema de módulo de extensão chamado &amp;ldquo;eggs&amp;rdquo;. É capaz de compilar Scheme para código nativo compilando primeiro Scheme para C.
Instalando # Debian ou Ubuntu ou outras distribuições derivadas: # sudo apt-get install chicken-bin Fedora / RHEL / CentOS: # sudo yum install chicken-bin Arch Linux: # sudo pacman -S chicken Gentoo: # sudo emerge -av dev-scheme/chicken OS X com Homebrew: # brew install chicken OpenBSD # doas pkg_add -vi chicken Microsoft Windows # Instale o MSYS2</description>
    </item>
    
    <item>
      <title>Macros de esquema</title>
      <link>https://www.wikiod.com/pt/scheme/macros-de-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/macros-de-esquema/</guid>
      <description>Macros higiênicas e referencialmente transparentes com regras de sintaxe # A maior vantagem do LISP e do Scheme sobre outras linguagens de programação convencionais é o seu sistema de macros. Ao contrário do pré-processador C e de outras linguagens de macro, as macros Scheme recebem o código analisado como entrada e retornam o código expandido como saída. Esta é uma das aplicações da frase “code is data” do Scheme, e é o que torna a linguagem tão poderosa.</description>
    </item>
    
    <item>
      <title>Implementação de diferentes algoritmos de ordenação</title>
      <link>https://www.wikiod.com/pt/scheme/implementacao-de-diferentes-algoritmos-de-ordenacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/implementacao-de-diferentes-algoritmos-de-ordenacao/</guid>
      <description>Ordenação rápida # Quicksort é um algoritmo de ordenação comum com uma complexidade de caso médio de O(n log n) e uma complexidade de pior caso de O(n^2). Sua vantagem sobre outros métodos O(n log n) é que ele pode ser executado no local.
O Quicksort divide a entrada em um valor dinâmico escolhido, separando a lista entre os valores menores e os valores maiores (ou iguais) ao pivô. Dividir a lista é feito facilmente com filter.</description>
    </item>
    
    <item>
      <title>Entrada Saída no Esquema</title>
      <link>https://www.wikiod.com/pt/scheme/entrada-saida-no-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/entrada-saida-no-esquema/</guid>
      <description>A entrada e a saída no esquema geralmente são tratadas por meio de portas. Uma porta é uma estrutura de dados que é usada para interagir com o mundo fora do Scheme. Uma porta não está limitada a arquivos, mas pode ser usada para ler/gravar em soquetes.
De certa forma, o objeto port é algum tipo de objeto universal que pode não apenas manipular arquivos e soquetes, mas qualquer tipo de operação de leitura/gravação com o sistema operacional.</description>
    </item>
    
    <item>
      <title>Sintaxe</title>
      <link>https://www.wikiod.com/pt/scheme/sintaxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/sintaxe/</guid>
      <description>Expressão S # Uma expressão em Scheme é o que vai ser executado. Uma expressão S, como geralmente é chamada, começa com um ( e termina com um ). O primeiro membro da expressão é o que será executado. O seguinte membro da expressão são os parâmetros que serão enviados para a expressão durante a avaliação da expressão.
Por exemplo, adicionando números:
(+ 1 2 3) Nesse caso, + é um símbolo para uma função add que recebe vários parâmetros.</description>
    </item>
    
    <item>
      <title>Pares</title>
      <link>https://www.wikiod.com/pt/scheme/pares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scheme/pares/</guid>
      <description>Um par é um dos tipos de dados mais básicos no esquema. Também é geralmente chamado de células contra.
Crie um par # Um par pode ser criado com a função cons. O nome da função significa constructor. No Scheme, tudo é basicamente baseado em pares.
(cons a b) A função retorna um par contendo o elemento a e b. O primeiro parâmetro de cons é chamado car (Content Address Register) e o segundo argumento é o cdr (Content Decrement Register).</description>
    </item>
    
  </channel>
</rss>

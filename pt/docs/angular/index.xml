<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Angular on </title>
    <link>https://www.wikiod.com/pt/docs/angular/</link>
    <description>Recent content in Tutorial Angular on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Angular</title>
      <link>https://www.wikiod.com/pt/angular/introducao-ao-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/introducao-ao-angular/</guid>
      <description>Instalação do Angular usando angular-cli # Este exemplo é uma configuração rápida do Angular e como gerar um projeto de exemplo rápido.
Pré-requisitos: # Node.js 6.9.0 ou superior. npm v3 ou superior ou yarn. Digitações v1 ou superior. Abra um terminal e execute os comandos um por um:
npm install -g typos ou yarn global add typos
npm install -g @angular/cli ou yarn global add @angular/cli
O primeiro comando instala a [biblioteca de digitações][typings] globalmente (e adiciona o executável typings ao PATH).</description>
    </item>
    
    <item>
      <title>Roteamento</title>
      <link>https://www.wikiod.com/pt/angular/roteamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/roteamento/</guid>
      <description>Roteamento Básico # O roteador permite a navegação de uma visualização para outra com base nas interações do usuário com o aplicativo.
A seguir estão as etapas na implementação de roteamento básico em Angular -
OBSERVAÇÃO: certifique-se de ter esta tag:
&amp;lt;base href=&#39;https://www.wikiod.com/&#39;&amp;gt; como o primeiro filho sob sua tag head em seu arquivo index.html. Este elemento indica que a pasta do seu aplicativo é a raiz do aplicativo. Angular saberia então como organizar seus links.</description>
    </item>
    
    <item>
      <title>Compartilhamento de dados entre componentes</title>
      <link>https://www.wikiod.com/pt/angular/compartilhamento-de-dados-entre-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/compartilhamento-de-dados-entre-componentes/</guid>
      <description>O objetivo deste tópico é criar exemplos simples de várias maneiras pelas quais os dados podem ser compartilhados entre componentes por meio de vinculação de dados e serviço compartilhado.
Há sempre muitas maneiras de realizar uma tarefa na programação. Sinta-se à vontade para editar exemplos atuais ou adicionar alguns de sua preferência.
Enviando dados de filho para pai via emissor de evento @Output # emissor de evento.component.ts
import { Component, OnInit, EventEmitter, Output } from &#39;@angular/core&#39;; @Component({ selector: &#39;event-emitting-child-component&#39;, template: `&amp;lt;div *ngFor=&amp;quot;let item of data&amp;quot;&amp;gt; &amp;lt;div (click)=&amp;quot;select(item)&amp;quot;&amp;gt; {{item.</description>
    </item>
    
    <item>
      <title>RXJS e Observáveis</title>
      <link>https://www.wikiod.com/pt/angular/rxjs-e-observaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/rxjs-e-observaveis/</guid>
      <description>Aguarde várias solicitações # Um cenário comum é aguardar a conclusão de várias solicitações antes de continuar. Isso pode ser feito usando o método forkJoin.
No exemplo a seguir, forkJoin é usado para chamar dois métodos que retornam Observables. O retorno de chamada especificado no método .subscribe será chamado quando ambos os Observables forem concluídos. Os parâmetros fornecidos por .subscribe correspondem à ordem dada na chamada para .forkJoin. Neste caso, primeiro posts e depois tags.</description>
    </item>
    
    <item>
      <title>Formulários</title>
      <link>https://www.wikiod.com/pt/angular/formularios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/formularios/</guid>
      <description>Formulários reativos # app.module.ts # Adicione-os ao seu arquivo app.module.ts para usar formulários reativos
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { FormsModule, ReactiveFormsModule } from &#39;@angular/forms&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule, FormsModule, ReactiveFormsModule, ], declarations: [ AppComponent ] providers: [], bootstrap: [ AppComponent ] }) export class AppModule {} app.component.ts # import { Component,OnInit } from &#39;@angular/core&#39;; import template from &#39;.</description>
    </item>
    
    <item>
      <title>Tubos</title>
      <link>https://www.wikiod.com/pt/angular/tubos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/tubos/</guid>
      <description>Os pipes são muito semelhantes aos filtros em AngularJS, pois ambos ajudam a transformar os dados em um formato especificado. O caractere pipe | é usado para aplicar pipes em Angular.
Tubos personalizados # meu.pipe.ts
import { Pipe, PipeTransform } from &#39;@angular/core&#39;; @Pipe({name: &#39;myPipe&#39;}) export class MyPipe implements PipeTransform { transform(value:any, args?: any):string { let transformedValue = value; // implement your transformation logic here return transformedValue; } } meu.componente.ts
import { Component } from &#39;@angular/core&#39;; @Component({ selector: &#39;my-component&#39;, template: `{{ value | myPipe }}` }) export class MyComponent { public value:any; } meu.</description>
    </item>
    
    <item>
      <title>Para Loop</title>
      <link>https://www.wikiod.com/pt/angular/para-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/para-loop/</guid>
      <description>NgFor - Marcação para loop # A diretiva NgFor instancia um modelo uma vez por item de um iterável. O contexto para cada modelo instanciado herda do contexto externo com a variável de loop fornecida definida para o item atual do iterável.
Para personalizar o algoritmo de rastreamento padrão, o NgFor suporta a opção trackBy. trackBy recebe uma função que tem dois argumentos: índice e item. Se trackBy for fornecido, o Angular rastreia as alterações pelo valor de retorno da função.</description>
    </item>
    
    <item>
      <title>Emissor de eventos</title>
      <link>https://www.wikiod.com/pt/angular/emissor-de-eventos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/angular/emissor-de-eventos/</guid>
      <description>Capturando o evento # Crie um serviço-
import {EventEmitter} from &#39;angular2/core&#39;; export class NavService { navchange: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter(); constructor() {} emitNavChangeEvent(number) { this.navchange.emit(number); } getNavChangeEmitter() { return this.navchange; } } Crie um componente para usar o serviço-
import {Component} from &#39;angular2/core&#39;; import {NavService} from &#39;../services/NavService&#39;; @Component({ selector: &#39;obs-comp&#39;, template: `obs component, item: {{item}}` }) export class ObservingComponent { item: number = 0; subscription: any; constructor(private navService:NavService) {} ngOnInit() { this.</description>
    </item>
    
  </channel>
</rss>

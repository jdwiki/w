<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de dardo on </title>
    <link>https://www.wikiod.com/pt/docs/dart/</link>
    <description>Recent content in Tutorial de dardo on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao dardo</title>
      <link>https://www.wikiod.com/pt/dart/introducao-ao-dardo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/introducao-ao-dardo/</guid>
      <description>Instalação ou configuração # O SDK do Dart inclui tudo o que você precisa para escrever e executar código Dart: VM, bibliotecas, analisador, gerenciador de pacotes, gerador de documentos, formatador, depurador e muito mais. Se você estiver desenvolvendo web, também precisará do Dartium.
Instalação e atualizações automatizadas # Instalando o Dart no Windows Instalando o Dart no Mac Instalando o Dart no Linux Instalação manual # Você também pode instalar manualmente qualquer versão do SDK.</description>
    </item>
    
    <item>
      <title>Coleções</title>
      <link>https://www.wikiod.com/pt/dart/colecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/colecoes/</guid>
      <description>Criando uma nova lista # As listas podem ser criadas de várias maneiras.
A maneira recomendada é usar um literal List:
var vegetables = [&#39;broccoli&#39;, &#39;cabbage&#39;]; O construtor List também pode ser usado:
var fruits = new List(); Se preferir uma digitação mais forte, você também pode fornecer um parâmetro de tipo de uma das seguintes maneiras:
var fruits = &amp;lt;String&amp;gt;[&#39;apples&#39;, &#39;oranges&#39;]; var fruits = new List&amp;lt;String&amp;gt;(); Para criar uma pequena lista expansível, vazia ou contendo alguns valores iniciais conhecidos, a forma literal é preferida.</description>
    </item>
    
    <item>
      <title>Programação assíncrona</title>
      <link>https://www.wikiod.com/pt/dart/programacao-assincrona/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/programacao-assincrona/</guid>
      <description>Convertendo callbacks para futuros # O Dart tem uma biblioteca assíncrona robusta, com Future, Stream e muito mais. No entanto, às vezes você pode encontrar uma API assíncrona que usa callbacks em vez de Futures. Para preencher a lacuna entre retornos de chamada e futuros, o Dart oferece a classe Completer. Você pode usar um Completer para converter um callback em um Future.
Os completers são ótimos para fazer a ponte entre uma API baseada em callback e uma API baseada em Future.</description>
    </item>
    
    <item>
      <title>Controle de fluxo</title>
      <link>https://www.wikiod.com/pt/dart/controle-de-fluxo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/controle-de-fluxo/</guid>
      <description>Se mais # Dart tem If Else:
if (year &amp;gt;= 2001) { print(&#39;21st century&#39;); } else if (year &amp;gt;= 1901) { print(&#39;20th century&#39;); } else { print(&#39;We Must Go Back!&#39;); } O Dart também tem um operador ternário if:
var foo = true; print(foo ? &#39;Foo&#39; : &#39;Bar&#39;); // Displays &amp;quot;Foo&amp;quot;. Enquanto Loop # Os loops while e do while são permitidos no Dart:
while(peopleAreClapping()) { playSongs(); } e:
do { processRequest(); } while(stillRunning()); Os loops podem ser encerrados usando uma pausa:</description>
    </item>
    
    <item>
      <title>Aulas</title>
      <link>https://www.wikiod.com/pt/dart/aulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/aulas/</guid>
      <description>Membros # Uma classe pode ter membros.
As variáveis ​​de instância podem ser declaradas com/sem anotações de tipo e, opcionalmente, inicializadas. Membros não inicializados têm o valor de null, a menos que definido para outro valor pelo construtor.
class Foo { var member1; int member2; String member3 = &amp;quot;Hello world!&amp;quot;; } Variáveis ​​de classe são declaradas usando a palavra-chave static.
class Bar { static var member4; static String member5; static int member6 = 42; } Se um método não recebe argumentos, é rápido, retorna um valor e não tem efeitos colaterais visíveis, um método getter pode ser usado:</description>
    </item>
    
    <item>
      <title>Convertendo dados</title>
      <link>https://www.wikiod.com/pt/dart/convertendo-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/convertendo-dados/</guid>
      <description>##JSON import &amp;lsquo;dart:convert&amp;rsquo;;
void main() { var jsonString = &amp;quot;&amp;quot;&amp;quot; { &amp;quot;cats&amp;quot;: { &amp;quot;abysinnian&amp;quot;: { &amp;quot;origin&amp;quot;: &amp;quot;Burma&amp;quot;, &amp;quot;behavior&amp;quot;: &amp;quot;playful&amp;quot; } } } &amp;quot;&amp;quot;&amp;quot;; var obj = JSON.decode(jsonString); print(obj[&#39;cats&#39;][&#39;abysinnian&#39;][&#39;behavior&#39;]); // playful } Veja o exemplo no dartpad: https://dartpad.dartlang.org/7d5958cf10e611b36326f27b062108fe</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://www.wikiod.com/pt/dart/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/funcoes/</guid>
      <description>Dart é uma verdadeira linguagem orientada a objetos, então até mesmo funções são objetos e têm um tipo, Function. Isso significa que as funções podem ser atribuídas a variáveis ​​ou passadas como argumentos para outras funções. Você também pode chamar uma instância de uma classe Dart como se fosse uma função.
Funções com parâmetros nomeados # Ao definir uma função, use {param1, param2, …} para especificar os parâmetros nomeados:
void enableFlags({bool bold, bool hidden}) { // .</description>
    </item>
    
    <item>
      <title>Interoperabilidade Dart-JavaScript</title>
      <link>https://www.wikiod.com/pt/dart/interoperabilidade-dart-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/interoperabilidade-dart-javascript/</guid>
      <description>A interoperabilidade Dart-JavaScript nos permite executar código JavaScript de nossos programas Dart.
A interoperabilidade é alcançada usando a biblioteca js para criar stubs Dart. Esses stubs descrevem a interface que gostaríamos de ter com o código JavaScript subjacente. Em tempo de execução, chamar o stub do Dart invocará o código JavaScript.
Agrupando classes/namespaces JavaScript # Suponha que queiramos envolver a API JavaScript do Google Maps google.maps:
@JS(&#39;google.maps&#39;) library maps; import &amp;quot;package:js/js.</description>
    </item>
    
    <item>
      <title>bar</title>
      <link>https://www.wikiod.com/pt/dart/bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/bar/</guid>
      <description>Ao instalar o SDK do Dart, uma das ferramentas que você obtém é o pub. A ferramenta pub fornece comandos para diversas finalidades. Um comando instala pacotes, outro inicia um servidor HTTP para teste, outro prepara seu aplicativo para implantação e outro publica seu pacote em pub.dartlang.org. Você pode acessar os comandos pub por meio de um IDE, como WebStorm, ou na linha de comando.
Para obter uma visão geral desses comandos, consulte Pub Commands.</description>
    </item>
    
    <item>
      <title>Exceções</title>
      <link>https://www.wikiod.com/pt/dart/excecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dart/excecoes/</guid>
      <description>O código Dart pode lançar e capturar exceções. As exceções são erros que indicam que algo inesperado aconteceu. Se a exceção não for capturada, o isolado que gerou a exceção é suspenso e, normalmente, o isolado e seu programa são encerrados.
Ao contrário do Java, todas as exceções do Dart são exceções não verificadas. Os métodos não declaram quais exceções eles podem lançar e você não é obrigado a capturar nenhuma exceção.</description>
    </item>
    
  </channel>
</rss>

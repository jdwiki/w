<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de scrapy on </title>
    <link>https://www.wikiod.com/pt/docs/scrapy/</link>
    <description>Recent content in tutorial de scrapy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/scrapy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com scrapy</title>
      <link>https://www.wikiod.com/pt/scrapy/comecando-com-scrapy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scrapy/comecando-com-scrapy/</guid>
      <description>Instalação do Scrapy # pré-requisito de instalação scrapy:
Python 2.7 ou superior 3.3 pacotes Python pip e setuptools. -lxml OpenSSL. Você pode instalar o Scrapy usando pip. Para instalar usando pip execute:
pip install Scrapy Instalação específica da plataforma
Anaconda
Esta é a maneira recomendada de instalar o Scrapy.
Se você já instalou o Anaconda ou Miniconda, a empresa Scrapinghub mantém pacotes oficiais do conda para Linux, Windows e OS X.</description>
    </item>
    
    <item>
      <title>Conectando scrapy ao MySQL</title>
      <link>https://www.wikiod.com/pt/scrapy/conectando-scrapy-ao-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scrapy/conectando-scrapy-ao-mysql/</guid>
      <description>Conectando e inserindo em massa no MySQL no Scrapy usando o módulo MySQLDB - Python 2.7 # Este exemplo demonstra como inserir dados dinamicamente no MySQL usando Python Scrapy.
Você não precisa editar o arquivo pipelines.py para nenhum projeto.
Este exemplo pode ser usado para todo o seu projeto.
Apenas yield you_data_dictionary do seu Spider e dentro do pipelines.py uma consulta será criada automaticamente.
As linhas são inseridas em massa usando a instrução de inserção em massa.</description>
    </item>
    
    <item>
      <title>Pipeline de itens</title>
      <link>https://www.wikiod.com/pt/scrapy/pipeline-de-itens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scrapy/pipeline-de-itens/</guid>
      <description>Maneira de processar todos os itens que o Scrapy produz.
Um Pipeline de Item é uma classe python que substitui alguns métodos específicos e precisa ser ativada nas configurações do projeto scrapy.
Criando um pipeline dinâmico no Python Scrapy # Ative pipelines em seu settings.py
ITEM_PIPELINES = { &#39;project_folder.pipelines.MyPipeline&#39;: 100 } Em seguida, escreva este código em items.py
# -*- coding: utf-8 -*- from scrapy import Item, Field from collections import OrderedDict class DynamicItem(Item): def __setitem__(self, key, value): self.</description>
    </item>
    
  </channel>
</rss>

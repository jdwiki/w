<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>punhal-2 Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/dagger-2/</link>
    <description>Recent content in punhal-2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/dagger-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com adaga-2</title>
      <link>https://www.wikiod.com/pt/dagger-2/comecando-com-adaga-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dagger-2/comecando-com-adaga-2/</guid>
      <description>Exemplo Android # Uma das dificuldades centrais de escrever um aplicativo Android usando o Dagger é que muitas classes do framework Android são instanciadas pelo próprio sistema operacional, como Activity e Fragment, mas o Dagger funciona melhor se puder criar todos os objetos injetados. Em vez disso, você precisa executar a injeção de membros em um método de ciclo de vida. A partir da versão 2.10, o punhal permite o uso de dagger.</description>
    </item>
    
    <item>
      <title>Anotação @Named em Kotlin</title>
      <link>https://www.wikiod.com/pt/dagger-2/anotacao-named-em-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/dagger-2/anotacao-named-em-kotlin/</guid>
      <description>Como usar corretamente a anotação nomeada no Kotlin v1.1
Declarando uma dependência qualificada # @Module class AppModule(val app: Application) { @Provides @Named(&amp;quot;the_answer&amp;quot;) fun providesTheAnswer(): Int { return 42 } } Injeção de dependência baseada em setter # class MyClass{ @field:[Inject Named(&amp;quot;the_answer&amp;quot;)] lateinit var answer: Int } No desenvolvimento Android, esta é a maneira pela qual você injeta dependências em Activity, Fragment ou qualquer outro objeto que seja instanciado diretamente pelo SO.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de dados principais on </title>
    <link>https://www.wikiod.com/pt/docs/core-data/</link>
    <description>Recent content in Tutorial de dados principais on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/core-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução aos dados principais</title>
      <link>https://www.wikiod.com/pt/core-data/introducao-aos-dados-principais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/introducao-aos-dados-principais/</guid>
      <description>Criando seu primeiro modelo # Selecione o arquivo .xcdatamodeld. Você notará que não tem entidades. Você terá que criar um você mesmo. No fundo do Xcode você notará um botão que diz &amp;ldquo;Adicionar Entidade&amp;rdquo; clique nele e você terá uma nova entidade para trabalhar no projeto. Nesta etapa há alguns pontos a serem mencionados. A primeira é que você alterou o nome da sua entidade aqui, a entidade recebe o nome de Pessoa.</description>
    </item>
    
    <item>
      <title>Pilha de dados principais</title>
      <link>https://www.wikiod.com/pt/core-data/pilha-de-dados-principais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/pilha-de-dados-principais/</guid>
      <description>Esta é uma implementação do Core Data Stack que é inicialmente colocado no arquivo AppDelegate se o projeto for criado com Core Data quando o projeto for criado. Essas funções também podem ser implementadas em classes separadas para CoreDataStack.swift. Uma das principais funções é obter o NSManagedObjectContext.
Objetivo-C # - (NSManagedObjectContext *)managedObjectContext {...} Swift 2 # lazy var managedObjectContext: NSManagedObjectContext = {...} Swift 3 # lazy var persistentContainer: NSPersistentContainer = {.</description>
    </item>
    
    <item>
      <title>Criando um modelo de dados principal</title>
      <link>https://www.wikiod.com/pt/core-data/criando-um-modelo-de-dados-principal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/criando-um-modelo-de-dados-principal/</guid>
      <description>Os tipos de atributo incluem: Indefinido, Inteiro 16, Inteiro 32, Integer 64, Decimal, Double, Float, String, Boolean, Date, Binary, Data, or Transformable
Ao definir uma Entidade como abstrata, você não criará nenhuma instância dessa entidade. Por exemplo, uma pessoa seria abstrata e um funcionário ou cliente seria uma subentidade concreta.
Atributos Transient são propriedades que você define como parte do modelo, mas que não são salvas no armazenamento persistente como parte dos dados de uma instância de entidade.</description>
    </item>
    
    <item>
      <title>Usando predicados</title>
      <link>https://www.wikiod.com/pt/core-data/usando-predicados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/usando-predicados/</guid>
      <description>Correspondendo a uma string exata # let fetchRequest = NSFetchRequest(entityName: &amp;quot;Foo&amp;quot;) var thePredicate: NSPredicate? thePredicate = NSPredicate(format: &amp;quot;message == &#39;example&#39;&amp;quot;) A entidade Foo tem um atributo de string message
Substituições # Em vez de passar uma string estática como critério de um predicado. É possível substituir valores usando especificadores de formato. Existem cinco especificadores de formato:
%K é uma substituição de var arg para um caminho de chave. %@ é uma substituição de var arg para um valor de objeto - geralmente uma string, número, data ou uma matriz.</description>
    </item>
    
    <item>
      <title>Classificar descritores</title>
      <link>https://www.wikiod.com/pt/core-data/classificar-descritores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/classificar-descritores/</guid>
      <description>Dados de pedidos retornados por solicitações de busca # Defina a propriedade sortDescriptors de NSFetchRequest para determinar como os dados são retornados.
let fetchRequest = NSFetchRequest(entityName: &amp;quot;NAME_OF_ENTITY&amp;quot;) let sortDescriptor = NSSortDescriptor(key: &amp;quot;NAME_OF_ATTRIBUTE&amp;quot;, ascending: true) fetchRequest.sortDescriptors = [sortDescriptor] Vários descritores de classificação # Você também pode definir vários descritores de classificação, para classificar por um atributo dentro de outro. Por exemplo, retorne todas as entradas ordenadas por data e por nome em cada data:</description>
    </item>
    
    <item>
      <title>Controlador NSFetchedResults</title>
      <link>https://www.wikiod.com/pt/core-data/controlador-nsfetchedresults/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/core-data/controlador-nsfetchedresults/</guid>
      <description>NSFetchedResultsController é uma conexão entre a tabela de dados principais (entidade em dados principais, tabela em sqlite) e UITableView. O UITableView pode ser anexado a qualquer entidade de dados principais usando NSFetchedResultsController e o UITableView será atualizado conforme e quando os dados principais atualizarem essa entidade/tabela.
NSFetchedResultsController para UITableView # class ConversationsTableViewController: UITableViewController, NSFetchedResultsControllerDelegate { private var fetchedResultsController: NSFetchedResultsController&amp;lt;Conversation&amp;gt;! override func viewDidLoad() { super.viewDidLoad() initializeFetchedResultsController() } private func initializeFetchedResultsController() { let request = NSFetchRequest&amp;lt;Conversation&amp;gt;(entityName: &amp;quot;Conversation&amp;quot;) let timeSort = NSSortDescriptor(key: &amp;quot;lastMessageTime&amp;quot;, ascending: false) request.</description>
    </item>
    
  </channel>
</rss>

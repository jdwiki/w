<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial PyMongo on </title>
    <link>https://www.wikiod.com/pt/docs/pymongo/</link>
    <description>Recent content in Tutorial PyMongo on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/pymongo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao PyMongo</title>
      <link>https://www.wikiod.com/pt/pymongo/introducao-ao-pymongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pymongo/introducao-ao-pymongo/</guid>
      <description>Olá Mundo # PyMongo é um driver Python nativo para MongoDB.
Instale o PyMongo # pip install pymongo Criar uma conexão # Use MongoClient para criar uma conexão. O padrão do MongoClient é a instância do MongoDB em execução em localhost:27017 se não for especificado.
from pymongo import MongoClient client = MongoClient() Acessar Objetos de Banco de Dados # A classe Database do PyMongo representa a construção do banco de dados no MongoDB.</description>
    </item>
    
    <item>
      <title>Convertendo entre BSON e JSON</title>
      <link>https://www.wikiod.com/pt/pymongo/convertendo-entre-bson-e-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pymongo/convertendo-entre-bson-e-json/</guid>
      <description>Em muitos aplicativos, os registros do MongoDB precisam ser serializados no formato JSON. Se seus registros tiverem campos do tipo date, datetime, objectId, binary, code, etc. você encontrará exceções TypeError: not JSON serializable ao usar json.dumps. Este tópico mostra como superar isso.
Usando json_util # json_util fornece dois métodos auxiliares, dumps e loads, que envolvem os métodos json nativos e fornecem conversão BSON explícita de e para json.
Uso simples # from bson.</description>
    </item>
    
    <item>
      <title>Filtre documentos por tempo de criação armazenados em ObjectId</title>
      <link>https://www.wikiod.com/pt/pymongo/filtre-documentos-por-tempo-de-criacao-armazenados-em-objectid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pymongo/filtre-documentos-por-tempo-de-criacao-armazenados-em-objectid/</guid>
      <description>Inclui exemplos de consulta pymongo para filtrar documentos por timestamp encapsulados em ObjectId
Documentos criados nos últimos 60 segundos # Como encontrar documentos criados há 60 segundos
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) dummy_id = ObjectId.from_datetime(gen_time) db.CollectionName.find({&amp;quot;_id&amp;quot;: {&amp;quot;$gte&amp;quot;: dummy_id}}) Se você estiver em um fuso horário diferente, talvez seja necessário compensar a data e hora para UTC
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) # converts datetime to UTC gen_time=datetime.</description>
    </item>
    
  </channel>
</rss>

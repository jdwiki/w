<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial VBA on </title>
    <link>https://www.wikiod.com/pt/docs/vba/</link>
    <description>Recent content in Tutorial VBA on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao VBA</title>
      <link>https://www.wikiod.com/pt/vba/introducao-ao-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/introducao-ao-vba/</guid>
      <description>Acessando o Editor do Visual Basic no Microsoft Office # Você pode abrir o editor VB em qualquer um dos aplicativos do Microsoft Office pressionando Alt+F11 ou indo para a guia Desenvolvedor e clicando no botão &amp;ldquo;Visual Basic&amp;rdquo;. Se você não vir a guia Desenvolvedor na Faixa de Opções, verifique se ela está habilitada.
Por padrão, a guia Desenvolvedor está desabilitada. Para habilitar a guia Desenvolvedor, vá para Arquivo -&amp;gt; Opções, selecione Personalizar Faixa de Opções na lista à esquerda.</description>
    </item>
    
    <item>
      <title>Objeto de script.Dicionário</title>
      <link>https://www.wikiod.com/pt/vba/objeto-de-scriptdicionario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/objeto-de-scriptdicionario/</guid>
      <description>Você deve adicionar o Microsoft Scripting Runtime ao projeto VBA por meio do comando Ferramentas → Referências do VBE para implementar a ligação antecipada do objeto Scripting Dictionary. Esta referência de biblioteca é transportada com o projeto; ele não precisa ser referenciado novamente quando o projeto VBA é distribuído e executado em outro computador.
Propriedades e métodos # Um objeto de dicionário de script armazena informações em pares de chave/item. As Chaves devem ser exclusivas e não uma matriz, mas os Itens associados podem ser repetidos (sua exclusividade é mantida pela Chave complementar) e podem ser de qualquer tipo de variante ou objeto.</description>
    </item>
    
    <item>
      <title>Declarando Variáveis</title>
      <link>https://www.wikiod.com/pt/vba/declarando-variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/declarando-variaveis/</guid>
      <description>Dicas de tipo # As dicas de tipo são fortemente desencorajadas. Eles existem e estão documentados aqui por motivos históricos e de compatibilidade com versões anteriores. Você deve usar a sintaxe As [DataType] em vez disso.
Public Sub ExampleDeclaration() Dim someInteger% &#39;% Equivalent to &amp;quot;As Integer&amp;quot; Dim someLong&amp;amp; &#39;&amp;amp; Equivalent to &amp;quot;As Long&amp;quot; Dim someDecimal@ &#39;@ Equivalent to &amp;quot;As Currency&amp;quot; Dim someSingle! &#39;! Equivalent to &amp;quot;As Single&amp;quot; Dim someDouble# &#39;# Equivalent to &amp;quot;As Double&amp;quot; Dim someString$ &#39;$ Equivalent to &amp;quot;As String&amp;quot; Dim someLongLong^ &#39;^ Equivalent to &amp;quot;As LongLong&amp;quot; in 64-bit VBA hosts End Sub As dicas de tipo diminuem significativamente a legibilidade do código e incentivam uma Notação Húngara herdada que também dificulta a legibilidade:</description>
    </item>
    
    <item>
      <title>Atributos</title>
      <link>https://www.wikiod.com/pt/vba/atributos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/atributos/</guid>
      <description>Sintaxe # Atributo VB_Name = &amp;ldquo;ClassOrModuleName&amp;rdquo; Atributo VB_GlobalNameSpace = False &amp;rsquo; Ignorado Atributo VB_Creatable = False &amp;rsquo; Ignorado Atributo VB_PredeclaredId = {True | Falso} Atributo VB_Exposed = {True | Falso} Atributo variableName.VB_VarUserMemId = 0 &amp;rsquo; Zero indica que este é o membro padrão da classe. Attribute variableName.VB_VarDescription = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Adiciona o texto às informações do Pesquisador de Objetos para esta variável. Attribute procName.VB_Description = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Adiciona o texto às informações do Pesquisador de Objetos para o procedimento.</description>
    </item>
    
    <item>
      <title>CreateObject vs. GetObject</title>
      <link>https://www.wikiod.com/pt/vba/createobject-vs-getobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/createobject-vs-getobject/</guid>
      <description>Em sua forma mais simples, CreateObject cria uma instância de um objeto enquanto GetObject obtém uma instância existente de um objeto. Determinar se um objeto pode ser criado ou obtido dependerá de sua [propriedade de instância](https://msdn.microsoft.com/en-us/library/aa242107%28v=vs.60%29.aspx?f=255&amp;amp;MSPPError= -2147217396). Alguns objetos são SingleUse (por exemplo, WMI) e não podem ser criados se já existirem. Outros objetos (por exemplo, Excel) são MultiUse e permitem que várias instâncias sejam executadas ao mesmo tempo. Se uma instância de um objeto ainda não existir e você tentar GetObject, você receberá a seguinte mensagem interceptável: Run-time error &#39;429&#39;: ActiveX component can&#39;t create object.</description>
    </item>
    
    <item>
      <title>Convenções de nomenclatura</title>
      <link>https://www.wikiod.com/pt/vba/convencoes-de-nomenclatura/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/convencoes-de-nomenclatura/</guid>
      <description>Nomes de Variáveis # Variáveis ​​armazenam dados. Nomeie-os de acordo com o uso, não de acordo com o tipo de dados ou escopo, usando um substantivo. Se você se sentir compelido a numerar suas variáveis ​​(por exemplo, coisa1, coisa2, coisa3), considere usar uma estrutura de dados apropriada (por exemplo, uma matriz, uma coleção ou um dicionário).
Nomes de variáveis ​​que representam um conjunto de valores iteráveis ​​- por exemplo um array, uma Collection, um Dictionary ou um Range de células, deve ser plural.</description>
    </item>
    
    <item>
      <title>Tipos de dados e limites</title>
      <link>https://www.wikiod.com/pt/vba/tipos-de-dados-e-limites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/tipos-de-dados-e-limites/</guid>
      <description>Variante # Dim Value As Variant &#39;Explicit Dim Value &#39;Implicit Uma Variant é um tipo de dados COM que é usado para armazenar e trocar valores de tipos arbitrários, e qualquer outro tipo no VBA pode ser atribuído a uma Variant. Variáveis ​​declaradas sem um tipo explícito especificado por As [Type] padrão para Variant.
As variantes são armazenadas na memória como uma estrutura VARIANT que consiste em um descritor de tipo de byte (VARTYPE) seguido por 6 bytes reservados e uma área de dados de 8 bytes.</description>
    </item>
    
    <item>
      <title>Scripting.FileSystemObject</title>
      <link>https://www.wikiod.com/pt/vba/scriptingfilesystemobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/scriptingfilesystemobject/</guid>
      <description>Recuperar apenas o caminho de um caminho de arquivo # O método GetParentFolderName retorna a pasta pai para qualquer caminho. Embora isso também possa ser usado com pastas, é sem dúvida mais útil para extrair o caminho de um caminho de arquivo absoluto:
Dim fso As New Scripting.FileSystemObject Debug.Print fso.GetParentFolderName(&amp;quot;C:\Users\Me\My Documents\SomeFile.txt&amp;quot;) Imprime C:\Users\Me\Meus Documentos
Observe que o separador de caminho à direita não está incluído na string retornada.
Recupere apenas a extensão de um nome de arquivo # Dim fso As New Scripting.</description>
    </item>
    
    <item>
      <title>Manipulação de erros</title>
      <link>https://www.wikiod.com/pt/vba/manipulacao-de-erros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/manipulacao-de-erros/</guid>
      <description>Evitando condições de erro # Quando ocorre um erro de tempo de execução, um bom código deve tratá-lo. A melhor estratégia de tratamento de erros é escrever um código que verifique as condições de erro e simplesmente evite a execução de código que resulte em um erro de tempo de execução.
Um elemento chave na redução de erros de tempo de execução é escrever pequenos procedimentos que fazem uma coisa. Quanto menos motivos os procedimentos tiverem para falhar, mais fácil será depurar o código como um todo.</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/vba/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vba/matrizes/</guid>
      <description>Matrizes Multidimensionais # Matrizes Multidimensionais # Como o nome indica, matrizes multidimensionais são matrizes que contêm mais de uma dimensão, geralmente duas ou três, mas podem ter até 32 dimensões.
Um multi array funciona como uma matriz com vários níveis, tome como exemplo uma comparação entre uma, duas e três dimensões.
One Dimension é sua matriz típica, parece uma lista de elementos.
Dim 1D(3) as Variant *1D - Visually* (0) (1) (2) Duas Dimensões se pareceria com um Sudoku Grid ou uma planilha do Excel, ao inicializar o array você definiria quantas linhas e colunas o array teria.</description>
    </item>
    
  </channel>
</rss>

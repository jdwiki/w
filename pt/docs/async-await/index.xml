<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial async-await on </title>
    <link>https://www.wikiod.com/pt/docs/async-await/</link>
    <description>Recent content in Tutorial async-await on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/async-await/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao async-await</title>
      <link>https://www.wikiod.com/pt/async-await/introducao-ao-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/async-await/introducao-ao-async-await/</guid>
      <description>vazio assíncrono # Você pode usar void (em vez de Task) como um tipo de retorno de um método assíncrono. Isso resultará em uma ação &amp;ldquo;dispare e esqueça&amp;rdquo;:
public void DoStuff() { FireAndForgetAsync(); } private async void FireAndForgetAsync() { await Task.Delay(1000); throw new Exception(); //will be swallowed } Como você está retornando void, você não pode await FireAndForgetAsync. Você não poderá saber quando o método terminar, e qualquer exceção levantada dentro do método async void será engolida.</description>
    </item>
    
    <item>
      <title>Melhores Práticas</title>
      <link>https://www.wikiod.com/pt/async-await/melhores-praticas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/async-await/melhores-praticas/</guid>
      <description>Evite vazio assíncrono # O único lugar onde você pode usar async void com segurança é em manipuladores de eventos. Considere o seguinte código:
private async Task&amp;lt;bool&amp;gt; SomeFuncAsync() { ... await ... } public void button1_Click(object sender, EventArgs e) { var result = SomeFuncAsync().Result; SomeOtherFunc(); } Assim que a chamada async for concluída, ela espera que o SynchronizationContext fique disponível. No entanto, o manipulador de eventos mantém o SynchronizationContext enquanto aguarda a conclusão do método SomeFuncAsync; causando assim uma espera circular (deadlock).</description>
    </item>
    
  </channel>
</rss>

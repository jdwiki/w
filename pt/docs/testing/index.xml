<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de teste on </title>
    <link>https://www.wikiod.com/pt/docs/testing/</link>
    <description>Recent content in Tutorial de teste on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com os testes</title>
      <link>https://www.wikiod.com/pt/testing/comecando-com-os-testes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/testing/comecando-com-os-testes/</guid>
      <description>Caso de teste # CASO DE TESTE -
Um caso de teste é um conjunto de condições e etapas que, quando seguidos/aplicados, um testador pode determinar se um recurso, um aplicativo ou um sistema de software está funcionando como originalmente projetado.
Um caso de teste geralmente contém referências à tarefa original, pré-condições (se as pré-condições não forem atendidas, o teste não pode continuar), etapas (as etapas descrevem o que um testador precisa fazer para obter um resultado), resultado esperado (o que deve acontecer após seguir todas as etapas descritas), mas também pode conter Estimativa, Prioridade, Ambiente no qual realizar o teste.</description>
    </item>
    
    <item>
      <title>Teste de IU</title>
      <link>https://www.wikiod.com/pt/testing/teste-de-iu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/testing/teste-de-iu/</guid>
      <description>O foco deste tópico é basicamente cobrir os aspectos mais importantes do teste de interface do usuário. Este post seria principalmente benéfico para os calouros, pois eles recebem tarefas para trabalhar e muitas vezes acontece que alguns dos pontos importantes são perdidos. Vamos ajudar os calouros contribuindo com este tópico :)
[Teste de UI] Como testar um site? # Os seguintes pontos devem ser sempre lembrados:
Pegue o PRD (Documento de Requisitos do Produto do Analista de Negócios/Gerente de Projeto).</description>
    </item>
    
    <item>
      <title>Técnicas de Teste de Software - Partição de Equivalência</title>
      <link>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---particao-de-equivalencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---particao-de-equivalencia/</guid>
      <description>Essa técnica divide os dados de entrada em classes de dados para reduzir a quantidade de casos de teste para validar uma regra. A ideia é que dado um conjunto de possíveis valores equivalentes, usar apenas um desses valores será suficiente para projetar um caso de teste.
Uma vantagem dessa abordagem é a redução do tempo necessário para testar um software devido ao menor número de casos de teste.
Ele se esforça para encontrar erros que possam surgir com base em classes de informações e reduzir ao mínimo o esforço necessário em termos de design de casos de teste, bem como de massa de dados de teste.</description>
    </item>
    
    <item>
      <title>Técnicas de Teste de Software - Transição de Estado</title>
      <link>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---transicao-de-estado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---transicao-de-estado/</guid>
      <description>Essa técnica deve ser usada quando você tiver qualquer fluxo de trabalho em vigor e deve considerar casos de teste positivos (transições que podem acontecer), bem como casos de teste negativos (transições que não são permitidas).
Qualquer regra que possa ser descrita, pensada, riscada como um diagrama de transição de estado, workflow, ciclo de vida pode ter seus casos de teste desenhados usando esta técnica.
Essa técnica também funciona para encontrar problemas de integridade dentro de fluxos de trabalho e diagramas durante a análise da documentação.</description>
    </item>
    
    <item>
      <title>Técnicas de Teste de Software - Análise de Valor Limite</title>
      <link>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---analise-de-valor-limite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/testing/tecnicas-de-teste-de-software---analise-de-valor-limite/</guid>
      <description>Essa técnica deve ser usada sempre que você tiver limites definidos em uma especificação. É uma ótima ideia aplicá-lo a qualquer regra baseada em tempo, valores, qualquer tipo de contagem ou escala a ser acionada.
Também garante e ajuda a encontrar n + 1 erros. E sim, é uma expansão dos conceitos de partição de equivalência. Sua decisão de aplicar este ou outro deve ser os limites existentes e claramente definidos.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem C on </title>
    <link>https://www.wikiod.com/pt/docs/c/</link>
    <description>Recent content in Tutorial de linguagem C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com a linguagem C</title>
      <link>https://www.wikiod.com/pt/c/comecando-com-a-linguagem-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/comecando-com-a-linguagem-c/</guid>
      <description>Olá Mundo # Para criar um programa C simples que imprima &amp;ldquo;Hello, World&amp;rdquo; na tela, use um editor de texto para criar um novo arquivo (por exemplo, hello. c — a extensão do arquivo deve ser .c) contendo o seguinte código fonte:
#olá.c
#include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;quot;Hello, World&amp;quot;); return 0; } Demonstração ao vivo no Coliru
Vejamos este programa simples linha por linha # #include &amp;lt;stdio.h&amp;gt; Esta linha diz ao compilador para incluir o conteúdo do arquivo de cabeçalho da biblioteca padrão stdio.</description>
    </item>
    
    <item>
      <title>Ponteiros</title>
      <link>https://www.wikiod.com/pt/c/ponteiros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/ponteiros/</guid>
      <description>Um ponteiro é um tipo de variável que pode armazenar o endereço de outro objeto ou função.
Sintaxe # &amp;lt;Tipo de dados&amp;gt; *&amp;lt;Nome da variável&amp;gt;; int *ptrParaInt; void *ptrToVoid; /* C89+ */ struct someStruct *ptrToStruct; int **ptrToPtrToInt; int arr[comprimento]; int *ptrToFirstElem = arr; /* Para &amp;lt;C99 &amp;lsquo;comprimento&amp;rsquo; precisa ser uma constante de tempo de compilação, para &amp;gt;=C11 pode precisar ser um. */ int *arrayOfPtrsToInt[comprimento]; /* Para &amp;lt;C99 &amp;lsquo;comprimento&amp;rsquo; precisa ser uma constante de tempo de compilação, para &amp;gt;=C11 pode precisar ser um.</description>
    </item>
    
    <item>
      <title>Comportamento indefinido</title>
      <link>https://www.wikiod.com/pt/c/comportamento-indefinido/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/comportamento-indefinido/</guid>
      <description>Em C, algumas expressões geram comportamento indefinido. O padrão opta explicitamente por não definir como um compilador deve se comportar se encontrar tal expressão. Como resultado, um compilador é livre para fazer o que achar melhor e pode produzir resultados úteis, resultados inesperados ou até mesmo travar.
O código que invoca UB pode funcionar como pretendido em um sistema específico com um compilador específico, mas provavelmente não funcionará em outro sistema ou com um compilador, versão do compilador ou configurações do compilador diferentes.</description>
    </item>
    
    <item>
      <title>Gerenciamento de memória</title>
      <link>https://www.wikiod.com/pt/c/gerenciamento-de-memoria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/gerenciamento-de-memoria/</guid>
      <description>Para gerenciar memória alocada dinamicamente, a biblioteca C padrão fornece as funções malloc(), calloc(), realloc() e free(). No C99 e posterior, também existe o aligned_alloc(). Alguns sistemas também fornecem alloca().
Sintaxe # void *aligned_alloc(alinhamento tamanho_t, tamanho_t tamanho); /* Somente desde C11 */ void *calloc(size_t elementos, size_t size); void free(void *ptr); void *malloc(tamanho_t tamanho); void *realloc(void *ptr, tamanho_t tamanho); void *alloca(tamanho_t tamanho); /* de alloca.h, não padrão, não portátil, perigoso. */ Parâmetros # nome descrição size (malloc, realloc e aligned_alloc) tamanho total da memória em bytes.</description>
    </item>
    
    <item>
      <title>Armadilhas comuns</title>
      <link>https://www.wikiod.com/pt/c/armadilhas-comuns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/armadilhas-comuns/</guid>
      <description>Esta seção discute alguns dos erros comuns que um programador C deve estar ciente e deve evitar cometer. Para saber mais sobre alguns problemas inesperados e suas causas, consulte https://www.wikiod.com/pt/c/comportamento-indefinido
Misturando inteiros com e sem sinal em operações aritméticas # Geralmente não é uma boa idéia misturar inteiros signed e unsigned em operações aritméticas. Por exemplo, qual será a saída do exemplo a seguir?
#include &amp;lt;stdio.h&amp;gt; int main(void) { unsigned int a = 1000; signed int b = -1; if (a &amp;gt; b) puts(&amp;quot;a is more than b&amp;quot;); else puts(&amp;quot;a is less or equal than b&amp;quot;); return 0; } Como 1000 é maior que -1, você esperaria que a saída fosse &amp;lsquo;a é maior que b&amp;rsquo;, mas esse não será o caso.</description>
    </item>
    
    <item>
      <title>Cordas</title>
      <link>https://www.wikiod.com/pt/c/cordas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/cordas/</guid>
      <description>Em C, uma string não é um tipo intrínseco. Uma string C é a convenção para ter um array unidimensional de caracteres que é terminado por um caractere nulo, por um &#39;\0&#39;.
Isso significa que uma string C com conteúdo &amp;quot;abc&amp;quot; terá quatro caracteres &#39;a&#39;, &#39;b&#39;, &#39;c&#39; e &#39;\0&#39;.
Veja o exemplo de introdução básica a strings.
1: https://www.wikiod.com/pt/c/cordas#Introdução básica às cordas
Sintaxe # char str1[] = &amp;ldquo;Olá, mundo!&amp;rdquo;; /* Modificável */ char str2[14] = &amp;ldquo;Olá, mundo!</description>
    </item>
    
    <item>
      <title>Matrizes</title>
      <link>https://www.wikiod.com/pt/c/matrizes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/matrizes/</guid>
      <description>Arrays são tipos de dados derivados, representando uma coleção ordenada de valores (&amp;ldquo;elementos&amp;rdquo;) de outro tipo. A maioria dos arrays em C tem um número fixo de elementos de qualquer tipo, e sua representação armazena os elementos de forma contígua na memória sem espaços ou preenchimento. C permite arrays multidimensionais cujos elementos são outros arrays, e também arrays de ponteiros.
C suporta arrays alocados dinamicamente cujo tamanho é determinado em tempo de execução.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/pt/c/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/operadores/</guid>
      <description>Um operador em uma linguagem de programação é um símbolo que diz ao compilador ou intérprete para realizar uma operação matemática, relacional ou lógica específica e produzir um resultado final.
C tem muitos operadores poderosos. Muitos operadores C são operadores binários, o que significa que eles têm dois operandos. Por exemplo, em a/b, / é um operador binário que aceita dois operandos (a, b). Existem alguns operadores unários que recebem um operando (por exemplo: ~, ++), e apenas um operador ternário ?</description>
    </item>
    
    <item>
      <title>Afirmação</title>
      <link>https://www.wikiod.com/pt/c/afirmacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/afirmacao/</guid>
      <description>Uma asserção é um predicado de que a condição apresentada deve ser verdadeira no momento em que a asserção é encontrada pelo software. As mais comuns são as asserções simples, que são validadas em tempo de execução. No entanto, asserções estáticas são verificadas em tempo de compilação.
Sintaxe # assert(expressão) static_assert(expressão, mensagem) _Static_assert(expressão, mensagem) Parâmetros # Parâmetro Detalhes expressão expressão do tipo escalar. mensagem literal de string a ser incluído na mensagem de diagnóstico.</description>
    </item>
    
    <item>
      <title>Pré-processador e Macros</title>
      <link>https://www.wikiod.com/pt/c/pre-processador-e-macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/c/pre-processador-e-macros/</guid>
      <description>Todos os comandos do pré-processador começam com o símbolo de hash (libra) #. Uma macro C é apenas um comando de pré-processador que é definido usando a diretiva de pré-processador #define. Durante o estágio de pré-processamento, o pré-processador C (uma parte do compilador C) simplesmente substitui o corpo da macro onde quer que seu nome apareça.
Quando um compilador encontra uma macro no código, ele executa uma simples substituição de string, nenhuma operação adicional é executada.</description>
    </item>
    
  </channel>
</rss>

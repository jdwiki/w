<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Perl on </title>
    <link>https://www.wikiod.com/pt/docs/perl/</link>
    <description>Recent content in Tutorial de linguagem Perl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Perl</title>
      <link>https://www.wikiod.com/pt/perl/introducao-a-linguagem-perl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/introducao-a-linguagem-perl/</guid>
      <description>Começando com Perl # Perl tenta fazer o que você quer dizer:
print &amp;quot;Hello World\n&amp;quot;; Os dois bits complicados são o ponto e vírgula no final da linha e o \n, que adiciona uma nova linha (alimentação de linha). Se você tem uma versão relativamente nova do perl, você pode usar say em vez de print para que o retorno de carro seja adicionado automaticamente:
use feature &#39;say&#39;; say &amp;quot;Hello World&amp;quot;; O recurso say também é ativado automaticamente com uma declaração use v5.</description>
    </item>
    
    <item>
      <title>ES de arquivo (leitura e gravação de arquivos)</title>
      <link>https://www.wikiod.com/pt/perl/es-de-arquivo-leitura-e-gravacao-de-arquivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/es-de-arquivo-leitura-e-gravacao-de-arquivos/</guid>
      <description>Parâmetros # Modo Explicação &amp;gt; Escrever (truncar). Substituirá os arquivos existentes. Cria um novo arquivo se nenhum arquivo foi encontrado &amp;gt;&amp;gt; Escrever (anexar). Não substituirá os arquivos, mas acrescentará novo conteúdo no final. Também criará um arquivo se usado para abrir um arquivo não existente. &amp;lt; Ler. Abre o arquivo no modo somente leitura. +&amp;lt; Ler escrever. Não criará ou truncará o arquivo. +&amp;gt; Ler/Gravar (trunc). Irá criar e truncar o arquivo.</description>
    </item>
    
    <item>
      <title>Lendo o conteúdo de um arquivo em uma variável</title>
      <link>https://www.wikiod.com/pt/perl/lendo-o-conteudo-de-um-arquivo-em-uma-variavel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/lendo-o-conteudo-de-um-arquivo-em-uma-variavel/</guid>
      <description>Caminho::Pequeno # Usando o idioma de [The Manual Way](https://www.wikiod.com/pt/perl/lendo-o-conteudo-de-um-arquivo-em-uma-variavel#A maneira manual) várias vezes em um script logo fica tedioso, então você pode querer experimentar um módulo.
use Path::Tiny; my $contents = path($filename)-&amp;gt;slurp; Você pode passar uma opção binmode se precisar de controle sobre codificações de arquivos, terminações de linha etc. - veja man perlio:
my $contents = path($filename)-&amp;gt;slurp( {binmode =&amp;gt; &amp;quot;:encoding(UTF-8)&amp;quot;} ); Path::Tiny também tem muitas outras funções para lidar com arquivos seja uma boa escolha.</description>
    </item>
    
    <item>
      <title>Perl orientado a objetos</title>
      <link>https://www.wikiod.com/pt/perl/perl-orientado-a-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/perl-orientado-a-objetos/</guid>
      <description>Definindo classes em Perl moderno # Embora disponível, definir uma classe [do zero](https://www.wikiod.com/pt/perl/perl-orientado-a-objetos#Definindo classes) não é recomendado no Perl moderno. Use um dos sistemas OO auxiliares que fornecem mais recursos e conveniência. Entre esses sistemas estão:
Moose - inspirado no design Perl 6 OO
Class::Accessor - uma alternativa leve ao Moose
Class::Tiny - construtor de classes verdadeiramente mínimo
Alce
package Foo; use Moose; has bar =&amp;gt; (is =&amp;gt; &#39;ro&#39;); # a read-only property has baz =&amp;gt; (is =&amp;gt; &#39;rw&#39;, isa =&amp;gt; &#39;Bool&#39;); # a read-write boolean property sub qux { my $self = shift; my $barIsBaz = $self-&amp;gt;bar eq &#39;baz&#39;; # property getter $self-&amp;gt;baz($barIsBaz); # property setter } Class::Accessor (sintaxe Moose)</description>
    </item>
    
    <item>
      <title>Listas</title>
      <link>https://www.wikiod.com/pt/perl/listas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/listas/</guid>
      <description>Array como lista # O array é um dos tipos básicos de variáveis ​​do Perl. Ele contém uma lista, que é uma sequência ordenada de zero ou mais escalares. A matriz é a variável que contém (e fornece acesso a) os dados da lista, conforme documentado em perldata.
Você pode atribuir uma lista a uma matriz:
my @foo = ( 4, 5, 6 ); Você pode usar uma matriz onde quer que uma lista seja esperada:</description>
    </item>
    
    <item>
      <title>Saída de depuração</title>
      <link>https://www.wikiod.com/pt/perl/saida-de-depuracao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/saida-de-depuracao/</guid>
      <description>Despejando com estilo # Às vezes, Data::Dumper não é suficiente. Tem um objeto Moose que deseja inspecionar? Grandes números da mesma estrutura? Quer coisas organizadas? Colori? Dados::Impressora é seu amigo.
use Data::Printer; p $data_structure; Data::A impressora grava em STDERR, como warn. Isso torna mais fácil encontrar a saída. Por padrão, ele classifica as chaves de hash e examina os objetos.
use Data::Printer; use LWP::UserAgent; my $ua = LWP::UserAgent-&amp;gt;new; p $ua; Ele examinará todos os métodos do objeto e também listará os internos.</description>
    </item>
    
    <item>
      <title>Verdadeiro e falso</title>
      <link>https://www.wikiod.com/pt/perl/verdadeiro-e-falso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/verdadeiro-e-falso/</guid>
      <description>Sintaxe # undef # Falso &amp;rsquo;&amp;rsquo; # Definido, Falso 0 # Definido, Tem Comprimento, Falso &amp;lsquo;0&amp;rsquo; # Definido, Tem Comprimento, Falso Perl não tem um tipo de dados booleano, nem tem palavras-chave true e false como muitas outras linguagens. No entanto, todo valor escalar será avaliado como verdadeiro ou falso quando avaliado em um contexto booleano (a condição em uma instrução if ou um loop while, por exemplo).
Os seguintes valores são considerados falsos: # &#39;&#39;, a string vazia.</description>
    </item>
    
    <item>
      <title>Pacotes e módulos</title>
      <link>https://www.wikiod.com/pt/perl/pacotes-e-modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/pacotes-e-modulos/</guid>
      <description>Sintaxe # requer Módulo::Nome; # Requer por nome de @INC requer &amp;ldquo;caminho/para/arquivo.pm&amp;rdquo;; # Requer por caminho relativo de @INC use Módulo::Nome; # requer e importação padrão em BEGIN use Módulo::Nome(); # requer e não importa em BEGIN use Módulo::Nome (@ARGS); # requer e importa com argumentos em BEGIN use Módulo::Nome VERSÃO; # requer, verificação de versão e importação padrão em BEGIN use Módulo::Nome VERSION(); # requer, verificação de versão e nenhuma importação em BEGIN use Módulo::Nome VERSION (@ARGS); # requer, verificação de versão, importação com argumentos em BEGIN faça &amp;ldquo;caminho/para/arquivo.</description>
    </item>
    
    <item>
      <title>Variáveis</title>
      <link>https://www.wikiod.com/pt/perl/variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/variaveis/</guid>
      <description>Sintaxe # minha # declaração Lexical nossa # declaração global $foo # Escalar @foo # Matriz $#foo # Array Last Index %foo # Hash ${$foo} # De-Referência Escalar @{$foo} # Array De-Reference $#{$foo} # Array-DeRef Último Índice %{$foo} # Hash De-Reference $foo[$index] # Array é indexado ${$foo}[$index] # Array De-Reference e indexado. $foo-&amp;gt;[$index] # Array De-Reference e indexado (Simplificado) $foo{$key} # Hash obtém valor para chave ${$foo}{$key} # Hash Desreferencia e obtém valor para a chave $foo-&amp;gt;{$key} # Hash Dereference e obter valor para a chave (Simplificado) \$x # Referência a escalar \@x # Referência ao Array \%x # Referência a Hash = # Referência à matriz anônima (inline) ={ } # Referência a Hash Anônimo (Inline) Escalares # Escalares são o tipo de dados mais básico do Perl.</description>
    </item>
    
    <item>
      <title>Sub-rotinas</title>
      <link>https://www.wikiod.com/pt/perl/sub-rotinas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/perl/sub-rotinas/</guid>
      <description>As sub-rotinas obtêm seus argumentos para a variável mágica chamada @_. Embora não precise ser descompactado, é recomendado, pois ajuda na legibilidade e evita alterações acidentais, pois os argumentos de @_ são passados ​​por referência (podem ser modificados).
Criando sub-rotinas # As sub-rotinas são criadas usando a palavra-chave sub seguida por um identificador e um bloco de código entre chaves.
Você pode acessar os argumentos usando a variável especial @_, que contém todos os argumentos como um array.</description>
    </item>
    
  </channel>
</rss>

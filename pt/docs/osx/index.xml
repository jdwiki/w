<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial osx on </title>
    <link>https://www.wikiod.com/pt/docs/osx/</link>
    <description>Recent content in Tutorial osx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/osx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com osx</title>
      <link>https://www.wikiod.com/pt/osx/comecando-com-osx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/comecando-com-osx/</guid>
      <description>Visão geral dos frameworks # Os aplicativos escritos para macOS geralmente são escritos com os Frameworks da Apple. As estruturas que quase todos os aplicativos usarão são:
AppKit - para criar e gerenciar elementos de interface do usuário Fundação - para objetos e operações comuns sem interface do usuário Existem outras estruturas comuns que são usadas em muitos, mas não em todos os aplicativos:
CoreData - para armazenamento de dados Despacho - para gerenciamento de vários threads CoreGraphics - para desenhar tarefas relacionadas a gráficos CoreAnimation - para animação de elementos de interface do usuário </description>
    </item>
    
    <item>
      <title>NSStoryBoard</title>
      <link>https://www.wikiod.com/pt/osx/nsstoryboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/nsstoryboard/</guid>
      <description>Abra um novo controlador de janela # Para abrir uma nova janela, adicione o código a seguir em algum lugar onde você possa manter uma referência à nova janela (ou seja, o delegado do aplicativo).
Rápido
let storyboard:NSStoryboard = NSStoryboard(name: &amp;quot;Main&amp;quot;, bundle: nil) guard let controller:NSWindowController = storyboard.instantiateControllerWithIdentifier(&amp;quot;myWindowController&amp;quot;) as? NSWindowController else { return /*or handle error*/ } controller.showWindow(self) Objetivo-C
NSStoryboard *storyBoard = [NSStoryboard storyboardWithName:@&amp;quot;Main&amp;quot; bundle:nil]; // get a reference to the storyboard myController = [storyBoard instantiateControllerWithIdentifier:@&amp;quot;secondWindowController&amp;quot;]; // instantiate your window controller [myController showWindow:self]; Depois de criar seu controller, certifique-se de manter uma referência a ele em algum lugar fora da chamada da função.</description>
    </item>
    
    <item>
      <title>NSMenuItem</title>
      <link>https://www.wikiod.com/pt/osx/nsmenuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/nsmenuitem/</guid>
      <description>Consulte a documentação da Apple aqui: https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMenuItem_Class/
Ativando itens de menu # Habilitando itens de menu manualmente # Para controlar manualmente o estado habilitado de um item de menu, o menu que o contém deve desabilitar a habilitação automática de seus itens
Os menus podem desativar a ativação automática de duas maneiras:
No Construtor de Interfaces Em código menu.autoenablesItems = false
Ambos os mecanismos definem a propriedade autoenablesItems em [NSMenu](https://developer.apple.com/reference/appkit/ nsmenu).</description>
    </item>
    
    <item>
      <title>NSTextView</title>
      <link>https://www.wikiod.com/pt/osx/nstextview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/nstextview/</guid>
      <description>NSTextView é o principal manipulador do sistema de texto do AppKit da Apple. Ele contém tudo o que você precisa para criar um espaço de visualização/edição de texto em aplicativos OS X (renomeado macOS).
Criando um NSTextView # Graficamente # No XCode, um NSTextView simples pode ser criado arrastando e soltando um da Biblioteca de Objetos.
Este NSTextView fica dentro de um NSScrollView que é definido automaticamente para expandir verticalmente com a visualização de texto.</description>
    </item>
    
    <item>
      <title>NSRunLoop</title>
      <link>https://www.wikiod.com/pt/osx/nsrunloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/nsrunloop/</guid>
      <description>aplicativo de daemon simples # Um processo daemon executa um programa em segundo plano, geralmente sem interação do usuário. O exemplo abaixo mostra como criar um daemon e registrar um listener, que monitora todos os aplicativos abertos. A parte principal é a chamada de função NSRunLoop.mainRunLoop().run(), que inicia o daemon.
class MyObserver: NSObject { override init() { super.init() // app listeners NSWorkspace.sharedWorkspace().notificationCenter.addObserver(self, selector: &amp;quot;SwitchedApp:&amp;quot;, name: NSWorkspaceDidActivateApplicationNotification, object: nil) } func SwitchedApp(notification: NSNotification!</description>
    </item>
    
    <item>
      <title>Definir variáveis ​​de ambiente</title>
      <link>https://www.wikiod.com/pt/osx/definir-variaveis-de-ambiente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/definir-variaveis-de-ambiente/</guid>
      <description>No Mac OS X, você pode definir as variáveis ​​de ambiente em um dos seguintes arquivos:
~/.bashrc
~/.bash_profile
~/.perfil
Por padrão, o Mac OS X não possui os arquivos acima, você precisa criá-lo manualmente.
Adicione um caminho # 1.vim ~/.bash_profile
O arquivo pode não existir (se não, você pode simplesmente criá-lo).
digite isso e salve o arquivo:
export PATH=$PATH:YOUR_PATH_HERE</description>
    </item>
    
    <item>
      <title>NSFont</title>
      <link>https://www.wikiod.com/pt/osx/nsfont/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/nsfont/</guid>
      <description>NSFont é o objeto que fornece aos aplicativos Mac informações de glifo e características de fonte a serem usadas principalmente para exibição. Você aprenderá como criar e usar objetos NFont de várias maneiras, comuns e incomuns.
Criando um objeto NFont # A maneira preferida e mais comum de criar um objeto NFont é a seguinte:
Objetivo-C # // Name is PostScript name of font; size is in points. NSFont *essayFont = [NSFont fontWithName:@&amp;quot;Times New Roman&amp;quot; size:12.</description>
    </item>
    
    <item>
      <title>Solicitando ao usuário um arquivo</title>
      <link>https://www.wikiod.com/pt/osx/solicitando-ao-usuario-um-arquivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/solicitando-ao-usuario-um-arquivo/</guid>
      <description>O NSOpenPanel fornece uma API para solicitar ao usuário a abertura de um arquivo. Este menu é a IU padrão apresentada pelo item de menu Abrir (⌘O).
Abrindo arquivos # Abrindo qualquer arquivo # NSOpenPanel *openPanel = [NSOpenPanel openPanel]; [openPanel beginWithCompletionHandler:^(NSInteger result) { NSURL *url = openPanel.URL; if (result == NSFileHandlingPanelCancelButton || !url) { return; } // do something with a URL }]; Permitindo abrir vários arquivos # NSOpenPanel *openPanel = [NSOpenPanel openPanel]; openPanel.</description>
    </item>
    
    <item>
      <title>Associação de arquivo</title>
      <link>https://www.wikiod.com/pt/osx/associacao-de-arquivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/osx/associacao-de-arquivo/</guid>
      <description>Definir meu aplicativo como aplicativo padrão para um tipo de arquivo # - (NSString *) UTIforFileExtension:(NSString *) extension { NSString * UTIString = (NSString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (CFStringRef)extension, NULL); return [UTIString autorelease]; } - (BOOL) setMyselfAsDefaultApplicationForFileExtension:(NSString *) fileExtension { OSStatus returnStatus = LSSetDefaultRoleHandlerForContentType ( (CFStringRef) [self UTIforFileExtension:fileExtension], kLSRolesAll, (CFStringRef) [[NSBundle mainBundle] bundleIdentifier] ); if (returnStatus != 0) { NSLog(@&amp;quot;Got an error when setting default application - %d&amp;quot;, returnStatus); // Please see the documentation or LSInfo.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial asp.net-web-api on </title>
    <link>https://www.wikiod.com/pt/docs/asp-dotnet-web-api/</link>
    <description>Recent content in Tutorial asp.net-web-api on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/asp-dotnet-web-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com asp.net-web-api</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/comecando-com-aspnet-web-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/comecando-com-aspnet-web-api/</guid>
      <description>Instalação ou Configuração # Instruções detalhadas sobre como configurar ou instalar o asp.net-web-api.
O que e por que ASP.NET Web API? # O que? : Uma estrutura totalmente compatível e extensível para criar endpoints baseados em HTTP. No mundo do HTML5, os dispositivos móveis e as técnicas modernas de desenvolvimento HTTP tornaram-se a opção padrão para a criação de serviços avançados e escaláveis. A API da Web ASP.NET fornece um conjunto de opções padrão fácil de usar, mas também fornece uma infraestrutura de extensibilidade profunda para atender às demandas de qualquer cenário usando HTTP.</description>
    </item>
    
    <item>
      <title>Negociação de conteúdo da API da Web ASP.NET</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/negociacao-de-conteudo-da-api-da-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/negociacao-de-conteudo-da-api-da-web-aspnet/</guid>
      <description>Informações básicas de negociação de conteúdo da API Web ASP.NET # A Negociação de Conteúdo pode ser definida como o processo de seleção da melhor representação para um determinado recurso. Portanto, a negociação de conteúdo significa que o cliente e o servidor podem negociar entre eles para que o cliente possa obter dados de acordo com o formato necessário.
Há três pontos dos quais a internet depende,
O Recurso Um ponteiro para recurso (URL) Representação do recurso O terceiro ponto é mais importante que os outros dois, pois tudo funciona com base em como podemos ver o recurso.</description>
    </item>
    
    <item>
      <title>Roteamento de URL da API da Web</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/roteamento-de-url-da-api-da-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/roteamento-de-url-da-api-da-web/</guid>
      <description>Como o roteamento funciona no webapi asp.net # Na API da Web do ASP.NET, um controlador é uma classe que manipula solicitações HTTP. Os métodos públicos do controlador são chamados de métodos de ação ou simplesmente ações.
Quando a estrutura da API da Web recebe uma solicitação, ela roteia a solicitação para uma ação. Para determinar qual ação invocar, a estrutura usa uma tabela de roteamento. O modelo de projeto do Visual Studio para API Web cria uma rota padrão:</description>
    </item>
    
    <item>
      <title>ASP.NET Web API MediaTypeFormatter</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</guid>
      <description>Informações básicas do MediaTypeFormatter # MediaTypeFormatter é uma classe abstrata da qual as classes JsonMediaTypeFormatter e XmlMediaTypeFormatter herdam. Aqui, a classe JsonMediaTypeFormatter trata de objetos JSON e a classe XmlMediaTypeFormatter trata de objetos XML.
Retorne apenas JSON, independentemente do valor do cabeçalho Accept:
Para retornar apenas objetos JSON na resposta da solicitação, aceite o valor do cabeçalho da solicitação se application/json ou application/xml, escreva a seguinte linha no método Register da classe WebApiConfig.</description>
    </item>
    
    <item>
      <title>Ativação do ASP.NET WEB API CORS</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/ativacao-do-aspnet-web-api-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/ativacao-do-aspnet-web-api-cors/</guid>
      <description>Configurar CORS para WebAPI 2 com autenticação do Windows # A configuração do lado do servidor a seguir permite que a solicitação CORS funcione junto com a Autenticação do Windows (nenhum anônimo deve ser habilitado no IIS).
web.config - permite solicitações de simulação não autenticadas (anônimas) (OPÇÕES)
&amp;lt;system.web&amp;gt; &amp;lt;authentication mode=&amp;quot;Windows&amp;quot; /&amp;gt; &amp;lt;authorization&amp;gt; &amp;lt;allow verbs=&amp;quot;OPTIONS&amp;quot; users=&amp;quot;*&amp;quot;/&amp;gt; &amp;lt;deny users=&amp;quot;?&amp;quot; /&amp;gt; &amp;lt;/authorization&amp;gt; &amp;lt;/system.web&amp;gt; global.asax.cs - responda corretamente com cabeçalhos que permitem que o chamador de outro domínio receba dados</description>
    </item>
    
    <item>
      <title>Início rápido para trabalhar com JSON</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/inicio-rapido-para-trabalhar-com-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/inicio-rapido-para-trabalhar-com-json/</guid>
      <description>Exemplos para colocar você em funcionamento rapidamente (e corretamente) com ASP.NET WebAPI
Retorna JSON de GET usando atributos # 1. Configure seu formatador e roteamento em Register de (App_Start/WebApiConfig) # public static class WebApiConfig { public static void Register(HttpConfiguration config) { GlobalConfiguration.Configuration.Formatters.Clear(); GlobalConfiguration.Configuration.Formatters.Add(new JsonMediaTypeFormatter()); config.MapHttpAttributeRoutes(); } } 2. Crie métodos em um ApiController # public class HelloWorldController : ApiController { [HttpGet] [Route(&amp;quot;echo/{message}&amp;quot;)] public IHttpActionResult Echo(string message) { return Ok(new{ hello: message }); } [HttpGet] [Route(&amp;quot;echo/{digits:int}&amp;quot;)] public IHttpActionResult Echo(int digits) { return Ok(new{ hello: digits }); } executando GET /echo/foo</description>
    </item>
    
    <item>
      <title>Configure um aplicativo de API da Web para responder com dados JSON bonitosformatados por padrão</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/configure-um-aplicativo-de-api-da-web-para-responder-com-dados-json-bonitosformatados-por-padrao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/configure-um-aplicativo-de-api-da-web-para-responder-com-dados-json-bonitosformatados-por-padrao/</guid>
      <description>Formatação JSON padrão: eficiência ao custo da legibilidade # Digamos que você tenha um ApiController simples como este:
[HttpGet] [Route(&amp;quot;test&amp;quot;)] public dynamic Test() { dynamic obj = new ExpandoObject(); obj.prop1 = &amp;quot;some string&amp;quot;; obj.prop2 = 11; obj.prop3 = &amp;quot;another string&amp;quot;; return obj; } A representação JSON resultante deste objeto ficará assim:
{&amp;quot;prop1&amp;quot;:&amp;quot;some string&amp;quot;,&amp;quot;prop2&amp;quot;:11,&amp;quot;prop3&amp;quot;:&amp;quot;another string&amp;quot;} Isso provavelmente é bom para respostas simples como esta, mas imagine se você tiver um objeto grande/complexo enviado como resposta:</description>
    </item>
    
    <item>
      <title>OData com API Web Asp.net</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/odata-com-api-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/odata-com-api-web-aspnet/</guid>
      <description>Instale os pacotes OData # No menu Ferramentas, selecione Gerenciador de Pacotes NuGet &amp;gt; Console do Gerenciador de Pacotes. Na janela do Console do Gerenciador de Pacotes, digite:
Install-Package Microsoft.AspNet.Odata Este comando instala os pacotes OData NuGet mais recentes.
Ativar o Entity Framework # Para este tutorial, usaremos o Entity Framework (EF) Code First para criar o banco de dados back-end.
Web API OData não requer EF. Use qualquer camada de acesso a dados que possa traduzir entidades de banco de dados em modelos.</description>
    </item>
    
    <item>
      <title>Cache</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/cache/</guid>
      <description>Cache é o processo de armazenar dados em algum lugar para futuras solicitações, no nosso caso podemos evitar o acesso indesejado ao banco de dados para obter os dados se armazenarmos em cache os dados em algum lugar, desta forma podemos garantir que os dados sejam atendidos de maneira mais rápida .
System.Runtime.Caching (MemoryCache) # Importe o namespace System.Runtime.Caching(Certifique-se de ter adicionado a DLL System.Runtime.Caching à sua referência de projeto).</description>
    </item>
    
    <item>
      <title>Criando um ActionFilterAttribute personalizado</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-web-api/criando-um-actionfilterattribute-personalizado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-web-api/criando-um-actionfilterattribute-personalizado/</guid>
      <description>Atributos de Filtros de Ação são uma parte do ASP .NET Framework que considero útil para ajudar a seguir o princípio DRY. Você pode substituir várias linhas de lógica comum por uma tag declarativa simples. A estrutura fornece vários atributos de filtro de ação úteis por padrão, como os atributos de autorização e tratamento de erro. Este guia destina-se a mostrar como criar seu próprio atributo personalizado.
EnsurePresenseOfAttribute # Este é um exemplo de um atributo que criei para validar que os parâmetros obrigatórios foram atribuídos no objeto de solicitação recebido em uma rota POST.</description>
    </item>
    
  </channel>
</rss>

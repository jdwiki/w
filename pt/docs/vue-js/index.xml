<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Vue.js on </title>
    <link>https://www.wikiod.com/pt/docs/vue-js/</link>
    <description>Recent content in Tutorial Vue.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/vue-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Vue.js</title>
      <link>https://www.wikiod.com/pt/vue-js/introducao-ao-vuejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/introducao-ao-vuejs/</guid>
      <description>&amp;ldquo;Olá Mundo!&amp;rdquo; Programa # Para começar a usar Vue.js, certifique-se de ter o arquivo de script incluído em seu HTML. Por exemplo, adicione o seguinte ao seu HTML.
&amp;lt;script src=&amp;quot;https://npmcdn.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Exemplo Simples # Modelo HTML # &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; ##Javascript
new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue.js!&#39; } }) Veja uma demonstração ao vivo deste exemplo.
Você também pode conferir o exemplo &amp;ldquo;Hello World&amp;rdquo; feito pelo Vue.</description>
    </item>
    
    <item>
      <title>Renderização condicional</title>
      <link>https://www.wikiod.com/pt/vue-js/renderizacao-condicional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/renderizacao-condicional/</guid>
      <description>Sintaxe # &amp;lt;elemento v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt;&amp;lt;element v-else=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if | v-mais &amp;lt;template v-if=&amp;quot;condition&amp;quot;&amp;gt;...&amp;lt;/template&amp;gt; // modelo v-if &amp;lt;element v-show=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-show É muito importante lembrar a diferença entre v-if e v-show. Embora seus usos sejam quase idênticos, um elemento vinculado a v-if só será renderizado no DOM quando sua condição for true pela primeira vez. Ao usar a diretiva v-show, todos os elementos são renderizados no DOM, mas são ocultados usando o estilo display se a condição for false!</description>
    </item>
    
    <item>
      <title>Ganchos de ciclo de vida</title>
      <link>https://www.wikiod.com/pt/vue-js/ganchos-de-ciclo-de-vida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/ganchos-de-ciclo-de-vida/</guid>
      <description>Armadilhas Comuns: Acessando o DOM a partir do gancho ready() # Um caso de uso comum para o gancho ready() é acessar o DOM, por exemplo. para iniciar um plugin Javascript, obter as dimensões de um elemento etc.
O problema
Devido ao mecanismo de atualização assíncrona do DOM do Vue, não é garantido que o DOM tenha sido totalmente atualizado quando o gancho ready() for chamado. Isso geralmente resulta em um erro porque o elemento é indefinido.</description>
    </item>
    
    <item>
      <title>Diretivas personalizadas</title>
      <link>https://www.wikiod.com/pt/vue-js/diretivas-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/diretivas-personalizadas/</guid>
      <description>Sintaxe # Vue.directive(id, definição); Vue.directive(id, atualização); //quando você precisa apenas da função de atualização. Parâmetros # Parâmetro Detalhes id String - O id da diretiva que será usado sem o prefixo v-. (Adicione o prefixo v- ao usá-lo) definição Object - Um objeto de definição pode fornecer várias funções de gancho (todas opcionais): bind, update e unbind Fundamentos # Além do conjunto padrão de diretivas fornecido no núcleo, o Vue.js também permite que você registre diretivas personalizadas.</description>
    </item>
    
    <item>
      <title>Adereços</title>
      <link>https://www.wikiod.com/pt/vue-js/aderecos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/aderecos/</guid>
      <description>camelCase &amp;lt;=&amp;gt; kebab-case # Ao definir os nomes dos seus props, lembre-se sempre que os nomes dos atributos HTML não diferenciam maiúsculas de minúsculas. Isso significa que se você definir um prop em camel case na sua definição de componente&amp;hellip;
Vue.component(&#39;child&#39;, { props: [&#39;myProp&#39;], ... }); &amp;hellip;você deve chamá-lo em seu componente HTML como my-prop.
Passando dados de pai para filho com adereços # No Vue.js, cada instância de componente tem seu próprio escopo isolado, o que significa que se um componente pai tem um componente filho - o componente filho tem seu próprio escopo isolado e o componente pai tem seu próprio escopo isolado.</description>
    </item>
    
    <item>
      <title>Usando isso no Vue</title>
      <link>https://www.wikiod.com/pt/vue-js/usando-isso-no-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/usando-isso-no-vue/</guid>
      <description>Um dos erros mais comuns que encontramos no código Vue no StackOverflow é o uso indevido de this. Os erros mais comuns geralmente caem em duas áreas, usando this em callbacks para promessas ou outras funções assíncronas e usando funções de seta para definir métodos, propriedades computadas, etc.
ERRADO! Usando uma função de seta para definir um método que se refere a &amp;ldquo;isto&amp;rdquo; # new Vue({ el:&amp;quot;#app&amp;quot;, data:{ foo: &amp;quot;bar&amp;quot; }, methods:{ // This is wrong!</description>
    </item>
    
    <item>
      <title>Slots</title>
      <link>https://www.wikiod.com/pt/vue-js/slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/slots/</guid>
      <description>Importante! Slots após renderização não garantem ordem de posições para slots. Slot, que foi o primeiro, pode ter uma posição diferente após a renderização.
Usando slots nomeados # Os slots nomeados funcionam de maneira semelhante aos slots únicos, mas permitem distribuir conteúdo para diferentes regiões dentro do modelo de componente filho.
Pegue o componente page do exemplo anterior, mas modifique seu template para que fique da seguinte forma:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;slot name=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;main&amp;gt; &amp;lt;slot name=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Ao usar o componente page, agora podemos determinar onde o conteúdo é colocado através do atributo slot:</description>
    </item>
    
    <item>
      <title>VueJS &#43; Redux com Vua-Redux (melhor solução)</title>
      <link>https://www.wikiod.com/pt/vue-js/vuejs--redux-com-vua-redux-melhor-solucao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/vuejs--redux-com-vua-redux-melhor-solucao/</guid>
      <description>Como usar o Vua-Redux # Instalando o Vua Redux do NPM:
Instale através de:
npm i vua-redux --save Inicializar: # ================
// main.js
import Vue from &#39;vue&#39;; import { reduxStorePlugin } from &#39;vua-redux&#39;; import AppStore from &#39;./AppStore&#39;; import App from &#39;./Component/App&#39;; // install vua-redux Vue.use(reduxStorePlugin); new Vue({ store: AppStore, render(h) { return &amp;lt;App /&amp;gt; } }); // AppStore.js
import { createStore } from &#39;redux&#39;; const initialState = { todos: [] }; const reducer = (state = initialState, action) =&amp;gt; { switch(action.</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://www.wikiod.com/pt/vue-js/vuex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/vuex/</guid>
      <description>Vuex é um padrão de gerenciamento de estado + biblioteca para aplicativos Vue.js. Ele serve como um armazenamento centralizado para todos os componentes em um aplicativo, com regras que garantem que o estado só possa ser alterado de maneira previsível. Ele também se integra com a extensão de ferramentas de desenvolvimento oficial do Vue para fornecer recursos avançados, como depuração de viagem no tempo de configuração zero e exportação/importação de instantâneo de estado.</description>
    </item>
    
    <item>
      <title>Filtros personalizados</title>
      <link>https://www.wikiod.com/pt/vue-js/filtros-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/vue-js/filtros-personalizados/</guid>
      <description>Sintaxe # Vue.filter(nome, função(valor){}); //Básico Vue.filter(name, function(value, begin, end){}); //Básico com valores de encapsulamento Vue.filter(name, function(value, input){}); //Dinâmico Vue.filter(name, { read: function(value){}, write: function(value){} }); //Bidirecional Parâmetros # Parâmetro Detalhes nome String - nome de chamada desejado do filtro valor [Callback] Qualquer - valor dos dados que passam para o filtro começar [Callback] Qualquer - valor que vem antes dos dados passados ​​ fim [Callback] Qualquer - valor que vem após os dados passados ​​ entrada [Callback] Qualquer - entrada do usuário vinculada à instância Vue para resultados dinâmicos Básico # Filtros personalizados em Vue.</description>
    </item>
    
  </channel>
</rss>

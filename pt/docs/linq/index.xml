<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial linq on </title>
    <link>https://www.wikiod.com/pt/docs/linq/</link>
    <description>Recent content in Tutorial linq on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/linq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com linq</title>
      <link>https://www.wikiod.com/pt/linq/comecando-com-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/linq/comecando-com-linq/</guid>
      <description>Configurar # O LINQ requer .NET 3.5 ou superior (ou .NET 2.0 usando LINQBridge).
Adicione uma referência ao System.Core, caso ainda não tenha sido adicionado.
Na parte superior do arquivo, importe o namespace:
C# using System; using System.Linq; VB.NET Imports System.Linq As diferentes junções no LINQ # Nos exemplos a seguir, usaremos os seguintes exemplos:
List&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;() { new Product() { ProductId = 1, Name = &amp;quot;Book nr 1&amp;quot;, Price = 25 }, new Product() { ProductId = 2, Name = &amp;quot;Book nr 2&amp;quot;, Price = 15 }, new Product() { ProductId = 3, Name = &amp;quot;Book nr 3&amp;quot;, Price = 20 }, }; List&amp;lt;Order&amp;gt; Orders = new List&amp;lt;Order&amp;gt;() { new Order() { OrderId = 1, ProductId = 1, }, new Order() { OrderId = 2, ProductId = 1, }, new Order() { OrderId = 3, ProductId = 2, }, new Order() { OrderId = 4, ProductId = NULL, }, }; JUNÇÃO INTERNA Sintaxe da consulta</description>
    </item>
    
    <item>
      <title>Operadores de consulta padrão</title>
      <link>https://www.wikiod.com/pt/linq/operadores-de-consulta-padrao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/linq/operadores-de-consulta-padrao/</guid>
      <description>As consultas Linq são escritas usando os Operadores de consulta padrão (que são um conjunto de métodos de extensão que opera principalmente em objetos do tipo IEnumerable&amp;lt;T&amp;gt; e IQueryable&amp;lt;T&amp;gt;) ou usando Expressões de consulta (que em tempo de compilação, são convertidos em chamadas de método do Operador de Consulta Padrão).
Os operadores de consulta fornecem recursos de consulta, incluindo filtragem, projeção, agregação, classificação e muito mais.
Operações de agregação # As operações de agregação calculam um único valor de uma coleção de valores.</description>
    </item>
    
    <item>
      <title>Modos de execução do método - streaming imediato, adiado, não streaming adiado</title>
      <link>https://www.wikiod.com/pt/linq/modos-de-execucao-do-metodo---streaming-imediato-adiado-nao-streaming-adiado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/linq/modos-de-execucao-do-metodo---streaming-imediato-adiado-nao-streaming-adiado/</guid>
      <description>Execução adiada vs execução imediata # Alguns métodos LINQ retornam um objeto de consulta. Este objeto não contém os resultados da consulta; em vez disso, tem todas as informações necessárias para gerar esses resultados:
var list = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5}; var query = list.Select(x =&amp;gt; { Console.Write($&amp;quot;{x} &amp;quot;); return x; }); A consulta contém uma chamada para Console.Write, mas nada foi enviado para o console. Isso ocorre porque a consulta ainda não foi executada e, portanto, a função passada para Select nunca foi avaliada.</description>
    </item>
    
    <item>
      <title>Linq Usando Take while e Skip While</title>
      <link>https://www.wikiod.com/pt/linq/linq-usando-take-while-e-skip-while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/linq/linq-usando-take-while-e-skip-while/</guid>
      <description>Take, Skip, TakeWhile e SkipWhile são todos chamados de Operadores de Particionamento, pois obtêm uma seção de uma sequência de entrada determinada por uma determinada condição. Vamos discutir esses operadores
Método Take # O método Take Leva os elementos até uma posição especificada a partir do primeiro elemento em uma sequência. Assinatura de Take:
Public static IEnumerable&amp;lt;TSource&amp;gt; Take&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source,int count); Exemplo:
int[] numbers = { 1, 5, 8, 4, 9, 3, 6, 7, 2, 0 }; var TakeFirstFiveElement = numbers.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de linguagem Scala on </title>
    <link>https://www.wikiod.com/pt/docs/scala/</link>
    <description>Recent content in Tutorial de linguagem Scala on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução à linguagem Scala</title>
      <link>https://www.wikiod.com/pt/scala/introducao-a-linguagem-scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/introducao-a-linguagem-scala/</guid>
      <description>Hello World estendendo App # object HelloWorld extends App { println(&amp;quot;Hello, world!&amp;quot;) } Demonstração ao vivo
Ao estender o App trait, você pode evitar definir um método main explícito . Todo o corpo do objeto HelloWorld é tratado como &amp;ldquo;o método principal&amp;rdquo;.
Inicialização atrasada # De acordo com a documentação oficial, o App usa um recurso chamado Inicialização Atrasada. Isso significa que os campos do objeto são inicializados depois que o método main é chamado.</description>
    </item>
    
    <item>
      <title>Correspondência de padrões</title>
      <link>https://www.wikiod.com/pt/scala/correspondencia-de-padroes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/correspondencia-de-padroes/</guid>
      <description>Sintaxe # seletor de correspondência parcialFunction selector match {lista de alternativas de caso) // Esta é a forma mais comum do acima Parâmetros # Parâmetro Detalhes seletor A expressão cujo valor está sendo correspondido ao padrão. alternativas uma lista de alternativas delimitadas por case. Correspondência de padrões simples # Este exemplo mostra como combinar uma entrada com vários valores:
def f(x: Int): String = x match { case 1 =&amp;gt; &amp;quot;One&amp;quot; case 2 =&amp;gt; &amp;quot;Two&amp;quot; case _ =&amp;gt; &amp;quot;Unknown!</description>
    </item>
    
    <item>
      <title>Implícitos</title>
      <link>https://www.wikiod.com/pt/scala/implicitos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/implicitos/</guid>
      <description>Sintaxe # valor implícito x: T = ??? As classes implícitas permitem que métodos personalizados sejam adicionados a tipos existentes, sem a necessidade de modificar seu código, enriquecendo assim os tipos sem a necessidade de controle do código.
O uso de tipos implícitos para enriquecer uma classe existente geralmente é chamado de padrão &amp;rsquo;enriquecer minha biblioteca&#39;.
Restrições a Classes Implícitas
Classes implícitas só podem existir dentro de outra classe, objeto ou característica.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/pt/scala/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/json/</guid>
      <description>JSON com Circe # Circe fornece codecs derivados de tempo de compilação para en/decodificar json em classes case. Um exemplo simples se parece com isso:
import io.circe._ import io.circe.generic.auto._ import io.circe.parser._ import io.circe.syntax._ case class User(id: Long, name: String) val user = User(1, &amp;quot;John Doe&amp;quot;) // {&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;John Doe&amp;quot;} val json = user.asJson.noSpaces // Right(User(1L, &amp;quot;John Doe&amp;quot;)) val res: Either[Error, User] = decode[User](json) JSON com spray-json # spray-json fornece uma maneira fácil de trabalhar com JSON.</description>
    </item>
    
    <item>
      <title>Extratores</title>
      <link>https://www.wikiod.com/pt/scala/extratores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/extratores/</guid>
      <description>Sintaxe # val extractor(extractedValue1, _ /* ignorou o segundo valor extraído */) = valueToBeExtracted valueToBeExtracted match { case extractor(extractedValue1, _) =&amp;gt; ???} val (tuple1, tuple2, tuple3) = tupleWith3Elements object Foo { def unapply(foo: Foo): Option[String] = Some(foo.x); } Extratores de classe de caso # Uma classe de caso é uma classe com muitos códigos clichê padrão incluídos automaticamente. Um benefício disso é que o Scala facilita o uso de extratores com classes case.</description>
    </item>
    
    <item>
      <title>Coleções</title>
      <link>https://www.wikiod.com/pt/scala/colecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/colecoes/</guid>
      <description>Folha de dicas de lista e vetor # Agora é uma prática recomendada usar Vector em vez de List porque as implementações têm melhor desempenho As características de desempenho podem ser encontradas aqui. Vector pode ser usado onde quer que List seja usado.
Criação de lista
List[Int]() // Declares an empty list of type Int List.empty[Int] // Uses `empty` method to declare empty list of type Int Nil // A list of type Nothing that explicitly has nothing in it List(1, 2, 3) // Declare a list with some elements 1 :: 2 :: 3 :: Nil // Chaining element prepending to an empty list, in a LISP-style Pegar elemento</description>
    </item>
    
    <item>
      <title>Mônadas</title>
      <link>https://www.wikiod.com/pt/scala/monadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/monadas/</guid>
      <description>Definição de Mônada # Informalmente, uma mônada é um container de elementos, notado como F[_], embalado com 2 funções: flatMap (para transformar este container) e unit (para criar este container).
Exemplos comuns de bibliotecas incluem List[T], Set[T] e Option[T].
Definição formal
Monad M é um tipo paramétrico M[T] com duas operações flatMap e unit, como:
trait M[T] { def flatMap[U](f: T =&amp;gt; M[U]): M[U] } def unit[T](x: T): M[T] Essas funções devem satisfazer três leis:</description>
    </item>
    
    <item>
      <title>Classes de casos</title>
      <link>https://www.wikiod.com/pt/scala/classes-de-casos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/classes-de-casos/</guid>
      <description>Sintaxe # case class Foo() // Classes case sem parâmetros devem ter uma lista vazia case class Foo(a1: A1, &amp;hellip;, aN: AN) // Cria uma classe case com os campos a1 &amp;hellip; aN case object Bar // Cria uma classe case singleton Artefatos de código gerados # O modificador case faz com que o compilador Scala gere automaticamente um código clichê comum para a classe. Implementar este código manualmente é tedioso e uma fonte de erros.</description>
    </item>
    
    <item>
      <title>Enumerações</title>
      <link>https://www.wikiod.com/pt/scala/enumeracoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/enumeracoes/</guid>
      <description>A abordagem com traço selado e objetos case é preferida porque a enumeração Scala tem alguns problemas:
As enumerações têm o mesmo tipo após o apagamento.
O compilador não reclama de “Match não é exaustivo”, se o caso for perdido, ele falhará em tempo de execução scala.MatchError:
def isWeekendWithBug(day: WeekDays.Value): Boolean = day match { case WeekDays.Sun | WeekDays.Sat =&amp;gt; true }
isWeekendWithBug(WeekDays.Fri) scala.MatchError: Fri (of class scala.Enumeration$Val)
Compare com:</description>
    </item>
    
    <item>
      <title>Escovando</title>
      <link>https://www.wikiod.com/pt/scala/escovando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/scala/escovando/</guid>
      <description>Sintaxe # aFunction(10)_ //Usando &amp;lsquo;_&amp;rsquo; Diz ao compilador que todos os parâmetros no restante dos grupos de parâmetros serão curry. nArityFunction.curried //Converte uma função n-arity para uma versão curried equivalente anotherFunction(x)(_: String)(z) // Currying um parâmetro arbitrário. Ele precisa de seu tipo explicitamente declarado. Quando usar Curry # Currying é a técnica de traduzir a avaliação de uma função que recebe vários argumentos para avaliar uma sequência de funções, cada uma com um único argumento.</description>
    </item>
    
  </channel>
</rss>

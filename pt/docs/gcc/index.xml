<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do gcc on </title>
    <link>https://www.wikiod.com/pt/docs/gcc/</link>
    <description>Recent content in Tutorial do gcc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao gcc</title>
      <link>https://www.wikiod.com/pt/gcc/introducao-ao-gcc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gcc/introducao-ao-gcc/</guid>
      <description>&amp;ldquo;Olá Mundo!&amp;rdquo; com opções de linha de comando comuns # Para programas com um único arquivo de origem, usar o gcc é simples.
/* File name is hello_world.c */ #include &amp;lt;stdio.h&amp;gt; int main(void) { int i; printf(&amp;quot;Hello world!\n&amp;quot;); } Para compilar o arquivo hello_world.c a partir da linha de comando:
gcc hello_world.c O gcc irá então compilar o programa e enviar o executável para o arquivo a.out. Se você quiser nomear o executável, use a opção -o.</description>
    </item>
    
    <item>
      <title>Cobertura de código gcov</title>
      <link>https://www.wikiod.com/pt/gcc/cobertura-de-codigo-gcov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gcc/cobertura-de-codigo-gcov/</guid>
      <description>O GCC fornece alguma documentação do gcov aqui
Gcovr e Lcov podem ser usados ​​para ajudar a gerar e resumir os resultados da cobertura
Introdução # Cobertura de código é uma medida usada para a frequência com que cada instrução e ramificação do código-fonte é executada. Essa medida geralmente é necessária ao executar um conjunto de testes para garantir que o máximo possível do código seja testado pelo conjunto de testes.</description>
    </item>
    
    <item>
      <title>Avisos</title>
      <link>https://www.wikiod.com/pt/gcc/avisos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gcc/avisos/</guid>
      <description>Sintaxe # gcc [-Wopção [-Wopção [&amp;hellip;]]] arquivo src Parâmetros # Parâmetro Detalhes opção Ele pode ser usado para habilitar ou desabilitar avisos. Ele pode transformar avisos em erros. arquivo src O arquivo de origem a ser compilado. É uma boa prática habilitar a maioria dos avisos durante o desenvolvimento de um software.
Habilite quase todos os avisos # Arquivo de origem C # gcc -Wall -Wextra -o main main.c Arquivo fonte C++ # g++ -Wall -Wextra -Wconversion -Woverloaded-virtual -o main main.</description>
    </item>
    
    <item>
      <title>Extensões GNU C</title>
      <link>https://www.wikiod.com/pt/gcc/extensoes-gnu-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gcc/extensoes-gnu-c/</guid>
      <description>O compilador GNU C vem com alguns recursos interessantes que não são especificados pelos padrões C. Essas extensões são muito usadas no software do sistema e são uma ótima ferramenta para otimização de desempenho.
Atributo embalado # packed é um atributo variável que é usado com estruturas e uniões para minimizar os requisitos de memória.
#include &amp;lt;stdio.h&amp;gt; struct foo { int a; char c; }; struct __attribute__((__packed__))foo_packed { int a; char c; }; int main() { printf(&amp;quot;Size of foo: %d\n&amp;quot;, sizeof(struct foo)); printf(&amp;quot;Size of packed foo: %d\n&amp;quot;, sizeof(struct foo_packed)); return 0; } No meu Linux de 64 bits,</description>
    </item>
    
    <item>
      <title>Otimizações do GCC</title>
      <link>https://www.wikiod.com/pt/gcc/otimizacoes-do-gcc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gcc/otimizacoes-do-gcc/</guid>
      <description>O compilador GNU oferece vários níveis de otimizações para o processo de compilação. Essas otimizações são usadas para melhorar o desempenho do código e/ou o tamanho do código. Compilar um código com otimizações ativadas normalmente leva mais tempo para ser concluído.
Este comando informa quais otimizações estão disponíveis em seu sistema: $gcc -Q &amp;ndash;help=optimizations
Aqui está uma documentação detalhada das opções para controlar otimizações:
https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
Diferença entre códigos compilados com O0 e O3 # Eu escrevi um código C simples foo.</description>
    </item>
    
  </channel>
</rss>

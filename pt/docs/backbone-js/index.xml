<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial backbone.js on </title>
    <link>https://www.wikiod.com/pt/docs/backbone-js/</link>
    <description>Recent content in Tutorial backbone.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/backbone-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao backbone.js</title>
      <link>https://www.wikiod.com/pt/backbone-js/introducao-ao-backbonejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/introducao-ao-backbonejs/</guid>
      <description>Configuração básica # Backbone requer Underscore e (opcionalmente) jQuery - para manipulação DOM (usando Backbone.View) e persistência RESTful.
A maneira mais rápida de começar a usar o Backbone é criar um arquivo index.html com tags de script simples no HTML &amp;lt;head&amp;gt;:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; O backbone já está disponível para uso na página.
Exemplo de uso de backbone (principalmente Backbone.Model) # O Backbone.</description>
    </item>
    
    <item>
      <title>Visão</title>
      <link>https://www.wikiod.com/pt/backbone-js/visao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/visao/</guid>
      <description>Sintaxe # Criar: var View = Backbone.View.extend( { /* propriedades */ } ); Construir: var myView = new View( /* options */ ); initialize: método chamado automaticamente após a construção render: método usado para atualizar this.el com novo conteúdo Uma visualização vinculada ao HTML existente # Assumindo este HTML na página:
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;myPage&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; Uma visão pode ser vinculada a ela com:
var MyPageView = Backbone.View.extend( { &amp;quot;el&amp;quot;: &amp;quot;#myPage&amp;quot;, &amp;quot;template&amp;quot;: _.</description>
    </item>
    
    <item>
      <title>Modelo</title>
      <link>https://www.wikiod.com/pt/backbone-js/modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/modelo/</guid>
      <description>Sintaxe # var MeuModelo = Backbone.Model.extend(propriedades, [classProperties]); // Cria um modelo personalizado var model = new Backbone.Model([atributos], [opções]); // Instancia um objeto modelo Parâmetros # Parâmetro Detalhes propriedades Propriedades da instância. classePropriedades Opcional. Propriedades que existem e são compartilhadas com cada instância de modelo desse tipo. atributos Opcional. Valores iniciais dos atributos do modelo. Se este parâmetro for omitido, o modelo será inicializado com os valores especificados pela propriedade defaults do modelo.</description>
    </item>
    
    <item>
      <title>Roteador</title>
      <link>https://www.wikiod.com/pt/backbone-js/roteador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/roteador/</guid>
      <description>Criando um roteador # O servidor web atende o usuário com base na solicitação enviada pelo navegador, mas como o usuário informará ao navegador o que está procurando, é aí que precisamos da URL. Cada página da web na internet tem um URL que pode ser marcado, copiado, compartilhado e salvo para referência futura. No aplicativo Backbone de página única, tudo o que vemos é uma visualização, as visualizações são formadas e renderizadas para mostrar uma página específica, mas e se o usuário quiser ver as mesmas informações novamente.</description>
    </item>
    
    <item>
      <title>Coleção</title>
      <link>https://www.wikiod.com/pt/backbone-js/colecao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/colecao/</guid>
      <description>Sintaxe # // Nova coleção personalizada var MyCollection = Backbone.Collection.extend(propriedades, [classProperties]); // Nova instância da coleção var coleção = new Backbone.Collection([models], [options]); Parâmetros # Parâmetro Detalhes propriedades Propriedades da instância. classePropriedades Opcional. Propriedades que existem e são compartilhadas com cada instância de coleção desse tipo. modelos Opcional. A matriz inicial de modelos (ou objetos). Se este parâmetro for omitido, a coleção estará vazia. opções Opcional. Objeto que serve para configurar a coleção e depois é passado para a função initialize.</description>
    </item>
    
    <item>
      <title>Sincronizar</title>
      <link>https://www.wikiod.com/pt/backbone-js/sincronizar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/sincronizar/</guid>
      <description>sync é uma função que o Backbone usa para lidar com todo o envio ou recebimento de dados de/para um servidor remoto. A implementação padrão usa jQuery (ou Zepto) para realizar operações AJAX quando os dados são sincronizados. No entanto, esse método pode ser substituído para aplicar diferentes comportamentos de sincronização, como:
Usando setTimeout para agrupar várias atualizações em uma única solicitação Envio de dados de modelo como XML em vez de JSON Usando WebSockets em vez de Ajax Sintaxe # sincronização (método, modelo, opções) Parâmetros # parâmetro detalhes método criar, ler, atualizar, excluir modelo o modelo a ser salvo (ou coleção a ser lida) opções retornos de chamada de sucesso e erro e todas as outras opções de solicitação do jQuery Exemplo básico # O método sync() lê e busca os dados do modelo</description>
    </item>
    
    <item>
      <title>url e urlRoot</title>
      <link>https://www.wikiod.com/pt/backbone-js/url-e-urlroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/backbone-js/url-e-urlroot/</guid>
      <description>Modificando Model.url() # Model.url e Collection.url são usados ​​apenas internamente pelo método padrão Backbone.sync. O método padrão pressupõe que você está vinculado a uma API RESTful. Se você estiver usando um design de endpoint diferente, você desejará substituir o método sync e poderá utilizar o método url.
var Model = Backbone.Model.extend({ urlRoot: &#39;/path-to-model&#39;, url: function (path) { var url = this.urlRoot + &#39;/&#39; + path; if (this.isNew()) { return url; } return url + &#39;/&#39; + this.</description>
    </item>
    
  </channel>
</rss>

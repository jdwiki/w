<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial swing on </title>
    <link>https://www.wikiod.com/pt/docs/swing/</link>
    <description>Recent content in Tutorial swing on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/swing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com o swing</title>
      <link>https://www.wikiod.com/pt/swing/comecando-com-o-swing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/comecando-com-o-swing/</guid>
      <description>Incrementando com um botão # import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; import javax.swing.WindowConstants; /** * A very simple Swing example. */ public class SwingExample { /** * The number of times the user has clicked the button. */ private long clickCount; /** * The main method: starting point of this application. * * @param arguments the unused command-line arguments. */ public static void main(final String[] arguments) { new SwingExample().</description>
    </item>
    
    <item>
      <title>Usando Swing para interfaces gráficas de usuário</title>
      <link>https://www.wikiod.com/pt/swing/usando-swing-para-interfaces-graficas-de-usuario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/usando-swing-para-interfaces-graficas-de-usuario/</guid>
      <description>Saindo do aplicativo ao fechar a janela # É fácil esquecer de sair do aplicativo quando a janela é fechada. Lembre-se de adicionar a seguinte linha.
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //Quit the application when the JFrame is closed Criando uma janela vazia (JFrame) # Criando o JFrame # Criar uma janela é fácil. Você só precisa criar um JFrame.
JFrame frame = new JFrame(); Intitular a janela # Você pode querer dar um título à sua janela.</description>
    </item>
    
    <item>
      <title>Layout do GridBag</title>
      <link>https://www.wikiod.com/pt/swing/layout-do-gridbag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/layout-do-gridbag/</guid>
      <description>Sintaxe # frame.setLayout(novo GridBagLayout()); //Definir GridBagLayout para frame pane.setLayout(novo GridBagLayout()); //Definir GridBagLayout para Painel Painel JPanel = new JPanel(new GridBagLayout()); //Definir GridBagLayout para Painel GridBagConstraints c = new GridBagConstraints() //Inicializa um GridBagConstraint Como funciona o GridBagLayout? # Os layouts são usados ​​sempre que você deseja que seus componentes não sejam exibidos apenas um ao lado do outro. O GridBagLayout é útil, pois divide sua janela em linhas e colunas, e você decide em qual linha e coluna colocar os componentes, bem como quantas linhas e colunas o componente tem.</description>
    </item>
    
    <item>
      <title>Layout de grade</title>
      <link>https://www.wikiod.com/pt/swing/layout-de-grade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/layout-de-grade/</guid>
      <description>Como o GridLayout funciona # Um GridLayout é um gerenciador de layout que coloca componentes dentro de uma grade com tamanhos de células iguais. Você pode definir o número de linhas, colunas, o espaço horizontal e o espaço vertical usando os seguintes métodos:
setRows(int linhas) setColumns(int colunas) setHgap(int hgap) setVgap(int vgap) ou você pode defini-los com os seguintes construtores:
GridLayout(int linhas, int colunas) GridLayout(int rows, int columns, int hgap, int vgap) Se o número de linhas ou colunas for desconhecido, você pode definir a respectiva variável como 0.</description>
    </item>
    
    <item>
      <title>Padrão MVP</title>
      <link>https://www.wikiod.com/pt/swing/padrao-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/padrao-mvp/</guid>
      <description>Exemplo simples de MVP # Para ilustrar um exemplo simples de uso do padrão MVP, considere o código a seguir, que cria uma interface do usuário simples com apenas um botão e um rótulo. Quando o botão é clicado, o rótulo é atualizado com o número de vezes que o botão foi clicado.
Temos 5 aulas:
Modelo - O POJO para manter o estado (M no MVP) View - A classe com código de interface do usuário (V no MVP) ViewListener - Interface fornecendo métodos para responder a ações na visão Apresentador - Responde à entrada e atualiza a visualização (P no MVP) Aplicativo - A classe &amp;ldquo;principal&amp;rdquo; para reunir tudo e iniciar o aplicativo Uma classe &amp;ldquo;model&amp;rdquo; mínima que apenas mantém uma única variável count.</description>
    </item>
    
    <item>
      <title>Documento com estilo</title>
      <link>https://www.wikiod.com/pt/swing/documento-com-estilo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/documento-com-estilo/</guid>
      <description>Sintaxe # doc.insertString(índice, texto, atributos); //atributos devem ser um AttributeSet Criando um DefaultStyledDocument # Adicionando StyledDocument ao JTextPane # Copiando DefaultStyledDocument # Serializando um DefaultStyledDocument para RTF # </description>
    </item>
    
    <item>
      <title>Usando Look and Feel</title>
      <link>https://www.wikiod.com/pt/swing/usando-look-and-feel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/usando-look-and-feel/</guid>
      <description>Usando o sistema L&amp;amp;F # O Swing suporta alguns L&amp;amp;Fs nativos.
Você sempre pode instalar facilmente um sem precisar de uma classe L&amp;amp;F específica:
public class SystemLookAndFeel { public static void main ( final String[] args ) { // L&amp;amp;F installation should be performed within EDT (Event Dispatch Thread) // This is important to avoid any UI issues, exceptions or even deadlocks SwingUtilities.invokeLater ( new Runnable () { @Override public void run () { // Process of L&amp;amp;F installation might throw multiple exceptions // It is always up to you whether to handle or ignore them // In most common cases you would never encounter any of those try { // Installing native L&amp;amp;F as a current application L&amp;amp;F // We do not know what exactly L&amp;amp;F class is, it is provided by the UIManager UIManager.</description>
    </item>
    
    <item>
      <title>Swing Workers e o EDT</title>
      <link>https://www.wikiod.com/pt/swing/swing-workers-e-o-edt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/swing-workers-e-o-edt/</guid>
      <description>Sintaxe # classe abstrata pública SwingWorker&amp;lt;T,V&amp;gt;
T - o tipo de resultado retornado pelos métodos doInBackground e get deste SwingWorker.
V - o tipo usado para realizar resultados intermediários pelos métodos de publicação e processo deste SwingWorker.
T doInBackground() - A função abstrata que deve ser substituída. O tipo de retorno é T.
Encadeamento principal e de despacho de evento # Como qualquer outro programa java, todo programa swing começa com um método main.</description>
    </item>
    
    <item>
      <title>Gráficos</title>
      <link>https://www.wikiod.com/pt/swing/graficos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/graficos/</guid>
      <description>Usando a classe Graphics # Introdução # A classe Graphics permite que você desenhe em componentes Java como um Jpanel, ela pode ser usada para desenhar strings, linhas, formas e imagens. Isso é feito sobrescrevendo o método paintComponent(Graphics g) do JComponent que você está desenhando usando o objeto Graphics recebido como argumento para fazer o desenho:
classe Quadro # import java.awt.*; import javax.swing.*; public class Board extends JPanel{ public Board() { setBackground(Color.</description>
    </item>
    
    <item>
      <title>MigLayoutName</title>
      <link>https://www.wikiod.com/pt/swing/miglayoutname/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/swing/miglayoutname/</guid>
      <description>Elementos de encapsulamento # Este exemplo demonstra como colocar 3 botões no total com 2 botões na primeira linha. Em seguida, ocorre uma quebra, de modo que o último botão fica em uma nova linha.
As restrições são strings simples, neste caso &amp;ldquo;envolvem&amp;rdquo; ao colocar o componente.
public class ShowMigLayout { // Create the elements private final JFrame demo = new JFrame(); private final JPanel panel = new JPanel(); private final JButton button1 = new JButton(&amp;quot;First Button&amp;quot;); private final JButton button2 = new JButton(&amp;quot;Second Button&amp;quot;); private final JButton button3 = new JButton(&amp;quot;Third Button&amp;quot;); public static void main(String[] args) { ShowMigLayout showMigLayout = new ShowMigLayout(); SwingUtilities.</description>
    </item>
    
  </channel>
</rss>

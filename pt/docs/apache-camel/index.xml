<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial apache camel on </title>
    <link>https://www.wikiod.com/pt/docs/apache-camel/</link>
    <description>Recent content in tutorial apache camel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/apache-camel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com apache camel</title>
      <link>https://www.wikiod.com/pt/apache-camel/comecando-com-apache-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/apache-camel/comecando-com-apache-camel/</guid>
      <description>Instalação ou Configuração # Instruções detalhadas sobre como adicionar as dependências necessárias do Camel.
Dependência Maven Uma das maneiras mais comuns de incluir o Apache Camel em seu aplicativo é por meio de uma dependência do Maven. Ao adicionar o bloco de dependência abaixo, o Maven resolverá as bibliotecas e dependências do Camel para você.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.17.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle Outra maneira comum de incluir o Apache Camel em seu aplicativo é por meio de uma dependência do Gradle.</description>
    </item>
    
    <item>
      <title>PubSub usando Camel &#43; Redis</title>
      <link>https://www.wikiod.com/pt/apache-camel/pubsub-usando-camel--redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/apache-camel/pubsub-usando-camel--redis/</guid>
      <description>Usando o editor:
producerTemplate.asyncSendBody(&amp;quot;direct:myprocedure&amp;quot;, massageBody); Usando o &amp;ldquo;createProducer()&amp;rdquo; no ManagedCamel para criar o ProducerTemplate.
RedisPublisher # public class RedisPublisher extends RouteBuilder { public static final String CAMEL_REDIS_CHANNEL = &amp;quot;CamelRedis.Channel&amp;quot;; public static final String CAMEL_REDIS_MESSAGE = &amp;quot;CamelRedis.Message&amp;quot;; @Value(&amp;quot;${redis.host}&amp;quot;) private String redisHost; @Value(&amp;quot;${redis.port}&amp;quot;) private int redisPort; @Value(&amp;quot;${redis.channel.mychannel}&amp;quot;) private String redisChannel; private String producerName; @Required public void setProducerName(String producerName) { this.producerName = producerName; } @Override public void configure() throws Exception { from(producerName) .log(String.format(&amp;quot;Publishing with redis in channel: %s, massage body: ${body}&amp;quot;, redisChannel)) .</description>
    </item>
    
    <item>
      <title>Testes de integração em rotas existentes com Apache-Camel e Spring (e DBUnit)</title>
      <link>https://www.wikiod.com/pt/apache-camel/testes-de-integracao-em-rotas-existentes-com-apache-camel-e-spring-e-dbunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/apache-camel/testes-de-integracao-em-rotas-existentes-com-apache-camel-e-spring-e-dbunit/</guid>
      <description>O objetivo deste wiki é mostrar como executar testes de integração usando o Apache Camel.
Mais precisamente, fazendo isso você poderá lançar uma rota existente do começo ao fim (com ou sem seu banco de dados real) ou interceptar a troca entre cada parte da rota e testar se seus cabeçalhos ou corpo estão corretos ou não.
O projeto em que tenho feito isso usa Spring clássico com configuração xml e DBUnit para simular um banco de dados de teste.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial spring-mvc on </title>
    <link>https://www.wikiod.com/pt/docs/spring-mvc/</link>
    <description>Recent content in Tutorial spring-mvc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com spring-mvc</title>
      <link>https://www.wikiod.com/pt/spring-mvc/comecando-com-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/comecando-com-spring-mvc/</guid>
      <description>Primeiro projeto Spring-MVC # Crie um projeto da Web dinâmica, forneça as seguintes informações conforme indicado abaixo
Nome do projeto: DemoSpringMVCProject Tempo de execução de destino: definido como servidor Apache Tomcat v7.0 Clique em terminar, criamos com sucesso um projeto web dinâmico.
Agora temos que configurar o framework Spring-MVC :
Crie web.xml na pasta &amp;rsquo; WebContent\WEB-INF\ &amp;lsquo; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; id=&amp;quot;WebApp_ID&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;Demo9&amp;lt;/display-name&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Validação Spring MVC</title>
      <link>https://www.wikiod.com/pt/spring-mvc/validacao-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/validacao-spring-mvc/</guid>
      <description>No Spring MVC é possível validar campos de formulário usando a API de validação de Bean (JSR 303 para Bean Vaidation 1.0 e [JSR 349](https: //jcp.org/en/jsr/detail?id=349) para Bean Validation 1.1) que é usado para definir restrições de validação do objeto JavaBean.
Hibernate Validator é a implementação de referência da API de validação de bean. O Hibernate Validator oferece valor adicional além dos recursos exigidos pela Bean Validation. Por exemplo, uma API de configuração de restrição programática, bem como um [processador de anotações] (http://docs.</description>
    </item>
    
    <item>
      <title>Upload de arquivo</title>
      <link>https://www.wikiod.com/pt/spring-mvc/upload-de-arquivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/upload-de-arquivo/</guid>
      <description>Sintaxe # @RequestPart(String, String, boolean) Parâmetros # Parâmetro Detalhes @RequestPart Essa anotação especifica que um parâmetro deve ser mapeado para uma determinada parte da solicitação. O nome da parte deve corresponder ao nome do parâmetro do método, a menos que você opte por fornecê-lo como um argumento para @RequestPart. Se o nome da parte não puder ser expresso como um nome Java (por exemplo, 123), você poderá usar o atributo value de @RequestPart para especificar o nome real.</description>
    </item>
    
    <item>
      <title>Tratamento de Exceções Globais</title>
      <link>https://www.wikiod.com/pt/spring-mvc/tratamento-de-excecoes-globais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/tratamento-de-excecoes-globais/</guid>
      <description>Não se esqueça de criar exceções personalizadas se precisar Tanto o resolvedor quanto o manipulador devem ser descobertos pelo Spring Se você estiver no Spring 3.2 ou superior, poderá usar @ContrllerAdvice Fonte
Resolvedor de Exceções Globais # @Component public class RestExceptionResolver extends ExceptionHandlerExceptionResolver { @Autowired //If you have multiple handlers make this a list of handlers private RestExceptionHandler restExceptionHandler; /** * This resolver needs to be injected because it is the easiest (maybe only) way of getting the configured MessageConverters */ @Resource private ExceptionHandlerExceptionResolver defaultResolver; @PostConstruct public void afterPropertiesSet() { setMessageConverters(defaultResolver.</description>
    </item>
    
    <item>
      <title>Manipulação de exceção</title>
      <link>https://www.wikiod.com/pt/spring-mvc/manipulacao-de-excecao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/manipulacao-de-excecao/</guid>
      <description>Sintaxe # @ExceptionHandler(ExceptionToBeHandled.class) @ExceptionHandler({ExceptionToBeHandled.class, AnotherExceptionToBeHandled.class}) Manipulação de exceção baseada em controlador # No cenário em que um controlador lança uma exceção, podemos definir métodos de tratamento de exceção para construir e retornar respostas específicas. É importante observar que os manipuladores de exceção definidos dentro de um determinado controlador só se aplicarão às exceções que ocorrerem nesse controlador.
@Controller public class MyController { @GetMapping(&amp;quot;/&amp;quot;) public String somePage() throws Exception { // some set of code that can throw exceptions } @ExceptionHandler(Exception.</description>
    </item>
    
    <item>
      <title>Spring-MVC com anotações</title>
      <link>https://www.wikiod.com/pt/spring-mvc/spring-mvc-com-anotacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/spring-mvc/spring-mvc-com-anotacoes/</guid>
      <description>Neste tópico, você lerá sobre anotações relacionadas principalmente ao Spring MVC. Algumas das anotações relacionadas são as seguintes: @Controller, @RequestMapping, @RequestParam, @RequestBody, @ResponseBody, @RestController, @ModelAttribute, @ControllerAdvice, @ExceptionHandler, @ResponseStatus.
Claro que existem mais anotações que são extremamente importantes também, mas não pertencem diretamente ao Spring MVC. Como: @Required, @Autowired, @Resource e muito mais.
Parâmetros # Anotação Explicação @Controller Com a anotação @Controller você marca uma Classe Java como uma Classe que contém manipuladores HTTP, ou seja, pontos de acesso HTTP para sua aplicação.</description>
    </item>
    
  </channel>
</rss>

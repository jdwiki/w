<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sh Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/sh/</link>
    <description>Recent content in sh Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com sh</title>
      <link>https://www.wikiod.com/pt/sh/comecando-com-sh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/comecando-com-sh/</guid>
      <description>Olá Mundo! # Com eco:
$ echo Hello, world! Hello, world! Com printf:
$ printf &#39;Hello, world!\n&#39; Hello, world! Como um arquivo:
#!/bin/sh printf &#39;%s\n&#39; &#39;Hello, world!&#39; Portabilidade de eco # $ for shell in ash bash dash ksh ksh93 zsh; do &amp;gt; $shell -c &amp;quot;echo &#39;\\\\&#39;$shell&#39;\\\\&#39;&amp;quot; &amp;gt; done \\ash\\ \\bash\\ \dash\ \pdksh\ \\ksh93\\ \zsh\ &amp;rsquo;echo&amp;rsquo; só pode ser usado de forma consistente, entre implementações, se seus argumentos não contiverem nenhuma barra invertida (reverse-solidi) e se o primeiro argumento não começar com um traço (hífen-menos).</description>
    </item>
    
    <item>
      <title>Controle de Trabalho</title>
      <link>https://www.wikiod.com/pt/sh/controle-de-trabalho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/controle-de-trabalho/</guid>
      <description>Pause, execute em segundo plano, execute em primeiro plano # Vamos criar um processo que é bastante longo para ser concluído:
$ sleep 1000 Para pausar o processo, digite Ctrl + Z :
^Z [1]+ Stopped sleep 1000 Você pode usar jobs para ver a lista de processos em execução ou parados no terminal atual:
$ jobs [1]+ Stopped sleep 1000 Para trazer de volta um trabalho em primeiro plano, use fg com o id escrito entre colchetes na lista fornecida por jobs:</description>
    </item>
    
    <item>
      <title>Expansão aritmética</title>
      <link>https://www.wikiod.com/pt/sh/expansao-aritmetica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/expansao-aritmetica/</guid>
      <description>Os números em expansões aritméticas devem corresponder ao seguinte ERE:
[-+]?(0[0-7]+|[1-9][0-9]*|0[Xx][0-9A-Fa-f]+) As expressões aritméticas suportam operadores de inteiros assinados, comparações, expressões booleanas, atribuições e expressões ternárias de C.
Recursos # Expansão aritmética em POSIX Precedência do operador Contagem de linhas # i=0 while read -r line; do i=$((i+1)) done &amp;lt; file echo $i Com um arquivo contendo:
Alpha Beta Gamma Delta Epsilon O script acima imprime: 5
Expansão de parâmetro # Loop n vezes:</description>
    </item>
    
    <item>
      <title>O comando `ler`</title>
      <link>https://www.wikiod.com/pt/sh/o-comando-ler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/o-comando-ler/</guid>
      <description>Ler uma linha literalmente # $ IFS= read -r foo &amp;lt;&amp;lt;EOF &amp;gt; this is a \n line &amp;gt;EOF $ printf &#39;%s\n&#39; &amp;quot;$foo&amp;quot; this is a \n line Leia uma linha, removendo os espaços em branco iniciais e finais # $ read -r foo &amp;lt;&amp;lt;EOF &amp;gt; this is a line &amp;gt;EOF $ printf &#39;%s\n&#39; &amp;quot;$foo&amp;quot; this is a line </description>
    </item>
    
    <item>
      <title>Redirecionamento de ES</title>
      <link>https://www.wikiod.com/pt/sh/redirecionamento-de-es/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/redirecionamento-de-es/</guid>
      <description>Geralmente, um comando recebe entradas do terminal e as saídas de volta ao terminal. Normalmente, um comando lê a entrada do teclado e exibe o resultado na tela. Aqui está a importância do redirecionamento de entrada/saída
Sintaxe # [fd]&amp;lt;arquivo [fd]&amp;lt;&amp;amp;fd [fd] &amp;lt;&amp;amp;- [fd]&amp;gt;arquivo [fd]&amp;gt;&amp;amp;fd [fd]&amp;gt;&amp;amp;- [fd]&amp;gt;|arquivo [fd]&amp;raquo;arquivo [fd]&amp;lt;&amp;gt;arquivo [fd]&amp;laquo;[-] palavra &amp;hellip;
palavra Recursos # A seção POSIX &amp;lsquo;Shell Command Language&amp;rsquo; em &amp;lsquo;Redirection&amp;rsquo; Redirecionamento de saída # Normalmente, a saída de um comando vai para o terminal.</description>
    </item>
    
    <item>
      <title>Citação</title>
      <link>https://www.wikiod.com/pt/sh/citacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/citacao/</guid>
      <description>Referências # A seção POSIX &amp;lsquo;Shell Command Language&amp;rsquo; em &amp;lsquo;Citações&amp;rsquo; Aspas simples # Aspas simples são strings literais, e a falta de caracteres de escape significa que o único caractere que não pode ocorrer dentro de uma string entre aspas simples é uma aspa simples.
$ echo &#39;$var \$var \\$var \\\$var&#39; $var \$var \\$var \\\$var $ echo &#39;&amp;quot;quoted string&amp;quot;&#39; &amp;quot;quoted string&amp;quot; $ echo &#39;var=$(echo $var)&#39; var=$(echo $var) Aspas duplas # As aspas duplas preservam todos os caracteres exceto &amp;quot; terminador, $ expansões, ` substituições de comando e \ escapes de qualquer um desses caracteres (e remoção de nova linha).</description>
    </item>
    
    <item>
      <title>Teste</title>
      <link>https://www.wikiod.com/pt/sh/teste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sh/teste/</guid>
      <description>Sintaxe # teste teste [!] [ -n | -z ] string teste [!] { -b | -c | -d | -e | -f | -g | -h | -L | -p | -r | -S | -s | -u | -w | -x } arquivo teste [!] -t fd teste [!] string { = | != } string teste [!] inteiro { -eq | -ne | -gt | -ge | -lt | -o } inteiro *[ ] *[ [!</description>
    </item>
    
  </channel>
</rss>

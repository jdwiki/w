<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de gole on </title>
    <link>https://www.wikiod.com/pt/docs/gulp/</link>
    <description>Recent content in Tutorial de gole on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/gulp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com gulp</title>
      <link>https://www.wikiod.com/pt/gulp/comecando-com-gulp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/comecando-com-gulp/</guid>
      <description>Dependência de tarefa # Você pode executar tarefas em série, passando um segundo parâmetro para gulp.task().
Esses parâmetros são uma matriz de tarefas a serem executadas e concluídas antes que sua tarefa seja executada:
var gulp = require(&#39;gulp&#39;); gulp.task(&#39;one&#39;, function() { // compile sass css }); gulp.task(&#39;two&#39;, function() { // compile coffeescript }); // task three will execute only after tasks one and two have been completed // note that task one and two run in parallel and order is not guaranteed gulp.</description>
    </item>
    
    <item>
      <title>Mostrar erros com gulp-jslint</title>
      <link>https://www.wikiod.com/pt/gulp/mostrar-erros-com-gulp-jslint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/mostrar-erros-com-gulp-jslint/</guid>
      <description>Instalação e uso # Instalação
$ npm install gulp-jslint --save-dev Uso
Em gulpfile.js adicione:
var gulp = require(&#39;gulp&#39;); var jslint = require(&#39;gulp-jslint&#39;); gulp.task(&#39;lint&#39;, function(){ return gulp.src([&#39;source.js&#39;]) .pipe(jslint({ /* this object represents the JSLint directives being passed down */ })) .pipe(jslint.reporter( &#39;my-reporter&#39; )); }); para usar esta tarefa:
$ ./node_modules/gulp/bin/gulp.js lint </description>
    </item>
    
    <item>
      <title>Reduzindo HTML</title>
      <link>https://www.wikiod.com/pt/gulp/reduzindo-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/reduzindo-html/</guid>
      <description>Minimize HTML usando gulp-htmlmin # Primeiro, instale gulp e gulp-htmlmin no diretório do projeto localmente
npm install --save-dev gulp gulp-htmlmin Em seguida, adicione a tarefa minify-html ao seu gulpfile.js
var gulp = require(&#39;gulp&#39;); var htmlmin = require(&#39;gulp-htmlmin&#39;); // Task to minify HTML gulp.task(&#39;minify-html&#39;, function() { return gulp.src(&#39;source/*.html&#39;) .pipe(htmlmin()) .pipe(gulp.dest(&#39;public/&#39;)); }); gulp.task(&#39;watch&#39;, function (){ gulp.watch(&#39;source/*.html&#39;, [&#39;minify-html&#39;]); // other tasks }); gulp.task(&#39;default&#39;, [&#39;minify-html&#39;, &#39;watch&#39;]); Esta tarefa encontra todos os arquivos no diretório source com uma extensão .</description>
    </item>
    
    <item>
      <title>Crie documentação com gulp-jsdoc3</title>
      <link>https://www.wikiod.com/pt/gulp/crie-documentacao-com-gulp-jsdoc3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/crie-documentacao-com-gulp-jsdoc3/</guid>
      <description>Instalação # Antes de tudo, instale gulp e gulp-jsdoc3 em seu projeto:
npm install gulp-jsdoc3 --save-dev Em seguida, adicione-o ao seu gulpfile.js
var gulp = require(&#39;gulp&#39;); var jsdoc = require(&#39;gulp-jsoc3&#39;); gulp.task(&#39;doc&#39;, function (cb){ gulp.src(&#39;src/*.js&#39;) .pipe(jsdoc(cb)); }); Para documentar, por exemplo, uma função, você deve adicionar um comentário logo no topo da função, assim:
/** * @function example * @summary This is a short description of example * @author Whoever * @param {any} cb * @returns */ function example(cb){ //Code } Se você quiser saber mais tags de bloco para usar, visite usejsdoc.</description>
    </item>
    
    <item>
      <title>Minificando JS</title>
      <link>https://www.wikiod.com/pt/gulp/minificando-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/minificando-js/</guid>
      <description>Sintaxe # ext Um objeto que especifica a fonte de saída e as extensões de arquivo minificadas. source A string de sufixo dos nomes de arquivos com os quais os arquivos de origem de saída terminam. min When string: A string de sufixo dos nomes de arquivos que geram arquivos minificados termina com. When Array: As expressões regex a serem substituídas por nomes de arquivos de entrada. Por exemplo: [/.(.*)-source.js$/, &amp;lsquo;$1.</description>
    </item>
    
    <item>
      <title>Concatenar arquivos</title>
      <link>https://www.wikiod.com/pt/gulp/concatenar-arquivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/concatenar-arquivos/</guid>
      <description>Concat e Uglify arquivos JS e CSS # Lembre-se de instalar primeiro todos os arquivos no devDependencies pelo npm. Por exemplo.
npm install --save-dev gulp gulp-concat gulp-rename gulp-uglify gulp-uglifycss Gulpfile.js
var gulp = require(&#39;gulp&#39;); var gulp_concat = require(&#39;gulp-concat&#39;); var gulp_rename = require(&#39;gulp-rename&#39;); var gulp_uglify = require(&#39;gulp-uglify&#39;); var uglifycss = require(&#39;gulp-uglifycss&#39;); var destDir = &#39;./public/assets/dist/&#39;; //or any folder inside your public asset folder var tempDir = &#39;./public/assets/temp/&#39;; //any place where you want to store the concatenated, but unuglified/beautified files //To concat and Uglify All JS files in a particular folder gulp.</description>
    </item>
    
    <item>
      <title>Reduzindo CSS</title>
      <link>https://www.wikiod.com/pt/gulp/reduzindo-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/reduzindo-css/</guid>
      <description>Usando gulp-clean-css e gulp-rename # Primeiro, instale gulp, gulp-clean-css e [gulp-rename](https://www. npmjs.com/package/gulp-rename) para o diretório do projeto localmente
npm install --save-dev gulp gulp-clean-css gulp-rename Do que adicionar a seguinte tarefa minify-css ao seu gulpfile.js
var gulp = require(&#39;gulp&#39;); var cleanCSS = require(&#39;gulp-clean-css&#39;); var rename = require(&#39;gulp-rename&#39;); gulp.task(&#39;minify-css&#39;, function() { return gulp.src(&#39;css/dist/dist.css&#39;) .pipe(cleanCSS()) .pipe(rename(&#39;dist.min.css&#39;)) .pipe(gulp.dest(&#39;css/dist&#39;)); }); gulp.task(&#39;watch&#39;, function(){ gulp.watch(&#39;css/dist/**/*.css&#39;, [&#39;minify-css&#39;]); // Other watchers }); gulp.task(&#39;default&#39;, [&#39;minify-css&#39;, &#39;watch&#39;]); Aqui .pipe(cleanCSS()) executa a minificação do seu arquivo css/dist/dist.</description>
    </item>
    
    <item>
      <title>Criar um observador</title>
      <link>https://www.wikiod.com/pt/gulp/criar-um-observador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/criar-um-observador/</guid>
      <description>Tarefa do observador # config.paths.html representa o caminho para seu arquivo HTML.
gulp.task(&amp;quot;watch&amp;quot;, function() { gulp.watch(config.paths.html, [&amp;quot;html&amp;quot;]); }); A tarefa deve ser adicionada ao padrão também:
gulp.task(&amp;quot;default&amp;quot;, [&amp;quot;html&amp;quot;, &amp;quot;watch&amp;quot;]); </description>
    </item>
    
    <item>
      <title>Guia abrangente para uma automação de fluxo de trabalho de front-end com Gulpjs -1 de 2</title>
      <link>https://www.wikiod.com/pt/gulp/guia-abrangente-para-uma-automacao-de-fluxo-de-trabalho-de-front-end-com-gulpjs--1-de-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/guia-abrangente-para-uma-automacao-de-fluxo-de-trabalho-de-front-end-com-gulpjs--1-de-2/</guid>
      <description>Sintaxe # npm install [plugin-name] &amp;ndash;save-dev npm install [plugin-name] &amp;ndash;save Function &amp;lt;function-name&amp;gt; (glob) { $.src(glob).pipe([plugin 1]).pipe([plugin 2])&amp;hellip;.pipe([plugin n]).pipe( $.dest(&amp;lt;destination-name&amp;gt;) } $.task(&amp;lt;taskname&amp;gt; , [dependencies] , &amp;lt;body&amp;gt;); Continue lendo - Criando uma tarefa padrão e configurando a sincronização do navegador
Referências
Gulp-Clean-Css Gulp-Uglify Gulp-Autoprefixer - para prefixos CSS que mantêm a compatibilidade do navegador Gulp-Cached Gulp-Lembrar Gulp-Jshint Guia passo a passo para automação de fluxo de trabalho Gulp para iniciantes absolutos que documentei em meu blog</description>
    </item>
    
    <item>
      <title>Compressão sem perdas de imagem (com gulp-imagemin)</title>
      <link>https://www.wikiod.com/pt/gulp/compressao-sem-perdas-de-imagem-com-gulp-imagemin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gulp/compressao-sem-perdas-de-imagem-com-gulp-imagemin/</guid>
      <description>Sintaxe # imagemin([plugins], {opções}) Parâmetros # Argumento Descrição sourcePath Diretório de origem das imagens (por exemplo: /assets/images) buildPath Caminho de destino (por exemplo: /static/dist/) O primeiro argumento para o construtor imagemin é o array do plugin. Por padrão, os seguintes plugins são usados: [imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()]
O segundo argumento são opções. No exemplo acima, as seguintes opções são usadas:
{ progressive: true, interlaced: true, svgoPlugins: [{removeUnknownsAndDefaults: false}, {cleanupIDs: false}] } Esses são completamente opcionais.</description>
    </item>
    
  </channel>
</rss>

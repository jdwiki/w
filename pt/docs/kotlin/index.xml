<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Kotlin on </title>
    <link>https://www.wikiod.com/pt/docs/kotlin/</link>
    <description>Recent content in Tutorial Kotlin on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Kotlin</title>
      <link>https://www.wikiod.com/pt/kotlin/introducao-ao-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/introducao-ao-kotlin/</guid>
      <description>Olá Mundo # Todos os programas Kotlin iniciam na função main. Aqui está um exemplo de um programa Kotlin &amp;ldquo;Hello World&amp;rdquo; simples:
package my.program fun main(args: Array&amp;lt;String&amp;gt;) { println(&amp;quot;Hello, world!&amp;quot;) } Coloque o código acima em um arquivo chamado Main.kt (este nome de arquivo é totalmente arbitrário)
Ao direcionar a JVM, a função será compilada como um método estático em uma classe com um nome derivado do nome do arquivo. No exemplo acima, a classe principal a ser executada seria my.</description>
    </item>
    
    <item>
      <title>Loops em Kotlin</title>
      <link>https://www.wikiod.com/pt/kotlin/loops-em-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/loops-em-kotlin/</guid>
      <description>No Kotlin, os loops são compilados em loops otimizados sempre que possível. Por exemplo, se você iterar em um intervalo de números, o bytecode será compilado em um loop correspondente com base em valores int simples para evitar a sobrecarga da criação do objeto.
Fazendo um loop sobre iteráveis # Você pode fazer um loop sobre qualquer iterável usando o loop for padrão:
val list = listOf(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;, &amp;quot;!&amp;quot;) for(str in list) { print(str) } Muitas coisas no Kotlin são iteráveis, como intervalos de números:</description>
    </item>
    
    <item>
      <title>Equivalentes de fluxo Java 8</title>
      <link>https://www.wikiod.com/pt/kotlin/equivalentes-de-fluxo-java-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/equivalentes-de-fluxo-java-8/</guid>
      <description>Kotlin fornece muitos métodos de extensão em coleções e iteráveis ​​para aplicar operações de estilo funcional. Um tipo dedicado Sequence permite a composição lenta de várias dessas operações.
Sobre a preguiça # Se você quiser um processo lento de uma cadeia, você pode converter para uma Sequência usando asSequence() antes da cadeia. No final da cadeia de funções, você geralmente acaba com uma Sequência também. Então você pode usar toList(), toSet(), toMap() ou alguma outra função para materializar a Sequence no final.</description>
    </item>
    
    <item>
      <title>Enum</title>
      <link>https://www.wikiod.com/pt/kotlin/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/enum/</guid>
      <description>Assim como em Java, as classes enum em Kotlin possuem métodos sintéticos que permitem listar as constantes enum definidas e obter uma constante enum pelo seu nome. As assinaturas desses métodos são as seguintes (assumindo que o nome da classe enum é EnumClass):
EnumClass.valueOf(value: String): EnumClass EnumClass.values(): Array&amp;lt;EnumClass&amp;gt; O método valueOf() lança um IllegalArgumentException se o nome especificado não corresponder a nenhuma das constantes de enumeração definidas na classe.
Cada constante enum possui propriedades para obter seu nome e posição na declaração da classe enum:</description>
    </item>
    
    <item>
      <title>Parâmetros Vararg em Funções</title>
      <link>https://www.wikiod.com/pt/kotlin/parametros-vararg-em-funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/parametros-vararg-em-funcoes/</guid>
      <description>Sintaxe # Palavra-chave Vararg: vararg é usado em uma declaração de método para indicar que um número variável de parâmetros será aceito. Operador de Spread: Um asterisco (*) antes de um array que é usado em chamadas de função para &amp;ldquo;desdobrar&amp;rdquo; o conteúdo em parâmetros individuais. Noções básicas: Usando a palavra-chave vararg # Defina a função usando a palavra-chave vararg.
fun printNumbers(vararg numbers: Int) { for (number in numbers) { println(number) } } Agora você pode passar quantos parâmetros (do tipo correto) para a função desejar.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://www.wikiod.com/pt/kotlin/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/interfaces/</guid>
      <description>Consulte também: Documentação de referência do Kotlin para interfaces: Interfaces
Interface com implementações padrão # Uma interface em Kotlin pode ter implementações padrão para funções:
interface MyInterface { fun withImplementation() { print(&amp;quot;withImplementation() was called&amp;quot;) } } As classes que implementam essas interfaces poderão usar essas funções sem reimplementar
class MyClass: MyInterface { // No need to reimplement here } val instance = MyClass() instance.withImplementation() Propriedades # As implementações padrão também funcionam para getters e setters de propriedade:</description>
    </item>
    
    <item>
      <title>Métodos de extensão</title>
      <link>https://www.wikiod.com/pt/kotlin/metodos-de-extensao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/metodos-de-extensao/</guid>
      <description>Sintaxe # fun TypeName.extensionName(params, &amp;hellip;) { /* body */ } // Declaração fun &amp;lt;T: Any&amp;gt; TypeNameWithGenerics&amp;lt;T&amp;gt;.extensionName(params, &amp;hellip;) { /* body */ } // Declaração com Generics myObj.extensionName(args, &amp;hellip;) // invocação As extensões são resolvidas estaticamente. Isso significa que o método de extensão a ser usado é determinado pelo tipo de referência da variável que você está acessando; não importa qual seja o tipo da variável em tempo de execução, o mesmo método de extensão sempre será chamado.</description>
    </item>
    
    <item>
      <title>Extensões Kotlin para Android</title>
      <link>https://www.wikiod.com/pt/kotlin/extensoes-kotlin-para-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/extensoes-kotlin-para-android/</guid>
      <description>O Kotlin possui uma injeção de visualização integrada para Android, permitindo pular a vinculação manual ou a necessidade de estruturas como ButterKnife. Algumas das vantagens são uma sintaxe mais agradável, melhor tipagem estática e, portanto, menos propensa a erros.
Como usar visualizações # Supondo que tenhamos uma atividade com um layout de exemplo chamado activity_main.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt; &amp;lt;Button android:id=&amp;quot;@+id/my_button&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:text=&amp;quot;My button&amp;quot;/&amp;gt; &amp;lt;/LinearLayout&amp;gt; Podemos usar extensões Kotlin para chamar o botão sem qualquer ligação adicional, assim:</description>
    </item>
    
    <item>
      <title>Declarações Condicionais</title>
      <link>https://www.wikiod.com/pt/kotlin/declaracoes-condicionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/declaracoes-condicionais/</guid>
      <description>Em contraste com o switch do Java, a instrução when não tem comportamento de fall-through. Isso significa que, se uma ramificação for correspondida, o fluxo de controle retornará após sua execução e nenhuma instrução break será necessária. Se você quiser combinar os comportamentos para vários argumentos, você pode escrever vários argumentos separados por vírgulas:
when (x) { &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; -&amp;gt; println(&amp;quot;either foo or bar&amp;quot;) else -&amp;gt; println(&amp;quot;didn&#39;t match anything&amp;quot;) } Correspondência de argumentos de instruções quando # Quando dado um argumento, a instrução when corresponde ao argumento contra as ramificações em sequência.</description>
    </item>
    
    <item>
      <title>Exceções</title>
      <link>https://www.wikiod.com/pt/kotlin/excecoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/kotlin/excecoes/</guid>
      <description>Capturando exceção com try-catch-finally # Capturar exceções no Kotlin é muito semelhante ao Java
try { doSomething() } catch(e: MyException) { handle(e) } finally { cleanup() } Você também pode capturar várias exceções
try { doSomething() } catch(e: FileSystemException) { handle(e) } catch(e: NetworkException) { handle(e) } catch(e: MemoryException) { handle(e) } finally { cleanup() } try também é uma expressão e pode retornar valor
val s: String? = try { getString() } catch (e: Exception) { null } Kotlin não tem exceções verificadas, então você não precisa pegar nenhuma exceção.</description>
    </item>
    
  </channel>
</rss>

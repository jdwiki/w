<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de serviços da web da amazon on </title>
    <link>https://www.wikiod.com/pt/docs/amazon-web-services/</link>
    <description>Recent content in tutorial de serviços da web da amazon on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/amazon-web-services/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução aos serviços da web da Amazon</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/introducao-aos-servicos-da-web-da-amazon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/introducao-aos-servicos-da-web-da-amazon/</guid>
      <description>Antes que seja tarde demais # Dicas e truques para evitar situações desagradáveis
Instâncias EC2 e EBS
Definir funções do IAM. Ao contrário das tags, a função do IAM é definida de uma vez por todas na instanciação do EC2 (mesmo após 4 anos) ! Tente identificar e categorizar antecipadamente suas instâncias para que você possa atribuir a elas as funções apropriadas do IAM. As funções do IAM são uma boa maneira de identificar suas máquinas, elas permitem que a Amazon armazene automaticamente as credenciais do Instance Profile com segurança em suas máquinas e você poderá conceder privilégios extras facilmente.</description>
    </item>
    
    <item>
      <title>Implantar uma imagem de contêiner do Docker usando o ECS</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/implantar-uma-imagem-de-conteiner-do-docker-usando-o-ecs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/implantar-uma-imagem-de-conteiner-do-docker-usando-o-ecs/</guid>
      <description>Antes de adicionar instâncias do ECS a um cluster, você deve primeiro acessar o EC2 Management Console e criar instâncias ecs-optimized com uma função do IAM que tenha a política AmazonEC2ContainerServiceforEC2Role anexada.
Vá para o seu EC2 Dashboard e clique no botão Launch Instance.
Em Community AMIs, procure por ecs-optimized e selecione aquele que melhor atende às necessidades do seu projeto. Qualquer vai funcionar. Clique em próximo.
Quando chegar a Configure Instance Details, clique no create new IAM role link e crie uma nova função chamada ecsInstanceRole.</description>
    </item>
    
    <item>
      <title>Amazon Cognito</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/amazon-cognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/amazon-cognito/</guid>
      <description>Gerenciamento de identidade do usuário usando o Amazon Cognito # var app = {}; app.signUp = function(){ app.userName = $(&#39;#userName&#39;).val(); app.password = $(&#39;#password&#39;).val(); app.email = $(&#39;#form-email&#39;).val(); app.phoneNumber = $(&#39;#form-phone&#39;).val(); app.emailRegex = /^(([^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+)*)|(\&amp;quot;.+\&amp;quot;))@(([^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]+\.)+[^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]{2,})$/i; /* Put the User input validation logic here. */ if (!app.userName) { alert(&amp;quot;Please provide a user name&amp;quot;); return; } if (!app.password) { alert(&amp;quot;Please provide a password&amp;quot;); return; } if (!app.email) { alert(&amp;quot;Please provide an Email address&amp;quot;); return; } if(!</description>
    </item>
    
    <item>
      <title>AWS CloudFormation</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/aws-cloudformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/aws-cloudformation/</guid>
      <description>Script de amostra do CloudFormation para criar uma instância do EC2 junto com um grupo de segurança para associar. # Este exemplo criará uma instância do EC2 do tipo t2.micro na região N.Virginia executando o Amazon Linux. Durante a execução, ele pedirá para selecionar o KeyPair a ser usado e um I.P. CIDR de onde você pode SSH para a instância, use o padrão para tornar o SSH aberto para a Internet &amp;lt;pré&amp;gt;&amp;lt;código&amp;gt; { &amp;ldquo;AWSTemplateFormatVersion&amp;rdquo; : &amp;ldquo;2010-09-09&amp;rdquo;,</description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/aws-lambda/</guid>
      <description>O AWS Lambda é um serviço que permite executar código de back-end sem a necessidade de provisionar ou gerenciar servidores. O AWS Lambda cuida do dimensionamento e da alta disponibilidade. O custo depende diretamente da frequência e do tempo de execução do seu código.
Você encontrará exemplos de como criar e implantar funções do AWS Lambda em diferentes idiomas.
O código AWS Lambda deve ser escrito sem estado. Embora a instância de um lambda possa ser mantida e reutilizada, você nunca deve esperar isso.</description>
    </item>
    
    <item>
      <title>Amazon DynamoDB</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/amazon-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/amazon-dynamodb/</guid>
      <description>Operação Crud básica do DynamoDB usando NodeJS # &amp;lt;pré&amp;gt;&amp;lt;código&amp;gt; let doc = require(&amp;lsquo;dynamodb-doc&amp;rsquo;); deixe dínamo = new doc.DynamoDB(); var nometbl = &amp;ldquo;MinhaTabela&amp;rdquo;;
export.handler = (evento, contexto, retorno de chamada) =&amp;gt; { readOperation(context); }
function readOperation(cnxt) { var params = { TableName: tblName, Key: { &amp;ldquo;id&amp;rdquo;: &amp;ldquo;2013&amp;rdquo;, &amp;ldquo;topic&amp;rdquo;: &amp;ldquo;Turn It Down, Or Else!&amp;rdquo; }, AttributesToGet: [ &amp;ldquo;id&amp;rdquo;, &amp;ldquo;client_name&amp;rdquo;, &amp;ldquo;info&amp;rdquo; ], ConsistentRead: false }; dynamo.getItem(params, function(err, data) { if (err) console.log(&amp;ldquo;Error: &amp;ldquo;+err); // an error occurred else { var jsonDoc = JSON.</description>
    </item>
    
    <item>
      <title>Pé de Feijão Elástico</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/pe-de-feijao-elastico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/pe-de-feijao-elastico/</guid>
      <description>Limitações atuais (a partir de 2016-10-03)
As Tags de Ambiente não podem ser alteradas uma vez que o Ambiente é criado, então escolha sabiamente. O escalonamento automático no Elastic Beanstalk é limitado a Simple e Scheduled, portanto, se você deseja usar Step-Scaling, considere novamente se o Elastic Beanstalk é uma boa opção. Automação com Jenkins
Há um ótimo Plug-in de implantação do AWSEB para Jenkins que será plug-and-play para implantação no Elastic Beanstalk (implantações azul/verde com encerramento automático de inatividade estão a apenas uma caixa de seleção).</description>
    </item>
    
    <item>
      <title>Classe Raiz</title>
      <link>https://www.wikiod.com/pt/amazon-web-services/classe-raiz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/amazon-web-services/classe-raiz/</guid>
      <description>A classe raiz da API da Amazon é a seguinte. # public class AmazonRootobject { public Itemsearchresponse ItemSearchResponse { get; set; } } public class Itemsearchresponse { public string xmlns { get; set; } public Operationrequest OperationRequest { get; set; } public Items Items { get; set; } } public class Operationrequest { public Httpheaders HTTPHeaders { get; set; } public string RequestId { get; set; } public Arguments Arguments { get; set; } public string RequestProcessingTime { get; set; } } public class Httpheaders { public Header Header { get; set; } } public class Header { public string Name { get; set; } public string Value { get; set; } } public class Arguments { public Argument[] Argument { get; set; } } public class Argument { public string Name { get; set; } public object Value { get; set; } } public class Items { public Request Request { get; set; } public string TotalResults { get; set; } public string TotalPages { get; set; } public string MoreSearchResultsUrl { get; set; } public Item[] Item { get; set; } } public class Request { public string IsValid { get; set; } public Itemsearchrequest ItemSearchRequest { get; set; } } public class Itemsearchrequest { public string Keywords { get; set; } public string[] ResponseGroup { get; set; } public string SearchIndex { get; set; } public string Sort { get; set; } } public class Item { public string ASIN { get; set; } public string ParentASIN { get; set; } public string DetailPageURL { get; set; } public Itemlinks ItemLinks { get; set; } public Smallimage SmallImage { get; set; } public Mediumimage MediumImage { get; set; } public Largeimage LargeImage { get; set; } public Imagesets ImageSets { get; set; } public Itemattributes ItemAttributes { get; set; } public OfferSummary OfferSummary { get; set; } public Offers Offers { get; set; } public Variationsummary VariationSummary { get; set; } } public class Variationsummary { public Highestprice HighestPrice { get; set; } public Lowestprice LowestPrice { get; set; } public Highestsaleprice HighestSalePrice { get; set; } public Lowestsaleprice LowestSalePrice { get; set; } } public class Highestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Highestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Itemlinks { public Itemlink[] ItemLink { get; set; } } public class Itemlink { public string Description { get; set; } public string URL { get; set; } } public class Smallimage { public string URL { get; set; } public Height Height { get; set; } public Width Width { get; set; } } public class Height { public string Units { get; set; } public string text { get; set; } } public class Width { public string Units { get; set; } public string text { get; set; } } public class Mediumimage { public string URL { get; set; } public Height1 Height { get; set; } public Width1 Width { get; set; } } public class Height1 { public string Units { get; set; } public string text { get; set; } } public class Width1 { public string Units { get; set; } public string text { get; set; } } public class Largeimage { public string URL { get; set; } public Height2 Height { get; set; } public Width2 Width { get; set; } } public class Height2 { public string Units { get; set; } public string text { get; set; } } public class Width2 { public string Units { get; set; } public string text { get; set; } } public class Imagesets { public object ImageSet { get; set; } } public class Itemattributes { public string Binding { get; set; } public string Brand { get; set; } public string Color { get; set; } public string Model { get; set; } public string Manufacturer { get; set; } public string ProductGroup { get; set; } public string Title { get; set; } public ListPrice ListPrice { get; set; } } public class ListPrice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class OfferSummary { public Lowestnewprice LowestNewPrice { get; set; } public Lowestusedprice LowestUsedPrice { get; set; } public string TotalNew { get; set; } public string TotalUsed { get; set; } public string TotalCollectible { get; set; } public string TotalRefurbished { get; set; } public Lowestrefurbishedprice LowestRefurbishedPrice { get; set; } } public class Lowestnewprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestusedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestrefurbishedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Offers { public string TotalOffers { get; set; } public string TotalOfferPages { get; set; } public string MoreOffersUrl { get; set; } public Offer Offer { get; set; } } public class Offer { public Merchant Merchant { get; set; } public Offerattributes OfferAttributes { get; set; } public Offerlisting OfferListing { get; set; } } public class Merchant { public string Name { get; set; } } public class Offerattributes { public string Condition { get; set; } } public class Offerlisting { public string OfferListingId { get; set; } public string PricePerUnit { get; set; } public Price Price { get; set; } public string Availability { get; set; } public Availabilityattributes AvailabilityAttributes { get; set; } public string IsEligibleForSuperSaverShipping { get; set; } public string IsEligibleForPrime { get; set; } public Saleprice SalePrice { get; set; } public Amountsaved AmountSaved { get; set; } public string PercentageSaved { get; set; } } public class Price { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Availabilityattributes { public string AvailabilityType { get; set; } public string MinimumHours { get; set; } public string MaximumHours { get; set; } } public class Saleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Amountsaved { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } Classe executiva # using System; using System.</description>
    </item>
    
  </channel>
</rss>

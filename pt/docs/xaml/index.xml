<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xaml Tutorial on </title>
    <link>https://www.wikiod.com/pt/docs/xaml/</link>
    <description>Recent content in xaml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/xaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao xaml</title>
      <link>https://www.wikiod.com/pt/xaml/introducao-ao-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/introducao-ao-xaml/</guid>
      <description>Instalação ou configuração # A maneira mais fácil de escrever seu primeiro XAML é instalar o Microsoft Visual Studio. Isso está disponível gratuitamente na Microsoft.
Uma vez instalado, você pode criar um novo projeto, do tipo WPF Application, seja com um código VB.NET ou C#.
Isso é semelhante aos formulários do Windows no sentido de que você tem uma série de janelas, a principal diferença é que essas janelas são escritas em XAML e são muito mais responsivas a diferentes dispositivos.</description>
    </item>
    
    <item>
      <title>Conversores</title>
      <link>https://www.wikiod.com/pt/xaml/conversores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/conversores/</guid>
      <description>Parâmetros # Parâmetro Detalhes valor O valor a ser convertido de targetType O tipo que está sendo convertido para parâmetro Valor opcional para controlar como a conversão funciona cultura Objeto CultureInfo - obrigatório se a localização for necessária O método Convert converte o valor da fonte (geralmente o modelo de exibição) para o destino (geralmente uma propriedade de um controle).
O método ConvertBack converte o valor do destino de volta para a origem.</description>
    </item>
    
    <item>
      <title>Diferenças nos vários dialetos XAML</title>
      <link>https://www.wikiod.com/pt/xaml/diferencas-nos-varios-dialetos-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/diferencas-nos-varios-dialetos-xaml/</guid>
      <description>XAML é usado em aplicativos Silverlight, Windows Phone, Windows RT e UWP. Compartilhar código ou converter código entre eles às vezes é mais difícil do que o desejável devido a diferenças sutis entre os vários dialetos XAML. Este tópico se esforça para fornecer uma visão geral dessas diferenças com uma breve explicação.
Vinculações de dados compilados: A extensão de marcação {x:Bind} # Databings são essenciais para trabalhar com XAML. O dialeto XAML para aplicativos UWP fornece um tipo de associação: a extensão de marcação {x:Bind}.</description>
    </item>
    
    <item>
      <title>Ligação de dados</title>
      <link>https://www.wikiod.com/pt/xaml/ligacao-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/ligacao-de-dados/</guid>
      <description>Sintaxe # &amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt;
&amp;lt;TextBlock Text=&amp;quot;{Binding Path=Title}&amp;quot;/&amp;gt;
&amp;lt;TextBlock&amp;gt; &amp;lt;TextBlock.Text&amp;gt; &amp;lt;Binding Path=&amp;quot;Title&amp;quot;/&amp;gt; &amp;lt;/TextBlock.Text&amp;gt; &amp;lt;/TextBlock&amp;gt;
Todas essas tags produzem o mesmo resultado.
String de ligação à propriedade Text # Para alterar o conteúdo da interface do usuário em tempo de execução, você pode usar Binding. Quando a propriedade vinculada é alterada do código, ela será exibida na interface do usuário.
&amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt; Para notificar a UI sobre mudanças, a propriedade deve gerar o evento PropertyChanged da interface INotifyPropertyChanged ou você pode usar Dependency Property.</description>
    </item>
    
    <item>
      <title>Controles de layout</title>
      <link>https://www.wikiod.com/pt/xaml/controles-de-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/controles-de-layout/</guid>
      <description>Rede # Grid é usado para criar layouts de tabela.
Definições básicas de linhas e colunas # &amp;lt;Grid&amp;gt; &amp;lt;!-- Define 3 columns with width of 100 --&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;!-- Define 3 rows with height of 50 --&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- This is placed at the top left (first row, first column) --&amp;gt; &amp;lt;Button Grid.Column=&amp;quot;0&amp;quot; Grid.Row=&amp;quot;0&amp;quot; Content=&amp;quot;Top Left&amp;quot;/&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Modelos de dados</title>
      <link>https://www.wikiod.com/pt/xaml/modelos-de-dados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/modelos-de-dados/</guid>
      <description>Usando DataTemplate em um ListBox # Suponha que temos o seguinte snippet XAML:
&amp;lt;ListBox x:Name=&amp;quot;MyListBox&amp;quot; /&amp;gt; Em seguida, no code-behind desse arquivo XAML, escrevemos o seguinte no construtor:
MyListBox.ItemsSource = new[] { 1, 2, 3, 4, 5 }; Executando o aplicativo, obtemos uma lista de números que inserimos.
No entanto, se tentarmos exibir uma lista de objetos de um tipo personalizado, como este
MyListBox.ItemsSource = new[] { new Book { Title = &amp;quot;The Hitchhiker&#39;s Guide to the Galaxy&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;The Restaurant at the End of the Universe&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;Life, the Universe and Everything&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;So Long, and Thanks for All the Fish&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;Mostly Harmless&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; } }; assumindo que temos uma classe chamada Book</description>
    </item>
    
    <item>
      <title>Ferramentas de desenvolvimento XAML</title>
      <link>https://www.wikiod.com/pt/xaml/ferramentas-de-desenvolvimento-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/ferramentas-de-desenvolvimento-xaml/</guid>
      <description>Microsoft Visual Studio e Microsoft Expression Blend # Crie interfaces de usuário envolventes para aplicativos da área de trabalho do Windows com o Blend for Visual Studio, a principal ferramenta de design profissional para aplicativos XAML. Crie belas transições e visualizações usando o conjunto completo de ferramentas de desenho vetorial do Blend, poderosos recursos de edição de modelos, animação em tempo real, gerenciamento de estado visual e muito mais.
Baixe o Visual Studio</description>
    </item>
    
    <item>
      <title>Trabalhando com arquivos XAML personalizados</title>
      <link>https://www.wikiod.com/pt/xaml/trabalhando-com-arquivos-xaml-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/trabalhando-com-arquivos-xaml-personalizados/</guid>
      <description>Lendo um objeto de XAML # Considere que uma estrutura das seguintes classes deve ser construída em XAML e depois lida em um objeto CLR:
namespace CustomXaml { public class Test { public string Value { get; set; } public List&amp;lt;TestChild&amp;gt; Children { get; set; } = new List&amp;lt;TestChild&amp;gt;(); } public class TestChild { public string StringValue { get; set; } public int IntValue { get; set; } } } As classes não devem ter construtor explícito ou fornecer um construtor vazio.</description>
    </item>
    
    <item>
      <title>Modelos de controle</title>
      <link>https://www.wikiod.com/pt/xaml/modelos-de-controle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/xaml/modelos-de-controle/</guid>
      <description>Modelos de controle # As interfaces de usuário padrão para controles WPF são normalmente construídas a partir de outros controles e formas. Por exemplo, um Button é composto pelos controles ButtonChrome e ContentPresenter. O ButtonChrome fornece a aparência padrão do botão, enquanto o ContentPresenter exibe o conteúdo do botão, conforme especificado pela propriedade Content. Às vezes, a aparência padrão de um controle pode ser incongruente com a aparência geral de um aplicativo.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial asp.net-core on </title>
    <link>https://www.wikiod.com/pt/docs/asp-dotnet-core/</link>
    <description>Recent content in Tutorial asp.net-core on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/asp-dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com asp.net-core</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/comecando-com-aspnet-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/comecando-com-aspnet-core/</guid>
      <description>Instalação e configuração # Instalando o Visual Studio # Se você não tiver o Visual Studio instalado, você pode baixar o Visual Studio Community Edition gratuito aqui. Se você já o tiver instalado, poderá prosseguir para a próxima etapa.
Criando um aplicativo ASP.NET Core MVC. # Abra o Visual Studio. Selecione Arquivo &amp;gt; Novo Projeto. Selecione Web no idioma de sua escolha na seção Modelos à esquerda. Escolha um tipo de projeto preferido na caixa de diálogo.</description>
    </item>
    
    <item>
      <title>Injeção de dependência</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/injecao-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/injecao-de-dependencia/</guid>
      <description>O núcleo do Aspnet é construído com injeção de dependência como um de seus principais conceitos principais. Ele apresenta uma abstração de contêiner em conformidade para que você possa substituir o interno por um contêiner de terceiros de sua escolha.
Sintaxe # IServiceCollection.Add(ServiceDescriptor item); IServiceCollection.AddScoped(Type serviceType); IServiceCollection.AddScoped(Tipo tipo de serviço, Tipo de implementação); IServiceCollection.AddScoped(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; deploymentFactory); IServiceCollection.AddScoped&amp;lt;TService&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; deploymentFactory) IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;(Func&amp;lt;IServiceProvider, TImplementation&amp;gt; deploymentFactory) IServiceCollection.AddSingleton(Tipo tipo de serviço); IServiceCollection.</description>
    </item>
    
    <item>
      <title>Limitação de taxa</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/limitacao-de-taxa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/limitacao-de-taxa/</guid>
      <description>AspNetCoreRateLimit é uma solução de limitação de taxa ASP.NET Core de código aberto projetada para controlar a taxa de solicitações que os clientes podem fazer a uma API Web ou aplicativo MVC com base no endereço IP ou ID do cliente.
Limitação de taxa com base no ID do cliente # Com o middleware ClientRateLimit, você pode definir vários limites para diferentes cenários, como permitir que um cliente faça um número máximo de chamadas em um intervalo de tempo como por segundo, 15 minutos, etc.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Registrar Solicitação e Resposta usando Middleware</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/aspnet-core---registrar-solicitacao-e-resposta-usando-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/aspnet-core---registrar-solicitacao-e-resposta-usando-middleware/</guid>
      <description>Há algum tempo venho pesquisando a melhor forma de registrar requisições e respostas em um ASP.Net Core. Eu estava desenvolvendo serviços e um dos requisitos era registrar a solicitação com sua resposta em um registro do banco de dados. Tantos tópicos por aí, mas nenhum funcionou para mim. é apenas para solicitação, apenas resposta ou simplesmente não funcionou. Quando finalmente consegui fazê-lo, e ele evoluiu durante o meu projeto para melhor tratamento de erros e registro de exceções, pensei em compartilhar.</description>
    </item>
    
    <item>
      <title>Agrupamento e Minificação</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/agrupamento-e-minificacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/agrupamento-e-minificacao/</guid>
      <description>Extensão de Bundler e Minifier # O Visual Studio também apresenta um Bundler and Minifier Extension disponível que é capaz de lidar com esse processo para você. A extensão permite selecionar e agrupar facilmente os arquivos necessários sem escrever uma linha de código.
Construindo seus pacotes # Depois de instalar a extensão, você seleciona todos os arquivos específicos que deseja incluir em um bundle e usa a opção Bundle and Miniify Files da extensão :</description>
    </item>
    
    <item>
      <title>Angular2 e .Net Core</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/angular2-e-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/angular2-e-net-core/</guid>
      <description>Tutorial rápido para um Angular 2 Hello World! Aplicativo com .Net Core no Visual Studio 2015 # Passos:
Crie um aplicativo Web .Net Core vazio: Vá para wwwroot e crie uma página html normal chamada Index.html: Configure o Startup.cs para aceitar arquivos estáticos (isso exigirá a adição da biblioteca &amp;ldquo;Microsoft.AspNetCore.StaticFiles&amp;rdquo;: &amp;ldquo;1.0.0&amp;rdquo; no arquivo &amp;ldquo;project.json&amp;rdquo;): Adicionar arquivo NPN:
Right click the WebUi project and add NPN Configuration File (package.json): Verify the last versions of the packages: Note: If visual studio does not detect the versions of the packages (Check all packages, because some of them does show the version, and some others don&amp;rsquo;t), it might be because the Node version coming in visual studio is not working correctly, so it will probably require to install node js externally and then link that installation with visual studio.</description>
    </item>
    
    <item>
      <title>Configurando vários ambientes</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/configurando-varios-ambientes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/configurando-varios-ambientes/</guid>
      <description>Tendo appsettings por ambiente # Para cada ambiente, você precisa criar um arquivo appsettings.{EnvironmentName}.json separado:
appsettings.Development.json appsettings.Staging.json appsettings.Production.json Em seguida, abra o arquivo project.json e inclua-os em &amp;ldquo;incluir&amp;rdquo; na seção &amp;ldquo;publishOptions&amp;rdquo;. Isso lista todos os arquivos e pastas que serão incluídos quando você publicar:
&amp;quot;publishOptions&amp;quot;: { &amp;quot;include&amp;quot;: [ &amp;quot;appsettings.Development.json&amp;quot;, &amp;quot;appsettings.Staging.json&amp;quot;, &amp;quot;appsettings.Production.json&amp;quot; ... ] } O passo final. Na sua classe de inicialização, adicione:
.AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true); no construtor onde você configura as fontes de configuração:</description>
    </item>
    
    <item>
      <title>Localização</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/localizacao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/localizacao/</guid>
      <description>Localização usando recursos de linguagem JSON # No ASP.NET Core, existem várias maneiras diferentes de localizar/globalizar nosso aplicativo. É importante escolher uma maneira que se adapte às suas necessidades. Neste exemplo, você verá como podemos criar um aplicativo ASP.NET Core multilíngue que lê strings específicas de idioma de arquivos .json e os armazena na memória para fornecer localização em todas as seções do aplicativo, além de manter um alto desempenho .</description>
    </item>
    
    <item>
      <title>Exploração madeireira</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/exploracao-madeireira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/exploracao-madeireira/</guid>
      <description>Adicionar registrador ao controlador # Em vez de solicitar um ILoggerFactory e criar uma instância de ILogger explicitamente, você pode solicitar um ILogger (onde T é a classe que solicita o logger).
public class TodoController : Controller { private readonly ILogger _logger; public TodoController(ILogger&amp;lt;TodoController&amp;gt; logger) { _logger = logger; } } Usando o NLog Logger # NLog.Extensions.Logging é o provedor NLog oficial da Microsoft em .NET Core e ASP.NET Core. Aqui e aqui são instruções e exemplos, respectivamente.</description>
    </item>
    
    <item>
      <title>Enviando e-mail em aplicativos .Net Core usando MailKit</title>
      <link>https://www.wikiod.com/pt/asp-dotnet-core/enviando-e-mail-em-aplicativos-net-core-usando-mailkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/asp-dotnet-core/enviando-e-mail-em-aplicativos-net-core-usando-mailkit/</guid>
      <description>Atualmente .Net Core não inclui suporte para enviar e-mails como System.Net.Mail de .Net. Projeto MailKit (que está disponível em nuget) é uma boa biblioteca para essa finalidade.
Implementação simples para envio de e-mails # using MailKit.Net.Smtp; using MimeKit; using MimeKit.Text; using System.Threading.Tasks; namespace Project.Services { /// Using a static class to store sensitive credentials /// for simplicity. Ideally these should be stored in /// configuration files public static class Constants { public static string SenderName =&amp;gt; &amp;quot;&amp;lt;sender_name&amp;gt;&amp;quot;; public static string SenderEmail =&amp;gt; &amp;quot;&amp;lt;sender_email&amp;gt;&amp;quot;; public static string EmailPassword =&amp;gt; &amp;quot;email_password&amp;quot;; public static string SmtpHost =&amp;gt; &amp;quot;&amp;lt;smtp_host&amp;gt;&amp;quot;; public static int SmtpPort =&amp;gt; &amp;quot;smtp_port&amp;quot;; } public class EmailService : IEmailSender { public Task SendEmailAsync(string recipientEmail, string subject, string message) { MimeMessage mimeMessage = new MimeMessage(); mimeMessage.</description>
    </item>
    
  </channel>
</rss>

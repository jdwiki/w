<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial pthreads on </title>
    <link>https://www.wikiod.com/pt/docs/pthreads/</link>
    <description>Recent content in Tutorial pthreads on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/pthreads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com pthreads</title>
      <link>https://www.wikiod.com/pt/pthreads/comecando-com-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pthreads/comecando-com-pthreads/</guid>
      <description>Instalação ou Configuração # Instruções detalhadas sobre como configurar ou instalar pthreads.
&amp;ldquo;Hello World&amp;rdquo; mínimo com pthreads # #include &amp;lt;pthread.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; /* function to be run as a thread always must have the same signature: it has one void* parameter and returns void */ void *threadfunction(void *arg) { printf(&amp;quot;Hello, World!\n&amp;quot;); /*printf() is specified as thread-safe as of C11*/ return 0; } int main(void) { pthread_t thread; int createerror = pthread_create(&amp;amp;thread, NULL, threadfunction, NULL); /*creates a new thread with default attributes and NULL passed as the argument to the start routine*/ if (!</description>
    </item>
    
    <item>
      <title>Variáveis ​​Condicionais</title>
      <link>https://www.wikiod.com/pt/pthreads/variaveis-condicionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pthreads/variaveis-condicionais/</guid>
      <description>As variáveis ​​condicionais são úteis nos casos em que você deseja que um encadeamento espere por algo que aconteça em outro encadeamento. Por exemplo, em um cenário produtor/consumidor com um ou mais encadeamentos de produção e um encadeamento consumidor, variáveis ​​condicionais podem ser usadas para sinalizar ao encadeamento consumidor que novos dados estão disponíveis.
Processo geral
Uma espera em uma variável condicional (queueCond no exemplo do produtor/consumidor) é sempre acoplada a um mutex (o queueMutex no exemplo do produtor/consumidor) e deve sempre ser acoplada a uma variável de estado &amp;ldquo;normal&amp;rdquo; também (queue.</description>
    </item>
    
    <item>
      <title>Condição de corrida em pthreads</title>
      <link>https://www.wikiod.com/pt/pthreads/condicao-de-corrida-em-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/pthreads/condicao-de-corrida-em-pthreads/</guid>
      <description>Ao escrever aplicativos multithread, um dos problemas mais comuns são as condições de corrida. Então, documentamos o Como você os detecta? e como você lida com eles?
Exemplo: Considere que terá duas threads T1 e T2. # Como você os detecta?
Se a mesma variável/recurso/local de memória for acessível por vários encadeamentos e pelo menos o encadeamento estiver alterando o valor de variável/recurso/local de memória, então Condição de corrida pode ocorrer.</description>
    </item>
    
  </channel>
</rss>

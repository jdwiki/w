<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de gwt on </title>
    <link>https://www.wikiod.com/pt/docs/gwt/</link>
    <description>Recent content in tutorial de gwt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/gwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao gwt</title>
      <link>https://www.wikiod.com/pt/gwt/introducao-ao-gwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gwt/introducao-ao-gwt/</guid>
      <description>Instalação # Baixe e descompacte o GWT SDK. Ele contém as bibliotecas principais, o compilador e o servidor de desenvolvimento necessários para escrever aplicativos da Web.
No Windows, extraia os arquivos da pasta compactada gwt-2.7.0.zip. No Mac ou Linux, você pode descompactar o pacote com um comando como:
unzip gwt-2.7.0.zip O GWT SDK não possui um aplicativo instalador. Todos os arquivos necessários para executar e usar o SDK estão localizados no diretório extraído.</description>
    </item>
    
    <item>
      <title>Comunicação do lado do servidor com RestyGwt</title>
      <link>https://www.wikiod.com/pt/gwt/comunicacao-do-lado-do-servidor-com-restygwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gwt/comunicacao-do-lado-do-servidor-com-restygwt/</guid>
      <description>Como o RestyGWT é um gerador de GWT, ele criará automaticamente a implementação de sua interface de cliente. Nos bastidores, ele usará a classe RequestBuilder para implementar suas chamadas.
Definindo e usando seu cliente REST # Você já deve ter seu recurso REST de back-end disponível. No lado do cliente (GWT) sua necessidade de
Adicione a dependência RestyGwt ao seu projeto com maven
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.fusesource.restygwt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;restygwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Adicione a herança ao seu arquivo de módulo</description>
    </item>
    
    <item>
      <title>Uso de eventos com HandlerManager</title>
      <link>https://www.wikiod.com/pt/gwt/uso-de-eventos-com-handlermanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/gwt/uso-de-eventos-com-handlermanager/</guid>
      <description>Sintaxe de uso de evento simples e EventHandler # HandlderManager fornecendo:
public class HandlerManagerProvider { private static HandlerManager handlerManager; private HandlerManagerProvider() { } public static HandlerManager get() { return handlerManager != null ? handlerManager : (handlerManager = new HandlerManager(null)); } } Manipulador de eventos:
import com.google.gwt.event.shared.EventHandler; public interface CustomEventHandler extends EventHandler { void doMyAction(CustomEvent event); } Evento:
import com.google.gwt.event.shared.GwtEvent; public class CustomEvent extends GwtEvent&amp;lt;CustomEventHandler&amp;gt; { public static final Type&amp;lt;CustomEventHandler&amp;gt; TYPE = new Type&amp;lt;&amp;gt;(); @Override public Type&amp;lt;CustomEventHandler&amp;gt; getAssociatedType() { return TYPE; } @Override protected void dispatch(CustomEventHandler) { handler.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial SQL on </title>
    <link>https://www.wikiod.com/pt/docs/sql/</link>
    <description>Recent content in Tutorial SQL on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao SQL</title>
      <link>https://www.wikiod.com/pt/sql/introducao-ao-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/introducao-ao-sql/</guid>
      <description>Visão geral # Structured Query Language (SQL) é uma linguagem de programação de propósito especial projetada para gerenciar dados mantidos em um Sistema de Gerenciamento de Banco de Dados Relacional (RDBMS). As linguagens do tipo SQL também podem ser usadas em sistemas de gerenciamento de fluxo de dados relacionais (RDSMS) ou em bancos de dados &amp;ldquo;não somente SQL&amp;rdquo; (NoSQL).
O SQL é composto por 3 sublinguagens principais:
Linguagem de Definição de Dados (DDL): para criar e modificar a estrutura do banco de dados; Linguagem de Manipulação de Dados (DML): para realizar operações de leitura, inserção, atualização e exclusão nos dados do banco de dados; Linguagem de Controle de Dados (DCL): para controlar o acesso dos dados armazenados no banco de dados.</description>
    </item>
    
    <item>
      <title>SELECIONAR</title>
      <link>https://www.wikiod.com/pt/sql/selecionar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/selecionar/</guid>
      <description>A instrução SELECT está no centro da maioria das consultas SQL. Ele define qual conjunto de resultados deve ser retornado pela consulta e é quase sempre usado em conjunto com a cláusula FROM, que define quais partes do banco de dados devem ser consultadas.
Sintaxe # SELECIONE [DISTINTO] [coluna1] [, [coluna2] &amp;hellip; ] DE [tabela] [ ONDE condição ] [ AGRUPAR POR [coluna1] [, [coluna2] &amp;hellip; ] [ TENDO [coluna1] [, [coluna2] &amp;hellip; ]</description>
    </item>
    
    <item>
      <title>JUNTE</title>
      <link>https://www.wikiod.com/pt/sql/junte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/junte/</guid>
      <description>JOIN é um método de combinar (unir) informações de duas tabelas. O resultado é um conjunto costurado de colunas de ambas as tabelas, definido pelo tipo de junção (INNER/OUTER/CROSS e LEFT/RIGHT/FULL, explicado abaixo) e critérios de junção (como as linhas de ambas as tabelas se relacionam).
Uma tabela pode ser unida a si mesma ou a qualquer outra tabela. Se as informações de mais de duas tabelas precisarem ser acessadas, várias junções podem ser especificadas em uma cláusula FROM.</description>
    </item>
    
    <item>
      <title>Bancos de dados e tabelas de exemplo</title>
      <link>https://www.wikiod.com/pt/sql/bancos-de-dados-e-tabelas-de-exemplo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/bancos-de-dados-e-tabelas-de-exemplo/</guid>
      <description>Banco de dados da loja de automóveis # No exemplo a seguir - Banco de dados para uma loja de automóveis, temos uma lista de departamentos, funcionários, clientes e carros de clientes. Estamos usando chaves estrangeiras para criar relacionamentos entre as várias tabelas.
Exemplo ao vivo: violino SQL
Relacionamentos entre tabelas # Cada Departamento pode ter 0 ou mais Colaboradores Cada Funcionário pode ter 0 ou 1 Gerente Cada Cliente pode ter 0 ou mais Carros Departamentos # ID Nome 1 RH 2 Vendas 3 Tecnologia Instruções SQL para criar a tabela:</description>
    </item>
    
    <item>
      <title>Funções de string</title>
      <link>https://www.wikiod.com/pt/sql/funcoes-de-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/funcoes-de-string/</guid>
      <description>As funções de string executam operações em valores de string e retornam valores numéricos ou de string.
Usando funções de string, você pode, por exemplo, combinar dados, extrair uma substring, comparar strings ou converter uma string para todos os caracteres maiúsculos ou minúsculos.
Sintaxe # CONCAT ( string_value1, string_value2 [, string_valueN ] ) LTRIM (expressão_caractere ) RTRIM (expressão_caractere ) SUBSTRING (expressão, início, comprimento) ASCII (expressão_caractere) REPLICATE ( string_expression ,integer_expression ) REVERSE ( string_expression ) SUPERIOR (expressão_caractere) TRIM (string [caracteres FROM]) STRING_SPLIT ( string , separador ) STUFF ( character_expression , start , length , replaceWith_expression ) REPLACE ( string_expression , string_pattern , string_replacement ) Referência de funções de string para Transact-SQL/Microsoft</description>
    </item>
    
    <item>
      <title>CASO</title>
      <link>https://www.wikiod.com/pt/sql/caso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/caso/</guid>
      <description>A expressão CASE é usada para implementar a lógica if-then.
Sintaxe # CASE expressão_entrada QUANDO comparar1 ENTÃO resultado1 [QUANDO comparar2 ENTÃO resultado2]&amp;hellip; [ELSE resultadoX] FIM CASO QUANDO condição1 ENTÃO resultado1 [QUANDO condição2 ENTÃO resultado2]&amp;hellip; [ELSE resultadoX] FIM A expressão CASE simples retorna o primeiro resultado cujo valor compareX é igual à expressão_entrada.
A expressão CASE pesquisada retorna o primeiro resultado cujo conditionX é verdadeiro.
Use CASE para COUNT o número de linhas em uma coluna que correspondem a uma condição.</description>
    </item>
    
    <item>
      <title>Filtre os resultados usando WHERE e HAVING</title>
      <link>https://www.wikiod.com/pt/sql/filtre-os-resultados-usando-where-e-having/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/filtre-os-resultados-usando-where-e-having/</guid>
      <description>Sintaxe # SELECT nome_da_coluna FROM nome_da_tabela WHERE valor do operador nome_da_coluna SELECT nome_da_coluna, função_agregada (nome_da_coluna) FROM nome_da_tabela GROUP BY nome_da_coluna HAVING valor do operador de função_agregada (nome_da_coluna) Use BETWEEN para filtrar resultados # Os exemplos a seguir usam os bancos de dados de amostra Item Sales e Customers.
Nota: O operador BETWEEN é inclusivo.
Usando o operador BETWEEN com números:
SELECT * From ItemSales WHERE Quantity BETWEEN 10 AND 17 Esta consulta retornará todos os registros ItemSales que possuem uma quantidade maior ou igual a 10 e menor ou igual a 17.</description>
    </item>
    
    <item>
      <title>Injeção SQL</title>
      <link>https://www.wikiod.com/pt/sql/injecao-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/injecao-sql/</guid>
      <description>A injeção de SQL é uma tentativa de acessar as tabelas de banco de dados de um site injetando SQL em um campo de formulário. Se um servidor web não protege contra ataques de injeção de SQL, um hacker pode enganar o banco de dados para executar o código SQL adicional. Ao executar seu próprio código SQL, os hackers podem atualizar o acesso à conta, visualizar as informações privadas de outra pessoa ou fazer qualquer outra modificação no banco de dados.</description>
    </item>
    
    <item>
      <title>UNIÃO  UNIÃO TODOS</title>
      <link>https://www.wikiod.com/pt/sql/uniao--uniao-todos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/uniao--uniao-todos/</guid>
      <description>A palavra-chave UNION no SQL é usada para combinar os resultados da instrução SELECT sem qualquer duplicata.
Para usar UNION e combinar resultados, ambas as instruções SELECT devem ter o mesmo número de colunas com o mesmo tipo de dados na mesma ordem, mas o comprimento da coluna pode ser diferente.
Sintaxe # SELECT column_1 [, column_2 ] FROM table_1 [, table_2 ] [WHERE condição] UNIÃO | UNIÃO TODOS SELECT column_1 [, column_2 ] FROM table_1 [, table_2 ] [WHERE condição] As cláusulas UNION e UNION ALL combinam o conjunto de resultados de duas ou mais instruções SELECT estruturadas de forma idêntica em um único resultado/tabela.</description>
    </item>
    
    <item>
      <title>CRIAR A TABELA</title>
      <link>https://www.wikiod.com/pt/sql/criar-a-tabela/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/sql/criar-a-tabela/</guid>
      <description>A instrução CREATE TABLE é usada para criar uma nova tabela no banco de dados. Uma definição de tabela consiste em uma lista de colunas, seus tipos e quaisquer restrições de integridade.
Sintaxe # CREATE TABLE tableName( [ColumnName1] [datatype1] [, [ColumnName2] [datatype2] &amp;hellip;] ) Parâmetros # Parâmetro Detalhes tableName O nome da tabela colunas Contém uma &amp;rsquo;enumeração&amp;rsquo; de todas as colunas que a tabela possui. Consulte Criar uma nova tabela para obter mais detalhes.</description>
    </item>
    
  </channel>
</rss>

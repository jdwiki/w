<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial do Entity Framework on </title>
    <link>https://www.wikiod.com/pt/docs/entity-framework/</link>
    <description>Recent content in Tutorial do Entity Framework on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/entity-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introdução ao Entity Framework</title>
      <link>https://www.wikiod.com/pt/entity-framework/introducao-ao-entity-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/introducao-ao-entity-framework/</guid>
      <description>Instalando o pacote NuGet do Entity Framework # Em seu Visual Studio, abra a janela Solution Explorer e clique com o botão direito em seu projeto e escolha Gerenciar Pacotes NuGet no menu:
Na janela que se abre, digite EntityFramework na caixa de pesquisa no canto superior direito.
Ou se você estiver usando o Visual Studio 2015, verá algo assim:
Em seguida, clique em Instalar.
Também podemos instalar o framework de entidade usando o console do gerenciador de pacotes.</description>
    </item>
    
    <item>
      <title>Rastreamento vs. Sem Rastreamento</title>
      <link>https://www.wikiod.com/pt/entity-framework/rastreamento-vs-sem-rastreamento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/rastreamento-vs-sem-rastreamento/</guid>
      <description>O comportamento de rastreamento controla se o Entity Framework manterá ou não informações sobre uma instância de entidade em seu rastreador de alterações. Se uma entidade for rastreada, quaisquer alterações detectadas na entidade serão mantidas no banco de dados durante SaveChanges().
Consultas sem rastreamento # Nenhuma consulta de rastreamento é útil quando os resultados são usados ​​em um cenário somente leitura Eles são mais rápidos de executar porque não há necessidade de configurar a mudança informações de rastreamento Exemplo :</description>
    </item>
    
    <item>
      <title>Carregando entidades relacionadas</title>
      <link>https://www.wikiod.com/pt/entity-framework/carregando-entidades-relacionadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/carregando-entidades-relacionadas/</guid>
      <description>Se os modelos estiverem relacionados corretamente, você poderá carregar facilmente os dados relacionados usando o EntityFramework. Você tem três opções para escolher: carregamento lento, carregamento antecipado e carregamento explícito.
Modelos usados ​​nos exemplos:
public class Company { public int Id { get; set; } public string FullName { get; set; } public string ShortName { get; set; } // Navigation properties public virtual Person Founder { get; set; } public virtual ICollection&amp;lt;Address&amp;gt; Addresses { get; set; } } public class Address { public int Id { get; set; } public int CompanyId { get; set; } public int CountryId { get; set; } public int CityId { get; set; } public string Street { get; set; } // Navigation properties public virtual Company Company { get; set; } public virtual Country Country { get; set; } public virtual City City { get; set; } } Carregamento ansioso # Eager loading permite carregar todas as entidades necessárias de uma só vez.</description>
    </item>
    
    <item>
      <title>Práticas recomendadas para o Entity Framework (simples e profissional)</title>
      <link>https://www.wikiod.com/pt/entity-framework/praticas-recomendadas-para-o-entity-framework-simples-e-profissional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/praticas-recomendadas-para-o-entity-framework-simples-e-profissional/</guid>
      <description>Este artigo apresenta uma prática simples e profissional para usar o Entity Framework.
Simples: porque só precisa de uma classe (com uma interface)
Profissional: porque aplica princípios de arquitetura SOLID
Não quero falar mais&amp;hellip; vamos aproveitar!
1- Entity Framework @ Camada de dados (Básico) # Neste artigo usaremos um banco de dados simples chamado “Empresa” com duas tabelas:
[dbo].[Categorias]([CategoryID], [CategoryName])
[dbo].[Produtos]([ProductID], [CategoryID], [ProductName])
1-1 Gerar código do Entity Framework
Nesta camada geramos o código do Entity Framework (na biblioteca do projeto) (veja este artigo em como você pode fazer isso) então você terá as seguintes classes</description>
    </item>
    
    <item>
      <title>Code First DataAnotações</title>
      <link>https://www.wikiod.com/pt/entity-framework/code-first-dataanotacoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/code-first-dataanotacoes/</guid>
      <description>O Entity Framework Code-First fornece um conjunto de atributos DataAnnotation, que você pode aplicar às suas classes e propriedades de domínio. Os atributos DataAnnotation substituem as convenções de Code-First padrão.
System.ComponentModel.DataAnnotations inclui atributos que afetam a nulidade ou o tamanho da coluna. O namespace System.ComponentModel.DataAnnotations.Schema inclui atributos que afetam o esquema do banco de dados. Observação: DataAnnotations fornece apenas um subconjunto de opções de configuração. A API Fluent fornece um conjunto completo de opções de configuração disponíveis no Code-First.</description>
    </item>
    
    <item>
      <title>Técnicas de Otimização em EF</title>
      <link>https://www.wikiod.com/pt/entity-framework/tecnicas-de-otimizacao-em-ef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/tecnicas-de-otimizacao-em-ef/</guid>
      <description>Usando AsNoTracking # Mau exemplo:
var location = dbContext.Location .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; Como o código acima está simplesmente retornando uma entidade sem modificá-la ou adicioná-la, podemos evitar o custo de rastreamento.
Bom exemplo:
var location = dbContext.Location.AsNoTracking() .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; Quando usamos a função AsNoTracking() estamos dizendo explicitamente ao Entity Framework que as entidades não são rastreadas pelo contexto. Isso pode ser especialmente útil ao recuperar grandes quantidades de dados de seu armazenamento de dados.</description>
    </item>
    
    <item>
      <title>Convenções do Code First</title>
      <link>https://www.wikiod.com/pt/entity-framework/convencoes-do-code-first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/convencoes-do-code-first/</guid>
      <description>Convenção é um conjunto de regras padrão para configurar automaticamente um modelo conceitual baseado em definições de classe de domínio ao trabalhar com Code-First. As convenções Code-First são definidas no namespace System.Data.Entity.ModelConfiguration.Conventions (EF 5 &amp;amp; EF 6).
Removendo convenções # Você pode remover qualquer uma das convenções definidas no namespace System.Data.Entity.ModelConfiguration.Conventions, substituindo o método OnModelCreating.
O exemplo a seguir remove PluralizingTableNameConvention.
public class EshopContext : DbContext { public DbSet&amp;lt;Product&amp;gt; Products { set; get; } .</description>
    </item>
    
    <item>
      <title>Code First - API Fluente</title>
      <link>https://www.wikiod.com/pt/entity-framework/code-first---api-fluente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/code-first---api-fluente/</guid>
      <description>Existem duas maneiras gerais de especificar COMO o Entity Framework mapeará classes POCO para tabelas de banco de dados, colunas, etc.: Data Annotations e Fluent API.
Embora as anotações de dados sejam simples de ler e entender, elas não possuem certos recursos, como especificar o comportamento &amp;ldquo;Cascade on Delete&amp;rdquo; para uma entidade. A API Fluent, por outro lado, é um pouco mais complexa de usar, mas fornece um conjunto de recursos muito mais avançado.</description>
    </item>
    
    <item>
      <title>Migrações do Code First Entity-Framework</title>
      <link>https://www.wikiod.com/pt/entity-framework/migracoes-do-code-first-entity-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/migracoes-do-code-first-entity-framework/</guid>
      <description>Ativar migrações # Para habilitar as Migrações do Code First na estrutura de entidade, use o comando
Enable-Migrations no Console do Gerenciador de Pacotes.
Você precisa ter uma implementação válida de DbContext contendo seus objetos de banco de dados gerenciados pelo EF. Neste exemplo, o contexto do banco de dados conterá os objetos BlogPost e Author:
internal class DatabaseContext: DbContext { public DbSet&amp;lt;Author&amp;gt; Authors { get; set; } public DbSet&amp;lt;BlogPost&amp;gt; BlogPosts { get; set; } } Após executar o comando, a seguinte saída deve aparecer:</description>
    </item>
    
    <item>
      <title>Modelos .t4 no framework de entidade</title>
      <link>https://www.wikiod.com/pt/entity-framework/modelos-t4-no-framework-de-entidade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/entity-framework/modelos-t4-no-framework-de-entidade/</guid>
      <description>Adicionando interfaces dinamicamente ao modelo # Ao trabalhar com o modelo existente que é muito grande e está sendo regenerado com bastante frequência nos casos em que a abstração é necessária, pode ser caro contornar manualmente a redecoração do modelo com interfaces. Nesses casos, pode-se querer adicionar algum comportamento dinâmico à geração do modelo.
O exemplo a seguir mostrará como adicionar interfaces automaticamente em classes que possuem nomes de coluna específicos:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de jasmim on </title>
    <link>https://www.wikiod.com/pt/docs/jasmine/</link>
    <description>Recent content in Tutorial de jasmim on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/pt/docs/jasmine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Começando com jasmim</title>
      <link>https://www.wikiod.com/pt/jasmine/comecando-com-jasmim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jasmine/comecando-com-jasmim/</guid>
      <description>Instalação ou Configuração # Instalando o Jasmine autônomo
Baixe a versão mais recente do Jasmine na página de lançamento do Jasmine:
Executando Jasmine localmente
Execute o Jasmine no navegador baixando o arquivo zip, extraindo-o, referenciando os arquivos da seguinte forma:
Instalando o Jasmine usando npm (Node Package Manager)
Configure o diretório do projeto para Jasmine
Create a folder and run npm init this will create an empty package.json file and will ask some questions about your project to fill project json file.</description>
    </item>
    
    <item>
      <title>Espiões</title>
      <link>https://www.wikiod.com/pt/jasmine/espioes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jasmine/espioes/</guid>
      <description>Um espião é definido como uma função específica de teste que intercepta chamadas para uma função subjacente no código do aplicativo e despacha sua própria implementação quando a função subjacente é chamada para testar a interface em vez da implementação.
Espionando uma função existente # Jasmine pode espionar uma função existente usando a função spyOn.
let calculator = { multiply: function(a, b) { return a * b; }, square: function(a) { return this.</description>
    </item>
    
    <item>
      <title>Correspondências personalizadas</title>
      <link>https://www.wikiod.com/pt/jasmine/correspondencias-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jasmine/correspondencias-personalizadas/</guid>
      <description>Adicionando correspondências personalizadas # Matchers personalizados podem ser adicionados no jasmine usando a sintaxe:
jasmine.addMatchers([ toMatch: function () { return { compare: function (actual, expected) { return { pass: actual===expected, message: &amp;quot;Expected actual to match expected } } } } ]); Este matcher agora pode ser chamado com:
expected(actual).toMatch(expected); Correspondentes negativos # Os correspondentes personalizados terão seu valor de passagem negado ao usar &amp;rsquo;não&amp;rsquo;. Os correspondentes personalizados podem ter um atributo de comparação negativo para lidar explicitamente com casos em que sua negação é desejada:</description>
    </item>
    
    <item>
      <title>Atributos</title>
      <link>https://www.wikiod.com/pt/jasmine/atributos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pt/jasmine/atributos/</guid>
      <description>Existem alguns termos que você deve conhecer antes de escrever os casos de teste do Jasmine.
Suítes Um terno é o ponto de partida de um caso de teste Jasmine, na verdade ele chama a função global jasmine descrever. Ele pode ter dois parâmetros, um valor de string que descreve o naipe e uma função que implementa o naipe.
Especificação Assim como as suítes, uma especificação começa com uma string que pode ser o título do naipe e uma função onde escrevemos os testes.</description>
    </item>
    
  </channel>
</rss>

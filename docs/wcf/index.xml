<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wcf Tutorial on </title>
    <link>https://www.wikiod.com/docs/wcf/</link>
    <description>Recent content in wcf Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/wcf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with wcf</title>
      <link>https://www.wikiod.com/wcf/getting-started-with-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/getting-started-with-wcf/</guid>
      <description>WCF Restful Service Demo # svc
public class WCFRestfulService : IWCFRestfulService { public string GetServiceName(int Id) { return &amp;quot;This is a WCF Restful Service&amp;quot;; } } Interface
[ServiceContract(Name = &amp;quot;WCRestfulService &amp;quot;)] public interface IWCFRestfulService { [OperationContract] [WebInvoke(Method = &amp;quot;GET&amp;quot;, ResponseFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped, UriTemplate = &amp;quot;GetServiceName?Id={Id}&amp;quot;)] string GetServiceName(int Id); } svc Markup (Right Click on svc file &amp;amp; click view MarkUp)
&amp;lt;%@ ServiceHost Language=&amp;quot;C#&amp;quot; Debug=&amp;quot;true&amp;quot; Service=&amp;quot;NamespaceName.WCFRestfulService&amp;quot; CodeBehind=&amp;quot;WCFRestfulService.svc.cs&amp;quot; %&amp;gt; Web Config</description>
    </item>
    
    <item>
      <title>How to use a dependency injection container with a WCF service</title>
      <link>https://www.wikiod.com/wcf/how-to-use-a-dependency-injection-container-with-a-wcf-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/how-to-use-a-dependency-injection-container-with-a-wcf-service/</guid>
      <description>How to Configure a WCF Service to Use a Dependency Injection Container (Castle Windsor) # This example has two parts - some boilerplate steps for adding Castle Windsor to your WCF service, and then a simple, concrete example to show how we configure and use Windsor&amp;rsquo;s container.
That makes the example a little bit long. If you already understand using a DI container then you likely only care about the boilerplate steps.</description>
    </item>
    
    <item>
      <title>Your first service</title>
      <link>https://www.wikiod.com/wcf/your-first-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/your-first-service/</guid>
      <description>Adding a metadata endpoint to your service # SOAP services can publish metadata that describes the methods that may be invoked by clients. Clients can use tools such as Visual Studio to automatically generate code (known as client proxies). The proxies hide the complexity of invoking a service. To invoke a service, one merely invokes a method on a client proxy.
First you must add a metadata endpoint to your service.</description>
    </item>
    
    <item>
      <title>WCF Restful Service</title>
      <link>https://www.wikiod.com/wcf/wcf-restful-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/wcf-restful-service/</guid>
      <description>WCF Resful Service # [ServiceContract] public interface IBookService { [OperationContract] [WebGet] List&amp;lt;Book&amp;gt; GetBooksList(); [OperationContract] [WebGet(UriTemplate = &amp;quot;Book/{id}&amp;quot;)] Book GetBookById(string id); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;AddBook/{name}&amp;quot;)] void AddBook(string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;UpdateBook/{id}/{name}&amp;quot;)] void UpdateBook(string id, string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;DeleteBook/{id}&amp;quot;)] void DeleteBook(string id); } Implementing the Service
Now the service implementation part will use the entity framework generated context and entities to perform all the respective operations.
public class BookService : IBookService { public List&amp;lt;Book&amp;gt; GetBooksList() { using (SampleDbEntities entities = new SampleDbEntities()) { return entities.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://www.wikiod.com/wcf/tracing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/tracing/</guid>
      <description>Tracing Settings # WCF tracing is built on top of System.Diagnostics. To use tracing, you should define trace sources in the configuration file or in code.
Tracing is not enabled by default. To activate tracing, you must create a trace listener and set a trace level other than &amp;ldquo;Off&amp;rdquo; for the selected trace source in configuration; otherwise, WCF does not generate any traces.
The following example shows how to enable message logging and specify additional options:</description>
    </item>
    
    <item>
      <title>WCF Security</title>
      <link>https://www.wikiod.com/wcf/wcf-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/wcf-security/</guid>
      <description>WCF Security # Security is a critical piece of any programming technology or framework for implementing service - oriented applications
WCF has been built from the ground up for providing the necessary security infrastructure at the message and service level.
In the following sections, you see how to use many of the available security settings in WCF, and some common deployment scenarios.
For message protection, WCF supports the two traditional security models, transport security and message security.</description>
    </item>
    
    <item>
      <title>Serialization</title>
      <link>https://www.wikiod.com/wcf/serialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/serialization/</guid>
      <description>Serialization in WCF # Serialization is the process of converting an object into a stream of bytes in order to store the object or transmit it to memory, a database, or a file. Microsoft page Serialization
The following example demonstrates Serialization in WCF:
[ServiceContract(Namespace=&amp;quot;http://Microsoft.ServiceModel.Samples&amp;quot;)] public interface IPerson { [OperationContract] void Add(Person person); [DataContract] public class Person { private int id; [DataMember] public int Age{ set; get;} } } [DataContract] Attribute is used with the classes.</description>
    </item>
    
    <item>
      <title>Handling exceptions</title>
      <link>https://www.wikiod.com/wcf/handling-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/handling-exceptions/</guid>
      <description>Further reading
More about FaultException: MSDN FaultException
Using a custom error logging framework # It is sometimes useful to integrate a custom error logging framework to ensure all exceptions are logged.
[ServiceContract] [ErrorHandler] public interface IMyService { } [AttributeUsage(AttributeTargets.Interface)] public class CustomErrorHandler : Attribute, IContractBehavior, IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) { return; } //my custom logging framework } public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) { dispatchRuntime.</description>
    </item>
    
    <item>
      <title>DataContractSerializer is an Opt-In and Opt-Out serializer.</title>
      <link>https://www.wikiod.com/wcf/datacontractserializer-is-an-opt-in-and-opt-out-serializer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/datacontractserializer-is-an-opt-in-and-opt-out-serializer/</guid>
      <description>actually its so simple: Opt-In approach says properties that are considered to be part of DataContract must be explicitly marked otherwise will be ignore, while Opt-Out means all of the properties will be assumed to be part of the DataContract unless marked explicitly.
What is opt in serializer # /// &amp;lt;summary&amp;gt; /// Defines a student. /// &amp;lt;/summary&amp;gt; [DataContract] public class Student { /// &amp;lt;summary&amp;gt; /// Gets or sets the student number.</description>
    </item>
    
    <item>
      <title>How to DisableEnable WCF tracing in C# application code</title>
      <link>https://www.wikiod.com/wcf/how-to-disableenable-wcf-tracing-in-c-application-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wcf/how-to-disableenable-wcf-tracing-in-c-application-code/</guid>
      <description>One way: use a custom listener defined in your C# code # It took me a while to get this right, so I decided to share a solution because it might save someone else several days of trial and error.
The problem: I want to be able to enable/disable WCF tracing in my C# .NET application and choose the trace output filename. I don&amp;rsquo;t want users editing the .config file, there&amp;rsquo;s too much room for error there.</description>
    </item>
    
  </channel>
</rss>

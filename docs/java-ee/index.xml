<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java-ee Tutorial on </title>
    <link>https://www.wikiod.com/docs/java-ee/</link>
    <description>Recent content in java-ee Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/java-ee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with java-ee</title>
      <link>https://www.wikiod.com/java-ee/getting-started-with-java-ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/getting-started-with-java-ee/</guid>
      <description>What is Java EE? # Java EE stands for Java Enterprise Edition. Java EE extends the Java SE (which stands for Java Standard Edition). Java EE is a set of technologies and related specifications that are oriented towards the development of large-scale enterprise applications. Java EE is developed in a community driven process. So far the following versions of Java EE have been released:
J2EE 1.2 (December12, 1999) J2EE 1.3 (September 24, 2001) J2EE 1.</description>
    </item>
    
    <item>
      <title>Java RESTful Web Services (JAX-RS)</title>
      <link>https://www.wikiod.com/java-ee/java-restful-web-services-jax-rs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/java-restful-web-services-jax-rs/</guid>
      <description>Unlike SOAP and the WS- stack, which are specified as W3C standards, REST is really a set of principles for designing and using web-based interface. REST / RESTful applications rely heavily on other standards:
HTTP URI, URL XML, JSON, HTML, GIF, JPEG, and so forth (resource representations) The role of JAX-RS (Java API for RESTful Web Services) is to provide APIs that support building RESTful services. However, JAX-RS is just one way of doing this.</description>
    </item>
    
    <item>
      <title>Java Messaging Service (JMS)</title>
      <link>https://www.wikiod.com/java-ee/java-messaging-service-jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/java-messaging-service-jms/</guid>
      <description>The Java Message Service is a Java API that allows applications to create, send, receive, and read messages. The JMS API defines a common set of interfaces and associated semantics that allow programs written in the Java programming language to communicate with other messaging implementations. JMS enables communication that is not only loosely coupled but also asynchronous and reliable.
Java Message Service (JMS) is a standard Java API that allows applications to create, send, receive and read messages asynchronously.</description>
    </item>
    
    <item>
      <title>The Javamail API</title>
      <link>https://www.wikiod.com/java-ee/the-javamail-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/the-javamail-api/</guid>
      <description>The JavaMail page on the Oracle website describes it as follows
The JavaMail API provides a platform-independent and protocol-independent framework to build mail and messaging applications. The JavaMail API is available as an optional package for use with the Java SE platform and is also included in the Java EE platform.
The primary site for the JavaMail project is now on java.net. From there you can find the javadocs for many versions of the APIs, links to the source code repositories, links for downloads, examples and hints for using JavaMail with some popular Email service providers.</description>
    </item>
    
    <item>
      <title>The WebSockets API</title>
      <link>https://www.wikiod.com/java-ee/the-websockets-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/the-websockets-api/</guid>
      <description>WebSocket is a protocol which allows for communication between the client and the server/endpoint using a single TCP connection.
WebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application.
This topic about the Java APIs for websockets that were developed by JSR 356 and incorporated into the Java EE 7 specifications.
Creating a WebSocket communication # Encoders and Decoder: Object-Oriented WebSockets # Thanks to encoders and decoders, the JSR 356 offers a object oriented communication models.</description>
    </item>
    
    <item>
      <title>Java Connector Architecture (JCA)</title>
      <link>https://www.wikiod.com/java-ee/java-connector-architecture-jca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java-ee/java-connector-architecture-jca/</guid>
      <description>Let&amp;rsquo;s clarify some terminologies first:
Outbound Messaging is where the message starts from the server (to be more accurate it&amp;rsquo;s initiated from your app which you have on the server, WebSphere Liberty in this case) and end at the EIS. Inbound Messaging is where message starts from the EIS and end at the server. Message Endpoint in general the place where the message end up sitting/getting received at a specific stage of its life cycle.</description>
    </item>
    
  </channel>
</rss>

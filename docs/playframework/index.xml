<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>playframework Tutorial on </title>
    <link>https://www.wikiod.com/docs/playframework/</link>
    <description>Recent content in playframework Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/playframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with playframework</title>
      <link>https://www.wikiod.com/playframework/getting-started-with-playframework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/getting-started-with-playframework/</guid>
      <description>Getting started with Play 2.4.x/2.5.x - Windows, Java # Installations # Download and install:
Java 8 - download the relevant installation from Oracle site.
Activator - download zip from www.playframework.com/download and extract files to the target Play folder, for example to:
c:\Play-2.4.2\activator-dist-1.3.5 sbt - download from www.scala-sbt.org.
Define environment variables:
JAVA_HOME, for example:
c:\Program Files\Java\jdk1.8.0_45 PLAY_HOME, for example:
c:\Play-2.4.2\activator-dist-1.3.5; SBT_HOME for example:
c:\Program Files (x86)\sbt\bin; Add path to all three installed programs to the path variables:</description>
    </item>
    
    <item>
      <title>Dependency injection - Java</title>
      <link>https://www.wikiod.com/playframework/dependency-injection---java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/dependency-injection---java/</guid>
      <description>Dependency injection with Guice - Play 2.4, 2.5 # Guice is the default dependency injection (further DI) framework of Play. Other frameworks may be used as well, but using Guice makes development efforts easier, since Play takes care for things under the veil.
Injection of Play API-s # Starting from Play 2.5 several API-s, which were static in the earlier versions, should be created with DI. These are, for example, Configuration, JPAApi, CacheApi, etc.</description>
    </item>
    
    <item>
      <title>Setting up your preferred IDE</title>
      <link>https://www.wikiod.com/playframework/setting-up-your-preferred-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/setting-up-your-preferred-ide/</guid>
      <description>IntelliJ IDEA # Prerequisites # Intellij IDEA installed (Community or Ultimate edition) Scala Plugin installed in IntelliJ A standard Play project, created for instance with Activator (activator new [nameoftheproject] play-scala). Opening the project # Open IntelliJ IDEA Go to menu File &amp;gt; Open ... &amp;gt; click the whole folder [nameoftheproject] &amp;gt; OK A popup opens with a few options. The default values are good enough in most cases, and if you don&amp;rsquo;t like them you can change them somewhere else later.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://www.wikiod.com/playframework/unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/unit-testing/</guid>
      <description>Unit testing - Java, Play 2.4,2.5 # Helpers and fakeApplication # Class Helpers is used a lot for unit tests. It imitates a Play application, fakes HTTP requests and responses, session, cookies - all whatever may be needed for tests. A controller under the test should be executed in a context of a Play application. The Helpers method fakeApplication provides an application for running tests. In order to use Helpers and fakeApplication a test class should derive from WithApplication.</description>
    </item>
    
    <item>
      <title>Dependency Injection - Scala</title>
      <link>https://www.wikiod.com/playframework/dependency-injection---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/dependency-injection---scala/</guid>
      <description>Syntax # class MyClassUsingAnother @Inject() (myOtherClassInjected: MyOtherClass) { (&amp;hellip;) } @Singleton class MyClassThatShouldBeASingleton (&amp;hellip;) Basic usage # A typical singleton class :
import javax.inject._ @Singleton class BurgersRepository { // implementation goes here } Another class, requiring access to the first one.
import javax.inject._ class FastFoodService @Inject() (burgersRepository: BurgersRepository){ // implementation goes here // burgersRepository can be used } Finally a controller using the last one. Note since we didn&amp;rsquo;t mark the FastFoodService as a singleton, a new instance of it is created each time it is injected.</description>
    </item>
    
    <item>
      <title>Webservice usage with play WSClient</title>
      <link>https://www.wikiod.com/playframework/webservice-usage-with-play-wsclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/webservice-usage-with-play-wsclient/</guid>
      <description>Link to official documentation: https://www.playframework.com/documentation/2.5.x/ScalaWS
Basic usage (Scala) # HTTP requests are made through the WSClient class, which you can use as an injected parameter into your own classes.
import javax.inject.Inject import play.api.libs.ws.WSClient import scala.concurrent.{ExecutionContext, Future} class MyClass @Inject() ( wsClient: WSClient )(implicit ec: ExecutionContext){ def doGetRequest(): Future[String] = { wsClient .url(&amp;quot;http://www.google.com&amp;quot;) .get() .map { response =&amp;gt; // Play won&#39;t check the response status, // you have to do it manually if ((200 to 299).</description>
    </item>
    
    <item>
      <title>Java - Hello World</title>
      <link>https://www.wikiod.com/playframework/java---hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/java---hello-world/</guid>
      <description>This tutorial is targeted to run Play in a Linux/MacOS system Create your first project # To create a new project use the following command (HelloWorld is the name of the project and play-java is the template)
$ ~/activator-1.3.10-minimal/bin/activator new HelloWorld play-java You should get an output similar to this one
Fetching the latest list of templates... OK, application &amp;quot;HelloWorld&amp;quot; is being created using the &amp;quot;play-java&amp;quot; template. To run &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator run To run the test for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator test To run the Activator UI for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator ui The project will be created in the current directory (in this case it was my home folder)</description>
    </item>
    
    <item>
      <title>Working with JSON - Scala</title>
      <link>https://www.wikiod.com/playframework/working-with-json---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/working-with-json---scala/</guid>
      <description>Official documentation Package documentation
You can use the play json package independently from Play by including
&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;play-json_2.11&amp;quot; % &amp;quot;2.5.3&amp;quot; in your build.sbt, see
https://mvnrepository.com/artifact/com.typesafe.play/play-json_2.11
http://stackoverflow.com/questions/19436069/adding-play-json-library-to-sbt
Creating a JSON manually # You can build a JSON object tree (a JsValue) manually
import play.api.libs.json._ val json = JsObject(Map( &amp;quot;name&amp;quot; -&amp;gt; JsString(&amp;quot;Jsony McJsonface&amp;quot;), &amp;quot;age&amp;quot; -&amp;gt; JsNumber(18), &amp;quot;hobbies&amp;quot; -&amp;gt; JsArray(Seq( JsString(&amp;quot;Fishing&amp;quot;), JsString(&amp;quot;Hunting&amp;quot;), JsString(&amp;quot;Camping&amp;quot;) )) )) Or with the shorter equivalent syntax, based on a few implicit conversions :</description>
    </item>
    
    <item>
      <title>Slick</title>
      <link>https://www.wikiod.com/playframework/slick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/slick/</guid>
      <description>Slick getting started code # In build.sbt, make sure you include (here for Mysql and PostGreSQL):
&amp;quot;mysql&amp;quot; % &amp;quot;mysql-connector-java&amp;quot; % &amp;quot;5.1.20&amp;quot;, &amp;quot;org.postgresql&amp;quot; % &amp;quot;postgresql&amp;quot; % &amp;quot;9.3-1100-jdbc4&amp;quot;, &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.1.1&amp;quot;, &amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-slick&amp;quot; % &amp;quot;1.1.1&amp;quot; In your application.conf, add:
mydb.driverjava=&amp;quot;slick.driver.MySQLDriver$&amp;quot; mydb.driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot; mydb.url=&amp;quot;jdbc:mysql://hostaddress:3306/dbname?zeroDateTimeBehavior=convertToNull&amp;quot; mydb.user=&amp;quot;username&amp;quot; mydb.password=&amp;quot;password&amp;quot; To have a RDBMS independent architecture create an object like the following
package mypackage import slick.driver.MySQLDriver import slick.driver.PostgresDriver object SlickDBDriver{ val env = &amp;quot;something here&amp;quot; val driver = env match{ case &amp;quot;postGreCondition&amp;quot; =&amp;gt; PostgresDriver case _ =&amp;gt; MySQLDriver } } when creating a new new model:</description>
    </item>
    
    <item>
      <title>Java - Working with JSON</title>
      <link>https://www.wikiod.com/playframework/java---working-with-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/playframework/java---working-with-json/</guid>
      <description>Play documentation: https://www.playframework.com/documentation/2.5.x/JavaJsonActions
Manual creating JSON # import play.libs.Json; public JsonNode createJson() { // {&amp;quot;id&amp;quot;: 33, &amp;quot;values&amp;quot;: [3, 4, 5]} ObjectNode rootNode = Json.newObject(); ArrayNode listNode = Json.newArray(); long values[] = {3, 4, 5}; for (long val: values) { listNode.add(val); } rootNode.put(&amp;quot;id&amp;quot;, 33); rootNode.set(&amp;quot;values&amp;quot;, listNode); return rootNode; } Loading json from string/file # import play.libs.Json; // (...) Loading a file from your public folder # // Note: &amp;quot;app&amp;quot; is an play.</description>
    </item>
    
  </channel>
</rss>

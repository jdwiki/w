<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# Tutorial on </title>
    <link>https://www.wikiod.com/docs/fsharp/</link>
    <description>Recent content in F# Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with F#</title>
      <link>https://www.wikiod.com/fsharp/getting-started-with-f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/getting-started-with-f/</guid>
      <description>Hello, World! # This is the code for a simple console project, that prints &amp;ldquo;Hello, World!&amp;rdquo; to STDOUT, and exits with an exit code of 0
[&amp;lt;EntryPoint&amp;gt;] let main argv = printfn &amp;quot;Hello, World!&amp;quot; 0 Example breakdown Line-by-line:
[&amp;lt;EntryPoint&amp;gt;] - A .net Attribute that marks &amp;ldquo;the method that you use to set the entry point&amp;rdquo; of your program (source). let main argv - this defines a function called main with a single parameter argv.</description>
    </item>
    
    <item>
      <title>Discriminated Unions</title>
      <link>https://www.wikiod.com/fsharp/discriminated-unions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/discriminated-unions/</guid>
      <description>Naming elements of tuples within discriminated unions # When defining discriminated unions you can name elements of tuple types and use these names during pattern matching.
type Shape = | Circle of diameter:int | Rectangle of width:int * height:int let shapeIsTenWide = function | Circle(diameter=10) | Rectangle(width=10) -&amp;gt; true | _ -&amp;gt; false Additionally naming the elements of discriminated unions improves readability of the code and interoperability with C# - provided names will be used for properties&amp;rsquo; names and constructors&amp;rsquo; parameters.</description>
    </item>
    
    <item>
      <title>Active Patterns</title>
      <link>https://www.wikiod.com/fsharp/active-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/active-patterns/</guid>
      <description>Simple Active Patterns # Active patterns are a special type of pattern matching where you can specify named categories that your data may fall into, and then use those categories in match statements.
To define an active pattern that classifies numbers as positive, negative or zero:
let (|Positive|Negative|Zero|) num = if num &amp;gt; 0 then Positive elif num &amp;lt; 0 then Negative else Zero This can then be used in a pattern matching expression:</description>
    </item>
    
    <item>
      <title>F# Performance Tips and Tricks</title>
      <link>https://www.wikiod.com/fsharp/f-performance-tips-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/f-performance-tips-and-tricks/</guid>
      <description>Measure and Verify your performance assumptions # This example is written with F# in mind but the ideas are applicable in all environments
The first rule when optimizing for performance is to not to rely assumption; always Measure and Verify your assumptions.
As we are not writing machine code directly it is hard to predict how the compiler and JIT:er transform your program to machine code. That&amp;rsquo;s why we need to Measure the execution time to see that we get the performance improvement we expect and Verify that the actual program doesn&amp;rsquo;t contain any hidden overhead.</description>
    </item>
    
    <item>
      <title>Monads</title>
      <link>https://www.wikiod.com/fsharp/monads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/monads/</guid>
      <description>Understanding Monads comes from practice # This topic is intended for intermediate to advanced F# developers
&amp;ldquo;What are Monads?&amp;rdquo; is a common question. This is easy to answer but like in Hitchhikers guide to galaxy we realize we don&amp;rsquo;t understand the answer because we didn&amp;rsquo;t know what we were asking after.
Many believe the way to understanding Monads is by practicing them. As programmers we typically don&amp;rsquo;t care for the mathematical foundation for what Liskov&amp;rsquo;s Substitution Principle, sub-types or sub-classes are.</description>
    </item>
    
    <item>
      <title>Memoization</title>
      <link>https://www.wikiod.com/fsharp/memoization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/memoization/</guid>
      <description>Simple memoization # Memoization consists of caching function results to avoid computing the same result multiple times. This is useful when working with functions that perform costly computations.
We can use a simple factorial function as an example:
let factorial index = let rec innerLoop i acc = match i with | 0 | 1 -&amp;gt; acc | _ -&amp;gt; innerLoop (i - 1) (acc * i) innerLoop index 1 Calling this function multiple times with the same parameter results in the same computation again and again.</description>
    </item>
    
    <item>
      <title>The unit type</title>
      <link>https://www.wikiod.com/fsharp/the-unit-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/the-unit-type/</guid>
      <description>What good is a 0-tuple? # A 2-tuple or a 3-tuple represent a group of related items. (Points in 2D space, RGB values of a color, etc.) A 1-tuple is not very useful since it could easily be replaced with a single int.
A 0-tuple seems even more useless since it contains absolutely nothing. Yet it has properties that make it very useful in functional languages like F#. For example, the 0-tuple type has exactly one value, usually represented as ().</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/fsharp/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/functions/</guid>
      <description>Pipe Forward and Backward # Pipe operators are used to pass parameters to a function in a simple and elegant way. It allows to eliminate intermediate values and make function calls easier to read.
In F#, there are two pipe operators:
Forward (|&amp;gt;): Passing parameters from left to right
let print message = printf &amp;quot;%s&amp;quot; message // &amp;quot;Hello World&amp;quot; will be passed as a parameter to the print function &amp;quot;Hello World&amp;quot; |&amp;gt; print Backward (&amp;lt;|): Passing parameters from right to left</description>
    </item>
    
    <item>
      <title>1  F# WPF Code Behind Application with FsXaml</title>
      <link>https://www.wikiod.com/fsharp/1--f-wpf-code-behind-application-with-fsxaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/1--f-wpf-code-behind-application-with-fsxaml/</guid>
      <description>Most examples found for F# WPF programming seem to deal with the MVVM pattern, and a few with MVC, but there is next to none that shows properly how to get up and running with &amp;ldquo;good old&amp;rdquo; code behind.
The code behind pattern is very easy to use for teaching as well as experimentation. It is used in numerous introduction books and learning material on the web. That&amp;rsquo;s why.
These examples will demonstrate how to create a code behind application with windows, controls, images and icons, and more.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>https://www.wikiod.com/fsharp/pattern-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/fsharp/pattern-matching/</guid>
      <description>Pattern Matching is a powerful feature of many functional languages as it often allows branching to be handled very succinctly compared to using multiple if/else if/else style statements. However given enough options and &amp;ldquo;when&amp;rdquo; guards, Pattern Matching can also become verbose and difficult to understand at a glance.
When this happens F#&amp;rsquo;s Active Patterns can be a great way to give meaningful names to the matching logic, which simplifies the code and also enables reuse.</description>
    </item>
    
  </channel>
</rss>

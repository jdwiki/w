<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cdi Tutorial on </title>
    <link>https://www.wikiod.com/docs/cdi/</link>
    <description>Recent content in cdi Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/cdi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with cdi</title>
      <link>https://www.wikiod.com/cdi/getting-started-with-cdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cdi/getting-started-with-cdi/</guid>
      <description>Quick setup in a Java SE environment # If you are working with a Java EE 6+ application server, CDI is part of the container and you do not need to do anything to start using it. But CDI is not limited to Java EE application servers. It can be used in Java SE applications or simple servlet containers just as easily. Let&amp;rsquo;s take a look at using CDI in a simple command-line application.</description>
    </item>
    
    <item>
      <title>Scopes</title>
      <link>https://www.wikiod.com/cdi/scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cdi/scopes/</guid>
      <description>Why do I need these no-args constructors???
What happens if a session scoped bean gets injected into an application scoped bean? How does the application scoped bean get the correct session scoped bean instance for each request? Wouldn&amp;rsquo;t the session scoped bean leak out into other requests? How does that work? In order to facilitate scoping, CDI uses what is known as a proxy. When CDI injects a non-dependent scoped bean into another object, it does not inject the bean directly.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.wikiod.com/cdi/dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cdi/dependency-injection/</guid>
      <description>CDI&amp;rsquo;s flagship feature is a declarative API for dependency injection. Classes can have dependencies flagged with the @Inject annotation, which will indicate to the CDI manager that it needs to provide those dependencies when constructing an instance of the class.
Constructor Injection # The common case for injecting dependencies into a class is with constructor injection. This involves annotating a constructor on the class with @Inject. The CDI manager will look for a constructor with the @Inject annotation when creating an instance of the class.</description>
    </item>
    
  </channel>
</rss>

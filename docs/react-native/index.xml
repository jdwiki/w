<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react-native Tutorial on </title>
    <link>https://www.wikiod.com/docs/react-native/</link>
    <description>Recent content in react-native Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/react-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with react-native</title>
      <link>https://www.wikiod.com/react-native/getting-started-with-react-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/getting-started-with-react-native/</guid>
      <description>Setup for Mac # Installing package manager Homebrew brew
Paste that at a Terminal prompt.
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Installing Xcode IDE
Download it using link below or find it on Mac App Store
https://developer.apple.com/download/
NOTE: If you have Xcode-beta.app installed along with production version of Xcode.app, make sure you are using production version of xcodebuild tool. You can set it with:
sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/
Installing Android environment</description>
    </item>
    
    <item>
      <title>Android - Hardware Back Button</title>
      <link>https://www.wikiod.com/react-native/android---hardware-back-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/android---hardware-back-button/</guid>
      <description>Detect Hardware back button presses in Android # BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() { if (!this.onMainScreen()) { this.goBack(); return true; } return false; }); Note: this.onMainScreen() and this.goBack() are not built in functions, you also need to implement those. (https://github.com/immidi/react-native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712)
Example of BackAndroid along with Navigator # This is an example on how to use React Native&amp;rsquo;s BackAndroid along with the Navigator.
componentWillMount registers an event listener to handle the taps on the back button.</description>
    </item>
    
    <item>
      <title>Custom Fonts</title>
      <link>https://www.wikiod.com/react-native/custom-fonts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/custom-fonts/</guid>
      <description>Custom fonts for both Android and IOS # Create a folder in your project folder, and add your fonts to it. Example:
Example: Here we added a folder in root called &amp;ldquo;mystuff&amp;rdquo;, then &amp;ldquo;fonts&amp;rdquo;, and inside it we placed our fonts: Add the below code in package.json.
{ ... &amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;path/to/fontfolder&amp;quot; ] }, ... } For the example above, our package.json would now have a path of &amp;ldquo;mystuff/fonts&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Props</title>
      <link>https://www.wikiod.com/react-native/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/props/</guid>
      <description>Props, or properties, are data that is passed to child components in a React application. React components render UI elements based on their props and their internal state. The props that a component takes (and uses) defines how it can be controlled from the outside.
PropTypes # The prop-types package allows you to add runtime type checking to your component that ensures the types of the props passed to the component are correct.</description>
    </item>
    
    <item>
      <title>HTTP Requests</title>
      <link>https://www.wikiod.com/react-native/http-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/http-requests/</guid>
      <description>Syntax # fetch(url, options)[.then(&amp;hellip;)[.catch(&amp;hellip;)]]
The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and it uses promises.
The XMLHttpRequest API is also used for HTTP requests and is mainly included so that developers may use their favorite existing libraries, like ApiSauce.
The Websocket API may be used for &amp;ldquo;live&amp;rdquo; data in real time scenarios, such as in chat applications.
Using Promises with the fetch API and Redux # Redux is the most common state management library used with React-Native.</description>
    </item>
    
    <item>
      <title>RefreshControl with ListView</title>
      <link>https://www.wikiod.com/react-native/refreshcontrol-with-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/refreshcontrol-with-listview/</guid>
      <description>References:
RefreshControl: https://facebook.github.io/react-native/docs/refreshcontrol.html
ListView: https://facebook.github.io/react-native/docs/listview.html
Refresh Control with ListView Full Example # RefreshControl is used inside a ScrollView or ListView to add pull to refresh functionality. at this example we will use it with ListView
&#39;use strict&#39; import React, { Component } from &#39;react&#39;; import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39; class RefreshControlExample extends Component { constructor () { super() this.state = { refreshing: false, dataSource: new ListView.</description>
    </item>
    
    <item>
      <title>Command Line Instructions</title>
      <link>https://www.wikiod.com/react-native/command-line-instructions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/command-line-instructions/</guid>
      <description>Check version installed # $ react-native -v Example Output
react-native-cli: 0.2.0 react-native: n/a - not inside a React Native project directory //Output from different folder react-native: react-native: 0.30.0 // Output from the react native project directory Initialize and getting started with React Native project # To initialize
react-native init MyAwesomeProject To initialize with a specific version of React Native
react-native init --version=&amp;quot;0.36.0&amp;quot; MyAwesomeProject To Run for Android
cd MyAwesomeProject react-native run-android To Run for iOS</description>
    </item>
    
    <item>
      <title>Navigator Best Practices</title>
      <link>https://www.wikiod.com/react-native/navigator-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/navigator-best-practices/</guid>
      <description>Navigator # Navigator is React Native&amp;rsquo;s default navigator. A Navigator component manages a stack of route objects, and provides methods for managing that stack.
&amp;lt;Navigator ref={(navigator) =&amp;gt; { this.navigator = navigator }} initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }} renderScene={this.renderScene.bind(this)} configureScene={(route) =&amp;gt; Navigator.SceneConfigs.FloatFromRight} style={{ flex: 1 }} navigationBar={ // see &amp;quot;Managing the Navigation Bar&amp;quot; below &amp;lt;Navigator.NavigationBar routeMapper={this.routeMapper} /&amp;gt; } /&amp;gt; Managing the Route Stack
First of all, notice the initialRoute prop.</description>
    </item>
    
    <item>
      <title>Animation API</title>
      <link>https://www.wikiod.com/react-native/animation-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/animation-api/</guid>
      <description>Animate an Image # class AnimatedImage extends Component { constructor(props){ super(props) this.state = { logoMarginTop: new Animated.Value(200) } } componentDidMount(){ Animated.timing( this.state.logoMarginTop, { toValue: 100 } ).start() } render () { return ( &amp;lt;View&amp;gt; &amp;lt;Animated.Image source={require(&#39;../images/Logo.png&#39;)} style={[baseStyles.logo, { marginTop: this.state.logoMarginTop }]} /&amp;gt; &amp;lt;/View&amp;gt; ) } } This example is animating the image position by changing the margin.</description>
    </item>
    
    <item>
      <title>Layout</title>
      <link>https://www.wikiod.com/react-native/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/react-native/layout/</guid>
      <description>Flexbox # Flexbox is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. By default flexbox arranges children in a column. But you can change it to row using flexDirection: &#39;row&#39;.
flexDirection # const Direction = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.container}&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;View style={{flexDirection:&#39;row&#39;}}&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;/View&amp;gt; &amp;lt;/View&amp;gt; ) } const styles = StyleSheet.</description>
    </item>
    
  </channel>
</rss>

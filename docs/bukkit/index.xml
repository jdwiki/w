<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bukkit Tutorial on </title>
    <link>https://www.wikiod.com/docs/bukkit/</link>
    <description>Recent content in bukkit Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/bukkit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with bukkit</title>
      <link>https://www.wikiod.com/bukkit/getting-started-with-bukkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/getting-started-with-bukkit/</guid>
      <description>Creating a Plugin # Prerequisites # JDK 7 or Higher (Recommended: JDK 8+) Adding Bukkit as a Dependency # The simplest method to add the Bukkit API to your project is to download the Bukkit.jar directly from the Spigot Repository and add it to your project&amp;rsquo;s classpath. Legacy versions of Bukkit can be found at the Bukkit Repository.
The other is to add it as a Maven dependency, by adding the following lines to your pom.</description>
    </item>
    
    <item>
      <title>Scheduler Programming</title>
      <link>https://www.wikiod.com/bukkit/scheduler-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/scheduler-programming/</guid>
      <description>Syntax # Bukkit.getScheduler().scheduleSyncRepeatingTask(Plugin plugin, Runnable task, int initialDelay, int repeatingDelay) Bukkit.getScheduler().scheduleSyncDelayedTask(Plugin plugin, Runnable task, int initialDelay) Bukkit.getScheduler().runTaskAsynchronously(Plugin plugin, Runnable task) Bukkit.getScheduler().runTask(Plugin plugin, Runnable task) new BukkitRunnable() { @Override public void run() { /* CODE */ } }.runTaskLater(Plugin plugin, long delay); new BukkitRunnable() { @Override public void run() { /* CODE */ } }.runTaskTimer(Plugin plugin, long initialDelay, long repeatingDelay); Few Bukkit API methods are thread-safe and can be called asynchronously. For this reason, Bukkit API methods should only, with a few exceptions, be run on the main thread.</description>
    </item>
    
    <item>
      <title>Event Handling</title>
      <link>https://www.wikiod.com/bukkit/event-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/event-handling/</guid>
      <description>When something happens inside Bukkit, an Event is called so every plugin can decide what to do whenever something happens.
An Event is called when a player tries to play a block, when an entity despawn, when someone logs in&amp;hellip; Plugins can listen to specific events and deal with it in many different ways, for example, sending a message to an admin when a Player logs in, via the PlayerLoginEvent.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://www.wikiod.com/bukkit/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/logging/</guid>
      <description>Using the Bukkit Logger # public class MyClass { public void foo() { Logger logger = Bukkit.getLogger(); logger.info(&amp;quot;A log message&amp;quot;); logger.log(Level.INFO, &amp;quot;Another message&amp;quot;); logger.fine(&amp;quot;A fine message&amp;quot;); // logging an exception try { // code might throw an exception } catch (SomeException ex) { // log a warning printing &amp;quot;Something went wrong&amp;quot; // together with the exception message and stacktrace logger.log(Level.WARNING, &amp;quot;Something went wrong&amp;quot;, ex); } String s = &amp;quot;Hello World!&amp;quot;; // logging an object LOG.</description>
    </item>
    
    <item>
      <title>NMS</title>
      <link>https://www.wikiod.com/bukkit/nms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/nms/</guid>
      <description>NMS, also known as Net.Minecraft.Server is the package which contains core Minecraft server code. Classes in this package were made by Mojang (not Bukkit) and are therefore mostly obfuscated and not meant to be used or altered. However, interacting with the Minecraft server code at this level allows you to modify almost every aspect of it. This is significant because there are numerous modifications that Bukkit does not support.
The Bukkit API is a wrapper or abstraction layer for NMS that allows plugin developers to interact with the server without worrying about changes made to the internal codebase.</description>
    </item>
    
    <item>
      <title>Entities</title>
      <link>https://www.wikiod.com/bukkit/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/entities/</guid>
      <description>Nearby Entities # To retrieve a list of nearby entities of an entity, one can use
List&amp;lt;Entity&amp;gt; nearby = entity.getNearbyEntities(double x, double y, double z); Bukkit will then calculate a bounding box centered around entity, having as parameters:
x: 1/2 the size of the box along x axis y: 1/2 the size of the box along y axis z: 1/2 the size of the box along z axis The list may be empty, meaning that there are no nearby entities with the parameters.</description>
    </item>
    
    <item>
      <title>Spawn Eggs</title>
      <link>https://www.wikiod.com/bukkit/spawn-eggs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/spawn-eggs/</guid>
      <description>Refer to Entities Documentation to understand EntityType better
Creating an ItemStack of a SpawnEgg # For anything below 1.9
SpawnEgg egg = new SpawnEgg(EntityType.CREEPER); ItemStack creeperEgg = egg.toItemStack(5); For 1.9 and above
In versions 1.9 and higher, Spigot does not have an implementation for creating spawn eggs without using NMS. To accomplish this, you can use a small custom class/wrapper to make it happen:
public ItemStack toItemStack(int amount, EntityType type) { ItemStack item = new ItemStack(Material.</description>
    </item>
    
    <item>
      <title>Configuration Files</title>
      <link>https://www.wikiod.com/bukkit/configuration-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/configuration-files/</guid>
      <description>Syntax # String s = config.getString(&amp;quot;path.to.string&amp;quot;); int i = config.getInt(&amp;quot;path.to.int&amp;quot;); double d = config.getDouble(&amp;quot;path.to.double&amp;quot;); List&amp;lt;String&amp;gt; sl = config.getStringList(&amp;quot;path.to.stringlist&amp;quot;); List&amp;lt;Double&amp;gt; dl = config.getDoubleList(&amp;quot;path.to.doublelist&amp;quot;); List&amp;lt;Integer&amp;gt; il = config.getIntegerList(&amp;quot;path.to.integerlist&amp;quot;); The Bukkit configuration files are straight-forward Y.A.M.L (Yet Another Markup Language) files, and are implemented as so.
Plugin Config.yml # You can have a config.yml file that loads directly from your jar file. It must be added to your project&amp;rsquo;s folder, the same way as the plugin.</description>
    </item>
    
    <item>
      <title>Entity Events</title>
      <link>https://www.wikiod.com/bukkit/entity-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/entity-events/</guid>
      <description>All Entity Events extends EntityEvent, the superclass for EntityEvents.
All known EntityEvents can be found below, and will be covered in this documentation.
EntityEvent (Superclass) # The known sub-classes for Entity Events are:
Sub-Classes Sub-Classes Sub-Classes CreatureSpawnEvent CreeperPowerEvent EntityChangeBlockEvent EntityCombustEvent EntityCreatePortalEvent EntityDamageEvent EntityDeathEvent EntityExplodeEvent EntityInteractEvent EntityPortalEnterEvent EntityRegainHealthEvent EntityShootBowEvent EntityTameEvent EntityTargetEvent EntityTeleportEvent EntityUnleashEvent ExplosionPrimeEvent FoodLevelChangeEvent HorseJumpEvent ItemDespawnEvent ItemSpawnEvent PigZapEvent ProjectileHitEvent ProjectileLaunchEvent SheepDyeWoolEvent SheepRegrowWoolEvent SlimeSplitEvent In addition to this, all the sub-classes inherit the following methods:</description>
    </item>
    
    <item>
      <title>Hiding Players</title>
      <link>https://www.wikiod.com/bukkit/hiding-players/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bukkit/hiding-players/</guid>
      <description>Syntax # void hide(Player toHide); void show(Player toShow); boolean canSee(Player toBeSeen); Events are better covered in StackOverflow&amp;rsquo;s List of Events documentation
Hiding a Player from other Players # Player playerToHide; Player playerToNotSee; playerToNotSee.hide(playerToHide); //playerToHide will no longer be seen by playerToNotSee. If player is already hidden, nothing happens
Showing a Player to another Player # Player toUnhide; Player toSeeAgain toSeeAgain.show(toUnhide); //Player toSeeAgain will now see Player toUnhide again. If player is already visible, nothing happens.</description>
    </item>
    
  </channel>
</rss>

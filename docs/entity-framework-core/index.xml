<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entity Framework Core Tutorial on </title>
    <link>https://www.wikiod.com/docs/entity-framework-core/</link>
    <description>Recent content in Entity Framework Core Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/entity-framework-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Entity Framework Core</title>
      <link>https://www.wikiod.com/entity-framework-core/getting-started-with-entity-framework-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/entity-framework-core/getting-started-with-entity-framework-core/</guid>
      <description>Model, Querying and Saving Data # Model # With EF Core, data access is performed using a model. A model is made up of entity classes and a derived context that represents a session with the database, allowing you to query and save data.
You can generate a model from an existing database, hand code a model to match your database, or use EF Migrations to create a database from your model (and evolve it as your model changes over time).</description>
    </item>
    
    <item>
      <title>EF Core vs EF6.x</title>
      <link>https://www.wikiod.com/entity-framework-core/ef-core-vs-ef6x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/entity-framework-core/ef-core-vs-ef6x/</guid>
      <description>For latest updates, please refer to: Feature Comparison
Side-by-side comparison # The following table compares the features available(1) in EF Core and EF6.x.
It is intended to give a high level comparison and does not list every feature, or attempt to give details on possible differences between how the same feature works.
Creating a Model EF6.x EF Core 1.0.0 Basic modelling (classes, properties, etc.) Yes Yes Conventions Yes Yes Custom conventions Yes Partial Data annotations Yes Yes Fluent API Yes Yes Inheritance: Table per hierarchy (TPH) Yes Yes Inheritance: Table per type (TPT) Yes Inheritance: Table per concrete class (TPC) Yes Shadow state properties Yes Alternate keys Yes Many-to-many: With join entity Yes Yes Many-to-many: Without join entity Yes Key generation: Database Yes Yes Key generation: Client Yes Complex/value types Yes Spatial data Yes Graphical visualization of model Yes Graphical drag/drop editor Yes Model format: Code Yes Yes Model format: EDMX (XML) Yes Reverse engineer model from database: Command line Yes Reverse engineer model from database: VS wizard Yes Incremental update model from database Yes Querying Data EF6.</description>
    </item>
    
    <item>
      <title>Updating a Many to Many relationship</title>
      <link>https://www.wikiod.com/entity-framework-core/updating-a-many-to-many-relationship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/entity-framework-core/updating-a-many-to-many-relationship/</guid>
      <description>How to update a Many to Many relationship in EF Core:
MVC POST Edit example # Say we have a Product class with Multiple Colors which can be on many Products.
public class Product { public int ProductId { get; set; } public ICollection&amp;lt;ColorProduct&amp;gt; ColorProducts { get; set; } } public class ColorProduct { public int ProductId { get; set; } public int ColorId { get; set; } public virtual Color Color { get; set; } public virtual Product Product { get; set; } } public class Color { public int ColorId { get; set; } public ICollection&amp;lt;ColorProduct&amp;gt; ColorProducts { get; set; } } Using this extension to make it easier:</description>
    </item>
    
  </channel>
</rss>

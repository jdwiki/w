<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twitch Tutorial on </title>
    <link>https://www.wikiod.com/docs/twitch/</link>
    <description>Recent content in twitch Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/twitch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with twitch</title>
      <link>https://www.wikiod.com/twitch/getting-started-with-twitch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/getting-started-with-twitch/</guid>
      <description>Get the OAuth token from the URL fragment # If the user authorizes your application, they will be redirected to the following URL:
https://[your registered redirect URI]/#access_token=[an access token] &amp;amp;scope=[authorized scopes] Note that the access token is in the URL fragment and not the query string. This means the value will not show up in HTTP requests to your server. URL fragments can be accessed from JavaScript with document.location.hash.
Requesting a token # The Implicit Grant flow is best suited for Web applications.</description>
    </item>
    
    <item>
      <title>Lists of Streamers by Game</title>
      <link>https://www.wikiod.com/twitch/lists-of-streamers-by-game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/lists-of-streamers-by-game/</guid>
      <description>Getting the First Page in Ruby # This Ruby example uses Mechanize, a library to automate web interactions.
client_id is an OAuth client_id.
game is the game directory to list.
require &#39;mechanize&#39; master_agent = Mechanize.new client_id = &amp;quot;123&amp;quot; game = &amp;quot;Minecraft&amp;quot; url = &amp;quot;https://api.twitch.tv/kraken/streams?game=#{game}&amp;amp;client_id=#{client_id}&amp;quot; final_list = [] master_agent.get(url) do |page| master_list = JSON.parse(page.body) master_list[&amp;quot;streams&amp;quot;].each do |stream| final_list &amp;lt;&amp;lt; stream[&amp;quot;channel&amp;quot;][&amp;quot;name&amp;quot;] end end </description>
    </item>
    
    <item>
      <title>Interactive Embed Video Player</title>
      <link>https://www.wikiod.com/twitch/interactive-embed-video-player/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/interactive-embed-video-player/</guid>
      <description>LIVE Streaming Video Player # Basic implementation:
&amp;lt;script src= &amp;quot;http://player.twitch.tv/js/embed/v1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=&amp;quot;PLAYER_DIV_ID&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var options = { width: 854, height: 480, channel: &amp;quot;monstercat&amp;quot;, }; var player = new Twitch.Player(&amp;quot;PLAYER_DIV_ID&amp;quot;, options); player.setVolume(0.5); &amp;lt;/script&amp;gt; With controls hidden:
&amp;lt;script src= &amp;quot;http://player.twitch.tv/js/embed/v1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=&amp;quot;PLAYER_DIV_ID&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var options = { width: 854, height: 480, channel: &amp;quot;monstercat&amp;quot;, controls: false, }; var player = new Twitch.Player(&amp;quot;PLAYER_DIV_ID&amp;quot;, options); player.setVolume(0.5); &amp;lt;/script&amp;gt; Recorded (not live) Video Player # &amp;lt;script src= &amp;quot;http://player.</description>
    </item>
    
    <item>
      <title>Calling Twitch APIs</title>
      <link>https://www.wikiod.com/twitch/calling-twitch-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/calling-twitch-apis/</guid>
      <description>This topic is meant to show a general way to call the Twitch API without OAuth. You can call any APIs found in the Twitch REST API documentation using this pattern. You would simply change the URL to the correct endpoint.
A Client-ID is required for all calls to the Twitch API. In these examples, the Client-ID is added as a header to each call. You can also add it with the client_id query string parameter.</description>
    </item>
    
    <item>
      <title>Twitch Chat (IRC) Bot</title>
      <link>https://www.wikiod.com/twitch/twitch-chat-irc-bot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/twitch-chat-irc-bot/</guid>
      <description>Twitch Chat is a simple IRC chat. For any serious development, there are multiple documents for it, including the most comprehensive and general ressource: http://ircdocs.horse/
Connection, Handshake # IRC is a basic, plaintext based TCP protocol. Connecting to Twitch works just like any regular IRC service with a difference in authenticating:
Connection Initiation &amp;gt; Handshake &amp;gt; Usage
The handshake is regularly the hardest part to get right:
After building up the connection to the server, you are required to provide PASS and then a NICK, where PASS is an OAuth-Token (which you can generate here) and USER being the username to this OAuth token.</description>
    </item>
    
    <item>
      <title>Getting an OAuth token using the Authorization Code Flow</title>
      <link>https://www.wikiod.com/twitch/getting-an-oauth-token-using-the-authorization-code-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/twitch/getting-an-oauth-token-using-the-authorization-code-flow/</guid>
      <description>Send the user to the authorize endpoint to get the authorization code # You&amp;rsquo;ll first send the user to the Twitch authorization endpoint. This URL is made up of a the base authorization URL (https://api.twitch.tv/kraken/oauth2/authorize) and query string parameters that define what you&amp;rsquo;re requesting. The required parameters are response_type, client_id, redirect_uri, and scope.
For the Authorization Code flow, the response_type parameter is always set to code. This signifies that you&amp;rsquo;re requesting an authorization code from the Twitch API.</description>
    </item>
    
  </channel>
</rss>

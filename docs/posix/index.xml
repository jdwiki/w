<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>POSIX Tutorial on </title>
    <link>https://www.wikiod.com/docs/posix/</link>
    <description>Recent content in POSIX Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/posix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with POSIX</title>
      <link>https://www.wikiod.com/posix/getting-started-with-posix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/getting-started-with-posix/</guid>
      <description>What is POSIX? # POSIX stands for &amp;ldquo;Portable Operating System Interface&amp;rdquo; and defines a set of standards to provide compatibility between different computing platforms. The current version of the standard is IEEE 1003.1 2016 and can be accessed from the OpenGroup POSIX specification. Previous versions include POSIX 2004 and POSIX 1997. The POSIX 2016 edition is essentially POSIX 2008 plus errata (there was a POSIX 2013 release too).
POSIX defines various tools interfaces, commands and APIs for UNIX-like operating systems and others.</description>
    </item>
    
    <item>
      <title>Timers</title>
      <link>https://www.wikiod.com/posix/timers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/timers/</guid>
      <description>POSIX Timer with SIGEV_THREAD notification # This example demonstrates POSIX Timer usage with CLOCK_REALTIME clock and SIGEV_THREAD notification method.
#include &amp;lt;stdio.h&amp;gt; /* for puts() */ #include &amp;lt;string.h&amp;gt; /* for memset() */ #include &amp;lt;unistd.h&amp;gt; /* for sleep() */ #include &amp;lt;stdlib.h&amp;gt; /* for EXIT_SUCCESS */ #include &amp;lt;signal.h&amp;gt; /* for `struct sigevent` and SIGEV_THREAD */ #include &amp;lt;time.h&amp;gt; /* for timer_create(), `struct itimerspec`, * timer_t and CLOCK_REALTIME */ void thread_handler(union sigval sv) { char *s = sv.</description>
    </item>
    
    <item>
      <title>Sockets</title>
      <link>https://www.wikiod.com/posix/sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/sockets/</guid>
      <description>TCP Concurrent Echo Server # In this example, we&amp;rsquo;ll create a simple echo server that will listen on the specified port, and being able to handle new connections:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;time.h&amp;gt; /** Connection handler - this will be executed in the new process, after forking, and it will read all the data from the socket, while available and to echo it on the local terminal.</description>
    </item>
    
    <item>
      <title>Signals</title>
      <link>https://www.wikiod.com/posix/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/signals/</guid>
      <description>Syntax # unsigned alarm(unsigned seconds); int kill(pid_t pid, int sig); Parameters # Function, Parameter(s), Return Value Description alarm() function name unsigned seconds Seconds to raise an alarm or 0 to cancel any pending alarm &amp;gt;= 0 0 if no other alarm was pending, else the number of seconds the pending alarm still had open. This function won&amp;rsquo;t fail. - - kill() function name pid_t pid . int sig 0 or signal ID 0, -1 On success 0 is returned, -1 on failure with setting errno to EINVAL, EPERMor ESRCH.</description>
    </item>
    
    <item>
      <title>Threads</title>
      <link>https://www.wikiod.com/posix/threads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/threads/</guid>
      <description>Simple Mutex Usage # POSIX thread library provides implementation of the mutex primitive, used for the mutual exclusion. Mutex is created using pthread_mutex_init, and destroyed using pthread_mutex_destroy. Obtaining a mutex can be done using pthread_mutex_lock or pthread_mutex_trylock, (depending if the timeout is desired) and releasing a mutex is done via pthread_mutex_unlock.
A simple example using a mutex to serialize access to critical section follows. First, the example without using a mutex.</description>
    </item>
    
    <item>
      <title>Processes</title>
      <link>https://www.wikiod.com/posix/processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/processes/</guid>
      <description>Syntax # pid_t getpid(void); pid_t getppid(void); pid_t fork(void); pid_t waitpid(pid_t pid, int *wstatus, int options); int execv(const char *path, char *const argv[]); Parameters # Function, Parameter(s), Return Value Description fork() function name none n/a Returns PID, 0, or -1 The calling process receives the PID of the newly create process or -1 on failure. The child (the newly created process) receive 0. In case of failure set errno to either EAGAIN or ENOMEM - - execv() function name const char *path String containing name of to executable (might inlcude path) char *const argv[] Array of string pointer as arguments Returns -1 on failure On success this function does not return.</description>
    </item>
    
    <item>
      <title>Filesystem</title>
      <link>https://www.wikiod.com/posix/filesystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/filesystem/</guid>
      <description>Remove files recursively (nftw, not thread-safe) # #define _XOPEN_SOURCE 500 #include &amp;lt;stdlib.h&amp;gt; /* for exit() */ #include &amp;lt;stdio.h&amp;gt; /* for remove() */ #include &amp;lt;ftw.h&amp;gt; /* for nftw() */ int unlink_cb( const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf) { return remove(fpath); } int rm_rf(const char *path) { return nftw(path, unlink_cb, 64 /* number of simultaneously opened fds, up to OPEN_MAX */, FTW_DEPTH | FTW_PHYS); } FTW_PHYS flag means do not follow symbolic links</description>
    </item>
    
    <item>
      <title>Pipes</title>
      <link>https://www.wikiod.com/posix/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/pipes/</guid>
      <description>Pipes are a mechanism for unidirectional interprocess or interthread communication within the scope of a single machine. Logically, a pipe consists of two connected termini, one to which data can be written, and another from which that data can subsequently be read, with a data buffer between such that writes and reads are not required to be synchronous. Pipes should be distinguished from shell pipelines, which are an application of pipes.</description>
    </item>
    
    <item>
      <title>File locks</title>
      <link>https://www.wikiod.com/posix/file-locks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/file-locks/</guid>
      <description>Syntax # int fcntl(int fd, int cmd, struct flock*); int lockf(int fd, int cmd, off_t len); POSIX record locks (fcntl) # This example demonstrates usage of POSIX record locks (a.k.a. process-associated locks), provided by fcntl function (POSIX base standard).
Notes:
Exclusive and shared locks are supported. Can be applied to a byte range, optionally automatically expanding when data is appended in future (controlled by struct flock). Locks are released on first close by the locking process of any file descriptor for the file, or when process terminates.</description>
    </item>
    
    <item>
      <title>InputOutput multiplexing</title>
      <link>https://www.wikiod.com/posix/inputoutput-multiplexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/posix/inputoutput-multiplexing/</guid>
      <description>IO may be blocking/non-blocking and synchronous/asynchronous. POSIX API provides synchronous blocking API (e.g. classic read, write, send, recv calls), synchronous non-blocking API (same functions, file descriptors opened with O_NONBLOCK flag and IO-multiplexing calls) and asynchonous API (functions starting with aio_).
Synchronous API is usually used with &amp;ldquo;one thread/process per fd&amp;rdquo; style. This is dreadful for resources. Non-blocking API allows to operate with a set of fds in one thread.
Poll # In this example we create a pair of connected sockets and send 4 strings from one to another and print received strings to console.</description>
    </item>
    
  </channel>
</rss>

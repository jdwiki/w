<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yii2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/yii2/</link>
    <description>Recent content in yii2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/yii2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with yii2</title>
      <link>https://www.wikiod.com/yii2/getting-started-with-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/getting-started-with-yii2/</guid>
      <description>Installation or Setup # Yii2 can be installed in two ways. They are
Installing via Composer Installing from an Archive File Installing via Composer # Installing Composer # If you do not already have Composer installed, you may do so by following the instructions at getcomposer.org. On Linux and Mac OS X, you&amp;rsquo;ll run the following commands:
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer For windows just download and install composer-setup.</description>
    </item>
    
    <item>
      <title>Active Record</title>
      <link>https://www.wikiod.com/yii2/active-record/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/active-record/</guid>
      <description>AR is perfect when you need to delete, update or create one or more records sequentially. Its support of dirty attributes (saving only what was really changed) results in optimized UPDATE statements which lifts the load from database significantly and reduces chances for various conflicts connected with editing same record by multiple persons at the same time.
If you don&amp;rsquo;t have really complex logic in your application and therefore it doesn&amp;rsquo;t require abstracting entities, AR is the best fit for deletes, updates and creates.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/yii2/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/validation/</guid>
      <description>Disable Validation Error Message On Focus / Key Up # By default error message appears below textbox in &amp;lt;div class=&amp;quot;help-block&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; on keyUp or after pressing submit button if any validation constraints aren&amp;rsquo;t met.
Sometimes we want a message on submit only i.e. no validation at onKeyup event.
Let&amp;rsquo;s check yii2/widgets/ActiveForm.php file:
&amp;lt;?php namespace yii\widgets; use Yii; use yii\base\InvalidCallException; use yii\base\Widget; use yii\base\Model; use yii\helpers\ArrayHelper; use yii\helpers\Url; use yii\helpers\Html; use yii\helpers\Json; class ActiveForm extends Widget { public $action = &#39;&#39;; public $method = &#39;post&#39;; public $options = []; .</description>
    </item>
    
    <item>
      <title>Cookies</title>
      <link>https://www.wikiod.com/yii2/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/cookies/</guid>
      <description>Cookies are part of HTTP request so it&amp;rsquo;s a good idea to do both in controller which responsibility is exactly dealing with request and response.
Cross-subdomain authentication and identity cookies # In case of autologin or &amp;ldquo;remember me&amp;rdquo; cookie, the same quirks as in case of subdomain cookies are applying. But this time you need to configure user component, setting identityCookie array to desired cookie config.
Open you application config file and add identityCookie parameters to user component configuration:</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://www.wikiod.com/yii2/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/testing/</guid>
      <description>How to mock ActiveRecord # If you want to mock AR that doesn&amp;rsquo;t try to connect to database you can do it in the following way (if using PHPUnit):
$post = $this-&amp;gt;getMockBuilder(&#39;\app\model\Post&#39;) -&amp;gt;setMethods([&#39;save&#39;, &#39;attributes&#39;]) -&amp;gt;getMock(); $post-&amp;gt;method(&#39;save&#39;)-&amp;gt;willReturn(true); $post-&amp;gt;method(&#39;attributes&#39;)-&amp;gt;willReturn([ &#39;id&#39;, &#39;status&#39;, &#39;title&#39;, &#39;description&#39;, &#39;text&#39; ]); The catch is that we need to override attributes() method since ActiveRecord by default is getting attributes list from database schema which we&amp;rsquo;re trying to avoid.
Set up testing environment # Install Codeception:</description>
    </item>
    
    <item>
      <title>File Uploads</title>
      <link>https://www.wikiod.com/yii2/file-uploads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/file-uploads/</guid>
      <description>How to do it # Uploading Files # Uploading files in Yii is usually done with the help of [[yii\web\UploadedFile]] which encapsulates each uploaded file as an UploadedFile object. Combined with [[yii\widgets\ActiveForm]] and models, you can easily implement a secure file uploading mechanism.
Creating Models # Like working with plain text inputs, to upload a single file you would create a model class and use an attribute of the model to keep the uploaded file instance.</description>
    </item>
    
    <item>
      <title>Yii2 ActiveForm</title>
      <link>https://www.wikiod.com/yii2/yii2-activeform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/yii2-activeform/</guid>
      <description>Form Fields In Yii2 # Showing Basic Example of the View Page in Yii2 For New Learners
These are basic classes you must to add to create form using yii2 ActiveForm
&amp;lt;?php Use yii\helpers\Html; Use yii\widgets\ActiveForm; The Below line will start the form tag for our form below showing example shows that how to specify id for the form and how to apply any classes for the form..
$form =ActiveForm::begin([ &#39;id&#39;=&amp;gt; &#39;login-form&#39;, &#39;options&#39;=&amp;gt; [&#39;class&#39; =&amp;gt; &#39;form-horizontal&#39;],]) ?</description>
    </item>
    
    <item>
      <title>Ajax Request</title>
      <link>https://www.wikiod.com/yii2/ajax-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/ajax-request/</guid>
      <description>Submitting Ajax form # View file: # &amp;lt;?php use yii; use yii\bootstrap\ActiveForm; use yii\helpers\Html; ?&amp;gt; &amp;lt;?php $form = ActiveForm::begin([ &#39;action&#39; =&amp;gt; [&#39;comments/ajax-comment&#39;], &#39;options&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;comment-form&#39; ] ]); ?&amp;gt; &amp;lt;?= $form-&amp;gt;field($model, &#39;comment&#39;); ?&amp;gt; &amp;lt;?= Html::submitButton(&amp;quot;Submit&amp;quot;, [&#39;class&#39; =&amp;gt; &amp;quot;btn&amp;quot;]); ?&amp;gt; &amp;lt;?php ActiveForm::end(); ?&amp;gt; Javascript: # jQuery(document).ready(function($) { $(&amp;quot;.comment-form&amp;quot;).submit(function(event) { event.preventDefault(); // stopping submitting var data = $(this).serializeArray(); var url = $(this).attr(&#39;action&#39;); $.ajax({ url: url, type: &#39;post&#39;, dataType: &#39;json&#39;, data: data }) .</description>
    </item>
    
    <item>
      <title>Pjax</title>
      <link>https://www.wikiod.com/yii2/pjax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/pjax/</guid>
      <description>Step 1 Add Structure # In views\site\form-submission.php
&amp;lt;?php Pjax::begin([&#39;id&#39;=&amp;gt;&#39;id-pjax&#39;]); ?&amp;gt; &amp;lt;?= Html::beginForm([&#39;site/form-submission&#39;], &#39;post&#39;, [&#39;data-pjax&#39; =&amp;gt; &#39;&#39;, &#39;class&#39; =&amp;gt; &#39;form-inline&#39;]); ?&amp;gt; &amp;lt;?= Html::input(&#39;text&#39;, &#39;string&#39;, Yii::$app-&amp;gt;request-&amp;gt;post(&#39;string&#39;), [&#39;class&#39; =&amp;gt; &#39;form-control&#39;]) ?&amp;gt; &amp;lt;?= Html::submitButton(&#39;Hash String&#39;, [&#39;class&#39; =&amp;gt; &#39;btn btn-lg btn-primary&#39;, &#39;name&#39; =&amp;gt; &#39;hash-button&#39;]) ?&amp;gt; &amp;lt;?= Html::endForm() ?&amp;gt; &amp;lt;h3&amp;gt;&amp;lt;?= $stringHash ?&amp;gt;&amp;lt;/h3&amp;gt; &amp;lt;?php Pjax::end(); ?&amp;gt; how to use pjax # Add this line at the beginning of your view.
&amp;lt;?php use yii\widgets\Pjax; ?&amp;gt; Add the following two lines around the content that needs partial updating.</description>
    </item>
    
    <item>
      <title>Working with Databases</title>
      <link>https://www.wikiod.com/yii2/working-with-databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/yii2/working-with-databases/</guid>
      <description>Using Yii2 query builder # Yii2 provides efficient ways to retrieve data from the database.Consider an example of a simple employee table having fields emp_id, emp_name and emp_salary. In order to retrieve the employee names and their salaries, we use the query.
select emp_name,emp_salary from employee To generate the above query in Yii2, there are a lot of methods.One of the method is to use a yii\db\Query object.
//creates a new \yii\db\Query() object $query=new \yii\db\Query(); $rows=$query-&amp;gt;select([&#39;emp_name&#39;,&#39;emp_salary&#39;]) //specify required columns in an array -&amp;gt;from(&#39;employee&#39;) //specify table name -&amp;gt;all(); //returns an array of rows with each row being an associative array of name-value pairs.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>firebase Tutorial on </title>
    <link>https://www.wikiod.com/docs/firebase/</link>
    <description>Recent content in firebase Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/firebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with firebase</title>
      <link>https://www.wikiod.com/firebase/getting-started-with-firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/getting-started-with-firebase/</guid>
      <description>Add Firebase to Your Android Project # Here the steps required to create a Firebase project and to connect with an Android app.
Add Firebase to your app # Create a Firebase project in the Firebase console and click Create New Project.
Click Add Firebase to your Android app and follow the setup steps.
When prompted, enter your app&amp;rsquo;s package name.
It&amp;rsquo;s important to enter the package name your app is using; this can only be set when you add an app to your Firebase project.</description>
    </item>
    
    <item>
      <title>Database Rules</title>
      <link>https://www.wikiod.com/firebase/database-rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/database-rules/</guid>
      <description>With Firebase Realtime Database, your Database rules is your server side security. You need to be very careful and aware of who has access to your database. It is important that no one gains access to your data that shouldn&amp;rsquo;t.
By default, the Firebase Realtime Database rules allow any authenticated user to read and write all the data, this is probably not what you want your app to do.
Take a look at the below examples for different scenarios.</description>
    </item>
    
    <item>
      <title>Using Firebase with Node</title>
      <link>https://www.wikiod.com/firebase/using-firebase-with-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/using-firebase-with-node/</guid>
      <description>Hello World Firebase Realtime Database in Node # System Requirements:
Node JS Getting Started
First Go to Firebase Console and Create New Project.
After Creating the project, in project click on settings icon besides project Name in left sidebar and select Permissions.
On Permissions Page Click on Service accounts in left sidebar then click on Create Service Account
In the popup window enter your service account name and choose Account Role and select Furnish a new private key and after that select JSON and click Create(Leave Enable Google App Domain-wide Delegation Unchecked).</description>
    </item>
    
    <item>
      <title>How to use FirebaseRecyclerAdapter instead of RecyclerAdapter?</title>
      <link>https://www.wikiod.com/firebase/how-to-use-firebaserecycleradapter-instead-of-recycleradapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/how-to-use-firebaserecycleradapter-instead-of-recycleradapter/</guid>
      <description>Here is the Example for Use FirebaseUi component FirebaseRecyclerAdapter # Hello friends before start code we have need to declare dependency for access firebase ui component, so here is the dependency which you can put it in your gradel other wise you can add dependency as jar also.
compile &#39;com.firebaseui:firebase-ui-database:0.4.0&#39; Then after we are querying in firebase database for data like following way
DatabaseReference databaseReference = database.getReference().child(&amp;quot;users&amp;quot;); Query query = databaseReference.</description>
    </item>
    
    <item>
      <title>How to use the Firebase Database to keep a list of Firebase Authentication users</title>
      <link>https://www.wikiod.com/firebase/how-to-use-the-firebase-database-to-keep-a-list-of-firebase-authentication-users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/how-to-use-the-firebase-database-to-keep-a-list-of-firebase-authentication-users/</guid>
      <description>How to save user profile data # Every authenticated user has a Firebase uid that&amp;rsquo;s unique across all providers and is returned in the result of every authentication method.
A good way to store your user&amp;rsquo;s data is to create a node to keep all the users&amp;rsquo;s data and to protect it using your security rules
- Database
{ &amp;quot;users&amp;quot;: { &amp;quot;uid1&amp;quot; : { &amp;quot;name&amp;quot;: &amp;quot;Steve&amp;quot;, &amp;quot;surname&amp;quot;: &amp;quot;Jobs&amp;quot; }, &amp;quot;uid2&amp;quot; : { &amp;quot;name&amp;quot;: &amp;quot;Bill&amp;quot;, &amp;quot;surname&amp;quot;: &amp;quot;Gates&amp;quot; } } } - Security</description>
    </item>
    
    <item>
      <title>Crash Reporting</title>
      <link>https://www.wikiod.com/firebase/crash-reporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/crash-reporting/</guid>
      <description>Crash Reporting creates detailed reports of the errors in your app.
Errors are grouped into clusters of similar stack traces and triaged by the severity of impact on your users. In addition to automatic reports, you can log custom events to help capture the steps leading up to a crash.
Crash Reporting is currently in beta release while we resolve some known issues on Android and iOS.
Official Documetantion # https://firebase.</description>
    </item>
    
    <item>
      <title>How do I listen for errors when accessing the database?</title>
      <link>https://www.wikiod.com/firebase/how-do-i-listen-for-errors-when-accessing-the-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/how-do-i-listen-for-errors-when-accessing-the-database/</guid>
      <description>There are many reasons a read or write operation may fail. A frequent one is because your security rules reject the operation, for example because you&amp;rsquo;re not authenticated (by default a database can only be accessed by an authenticated user) or because you&amp;rsquo;re writing/listening at a location where you don&amp;rsquo;t have permission.
Detect errors when writing a value on Android # There are many reasons a write operation may fail. A frequent one is because your security rules reject the operation, for example because you&amp;rsquo;re not authenticated (by default a database can only be accessed by an authenticated user).</description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>https://www.wikiod.com/firebase/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/storage/</guid>
      <description>Firebase Storage provides secure file uploads and downloads for your Firebase apps, regardless of network quality. You can use it to store images, audio, video, or other user-generated content. Firebase Storage is backed by Google Cloud Storage, a powerful, simple, and cost-effective object storage service.
Firebase Storage stores your files in a Google Cloud Storage bucket shared with the default Google App Engine app, making them accessible through both Firebase and Google Cloud APIs.</description>
    </item>
    
    <item>
      <title>FirebaseUI (Android)</title>
      <link>https://www.wikiod.com/firebase/firebaseui-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/firebaseui-android/</guid>
      <description>Adding the dependencies # FirebaseUI is just an open-source library by Google that provides easy UI bindings for Firebase Auth and Firebase Database.
To begin adding FirebaseUI to your app, add these dependencies in your app&amp;rsquo;s build.gradle file:
android { // ... } dependencies { // Required for FirebaseUI Database compile &#39;com.google.firebase:firebase-database:9.4.0&#39; compile &#39;com.firebaseui:firebase-ui-database:0.5.1&#39; // FirebaseUI Auth only compile &#39;com.google.firebase:firebase-auth:9.4.0&#39; compile &#39;com.firebaseui:firebase-ui-auth:0.5.1&#39; // Single dependency if you&#39;re using both compile &#39;com.</description>
    </item>
    
    <item>
      <title>Firebase Offline Capabilities</title>
      <link>https://www.wikiod.com/firebase/firebase-offline-capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/firebase/firebase-offline-capabilities/</guid>
      <description>In this post you will find the different ways to implement offline capabilities when usingFirebase , information about when and why could be a good idea enable offline capabilities and examples of it with Android platform.
What should I use? Disk persistence or keepSynced calls?
From my experience I can say that it always depends of what your app is working, and how you manage the transactions and database of your application.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Maven Tutorial on </title>
    <link>https://www.wikiod.com/docs/maven/</link>
    <description>Recent content in Apache Maven Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Apache Maven</title>
      <link>https://www.wikiod.com/maven/getting-started-with-apache-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/getting-started-with-apache-maven/</guid>
      <description>Installation or Setup # Binary releases of Maven can be downloaded from the Maven website.
The binary comes as a zip archive or as a tar.gz archive. After downloading it, the instructions from the install page can be followed:
Ensure the JAVA_HOME environment variable is set and points to your JDK installation (not JRE). For example, on a Windows machine, this installation folder can correspond C:\Program Files\Java\jdk1.8.0_51. Extract the distribution archive in the directory of your choice.</description>
    </item>
    
    <item>
      <title>Maven Assembly Plugin</title>
      <link>https://www.wikiod.com/maven/maven-assembly-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/maven-assembly-plugin/</guid>
      <description>Creating .jar file with all the dependencies of the project # To create a JAR containing all of its dependencies, it is possible to use the built-in descriptor format jar-with-dependencies. The following example configures an execution of the Assembly Plugin bound to the package phase, using this built-in descriptor and declaring a main class of com.example:
&amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;archive&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;mainClass&amp;gt;com.example&amp;lt;/mainClass&amp;gt; &amp;lt;/manifest&amp;gt; &amp;lt;/archive&amp;gt; &amp;lt;descriptorRefs&amp;gt; &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt; &amp;lt;/descriptorRefs&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; Running:</description>
    </item>
    
    <item>
      <title>POM - Project Object Model</title>
      <link>https://www.wikiod.com/maven/pom---project-object-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/pom---project-object-model/</guid>
      <description>POM structure # Project Object Model is the basic unit of Maven and defines the project structure, dependencies, etc.
The following are very minimal to create a POM:
project root modelVersion – should be set to 4.0.0 groupId – the ID of the project&amp;rsquo;s group artifactId – the ID of the artifact (project) version – the version of the artifact under the specified group groupId, artifactId and version are called Maven coordinates and sometimes abbreviated with GAV.</description>
    </item>
    
    <item>
      <title>Create a Maven Plugin</title>
      <link>https://www.wikiod.com/maven/create-a-maven-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/create-a-maven-plugin/</guid>
      <description>Maven allows you to implement and use custom plugins. These plugins allow additional behaviour to be bound to any phase of the Maven lifecycle.
Each Maven goal is created by implementing a MOJO (Maven Ordinary Java Object): a Java class implemented with annotations that describes how to invoke it.
The goal prefix of a plugin is derived from its artifact name. An artifact hello-world-plugin creates a goal prefix hello-world. The hello goal can then be run with mvn hello-world:hello.</description>
    </item>
    
    <item>
      <title>Eclipse integration</title>
      <link>https://www.wikiod.com/maven/eclipse-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/eclipse-integration/</guid>
      <description>Install Maven in Eclipse # You can take advantage of Apache Maven&amp;rsquo;s powerful features in Eclipse by installing the M2Eclipse feature. Follow these steps to install Maven in Eclipse:
Open Eclipse and select Help → Install New Software…
In the opened dialog, select the Add&amp;hellip; button to add a new repository.
Fill in the form with the information below and confirm with OK:
Name: M2Eclipse
Location: http://download.eclipse.org/technology/m2e/releases
After the Pending&amp;hellip; finishes, Select All and select Next.</description>
    </item>
    
    <item>
      <title>Maven Tomcat Plugin</title>
      <link>https://www.wikiod.com/maven/maven-tomcat-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/maven-tomcat-plugin/</guid>
      <description>Start tomcat using maven plugin. # In the example we will start tomcat 7 using maven plugin, optionally add user/password protection for REST end point. Also adding feature of building war.
Add below section in plugin section of pom for tomcat
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat7-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;url&amp;gt;http://localhost:8090/manager&amp;lt;/url&amp;gt; &amp;lt;server&amp;gt;localhost&amp;lt;/server&amp;gt; &amp;lt;port&amp;gt;8191&amp;lt;/port&amp;gt; &amp;lt;path&amp;gt;/${project.build.finalName}&amp;lt;/path&amp;gt; &amp;lt;tomcatUsers&amp;gt;src/main/tomcatconf/tomcat-users.xml&amp;lt;/tomcatUsers&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Ensure maven war plugin is added and web.xml is present at location /src/main/webapp/WEB-INF/web.xml. Below is example of war plugin.</description>
    </item>
    
    <item>
      <title>Maven Build Cycle</title>
      <link>https://www.wikiod.com/maven/maven-build-cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/maven-build-cycle/</guid>
      <description>Following is a complete list of Maven&amp;rsquo;s default build lifecycle phases. Each of these phases is invoked by adding it to the mvn command, e.g. mvn install.
Maven Build Lifecycle Phases # validate Validates whether the project is correct and all the required information are available for the build.
initialize Initializes the build environment, e.g. sets properties or creates directories.
generate-sources Generates source code to be processed in the &amp;lsquo;compile&amp;rsquo; phase.</description>
    </item>
    
    <item>
      <title>Maven Surefire Plugin</title>
      <link>https://www.wikiod.com/maven/maven-surefire-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/maven-surefire-plugin/</guid>
      <description>Syntax # mvn test mvn -Dtest=com.example.package.ExampleTest test Testing a Java class with JUnit and the Maven Surefire plugin # The Maven Surefire plugin runs during the test phase of the Maven build process or when test is specified as a Maven goal. The following directory structure and minimum pom.xml file will configure Maven to run a test.
Directory structure inside the project&amp;rsquo;s root directory:
─ project_root ├─ pom.xml ├─ src │ ├─ main │ │ └─ java │ └─ test │ └─ java └─ target └─ .</description>
    </item>
    
    <item>
      <title>Access Maven informations in code</title>
      <link>https://www.wikiod.com/maven/access-maven-informations-in-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/access-maven-informations-in-code/</guid>
      <description>It is sometimes useful to get the maven properties, such as the current version, in code. Here are some ways to to it.
Getting the version number from within a jar # If you package your application in a jar using the maven-jar-plugin or the maven-assembly-plugin, an easy way to get the current pom version is to add an entry in the manifest, which is then available from Java.
The secret is to set the addDefaultImplementationEntries flag to true (and the addDefaultSpecificationEntries is you also need the artifact id).</description>
    </item>
    
    <item>
      <title>Generate FIXMETODO reports using the taglist-maven-plugin</title>
      <link>https://www.wikiod.com/maven/generate-fixmetodo-reports-using-the-taglist-maven-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/maven/generate-fixmetodo-reports-using-the-taglist-maven-plugin/</guid>
      <description>This is a small code (xml) snippet to highlight how to use the taglist-maven-plugin to generate customized reports (of TODO, FIXME work &amp;hellip;)
pom.xml to generate a FIXME report # &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;project-info-reports&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.9&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;index&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;phase&amp;gt;site&amp;lt;/phase&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;reporting&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-project-info-reports-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.9&amp;lt;/version&amp;gt; &amp;lt;reportSets&amp;gt; &amp;lt;reportSet&amp;gt; &amp;lt;reports&amp;gt; &amp;lt;report&amp;gt;index&amp;lt;/report&amp;gt; &amp;lt;report&amp;gt;issue-tracking&amp;lt;/report&amp;gt; &amp;lt;/reports&amp;gt; &amp;lt;/reportSet&amp;gt; &amp;lt;/reportSets&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;taglist-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;tagListOptions&amp;gt; &amp;lt;tagClasse&amp;gt; &amp;lt;displayName&amp;gt;FIXME Work&amp;lt;/displayName&amp;gt; &amp;lt;tags&amp;gt; &amp;lt;tag&amp;gt; &amp;lt;matchString&amp;gt;FIXME&amp;lt;/matchString&amp;gt; &amp;lt;matchType&amp;gt;ignoreCase&amp;lt;/matchType&amp;gt; &amp;lt;/tag&amp;gt; &amp;lt;tag&amp;gt; &amp;lt;matchString&amp;gt;@fixme&amp;lt;/matchString&amp;gt; &amp;lt;matchType&amp;gt;ignoreCase&amp;lt;/matchType&amp;gt; &amp;lt;/tag&amp;gt; &amp;lt;/tags&amp;gt; &amp;lt;/tagClasse&amp;gt; &amp;lt;tagClasse&amp;gt; &amp;lt;displayName&amp;gt;TODO Work&amp;lt;/displayName&amp;gt; &amp;lt;tags&amp;gt; &amp;lt;tag&amp;gt; &amp;lt;matchString&amp;gt;TODO&amp;lt;/matchString&amp;gt; &amp;lt;matchType&amp;gt;ignoreCase&amp;lt;/matchType&amp;gt; &amp;lt;/tag&amp;gt; &amp;lt;tag&amp;gt; &amp;lt;matchString&amp;gt;@todo&amp;lt;/matchString&amp;gt; &amp;lt;matchType&amp;gt;ignoreCase&amp;lt;/matchType&amp;gt; &amp;lt;/tag&amp;gt; &amp;lt;/tags&amp;gt; &amp;lt;/tagClasse&amp;gt; &amp;lt;/tagListOptions&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/reporting&amp;gt; Then run</description>
    </item>
    
  </channel>
</rss>

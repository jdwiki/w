<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dependency-injection Tutorial on </title>
    <link>https://www.wikiod.com/docs/dependency-injection/</link>
    <description>Recent content in dependency-injection Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with dependency-injection</title>
      <link>https://www.wikiod.com/dependency-injection/getting-started-with-dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dependency-injection/getting-started-with-dependency-injection/</guid>
      <description>What is a basic example of dependency injection? # Here is a class (Dog) creating its own dependency (Food):
class Dog { public Dog() { var food = new Food(); this.eat(food); } } Here is the same class being injected with its dependency using constructor injection:
class Dog { public Dog(Food food) { this.eat(food); } } </description>
    </item>
    
    <item>
      <title>.NET - Pure DI examples</title>
      <link>https://www.wikiod.com/dependency-injection/net---pure-di-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dependency-injection/net---pure-di-examples/</guid>
      <description>An example of how to use dependency injection in .net without using a container. Based on examples by Mark Seemann http://blog.ploeh.dk/
Web Api # public interface ISingleton : IDisposable { } public class TransientDependency { } public class Singleton : ISingleton { public void Dispose() { } } public class CompositionRoot : IDisposable, IHttpControllerActivator { private readonly ISingleton _singleton; // pass in any true singletons i.e. cross application instance singletons public CompositionRoot() { // intitialise any application instance singletons _singleton = new Singleton(); } public void Dispose() { _singleton.</description>
    </item>
    
    <item>
      <title>Constructor Injection</title>
      <link>https://www.wikiod.com/dependency-injection/constructor-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dependency-injection/constructor-injection/</guid>
      <description>Constructor Injection # Classes have instance variable (dependencies), on which they call methods.
Example taken from http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html for reference
public class Example { private DatabaseThingie myDatabase; public Example() { myDatabase = new DatabaseThingie(); } public void DoStuff() { ... myDatabase.GetData(); ... } } This class has one dependency called DatabaseThingie. Here in this example class Example is responsible for creating its own dependencies, thereby violating Single Responsibility Principle. Class has some primary responsibility + it is creating its won dependencies.</description>
    </item>
    
    <item>
      <title>Method injection</title>
      <link>https://www.wikiod.com/dependency-injection/method-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dependency-injection/method-injection/</guid>
      <description>A Simple Example of Method Injection in c# # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new Dependency(); var bar = new ClassWithDependency(); bar.DoSomething(foo); //Inject dependency as method parameter Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class Dependency: IDependency { public void DoSomething() { Console.WriteLine(&amp;quot;Hello&amp;quot;); } } public class ClassWithDependency { public void DoSomething(IDependency dependency) { dependency.DoSomething(); } } } </description>
    </item>
    
    <item>
      <title>Property Injection</title>
      <link>https://www.wikiod.com/dependency-injection/property-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dependency-injection/property-injection/</guid>
      <description>A Very Simple Example of Property Injection with C# with a Lazy-loaded Local Default # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new ClassWithDependency(); foo.DoSomething(); var bar = new InjectedDependency(); foo.Dependency = bar; //Injecting the dependency via a property foo.DoSomething(); Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class DefaultDependency: IDependency { public void DoSomething() { Console.WriteLine(&amp;quot;Default behaviour&amp;quot;); } } public class InjectedDependency: IDependency { public void DoSomething() { Console.</description>
    </item>
    
  </channel>
</rss>

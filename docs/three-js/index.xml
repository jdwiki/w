<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>three.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/three-js/</link>
    <description>Recent content in three.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/three-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with three.js</title>
      <link>https://www.wikiod.com/three-js/getting-started-with-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/getting-started-with-threejs/</guid>
      <description>Installation or Setup # You can install three.js via npm:
npm install three
You can add it from a CDN to your HTML:
You can use the three.js editor to give it a try and download the project as an example or starting point.
Simple Boilerplate : spinning cube and orbit controls with damping # This is the basic HTML file that can be used as a boilerplate when starting a project.</description>
    </item>
    
    <item>
      <title>Camera Controls in Three.js</title>
      <link>https://www.wikiod.com/three-js/camera-controls-in-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/camera-controls-in-threejs/</guid>
      <description>This document outlines how you can easily add some existing Camera Controls to your scene, as well as provide guidance on creating custom controls.
Note, the pre-made control scripts can be found in the /examples/js/controls folder of the library.
Orbit Controls # An Orbit Camera is one that allows the user to rotate around a central point, but while keeping a particular axis locked. This is extremely popular because it prevents the scene from getting &amp;ldquo;tilted&amp;rdquo; off-axis.</description>
    </item>
    
    <item>
      <title>Object Picking</title>
      <link>https://www.wikiod.com/three-js/object-picking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/object-picking/</guid>
      <description>Object picking / Raycasting # Raycasting means throwing a ray from the mouse position on the screen to the scene, this is how threejs determines what object you want to click on if you have implemented it. Threejs gets that information using an octree, but still in production you may not want to compute the result at each frame or on the mousemove event, but rather on the click event for a more accessible app with low requirements.</description>
    </item>
    
    <item>
      <title>Geometries</title>
      <link>https://www.wikiod.com/three-js/geometries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/geometries/</guid>
      <description>Examples work as of three.js R79 (revision 79).
THREE.BoxGeometry # THREE.BoxGeometry builds boxes such as cuboids and cubes.
Cubes # Cubes created using THREE.BoxGeometry would use the same length for all sides.
JavaScript
//Creates scene and camera var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); //Creates renderer and adds it to the DOM var renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.</description>
    </item>
    
    <item>
      <title>Render Loops for Animation Dynamically updating objects</title>
      <link>https://www.wikiod.com/three-js/render-loops-for-animation-dynamically-updating-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/render-loops-for-animation-dynamically-updating-objects/</guid>
      <description>This document describes some common ways to add animation directly into your Three.js scenes. While there are libraries and frameworks that can add dynamic movement to your scene (tweens, physics, etc), it is helpful to understand how you can do this yourself simply with a few lines of code.
The core concept of animation is updating an object&amp;rsquo;s properties (rotation and translation, usually) in small amounts over a period of time.</description>
    </item>
    
    <item>
      <title>Textures and Materials</title>
      <link>https://www.wikiod.com/three-js/textures-and-materials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/textures-and-materials/</guid>
      <description>A nice introduction to material and textures.
Diffuse, Bump, Specular, and Transparent Textures.
Parameters # Parameter Details color Numeric value of the RGB component of the color. intensity Numeric value of the light&amp;rsquo;s strength/intensity. fov Camera frustum vertical field of view. aspect Camera frustum aspect ratio. near Camera frustum near plane. far Camera frustum far plane. radius sphere radius. Default is 50. widthSegments number of horizontal segments. Minimum value is 3, and the default is 8.</description>
    </item>
    
    <item>
      <title>Meshes</title>
      <link>https://www.wikiod.com/three-js/meshes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/three-js/meshes/</guid>
      <description>A Three.js Mesh is a base class that inherits from Object3d and is used to instantiate polygonal objects by combining a Geometry with a Material. Mesh is also the base class for the more advanced MorphAnimMesh and SkinnedMesh classes.
Syntax # new THREE.Mesh(geometry, material); Both the geometry and material are optional and will default to BufferGeometry and MeshBasicMaterial respectively if they are not provided in the constructor.
Render a cube mesh with a box geometry and a basic material # var scene = new THREE.</description>
    </item>
    
  </channel>
</rss>

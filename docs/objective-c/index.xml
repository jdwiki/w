<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective-C Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/objective-c/</link>
    <description>Recent content in Objective-C Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Objective-C Language</title>
      <link>https://www.wikiod.com/objective-c/getting-started-with-objective-c-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/getting-started-with-objective-c-language/</guid>
      <description>Hello World # This program will output &amp;ldquo;Hello World!&amp;rdquo;
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, char * argv[]) { NSLog(@&amp;quot;Hello World!&amp;quot;); } #import is a pre-processor directive, which indicates we want to import or include the information from that file into the program. In this case, the compiler will copy the contents of Foundation.h in the Foundation framework to the top of the file. The main difference between #import and #include is that #import is &amp;ldquo;smart&amp;rdquo; enough to not reprocess files that have already been included in other #includes.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://www.wikiod.com/objective-c/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/logging/</guid>
      <description>Syntax # NSLog(@&amp;ldquo;text to log&amp;rdquo;); // Basic text log NSLog(@&amp;ldquo;data: %f - %.2f&amp;rdquo;, myFloat, anotherFloat); // Logging text including float numbers. NSLog(@&amp;ldquo;data: %i&amp;rdquo;, myInteger); // Logging text including integer number. NSLog(@&amp;ldquo;data: %@&amp;rdquo;, myStringOrObject); // Logging text referencing another String or any NSObject derived object. For logging various types of objects and data-types refer to: Objective-C, Format Specifiers
Logging # NSLog(@&amp;quot;Log Message!&amp;quot;); NSLog(@&amp;quot;NSString value: %@&amp;quot;, stringValue); NSLog(@&amp;quot;Integer value: %d&amp;quot;, intValue); The first argument of NSLog is an NSString containing the log message format.</description>
    </item>
    
    <item>
      <title>NSString</title>
      <link>https://www.wikiod.com/objective-c/nsstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/nsstring/</guid>
      <description>The NSString class is a part of Foundation framework to work with strings (series of characters). It also includes methods for comparing, searching and modifying strings.
For nesting various types of objects and data-types into NSStrings refer to: Objective-C, Format Specifiers
Encoding and Decoding # // decode NSString *string = [[NSString alloc] initWithData:utf8Data encoding:NSUTF8StringEncoding]; // encode NSData *utf8Data = [string dataUsingEncoding:NSUTF8StringEncoding]; Some supported encodings are:
NSASCIIStringEncoding NSUTF8StringEncoding NSUTF16StringEncoding (== NSUnicodeStringEncoding) Note that utf8Data.</description>
    </item>
    
    <item>
      <title>Blocks</title>
      <link>https://www.wikiod.com/objective-c/blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/blocks/</guid>
      <description>Syntax # // Declare as a local variable:
returnType (^blockName)(parameterType1, parameterType2, &amp;hellip;) = ^returnType(argument1, argument2, &amp;hellip;) {&amp;hellip;};
// Declare as a property:
@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);
// Declare as a method parameter:
- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;
// Declare as an argument to a method call:
[someObject someMethodThatTakesABlock:^returnType (parameters) {&amp;hellip;}];
// Declare as a typedef:
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&amp;hellip;};
// Declare a C function return a block object:</description>
    </item>
    
    <item>
      <title>Singletons</title>
      <link>https://www.wikiod.com/objective-c/singletons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/singletons/</guid>
      <description>Just make sure you read this thread ( http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons ) before using it.
Using Grand Central Dispatch (GCD) # GCD will guarantee that your singleton only gets instantiated once, even if called from multiple threads. Insert this into any class for a singleton instance called shared.
+ (instancetype)shared { // Variable that will point to the singleton instance. The `static` // modifier makes it behave like a global variable: the value assigned // to it will &amp;quot;survive&amp;quot; the method call.</description>
    </item>
    
    <item>
      <title>Low-level Runtime Environment</title>
      <link>https://www.wikiod.com/objective-c/low-level-runtime-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/low-level-runtime-environment/</guid>
      <description>In order to use the Objective-C runtime, you need to import it.
#import &amp;lt;objc/objc.h&amp;gt; Augmenting methods using Method Swizzling # The Objective-C runtime allows you to change the implementation of a method at runtime. This is called method swizzling and is often used to exchange the implementations of two methods. For example, if the methods foo and bar are exchanged, sending the message foo will now execute the implementation of bar and vice versa.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://www.wikiod.com/objective-c/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/protocols/</guid>
      <description>Optional and required methods # By default, all the methods declared in a protocol are required. This means that any class that conforms to this protocol must implement those methods.
It is also possible to declare optional methods. These method can be implemented only if needed.
You mark optional methods with the @optional directive.
@protocol NewProtocol - (void)protocolMethod:(id)argument; @optional - (id)anotherMethod; @end In this case, only anotherMethod is marked as optional; the methods without the @optional directive are assumed to be required.</description>
    </item>
    
    <item>
      <title>Key Value Coding  Key Value Observing</title>
      <link>https://www.wikiod.com/objective-c/key-value-coding--key-value-observing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/key-value-coding--key-value-observing/</guid>
      <description>Most Common Real Life Key Value Coding Example # Key Value Coding is integrated into NSObject using NSKeyValueCoding protocol.
What this means?
It means that any id object is capable of calling valueForKey method and its various variants like valueForKeyPath etc. &#39;
It also means that any id object can invoke setValue method and its various variants too.
Example:
id obj = [[MyClass alloc] init]; id value = [obj valueForKey:@&amp;quot;myNumber&amp;quot;]; int myNumberAsInt = [value intValue]; myNumberAsInt = 53; [obj setValue:@(myNumberAsInt) forKey:@&amp;quot;myNumber&amp;quot;]; Exceptions:</description>
    </item>
    
    <item>
      <title>Classes  and Objects</title>
      <link>https://www.wikiod.com/objective-c/classes--and-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/classes--and-objects/</guid>
      <description>Syntax # Cat *cat = [[Cat alloc] init]; // Create cat object of type Cat Dog *dog = [[Dog alloc] init]; // Create dog object of type Dog NSObject *someObject = [NSObject alloc]; [someObject init]; // donâ€™t do this XYZObject *object = [XYZObject new]; // Use new to create objects if NO arguments are needed for initialization NSString *someString = @&amp;ldquo;Hello, World!&amp;rdquo;; // Creating an NSString with literal syntax NSNumber *myFloat = @3.</description>
    </item>
    
    <item>
      <title>NSURL</title>
      <link>https://www.wikiod.com/objective-c/nsurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/objective-c/nsurl/</guid>
      <description>Create # From NSString:
NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; You can also use the following methods:
- initWithString: + URLWithString:relativeToURL: - initWithString:relativeToURL: + fileURLWithPath:isDirectory: - initFileURLWithPath:isDirectory: + fileURLWithPath: - initFileURLWithPath: Designated Initializer + fileURLWithPathComponents: + URLByResolvingAliasFileAtURL:options:error: + URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: - initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: + fileURLWithFileSystemRepresentation:isDirectory:relativeToURL: - getFileSystemRepresentation:maxLength: - initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL: Compare NSURL # NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; NSURL *myUrl2 = [NSURL URLWithString: urlString]; if ([myUrl isEqual:myUrl2]) return YES; Modifying and Converting a File URL with removing and appending path # 1.</description>
    </item>
    
  </channel>
</rss>

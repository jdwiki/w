<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symfony Tutorial on </title>
    <link>https://www.wikiod.com/docs/symfony/</link>
    <description>Recent content in symfony Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/symfony/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with symfony</title>
      <link>https://www.wikiod.com/symfony/getting-started-with-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony/getting-started-with-symfony/</guid>
      <description>Creating a new Symfony project using the Symfony Installer # The Symfony Installer is a command line tool that helps you to create new Symfony applications. It requires PHP 5.4 or higher.
Downloading and installing the Symfony Installer on Linux / MacOS # Open a terminal and execute the following commands:
sudo mkdir -p /usr/local/bin sudo curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony sudo chmod a+x /usr/local/bin/symfony This creates a global symfony executable that can be called from anywhere.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/symfony/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony/routing/</guid>
      <description>Routing is the process of mapping a URL to a controller. Symfony has a powerfull Routing component which allows you to define routes.
The Routing component supports a number of configuration formats: annotations, YAML, XML and raw PHP.
Parameters # Parameter Details name The name of the route. Example: book_show path The path (may contain wildcards). Example: /book/{isbn} defaults Default values of parameters Simple routes # Using YAML:
# app/config/routing.yml blog_list: path: /blog defaults: { _controller: AppBundle:Blog:list } Using Annotations:</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>https://www.wikiod.com/symfony/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony/controllers/</guid>
      <description>A controller in Symfony is a PHP callable (a function, a method on an object, or a closure) that receives an HTTP request and returns an HTTP response. An HTTP response can contain anything: an HTML page, a JSON string, a file download, etc.
In order to tell Symfony which controller should handle a certain request, you need to configure a route.
Syntax # $this-&amp;gt;generateUrl(&amp;lsquo;route_name&amp;rsquo;, [&amp;lsquo;placeholder&amp;rsquo; =&amp;gt; &amp;lsquo;value&amp;rsquo;]); // generates a URL for the route route_name with a placeholder $this-&amp;gt;render(&amp;rsquo;template.</description>
    </item>
    
    <item>
      <title>Service Container</title>
      <link>https://www.wikiod.com/symfony/service-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony/service-container/</guid>
      <description>A Symfony application is typically composed of a lot of objects that perform different tasks, such as repositories, controllers, mailers, etc. In Symfony, these objects are called services, and are defined in app/config/services.yml or in one of the installed bundles.
The Service Container knows how to instantiate these services, and keeps a reference of them so they don&amp;rsquo;t have to be instantiated twice. If a service has dependencies it will instantiate those too.</description>
    </item>
    
    <item>
      <title>The Request</title>
      <link>https://www.wikiod.com/symfony/the-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony/the-request/</guid>
      <description>Symfony&amp;rsquo;s Request class is an object-oriented representation of the HTTP request. It contains information such as the URL, query string, uploaded files, cookies and other headers coming from the browser.
Syntax # $request-&amp;gt;getPathInfo(); // returns the path (local part of the URL) that is being requested (but without the query string). I.e. when visiting https://example.com/foo/bar?key=value, this will contain /foo/bar $request-&amp;gt;query-&amp;gt;get(&amp;lsquo;id&amp;rsquo;); // returns a query string parameter ($_GET) $request-&amp;gt;query-&amp;gt;get(&amp;lsquo;id&amp;rsquo;, 1); // returns a query string parameter with a default value $request-&amp;gt;request-&amp;gt;get(&amp;rsquo;name&amp;rsquo;); // returns a request body variable ($_POST) $request-&amp;gt;files-&amp;gt;get(&amp;lsquo;attachment&amp;rsquo;); // returns an instance of UploadedFile identified by &amp;ldquo;attachment&amp;rdquo; $request-&amp;gt;cookies-&amp;gt;get(&amp;lsquo;PHPSESSID&amp;rsquo;); // returns the value of a cookie ($_COOKIE) $request-&amp;gt;headers-&amp;gt;get(&amp;lsquo;content_type&amp;rsquo;); // returns an HTTP request header $request-&amp;gt;getMethod(); // returns the HTTP request method (GET, POST, PUT, DELETE, etc.</description>
    </item>
    
  </channel>
</rss>

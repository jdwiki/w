<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compiler-construction Tutorial on </title>
    <link>https://www.wikiod.com/docs/compiler-construction/</link>
    <description>Recent content in compiler-construction Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/compiler-construction/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with compiler-construction</title>
      <link>https://www.wikiod.com/compiler-construction/getting-started-with-compiler-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/compiler-construction/getting-started-with-compiler-construction/</guid>
      <description>Getting Started: Introduction # Prerequisites # Have a strong grasp of a programming language such as Python, C, C++, Ruby, or any of the other languages out there. Have your favorite code editor or IDE installed (one such example is VSCode) Stay motivated. Constructing a compiler is not easy, so keep pushing; it&amp;rsquo;s worth the effort. Language Categories # When making a compiler, you need to decide which of 2 types of language the compiler will be.</description>
    </item>
    
    <item>
      <title>Basics of Compiler Construction</title>
      <link>https://www.wikiod.com/compiler-construction/basics-of-compiler-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/compiler-construction/basics-of-compiler-construction/</guid>
      <description>This topic will contain all the basics in compiler construction that you will need to know so that you can get started in making your own compiler. This documentation topic will contain the first 2 out of 4 sections in compiler constructions and the rest will be in a different topic.
The topics which will be covered are:
Lexical Analysis
Parsing
Syntax # Lexical Analysis the source text is converted to type and value tokens.</description>
    </item>
    
  </channel>
</rss>

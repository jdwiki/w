<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>StackExchange.Redis Tutorial on </title>
    <link>https://www.wikiod.com/docs/stackexchange-redis/</link>
    <description>Recent content in StackExchange.Redis Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/stackexchange-redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with StackExchange.Redis</title>
      <link>https://www.wikiod.com/stackexchange-redis/getting-started-with-stackexchangeredis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/getting-started-with-stackexchangeredis/</guid>
      <description>Basic Usage # using StackExchange.Redis; // ... // connect to the server ConnectionMultiplexer connection = ConnectionMultiplexer.Connect(&amp;quot;localhost&amp;quot;); // select a database (by default, DB = 0) IDatabase db = connection.GetDatabase(); // run a command, in this case a GET RedisValue myVal = db.StringGet(&amp;quot;mykey&amp;quot;); Reuse Multiplexer Across Application # class Program { private static Lazy&amp;lt;ConnectionMultiplexer&amp;gt; _multiplexer = new Lazy&amp;lt;ConnectionMultiplexer&amp;gt;( () =&amp;gt; ConnectionMultiplexer.Connect(&amp;quot;localhost&amp;quot;), LazyThreadSafetyMode.ExecutionAndPublication); static void Main(string[] args) { IDatabase db1 = _multiplexer.Value.GetDatabase(1); IDatabase db2 = _multiplexer.</description>
    </item>
    
    <item>
      <title>Publish Subscribe</title>
      <link>https://www.wikiod.com/stackexchange-redis/publish-subscribe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/publish-subscribe/</guid>
      <description>Basics # Once connected you can publish messages by calling the ISubscriber.Publish method:
// grab an instance of an ISubscriber var subscriber = connection.GetSubscriber(); // publish a message to the &#39;chat&#39; channel subscriber.Publish(&amp;quot;chat&amp;quot;, &amp;quot;This is a message&amp;quot;) Consumers can subscribe to the channel using the ISubscriber.Subscribe method. Messages sent by the publisher will be handled by the handler passed to this method.
// grab an instance of an ISubscriber var subscriber = connection.</description>
    </item>
    
    <item>
      <title>Scan</title>
      <link>https://www.wikiod.com/stackexchange-redis/scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/scan/</guid>
      <description>Syntax # public IEnumerable&amp;lt;RedisKey&amp;gt; Keys(int database = 0, RedisValue pattern = default(RedisValue), int pageSize = CursorUtils.DefaultPageSize, long cursor = CursorUtils.Origin, int pageOffset = 0, CommandFlags flags = CommandFlags.None) Parameters # Parameter Details database Redis database index to connect to pattern Unsure pageSize Number of items to return per page cursor Unsure pageOffset Number of pages to offset the results by flags Unsure The Keys() call will select either the KEYS or SCAN command based on the version of the Redis server.</description>
    </item>
    
    <item>
      <title>Pipelining</title>
      <link>https://www.wikiod.com/stackexchange-redis/pipelining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/pipelining/</guid>
      <description>Pipelining and Multiplexing # var multiplexer = ConnectionMultiplexer.Connect(&amp;quot;localhost&amp;quot;); IDatabase db = multiplexer.GetDatabase(); // intialize key with empty string await db.StringSetAsync(&amp;quot;key&amp;quot;, &amp;quot;&amp;quot;); // create transaction that utilize multiplexing and pipelining ITransaction transacton = db.CreateTransaction(); Task&amp;lt;long&amp;gt; appendA = transacton.StringAppendAsync(&amp;quot;key&amp;quot;, &amp;quot;a&amp;quot;); Task&amp;lt;long&amp;gt; appendB = transacton.StringAppendAsync(&amp;quot;key&amp;quot;, &amp;quot;b&amp;quot;); if (await transacton.ExecuteAsync()) // sends &amp;quot;MULTI APPEND KEY a APPEND KEY b EXEC // in single request to redis server { // order here doesn&#39;t matter, result is always - &amp;quot;abc&amp;quot;.</description>
    </item>
    
    <item>
      <title>Keys and Values</title>
      <link>https://www.wikiod.com/stackexchange-redis/keys-and-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/keys-and-values/</guid>
      <description>Setting Values # All values in Redis are ultimately stored as a RedisValue type:
//&amp;quot;myvalue&amp;quot; here is implicitly converted to a RedisValue type //The RedisValue type is rarely seen in practice. db.StringSet(&amp;quot;key&amp;quot;, &amp;quot;aValue&amp;quot;); Setting and getting an int # db.StringSet(&amp;quot;key&amp;quot;, 11021); int i = (int)db.StringGet(&amp;quot;key&amp;quot;); Or using StackExchange.Redis.Extensions:
db.Add(&amp;quot;key&amp;quot;, 11021); int i = db.Get&amp;lt;int&amp;gt;(&amp;quot;key&amp;quot;); </description>
    </item>
    
    <item>
      <title>Profiling</title>
      <link>https://www.wikiod.com/stackexchange-redis/profiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stackexchange-redis/profiling/</guid>
      <description>StackExchange.Redis&amp;rsquo;s profiling features are composed of the IProfiler interface, and the ConnectionMultiplexer.RegisterProfiler(IProfiler), ConnectionMultiplexer.BeginProfiling(object), ConnectionMultiplexer.FinishProfiling(object) methods.
Begin and Finish profiling take a context object so that related commands can be grouped together.
This grouping works by querying your IProfiler interface for a context object at the start of a command, before any threading shenanigans have happened, and associating that command with a any other commands that have the same context object. Begin must be called with the same context object so StackExchange.</description>
    </item>
    
  </channel>
</rss>

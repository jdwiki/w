<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP Tutorial on </title>
    <link>https://www.wikiod.com/docs/php/</link>
    <description>Recent content in PHP Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with PHP</title>
      <link>https://www.wikiod.com/php/getting-started-with-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/getting-started-with-php/</guid>
      <description>HTML output from web server # PHP can be used to add content to HTML files. While HTML is processed directly by a web browser, PHP scripts are executed by a web server and the resulting HTML is sent to the browser.
The following HTML markup contains a PHP statement that will add Hello World! to the output:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;PHP!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;&amp;lt;?php echo &amp;quot;Hello world!&amp;quot;; ?&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; When this is saved as a PHP script and executed by a web server, the following HTML will be sent to the user&amp;rsquo;s browser:</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/php/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/json/</guid>
      <description>JSON (JavaScript Object Notation) is a platform and language independent way of serializing objects into plaintext. Because it is often used on web and so is PHP, there is a basic extension for working with JSON in PHP.
Syntax # string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] ) mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] ) Parameters # Parameter Details json_encode - value The value being encoded.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/php/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/variables/</guid>
      <description>Syntax # $variable = &amp;lsquo;value&amp;rsquo;; // Assign general variable $object-&amp;gt;property = &amp;lsquo;value&amp;rsquo;; // Assign an object property ClassName::$property = &amp;lsquo;value&amp;rsquo;; // Assign a static class property $array[0] = &amp;lsquo;value&amp;rsquo;; // Assign a value to an index of an array $array[] = &amp;lsquo;value&amp;rsquo;; // Push an item at the end of an array $array[&amp;lsquo;key&amp;rsquo;] = &amp;lsquo;value&amp;rsquo;; // Assign an array value echo $variable; // Echo (print) a variable value some_function($variable); // Use variable as function parameter unset($variable); // Unset a variable $$variable = &amp;lsquo;value&amp;rsquo;; // Assign to a variable variable isset($variable); // Check if a variable is set or not empty($variable); // Check if a variable is empty or not Type checking # Some of the documentation regarding variables and types mentions that PHP does not use static typing.</description>
    </item>
    
    <item>
      <title>Classes and Objects</title>
      <link>https://www.wikiod.com/php/classes-and-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/classes-and-objects/</guid>
      <description>Classes and Objects are used to to make your code more efficient and less repetitive by grouping similar tasks.
A class is used to define the actions and data structure used to build objects. The objects are then built using this predefined structure.
Syntax # class &amp;lt;ClassName&amp;gt; [ extends &amp;lt;ParentClassName&amp;gt; ] [ implements &amp;lt;Interface1&amp;gt; [, &amp;lt;Interface2&amp;gt;, ... ] { } // Class declaration interface &amp;lt;InterfaceName&amp;gt; [ extends &amp;lt;ParentInterface1&amp;gt; [, &amp;lt;ParentInterface2&amp;gt;, .</description>
    </item>
    
    <item>
      <title>PDO</title>
      <link>https://www.wikiod.com/php/pdo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/pdo/</guid>
      <description>The PDO (PHP Data Objects) extension allows developers to connect to numerous different types of databases and execute queries against them in a uniform, object oriented manner.
Syntax # PDO::LastInsertId() PDO::LastInsertId($columnName) // some drivers need the column name Warning Do not miss to check for exceptions while using lastInsertId(). It can throw the following error:
SQLSTATE IM001 : Driver does not support this function
Here is how you should properly check for exceptions using this method :</description>
    </item>
    
    <item>
      <title>Outputting the Value of a Variable</title>
      <link>https://www.wikiod.com/php/outputting-the-value-of-a-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/outputting-the-value-of-a-variable/</guid>
      <description>To build a dynamic and interactive PHP program, it is useful to output variables and their values. The PHP language allows for multiple methods of value output. This topic covers the standard methods of printing a value in PHP and where these methods can be used.
Variables in PHP come in a variety of types. Depending on the use case, you may want to output them to the browser as rendered HTML, output them for debugging, or output them to the terminal (if running an application via the command line).</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/php/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/arrays/</guid>
      <description>An array is a data structure that stores an arbitrary number of values in a single value. An array in PHP is actually an ordered map, where map is a type that associates values to keys.
Syntax # $array = array(&amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;Value2&amp;rsquo;, &amp;lsquo;Value3&amp;rsquo;); // Keys default to 0, 1, 2, &amp;hellip;, $array = array(&amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;Value2&amp;rsquo;, ); // Optional trailing comma $array = array(&amp;lsquo;key1&amp;rsquo; =&amp;gt; &amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;key2&amp;rsquo; =&amp;gt; &amp;lsquo;Value2&amp;rsquo;, ); // Explicit keys $array = array(&amp;lsquo;key1&amp;rsquo; =&amp;gt; &amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;Value2&amp;rsquo;, ); // Array ( [&amp;lsquo;key1&amp;rsquo;] =&amp;gt; Value1 1 =&amp;gt; &amp;lsquo;Value2&amp;rsquo;) $array = [&amp;lsquo;key1&amp;rsquo; =&amp;gt; &amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;key2&amp;rsquo; =&amp;gt; &amp;lsquo;Value2&amp;rsquo;, ]; // PHP 5.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://www.wikiod.com/php/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/security/</guid>
      <description>As the majority of websites run off PHP, application security is an important topic for PHP developers to protect their website, data, and clients. This topic covers best security practices in PHP as well as common vulnerabilities and weaknesses with example fixes in PHP.
See Also
Preventing SQL Injection with Parameterized Queries in PDO
Prepared Statements in mysqli
Open Web Application Security Project (OWASP)
1: https://www.wikiod.com/php/pdo#Preventing SQL injection with Parameterized Queries 2: https://www.</description>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://www.wikiod.com/php/traits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/traits/</guid>
      <description>Traits to facilitate horizontal code reuse # Let&amp;rsquo;s say we have an interface for logging:
interface Logger { function log($message); } Now say we have two concrete implementations of the Logger interface: the FileLogger and the ConsoleLogger.
class FileLogger implements Logger { public function log($message) { // Append log message to some file } } class ConsoleLogger implements Logger { public function log($message) { // Log message to the console } } Now if you define some other class Foo which you also want to be able to perform logging tasks, you could do something like this:</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.wikiod.com/php/dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php/dependency-injection/</guid>
      <description>Dependency Injection (DI) is a fancy term for &amp;ldquo;passing things in&amp;rdquo;. All it really means is passing the dependencies of an object via the constructor and / or setters instead of creating them upon object creation inside the object.
Dependency Injection might also refer to Dependency Injection Containers which automate the construction and injection.
Constructor Injection # Objects will often depend on other objects. Instead of creating the dependency in the constructor, the dependency should be passed into the constructor as a parameter.</description>
    </item>
    
  </channel>
</rss>

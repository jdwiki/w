<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jade Tutorial on </title>
    <link>https://www.wikiod.com/docs/jade/</link>
    <description>Recent content in jade Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jade/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jade</title>
      <link>https://www.wikiod.com/jade/getting-started-with-jade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jade/getting-started-with-jade/</guid>
      <description>Syntax # Pug (old name is Jade) is a clean, whitespace sensitive syntax for writing HTML. Here is a simple example:
doctype html html(lang=&amp;quot;en&amp;quot;) head title= pageTitle script(type=&#39;text/javascript&#39;). if (foo) bar(1 + 5) body h1 Pug - node template engine #container.col if youAreUsingPug p You are amazing else p Get on it! p. Pug is a terse and simple templating language with a strong focus on performance and powerful features. Produces following output as HTML</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>https://www.wikiod.com/jade/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jade/attributes/</guid>
      <description>&amp;amp;attributes # Pronounced &amp;ldquo;and attributes&amp;rdquo;, the &amp;amp;attributes syntax can be used to explode an object into attributes of an element.
Code: # div#foo(data-bar=&amp;quot;foo&amp;quot;)&amp;amp;attributes({&#39;data-foo&#39;: &#39;bar&#39;})
Result: # &amp;lt;div id=&amp;quot;foo&amp;quot; data-bar=&amp;quot;foo&amp;quot; data-foo=&amp;quot;bar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
The object does not have to be an object literal. It can also just be a variable that has an object as its value (see also Mixin Attributes)
Code: # - var attributes = {&#39;data-foo&#39;: &#39;bar&#39;}; div#foo(data-bar=&amp;quot;foo&amp;quot;)&amp;amp;attributes(attributes) Result: # &amp;lt;div id=&amp;quot;foo&amp;quot; data-bar=&amp;quot;foo&amp;quot; data-foo=&amp;quot;bar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;</description>
    </item>
    
    <item>
      <title>Case</title>
      <link>https://www.wikiod.com/jade/case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jade/case/</guid>
      <description>Case # - var friends = 10 case friends when 0 p you have no friends when 1 p you have a friend default p you have #{friends} friends Result is:
&amp;lt;p&amp;gt;you have 10 friends&amp;lt;/p&amp;gt;</description>
    </item>
    
    <item>
      <title>harp js</title>
      <link>https://www.wikiod.com/jade/harp-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jade/harp-js/</guid>
      <description>Harp is a static web server with built-in preprocessing. Harp can compile your project down to static assets, HTML, CSS and JavaScript, with no configuration necessary. You may also use Harp as a Node library for compiling or running as a server.
Harp includes the common, useful preprocessors by default. It serves Jade (Pug), Markdown, EJS, CoffeeScript, LESS, Sass and Stylus.
How to set up Harp # Harp doesnâ€™t require any configuration to get started.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advanced-custom-fields Tutorial on </title>
    <link>https://www.wikiod.com/docs/advanced-custom-fields/</link>
    <description>Recent content in advanced-custom-fields Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/advanced-custom-fields/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with advanced-custom-fields</title>
      <link>https://www.wikiod.com/advanced-custom-fields/getting-started-with-advanced-custom-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/advanced-custom-fields/getting-started-with-advanced-custom-fields/</guid>
      <description>Installation/Setup # Standard Version
To install the standard version, go to the Plugin section of your WordPress installation. Search for &amp;ldquo;Advanced Custom Fields&amp;rdquo; and install/activate. You will now have access to a new area in the WordPress administrative area labeled &amp;ldquo;Custom Fields&amp;rdquo; where you can create your first custom field group.
Pro Version
To install the pro version, download from the &amp;ldquo;Licenses and Downloads&amp;rdquo; area of the My Account section of the ACF website.</description>
    </item>
    
    <item>
      <title>get_field()</title>
      <link>https://www.wikiod.com/advanced-custom-fields/get_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/advanced-custom-fields/get_field/</guid>
      <description>Syntax # get_field($field_name, $post_id, $format_value); Parameters # Parameter Details $field_name (string) The name of the field you are requesting. When setting up your field group, this is the &amp;ldquo;Field Name&amp;rdquo; setting. $post_id (integer) This is the ID of the post that you are requesting the field name from. This can also be &amp;lsquo;options&amp;rsquo; or a taxonomy reference. This can be left blank when inside of the WordPress loop, if requesting the current post/page ID.</description>
    </item>
    
    <item>
      <title>Custom Options page</title>
      <link>https://www.wikiod.com/advanced-custom-fields/custom-options-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/advanced-custom-fields/custom-options-page/</guid>
      <description>Syntax # acf_add_options_page( $args ); acf_add_options_sub_page( $page ); Parameters # Parameter Details $args (mixed) A string for the page title, or an array of settings. If left blank, default settings will be used. $page (mixed) A string for the page title, or an array of settings. If left blank, default settings will be used. The simplest Options page # if( function_exists(&#39;acf_add_options_page&#39;) ) { acf_add_options_page(); } Add the above code to functions.</description>
    </item>
    
    <item>
      <title>Date Time Picker</title>
      <link>https://www.wikiod.com/advanced-custom-fields/date-time-picker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/advanced-custom-fields/date-time-picker/</guid>
      <description>The Date Time Picker allows a user to choose both a date (month/date/year) as well as a time of day (hours/minutes/seconds). A user can then output the date format and return format based on PHP date() acceptable methods. This is helpful for querying custom post types like events, tour dates, or even a single custom field.
Ouput date-time value # Display the date by itself (custom field is tour_date):
&amp;lt;p&amp;gt;Tour Date &amp;lt;?</description>
    </item>
    
    <item>
      <title>the_field()</title>
      <link>https://www.wikiod.com/advanced-custom-fields/the_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/advanced-custom-fields/the_field/</guid>
      <description>Syntax # the_field($field_name, $post_id); Parameters # Paramenter Details $field_name the name of the field to be retrieved. eg “page_content” (required) $post_id Specific post ID where your value was entered. Defaults to current post ID (not required). This can also be options / taxonomies / users / etc Use get_field() when assigning field values to variables, or when manipulating the returned content in your code. the_field() is the same as echo get_field($field_name);</description>
    </item>
    
  </channel>
</rss>

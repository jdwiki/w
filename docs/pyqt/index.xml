<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyqt Tutorial on </title>
    <link>https://www.wikiod.com/docs/pyqt/</link>
    <description>Recent content in pyqt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/pyqt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with pyqt</title>
      <link>https://www.wikiod.com/pyqt/getting-started-with-pyqt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pyqt/getting-started-with-pyqt/</guid>
      <description>A basic application # The following example shows a basic main GUI window with a label widget, a toolbar, and a status bar using PyQt4.
import sys from PyQt4 import QtGui class App(QtGui.QApplication): def __init__(self, sys_argv): super(App, self).__init__(sys_argv) self.build_ui() def build_ui(self): # build a main GUI window self.main_window = QtGui.QMainWindow() self.main_window.setWindowTitle(&#39;App&#39;) self.main_window.show() # add a label to the main window label = QtGui.QLabel(&#39;Label&#39;) self.main_window.setCentralWidget(label) # add a toolbar with an action button to the main window action = QtGui.</description>
    </item>
    
    <item>
      <title>Using threads with PyQt</title>
      <link>https://www.wikiod.com/pyqt/using-threads-with-pyqt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pyqt/using-threads-with-pyqt/</guid>
      <description>While some parts of the Qt framework are thread safe, much of it is not. The Qt C++ documentation provides a good overview of which classes are reentrant (can be used to instantiate objects in multiple threads). The following rules are the most widely sought:
You cannot create or access a Qt GUI object from outside the main thread (e.g. anything that subclasses QWidget or similar). Even if the Qt class is reentrant, you cannot share access to a Qt object between threads unless the Qt documentation for that class explicitly states that instances are thread safe.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unity3d Tutorial on </title>
    <link>https://www.wikiod.com/docs/unity3d/</link>
    <description>Recent content in unity3d Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/unity3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with unity3d</title>
      <link>https://www.wikiod.com/unity3d/getting-started-with-unity3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/getting-started-with-unity3d/</guid>
      <description>Installation or Setup # Overview # Unity runs on Windows and Mac. There is also a Linux alpha version available.
There are 4 different payment plans for Unity:
Personal - Free (see below) Plus - $35 USD per month per seat (see below) Pro - $125 USD per month per seat - After subscribing to the Pro plan for 24 consecutive months, you have the option to stop subscribing and keep the version you have.</description>
    </item>
    
    <item>
      <title>Using Git source control with Unity</title>
      <link>https://www.wikiod.com/unity3d/using-git-source-control-with-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/using-git-source-control-with-unity/</guid>
      <description>Setting up a Git repository for Unity # When initializing a Git repository for Unity development, there are a couple of things that need to be done.
Unity Ignore Folders # Not everything should be versioned in the repository. You can add the template below to your .gitignore file in the root of your repository. Or alternatively, you can check the open source Unity .gitignore on GitHub and alternatively generate one using gitignore.</description>
    </item>
    
    <item>
      <title>Extending the Editor</title>
      <link>https://www.wikiod.com/unity3d/extending-the-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/extending-the-editor/</guid>
      <description>Syntax # [MenuItem(string itemName)] [MenuItem(string itemName, bool isValidateFunction)] [MenuItem(string itemName, bool isValidateFunction, int priority)] [ContextMenu(string name)] [ContextMenuItem(string name, string function)] [DrawGizmo(GizmoType gizmo)] [DrawGizmo(GizmoType gizmo, Type drawnGizmoType)] Parameters # Parameter Details MenuCommand MenuCommand is used to extract the context for a MenuItem MenuCommand.context The object that is the target of the menu command MenuCommand.userData An int for passing custom information to a menu item Custom Inspector # Using a custom inspector allows you to change the way a script is drawn in the Inspector.</description>
    </item>
    
    <item>
      <title>Singletons in Unity</title>
      <link>https://www.wikiod.com/unity3d/singletons-in-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/singletons-in-unity/</guid>
      <description>While there are schools of thought which make compelling arguments why unconstrained use of Singletons is a bad idea, e.g. Singleton on gameprogrammingpatterns.com, there are occasions when you might want to persist a GameObject in Unity over multiple Scenes (e.g. for seamless background music) while ensuring that no more than one instance can exist; a perfect use case for a Singleton.
By adding this script to a GameObject, once it has been instantiated (e.</description>
    </item>
    
    <item>
      <title>Coroutines</title>
      <link>https://www.wikiod.com/unity3d/coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/coroutines/</guid>
      <description>Syntax # public Coroutine StartCoroutine(IEnumerator routine); public Coroutine StartCoroutine(string methodName, object value = null); public void StopCoroutine(string methodName); public void StopCoroutine(IEnumerator routine); public void StopAllCoroutines(); Performance considerations # It&amp;rsquo;s best to use coroutines in moderation as the flexibility comes with a performance cost.
Coroutines in great numbers demands more from the CPU than standard Update methods. There is an issue in some versions of Unity where coroutines produce garbage each update cycle due to Unity boxing the MoveNext return value.</description>
    </item>
    
    <item>
      <title>Optimization</title>
      <link>https://www.wikiod.com/unity3d/optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/optimization/</guid>
      <description>If possible, disable scripts on objects when they are not needed. For example if you have a script on an enemy object that searchers for and fires at the player consider disabling this script when the enemy is too far for example from the player. Coroutine Power # Usage # If you have a long running operation that relies on the not-thread-safe Unity API, use Coroutines to split it over multiple frames and keep your application responsive.</description>
    </item>
    
    <item>
      <title>Networking</title>
      <link>https://www.wikiod.com/unity3d/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/networking/</guid>
      <description>Headless mode in Unity # If you are building a Server to deploy in Linux, the Build settings have a &amp;ldquo;Headless mode&amp;rdquo; option. An application build with this option doesn&amp;rsquo;t display anything and doesn&amp;rsquo;t read user input, which is usually what we want for a Server.
Creating a server, a client, and sending a message. # Unity networking provides the High Level API (HLA) to handle network communications abstracting from low level implementations.</description>
    </item>
    
    <item>
      <title>Object Pooling</title>
      <link>https://www.wikiod.com/unity3d/object-pooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/object-pooling/</guid>
      <description>Object Pool # Sometimes when you make a game you need to create and destroy a lot of objects of the same type over and over again. You can simply do this by making a prefab and instantiate/destroy this whenever you need to, however, doing this is inefficient and can slow your game down.
One way to get around this issue is object pooling. Basically what this means is that you have a pool (with or without a limit to the amount) of objects that you are going to reuse whenever you can to prevent unnecessary instantiating or destroying.</description>
    </item>
    
    <item>
      <title>Prefabs</title>
      <link>https://www.wikiod.com/unity3d/prefabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/prefabs/</guid>
      <description>Syntax # public static Object PrefabUtility.InstantiatePrefab(Object target); public static Object AssetDatabase.LoadAssetAtPath(string assetPath, Type type); public static Object Object.Instantiate(Object original); public static Object Resources.Load(string path); Introduction # Prefabs are an asset type that allows the storage of a complete GameObject with its components, properties, attached components and serialized property values. There are many scenarios where this is useful, including:
Duplicating objects in a scene Sharing a common object across multiple scenes Being able to modify a prefab once and having the changes apply across multiple objects/scenes Creating duplicate objects with minor modifications, while having the common elements be editable from one base prefab Instantiating GameObjects at runtime There is a rule of thumb of sorts in Unity that says &amp;ldquo;everything should be Prefabs&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>CullingGroup API</title>
      <link>https://www.wikiod.com/unity3d/cullinggroup-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unity3d/cullinggroup-api/</guid>
      <description>Since using CullingGroups is not always very straightforward, it may be helpful to encapsulate the bulk of the logic behind a manager class.
Below is a blueprint how such a manager might operate.
using UnityEngine; using System; public interface ICullingGroupManager { int ReserveSphere(); void ReleaseSphere(int sphereIndex); void SetPosition(int sphereIndex, Vector3 position); void SetRadius(int sphereIndex, float radius); void SetCullingEvent(int sphereIndex, Action&amp;lt;CullingGroupEvent&amp;gt; sphere); } The gist of it is that you reserve a culling sphere from the manager which returns the index of the reserved sphere.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>botframework Tutorial on </title>
    <link>https://www.wikiod.com/docs/botframework/</link>
    <description>Recent content in botframework Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/botframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with botframework</title>
      <link>https://www.wikiod.com/botframework/getting-started-with-botframework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/botframework/getting-started-with-botframework/</guid>
      <description>Installation or Setup # C#
Visual Studio 2015 (latest update) - you can download the community version here for free: www.VisualStudio.com
Important: update all VS extensions to their latest versions Tools-&amp;gt;Extensions and Updates-&amp;gt;Updates
Download the Bot Application template from here: Template Download Save the zip file to your Visual Studio 2015 templates directory which is traditionally in &amp;ldquo;%USERPROFILE%\Documents\Visual Studio 2015\Templates\ProjectTemplates\Visual C#&amp;quot; Note: you will need to restart visual studio after this step, in order to use the template.</description>
    </item>
    
    <item>
      <title>Getting Started with QnA Services</title>
      <link>https://www.wikiod.com/botframework/getting-started-with-qna-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/botframework/getting-started-with-qna-services/</guid>
      <description>The QnA Maker is a free, easy-to-use, REST API- and web-based service that trains AI to respond to usersâ€™ questions in a more natural, conversational way. With optimized machine learning logic and the ability to integrate industry-leading language processing, QnA Maker distills semi-structured data like question and answer pairs into distinct, helpful answers.
Creating our own QnA Service manually # Providing your microsoft account credentials you can authenticate and receive subscription keys to start with the services.</description>
    </item>
    
    <item>
      <title>Getting started with Azure Bot Service</title>
      <link>https://www.wikiod.com/botframework/getting-started-with-azure-bot-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/botframework/getting-started-with-azure-bot-service/</guid>
      <description>The Azure Bot Service provides an integrated environment that is purpose-built for bot development, enabling you to build, connect, test, deploy and manage intelligent bots, all from one place. You can write your bot in C# or Node.js directly in the browser using the Azure editor, without any need for a tool chain. You can also increase the value of your bots with a few lines of code by plugging into Cognitive Services to enable your bots to see, hear, interpret &amp;amp; interact in more human ways</description>
    </item>
    
    <item>
      <title>Adding Natural Language Processing</title>
      <link>https://www.wikiod.com/botframework/adding-natural-language-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/botframework/adding-natural-language-processing/</guid>
      <description>Bot Framework supports Recognizers. A recognizer is used to recognize what to do whenever a user sends the bot any message. Therefore you can design your bot to recognize intents based on the user input. The recognizer can be used with LUIS API in order to add natural language understanding for the bot.
Syntax # var recognizer = new builder.LUISRecognizer(&amp;lsquo;Your model&amp;rsquo;s URL&amp;rsquo;);
var intents = new builder.IntentDialog({recognizers: [recognizer]});
Initializing and Adding LUISRecognizer # Once you&amp;rsquo;re up with a new project with the basic template provided in the Introduction, you should be able to add a LUISRecognizer like so -</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>liferay Tutorial on </title>
    <link>https://www.wikiod.com/docs/liferay/</link>
    <description>Recent content in liferay Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/liferay/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with liferay</title>
      <link>https://www.wikiod.com/liferay/getting-started-with-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/getting-started-with-liferay/</guid>
      <description>A basic installation for development and tests # Running the latest Liferay CE is straightforward:
Go to https://www.liferay.com/downloads. Choose a bundle among the ones listed. For beginners, the Tomcat bundle is a good choice. Click in &amp;ldquo;Download.&amp;rdquo; Unzip the download package whenever you find fit. The unzipped directory will be the LIFERAY_HOME directory. To start Liferay, just run the script LIFERAY_HOME/tomcat-x.xx.xx/bin/startup.sh; only on Windows environments run the script LIFERAY_HOME\tomcat-x.xx.xx\bin\startup.bat. By default, once Liferay is up, a browser will open its local URL (http://localhost:8080/).</description>
    </item>
    
    <item>
      <title>Hooks in Liferay</title>
      <link>https://www.wikiod.com/liferay/hooks-in-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/hooks-in-liferay/</guid>
      <description>This works with Liferay Portal up to version 6.2.
JSP Hook # JSP hooks are a special liferay plugin that allow to modify core portlet jsp-s, lets say you want to modify the login portlet to show Welcome in my custom login!.
The minimal structure for a Hook Plugin is as follows:
[project-name]-hook/ └── docroot/ ├── WEB-INF/ │ ├── src/ │ ├── lib/ │ ├── liferay-hook.xml │ ├── liferay-plugin-package.properties │ └── web.</description>
    </item>
    
    <item>
      <title>Create a Quartz scheduler in liferay</title>
      <link>https://www.wikiod.com/liferay/create-a-quartz-scheduler-in-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/create-a-quartz-scheduler-in-liferay/</guid>
      <description>A scheduler serves to perform background tasks at certain defined intervals.
As per Liferay portlet DTD
&amp;lt;!- The scheduler-entry element contains the declarative data of a scheduler. -&amp;gt;
!ELEMENT scheduler-entry (scheduler-description?, scheduler-event-listener-class, trigger)
&amp;lt;!- The scheduler-description value describes a scheduler. -&amp;gt;
!ELEMENT scheduler-description (#PCDATA)
&amp;lt;!- The scheduler-event-listener-class value must be a class that implements com.liferay.portal.kernel.messaging.MessageListener. This class will receive a message at a regular interval specified by the trigger element. -&amp;gt;</description>
    </item>
    
    <item>
      <title>Configure Google Tag manager(GTM) in liferay</title>
      <link>https://www.wikiod.com/liferay/configure-google-tag-managergtm-in-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/configure-google-tag-managergtm-in-liferay/</guid>
      <description>This documentation is not specific to liferay but can be used with reference to any web application.
Liferay provides Google Analytics(referred as GA ahead) by default,after configuring Analytics id GA-##### in Site settings.But this provides limited functionality,only allowing to track page views(Page title and URL).In order to expand it further,we can either embed GA script directly onto the site theme to trigger the required events or use GTM.
Using GTM to configure GA events # GTM simplifies the whole process of managing tags.</description>
    </item>
    
    <item>
      <title>Deploying a Plugin</title>
      <link>https://www.wikiod.com/liferay/deploying-a-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/deploying-a-plugin/</guid>
      <description>Deploying to Glassfish # So, you make first a .war file let&amp;rsquo;s say a portlet of name &amp;lt;YOUR PLUGIN&amp;gt;.war. You wanna have it running on a glassfish domain under Liferay portal.
Steps to success:
Navigate to Control Panel -&amp;gt; Plugins Installation on Liferay Hit Install new portlets Hit Configuration Fill in to Deploy Directory a new place for deployment let&amp;rsquo;s say &amp;lt;YOUR DOMAIN&amp;gt;/autodeploy2 Check that in the next line target is &amp;lt;YOUR DOMAIN&amp;gt;/autodeploy (it is the Glassfish default deployment directory) Hit Save Now deployment will be done by copy pasting files to that new directory &amp;lt;YOUR DOMAIN&amp;gt;/autodeploy2.</description>
    </item>
    
    <item>
      <title>Setting up SSL</title>
      <link>https://www.wikiod.com/liferay/setting-up-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/setting-up-ssl/</guid>
      <description>Make sure you have a valid ssl certificate provided by a third party. You can also use a selfsigned certificate, but for dev only. Letsencrypt provides free certificates that can be used in production&amp;hellip;.
Use keytool to import the certificate to the keystorechain of java.
How to enable SSL on Tomcat and Liferay # Make sure your tomcat configurations file, server.xml has this line:
&amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;org.apache.coyote.http11.Http11Protocol&amp;quot; maxHttpHeaderSize=&amp;quot;8192&amp;quot; SSLEnabled=&amp;quot;true&amp;quot; maxThreads=&amp;quot;150&amp;quot; minSpareThreads=&amp;quot;25&amp;quot; maxSpareThreads=&amp;quot;75&amp;quot; enableLookups=&amp;quot;false&amp;quot; disableUploadTimeout=&amp;quot;true&amp;quot; acceptCount=&amp;quot;100&amp;quot; scheme=&amp;quot;https&amp;quot; secure=&amp;quot;true&amp;quot; clientAuth=&amp;quot;false&amp;quot; useBodyEncodingForURI=&amp;quot;true&amp;quot; sslEnabledProtocols=&amp;quot;TLSv1.</description>
    </item>
    
    <item>
      <title>Debug remote liferay server via Eclipse</title>
      <link>https://www.wikiod.com/liferay/debug-remote-liferay-server-via-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/debug-remote-liferay-server-via-eclipse/</guid>
      <description>Debug remote liferay server via Eclipse(without Liferay Remote IDE connector eclipse plugin) # To debug a server instance, start in debug mode. To do so, configure these parameters to be passed to the server:
-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n to setenv.bat(Windows) or setenv.sh(Unix)
These initialize the server in debug mode, and listen for debug requests on the given port. Start the server and post the config.
In eclipse, the remote debug config needs to be configured to attach the source to the remote server.</description>
    </item>
    
    <item>
      <title>Using Restful web service in Liferay</title>
      <link>https://www.wikiod.com/liferay/using-restful-web-service-in-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/using-restful-web-service-in-liferay/</guid>
      <description>Consume Liferay JSON service for GET requests # Liferay exposes many default and custom services available to other systems via JSON. To explore services on a particular liferay instance, use a given URL - A local instance in this case:
http://localhost:8080/api/jsonws/ Select the required service, consume the service with the given syntax and parameters:
/user/get-user-by-email-address Use companyId and emailAddress to retrieve the user with the expected datatypes, as well as possible exceptions to be handled by the consumer.</description>
    </item>
    
    <item>
      <title>Inter portlet communication</title>
      <link>https://www.wikiod.com/liferay/inter-portlet-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/inter-portlet-communication/</guid>
      <description>This manual contains the various ways in which portlet can co-ordinate or communicate amongst each other and the various scenarios for which a particular approach is used.
References:
Public render param JSR 286 specs Portlet session Using Public render parameter # This approach was introduced in JSR 286.
In JSR 168,render parameters set in processAction of a portlet were available only in that portlet.With the Public Render Parameters feature, the render parameters set in the processAction of one portlet will be available in render of other portlets also.</description>
    </item>
    
    <item>
      <title>Using Dynamic and custom SQL query in Liferay</title>
      <link>https://www.wikiod.com/liferay/using-dynamic-and-custom-sql-query-in-liferay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/liferay/using-dynamic-and-custom-sql-query-in-liferay/</guid>
      <description>There are scenarios when dealing with service layer in liferay, when we need to query database with too many clauses or dealing with multiple tables.In such cases,we use either of:
1)Dynamic query(wrapper on Hibernate criteria API)
2)Custom SQL queries
References:
Custom SQL Dynamic query Using Dynamic query in Liferay # For most of the scenarios involving entities from service layer,we can make do with the default service calls,with some help from the finders as well.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android-espresso Tutorial on </title>
    <link>https://www.wikiod.com/docs/android-espresso/</link>
    <description>Recent content in android-espresso Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/android-espresso/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with android-espresso</title>
      <link>https://www.wikiod.com/android-espresso/getting-started-with-android-espresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android-espresso/getting-started-with-android-espresso/</guid>
      <description>Checking an Options Menu items (using Spoon to taake screenshots) # /** * @author piotrek1543 * * This example provides a specific UI testing problem and how it is already solved * with Google&#39;s Espresso. Notice that I used also Spoon framework, as Espresso * lacks of taking screenshots functionality. */ @RunWith(AndroidJUnit4.class) public class MainActivityAndroidTest { @Rule public ActivityTestRule&amp;lt;MainActivity&amp;gt; mRule = new ActivityTestRule&amp;lt;&amp;gt;(MainActivity.class); @Test public void checkIfSettingsMenuItemsAreVisible() throws InterruptedException { //open OptionsMenu to see available items openActionBarOverflowOrOptionsMenu(mRule.</description>
    </item>
    
    <item>
      <title>How to Create Custom Matchers?</title>
      <link>https://www.wikiod.com/android-espresso/how-to-create-custom-matchers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android-espresso/how-to-create-custom-matchers/</guid>
      <description>Example of Custom matcher for testing TextView error message # Create a class name ErrorMatcher inside your test package with below code:
public class ErrorMatcher {
@NonNull public static Matcher&amp;lt;View&amp;gt; withError(final String expectedErrorText) { Checks.checkNotNull(expectedErrorText); return new BoundedMatcher&amp;lt;View, TextView&amp;gt;(TextView.class) { @Override public void describeTo(final Description description) { description.appendText(&amp;quot;error text: &amp;quot;); stringMatcher.describeTo(description); } @Override public boolean matchesSafely(final TextView textView) { return expectedErrorText.equals(textView.getError().toString()); } }; } }
Matching logic is to find the TextView element, which error message text is equal to expected error text value, going through the subset of TextView fields present in the layout hierarchy.</description>
    </item>
    
  </channel>
</rss>

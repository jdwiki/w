<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>boost Tutorial on </title>
    <link>https://www.wikiod.com/docs/boost/</link>
    <description>Recent content in boost Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/boost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with boost</title>
      <link>https://www.wikiod.com/boost/getting-started-with-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/getting-started-with-boost/</guid>
      <description>Installation or Setup # See Boost Getting Started.
Most of the Boost libraries are header-only, meaning that there&amp;rsquo;s nothing you have to compile or link to.
Make sure you are getting the most recent version of Boost:
Visit www.boost.org Look for the Current Release download. Currently, this links here. Select the appropriate archive file for your operating system, and download. Header-only libraries can then be used by simply including the respective header files.</description>
    </item>
    
    <item>
      <title>Using boost.python</title>
      <link>https://www.wikiod.com/boost/using-boostpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/using-boostpython/</guid>
      <description>Introductory Example on Boost.Python # Things are easy when you have to use a C++ library in a Python project. Just you can use Boost.
First of all here is a list of components you need:
A CMakeList.txt file, because you&amp;rsquo;re going to use CMake. The C++ files of the C++ project. The python file - this is your python project. Let&amp;rsquo;s start with a small C++ file. Our C++ project has only one method which returns some string &amp;ldquo;This is the first try&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Boost Program Options</title>
      <link>https://www.wikiod.com/boost/boost-program-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/boost-program-options/</guid>
      <description>Basic Usage # Boost program options provides a simple and safe way to parse and handle command line arguments.
#include &amp;lt;boost/program_options.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; int main(int argc, char** argv) { namespace po = boost::program_options; po::variables_map vm; po::options_description desc(&amp;quot;Allowed Options&amp;quot;); // declare arguments desc.add_options() (&amp;quot;name&amp;quot;, po::value&amp;lt;std::string&amp;gt;()-&amp;gt;required(), &amp;quot;Type your name to be greeted!&amp;quot;); // parse arguments and save them in the variable map (vm) po::store(po::parse_command_line(argc, argv, desc), vm); std::cout &amp;lt;&amp;lt; &amp;quot;Hello &amp;quot; &amp;lt;&amp;lt; vm[&amp;quot;name&amp;quot;].</description>
    </item>
    
    <item>
      <title>boost String Algorithms Library</title>
      <link>https://www.wikiod.com/boost/boost-string-algorithms-library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/boost-string-algorithms-library/</guid>
      <description>Boost Documention on String Algrorithms
boost::split() # #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/algorithm/string.hpp&amp;gt; using namespace std; int main() { // String to split string str = &amp;quot;You&#39;re supposed to see this!|NOT THIS!!!!!!&amp;quot;; // Line container vector&amp;lt;string&amp;gt; lines; // Splits string boost::split(lines, str, boost::is_any_of(&amp;quot;|&amp;quot;), boost::token_compress_on); // Outputs 1 half of the split string cout &amp;lt;&amp;lt; lines.at(0).c_str() &amp;lt;&amp;lt; endl; // Waits for input before program exits cin.get(); return 0; } The following is the program in psuedocode:</description>
    </item>
    
    <item>
      <title>Async boostprocess</title>
      <link>https://www.wikiod.com/boost/async-boostprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/async-boostprocess/</guid>
      <description>Using all 3 pipes of a child process asynchronously. # #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/process.hpp&amp;gt; #include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;boost/process/windows.hpp&amp;gt; int Run( const std::string&amp;amp; exeName, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; args, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; input, ///&amp;lt; [in] data for stdin std::string&amp;amp; output, ///&amp;lt; [out] data from stdout std::string&amp;amp; error ///&amp;lt; [out] data from stderr ) { using namespace boost; asio::io_service ios; // stdout setup // std::vector&amp;lt;char&amp;gt; vOut(128 &amp;lt;&amp;lt; 10); // that worked well for my decoding app.</description>
    </item>
    
    <item>
      <title>Boost Accumulators Framework</title>
      <link>https://www.wikiod.com/boost/boost-accumulators-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/boost-accumulators-framework/</guid>
      <description>Computing mean and variance # #include &amp;lt;iostream&amp;gt; #include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/stats.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/mean.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/variance.hpp&amp;gt; int main() { using namespace boost::accumulators; accumulator_set&amp;lt;int, stats&amp;lt;tag::mean, tag::variance&amp;gt;&amp;gt; acc; for(int i = 1; i &amp;lt;= 6; i++) acc(i); std::cout &amp;lt;&amp;lt; &amp;quot;mean=&amp;quot; &amp;lt;&amp;lt; mean(acc) &amp;lt;&amp;lt; &amp;quot;, variance=&amp;quot; &amp;lt;&amp;lt; variance(acc) &amp;lt;&amp;lt; &#39;\n&#39;; // prints &amp;quot;mean=3.5, variance=2.91667&amp;quot; return 0; } </description>
    </item>
    
    <item>
      <title>BOOST- Compare Images using OpevCV</title>
      <link>https://www.wikiod.com/boost/boost--compare-images-using-opevcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/boost/boost--compare-images-using-opevcv/</guid>
      <description>This documentation explains how an external Image can be tested and compared with the output image of OpenCV. For example, To compare two blurred images and test if they both are same, we blur an original image in an external software (I used WiT Image Processing software) or just download any blurred image online- output1. Create a Win32 OpenCV project in Visual Studio. Read the original image as an input to the OpenCV.</description>
    </item>
    
  </channel>
</rss>

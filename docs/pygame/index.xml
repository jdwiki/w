<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pygame Tutorial on </title>
    <link>https://www.wikiod.com/docs/pygame/</link>
    <description>Recent content in pygame Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/pygame/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with pygame</title>
      <link>https://www.wikiod.com/pygame/getting-started-with-pygame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/getting-started-with-pygame/</guid>
      <description>A simple &amp;lsquo;game&amp;rsquo; # Import and initialize # Every module needs to be imported and pygame is no exception. Although we need to call the function pygame.init() for all imported modules in pygame to be initialized properly. If we forget this some modules won&amp;rsquo;t work. The function also returns a tuple of all successfully and failed initializations (it won&amp;rsquo;t raise an error if a module fails to initialize).
import pygame successes, failures = pygame.</description>
    </item>
    
    <item>
      <title>Event handling</title>
      <link>https://www.wikiod.com/pygame/event-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/event-handling/</guid>
      <description>Event loop # Pygame will register all events from the user into an event queue which can be received with the code pygame.event.get(). Every element in this queue is an Event object and they&amp;rsquo;ll all have the attribute type, which is an integer representing what kind of event it is. In the pygame module there are predefined integer constants representing the type. Except for this attribute, events have different attributes.</description>
    </item>
    
    <item>
      <title>Creating a window in pygame - pygame.display.set_mode()</title>
      <link>https://www.wikiod.com/pygame/creating-a-window-in-pygame---pygamedisplayset_mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/creating-a-window-in-pygame---pygamedisplayset_mode/</guid>
      <description>Syntax # pygame.display.set_mode(resolution=(0,0), flags=0, depth=0) # Returns a pygame.Surface representing the window on screen flags = pygame.FULLSCREEN | pygame.OPENGL # Flags can be combined using the &amp;ldquo;|&amp;rdquo; (bitwise OR or &amp;ldquo;pipe&amp;rdquo;) character. Parameters # parameter explaination resolution a pair of numbers representing the width and height of the window flags additional options that change the type of window - see &amp;ldquo;Remarks&amp;rdquo; for avaliable flags depth amount of bits used for color Possible values for the flag arguments are: flag description pygame.</description>
    </item>
    
    <item>
      <title>Adding background music and sound effects</title>
      <link>https://www.wikiod.com/pygame/adding-background-music-and-sound-effects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/adding-background-music-and-sound-effects/</guid>
      <description>Try to play music in &amp;lsquo;.wav&amp;rsquo; instead of &amp;lsquo;.mp3&amp;rsquo;.In &amp;lsquo;.mp3&amp;rsquo; the music lags.
Example to add music in pygame # import pygame file = &#39;some.mp3&#39; pygame.init() pygame.mixer.init() pygame.mixer.music.load(file) pygame.mixer.music.play(-1) # If the loops is -1 then the music will repeat indefinitely. Example to add music playlist in pygame # import pygame import time pygame.mixer.init() pygame.display.init() screen = pygame.display.set_mode ( ( 420 , 240 ) ) playlist = list() playlist.append ( &amp;quot;music3.</description>
    </item>
    
    <item>
      <title>Creating a simple pygame window</title>
      <link>https://www.wikiod.com/pygame/creating-a-simple-pygame-window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/creating-a-simple-pygame-window/</guid>
      <description>The complete code # import pygame pygame.init() WIDTH = 300 HEIGHT = 200 SCREEN = pygame.display.set_mode((WIDTH, HEIGHT)) pygame.display.set_caption(&#39;My Game&#39;) WHITE = (255, 255, 255) BLACK = (0, 0, 0) RED = (255, 0, 0) GREEN = (0, 255, 0) BLUE = (0, 0, 255) YELLOW = (255, 255, 255) SCREEN.fill(RED) pygame.display.flip() is_running = True while is_running: for event in pygame.event.get(): if event.type == pygame.QUIT: is_running = False pygame.quit() Importing and initialising pygame</description>
    </item>
    
    <item>
      <title>Drawing on the screen</title>
      <link>https://www.wikiod.com/pygame/drawing-on-the-screen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/drawing-on-the-screen/</guid>
      <description>Syntax # pygame.draw.rect(Surface, color, Rect, width=0) pygame.draw.polygon(Surface, color, pointlist, width=0) pygame.draw.circle(Surface, color, pos, radius, width=0) pygame.draw.ellipse(Surface, color, Rect, width=0) pygame.draw.arc(Surface, color, Rect, start_angle, stop_angle, width=1) pygame.draw.line(Surface, color, start_pos, end_pos, width=1) pygame.draw.lines(Surface, color, closed, pointlist, width=1) pygame.draw.aaline(Surface, color, startpos, endpos, blend=1) pygame.draw.aalines(Surface, color, closed, pointlist, blend=1) Parameters # Parameters Details Surface The Surface to draw the shape on. color A 3 or 4 integer sequence representing red, green and blue (and alpha), each value ranging between 0-255.</description>
    </item>
    
    <item>
      <title>The essentials</title>
      <link>https://www.wikiod.com/pygame/the-essentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/the-essentials/</guid>
      <description>Drawing and a basic animation # This program draws some shapes and &amp;lsquo;hello world!&amp;rsquo; and let an image go to every corner of the window.
the complete code: # import pygame,sys from pygame.locals import * pygame.init() FPS = 30 #frames per second setting fpsClock = pygame.time.Clock() #set up the window screen = pygame.display.set_mode((500,400), 0, 32) pygame.display.set_caption(&#39;drawing&#39;) #set up the colors black = ( 0, 0, 0) white = (255, 255, 255) red = (255, 0, 0) green = ( 0, 255, 0) blue = ( 0, 0, 255) imageImg = pygame.</description>
    </item>
    
    <item>
      <title>Creating a pygame window</title>
      <link>https://www.wikiod.com/pygame/creating-a-pygame-window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pygame/creating-a-pygame-window/</guid>
      <description>If you want to have other colours as the background, then name a new variable such as red = (255,0,0) and change the display.fill(black) to display.fill(red). You can create colours by storing them in a variable and checking their RGB values from the internet.
Creating the pygame window # import pygame background_colour = (255,255,255) # For the background color of your window (width, height) = (300, 200) # Dimension of the window screen = pygame.</description>
    </item>
    
  </channel>
</rss>

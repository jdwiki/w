<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sas Tutorial on </title>
    <link>https://www.wikiod.com/docs/sas/</link>
    <description>Recent content in sas Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sas</title>
      <link>https://www.wikiod.com/sas/getting-started-with-sas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/getting-started-with-sas/</guid>
      <description>Installation or Setup # SAS can be run in client-server model, using either the Enterprise Guide thick client or the SAS Studio thin (web-enabled) client, or in &amp;ldquo;local server&amp;rdquo; mode where a fully functional SAS system is present on a local machine (Windows or Unix/Linux desktop or server running in interactive mode) and run either in Display Manager mode (the local client) or through one of the client-server clients above (connected to the locally installed server).</description>
    </item>
    
    <item>
      <title>SAS Formats</title>
      <link>https://www.wikiod.com/sas/sas-formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/sas-formats/</guid>
      <description>Informats and formats are used to tell SAS how to read and write the data respectively. Informats are commonly used in a datastep when reading data from an external file. Informats are rarely used in PROCs. Formats are commonly used in both data steps and PROCs.
SAS Formats convert either numeric or character values to character values. A format can either be applied using a format or put statement, which changes the way a value is displayed, or using the put function to store the formatted value in a new variable.</description>
    </item>
    
    <item>
      <title>Sending an email with SAS</title>
      <link>https://www.wikiod.com/sas/sending-an-email-with-sas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/sending-an-email-with-sas/</guid>
      <description>There are several reasons you might come across for needing email capabilities in SAS. You could be sending an email to notify someone that a process passed/failed, you could be sending an email containing Macro Variables that show how many records have been loaded at the end of your data feed, or maybe you need to send some files that contain reports. Whatever your need is, there are several ways to go about sending emails and files in SAS.</description>
    </item>
    
    <item>
      <title>Resolving Macro Variables in quotes within PROC SQL Pass-throughs</title>
      <link>https://www.wikiod.com/sas/resolving-macro-variables-in-quotes-within-proc-sql-pass-throughs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/resolving-macro-variables-in-quotes-within-proc-sql-pass-throughs/</guid>
      <description>One of the challenges I faced when I first started using SAS was not only passing Macro Variable data into a PROC SQL pass-through, but having it resolve properly if it needed quotes around it. When passing a string like value or date/datetime into a PROC SQL pass-through, it most likely needs to have single quotes around it when it resolves.
I have found the best results when using the %BQUOTE function to accomplish this.</description>
    </item>
    
    <item>
      <title>Creating Macro Variables</title>
      <link>https://www.wikiod.com/sas/creating-macro-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/creating-macro-variables/</guid>
      <description>Using Macro Variables throughout your SAS programs is a basic functionality that every SAS programmer must be familiar with. Using Macro Variables can help you to keep your code simple and generic. Generic code is reusable code.
Using %LET # I would describe %LET as being the most simple way to creating a Macro Variable in SAS.
%LET variableName = variableValue; Now, anywhere you use &amp;amp;variableName, it will resolve to variableValue.</description>
    </item>
    
    <item>
      <title>DO Loop</title>
      <link>https://www.wikiod.com/sas/do-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/do-loop/</guid>
      <description>DO Loop # DATA salary; /*define variables*/ raise=0.1; salary=50000; year=1; /*do loop*/ DO year=1 to 20 by 2; salary + salary*raise; output; /*generates an observation for each iteration of the do loop, optional*/ END; RUN; Macro do loop # %macro doloop; %do age=11 %to 15 %by 2; title Age=&amp;amp;age.; proc print data=sashelp.class(where=(age=&amp;amp;age.)); run; %end; %mend; %doloop; </description>
    </item>
    
    <item>
      <title>Proc SQL</title>
      <link>https://www.wikiod.com/sas/proc-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/proc-sql/</guid>
      <description>Create an empty dataset based on an existing dataset # Method 1:
proc sql; create table foo like sashelp.class; quit; Method 2:
proc sql; create table bar as select * from sashelp.class (obs=0); quit; Method 1 should be the preferred option
SELECT Syntax # PROC SQL options; SELECT column(s) FROM table-name | view-name WHERE expression GROUP BY column(s) HAVING expression ORDER BYcolumn(s); QUIT; Example 1:
proc sql; select name ,sex from sashelp.</description>
    </item>
    
    <item>
      <title>Reading Data</title>
      <link>https://www.wikiod.com/sas/reading-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/reading-data/</guid>
      <description>Reading data into a SAS dataset can be accomplished using multiple approaches including the datalines statement, from an external file using an infile statement in the data step, or reading data from an external file using proc import. In addition you can read in data from external sources that are odbc compliant (e.g. SQL databases) using the odbc drivers.
PROC IMPORT for Excel, importing a specific sheet # There will be times where you only want to import a specific sheet from an excel file with multiple sheets.</description>
    </item>
    
    <item>
      <title>Copy a file, byte for byte</title>
      <link>https://www.wikiod.com/sas/copy-a-file-byte-for-byte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/copy-a-file-byte-for-byte/</guid>
      <description>If you&amp;rsquo;re using SAS to produce reporting of some sort, you&amp;rsquo;re going to find yourself needing to copy a file at some point. I&amp;rsquo;ve mostly used this method for copying an excel template, and then dumping data via PROC EXPORT into the new file I&amp;rsquo;ve created.
This is a great example I&amp;rsquo;ve found from Chris Hemedinger (http://blogs.sas.com/content/sasdummy/2011/06/17/how-to-use-sas-data-step-to-copy-a-file-from-anywhere/).
Copying any file, byte by byte # /* these IN and OUT filerefs can point to anything */ filename in &amp;quot;anyfilehere.</description>
    </item>
    
    <item>
      <title>Using Joins in SAS</title>
      <link>https://www.wikiod.com/sas/using-joins-in-sas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sas/using-joins-in-sas/</guid>
      <description>Each database is a collection of different tables and each table contains different data in an organized way. While working with data, most of the times information we need is scattered in more than one table. We need joins/merge to get the desired output.
In SAS we use joins while working with Proc SQL and use merge while working with Data step. We will now talk only about joins inside Proc SQL.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rspec Tutorial on </title>
    <link>https://www.wikiod.com/docs/rspec/</link>
    <description>Recent content in rspec Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/rspec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with rspec</title>
      <link>https://www.wikiod.com/rspec/getting-started-with-rspec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rspec/getting-started-with-rspec/</guid>
      <description>A simple RSpec example # In greeter.rb (wherever that goes in your project):
class Greeter def greet &amp;quot;Hello, world!&amp;quot; end end In spec/greeter_spec.rb:
require_relative &#39;../greeter.rb&#39; RSpec.describe Greeter do describe &#39;#greet&#39; do it &amp;quot;says hello&amp;quot; do expect(Greeter.new.greet).to eq(&amp;quot;Hello, world!&amp;quot;) end end end So our file structure looks like:
$ tree . . ├── greeter.rb └── spec └── greeter_spec.rb 1 directory, 2 files Output
$rspec greeter_spec.rb Finished in 0.00063 seconds (files took 0.</description>
    </item>
    
    <item>
      <title>RSpec Expectations</title>
      <link>https://www.wikiod.com/rspec/rspec-expectations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rspec/rspec-expectations/</guid>
      <description>RSpec::Expectations lets you express expected outcomes on an object using an example-based DSL syntax.
This topic gives examples of how to expect test results in RSpec using expect .to and the many built-in matchers.
This functionality is provided by the rspec-expectations gem.
Basic Usage # Given a class as follows:
class Cube attr_reader :height, :width, :depth def initialize(args) @height = args[:height] || args[:y] || 1 @width = args[:width] || args[:x] || 1 @depth = args[:depth] || args[:z] || 1 end def volume height * width * depth end end The following example passes if cube.</description>
    </item>
    
    <item>
      <title>RSpec Mocks</title>
      <link>https://www.wikiod.com/rspec/rspec-mocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rspec/rspec-mocks/</guid>
      <description>This topic documents RSpec&amp;rsquo;s support for test doubles (stubs, mocks, etc.). That support is provided by the rspec-mocks gem.
Stubbing with allow # The following example uses allow and receive to stub a Cart&amp;rsquo;s call to a CreditCardService so that the example doesn&amp;rsquo;t have to wait for a network call or use a credit card number that the processor knows about.
class Cart def check_out begin transaction_id = CreditCardService.instance.validate credit_card_number, total_price order = Order.</description>
    </item>
    
    <item>
      <title>RSpec Core</title>
      <link>https://www.wikiod.com/rspec/rspec-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rspec/rspec-core/</guid>
      <description>Running examples with a given tag # Adding tags to &amp;ldquo;describe&amp;rdquo; or &amp;ldquo;it&amp;rdquo; blocks allows you to run only those examples with a given tag. Use the --tag (or -t) option to run examples that match a specified tag. The tag can be a simple name or a name:value pair.
If a simple name is supplied, only examples with :name =&amp;gt; true will run. For example, rspec &amp;lt;spec_file&amp;gt; --tag smoke would run the example tagged with &amp;ldquo;Smoke&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>RSpec Matcher</title>
      <link>https://www.wikiod.com/rspec/rspec-matcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rspec/rspec-matcher/</guid>
      <description>rspec-expectations ships with a number of built-in matchers. Each matcher can be used with expect(..).to or expect(..).not_to to define positive and negative expectations respectively on an object.
Equality matchers # compare using eq (==)
RSpec.describe &amp;quot;a string&amp;quot; do it &amp;quot;is equal to another string of the same value&amp;quot; do expect(&amp;quot;this string&amp;quot;).to eq(&amp;quot;this string&amp;quot;) end it &amp;quot;is not equal to another string of a different value&amp;quot; do expect(&amp;quot;this string&amp;quot;).not_to eq(&amp;quot;a different string&amp;quot;) end end RSpec.</description>
    </item>
    
  </channel>
</rss>

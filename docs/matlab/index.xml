<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MATLAB Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/matlab/</link>
    <description>Recent content in MATLAB Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/matlab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with MATLAB Language</title>
      <link>https://www.wikiod.com/matlab/getting-started-with-matlab-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/getting-started-with-matlab-language/</guid>
      <description>Indexing matrices and arrays # MATLAB allows for several methods to index (access) elements of matrices and arrays:
Subscript indexing - where you specify the position of the elements you want in each dimension of the matrix separately. Linear indexing - where the matrix is treated as a vector, no matter its dimensions. That means, you specify each position in the matrix with a single number. Logical indexing - where you use a logical matrix (and matrix of true and false values) with the identical dimensions of the matrix you are trying to index as a mask to specify which value to return.</description>
    </item>
    
    <item>
      <title>Common mistakes and errors</title>
      <link>https://www.wikiod.com/matlab/common-mistakes-and-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/common-mistakes-and-errors/</guid>
      <description>The transpose operators # .&#39; is the correct way to transpose a vector or matrix in MATLAB. &#39; is the correct way to take the complex conjugate transpose (a.k.a. Hermitian conjugate) of a vector or matrix in MATLAB. Note that for the transpose .&#39;, there is a period in front of the apostrophe. This is in keeping with the syntax for the other element-wise operations in MATLAB: * multiplies matrices, .</description>
    </item>
    
    <item>
      <title>Vectorization</title>
      <link>https://www.wikiod.com/matlab/vectorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/vectorization/</guid>
      <description>Use of bsxfun # Quite often, the reason why code has been written in a for loop is to compute values from &amp;rsquo;nearby&amp;rsquo; ones. The function bsxfun can often be used to do this in a more succinct fashion.
For example, assume that you wish to perform a columnwise operation on the matrix B, subtracting the mean of each column from it:
B = round(randn(5)*10); % Generate random data A = zeros(size(B)); % Preallocate array for col = 1:size(B,2); % Loop over columns A(:,col) = B(:,col) - mean(B(:,col)); % Subtract means end This method is inefficient if B is large, often due to MATLAB having to move the contents of variables around in memory.</description>
    </item>
    
    <item>
      <title>MATLAB Best Practices</title>
      <link>https://www.wikiod.com/matlab/matlab-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/matlab-best-practices/</guid>
      <description>This topic displays best practices that the community has learned over time.
Indent code properly # Proper indentation gives not only the aesthetic look but also increases the readability of the code.
For example, consider the following code:
%no need to understand the code, just give it a look n = 2; bf = false; while n&amp;gt;1 for ii = 1:n for jj = 1:n if ii+jj&amp;gt;30 bf = true; break end end if bf break end end if bf break end n = n + 1; end As you can see, you need to give a careful look to see which loop and if statements are ending where.</description>
    </item>
    
    <item>
      <title>Graphics 2D Line Plots</title>
      <link>https://www.wikiod.com/matlab/graphics-2d-line-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/graphics-2d-line-plots/</guid>
      <description>Syntax # plot(Y)
plot(Y,LineSpec)
plot(X,Y)
plot(X,Y,LineSpec)
plot(X1,Y1, X2,Y2, &amp;hellip;, Xn,Yn)
plot(X1,Y1,LineSpec1, X2,Y2,LineSpec2, &amp;hellip;, Xn,Yn,LineSpecn)
plot(___, Name,Value)
h = plot(___)
Parameters # Parameter Details X x-values Y y-values LineSpec Line style, marker symbol, and color, specified as a string Name,Value Optional pairs of name-value arguments to customize line properties h handle to line graphics object http://www.mathworks.com/help/matlab/ref/plot.html
Multiple lines in a single plot # In this example we are going to plot multiple lines onto a single axis.</description>
    </item>
    
    <item>
      <title>Using serial ports</title>
      <link>https://www.wikiod.com/matlab/using-serial-ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/using-serial-ports/</guid>
      <description>Serial ports are a common interface for communicating with external sensors or embedded systems such as Arduinos. Modern serial communications are often implemented over USB connections using USB-serial adapters. MATLAB provides built-in functions for serial communications, including RS-232 and RS-485 protocols. These functions can be used for hardware serial ports or &amp;ldquo;virtual&amp;rdquo; USB-serial connections. The examples here illustrate serial communications in MATLAB.
Parameters # Serial port parameter what it does BaudRate Sets the baudrate.</description>
    </item>
    
    <item>
      <title>Undocumented Features</title>
      <link>https://www.wikiod.com/matlab/undocumented-features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/undocumented-features/</guid>
      <description>Using undocumented features is considered a risky practice1, as these features may change without notice or simply work differently on different MATLAB versions. For this reason, it is advised to employ defensive programming techniques such as enclosing undocumented pieces of code within try/catch blocks with documented fallbacks. Color-coded 2D line plots with color data in third dimension # In MATLAB versions prior to R2014b, using the old HG1 graphics engine, it was not obvious how to create color coded 2D line plots.</description>
    </item>
    
    <item>
      <title>Documenting functions</title>
      <link>https://www.wikiod.com/matlab/documenting-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/documenting-functions/</guid>
      <description>Help text can be located before or after the function line, as long as there is not code between the function line and the start of the help text. Capitalization of the function name only bolds the name, and is not required. If a line is prepended with See also, any names on the line that match the name of a class or function on the search path will automatically link to the documentation of that class/function.</description>
    </item>
    
    <item>
      <title>Introduction to MEX API</title>
      <link>https://www.wikiod.com/matlab/introduction-to-mex-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/introduction-to-mex-api/</guid>
      <description>Check number of inputs/outputs in a C++ MEX-file # In this example we will write a basic program that checks the number of inputs and outputs passed to a MEX-function.
As a starting point, we need to create a C++ file implementing the &amp;ldquo;MEX gateway&amp;rdquo;. This is the function executed when the file is called from MATLAB.
testinputs.cpp # // MathWorks provided header file #include &amp;quot;mex.h&amp;quot; // gateway function void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { // This function will error if number of inputs its not 3 or 4 // This function will error if number of outputs is more than 1 // Check inputs: if (nrhs &amp;lt; 3 || nrhs &amp;gt; 4) { mexErrMsgIdAndTxt(&amp;quot;Testinputs:ErrorIdIn&amp;quot;, &amp;quot;Invalid number of inputs to MEX file.</description>
    </item>
    
    <item>
      <title>Image processing</title>
      <link>https://www.wikiod.com/matlab/image-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matlab/image-processing/</guid>
      <description>Basic image I/O # &amp;gt;&amp;gt; img = imread(&#39;football.jpg&#39;); Use imread to read image files into a matrix in MATLAB.
Once you imread an image, it is stored as an ND-array in memory:
&amp;gt;&amp;gt; size(img) ans = 256 320 3 The image &#39;football.jpg&#39; has 256 rows and 320 columns and it has 3 color channels: Red, Green and Blue.
You can now mirror it:
&amp;gt;&amp;gt; mirrored = img(:, endðŸ‘Ž1, :); %// like mirroring any ND-array in Matlab And finally, write it back as an image using imwrite:</description>
    </item>
    
  </channel>
</rss>

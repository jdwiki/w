<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/swift/</link>
    <description>Recent content in Swift Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Swift Language</title>
      <link>https://www.wikiod.com/swift/getting-started-with-swift-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/getting-started-with-swift-language/</guid>
      <description>Your first Swift program # Write your code in a file named hello.swift:
print(&amp;quot;Hello, world!&amp;quot;) To compile and run a script in one step, use swift from the terminal (in a directory where this file is located): To launch a terminal, press CTRL+ALT+T on Linux, or find it in Launchpad on macOS. To change directory, enter cddirectory_name (or cd .. to go back)
$ swift hello.swift Hello, world! A compiler is a computer program (or a set of programs) that transforms source code written in a programming language (the source language) into another computer language (the target language), with the latter often having a binary form known as object code.</description>
    </item>
    
    <item>
      <title>Strings and Characters</title>
      <link>https://www.wikiod.com/swift/strings-and-characters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/strings-and-characters/</guid>
      <description>Syntax # String.characters // Returns an Array of the characters in the String String.characters.count // Returns the number of characters String.utf8 // A String.UTF8View, returns the UTF-8 character points in the String String.utf16 // A String.UTF16View, returns the UTF-16 character points in the String String.unicodeScalars // A String.UnicodeScalarView, returns the UTF-32 character points in the String String.isEmpty // Returns true if the String does not contain any text String.hasPrefix(String) // Returns true if the String is prefixed with the argument String.</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://www.wikiod.com/swift/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/enums/</guid>
      <description>Like structs and unlike classes, enums are value types and are copied instead of referenced when passed around.
For more information about enums, see The Swift Programming Language.
Basic enumerations # An enum provides a set of related values:
enum Direction { case up case down case left case right } enum Direction { case up, down, left, right } Enum values can be used by their fully-qualified name, but you can omit the type name when it can be inferred:</description>
    </item>
    
    <item>
      <title>Reading &amp; Writing JSON</title>
      <link>https://www.wikiod.com/swift/reading--writing-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/reading--writing-json/</guid>
      <description>Syntax # NSJSONSerialization.JSONObjectWithData(jsonData, options: NSJSONReadingOptions) // Returns an Object from jsonData. This method throws on failure. NSJSONSerialization.dataWithJSONObject(jsonObject, options: NSJSONWritingOptions) // Returns NSData from a JSON object. Pass in NSJSONWritingOptions.PrettyPrinted in options for an output that is more readable. JSON Serialization, Encoding, and Decoding with Apple Foundation and the Swift Standard Library # The JSONSerialization class is built into Apple&amp;rsquo;s Foundation framework.
Read JSON # The JSONObjectWithData function takes NSData, and returns AnyObject.</description>
    </item>
    
    <item>
      <title>AES encryption</title>
      <link>https://www.wikiod.com/swift/aes-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/aes-encryption/</guid>
      <description>AES encryption in CBC mode with a random IV (Swift 3.0) # The iv is prefixed to the encrypted data
aesCBC128Encrypt will create a random IV and prefixed to the encrypted code.
aesCBC128Decrypt will use the prefixed IV during decryption.
Inputs are the data and key are Data objects. If an encoded form such as Base64 if required convert to and/or from in the calling method.
The key should be exactly 128-bits (16-bytes), 192-bits (24-bytes) or 256-bits (32-bytes) in length.</description>
    </item>
    
    <item>
      <title>Reflection</title>
      <link>https://www.wikiod.com/swift/reflection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/reflection/</guid>
      <description>Syntax # Mirror(reflecting: instance) // Initializes a mirror with the subject to reflect mirror.displayStyle // Display style used for Xcode playgrounds mirror.description // Textual representation of this instance, see CustomStringConvertible mirror.subjectType // Returns the type of the subject being reflected mirror.superclassMirror // Returns the mirror of the super-class of the subject being reflected General Remarks: A Mirror is a struct used in the introspection of an object in Swift. Its most prominent property is the children array.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://www.wikiod.com/swift/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/protocols/</guid>
      <description>Protocols are a way of specifying how to use an object. They describe a set of properties and methods which a class, structure, or enum should provide, although protocols pose no restrictions on the implementation.
A Swift protocol is a collection of requirements that conforming types must implement. The protocol may then be used in most places where a type is expected, for example Arrays and generic requirements.
Protocol members always share the same access qualifier as the whole protocol, and cannot be specified separately.</description>
    </item>
    
    <item>
      <title>Optionals</title>
      <link>https://www.wikiod.com/swift/optionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/optionals/</guid>
      <description>“ An optional value either contains a value or contains nil to indicate that a value is missing”
Excerpt From: Apple Inc. “The Swift Programming Language (Swift 3.1 Edition).” iBooks. https://itun.es/us/k5SW7.l
Basic optional use cases include: for a constant (let), use of an optional within a loop (if-let), safely unwrapping an optional value within a method (guard-let), and as part of switch loops (case-let), defaulting to a value if nil, using the coalesce operator (?</description>
    </item>
    
    <item>
      <title>Method Swizzling</title>
      <link>https://www.wikiod.com/swift/method-swizzling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/method-swizzling/</guid>
      <description>When using method swizzling in Swift there are two requirements that your classes/methods must comply with:
Your class must extend NSObject The functions you want to swizzle must have the dynamic attribute For a complete explanation of why this is required, check out Using Swift with Cocoa and Objective-C:
Requiring Dynamic Dispatch
While the @objc attribute exposes your Swift API to the Objective-C runtime, it does not guarantee dynamic dispatch of a property, method, subscript, or initializer.</description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://www.wikiod.com/swift/closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swift/closures/</guid>
      <description>Syntax # var closureVar: (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) // As a variable or property type typealias ClosureType = (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) { [&amp;lt;captureList&amp;gt;] (&amp;lt;parameters&amp;gt;) &amp;lt;throws-ness&amp;gt; -&amp;gt; &amp;lt;returnType&amp;gt; in &amp;lt;statements&amp;gt; } // Complete closure syntax For more information on Swift closures, see Apple&amp;rsquo;s documentation.
Closure basics # Closures (also known as blocks or lambdas) are pieces of code which can be stored and passed around within your program.
let sayHi = { print(&amp;quot;Hello&amp;quot;) } // The type of sayHi is &amp;quot;() -&amp;gt; ()&amp;quot;, aka &amp;quot;() -&amp;gt; Void&amp;quot; sayHi() // prints &amp;quot;Hello&amp;quot; Like other functions, closures can accept arguments and return results or throw errors:</description>
    </item>
    
  </channel>
</rss>

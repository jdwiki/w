<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Tutorial on </title>
    <link>https://www.wikiod.com/docs/go/</link>
    <description>Recent content in Go Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Go</title>
      <link>https://www.wikiod.com/go/getting-started-with-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/getting-started-with-go/</guid>
      <description>Hello, World! # Place the following code into a file name hello.go:
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) } Playground
When Go is installed correctly this program can be compiled and run like this:
go run hello.go Output: # Hello, 世界 Once you are happy with the code it can be compiled to an executable by running:
go build hello.go This will create an executable file appropriate for your operating system in the current directory, which you can then run with the following command:</description>
    </item>
    
    <item>
      <title>Cross Compilation</title>
      <link>https://www.wikiod.com/go/cross-compilation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/cross-compilation/</guid>
      <description>The Go compiler can produce binaries for many platforms, i.e. processors and systems. Unlike with most other compilers, there is no specific requirement to cross-compiling, it is as easy to use as regular compiling.
Syntax # GOOS=linux GOARCH=amd64 go build Supported Operating System and Architecture target combinations (source)
$GOOS $GOARCH android arm darwin 386 darwin amd64 darwin arm darwin arm64 dragonfly amd64 freebsd 386 freebsd amd64 freebsd arm linux 386 linux amd64 linux arm linux arm64 linux ppc64 linux ppc64le linux mips64 linux mips64le netbsd 386 netbsd amd64 netbsd arm openbsd 386 openbsd amd64 openbsd arm plan9 386 plan9 amd64 solaris amd64 windows 386 windows amd64 Simple cross compilation with go build # From your project directory, run the go build command and specify the operating system and architecture target with the GOOS and GOARCH environment variables:</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>https://www.wikiod.com/go/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/maps/</guid>
      <description>Maps are data types used for storing unordered key-value pairs, so that looking up the value associated to a given key is very efficient. Keys are unique. The underlying data structure grows as needed to accommodate new elements, so the programmer does not need to worry about memory management. They are similar to what other languages call hash tables, dictionaries, or associative arrays.
Syntax # var mapName map[KeyType]ValueType // declare a Map var mapName = map[KeyType]ValueType{} // declare and assign an empty Map var mapName = map[KeyType]ValueType{key1: val1, key2: val2} // declare and assign a Map mapName := make(map[KeyType]ValueType) // declare and initialize default size map mapName := make(map[KeyType]ValueType, length) // declare and initialize length size map mapName := map[KeyType]ValueType{} // auto-declare and assign an empty Map with := mapName := map[KeyType]ValueType{key1: value1, key2: value2} // auto-declare and assign a Map with := value := mapName[key] // Get value by key value, hasKey := mapName[key] // Get value by key, &amp;lsquo;hasKey&amp;rsquo; is &amp;rsquo;true&amp;rsquo; if key exists in map mapName[key] = value // Set value by key Go provides a built-in map type that implements a hash table.</description>
    </item>
    
    <item>
      <title>HTTP Client</title>
      <link>https://www.wikiod.com/go/http-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/http-client/</guid>
      <description>Syntax # resp, err := http.Get(url) // Makes a HTTP GET request with the default HTTP client. A non-nil error is returned if the request fails. resp, err := http.Post(url, bodyType, body) // Makes a HTTP POST request with the default HTTP client. A non-nil error is returned if the request fails. resp, err := http.PostForm(url, values) // Makes a HTTP form POST request with the default HTTP client. A non-nil error is returned if the request fails.</description>
    </item>
    
    <item>
      <title>Concurrency</title>
      <link>https://www.wikiod.com/go/concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/concurrency/</guid>
      <description>In Go, concurrency is achieved through the use of goroutines, and communication between goroutines is usually done with channels. However, other means of synchronization, like mutexes and wait groups, are available, and should be used whenever they are more convenient than channels.
Syntax # go doWork() // run the function doWork as a goroutine ch := make(chan int) // declare new channel of type int ch &amp;lt;- 1 // sending on a channel value = &amp;lt;-ch // receiving from a channel Goroutines in Go are similar to threads in other languages in terms of usage.</description>
    </item>
    
    <item>
      <title>HTTP Server</title>
      <link>https://www.wikiod.com/go/http-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/http-server/</guid>
      <description>http.ServeMux provides a multiplexer which calls handlers for HTTP requests.
Alternatives to the standard library multiplexer include:
Gorilla Mux
Hello World # The typical way to begin writing webservers in golang is to use the standard library net/http module.
There is also a tutorial for it here.
The following code also uses it. Here is the simplest possible HTTP server implementation. It responds &amp;quot;Hello World&amp;quot; to any HTTP request.
Save the following code in a server.</description>
    </item>
    
    <item>
      <title>Structs</title>
      <link>https://www.wikiod.com/go/structs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/structs/</guid>
      <description>Structs are sets of various variables packed together. The struct itself is only a package containing variables and making them easily accessible.
Unlike in C, Go&amp;rsquo;s structs can have methods attached to them. It also allows them to implement interfaces. That makes Go&amp;rsquo;s structs similar to objects, but they are (probably intentionally) missing some major features known in object oriented languages like inheritance.
Methods # Struct methods are very similar to functions:</description>
    </item>
    
    <item>
      <title>Iota</title>
      <link>https://www.wikiod.com/go/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/iota/</guid>
      <description>Iota provides a way of declaring numeric constants from a starting value that grows monotonically. Iota can be used to declare bitmasks which are often used in system and network programming and other lists of constants with related values.
The iota identifier is used to assign values to lists of constants. When iota is used in a list it starts with a value of zero, and increments by one for each value in the list of constants and is reset on each const keyword.</description>
    </item>
    
    <item>
      <title>Vendoring</title>
      <link>https://www.wikiod.com/go/vendoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/vendoring/</guid>
      <description>Vendoring is a method of ensuring that all of your 3rd party packages that you use in your Go project are consistent for everyone who develops for your application.
When your Go package imports another package, the compiler normally checks $GOPATH/src/ for the path of the imported project. However if your package contains a folder named vendor, the compiler will check in that folder first. This means that you can import other parties packages inside your own code repository, without having to modify their code.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://www.wikiod.com/go/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/go/error-handling/</guid>
      <description>In Go, unexpected situations are handled using errors, not exceptions. This approach is more similar to that of C, using errno, than to that of Java or other object-oriented languages, with their try/catch blocks. However, an error is not an integer but an interface.
A function that may fail typically returns an error as its last return value. If this error is not nil, something went wrong, and the caller of the function should take action accordingly.</description>
    </item>
    
  </channel>
</rss>

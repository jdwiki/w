<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-boot Tutorial on </title>
    <link>https://www.wikiod.com/docs/spring-boot/</link>
    <description>Recent content in spring-boot Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with spring-boot</title>
      <link>https://www.wikiod.com/spring-boot/getting-started-with-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/getting-started-with-spring-boot/</guid>
      <description>Installation or Setup # Getting setup with Spring Boot for the first time is quite fast thanks to the hard work of the Spring Community.
Prerequisites:
Java installed Java IDE Recommended not required (Intellij, Eclipse, Netbeans, etc.) You don&amp;rsquo;t need to have Maven and/or Gradle installed. The projects generated by the Spring Initializr come with a Maven Wrapper (command mvnw) or Gradle Wrapper (command gradlew).
Open your web-browser to https://start.spring.io This is a launchpad for creating new Spring Boot applications for now we will go with the bare minimum.</description>
    </item>
    
    <item>
      <title>Create and Use of multiple application.properties files</title>
      <link>https://www.wikiod.com/spring-boot/create-and-use-of-multiple-applicationproperties-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/create-and-use-of-multiple-applicationproperties-files/</guid>
      <description>Dev and Prod environment using different datasources # After succesfully setup Spring-Boot application all the configuration is handled in an application.properties file. You will find the file at src/main/resources/.
Normally there is a need to have a database behind the application. For development its good to have a setup of dev and a prod environments. Using multiple application.properties files you can tell Spring-Boot with which environment the application should start.</description>
    </item>
    
    <item>
      <title>REST Services</title>
      <link>https://www.wikiod.com/spring-boot/rest-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/rest-services/</guid>
      <description>Parameters # Annotation Column @Controller Indicates that an annotated class is a &amp;ldquo;Controller&amp;rdquo; (web controller). @RequestMapping Annotation for mapping web requests onto specific handler classes (if we used with class) and/or handler methods (if we used with methods). method = RequestMethod.GET Type of HTTP request methods ResponseBody Annotation that indicates a method return value should be bound to the web response body @RestController @Controller + ResponseBody @ResponseEntity Extension of HttpEntity that adds a HttpStatus status code, we can control the return http code Creating a REST-Service # Create project using STS (Spring Starter Project) or Spring Initializr (at https://start.</description>
    </item>
    
    <item>
      <title>Package scanning</title>
      <link>https://www.wikiod.com/spring-boot/package-scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/package-scanning/</guid>
      <description>In this topic I will overview spring boot package scanning.
You can find some basic information in spring boot docs in the following link (using-boot-structuring-your-code) but I will try to provide more detailed information.
Spring boot, and spring in general, provide a feature to automatically scan packages for certain annotations in order to create beans and configuration.
Parameters # Annotation Details @SpringBootApplication Main spring boot application annotation. used one time in the application, contains a main method, and act as main package for package scanning @SpringBootConfiguration Indicates that a class provides Spring Boot application.</description>
    </item>
    
    <item>
      <title>Testing in Spring Boot</title>
      <link>https://www.wikiod.com/spring-boot/testing-in-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/testing-in-spring-boot/</guid>
      <description>How to Test a Simple Spring Boot Application # We have a sample Spring boot application which stores user data in MongoDB and we are using Rest services to retrieve data
First there is a domain class i.e. POJO
@Document public class User{ @Id private String id; private String name; } A corresponding repository based on Spring Data MongoDB
public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; { } Then Our User Controller</description>
    </item>
    
    <item>
      <title>Caching with Redis Using Spring Boot for MongoDB</title>
      <link>https://www.wikiod.com/spring-boot/caching-with-redis-using-spring-boot-for-mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/caching-with-redis-using-spring-boot-for-mongodb/</guid>
      <description>Why Caching? # Today, performance is one of the most important metrics we need to evaluate when developing a web service/Application. Keeping customers engaged is critical to any product and for this reason, it is extremely important to improve the performances and reduce page load times.
When running a web server that interacts with a database, its operations may become a bottleneck. MongoDB is no exception here, and as our MongoDB database scales up, things can really slow down.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Spring Data JPA</title>
      <link>https://www.wikiod.com/spring-boot/spring-boot--spring-data-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/spring-boot--spring-data-jpa/</guid>
      <description>Spring Boot makes it easy to create Spring-powered, production-grade applications and services with absolute minimum fuss. It favors convention over configuration.
Spring Data JPA, part of the larger Spring Data family, makes it easy to implement JPA based repositories. It makes it easier to build apps that use data access technologies.
Annotations # @Repository: Indicates that an annotated class is a &amp;ldquo;Repository&amp;rdquo;, a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects.</description>
    </item>
    
    <item>
      <title>Fully-Responsive Spring Boot Web Application with JHipster</title>
      <link>https://www.wikiod.com/spring-boot/fully-responsive-spring-boot-web-application-with-jhipster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/fully-responsive-spring-boot-web-application-with-jhipster/</guid>
      <description>Create Spring Boot App using jHipster on Mac OS # jHipster allows you to bootstrap a Spring Boot web application with a REST API back-end and a AngularJS and Twitter Bootstrap front-end.
More on jHipster here: jHipster Documentation
Install brew:
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; View additional info on how to install brew here: Install Brew
Install Gradle
Gradle is a dependency management and build system.
brew install gradle Install Git</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Hibernate &#43; Web UI (Thymeleaf)</title>
      <link>https://www.wikiod.com/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/spring-boot--hibernate--web-ui-thymeleaf/</guid>
      <description>This thread is focused on how to create a spring boot application with hibernate and thymyleaf template engine.
Also check the Thymeleaf documentation
Hibernate Configuration # First, lets overview what we need in order to setup Hibernate correctly.
@EnableTransactionManagement and @EnableJpaRepositories - we want transactional management and to use spring data repositories. DataSource - main datasource for the application. using in-memory h2 for this example. LocalContainerEntityManagerFactoryBean - spring entity manager factory using HibernateJpaVendorAdapter.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; JPA &#43; mongoDB</title>
      <link>https://www.wikiod.com/spring-boot/spring-boot--jpa--mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-boot/spring-boot--jpa--mongodb/</guid>
      <description>Customer Controller # package org.bookmytickets.controller; import java.util.List; import org.bookmytickets.model.Customer; import org.bookmytickets.repository.CustomerRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = &amp;quot;/customer&amp;quot;) public class CustomerController { @Autowired private CustomerRepository repository; @GetMapping(&amp;quot;&amp;quot;) public List&amp;lt;Customer&amp;gt; selectAll(){ List&amp;lt;Customer&amp;gt; customerList = repository.findAll(); return customerList; } @GetMapping(&amp;quot;/{id}&amp;quot;) public List&amp;lt;Customer&amp;gt; getSpecificCustomer(@PathVariable String id){ return repository.findById(id); } @GetMapping(&amp;quot;/search/lastName/{lastName}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByLastName(@PathVariable String lastName){ return repository.findByLasttName(lastName); } @GetMapping(&amp;quot;/search/firstname/{firstname}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByFirstName(@PathVariable String firstName){ return repository.</description>
    </item>
    
  </channel>
</rss>

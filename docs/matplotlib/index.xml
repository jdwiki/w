<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matplotlib Tutorial on </title>
    <link>https://www.wikiod.com/docs/matplotlib/</link>
    <description>Recent content in matplotlib Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with matplotlib</title>
      <link>https://www.wikiod.com/matplotlib/getting-started-with-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/getting-started-with-matplotlib/</guid>
      <description>Imperative vs. Object-oriented Syntax # Matplotlib supports both object-oriented and imperative syntax for plotting. The imperative syntax is intentionally designed to be very close to Matlab syntax.
The imperative syntax (sometimes called &amp;lsquo;state-machine&amp;rsquo; syntax) issues a string of commands all of which act on the most recent figure or axis (like Matlab). The object-oriented syntax, on the other hand, explicitly acts on the objects (figure, axis, etc.) of interest. A key point in the zen of Python states that explicit is better than implicit so the object-oriented syntax is more pythonic.</description>
    </item>
    
    <item>
      <title>Colormaps</title>
      <link>https://www.wikiod.com/matplotlib/colormaps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/colormaps/</guid>
      <description>Perceptually uniform colormaps # The original default colourmap of MATLAB (replaced in version R2014b) called jet is ubiquitous due to its high contrast and familiarity (and was the default of matplotlib for compatibility reasons). Despite its popularity, traditional colormaps often have deficiencies when it comes to representing data accurately. The percieved change in these colormaps does not correspond to changes in data; and a conversion of the colormap to greyscale (by, for instance, printing a figure using a black-and-white printer) might cause loss of information.</description>
    </item>
    
    <item>
      <title>Multiple Plots</title>
      <link>https://www.wikiod.com/matplotlib/multiple-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/multiple-plots/</guid>
      <description>Syntax # List item Grid of Subplots using subplot # &amp;quot;&amp;quot;&amp;quot; ================================================================================ CREATE A 2 BY 2 GRID OF SUB-PLOTS WITHIN THE SAME FIGURE. ================================================================================ &amp;quot;&amp;quot;&amp;quot; import matplotlib.pyplot as plt # The data x = [1,2,3,4,5] y1 = [0.59705847, 0.25786401, 0.63213726, 0.63287317, 0.73791151] y2 = [1.19411694, 0.51572803, 1.26427451, 1.26574635, 1.47582302] y3 = [0.86793828, 0.07563408, 0.67670068, 0.78932712, 0.0043694] # 5 more random values y4 = [0.43396914, 0.03781704, 0.33835034, 0.39466356, 0.0021847] # Initialise the figure and a subplot axes.</description>
    </item>
    
    <item>
      <title>Coordinates Systems</title>
      <link>https://www.wikiod.com/matplotlib/coordinates-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/coordinates-systems/</guid>
      <description>Matplotlib has four distinct coordinate systems which can be leveraged to ease the positioning of different object, e.g., text. Each system has a corresponding transformation object which transform coordinates from that system to the so called display coordinate system.
Data coordinate system is the system defined by the data on the respective axes. It is useful when trying to position some object relative to the data plotted. The range is given by the xlim and ylim properties of Axes.</description>
    </item>
    
    <item>
      <title>Animations and interactive plotting</title>
      <link>https://www.wikiod.com/matplotlib/animations-and-interactive-plotting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/animations-and-interactive-plotting/</guid>
      <description>With python matplotlib you can properly make animated graphs.
Basic animation with FuncAnimation # The matplotlib.animation package offer some classes for creating animations. FuncAnimation creates animations by repeatedly calling a function. Here we use a function animate() that changes the coordinates of a point on the graph of a sine function.
import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation TWOPI = 2*np.pi fig, ax = plt.subplots() t = np.</description>
    </item>
    
    <item>
      <title>Integration with TeXLaTeX</title>
      <link>https://www.wikiod.com/matplotlib/integration-with-texlatex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/integration-with-texlatex/</guid>
      <description>Matplotlib’s LaTeX support requires a working LaTeX installation, dvipng (which may be included with your LaTeX installation), and Ghostscript (GPL Ghostscript 8.60 or later is recommended). Matplotlib’s pgf support requires a recent LaTeX installation that includes the TikZ/PGF packages (such as TeXLive), preferably with XeLaTeX or LuaLaTeX installed. Inserting TeX formulae in plots # TeX formulae can be inserted in the plot using the rc function
import matplotlib.pyplot as plt plt.</description>
    </item>
    
    <item>
      <title>Legends</title>
      <link>https://www.wikiod.com/matplotlib/legends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/legends/</guid>
      <description>Single Legend Shared Across Multiple Subplots # Sometimes you will have a grid of subplots, and you want to have a single legend that describes all the lines for each of the subplots as in the following image.
In order to do this, you will need to create a global legend for the figure instead of creating a legend at the axes level (which will create a separate legend for each subplot).</description>
    </item>
    
    <item>
      <title>Basic Plots</title>
      <link>https://www.wikiod.com/matplotlib/basic-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/basic-plots/</guid>
      <description>Scatter Plots # A simple scatter plot # import matplotlib.pyplot as plt # Data x = [43,76,34,63,56,82,87,55,64,87,95,23,14,65,67,25,23,85] y = [34,45,34,23,43,76,26,18,24,74,23,56,23,23,34,56,32,23] fig, ax = plt.subplots(1, figsize=(10, 6)) fig.suptitle(&#39;Example Of Scatterplot&#39;) # Create the Scatter Plot ax.scatter(x, y, color=&amp;quot;blue&amp;quot;, # Color of the dots s=100, # Size of the dots alpha=0.5, # Alpha/transparency of the dots (1 is opaque, 0 is transparent) linewidths=1) # Size of edge around the dots # Show the plot plt.</description>
    </item>
    
    <item>
      <title>Three-dimensional plots</title>
      <link>https://www.wikiod.com/matplotlib/three-dimensional-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/three-dimensional-plots/</guid>
      <description>Three-dimensional plotting in matplotlib has historically been a bit of a kludge, as the rendering engine is inherently 2d. The fact that 3d setups are rendered by plotting one 2d chunk after the other implies that there are often rendering issues related to the apparent depth of objects. The core of the problem is that two non-connected objects can either be fully behind, or fully in front of one another, which leads to artifacts as shown in the below figure of two interlocked rings (click for animated gif):</description>
    </item>
    
    <item>
      <title>Figures and Axes Objects</title>
      <link>https://www.wikiod.com/matplotlib/figures-and-axes-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/matplotlib/figures-and-axes-objects/</guid>
      <description>Creating an axes # There are two main ways to create an axes in matplotlib: using pyplot, or using the object-oriented API.
Using pyplot:
import matplotlib.pyplot as plt ax = plt.subplot(3, 2, 1) # 3 rows, 2 columns, the first subplot Using the object-oriented API:
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(3, 2, 1) The convenience function plt.subplots() can be used to produce a figure and collection of subplots in one command:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codeigniter Tutorial on </title>
    <link>https://www.wikiod.com/docs/codeigniter/</link>
    <description>Recent content in codeigniter Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/codeigniter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with codeigniter</title>
      <link>https://www.wikiod.com/codeigniter/getting-started-with-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/getting-started-with-codeigniter/</guid>
      <description>Installation and Setup # Windows Environment # Install XAMPP or WAMP Download and Unzip the package from Codeigniter.com Extract all the document in the server space (htdocs or www directory) Mac Environment # Install MAMP Download and Unzip the package from Codeigniter.com Extract all the document in the server space (htdocs) Linux Environment # Download and Unzip the package from Codeigniter.com Place the extracted folder in /var/www (in WAMP) or xampp/htdocs (XAMPP) GitHub # git clone https://github.</description>
    </item>
    
    <item>
      <title>Use of hooks</title>
      <link>https://www.wikiod.com/codeigniter/use-of-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/use-of-hooks/</guid>
      <description>Hook Points # pre_system # Called very early during system execution. Only the benchmark and hooks class have been loaded at this point. No routing or other processes have happened.
pre_controller # Called immediately prior to any of your controllers being called. All base classes, routing, and security checks have been done.
post_controller_constructor # Called immediately after your controller is instantiated, but prior to any method calls happening.
post_controller # Called immediately after your controller is fully executed.</description>
    </item>
    
    <item>
      <title>How to set time zone in CodeIgniter</title>
      <link>https://www.wikiod.com/codeigniter/how-to-set-time-zone-in-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/how-to-set-time-zone-in-codeigniter/</guid>
      <description>How to set the time zone in CodeIgniter # Placing date_default_timezone_set(&#39;Asia/Kolkata&#39;); on config.php above base URL also works.
PHP List of Supported Time Zones
application/config.php
&amp;lt;?php defined(&#39;BASEPATH&#39;) OR exit(&#39;No direct script access allowed&#39;); date_default_timezone_set(&#39;Asia/Kolkata&#39;); Another way I have found useful is if you wish to set a time zone for each user:
Create a MY_Controller.php file.
Create a column in your user table you can name it timezone or any thing you want to.</description>
    </item>
    
    <item>
      <title>Base url in Codeigniter</title>
      <link>https://www.wikiod.com/codeigniter/base-url-in-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/base-url-in-codeigniter/</guid>
      <description>Setting your base url in Codeigniter # You will need to set your base URL in application/config/config.php
If it is not set, then CodeIgniter will try to guess the protocol and path to your installation, but due to the security concerns the hostname will be set to $_SERVER[&#39;SERVER_ADDR&#39;] if available, or localhost otherwise. The auto-detection mechanism exists only for convenience during development and MUST NOT be used in production!
$config[&#39;base_url&#39;] = &#39;&#39;; It should be filed like</description>
    </item>
    
    <item>
      <title>Let&#39;s start Hello World</title>
      <link>https://www.wikiod.com/codeigniter/lets-start-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/lets-start-hello-world/</guid>
      <description>A very simple Hello World application # Starting from a fresh installation of Codeigniter 3, here is a simple way to start with an Hello World application, to break the ice with this solid PHP framework.
To do this you can start creating the view that we want to be shown for our Hello World app.
We are going to put it in your application folder, here:
In hello_world.php(/application/views/)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World!</description>
    </item>
    
    <item>
      <title>Using Model in codeigniter</title>
      <link>https://www.wikiod.com/codeigniter/using-model-in-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/using-model-in-codeigniter/</guid>
      <description>Calling Model function # Syntax
$this-&amp;gt;load-&amp;gt;model(&#39;model_name&#39;); $this-&amp;gt;model_name-&amp;gt;method_name(); Practice
$this-&amp;gt;load-&amp;gt;model(&#39;home_model&#39;); $this-&amp;gt;home_model-&amp;gt;get_data(); Creating Model # Go to application/model
File name - Home_model.php
Inside the file
class Home_model extends CI_Model { public $variable; public function __construct() { parent::__construct(); } public function get_data() { $query = $this-&amp;gt;db-&amp;gt;get(&#39;table_name&#39;, 10); return $query-&amp;gt;result_array(); } } And when you need to load this model:
$this-&amp;gt;load-&amp;gt;model(&#39;home_model&#39;); $this-&amp;gt;home_model-&amp;gt;get_data(); Or If you would like your model assigned to a different object name you can specify it like this:</description>
    </item>
    
    <item>
      <title>ImageFile Uploader In CodeIgniter</title>
      <link>https://www.wikiod.com/codeigniter/imagefile-uploader-in-codeigniter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/imagefile-uploader-in-codeigniter/</guid>
      <description>It is not necessary that you have to use the same names for the (Controller,File,Class,ID) or whatever it might be. All the things what I have used is for the understanding purpose of the coding flow and my assumptions. It is up to the developer who takes the code and edits the code/name according to their wish and then host the code and succeed.
Single File/ Image Uploader # We shall now see how the Image/File Uploading code works in the native CI method with the help of the forms that has been proposed by the CI way.</description>
    </item>
    
    <item>
      <title>How to use the CI libraries and helper</title>
      <link>https://www.wikiod.com/codeigniter/how-to-use-the-ci-libraries-and-helper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/how-to-use-the-ci-libraries-and-helper/</guid>
      <description>Using libraries and helpers # The example is for illustration purpose of using libraries and helpers and not a valid code. Do not copy / paste it on your projects.
HELPER helpers/sendEmail_helper.php
if ( ! function_exists(&#39;sendEmail&#39;)) { function sendEmail($email, $subject, $message, $lang, $cc = null, $file = null) { $CI =&amp;amp; get_instance(); $mail_config[&#39;protocol&#39;] = &#39;smtp&#39;; $mail_config[&#39;smtp_host&#39;] = &#39;host&#39;; $mail_config[&#39;smtp_user&#39;] = &#39;user&#39;; $mail_config[&#39;smtp_pass&#39;] = &#39;pass&#39;; $mail_config[&#39;smtp_port&#39;] = &#39;587&#39;; $mail_config[&#39;smtp_timeout&#39;] = 5; $mail_config[&#39;charset&#39;] = &#39;utf-8&#39;; $mail_config[&#39;mailtype&#39;] = &#39;html&#39;; $mail_config[&#39;wrapchars&#39;] = 76; $mail_config[&#39;wordwrap&#39;] = TRUE; $CI-&amp;gt;email-&amp;gt;initialize($mail_config); $CI-&amp;gt;email-&amp;gt;set_newLine(&#39;\r\n&#39;); if ($lang == &amp;quot;en&amp;quot;){ $CI-&amp;gt;email-&amp;gt;from(&#39;support.</description>
    </item>
    
    <item>
      <title>Securing your web application</title>
      <link>https://www.wikiod.com/codeigniter/securing-your-web-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/securing-your-web-application/</guid>
      <description>Remember CodeIgniter is a development Framework. It doesn&amp;rsquo;t strive to make you&amp;rsquo;re application secure. It merely gives you the tools to do it yourself. If you look at CI&amp;rsquo;s Security page, it pretty clear they are expecting the developer to understand Application Security and build it into their application.
If WebApp security is relatively new for you, I would start with OWASP. It might be advantageous to look at look other frameworks such as Zend or Cake which I believe do more upfront things</description>
    </item>
    
    <item>
      <title>Form Validation</title>
      <link>https://www.wikiod.com/codeigniter/form-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/codeigniter/form-validation/</guid>
      <description>Validate Form Example # // initialize library $this-&amp;gt;load-&amp;gt;library(&#39;form_validation&#39;); $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;username&#39;, &#39;Username&#39;, &#39;required|max_length[20]&#39;); // Add validation rules for require and max $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;password&#39;, &#39;Password&#39;, &#39;required|matches[password]&#39;); // Validation for the input match $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;passconf&#39;, &#39;Password Confirmation&#39;, &#39;required&#39;); $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;email&#39;, &#39;Email&#39;, &#39;required|valid_email|is_unique[userTable.emailColumn&#39;); // add validation for the email and check the emailColumn in userTable for unique value $this-&amp;gt;form_validation-&amp;gt;set_message(&#39;is_unique&#39;, &#39;The %s is already taken, Please use another %s&#39;); // add message for the is_unique if ($this-&amp;gt;form_validation-&amp;gt;run() === FALSE) { // fail } else { // success } Link</description>
    </item>
    
  </channel>
</rss>

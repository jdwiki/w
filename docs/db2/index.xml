<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>db2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/db2/</link>
    <description>Recent content in db2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/db2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with db2</title>
      <link>https://www.wikiod.com/db2/getting-started-with-db2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/getting-started-with-db2/</guid>
      <description>Installation # There different flavors of DB2. One of them is LUW: Linux, UNIX and Windows.
DB2 LUW in Linux / UNIX can be installed with or without root. When installed with root, you can create different instances associating them to different users.
When installing DB2 LUW without root privileges, you can install DB2 in your home directory and your user will be automatically the only instance this installation can have.</description>
    </item>
    
    <item>
      <title>Hello World;</title>
      <link>https://www.wikiod.com/db2/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/hello-world/</guid>
      <description>Creating a database in DB2 # CREATE DATABASE SAMPLEDB; This will create a new database called sampledb.
Connecting to a database in DB2 # CONNECT TO SAMPLEDB; From the command line (db2clp, terminal, db2cmd) you can write:
db2 CONNECT TO SAMPLEDB Create a table in DB2 called &amp;ldquo;employee&amp;rdquo; # The following statement will create a new table called employee:
CREATE TABLE EMPLOYEE ( EMPNO CHAR(6) NOT NULL, FIRSTNME VARCHAR(12) NOT NULL, LASTNAME VARCHAR(15) NOT NULL, SALARY DECIMAL(9,2) , PRIMARY KEY (EMPNO) ) This will create a new table called employee.</description>
    </item>
    
    <item>
      <title>Parse comma-separated values in a column into multiple rows</title>
      <link>https://www.wikiod.com/db2/parse-comma-separated-values-in-a-column-into-multiple-rows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/parse-comma-separated-values-in-a-column-into-multiple-rows/</guid>
      <description>Syntax # WITH CTE_name (column_name[,&amp;hellip;]) AS ( SELECT column_name[,&amp;hellip;] FROM base_table UNION ALL SELECT column_name[,&amp;hellip;] FROM CTE_name WHERE &amp;lt;recursion limiting condition&amp;gt; ) SELECT column_name[,&amp;hellip;] FROM CTE_name Recursive query to parse comma-separated values # Although storing multiple values in a single column violates normalization rules, sometimes one has to deal with badly designed legacy tables. A recursive query can help convert comma-separated values into distinct rows.
Create a sample badly designed table and insert some data:</description>
    </item>
    
    <item>
      <title>Where not in multiple columns</title>
      <link>https://www.wikiod.com/db2/where-not-in-multiple-columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/where-not-in-multiple-columns/</guid>
      <description>Filter out multiple combinations of values # Lets say you want to filter a query by two columns, but only certain combinations of those columns. For example, it&amp;rsquo;s OK to have account 60400 with reference JE, but you cannot have account 60400 with reference ED, but you can have account 60500 with reference ED.
select * from schema.table where (acct, ref) not in ( values (60400, &#39;ED&#39;), (60600, &#39;ED&#39;), (60701, &#39;ED&#39;), (70400, &#39;ED&#39;), (70500, &#39;ED&#39;), (70600, &#39;ED&#39;), (80800, &#39;ED&#39;) ); </description>
    </item>
    
    <item>
      <title>dashDB</title>
      <link>https://www.wikiod.com/db2/dashdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/dashdb/</guid>
      <description>IBM dashDB is a family of SQL databases. It&amp;rsquo;s engine is a blend of DB2, Netezza and the BLU in-memory engine. Any supported DB2 driver will work; it&amp;rsquo;s a drop-replacement for DB2.
The 3 product lines for dashDB are: (1) IBM dashDB for Transactions: A general-purpose, fully managed cloud SQL database. (2) IBM dashDB for Analytics: A cloud SQL data warehouse. (3) IBM dashDB Local: A local version you can install on your own hardware.</description>
    </item>
    
    <item>
      <title>Insert into one table by selecting from another table</title>
      <link>https://www.wikiod.com/db2/insert-into-one-table-by-selecting-from-another-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/insert-into-one-table-by-selecting-from-another-table/</guid>
      <description>Insert into one table by selecting from another table # insert into schema.table (field1, field2) select &#39;Static Value&#39;, foreignField from schema.otherTable; </description>
    </item>
    
    <item>
      <title>Combine multiple rows into a single comma separated value</title>
      <link>https://www.wikiod.com/db2/combine-multiple-rows-into-a-single-comma-separated-value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/combine-multiple-rows-into-a-single-comma-separated-value/</guid>
      <description>Using the listagg() function # Let&amp;rsquo;s say you&amp;rsquo;ve got a table of loans, and another related table of parcels, where each loan can have one or more parcels associated with it. If you want a query to show each loan and a list of all its associated parcels, but you only want each loan to show up once, then you could use something like this:
select loan.loannumber, parcel_agg.p_list as parcel_list from schema.</description>
    </item>
    
    <item>
      <title>Copy table with or without data</title>
      <link>https://www.wikiod.com/db2/copy-table-with-or-without-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/copy-table-with-or-without-data/</guid>
      <description>Example of how to copy existing table structure with/without data
Syntax # CREATE TABLE schemaName.table AS (SELECT columns FROM schemaName.table) WITH DATA Copy Table With Data # CREATE TABLE myschema.tableNew AS ( SELECT * FROM myschema.tableOld ) WITH DATA Copy Table without data # CREATE TABLE myschema.tableNew AS ( SELECT * FROM myschema.tableOld ) WITHOUT DATA Copy Table with where clause # CREATE TABLE myschema.tableNew AS ( SELECT * FROM myschema.</description>
    </item>
    
    <item>
      <title>DB2 Constraint Information</title>
      <link>https://www.wikiod.com/db2/db2-constraint-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/db2-constraint-information/</guid>
      <description>This documentation will help anyone who is looking for all the Conrtraints on a column of a table. The query can be modified to find the table/columns based on the constraint name.
Get constraints based on column name # select cst.constraint_schema, cst.constraint_name, fk.table_name, fk.ordinal_position, fk.column_name, pk.table_name, pk.column_name from qsys2.syscst cst join qsys2.syskeycst fk on fk.constraint_schema = cst.constraint_schema and fk.constraint_name = cst.constraint_name join qsys2.sysrefcst ref on ref.constraint_schema = cst.constraint_schema and ref.constraint_name = cst.</description>
    </item>
    
    <item>
      <title>Drop table</title>
      <link>https://www.wikiod.com/db2/drop-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/db2/drop-table/</guid>
      <description>Basic instructions to drop a table in DB2.
Basic Drop Table Syntax # db2 connect to {databaseName} db2 drop table {schema}.{table} db2 connect reset The schema is not necessary if it matches the current user name. The &amp;ldquo;db2&amp;rdquo; prefix is not necessary if you are already in a DB2 command prompt.</description>
    </item>
    
  </channel>
</rss>

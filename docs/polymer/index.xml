<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polymer Tutorial on </title>
    <link>https://www.wikiod.com/docs/polymer/</link>
    <description>Recent content in polymer Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/polymer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with polymer</title>
      <link>https://www.wikiod.com/polymer/getting-started-with-polymer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/getting-started-with-polymer/</guid>
      <description>Basic Element Structure # We got the following very basic element my-element saved as src/my-element.html
&amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;bower_components/polymer/polymer.html&amp;quot;&amp;gt; &amp;lt;dom-module id=&amp;quot;my-element&amp;quot;&amp;gt; &amp;lt;template&amp;gt; &amp;lt;style&amp;gt; /* local styles go here */ :host { display: block; } &amp;lt;/style&amp;gt; &amp;lt;!-- local DOM goes here --&amp;gt; &amp;lt;content&amp;gt;&amp;lt;/content&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; Polymer({ /* this is the element&#39;s prototype */ is: &#39;my-element&#39; }); &amp;lt;/script&amp;gt; &amp;lt;/dom-module&amp;gt; The &amp;lt;link&amp;gt; includes the Polymer library using an HTML import. The &amp;lt;dom-module&amp;gt; is the local DOM wrapper for the element (in this case, my-element).</description>
    </item>
    
    <item>
      <title>Using external Javascript Libraries with Polymer</title>
      <link>https://www.wikiod.com/polymer/using-external-javascript-libraries-with-polymer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/using-external-javascript-libraries-with-polymer/</guid>
      <description>Since all Web Components must be self-contained, including all their dependencies, duplicated dependency import would quickly become an issue with script includes. Thus, Web Components (and, by extension, Polymer) use W3C HTML imports for managing component dependencies. These imported HTML files can be cached by the browser and will only be loaded once.
Most external libraries are not yet prepared for HTML imports. Fortunately creating the necessary HTML wrapper is quick and straight forward.</description>
    </item>
    
    <item>
      <title>iron-data-table</title>
      <link>https://www.wikiod.com/polymer/iron-data-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/iron-data-table/</guid>
      <description>Hello world # Initial starting point for iron-data-table.
Working jsBin
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;base href=&amp;quot;https://polygit.org/polymer+:master/iron-data-table+Saulis+:master/components/&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;polymer/polymer.html&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;webcomponentsjs/webcomponents-lite.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;iron-ajax/iron-ajax.html&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;paper-button/paper-button.html&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;iron-data-table/iron-data-table.html&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;dom-module id=&amp;quot;x-foo&amp;quot;&amp;gt; &amp;lt;template&amp;gt; &amp;lt;style&amp;gt; &amp;lt;/style&amp;gt; &amp;lt;paper-button on-tap=&amp;quot;msg&amp;quot;&amp;gt;Click Me&amp;lt;/paper-button&amp;gt; &amp;lt;iron-ajax auto url=&amp;quot;https://saulis.github.io/iron-data-table/demo/users.json&amp;quot; last-response=&amp;quot;{{users}}&amp;quot; &amp;gt; &amp;lt;/iron-ajax&amp;gt; &amp;lt;iron-data-table selection-enabled items=&amp;quot;[[users.results]]&amp;quot;&amp;gt; &amp;lt;data-table-column name=&amp;quot;Picture&amp;quot; width=&amp;quot;50px&amp;quot; flex=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;template&amp;gt; &amp;lt;img src=&amp;quot;[[item.user.picture.thumbnail]]&amp;quot;&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/data-table-column&amp;gt; &amp;lt;data-table-column name=&amp;quot;First Name&amp;quot;&amp;gt; &amp;lt;template&amp;gt;[[item.user.name.first]]&amp;lt;/template&amp;gt; &amp;lt;/data-table-column&amp;gt; &amp;lt;data-table-column name=&amp;quot;Last Name&amp;quot;&amp;gt; &amp;lt;template&amp;gt;[[item.user.name.last]]&amp;lt;/template&amp;gt; &amp;lt;/data-table-column&amp;gt; &amp;lt;data-table-column name=&amp;quot;Email&amp;quot;&amp;gt; &amp;lt;template&amp;gt;[[item.</description>
    </item>
    
    <item>
      <title>Event Handling</title>
      <link>https://www.wikiod.com/polymer/event-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/event-handling/</guid>
      <description>Here&amp;rsquo;s a plunker for all the examples Attribute&amp;rsquo;s name are case-insensitive and will always be converted to lowercase, e.g if you have an attribute on-myListener listener will be set on mylistener event. Similar to listen you can also use unlisten method remove any listener. Poperty change fires an event by the name of property-changed e.g if property is myProperty event will be my-propert-changed(camel casing to &amp;lsquo;-&amp;rsquo;). You can listen to them either by using on-event attribute of listener Object.</description>
    </item>
    
    <item>
      <title>Reusable Modals with Polymer</title>
      <link>https://www.wikiod.com/polymer/reusable-modals-with-polymer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/reusable-modals-with-polymer/</guid>
      <description>Syntax # Element Declaration: &amp;lt;tool-bar link2-share=&amp;ldquo;&amp;ldquo;link2-fork=&amp;ldquo;&amp;ldquo;modal-id=&amp;ldquo;&amp;ldquo;title=&amp;rdquo;&amp;quot;&amp;gt; Note:
The code through this writeup, is not a working copy. You need to replace the fillers for hrefs,src’s and project names.
The code illustrates only a Proof of concept.
To see the custom element in action,
go here
And, to browse through the usage and structure of the custom element,
go here
The Usage is in “index.html”
The element is in, “elements/tool-bar.html“
Modals # So you want to add material design to your business or career portfolio.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://www.wikiod.com/polymer/unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/unit-testing/</guid>
      <description>Web Component Tester - the tool for unit testing apps built with Polymer. You get a browser-based testing environment, configured out of the box with mocha, chai, async, lodash, sinon &amp;amp; sinon-chai, test-fixture, accessibility-developer-tools. WCT will run your tests against whatever browsers you have installed locally, or remotely via Sauce Labs.
Simple example using web-component-tester # installing # npm install web-component-tester --save-dev setting up # wct.conf.js
module.exports = { verbose: true, plugins: { local: { browsers: [&#39;chrome&#39;] } } }; running # node node_modules/web-component-tester/bin/wct test/index.</description>
    </item>
    
    <item>
      <title>Example of Polymer toggleAttribute</title>
      <link>https://www.wikiod.com/polymer/example-of-polymer-toggleattribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/example-of-polymer-toggleattribute/</guid>
      <description>Syntax # toggleAttribute(name, bool, node) Parameters # Name Details name String: name of the HTML attribute which needs to be toggled bool boolean: Boolean to force the attribute on or off. When unspecified, the state of the attribute will be reversed. node HTMLElement: name of the node which contains the HTML attribute. Defaults to this A good example of this will be form, where submit button should only be active if all the mandatory fields have input.</description>
    </item>
    
    <item>
      <title>Google Map Mark With Built in Cache</title>
      <link>https://www.wikiod.com/polymer/google-map-mark-with-built-in-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/google-map-mark-with-built-in-cache/</guid>
      <description>Syntax # &amp;lt;g-map
api-key=&amp;quot;AIzaSyBLc_T17p91u6ujSpThe2H3nh_8nG2p6FQ&amp;quot; locations=&#39;[&amp;quot;Boston&amp;quot;,&amp;quot;NewYork&amp;quot;,&amp;quot;California&amp;quot;,&amp;quot;Pennsylvania&amp;quot;]&#39;&amp;gt;&amp;lt;/g-map&amp;gt; Parameters # api-key google&amp;rsquo;s javascript api key locations List of locations you want to mark on the google map &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; For the entire code, Navigate to the Repository
To see the google map in action, Look Here
A - Getting Started # In a nutshell, Our Custom Element Should
Have a Built in Search Functionality, that searches and marks places on the map. Accept An attribute called location-array , which is a list of places Have a Listener , for listening to an event called “google-map-ready“.</description>
    </item>
    
    <item>
      <title>Polymer Cheat Sheet</title>
      <link>https://www.wikiod.com/polymer/polymer-cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/polymer-cheat-sheet/</guid>
      <description>This is a cheat sheet for the Polymer 2.x library. Fork of post from Monica Dinculescu.
Defining an element # Docs: 1.x -&amp;gt; 2.x upgrade guide, registering an element, shared style modules.
&amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;bower_components/polymer/polymer-element.html&amp;quot;&amp;gt; &amp;lt;dom-module id=&amp;quot;element-name&amp;quot;&amp;gt; &amp;lt;template&amp;gt; &amp;lt;!-- Use one of these style declarations, but not both --&amp;gt; &amp;lt;!-- Use this if you don’t want to include a shared style --&amp;gt; &amp;lt;style&amp;gt;&amp;lt;/style&amp;gt; &amp;lt;!-- Use this if you want to include a shared style --&amp;gt; &amp;lt;style include=&amp;quot;some-style-module-name&amp;quot;&amp;gt;&amp;lt;/style&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; class MyElement extends Polymer.</description>
    </item>
    
    <item>
      <title>SUPER-Optimising for production</title>
      <link>https://www.wikiod.com/polymer/super-optimising-for-production/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/polymer/super-optimising-for-production/</guid>
      <description>Once your project is done, you are left to wonder how will you upload those load of a 100 HTML imports on your web server and even if you do that, how much hours your site is going to take to load for a single client. In this topic, you&amp;rsquo;ll see how to convert the development mess into refined single html and js files.
Syntax # npm install: saves packages using Node.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sbt Tutorial on </title>
    <link>https://www.wikiod.com/docs/sbt/</link>
    <description>Recent content in sbt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sbt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sbt</title>
      <link>https://www.wikiod.com/sbt/getting-started-with-sbt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/getting-started-with-sbt/</guid>
      <description>Install SBT on Linux # Full instructions can be found here.
Install the JDK.
Set the Java Environment variable.
export JAVA_HOME=/usr/local/java/jdk1.8.0_102 echo $JAVA_HOME /usr/local/java/jdk1.8.0_102 export PATH=$PATH:$JAVA_HOME/bin/ echo $PATH ...:/usr/local/java/jdk1.8.0_102/bin/ Install Scala.
sudo wget http://www.scala-lang.org/files/archive/scala-2.11.8.deb sudo dpkg -i scala-2.11.8.deb sudo apt-get update sudo apt-get install scala Install SBT.
wget https://bintray.com/artifact/download/sbt/debian/sbt-0.13.9.deb sudo dpkg -i sbt-0.13.9.deb sudo apt-get update sudo apt-get install sbt RPM-based Linux Distributions # Download SBT repository definitions and add it to YUM:</description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>https://www.wikiod.com/sbt/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/dependencies/</guid>
      <description>Add a Managed Library Dependency # libraryDependency is the SettingKey that handles &amp;lsquo;managed&amp;rsquo; library dependencies, which are dependencies that are automatically downloaded, matching the supplied versions. To add a single dependency:
libraryDependencies += &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.2.0-M1&amp;quot; The first part, &amp;quot;com.typesafe.slick&amp;quot;, indicates the library package. The second part, &amp;quot;slick&amp;quot;, is the library in question. The final part, &amp;quot;3.2.0-M1&amp;quot;, is the version. Because the library is joined by %% the version of Scala supplied by the scalaVersion setting key will be utilized.</description>
    </item>
    
    <item>
      <title>Build Overview</title>
      <link>https://www.wikiod.com/sbt/build-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/build-overview/</guid>
      <description>Official documentation is at www.scala-sbt.org.
Directory Structure # The standard structure for a project built by SBT is:
projectName/ build.sbt project/ &amp;lt;SBT sub-build information&amp;gt; src/ main/ scala/ &amp;lt;Scala source files&amp;gt; java/ &amp;lt;Java source files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; test/ scala/ &amp;lt;Scala test files&amp;gt; java/ &amp;lt;Java test files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; Other directories may exist, but the build deals primarily with these. In the base directory build.sbt is placed, whose contents at a minimum are:</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://www.wikiod.com/sbt/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/projects/</guid>
      <description>Multiple Projects in the same Build (Subprojects) # Sometimes a build combines multiple source directories, each of which is their own &amp;lsquo;project&amp;rsquo;. For instance, you might have a build structure like this:
projectName/ build.sbt project/ src/ main/ &amp;hellip; test/ &amp;hellip; core/ src/ main/ &amp;hellip; test/ &amp;hellip; webapp/ src/ main/ &amp;hellip; test/ &amp;hellip;
In the above project, the code in projectName/src is considered the root project. There are two other modules, or &amp;lsquo;subprojects&amp;rsquo;, core and webapp.</description>
    </item>
    
    <item>
      <title>Tasks</title>
      <link>https://www.wikiod.com/sbt/tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/tasks/</guid>
      <description>Create a Simple Task # All that is needed to define a task is a declaration of it&amp;rsquo;s type and a description:
lazy val exampleTask = taskKey[Unit](&amp;quot;An example task that will return no value.&amp;quot;) Because Unit is the type, this task is composed entirely of side-effects. Once defined, to implement actions:
exampleTask := { val s: TaskStreams = streams.value s.log.info(&amp;quot;The example task was executed.&amp;quot;) } If these are defined in build.</description>
    </item>
    
    <item>
      <title>Getting started with daily development</title>
      <link>https://www.wikiod.com/sbt/getting-started-with-daily-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sbt/getting-started-with-daily-development/</guid>
      <description>Daily continuous development example with Scala # # install sbt with homebrew (if you didn&#39;t) brew install sbt # - create a new scala project # - name your project name when asked like: hello-world sbt new sbt/scala-seed.g8 # go to the new project directory that you named cd hello-world # run sbt to open the sbt shell sbt # run your project in continuous running mode ~ run # to continuously see the test outputs # open up a new terminal tab, run sbt, type: ~ test # to continuously compile # open up a new terminal tab, run sbt, type: ~ compile ~ used for continuous operations in sbt as seen above.</description>
    </item>
    
  </channel>
</rss>

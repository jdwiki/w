<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-core Tutorial on </title>
    <link>https://www.wikiod.com/docs/asp-dotnet-core/</link>
    <description>Recent content in asp.net-core Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/asp-dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with asp.net-core</title>
      <link>https://www.wikiod.com/asp-dotnet-core/getting-started-with-aspnet-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/getting-started-with-aspnet-core/</guid>
      <description>Installation and Setup # Installing Visual Studio # If you do not have Visual Studio installed, you can download the free Visual Studio Community Edition here. If you already have it installed, you can proceed to the next step.
Creating an ASP.NET Core MVC Application. # Open Visual Studio. Select File &amp;gt; New Project. Select Web under the language of your choice within the Templates section on the left. Choose a preferred Project type within the dialog.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.wikiod.com/asp-dotnet-core/dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/dependency-injection/</guid>
      <description>Aspnet core is built with Dependency Injection as one of its key core concepts. It introduces one conforming container abstraction so you can replace the builtin one with a third-party container of your choice.
Syntax # IServiceCollection.Add(ServiceDescriptor item); IServiceCollection.AddScoped(Type serviceType); IServiceCollection.AddScoped(Type serviceType, Type implementationType); IServiceCollection.AddScoped(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; implementationFactory); IServiceCollection.AddScoped&amp;lt;TService&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; implementationFactory) IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;(Func&amp;lt;IServiceProvider, TImplementation&amp;gt; implementationFactory) IServiceCollection.AddSingleton(Type serviceType); IServiceCollection.AddSingleton(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; implementationFactory); IServiceCollection.AddSingleton(Type serviceType, Type implementationType); IServiceCollection.</description>
    </item>
    
    <item>
      <title>Rate limiting</title>
      <link>https://www.wikiod.com/asp-dotnet-core/rate-limiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/rate-limiting/</guid>
      <description>AspNetCoreRateLimit is an open source ASP.NET Core rate limiting solution designed to control the rate of requests that clients can make to a Web API or MVC app based on IP address or client ID.
Rate limiting based on client ID # With ClientRateLimit middleware you can set multiple limits for different scenarios like allowing a Client to make a maximum number of calls in a time interval like per second, 15 minutes, etc.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Log both Request and Response using Middleware</title>
      <link>https://www.wikiod.com/asp-dotnet-core/aspnet-core---log-both-request-and-response-using-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/aspnet-core---log-both-request-and-response-using-middleware/</guid>
      <description>For some time I&amp;rsquo;ve searched for the best way to log requests and response in an ASP.Net Core. I was developing services and one of the requirements was to record request with its response in one record the the database. So many topics out there but none worked for me. it&amp;rsquo;s either for request only, response only or simply didn&amp;rsquo;t work. When I was able to finally do it, and it had evolved during my project to better error handling and logging exceptions so I thought of sharing.</description>
    </item>
    
    <item>
      <title>Bundling and Minification</title>
      <link>https://www.wikiod.com/asp-dotnet-core/bundling-and-minification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/bundling-and-minification/</guid>
      <description>Bundler and Minifier Extension # Visual Studio also features an available Bundler and Minifier Extension that is capable of handling this process for you. The extension allows you to easily select and bundle the files you need without writing a line of code.
Building Your Bundles # After installing the extension, you select all of the specific files that you want to include within a bundle and use the Bundle and Minify Files option from the extension :</description>
    </item>
    
    <item>
      <title>Angular2 and .Net Core</title>
      <link>https://www.wikiod.com/asp-dotnet-core/angular2-and-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/angular2-and-net-core/</guid>
      <description>Quick tutorial for an Angular 2 Hello World! App with .Net Core in Visual Studio 2015 # Steps:
Create Empty .Net Core Web App: Go to wwwroot, and create a normal html page called Index.html: Configure Startup.cs to accept static files (this will require to add &amp;ldquo;Microsoft.AspNetCore.StaticFiles&amp;rdquo;: &amp;ldquo;1.0.0&amp;rdquo; library in the “project.json” file): Add NPN File:
Right click the WebUi project and add NPN Configuration File (package.json): Verify the last versions of the packages: Note: If visual studio does not detect the versions of the packages (Check all packages, because some of them does show the version, and some others don&amp;rsquo;t), it might be because the Node version coming in visual studio is not working correctly, so it will probably require to install node js externally and then link that installation with visual studio.</description>
    </item>
    
    <item>
      <title>Configuring multiple Environments</title>
      <link>https://www.wikiod.com/asp-dotnet-core/configuring-multiple-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/configuring-multiple-environments/</guid>
      <description>Having appsettings per Environment # For each environment you need to create a separate appsettings.{EnvironmentName}.json files:
appsettings.Development.json appsettings.Staging.json appsettings.Production.json Then open project.json file and include them into &amp;ldquo;include&amp;rdquo; in &amp;ldquo;publishOptions&amp;rdquo; section. This lists all the files and folders that will be included when you publish:
&amp;quot;publishOptions&amp;quot;: { &amp;quot;include&amp;quot;: [ &amp;quot;appsettings.Development.json&amp;quot;, &amp;quot;appsettings.Staging.json&amp;quot;, &amp;quot;appsettings.Production.json&amp;quot; ... ] } The final step. In your Startup class add:
.AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true); in constructor where you set up configuration sources:</description>
    </item>
    
    <item>
      <title>Localization</title>
      <link>https://www.wikiod.com/asp-dotnet-core/localization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/localization/</guid>
      <description>Localization using JSON language resources # In ASP.NET Core there are several different ways we can localize/globalize our app. It&amp;rsquo;s important to pick a way that suits your needs. In this example you&amp;rsquo;ll see how we can make a multilingual ASP.NET Core app that reads language specific strings from .json files and store them in memory to provide localization in all sections of the app as well as maintaining a high performance.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://www.wikiod.com/asp-dotnet-core/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/logging/</guid>
      <description>Add Logger to Controller # Instead of requesting an ILoggerFactory and creating an instance of ILogger explicitly, you can request an ILogger (where T is the class requesting the logger).
public class TodoController : Controller { private readonly ILogger _logger; public TodoController(ILogger&amp;lt;TodoController&amp;gt; logger) { _logger = logger; } } Using NLog Logger # NLog.Extensions.Logging is the official NLog provider for Microsoft&amp;rsquo;s in .NET Core and ASP.NET Core. Here and here are instruction and example respectively.</description>
    </item>
    
    <item>
      <title>Sending Email in .Net Core apps using MailKit</title>
      <link>https://www.wikiod.com/asp-dotnet-core/sending-email-in-net-core-apps-using-mailkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-core/sending-email-in-net-core-apps-using-mailkit/</guid>
      <description>Currently .Net Core does not include support to send emails like System.Net.Mail from .Net. MailKit project (which is available on nuget) is a nice library for this purpose.
Simple implementation for sending emails # using MailKit.Net.Smtp; using MimeKit; using MimeKit.Text; using System.Threading.Tasks; namespace Project.Services { /// Using a static class to store sensitive credentials /// for simplicity. Ideally these should be stored in /// configuration files public static class Constants { public static string SenderName =&amp;gt; &amp;quot;&amp;lt;sender_name&amp;gt;&amp;quot;; public static string SenderEmail =&amp;gt; &amp;quot;&amp;lt;sender_email&amp;gt;&amp;quot;; public static string EmailPassword =&amp;gt; &amp;quot;email_password&amp;quot;; public static string SmtpHost =&amp;gt; &amp;quot;&amp;lt;smtp_host&amp;gt;&amp;quot;; public static int SmtpPort =&amp;gt; &amp;quot;smtp_port&amp;quot;; } public class EmailService : IEmailSender { public Task SendEmailAsync(string recipientEmail, string subject, string message) { MimeMessage mimeMessage = new MimeMessage(); mimeMessage.</description>
    </item>
    
  </channel>
</rss>

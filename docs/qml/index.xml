<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qml Tutorial on </title>
    <link>https://www.wikiod.com/docs/qml/</link>
    <description>Recent content in qml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with qml</title>
      <link>https://www.wikiod.com/qml/getting-started-with-qml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qml/getting-started-with-qml/</guid>
      <description>Hello World # A simple application showing the text &amp;ldquo;Hello World&amp;rdquo; in the center of the window.
import QtQuick 2.3 import QtQuick.Window 2.0 Window { visible: true width: 640 height: 480 title: qsTr(&amp;quot;Hello World&amp;quot;) //The method qsTr() is used for translations from one language to other. Text { text: qsTr(&amp;quot;Hello World&amp;quot;) anchors.centerIn: parent } } Installation # QML comes with newer Version of the cross-platform application framework Qt. You can find the newest Version of Qt in the Downloads section.</description>
    </item>
    
    <item>
      <title>Creating custom elements in C&#43;&#43;</title>
      <link>https://www.wikiod.com/qml/creating-custom-elements-in-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qml/creating-custom-elements-in-c-/</guid>
      <description>Creating custom elements in C++ # QML came with rich set of visual elements. Using only QML we can build complex applications with these elements. Also it&amp;rsquo;s very easy to build your own element based on set of standard items like Rectangle, Button, Image etc. Moreover, we can use items like Canvas to build element with custom painting. It would seem that we can build a variety of applications in QML only, without touching the capabilities of C++.</description>
    </item>
    
    <item>
      <title>Property binding</title>
      <link>https://www.wikiod.com/qml/property-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qml/property-binding/</guid>
      <description>An object&amp;rsquo;s property can be assigned a static value which stays constant until it is explicitly assigned a new value. However, to make the fullest use of QML and its built-in support for dynamic object behaviors, most QML objects use property bindings.
Property bindings are a core feature of QML that lets developers specify relationships between different object properties. When a property&amp;rsquo;s dependencies change in value, the property is automatically updated according to the specified relationship.</description>
    </item>
    
    <item>
      <title>Integration with C&#43;&#43;</title>
      <link>https://www.wikiod.com/qml/integration-with-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qml/integration-with-c-/</guid>
      <description>Creating a simple model for TreeView # Since Qt 5.5 we have a new wonderful TreeView, a control we&amp;rsquo;ve all been waiting for. A TreeView implements a tree representation of items from a model. In general it looks like other QML views - ListView or TableView. But data structure of TreeView is more complex.
A data in ListView or TableView is represented by one-dimensional array of nodes. In TreeView each node can contain its own array of nodes.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://www.wikiod.com/qml/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qml/animation/</guid>
      <description>Simple number animation # One of the very basic animations that you could come across is the NumberAnimation. This animation works by changing the numeric value of a property of an item from an initial state to a final state. Consider the following complete example:
import QtQuick 2.7 import QtQuick.Controls 2.0 ApplicationWindow { visible: true width: 400 height: 640 Rectangle{ id: rect anchors.centerIn: parent height: 100 width: 100 color: &amp;quot;blue&amp;quot; MouseArea{ anchors.</description>
    </item>
    
  </channel>
</rss>

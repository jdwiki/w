<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ember.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/ember-js/</link>
    <description>Recent content in ember.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ember-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with ember.js</title>
      <link>https://www.wikiod.com/ember-js/getting-started-with-emberjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/getting-started-with-emberjs/</guid>
      <description>Installation or Setup # Getting started with Ember is easy. Ember projects are created and managed through our command line build tool Ember CLI. This tool provides:
Modern application asset management (including concatenation, minification, and versioning). Generators to help create components, routes, and more. A conventional project layout, making existing Ember applications easy to approach. Support for ES2015/ES6 JavaScript via the Babel project. This includes support for JavaScript modules, which are used throughout this guide.</description>
    </item>
    
    <item>
      <title>Asynchronous Tasks in Components</title>
      <link>https://www.wikiod.com/ember-js/asynchronous-tasks-in-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/asynchronous-tasks-in-components/</guid>
      <description>in ember-concurrency the extra setting of error is a work around to prevent thrown exceptions from bubbling up to Ember&amp;rsquo;s onerror (since it is meant to be handled in the template). There is a feature request to handle this better.
ember-concurrency task # An alternative community de facto standard is an addon called ember-concurrency that makes a lot of the promise confusion go away.
It can be installed with the command ember install ember-concurrency.</description>
    </item>
    
    <item>
      <title>Component - communication between child to parent component.</title>
      <link>https://www.wikiod.com/ember-js/component---communication-between-child-to-parent-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/component---communication-between-child-to-parent-component/</guid>
      <description>Syntax # (yield &amp;ndash; Allows you to export items from a component (hash &amp;ndash; Allows you to export a hash or object, since this is required to call child components within the parent&amp;rsquo;s block. The requirement is that there is a . for the component to be created (component &amp;ndash; Creates the child component which can take anything in the parent&amp;rsquo;s context. The component can be curried, since it is only called when the user uses it, so add as many attributes as you need, and the user can add the rest.</description>
    </item>
    
    <item>
      <title>How to update Ember, Ember Data and Ember CLI</title>
      <link>https://www.wikiod.com/ember-js/how-to-update-ember-ember-data-and-ember-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/how-to-update-ember-ember-data-and-ember-cli/</guid>
      <description>To find the latest stable version of Ember, click here. To find the latest stable version of Ember Data, click here. To find the latest stable version of Ember CLI, click here. All these steps were found on Ember cli release note.
Updating Ember CLI # Ember CLI is a normal npm package. To update it we have to uninstall it and then install the version we want.
As of writing this post the latest version is 2.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://www.wikiod.com/ember-js/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/debugging/</guid>
      <description>Running debug-only code # Ember has a static global method called runInDebug which can run a function meant for debugging.
Ember.runInDebug(() =&amp;gt; { // this code only runs in dev mode }); In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.
Logging EmberData # The ember data models have a toJSON method that extracts the relevant data:</description>
    </item>
    
    <item>
      <title>Currency formatting template helper</title>
      <link>https://www.wikiod.com/ember-js/currency-formatting-template-helper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/currency-formatting-template-helper/</guid>
      <description>More details available in Ember guides, where this example was taken from.
Compatible with Ember 2.2.0+ (2.11.0 was the latest at the time of writing)
Creating a new helper # Use Ember CLI to generate a new helper in your app:
ember generate helper format-currency
Then edit helpers/format-currency.js to contain the following:
import Ember from &#39;ember&#39;; export function formatCurrency([value, ...rest]) { const dollars = Math.floor(value / 100); const cents = value % 100; const sign = &#39;$&#39;; if (cents.</description>
    </item>
    
    <item>
      <title>How to import JavaScript libraryplugin</title>
      <link>https://www.wikiod.com/ember-js/how-to-import-javascript-libraryplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/how-to-import-javascript-libraryplugin/</guid>
      <description>Open the directory of your ember.js project, You will find there a file named ember-cli-build.js. You can install Your libraries or plugins using bower, then point the import to the bower_components folder, but if you have a file You want to add, just drag them to the folder of Your project and write the app.import to that file.
Syntax # app.import(&amp;lsquo;path to file starting from project folder/file.js&amp;rsquo;); Example ember-cli-build.js file # var EmberApp = require(&#39;ember-cli/lib/broccoli/ember-app&#39;); module.</description>
    </item>
    
    <item>
      <title>Initialize Foundation or Bootstrap on ember-cli in a proper way</title>
      <link>https://www.wikiod.com/ember-js/initialize-foundation-or-bootstrap-on-ember-cli-in-a-proper-way/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/initialize-foundation-or-bootstrap-on-ember-cli-in-a-proper-way/</guid>
      <description>Bootstrap : I think that&amp;rsquo;s not proper way. The best way in my opinion is an ember-bootstrap addon.
ember-bootstrap uses the Bootstrap CSS classes while replacing the behaviors from the components Bootstrap implements in bootstrap.js, such as toggle, navbar, modal, etc., with equivalent, CSS class-compatible native Ember components.
Foundation: There is an addon called Ember CLI Foundation 6 SASS, it&amp;rsquo;s also installed using command line.
Parameters # Parameter Usage Ember install Download a new extension package using Ember npm install Download a new extension package using node.</description>
    </item>
    
    <item>
      <title>Date Format Helper</title>
      <link>https://www.wikiod.com/ember-js/date-format-helper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/date-format-helper/</guid>
      <description>Helper for a clean date and hour format. # When you want the current date and time, you can do this with the Javascript function Date, but will return the following format which isn&amp;rsquo;t always useful: Wed Jun 07 2017 13:26:15 GMT+0200 (Romance (zomertijd)).
Copy the following code into app/helpers/helpers.js, and simply call getCurrentDateAndFormat() instead of new Date().
export function getCurrentDateAndFormat() { let today = new Date(); let dd = today.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://www.wikiod.com/ember-js/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ember-js/testing/</guid>
      <description>Creating and maintaining a comprehensive test suite should be a priority for each developer. Testing in Ember.js involves dealing with asynchrony, Ember Run Loop and mocking your API. It is common for Ember.js developers to struggle when writing tests. However, there are some tips which could save your time and energy.
Waiting for promises in tests in elegant way # You can make function passed to test() method async - then you can use await keyword.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>protractor Tutorial on </title>
    <link>https://www.wikiod.com/docs/protractor/</link>
    <description>Recent content in protractor Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/protractor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with protractor</title>
      <link>https://www.wikiod.com/protractor/getting-started-with-protractor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/getting-started-with-protractor/</guid>
      <description>Installing and Setting up Protractor (On Windows) # Requirements: Protractor requires the following dependencies to be installed prior to installation:
Java JDK 1.7 or higher Node.js v4 or higher Installation:
Download and install Node.js from this URL: https://nodejs.org/en/
To see if the Node.js installation is successfull, you can go and check the Environment variables. The &amp;lsquo;Path&amp;rsquo; under System Variables will be automatically updated.
You can also check the same by typing the command npm -version in command prompt which will give you the installed version.</description>
    </item>
    
    <item>
      <title>CSS Selectors</title>
      <link>https://www.wikiod.com/protractor/css-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/css-selectors/</guid>
      <description>Syntax # by.css(&amp;lsquo;css-selector&amp;rsquo;) by.id(&amp;lsquo;id&amp;rsquo;) by.model(&amp;lsquo;model&amp;rsquo;) by.binding(&amp;lsquo;binding&amp;rsquo;) Parameters # Parameter Details css-selector A css selector like &#39;.class-name&#39; to select the element on the base of class name id Id of the dom element model Model used for dom element binding Name of the binding which is used to bound to certain element How to write css selectors?
The most important attributes to write css selectors are class and id of dom. For an instance if a html dom lookes like below example:</description>
    </item>
    
    <item>
      <title>XPath selectors in Protractor</title>
      <link>https://www.wikiod.com/protractor/xpath-selectors-in-protractor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/xpath-selectors-in-protractor/</guid>
      <description>Selecting a DOM element using protractor # Apart from CSS, model, and binding selectors, protractor can also locate elements using xpath View
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#39;http://www.google.com&#39;&amp;gt;Go to google&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; Code
var googleLink= element(by.xpath(&#39;//ul/li/a&#39;)); expect(element.getText()).to.eventually.equal(&#39;Go to google&#39;,&#39;The text you mention was not found&#39;); Selecting elements with specific attributes # XPath selectors can be used to select elements with specific attributes, such as class, id, title etc.
By Class # View:
&amp;lt;div class=&amp;quot;HakunaMatata&amp;quot;&amp;gt; Hakuna Matata &amp;lt;/div&amp;gt; Code:</description>
    </item>
    
    <item>
      <title>Explicit waits with browser.wait()</title>
      <link>https://www.wikiod.com/protractor/explicit-waits-with-browserwait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/explicit-waits-with-browserwait/</guid>
      <description>browser.sleep() vs browser.wait() # When it comes to dealing with timing issue, it is tempting and easy to put a &amp;ldquo;quick&amp;rdquo; browser.sleep(&amp;lt;timeout_in_milliseconds&amp;gt;) and move on.
The problem is, it would some day fail. There is no golden/generic rule on what sleep timeout to set and, hence, at some point due to network or performance or other issues, it might take more time for a page to load or element to become visible etc.</description>
    </item>
    
    <item>
      <title>Protractor Debugger</title>
      <link>https://www.wikiod.com/protractor/protractor-debugger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/protractor-debugger/</guid>
      <description>Syntax # browser.pause() browser.debugger() This section explains how we can debug protractor tests.
Using browser.pause() # The pause() method is one of the easiest solution Protractor provides you to debug the code, in order to use it you have to add it in your code where you want to pause the execution.Once the execution is in paused state:
You can use C (type C) to move forward. Be careful while using it, you have to write this command without any delay as you might get timeout error from your assertion library if you delayed to press c.</description>
    </item>
    
    <item>
      <title>Protractor configuration file</title>
      <link>https://www.wikiod.com/protractor/protractor-configuration-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/protractor-configuration-file/</guid>
      <description>The configuration file contains information which Protractor uses to run your test script. Here I&amp;rsquo;ll try to give a few different variations.
Simple Config file - Chrome # var config = {}; var timeout = 120000; config.framework = &#39;jasmine2&#39;; config.allScriptsTimeout = timeout; config.getPageTimeout = timeout; config.jasmineNodeOpts.isVerbose = true; config.jasmineNodeOpts.defaultTimeoutInterval = timeout; config.specs = [&#39;qa/**/*Spec.js&#39;]; config.browserName = &#39;chrome&#39;; exports.config = config; Config file with capabilities - Chrome # var config = {}; var timeout = 120000; config.</description>
    </item>
    
    <item>
      <title>Testing non-angular apps with Protractor</title>
      <link>https://www.wikiod.com/protractor/testing-non-angular-apps-with-protractor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/testing-non-angular-apps-with-protractor/</guid>
      <description>Protractor is made for testing Angular applications. However, it is still possible to test non-angular applications with Protractor if needed.
Changes needed to test non-angular app with Protractor # Use browser.driver instead of driver
Use browser.driver.ignoreSynchronization = true
Reason: Protractor waits for angular components to load completely on a web-page befor it begins any execution. However, since our pages are non-angular, Protractor keeps waiting for &amp;lsquo;angular&amp;rsquo; to load till the test fails with timeout.</description>
    </item>
    
    <item>
      <title>Control Flow and Promises</title>
      <link>https://www.wikiod.com/protractor/control-flow-and-promises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/control-flow-and-promises/</guid>
      <description>Protractor/WebDriverJS has this mechanism called Control Flow - it is an internal queue of promises, it keeps the code execution organized.
Understanding the Control Flow # Consider the following test:
it(&#39;should test something&#39;, function() { browser.get(&#39;/dashboard/&#39;); $(&amp;quot;#myid&amp;quot;).click(); expect(element(by.model(&#39;username&#39;)).getText()).toEqual(&#39;Test&#39;); console.log(&amp;quot;HERE&amp;quot;); }); In the following test, when the console.log() is executed and you see HERE on the console, none of the Protractor commands from previous lines have been executed. This is an entirely asynchronous behavior.</description>
    </item>
    
    <item>
      <title>Page Objects</title>
      <link>https://www.wikiod.com/protractor/page-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/page-objects/</guid>
      <description>Page objects is a design pattern which results in less code duplicates, easy maintenance and more readability.
First Page Object # /* save the file in &#39;pages/loginPage&#39; var LoginPage = function(){ }; /*Application object properties*/ LoginPage.prototype = Object.create({}, { userName: { get: function() { return browser.driver.findElement(By.id(&#39;userid&#39;)); } }, userPass: { get: function() { return browser.driver.findElement(By.id(&#39;password&#39;)); } }, submitBtn: { get: function() { return browser.driver.findElement(By.id(&#39;btnSubmit&#39;)); } } }); /* Adding functions */ LoginPage.</description>
    </item>
    
    <item>
      <title>Locating Elements</title>
      <link>https://www.wikiod.com/protractor/locating-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/protractor/locating-elements/</guid>
      <description>To be able to interact with a page, you need to tell Protractor exactly which element to look for. The basis used for selecting elements are locators. Protractor, as well as including the generic Selenium selectors, also has Angular-specific locators which are more robust and persistent to changes. However, sometimes, even in an Angular application, regular locators must be used.
Parameters # Parameter Detail selector A string which specifies the value of the selector (depends on the locator) Protractor specific locators (for Angular-based applications) # These locators should be used as a priority when possible, because they are more persistent to changes in an application then locators based on css or xpath, which can easily break.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automation Tutorial on </title>
    <link>https://www.wikiod.com/docs/automation/</link>
    <description>Recent content in automation Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with automation</title>
      <link>https://www.wikiod.com/automation/getting-started-with-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/automation/getting-started-with-automation/</guid>
      <description>Identification of Test Automation Objective-Types-Approaches # Test Automation is broad topic. DEV/QA should delve on this questions first:
What is nature of product? (Web, Mobile, Cloud, IOT, Analytics) What is development stage? (Developed-Legacy, In Development) What is technology stack? (Java, C#, Python, Ruby, Node, React) Is it SOA/Micro-services based? What would be best approach to automation that can give faster feedback or ? (Unit Tests, Integration Tests, End-To-End Tests) Test Automation Framework - Design Components # Test automation framework can have several components depending on automation planned.</description>
    </item>
    
    <item>
      <title>UI Automation</title>
      <link>https://www.wikiod.com/automation/ui-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/automation/ui-automation/</guid>
      <description>The focus of this section would be list out tools, design approaches and common challenges for any UI Automation effort.
Web UI Automation # Design Approaches # Driving Factor: What should be our driving engine? Should it be test functions, keywords, data or behavior? Here we list different approaches with examples. Data Driven/Keyword Driven/Hybrid: Code Driven: BDD/TDD/ATDD: Cucumber-Java with Page Factory Approach # Steps for Getting Started: # Download Eclipse Create a Java Maven Project with following example package organization src/test/java com.</description>
    </item>
    
  </channel>
</rss>

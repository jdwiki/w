<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postscript Tutorial on </title>
    <link>https://www.wikiod.com/docs/postscript/</link>
    <description>Recent content in postscript Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/postscript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with postscript</title>
      <link>https://www.wikiod.com/postscript/getting-started-with-postscript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postscript/getting-started-with-postscript/</guid>
      <description>General Description of PostScript # PostScript is a Turing-complete general programming language, designed and developed by Adobe Systems. Many of the ideas which blossomed in PostScript had been cultivated in projects for Xerox and Evans &amp;amp; Sutherland.
Its main real-world application historically is as a page description language, or in its single-page EPS form a vector-graphics image-description language. It is dynamically-typed, dynamically-scoped, and stack-based which leads to a mostly Reverse Polish syntax.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://www.wikiod.com/postscript/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postscript/error-handling/</guid>
      <description>Syntax # { -code- } stopped { -error- }{ -no-error- } ifelse % error catching frame
$error /errorname get % stackunderflow typecheck rangecheck etc
$error /newerror get % bool. put false to deactivate error
$error /ostack get % copy of operand stack at point of error
errordict /stackoverflow { -additional-code- /stackoverflow signalerror} put
% execute additional code on types of errors (here, the /stackoverflow error).
There are two levels to error handling in postscript.</description>
    </item>
    
    <item>
      <title>Path Construction</title>
      <link>https://www.wikiod.com/postscript/path-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postscript/path-construction/</guid>
      <description>Drawing (describing) a polygon # This example attempts to mimic the behavior of the built-in path construction operators like arc.
If there is a current point, poly first draws a line to (x,y)+(r,0), otherwise it starts by moving to that point.
Instead of gsave &amp;hellip; grestore (which has the undesirable effect of discarding the very changes to the current path which we want), it saves a copy of the current transformation matrix (CTM) as it exists when the function starts.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sails.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/sails-js/</link>
    <description>Recent content in sails.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sails-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sails.js</title>
      <link>https://www.wikiod.com/sails-js/getting-started-with-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/getting-started-with-sailsjs/</guid>
      <description>Creating a new project # Once you have Sails installed, just type
$ sails new &amp;lt;project_name&amp;gt; This will create a skeleton Sails project in a new folder called &amp;lt;project_name&amp;gt;.
You can also create a new project in an empty folder by typing
$ sails new Launch app # Once your project has been created, you can launch the app by typing
$ sails lift By default, you can access the app in the browser on port 1337.</description>
    </item>
    
    <item>
      <title>JSON web token authentication with Sails</title>
      <link>https://www.wikiod.com/sails-js/json-web-token-authentication-with-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/json-web-token-authentication-with-sails/</guid>
      <description>Configuration # Step one # We need to create a service called jwToken. Go to api/services directory and create jwToken.js.
&#39;use strict&#39;; const jwt = require(&#39;jsonwebtoken&#39;), tokenSecret = &amp;quot;secretissecret&amp;quot;; module.exports = { // Generates a token from supplied payload issue(payload) { return jwt.sign( payload, tokenSecret, // Token Secret that we sign it with { expiresIn: &amp;quot;30 days&amp;quot; // Token Expire time }); }, // Verifies token on a request verify(token, callback) { return jwt.</description>
    </item>
    
    <item>
      <title>Blueprint API</title>
      <link>https://www.wikiod.com/sails-js/blueprint-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/blueprint-api/</guid>
      <description>How does Blueprint API works? # When sails initially starts using sails lift, sails looks to see if you have any controller defined. In our example, we have one controller, the User controller. Sails then provides access to blueprint actions for this user controller as if we built them in the controller ourselves. Sails also automatically creates blueprint routes at the time of lifting the server. So even if no routes is defined in /config/routes.</description>
    </item>
    
    <item>
      <title>Configuring mysql with sails.js</title>
      <link>https://www.wikiod.com/sails-js/configuring-mysql-with-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/configuring-mysql-with-sailsjs/</guid>
      <description>How to configure mysql database connection in sails.js # To do this first locate config folder in your root. Then open connections.js
Locate
// someMysqlServer: { // adapter: &#39;sails-mysql&#39;, // host: &#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;, // user: &#39;YOUR_MYSQL_USER&#39;, //optional // password: &#39;YOUR_MYSQL_PASSWORD&#39;, //optional // database: &#39;YOUR_MYSQL_DB&#39; //optional // }, Uncomment these lines.
Give suitable name for the connector like this someMysqlServer to mysql_connection or any name as your wish
mysql_connection: { adapter: &#39;sails-mysql&#39;, host: &#39;127.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/sails-js/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/routing/</guid>
      <description>Routes are rules that tell Sails what to do when faced with an incoming request.
Routes are defined in config/routes.js. The order of the routes is significant, as routes are matched top down. This means if you have a specific route that also could be matched by a wildcard route, the specific route should be defined above the wildcard route.
When a request enters your application sails.js grabs all the parameters that came with it and makes them available for you as params on the request object.</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>https://www.wikiod.com/sails-js/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/controllers/</guid>
      <description>Controllers (the C in MVC) are the principal objects in your Sails application that are responsible for responding to requests from a web browser, mobile application or any other system capable of communicating with a server. They often act as a middleman between your models and views. For many applications, the controllers will contain the bulk of your projectâ€™s business logic.
ES2015 Syntax # &#39;use strict&#39;; // This is an example of a /api/controllers/HomeController.</description>
    </item>
    
    <item>
      <title>Models</title>
      <link>https://www.wikiod.com/sails-js/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/models/</guid>
      <description>Sails comes installed with a powerful ORM/ODM called Waterline, a datastore-agnostic tool that dramatically simplifies interaction with one or more databases. It provides an abstraction layer on top of the underlying database, allowing you to easily query and manipulate your data without writing vendor-specific integration code.
Basic Model # This example shows how to define a simple model in Sails.js
You can generate an empty model file by typing
sails generate model car You&amp;rsquo;ll find the new file Car.</description>
    </item>
    
    <item>
      <title>MongoDB Adapter for Sails</title>
      <link>https://www.wikiod.com/sails-js/mongodb-adapter-for-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/mongodb-adapter-for-sails/</guid>
      <description>Configuration # You can configure the database settings in config/connections.js.
Example:
someMongoDb: { adapter: &#39;sails-mongo&#39;, host: &#39;localhost&#39;, // defaults to `localhost` if omitted port: 27017, // defaults to 27017 if omitted user: &#39;username_here&#39;, // or omit if not relevant password: &#39;password_here&#39;, // or omit if not relevant database: &#39;database_name_here&#39; // or omit if not relevant } Alternatively, you can specify your Mongo configuration as a URL
someMongoDb: { adapter: &#39;sails-mongo&#39;, url: mongodb://username:password@hostname:port/database } Installation # Install from NPM.</description>
    </item>
    
    <item>
      <title>PostgreSQL Database Adapter for Sails</title>
      <link>https://www.wikiod.com/sails-js/postgresql-database-adapter-for-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sails-js/postgresql-database-adapter-for-sails/</guid>
      <description>Install # You can install the postgreSQL adapter via NPM.
npm install sails-postgresql Configuration # You can configure the database settings in config/connections.js.
Here&amp;rsquo;s an example:
postgresql: { database: &#39;databaseName&#39;, host: &#39;localhost&#39;, user: &#39;root&#39;, password: &#39;&#39;, port: 5432, poolSize: 10, ssl: false }; Alternatively, you can supply the connection information in URL format:
postgresql: { url: &#39;postgres://username:password@hostname:port/database&#39;, ssl: false }; </description>
    </item>
    
  </channel>
</rss>

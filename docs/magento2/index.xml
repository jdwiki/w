<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>magento2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/magento2/</link>
    <description>Recent content in magento2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/magento2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with magento2</title>
      <link>https://www.wikiod.com/magento2/getting-started-with-magento2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/getting-started-with-magento2/</guid>
      <description>Install Magento 2 on Ubuntu 16.04 # NOTES: We are going to install Magento 2 on fresh Ubuntu Server 16.04 LTS with PHP 7.0, MySQL 5.6 and Apache 2.4.
1. Setup Requirements # Apache 2.2 or 2.4 with mod_rewrite module (or) Nginx &amp;gt;= 1.8. PHP 5.5 or later version. PHP 7.0 also supported. Required PHP-Modules – PDO/MySQL, mbstring, mcrypt, mhash, SimpleXML, curl, xsl, gd, ImageMagick 6.3.7 (or later) or both, soap, intl, openssl.</description>
    </item>
    
    <item>
      <title>Upgrading Magento</title>
      <link>https://www.wikiod.com/magento2/upgrading-magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/upgrading-magento/</guid>
      <description>Upgrade Magento via Composer # Check your current magento version
php bin/magento --version Now Add the latest version to your composer.
composer require magento/product-community-edition 2.1.6 --no-update Run Composer Update This will ask for the username and password take from your credentials from your marketplace account.
composer update This will start process to start downloading and upgrading your magento
Finally Update you static content and remove var folder
rm -rf var/di var/generation php bin/magento cache:flush php bin/magento setup:upgrade php bin/magento setup:di:compile php bin/magento indexer:reindex Recheck your magento version.</description>
    </item>
    
    <item>
      <title>Magento 2 Commands for daily use</title>
      <link>https://www.wikiod.com/magento2/magento-2-commands-for-daily-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/magento-2-commands-for-daily-use/</guid>
      <description>All the commands can be executed writting only part of them.
For example:
php bin/magento cache:flush can be traslated to: php bin/magento c:f php bin/magento ca:f php bin/magento c:fl php bin/magento cache:f php bin/magento c:flush etc. You can write any part, and if it is not ambiguos, it will automatically know which one you want.
General List of Commands for Magento 2 # php bin/magento setup:upgrade =&amp;gt; Setup Upgrade php bin/magento setup:di:compile =&amp;gt; Setup: Compile php bin/magento indexer:reindex =&amp;gt; Reindex php bin/magento cache:flush =&amp;gt; Clear Cache php bin/magento deploy:mode:set developer =&amp;gt; Enable Developer Mode Magento (developer/production) php bin/magento deploy:mode:show =&amp;gt; Show Current Mode Magento php bin/magento module:status =&amp;gt; Module: Status php bin/magento module:disable MODULE_NAME =&amp;gt; Module: Disable php bin/magento module:enable MODULE_NAME =&amp;gt; Module: Enable php bin/magento module:uninstall MODULE_NAME =&amp;gt; Module: Uninstall php bin/magento cron:run =&amp;gt; Cronjob: Run Flush Cache # Flush all Magento Cache</description>
    </item>
    
    <item>
      <title>Module structure</title>
      <link>https://www.wikiod.com/magento2/module-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/module-structure/</guid>
      <description>Catalog Module structure # For now I think the catalog module contains almost everything you can add to a module.
Api - Contains the service contracts. A set of interfaces that should not be changed unless the minor version changes. Not mandatory for a custom module but nice to have for comercial extensions. Data - Data interfaces. Each interface must have a model that implements it (example: interface for product model) ProductRepositoryInterface.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.wikiod.com/magento2/dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/dependency-injection/</guid>
      <description>Class Preference # &amp;lt;!-- &amp;lt;moduleDir&amp;gt;/etc/&amp;lt;area&amp;gt;/di.xml --&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;preference for=&amp;quot;Vendor\Namespace\Model\Example&amp;quot; type=&amp;quot;Vendor\Namespace\Model\AnotherExample&amp;quot; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/config&amp;gt; Above Example is a syntax of override core model.
Here is a list of points which will describe you how to make it possible
moduleDir - Extension directory Like app/code/custom/extension here extension is your directory in which all the necessary folders of extension will be placed.
area - area will be frontend or adminhtml</description>
    </item>
    
    <item>
      <title>Event and observer in magento 2</title>
      <link>https://www.wikiod.com/magento2/event-and-observer-in-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/event-and-observer-in-magento-2/</guid>
      <description>How to use custom event and observer ? # Step 1: Create events.xml file according to your requirement in frontend, Backend, or both YKM/Banner/etc/frontend/events.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;../../../../../../lib/internal/Magento/Framework/Event/etc/events.xsd&amp;quot;&amp;gt; &amp;lt;event name=&amp;quot;controller_action_predispatch&amp;quot;&amp;gt; &amp;lt;observer name=&amp;quot;ykm_banner_before&amp;quot; instance=&amp;quot;YKM\Banner\Observer\Help&amp;quot; /&amp;gt; &amp;lt;/event&amp;gt; &amp;lt;/config&amp;gt; Step 2:
Create an Observer file YKM/Banner/Observer/Help.php
&amp;lt;?php /** * Copyright © 2015 Magento. All rights reserved. * See COPYING.txt for license details. */ namespace Estdevs\Banner\Observer; use Magento\Framework\Event\ObserverInterface; class Help implements ObserverInterface { public function execute(\Magento\Framework\Event\Observer $observer) { echo &amp;quot;this is good.</description>
    </item>
    
    <item>
      <title>Get products from database</title>
      <link>https://www.wikiod.com/magento2/get-products-from-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/get-products-from-database/</guid>
      <description>Get products using the Product Repository # To get products from the database, you need to use Magento 2&amp;rsquo;s repository design pattern. Each module can be bundled with it&amp;rsquo;s own repositories, and the Product Catalog module is not any different.
You can use [dependency injection][1] in your class to access the repository. A working example would look like this:
class Example { /** * @var \Magento\Catalog\Model\ProductRepository */ protected $productRepository; /** * @param \Magento\Catalog\Model\ProductRepository $productRepository */ public function __construct( \Magento\Catalog\Model\ProductRepository $productRepository ) { $this-&amp;gt;productRepository = $productRepository; } /** * Get product by ID * @return \Magento\Catalog\Api\Data\ProductInterface * @throws \Magento\Framework\Exception\NoSuchEntityException */ public function getProductById(int $productId) { return $this-&amp;gt;productRepository-&amp;gt;getById($productId); } } A Repository has more functionality, like saving or deleting a product, as well as getting a list of products and using a filter, but that&amp;rsquo;s beyond the scope of this example.</description>
    </item>
    
    <item>
      <title>Custom Theme</title>
      <link>https://www.wikiod.com/magento2/custom-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/custom-theme/</guid>
      <description>luma theme as parent
{ &amp;quot;name&amp;quot;: &amp;quot;magento/luma&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;N/A&amp;quot;, &amp;quot;require&amp;quot;: { &amp;quot;php&amp;quot;: &amp;quot;~5.5.0|~5.6.0|~7.0.0&amp;quot;, &amp;quot;magento/theme-luma&amp;quot;: &amp;quot;100.0.*&amp;quot;, &amp;quot;magento/framework&amp;quot;: &amp;quot;100.0.*&amp;quot; }, &amp;quot;type&amp;quot;: &amp;quot;magento2-theme&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;100.0.1&amp;quot;, &amp;quot;license&amp;quot;: [ &amp;quot;OSL-3.0&amp;quot;, &amp;quot;AFL-3.0&amp;quot; ], &amp;quot;autoload&amp;quot;: { &amp;quot;files&amp;quot;: [ &amp;quot;registration.php&amp;quot; ] } } at the end
Run php bin/magento setup:upgrade this command after than below commands also needed sometimes
php bin/magento setup:static-content:deploy &amp;lt;language_pack_1&amp;gt; &amp;lt;language_pack_2&amp;gt; ... &amp;lt;language_pack_n&amp;gt;
&amp;lt;language_pack&amp;gt;: en_US nl_NL en_GB etc php bin/magento cache:flush or php bin/magento cache:clean</description>
    </item>
    
    <item>
      <title>Using Dependency Injection To Rewrite Object</title>
      <link>https://www.wikiod.com/magento2/using-dependency-injection-to-rewrite-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/using-dependency-injection-to-rewrite-object/</guid>
      <description>https://gielberkers.com/magento-2-why-use-rewrites-when-you-can-use-plugins/
http://devdocs.magento.com/guides/v2.0/extension-dev-guide/plugins.html
Some ways for modify a function in magento 2 # Rewrite Class # File: Namespace/ModuleName/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;preference for=&amp;quot;Magento\Catalog\Controller\Product\View&amp;quot; type=&amp;quot;Namespace\ModuleName\Controller\Product\View&amp;quot; /&amp;gt; &amp;lt;/config&amp;gt; File: Namespace\ModuleName\Controller\Product\View.php
class View extends \Magento\Catalog\Block\Product\View { ///Code logic here } Plugin into object. # File: Namespace/ModuleName/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;type name=&amp;quot;Magento\Catalog\Model\Product&amp;quot;&amp;gt; &amp;lt;plugin name=&amp;quot;name_of_plugin&amp;quot; type=&amp;quot;Namespace\ModuleName\Plugin\Catalog\Model\Product&amp;quot; sortOrder=&amp;quot;1&amp;quot; disabled=&amp;quot;false&amp;quot; /&amp;gt; &amp;lt;/type&amp;gt; &amp;lt;/config&amp;gt; File: Namespace\ModuleName\Plugin\Catalog\Model\Product.php
namespace Namespace\ModuleName\Plugin\Catalog\Model; class Product { public function beforeSetName( \Magento\Catalog\Model\Product $product, string $name) { /// Code logic here return $name; } public function afterGetName( \Magento\Catalog\Model\Product $product, string $name) { /// Code logic here return $name; } public function aroundSave( \Magento\Catalog\Model\Product $product, \Closure $proceed) { $this-&amp;gt;doSomethingBeforeSave(); $result = $proceed(); if ($result) { $this-&amp;gt;doSomethingAfterSave(); } return $result; } } </description>
    </item>
    
    <item>
      <title>Optimizing Magento 2</title>
      <link>https://www.wikiod.com/magento2/optimizing-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/magento2/optimizing-magento-2/</guid>
      <description>Configurations to optimize # 1. Enable Flat Categories and Products # One of the top reasons of Magento speed issues with database read speed. To fasten the read speed of the database you should enable Flat Catalog. This will minify the number of database joins done when showing products and due to that the MySQL query complexity will be reduced.
Go to backend: STORES &amp;gt; Configuration &amp;gt; CATALOG &amp;gt; Catalog &amp;gt; Use Flat Catalog Category and put Yes.</description>
    </item>
    
  </channel>
</rss>

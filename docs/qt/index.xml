<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt Tutorial on </title>
    <link>https://www.wikiod.com/docs/qt/</link>
    <description>Recent content in Qt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Qt</title>
      <link>https://www.wikiod.com/qt/getting-started-with-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/getting-started-with-qt/</guid>
      <description>Installation and Setup on Windows and Linux # Download Qt for Linux Open Source Version
Go to https://www.qt.io/download-open-source/ and click on Download Now, make sure that you are downloading the Qt installer for Linux.
A file with the name qt-unified-linux-x-online.run will be downloaded, then add exec permission
chmod +x qt-unified-linux-x-online.run Remember to change &amp;lsquo;x&amp;rsquo; for the actual version of the installer. Then run the installer
./qt-unified-linux-x-online.run Download Qt for Windows Open Source Version</description>
    </item>
    
    <item>
      <title>Signals and Slots</title>
      <link>https://www.wikiod.com/qt/signals-and-slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/signals-and-slots/</guid>
      <description>Signals and slots are used for communication between objects. The signals and slots mechanism is a central feature of Qt.
In GUI programming, when we change one widget, we often want another widget to be notified. More generally, we want objects of any kind to be able to communicate with one another.
Signals are emitted by objects when they change their state in a way that may be interesting to other objects.</description>
    </item>
    
    <item>
      <title>CMakeLists.txt for your Qt project</title>
      <link>https://www.wikiod.com/qt/cmakeliststxt-for-your-qt-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/cmakeliststxt-for-your-qt-project/</guid>
      <description>CMakeLists.txt for Qt 5 # A minimal CMake project file that uses Qt5 can be:
cmake_minimum_required(VERSION 2.8.11) project(myproject) find_package(Qt5 5.7.0 REQUIRED COMPONENTS Core ) set(CMAKE_AUTOMOC ON) add_executable(${PROJECT_NAME} main.cpp ) target_link_libraries(${PROJECT_NAME} Qt5::Core ) cmake_minimum_required is called to set minimum required version for CMake. The minimum required version for this example to work is 2.8.11 &amp;ndash; previous versions of CMake need additional code for a target to use Qt.
find_package is called to search an installation of Qt5 with a given version &amp;ndash; 5.</description>
    </item>
    
    <item>
      <title>qmake</title>
      <link>https://www.wikiod.com/qt/qmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/qmake/</guid>
      <description>Default &amp;ldquo;pro&amp;rdquo; file. # qmake is a build automation tool, which is shipped with Qt framework. It does similar job to tools such as CMake or GNU Autotools, but it is designed to be used specifically with Qt. As such it is well integrated with Qt ecosystem, notably Qt Creator IDE.
If you start Qt Creator and select File -&amp;gt; New File or Project -&amp;gt; Application -&amp;gt; Qt Widgets application, Qt Creator will generate a project skeleton for you along with a &amp;ldquo;pro&amp;rdquo; file.</description>
    </item>
    
    <item>
      <title>Threading and Concurrency</title>
      <link>https://www.wikiod.com/qt/threading-and-concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/threading-and-concurrency/</guid>
      <description>A few notes that are already mentioned in the official docs here and here:
If an object has a parent, it has to be in the same thread as the parent, i.e. it cannot be moved to a new thread, nor can you set a parent to an object if the parent and the object live in different threads When an object is moved to a new thread, all of its children are also moved to the new thread You can only push objects to a new thread.</description>
    </item>
    
    <item>
      <title>QObject</title>
      <link>https://www.wikiod.com/qt/qobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/qobject/</guid>
      <description>QObject class is the base class for all Qt objects.
qobject_cast # T qobject_cast(QObject *object) A functionality which is added by deriving from QObject and using the Q_OBJECT macro is the ability to use the qobject_cast.
Example:
class myObject : public QObject { Q_OBJECT //... }; QObject* obj = new myObject(); To check whether obj is a myObject-type and to cast it to such in C++ you can generally use a dynamic_cast.</description>
    </item>
    
    <item>
      <title>Qt - Dealing with Databases</title>
      <link>https://www.wikiod.com/qt/qt---dealing-with-databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/qt---dealing-with-databases/</guid>
      <description>You will need the Qt SQL plugin corresponding to the type given to QSqlDatabase::addDatabase If you don&amp;rsquo;t have the required SQL plugin, Qt will warn you that it can&amp;rsquo;t find the requested driver If you don&amp;rsquo;t have the required SQL plugin you will have to compile them from the Qt source Using a Database on Qt # In the Project.pro file we add :
CONFIG += sql in MainWindow.h we write :</description>
    </item>
    
    <item>
      <title>Deploying Qt applications</title>
      <link>https://www.wikiod.com/qt/deploying-qt-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/deploying-qt-applications/</guid>
      <description>Deploying on windows # Qt provides a deployment tool for Windows: windeployqt. The tool inspects a Qt application executable for its dependecies to Qt modules and creates a deployment directory with the necessary Qt files to run the inspected executable. A possible script may look like:
set PATH=%PATH%;&amp;lt;qt_install_prefix&amp;gt;/bin windeployqt --dir /path/to/deployment/dir /path/to/qt/application.exe The set command is called to add Qt&amp;rsquo;s bin directory to the PATH environment variable. windeployqt is then called:</description>
    </item>
    
    <item>
      <title>Communication between QML and C&#43;&#43;</title>
      <link>https://www.wikiod.com/qt/communication-between-qml-and-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/communication-between-qml-and-c-/</guid>
      <description>We may use QML to build hybrid applications, since it&amp;rsquo;s much more easier than C++. So we should know how they communicate with each other.
Call C++ in QML # Register C++ classes in QML
At C++ side, imagine we have a class named QmlCppBridge, it implements a method called printHello().
class QmlCppBridge : public QObject { Q_OBJECT public: Q_INVOKABLE static void printHello() { qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, QML!&amp;quot;; } }; We want to use it in QML side.</description>
    </item>
    
    <item>
      <title>ModelView</title>
      <link>https://www.wikiod.com/qt/modelview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/qt/modelview/</guid>
      <description>A Simple Read-only Table to View Data from a Model # This is a simple example to display read-only data that is tabular in nature using Qt&amp;rsquo;s Model/View Framework. Specifically, the Qt Objects QAbstractTableModel (sub-classed in this example) and QTableView are used.
Implementations of the methods rowCount(), columnCount(), data() and headerData() are required to give the QTableView object a means to obtain information about the data contained in the QAbstractTableModel object.</description>
    </item>
    
  </channel>
</rss>

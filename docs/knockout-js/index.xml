<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>knockout.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/knockout-js/</link>
    <description>Recent content in knockout.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/knockout-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with knockout.js</title>
      <link>https://www.wikiod.com/knockout-js/getting-started-with-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/getting-started-with-knockoutjs/</guid>
      <description>Getting Started: Hello world! # Creating an HTML document and enabling knockout.js # Create an HTML file and include knockout.js via a &amp;lt;script&amp;gt; tag.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello world! (knockout.js)&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-debug.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Add a second &amp;lt;script&amp;gt; tag under the knockout script. In this script tag, we&amp;rsquo;ll initialize a view model and apply data binds to our Document.
&amp;lt;script&amp;gt; var ViewModel = function() { this.greeting = ko.</description>
    </item>
    
    <item>
      <title>Bindings</title>
      <link>https://www.wikiod.com/knockout-js/bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/bindings/</guid>
      <description>Syntax # &amp;lt;!-- ko if:myObservable --&amp;gt;&amp;lt;!-- /ko --&amp;gt; &amp;lt;i data-bind=&amp;quot;if:myObservable&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; What a binding is # Essentially a binding or a data binding is a way to link your ViewModels to your Views(templates) and vice versa. KnockoutJS uses two-way data binding, which means changes to your ViewModel influence the View and changes to your View can influence the ViewModel.
Under the hood (short overview) # Bindings are just plugins (scripts) that allow you to solve a particular task.</description>
    </item>
    
    <item>
      <title>Href binding</title>
      <link>https://www.wikiod.com/knockout-js/href-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/href-binding/</guid>
      <description>There is no href binding in the core KnockoutJS library, which is the reason all examples showcase other features of the library to get the same effect.
See also this Stack Overflow question on the same topic.
Using attr binding # &amp;lt;a data-bind=&amp;quot;attr: { href: myUrl }&amp;quot;&amp;gt;link with dynamic href&amp;lt;/a&amp;gt; ko.applyBindings({ myUrl: ko.observable(&amp;quot;http://www.stackoverflow.com&amp;quot;) }); Since there is no native href binding in KnockoutJS, you need to use a different feature to get dynamic links.</description>
    </item>
    
    <item>
      <title>Equivalents of AngularJS bindings</title>
      <link>https://www.wikiod.com/knockout-js/equivalents-of-angularjs-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/equivalents-of-angularjs-bindings/</guid>
      <description>Not everything in AngularJS has a KnockoutJS equivalent (for example ngCloack, or ngSrc). There are two main solutions typically available:
Use the generic attr or event binding instead. Similar to custom directives in AngularJS, you can write your own custom binding handler if you need something that isn&amp;rsquo;t included in the base library. If you prefer the AngularJS binding syntax you can consider using Knockout.Punches which enables handlebar-style binding.
ngShow # AngularJS code for dynamically showing/hiding an element:</description>
    </item>
    
    <item>
      <title>Debugging a knockout.js application</title>
      <link>https://www.wikiod.com/knockout-js/debugging-a-knockoutjs-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/debugging-a-knockoutjs-application/</guid>
      <description>Checking the binding context of a DOM element # Many bugs in knockout data binds are caused by undefined properties in a viewmodel. Knockout has two handy methods to retrieve the binding context of an HTML element:
// Returns the binding context to which an HTMLElement is bound ko.contextFor(element); // Returns the viewmodel to which an HTMLElement is bound // similar to: ko.contextFor(element).$data ko.dataFor(element); To quickly find out the binding context of a UI element, here&amp;rsquo;s a handy trick:</description>
    </item>
    
    <item>
      <title>AJAX requests and binding</title>
      <link>https://www.wikiod.com/knockout-js/ajax-requests-and-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/ajax-requests-and-binding/</guid>
      <description>Sample AJAX request w/ binding # Page.html
&amp;lt;div data-bind=&amp;quot;foreach: blogs&amp;quot;&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;text: entryPostedDate&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;a data-bind=&amp;quot;attr: { href: blogEntryLink }, text: title&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;html: body&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!--- include knockout and dependencies (Jquery) ---&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;blog.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; blog.js
function vm() { var self = this; // Properties self.blogs = ko.observableArray([]); // consists of entryPostedDate, blogEntryLink, title, body var blogApi = &amp;quot;/api/blog&amp;quot;; // Load data $.</description>
    </item>
    
    <item>
      <title>Custom Bindings</title>
      <link>https://www.wikiod.com/knockout-js/custom-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/custom-bindings/</guid>
      <description>Binding Registration # Cusom bindings should be registered by extending the current knockout bindingHandlers object.
This is done by adding a new property to the object.
ko.bindingHandlers.newBinding = { init: function(element, valueAccessor, allBindings, viewModel, bindingContext) { }, update: function(element, valueAccessor, allBindings, viewModel, bindingContext) { } }; Custom fade in/fade out visibility binding # This example implements a custom binding that toggles visibility (similar to the existing visible binding), but will utilize jQuery&amp;rsquo;s fading API to animate the transition from visible to invisible.</description>
    </item>
    
    <item>
      <title>Components introduction</title>
      <link>https://www.wikiod.com/knockout-js/components-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/components-introduction/</guid>
      <description>Components allow reusable controls/widgets represented by their own view (template) and viewmodel. They were added in Knockout 3.2. Inspired by WebComponents, Knockout allows Components to be defined as Custom Elements, allowing the use of more self-explanatory markup.
Progress bar (Boostrap) # Component definition
ko.components.register(&#39;progress-bar&#39;, { viewModel: function(params) { var that = this; // progress is a numeric value between 0 and 100 that.progress = params.progress; that.progressPercentual = ko.computed(function(){ return &#39;&#39; + ko.</description>
    </item>
    
    <item>
      <title>Observables</title>
      <link>https://www.wikiod.com/knockout-js/observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/observables/</guid>
      <description>Explicit Subscription to Observables # var person = { name: ko.observable(&#39;John&#39;) }; console.log(person.name()); console.log(&#39;Update name&#39;); person.name.subscribe(function(newValue) { console.log(&amp;quot;Updated value is &amp;quot; + newValue); }); person.name(&#39;Jane&#39;); Creating an observable # JS
// data model var person = { name: ko.observable(&#39;Jack&#39;), age: ko.observable(29) }; ko.applyBindings(person); HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Name: &amp;lt;input data-bind=&#39;value: name&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Age: &amp;lt;input data-bind=&#39;value: age&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Hello, &amp;lt;span data-bind=&#39;text: name&#39;&amp;gt; &amp;lt;/span&amp;gt;!&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Working with knockout foreach binding with JSON</title>
      <link>https://www.wikiod.com/knockout-js/working-with-knockout-foreach-binding-with-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/knockout-js/working-with-knockout-foreach-binding-with-json/</guid>
      <description>Working with nested looping # Here is the JSON Structure we are going to use.
{ &amp;quot;employees&amp;quot;: [ { &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Doe&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Anna&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;css&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Peter&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Jones&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;html&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 3 } ] } ] }; This json structure can be assigned to a variable or it can be a response of any api.</description>
    </item>
    
  </channel>
</rss>

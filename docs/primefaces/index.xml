<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>primefaces Tutorial on </title>
    <link>https://www.wikiod.com/docs/primefaces/</link>
    <description>Recent content in primefaces Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/primefaces/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with primefaces</title>
      <link>https://www.wikiod.com/primefaces/getting-started-with-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/primefaces/getting-started-with-primefaces/</guid>
      <description>Installing PrimeFaces # PrimeFaces can be used in all web applications based on Java Server Faces (version 2.x) which are run on Servlet Containers (e.g. Wildlfy or Tomcat or GlassFish).
There are several ways you can add PrimeFaces to your application.
Manually # Download the primefaces-{version}.jar and add it to you classpath.
Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.primefaces&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;primefaces&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; For older versions (3.5 and below) you additionally have to add the PrimeFaces repository:</description>
    </item>
    
    <item>
      <title>widgetVar</title>
      <link>https://www.wikiod.com/primefaces/widgetvar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/primefaces/widgetvar/</guid>
      <description>widgetVar is the name of the client side variables which contains all the javascript PF widgets on the page. There is a great intro/tutorial to using the widgetVar component written by Hatem Alimam called Intro To PrimeFaces widgetVar
Basic usage of widgetVar # &amp;lt;h:form&amp;gt; &amp;lt;p:dialog widgetVar=&amp;quot;myDialog&amp;quot;&amp;gt;&amp;lt;/p:dialog&amp;gt; &amp;lt;p:commandButton onclick=&amp;quot;PF(&#39;myDialog&#39;).show();&amp;quot; /&amp;gt; &amp;lt;/h:form&amp;gt; Datatable # datatable.js in GitHub Reporitory
Function Details bindPaginator: function() Binds the change event listener and renders the paginator loadLiveRows: function() Loads rows on-the-fly when scrolling live paginate: function(newState) Ajax pagination fetchNextPage: function(newState) Loads next page asynchronously to keep it at viewstate and Updates viewstate sort: function(columnHeader, order, multi) Ajax sort filter: function() Ajax filter onRowClick: function(event, rowElement, silent) onRowDblclick: function(event, row) highlightRow: function(row) Highlights row as selected unhighlightRow: function(row) Clears selected visuals fireRowSelectEvent: function(rowKey, behaviorEvent) Sends a rowSelectEvent on server side to invoke a rowSelectListener if defined fireRowUnselectEvent: function(rowKey, behaviorEvent) Sends a rowUnselectEvent on server side to invoke a rowUnselectListener if defined selectRowWithRadio: function(radio) Selects the corresping row of a radio based column selection unselectAllRows: function() selectAllRowsOnPage: function() unselectAllRowsOnPage: function() selectAllRows: function() toggleExpansion: function(toggler) Expands a row to display detail content collapseRow: function(row) collapseAllRows: function() getExpandedRows: function() switchToRowEdit: function(row) showRowEditors: function(row) saveRowEdit: function(rowEditor) Saves the edited row cancelRowEdit: function(rowEditor) updateRow: function(row, content) Updates row with given content clearSelection: function() Clears the selection state clearFilters: function() Clears table filters removeSelection: function(rowIndex) Remove given rowIndex from selection addSelection: function(rowKey) Adds given rowKey to selection if it doesn&amp;rsquo;t exist already isSelected: function(rowKey) Finds if given rowKey is in selection saveColumnOrder: function() isEmpty: function() Returns if there is any data displayed getSelectedRowsCount: function() </description>
    </item>
    
    <item>
      <title>Hello Primefaces</title>
      <link>https://www.wikiod.com/primefaces/hello-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/primefaces/hello-primefaces/</guid>
      <description>Hello Primefaces # This is a simple application with primefaces, it is a login page:
1-Configuration of web.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app version=&amp;quot;3.1&amp;quot; xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;quot;&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;javax.faces.PROJECT_STAGE&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;Development&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;javax.faces.webapp.FacesServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.xhtml&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;session-config&amp;gt; &amp;lt;session-timeout&amp;gt; 30 &amp;lt;/session-timeout&amp;gt; &amp;lt;/session-config&amp;gt; &amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt;index.xhtml&amp;lt;/welcome-file&amp;gt; &amp;lt;/welcome-file-list&amp;gt; &amp;lt;/web-app&amp;gt; 2-Create ManagedBean:
import javax.faces.application.FacesMessage; import javax.faces.bean.ManagedBean; import javax.faces.bean.RequestScoped; import javax.faces.context.FacesContext; @ManagedBean @RequestScoped public class LoginBean { private String username; private String password; public LoginBean() { } public void login() { //Simple login if (!</description>
    </item>
    
    <item>
      <title>How to use Primefaces showcase</title>
      <link>https://www.wikiod.com/primefaces/how-to-use-primefaces-showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/primefaces/how-to-use-primefaces-showcase/</guid>
      <description>The example of Primefaces panelGrid component in its Showcase. # The showcase of Primefaces components you can find here and documentation is here
Frontend needs to be saved as a XHTML file. This file can contain JSF, JSTL, JSP, HTML, CSS, jQuery, javaScript and its framework and more front-end technologies. Please, do not mix JSF and JSP technologies together. It is not a good approach.
Note you have to define namespaces such as c, f, h, p, pe and so on in the beginning .</description>
    </item>
    
  </channel>
</rss>

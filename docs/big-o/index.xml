<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>big-o Tutorial on </title>
    <link>https://www.wikiod.com/docs/big-o/</link>
    <description>Recent content in big-o Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/big-o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with big-o</title>
      <link>https://www.wikiod.com/big-o/getting-started-with-big-o/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/big-o/getting-started-with-big-o/</guid>
      <description>What is Big-O Notation? # Big-O notation is a notation used to talk about the long-term growth rates of functions. It&amp;rsquo;s often used in the analysis of algorithms to talk about the runtime of an algorithm or related concepts like space complexity.
In common usage, big-O notation is used to talk about how an algorithm&amp;rsquo;s runtime scales as a size of the input. For example, we&amp;rsquo;d say that selection sort has a runtime of O(n2) because the runtime grows quadratically as a function of the size of the array to sort.</description>
    </item>
    
    <item>
      <title>Calculating Big-O</title>
      <link>https://www.wikiod.com/big-o/calculating-big-o/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/big-o/calculating-big-o/</guid>
      <description>O(n) functions. # Functions that are O(n) increase the number of operations linearly, as the input gets very large. A simple example of a function that is O(n) would be the linear search algorithm, which runs once for the size of the input.
The following pseudo-code would be O(n), because it will always be bounded above by the input size, as the algorithm will never run more times then the input size.</description>
    </item>
    
  </channel>
</rss>

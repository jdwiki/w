<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cucumber Tutorial on </title>
    <link>https://www.wikiod.com/docs/cucumber/</link>
    <description>Recent content in cucumber Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/cucumber/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with cucumber</title>
      <link>https://www.wikiod.com/cucumber/getting-started-with-cucumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/getting-started-with-cucumber/</guid>
      <description>A Cucumber feature # Cucumber uses Gherkin syntax to describe your software&amp;rsquo;s behaviors in structured natural language.
As such Cucumber is not a test framework (a common misunderstanding), but a system documentation framework, not very different from others like Use Case Scenario. The common misunderstanding is due to the fact Cucumber documentation can be automated in order to ensure it reflects the real system behavior.
A Cucumber documentation suite is composed of Features, each describing a feature of your software, written in Gherkin and hosted in its own file.</description>
    </item>
    
    <item>
      <title>Install cucumber plugin in Intellij</title>
      <link>https://www.wikiod.com/cucumber/install-cucumber-plugin-in-intellij/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/install-cucumber-plugin-in-intellij/</guid>
      <description>The Cucumber plugins for IntelliJ IDEA offer convenient IDE features for working with Gherkin feature files in an IntelliJ project using the Cucumber framework. Plugins are available for Java, Scala, or Groovy languages.
The Cucumber for Java IntelliJ plugin offers IDE features for conveniently developing with Cucumber, including
Gherkin step glue generation for unimplemented steps Gherkin step code completion Step-to-glue method code jumping Gherkin syntax highlighting in &amp;ldquo;.feature&amp;rdquo; files matching step regex and other convenient features.</description>
    </item>
    
    <item>
      <title>Gherkin Syntax</title>
      <link>https://www.wikiod.com/cucumber/gherkin-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/gherkin-syntax/</guid>
      <description>Gherkin is a business readable language for test automation and test documentation. It is understood by Cucumber and together exists as a Behavior Driven Development tool.
Syntax # Feature: this keyword signifies that what follows is a basic description or name of the feature being tested or documented. Background: this keyword signifies steps that will be ran before every scenario in the feature. Scenario: this keyword represents the name or basic description of a particular scenario testing the feature.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://www.wikiod.com/cucumber/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/features/</guid>
      <description>You can use cucumber as a plugin in QTP and Selenium.
The steps in the cucumber scenario are global variables.
You can implement once and call many times. Hence reduces the code maintenance, and can reuse the same code when required.
Cucumber features are written in the Gherkin language and stored in files with the suffix .feature. This topic gives examples of each feature of Gherkin.
A minimal Cucumber feature # In features/documentation.</description>
    </item>
    
    <item>
      <title>pom.xml for Maven_ cucumber project.</title>
      <link>https://www.wikiod.com/cucumber/pomxml-for-maven_-cucumber-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/pomxml-for-maven_-cucumber-project/</guid>
      <description>The below project object model is the template pom.xml. If you want to create a maven with cucumber project, you can use the below example as template
pom.xml # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; 4.0.0
&amp;lt;groupId&amp;gt;Project name&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;MulitClients&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-testng&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cucumber-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gherkin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>Step definitions</title>
      <link>https://www.wikiod.com/cucumber/step-definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cucumber/step-definitions/</guid>
      <description>Step definitions are in the programming language supported by a given implementation of Cucumber. This topic gives examples of step definitions in each supported programming language and examples of using Cucumber API calls in step definitions.
Some simple Ruby step definitions # In features/step_definitions/documentation.rb:
When /^I go to the &amp;quot;([^&amp;quot;]+)&amp;quot; documentation$/ do |section| path_part = case section when &amp;quot;Documentation&amp;quot; &amp;quot;documentation&amp;quot; else raise &amp;quot;Unknown documentation section: #{section}&amp;quot; end visit &amp;quot;/documentation/#{path_part}/topics&amp;quot; end Then /^I should see the &amp;quot;([^&amp;quot;]+) documentation&amp;quot;$/ do |section| expect(page).</description>
    </item>
    
  </channel>
</rss>

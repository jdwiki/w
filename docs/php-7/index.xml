<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php-7 Tutorial on </title>
    <link>https://www.wikiod.com/docs/php-7/</link>
    <description>Recent content in php-7 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/php-7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with php-7</title>
      <link>https://www.wikiod.com/php-7/getting-started-with-php-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php-7/getting-started-with-php-7/</guid>
      <description>PHP-7, better and new. # After php 5.4. 5.5 and 5.6 this new mayor update came. The update comes with many new programming features, techniques and ways of writing code. Installing PHP 7 could be done in multiple ways.
To install it for a localhost development like WAMP or XAMPP either check for software updates from their end and see if they come with the new PHP 7, If not you could always download a new PHP version.</description>
    </item>
    
    <item>
      <title>Spaceship operator</title>
      <link>https://www.wikiod.com/php-7/spaceship-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php-7/spaceship-operator/</guid>
      <description>The spaceship operator is used for comparing two expressions. For example, $a &amp;lt;=&amp;gt; $b returns -1, 0 or 1 when $a is respectively less than, equal to, or greater than $b. Comparisons are performed according to PHP&amp;rsquo;s usual type comparison rules.
Sorting a list of numbers # $array = [1, 0, 5, 9, 3, 7, 6, 8, 4, 2]; usort($array, function (int $a, int $b): int { return $a &amp;lt;=&amp;gt; $b; }); print_r($array); Array ( [0] =&amp;gt; 0 [1] =&amp;gt; 1 [2] =&amp;gt; 2 [3] =&amp;gt; 3 [4] =&amp;gt; 4 [5] =&amp;gt; 5 [6] =&amp;gt; 6 [7] =&amp;gt; 7 [8] =&amp;gt; 8 [9] =&amp;gt; 9 ) Simple Example # $a = 5; $b = 10; $a &amp;lt;=&amp;gt; $a; // 0, because $a == $a $a &amp;lt;=&amp;gt; $b; // -1, because $a &amp;lt; $b $b &amp;lt;=&amp;gt; $a; // 1, because $b &amp;gt; $a Generic numerical example # Generic example in a form of $a &amp;lt;=&amp;gt; $b matrix.</description>
    </item>
    
    <item>
      <title>Anonymous class</title>
      <link>https://www.wikiod.com/php-7/anonymous-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php-7/anonymous-class/</guid>
      <description>Anonymous classes are useful when simple, one-off objects need to be created. They can be used in place of a full class definition.
They can everything a normal class can: pass arguments through to their constructors, extend other classes, implement interfaces, use traits.
Anonymous classes are assigned a name by the engine, This name has to be regarded an implementation detail, which should not be relied upon.
Simple in-place data wrapper # interface IArrayWrapper { public function getProperties(): array; public function has(string $name): bool; public function __toString(); // .</description>
    </item>
    
    <item>
      <title>Null Coalesce Operator</title>
      <link>https://www.wikiod.com/php-7/null-coalesce-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/php-7/null-coalesce-operator/</guid>
      <description>The null coalescing operator (??) has been added as syntactic sugar for the common case of needing to use a ternary in conjunction with isset().
It returns its first operand if it exists and is not NULL; otherwise it returns its second operand.
General usage # // Fetches the value of $_GET[&#39;id&#39;] and returns 0 if it does not exist. $id = $_GET[&#39;id&#39;] ?? 0; // This is equivalent to: $id = isset($_GET[&#39;id&#39;]) ?</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bluebird Tutorial on </title>
    <link>https://www.wikiod.com/docs/bluebird/</link>
    <description>Recent content in bluebird Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/bluebird/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with bluebird</title>
      <link>https://www.wikiod.com/bluebird/getting-started-with-bluebird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bluebird/getting-started-with-bluebird/</guid>
      <description>Installation or Setup # Node.js # npm install bluebird Then:
var Promise = require(&amp;quot;bluebird&amp;quot;); Browsers # There are many ways to use bluebird in browsers:
Direct downloads Full build bluebird.js Full build minified bluebird.min.js Core build bluebird.core.js Core build minified bluebird.core.min.js You may use browserify on the main export You may use the bower package. When using script tags the global variables Promise and P (alias for Promise) become available. Bluebird runs on a wide variety of browsers including older versions.</description>
    </item>
    
    <item>
      <title>Converting a callback API to promises.</title>
      <link>https://www.wikiod.com/bluebird/converting-a-callback-api-to-promises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bluebird/converting-a-callback-api-to-promises/</guid>
      <description>Promises have state, they start as pending and can settle to:
fulfilled meaning that the computation completed successfully. rejected meaning that the computation failed. Promise returning functions should never throw, they should return rejections instead. Throwing from a promise returning function will force you to use both a } catch { and a .catch. People using promisified APIs do not expect promises to throw. If you&amp;rsquo;re not sure how async APIs work in JS - please see this answer first.</description>
    </item>
    
    <item>
      <title>Promise.all</title>
      <link>https://www.wikiod.com/bluebird/promiseall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bluebird/promiseall/</guid>
      <description>Promise.all( Iterable&amp;lt;any&amp;gt; | Promise&amp;lt;Iterable&amp;lt;any&amp;gt;&amp;gt; input ) -&amp;gt; Promise This method is useful for when you want to wait for more than one promise to complete.
Given an Iterable(arrays are Iterable), or a promise of an Iterable, which produces promises (or a mix of promises and values), iterate over all the values in the Iterable into an array and return a promise that is fulfilled when all the items in the array are fulfilled.</description>
    </item>
    
  </channel>
</rss>

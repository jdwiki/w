<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-web-api2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/asp-dotnet-web-api2/</link>
    <description>Recent content in asp.net-web-api2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/asp-dotnet-web-api2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with asp.net-web-api2</title>
      <link>https://www.wikiod.com/asp-dotnet-web-api2/getting-started-with-aspnet-web-api2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-web-api2/getting-started-with-aspnet-web-api2/</guid>
      <description>What and why Asp.Net Web API2? # What and Why ?
Asp.Net’s Web API2 is the latest version of Web API. It is an easy way to implement a RESTful web service using all of the goodness that the Asp.Net framework provides. Once you understand the basic principles of REST, then a Asp.net Web API2 will be very easy to implement. Web API2 is built on Asp.Net’s modular, pluggable pipeline model.</description>
    </item>
    
    <item>
      <title>OAuth 2.0 in ASP.NET Web API</title>
      <link>https://www.wikiod.com/asp-dotnet-web-api2/oauth-20-in-aspnet-web-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-web-api2/oauth-20-in-aspnet-web-api/</guid>
      <description>Registering in an Android Application
These are the steps I&amp;rsquo;ve taken to log in / register using an Android app:
Have a login activity which queries the ExternalLogins route, getting the available providers. This activity should have the NoHistory flag enabled and launch as a single instance. On a user&amp;rsquo;s button press, launch a Custom Chrome Tab with the provider&amp;rsquo;s URL. The user should be logged in and redirected back to your published site at the given return URL.</description>
    </item>
    
    <item>
      <title>Attribute Routing in ASP.NET Web API 2</title>
      <link>https://www.wikiod.com/asp-dotnet-web-api2/attribute-routing-in-aspnet-web-api-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-web-api2/attribute-routing-in-aspnet-web-api-2/</guid>
      <description>As the name suggests, this uses attributes to route. This gives the user more control over the URI&amp;rsquo;s in the WebAPI. For example, you can describe hierarchies of the resource. However, the earlier &amp;lsquo;Conventional Routing&amp;rsquo; is fully supported. Users can have a mixture of both too.
Syntax # [RoutePrefix(&amp;ldquo;api/books&amp;rdquo;)] - for controller class [Route(&amp;ldquo;getById&amp;rdquo;)] - for actions [Route(&amp;quot;~/api/authors/{authorId:int}/books&amp;quot;)] - for overriding route prefix Parameters # Parameter Name Details RoutePrefix attribute to the controller class.</description>
    </item>
    
  </channel>
</rss>

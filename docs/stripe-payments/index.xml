<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stripe-payments Tutorial on </title>
    <link>https://www.wikiod.com/docs/stripe-payments/</link>
    <description>Recent content in stripe-payments Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/stripe-payments/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with stripe-payments</title>
      <link>https://www.wikiod.com/stripe-payments/getting-started-with-stripe-payments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stripe-payments/getting-started-with-stripe-payments/</guid>
      <description>Introduction to Stripe&amp;rsquo;s API # A typical payment flow with Stripe can be divided in two steps:
Client-side, in your frontend (HTML + Javascript) code, you collect the customer&amp;rsquo;s payment information using Stripe&amp;rsquo;s prebuilt Checkout form or Elements form field(s). This will return a token that you then send to your server.
Server-side, in your backend code (in PHP, Python, Ruby, or whichever server-side programming language you prefer), you use the token in a charge creation request to actually charge the card.</description>
    </item>
    
    <item>
      <title>PHP-Stripe Connect documentation for Symfony2</title>
      <link>https://www.wikiod.com/stripe-payments/php-stripe-connect-documentation-for-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stripe-payments/php-stripe-connect-documentation-for-symfony2/</guid>
      <description>Parameters # Parameter Details amount required - A positive integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a 0-decimal currency) representing how much to charge the card. The minimum amount is $0.50 US or equivalent in charge currency. currency required - 3-letter ISO code for currency. description optional, default is null - An arbitrary string which you can attach to a charge object.</description>
    </item>
    
    <item>
      <title>Stripe.Net Introduction</title>
      <link>https://www.wikiod.com/stripe-payments/stripenet-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stripe-payments/stripenet-introduction/</guid>
      <description>Syntax # var stripeSubscriptionOptions = new StripeSubscriptionCreateOptions();
//create a variable to hold options object
stripeSubscriptionOptions.Quantity = model.update; //example option of quantity of seats for a subscription
var subscriptionService = new StripeSubscriptionService(); //create a service to make the API call
var stripeSubscription = subscriptionService.Create(user.CustomerIdentifier, planId, stripeSubscriptionOptions);
// service.create( string CustID, string PlanID, Object SubscriptionOptions)
//Customer ID should be saved from your database, you can retrieve planID from stripe using a PlanService and create the options object like above.</description>
    </item>
    
    <item>
      <title>Stripe Add multiple card to Same User</title>
      <link>https://www.wikiod.com/stripe-payments/stripe-add-multiple-card-to-same-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/stripe-payments/stripe-add-multiple-card-to-same-user/</guid>
      <description>Create customer in stripe # public function createCustomer($data , $token)//pass form data and token id { $customer=Customer::create(array( &amp;quot;email&amp;quot;=&amp;gt;$data[&#39;email&#39;], &amp;quot;description&amp;quot; =&amp;gt; $data[&#39;name&#39;], &amp;quot;source&amp;quot; =&amp;gt; $token // obtained with Stripe.js )); return $customer[&#39;id&#39;]; } For more Information follow this Link
How to retrive customer And add cards in Stripe # public function addCard($cust_id, $token) { $retriveResult=Customer::retrieve($cust_id); $tokendata = Token::retrieve($token); $newcard = $tokendata[&#39;card&#39;]; $flag = 1; foreach ($retriveResult[&#39;sources&#39;][&#39;data&#39;] as $card) { if($card[&#39;fingerprint&#39;] === $newcard[&#39;fingerprint&#39;]) { $cardid = $card[&#39;id&#39;]; $flag = 0; break; } } if($flag) { $savecard = $retriveResult-&amp;gt;sources-&amp;gt;create(array(&amp;quot;source&amp;quot; =&amp;gt;$token)); $cardid = $savecard[&#39;id&#39;]; } return $cardid; } </description>
    </item>
    
  </channel>
</rss>

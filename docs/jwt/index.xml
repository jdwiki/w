<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jwt Tutorial on </title>
    <link>https://www.wikiod.com/docs/jwt/</link>
    <description>Recent content in jwt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jwt</title>
      <link>https://www.wikiod.com/jwt/getting-started-with-jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jwt/getting-started-with-jwt/</guid>
      <description>Unsigned JWT # An unsigned JWT has the header value alg: none and an empty JWS (signature) component:
eyJhbGciOiJub25lIn0 .eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ . The trailing dot indicates that the signature is empty.
Header # { &amp;quot;alg&amp;quot;: &amp;quot;none&amp;quot; } Payload # { &amp;quot;iss&amp;quot;: &amp;quot;joe&amp;quot;, &amp;quot;exp&amp;quot;: 1300819380, &amp;quot;http://example.com/is_root&amp;quot;: true } Signed JWT (JWS) # A signed JWT includes a Base64 Url Safe encoded signature as the third component. The algorithm used to generate the signature is indicated in the header.</description>
    </item>
    
    <item>
      <title>Invalidating Json Web Tokens</title>
      <link>https://www.wikiod.com/jwt/invalidating-json-web-tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jwt/invalidating-json-web-tokens/</guid>
      <description>There are several reason to invalidate a JWT token before its expiration time: account deleted/blocked/suspended, password or permissions changed, user logged out by admin.
JWT is self-contained, signed and stored outside of the server context, so revoking a token is not a simple action.
Remove the token from client storage # Remove the token from the client storage to avoid usage
Tokens are issued by the server and you can not force browsers to delete a cookie/localStorage or control how external clients are managing your tokens.</description>
    </item>
    
    <item>
      <title>Serializations</title>
      <link>https://www.wikiod.com/jwt/serializations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jwt/serializations/</guid>
      <description>JWS Compact Serialization # The Compact Serialization is the most common serialization format and is designed to be used in a web context.
JWS are represented into a string that contains Base64 Url Safe encoded information seperated by an dot &amp;ldquo;.&amp;rdquo;.
This mode does not support unprotected headers.
Line breaks added for readability
BASE64URL(UTF8(JWS Protected Header)) || &#39;.&#39; || BASE64URL(JWS Payload) || &#39;.&#39; || BASE64URL(JWS Signature) Example # eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX hhbXBsZSJ9 .</description>
    </item>
    
  </channel>
</rss>

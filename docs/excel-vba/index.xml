<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>excel-vba Tutorial on </title>
    <link>https://www.wikiod.com/docs/excel-vba/</link>
    <description>Recent content in excel-vba Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/excel-vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with excel-vba</title>
      <link>https://www.wikiod.com/excel-vba/getting-started-with-excel-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/getting-started-with-excel-vba/</guid>
      <description>Opening the Visual Basic Editor (VBE) # Step 1: Open a Workbook
Step 2 Option A: Press Alt + F11
This is the standard shortcut to open the VBE.
Step 2 Option B: Developer Tab &amp;ndash;&amp;gt; View Code
First, the Developer Tab must be added to the ribbon. Go to File -&amp;gt; Options -&amp;gt; Customize Ribbon, then check the box for developer.
Then, go to the developer tab and click &amp;ldquo;View Code&amp;rdquo; or &amp;ldquo;Visual Basic&amp;rdquo;</description>
    </item>
    
    <item>
      <title>VBA Best Practices</title>
      <link>https://www.wikiod.com/excel-vba/vba-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/vba-best-practices/</guid>
      <description>We all know them, but these practices are far less obvious to someone starting to program in VBA.
ALWAYS Use &amp;ldquo;Option Explicit&amp;rdquo; # In the VBA Editor window, from the Tools menu select &amp;ldquo;Options&amp;rdquo;:
Then in the &amp;ldquo;Editor&amp;rdquo; tab, make sure that &amp;ldquo;Require Variable Declaration&amp;rdquo; is checked:
Selecting this option will automatically put Option Explicit at the top of every VBA module.
Small note: This is true for the modules, class modules, etc.</description>
    </item>
    
    <item>
      <title>Methods for Finding the Last Used Row or Column in a Worksheet</title>
      <link>https://www.wikiod.com/excel-vba/methods-for-finding-the-last-used-row-or-column-in-a-worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/methods-for-finding-the-last-used-row-or-column-in-a-worksheet/</guid>
      <description>You can find a good explanation on why other methods are discouraged/inaccurate here : http://stackoverflow.com/a/11169920/4628637
Find the Last Non-Empty Cell in a Column # In this example, we will look at a method for returning the last non-empty row in a column for a data set.
This method will work regardless of empty regions within the data set.
However caution should be used if merged cells are involved, as the End method will be &amp;ldquo;stopped&amp;rdquo; against a merged region, returning the first cell of the merged region.</description>
    </item>
    
    <item>
      <title>Excel VBA Tips and Tricks</title>
      <link>https://www.wikiod.com/excel-vba/excel-vba-tips-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/excel-vba-tips-and-tricks/</guid>
      <description>This topic consists of a wide variety of useful tips and tricks discovered by SO users through their experience in coding. These are often examples of ways to circumvent common frustrations or ways of using Excel in a more &amp;ldquo;clever&amp;rdquo; way.
Using xlVeryHidden Sheets # Worksheets in excel have three options for the Visible property. These options are represented by constants in the xlSheetVisibility enumeration and are as follows:
xlVisible or xlSheetVisible value: -1 (the default for new sheets) xlHidden or xlSheetHidden value: 0 xlVeryHidden xlSheetVeryHidden value: 2 Visible sheets represent the default visibility for sheets.</description>
    </item>
    
    <item>
      <title>Common Mistakes</title>
      <link>https://www.wikiod.com/excel-vba/common-mistakes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/common-mistakes/</guid>
      <description>Qualifying References # When referring to a worksheet, a range or individual cells, it is important to fully qualify the reference.
For example:
ThisWorkbook.Worksheets(&amp;quot;Sheet1&amp;quot;).Range(Cells(1, 2), Cells(2, 3)).Copy Is not fully qualified: The Cells references do not have a workbook and worksheet associated with them. Without an explicit reference, Cells refers to the ActiveSheet by default. So this code will fail (produce incorrect results) if a worksheet other than Sheet1 is the current ActiveSheet.</description>
    </item>
    
    <item>
      <title>Ranges and Cells</title>
      <link>https://www.wikiod.com/excel-vba/ranges-and-cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/ranges-and-cells/</guid>
      <description>Syntax # Set - The operator used to set a reference to an object, such as a Range For Each - The operator used to loop through every item in a collection Note that the variable names r, cell and others can be named however you like but should be named appropriately so the code is easier to understand for you and others.
Ways to refer to a single cell # The simplest way to refer to a single cell on the current Excel worksheet is simply to enclose the A1 form of its reference in square brackets:</description>
    </item>
    
    <item>
      <title>Debugging and Troubleshooting</title>
      <link>https://www.wikiod.com/excel-vba/debugging-and-troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/debugging-and-troubleshooting/</guid>
      <description>Syntax # Debug.Print(string) Stop() / Stop Immediate Window # If you would like to test a line of macro code without needing to run an entire sub, you can type commands directly into the Immediate Window and hit ENTER to run the line.
For testing the output of a line, you can precede it with a question mark ? to print directly to the Immediate Window. Alternatively, you can also use the print command to have the output printed.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/excel-vba/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/arrays/</guid>
      <description>Populating arrays (adding values) # There are multiple ways to populate an array.
Directly # &#39;one-dimensional Dim arrayDirect1D(2) As String arrayDirect(0) = &amp;quot;A&amp;quot; arrayDirect(1) = &amp;quot;B&amp;quot; arrayDirect(2) = &amp;quot;C&amp;quot; &#39;multi-dimensional (in this case 3D) Dim arrayDirectMulti(1, 1, 2) arrayDirectMulti(0, 0, 0) = &amp;quot;A&amp;quot; arrayDirectMulti(0, 0, 1) = &amp;quot;B&amp;quot; arrayDirectMulti(0, 0, 2) = &amp;quot;C&amp;quot; arrayDirectMulti(0, 1, 0) = &amp;quot;D&amp;quot; &#39;... Using Array() function # &#39;one-dimensional only Dim array1D As Variant &#39;has to be type variant array1D = Array(1, 2, &amp;quot;A&amp;quot;) &#39;-&amp;gt; array1D(0) = 1, array1D(1) = 2, array1D(2) = &amp;quot;A&amp;quot; From range # Dim arrayRange As Variant &#39;has to be type variant &#39;putting ranges in an array always creates a 2D array (even if only 1 row or column) &#39;starting at 1 and not 0, first dimension is the row and the second the column arrayRange = Range(&amp;quot;A1:C10&amp;quot;).</description>
    </item>
    
    <item>
      <title>Loop through all Sheets in Active Workbook</title>
      <link>https://www.wikiod.com/excel-vba/loop-through-all-sheets-in-active-workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/loop-through-all-sheets-in-active-workbook/</guid>
      <description>Retrieve all Worksheets Names in Active Workbook # Option Explicit Sub LoopAllSheets() Dim sht As Excel.Worksheet &#39; declare an array of type String without committing to maximum number of members Dim sht_Name() As String Dim i As Integer &#39; get the number of worksheets in Active Workbook , and put it as the maximum number of members in the array ReDim sht_Name(1 To ActiveWorkbook.Worksheets.count) i = 1 &#39; loop through all worksheets in Active Workbook For Each sht In ActiveWorkbook.</description>
    </item>
    
    <item>
      <title>User Defined Functions (UDFs)</title>
      <link>https://www.wikiod.com/excel-vba/user-defined-functions-udfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/excel-vba/user-defined-functions-udfs/</guid>
      <description>Syntax # Function functionName(argumentVariable As dataType, argumentVariable2 As dataType, Optional argumentVariable3 As dataType) As functionReturnDataType
Basic declaration of a function. Every function needs a name, but it does not have to take any arguments. It may take 0 arguments, or it may take a given number of arguments. You may also declare an argument as optional (meaning it does not matter if you supply it when calling the function). It is best practice to supply the variable type for each argument, and likewise, to return what data type the function itself is going to return.</description>
    </item>
    
  </channel>
</rss>

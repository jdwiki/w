<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/r/</link>
    <description>Recent content in R Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with R Language</title>
      <link>https://www.wikiod.com/r/getting-started-with-r-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/getting-started-with-r-language/</guid>
      <description>Installing R # You might wish to install RStudio after you have installed R. RStudio is a development environment for R that simplifies many programming tasks.
Windows only: # Visual Studio (starting from version 2015 Update 3) now features a development environment for R called R Tools, that includes a live interpreter, IntelliSense, and a debugging module. If you choose this method, you won&amp;rsquo;t have to install R as specified in the following section.</description>
    </item>
    
    <item>
      <title>Pipe operators (%&gt;% and others)</title>
      <link>https://www.wikiod.com/r/pipe-operators--and-others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/pipe-operators--and-others/</guid>
      <description>Pipe operators, available in magrittr, dplyr, and other R packages, process a data-object using a sequence of operations by passing the result of one step as input for the next step using infix-operators rather than the more typical R method of nested function calls.
Note that the intended aim of pipe operators is to increase human readability of written code. See Remarks section for performance considerations.
Syntax # lhs %&amp;gt;% rhs # pipe syntax for rhs(lhs)</description>
    </item>
    
    <item>
      <title>data.table</title>
      <link>https://www.wikiod.com/r/datatable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/datatable/</guid>
      <description>Data.table is a package that extends the functionality of data frames from base R, particularly improving on their performance and syntax. See the package&amp;rsquo;s Docs area at https://www.wikiod.com/data-table/getting-started-with-datatable for details.
Syntax # DT[i, j, by]
# DT[where, select|update|do, by] DT[...][...]
# chaining ################# Shortcuts, special functions and special symbols inside DT[...] .()
# in several arguments, replaces list() J()
# in i, replaces list() :=
# in j, a function used to add or modify columns .</description>
    </item>
    
    <item>
      <title>ggplot2</title>
      <link>https://www.wikiod.com/r/ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/ggplot2/</guid>
      <description>ggplot2 has its own perfect reference website http://ggplot2.tidyverse.org/.
Most of the time, it is more convenient to adapt the structure or content of the plotted data (e.g. a data.frame) than adjusting things within the plot afterwards.
RStudio publishes a very helpful &amp;ldquo;Data Visualization with ggplot2&amp;rdquo; cheatsheet that can be found here.
Displaying multiple plots # Display multiple plots in one image with the different facet functions. An advantage of this method is that all axes share the same scale across charts, making it easy to compare them at a glance.</description>
    </item>
    
    <item>
      <title>Introduction to Geographical Maps</title>
      <link>https://www.wikiod.com/r/introduction-to-geographical-maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/introduction-to-geographical-maps/</guid>
      <description>See also I/O for geographic data
Basic map-making with map() from the package maps # The function map() from the package maps provides a simple starting point for creating maps with R.
A basic world map can be drawn as follows:
require(maps) map() The color of the outline can be changed by setting the color parameter, col, to either the character name or hex value of a color:
require(maps) map(col = &amp;quot;cornflowerblue&amp;quot;) To fill land masses with the color in col we can set fill = TRUE:</description>
    </item>
    
    <item>
      <title>Linear Models (Regression)</title>
      <link>https://www.wikiod.com/r/linear-models-regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/linear-models-regression/</guid>
      <description>Syntax # lm(formula, data, subset, weights, na.action, method = &amp;ldquo;qr&amp;rdquo;, model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, contrasts = NULL, offset, &amp;hellip;) Parameters # Parameter Meaning formula a formula in Wilkinson-Rogers notation; response ~ ... where ... contains terms corresponding to variables in the environment or in the data frame specified by the data argument data data frame containing the response and predictor variables subset a vector specifying a subset of observations to be used: may be expressed as a logical statement in terms of the variables in data weights analytical weights (see Weights section above) na.</description>
    </item>
    
    <item>
      <title>Reading and writing tabular data in plain-text files (CSV, TSV, etc.)</title>
      <link>https://www.wikiod.com/r/reading-and-writing-tabular-data-in-plain-text-files-csv-tsv-etc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/reading-and-writing-tabular-data-in-plain-text-files-csv-tsv-etc/</guid>
      <description>Syntax # read.csv(file, header = TRUE, sep = &amp;ldquo;,&amp;rdquo;, quote = &amp;ldquo;&amp;quot;&amp;rdquo;, dec = &amp;ldquo;.&amp;rdquo;, fill = TRUE, comment.char = &amp;ldquo;&amp;rdquo;, &amp;hellip;)
read.csv2(file, header = TRUE, sep = &amp;ldquo;;&amp;rdquo;, quote = &amp;ldquo;&amp;quot;&amp;rdquo;, dec = &amp;ldquo;,&amp;rdquo;, fill = TRUE, comment.char = &amp;ldquo;&amp;rdquo;, &amp;hellip;)
readr::read_csv(file, col_names = TRUE, col_types = NULL, locale = default_locale(), na = c(&amp;quot;&amp;quot;, &amp;ldquo;NA&amp;rdquo;), comment = &amp;ldquo;&amp;rdquo;, trim_ws = TRUE, skip = 0, n_max = -1, progress = interactive())</description>
    </item>
    
    <item>
      <title>Installing packages</title>
      <link>https://www.wikiod.com/r/installing-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/installing-packages/</guid>
      <description>Syntax # install.packages(pkgs, lib, repos, method, destdir, dependencies, &amp;hellip;) Parameters # Parameter Details pkgs character vector of the names of packages. If repos = NULL, a character vector of file paths. lib character vector giving the library directories where to install the packages. repos character vector, the base URL(s) of the repositories to use, can be NULL to install from local files method download method destdir directory where downloaded packages are stored dependencies logical indicating whether to also install uninstalled packages which these packages depend on/link to/import/suggest (and so on recursively).</description>
    </item>
    
    <item>
      <title>Pattern Matching and Replacement</title>
      <link>https://www.wikiod.com/r/pattern-matching-and-replacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/pattern-matching-and-replacement/</guid>
      <description>This topic covers matching string patterns, as well as extracting or replacing them. For details on defining complicated patterns see Regular Expressions.
Syntax # grep(&amp;ldquo;query&amp;rdquo;, &amp;ldquo;subject&amp;rdquo;, optional_args)
grepl(&amp;ldquo;query&amp;rdquo;, &amp;ldquo;subject&amp;rdquo;, optional_args)
gsub(&amp;quot;(group1)(group2)&amp;quot;, &amp;ldquo;\\group#&amp;rdquo;, &amp;ldquo;subject&amp;rdquo;)
Differences from other languages # Escaped regex symbols (like \1) are must be escaped a second time (like \\1), not only in the pattern argument, but also in the replacement to sub and gsub.
By default, the pattern for all commands (grep, sub, regexpr) is not Perl Compatible Regular Expression (PCRE) so some things like lookarounds are not supported.</description>
    </item>
    
    <item>
      <title>Shiny</title>
      <link>https://www.wikiod.com/r/shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/r/shiny/</guid>
      <description>Create an app # Shiny is an R package developed by RStudio that allows the creation of web pages to interactively display the results of an analysis in R.
There are two simple ways to create a Shiny app:
in one .R file, or in two files: ui.R and server.R. A Shiny app is divided into two parts:
ui: A user interface script, controlling the layout and appearance of the application.</description>
    </item>
    
  </channel>
</rss>

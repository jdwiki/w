<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symfony3 Tutorial on </title>
    <link>https://www.wikiod.com/docs/symfony3/</link>
    <description>Recent content in symfony3 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/symfony3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with symfony3</title>
      <link>https://www.wikiod.com/symfony3/getting-started-with-symfony3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/getting-started-with-symfony3/</guid>
      <description>3. Windows Systems # You must add php to your path environment variable. Follow theses steps :
Windows 7 :
Right-click on a My Computer icon Click Properties Click Advanced system settings from the left nav Click Advanced tab Click Environment Variables button In the System Variables section, select Path (case-insensitive) and click Edit button Add a semi-colon (;) to the end of the string, then add the full file system path of your PHP installation (e.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/symfony3/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/routing/</guid>
      <description>A route is like mapping a URL to an action (function) in a Controller class. The following topic will focus on creating routes, passing parameters to the Controller class via a route either using YAML or annotation.
It&amp;rsquo;s useful to see what is generated by Symfony framework, this one provide tools to watch all routes of an specific application.
From the Symfony Doc, use (in a shell) :
php bin/console debug:router As well, you can watch all the relevant routes informations in the Framework profiler, in the routing menu : Routing using YAML # The routing configuration is included in your app/config/config.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://www.wikiod.com/symfony3/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/testing/</guid>
      <description>Simple Testing in Symfony3 # Unit Test
Unit tests are used to ensure that your code has no syntax error and to test the logic of your code to work as what you expected. Quick example:
src/AppBundle/Calculator/BillCalculator.php
&amp;lt;?php namespace AppBundle\Calculator; use AppBundle\Calculator\TaxCalculator; class BillCalculator { private $taxCalculator; public function __construct(TaxCalculator $taxCalculator) { $this-&amp;gt;taxCalculator = $taxCalculator; } public function calculate($products) { $totalPrice = 0; foreach ($products as $product) { $totalPrice += $product[&#39;price&#39;]; } $tax = $this-&amp;gt;taxCalculator-&amp;gt;calculate($totalPrice); return $totalPrice + $tax; } } src/AppBundle/Calculator/TaxCalculator.</description>
    </item>
    
    <item>
      <title>Working with Web Services</title>
      <link>https://www.wikiod.com/symfony3/working-with-web-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/working-with-web-services/</guid>
      <description>Rest API # I have previously written [documentation][1] on this site in order to describe how to make web services on Symfony
I will write again a tutorial for the symfony &amp;gt;= 3 version.
We think that we have a installed web-server on a configured version of [Symfony Framework][2]. You must have [composer][3] (php packages manager) installed too.
To made it simple, if you have composer installed, type this in a terminal / command prompt :</description>
    </item>
    
    <item>
      <title>Dynamic Forms</title>
      <link>https://www.wikiod.com/symfony3/dynamic-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/dynamic-forms/</guid>
      <description>How to extend ChoiceType, EntityType and DocumentType to load choices with AJAX. # In Symfony, the built-in ChoiceType (and EntityType or DocumentType extending it), basicaly work with a constant choice list.
If you want to make it work with ajax calls, you have to change them to accept any sumitted extra choices.
How to start with an empty choice list ?
When you build your form, just set the choices option to an empty array() :</description>
    </item>
    
    <item>
      <title>Event Dispatcher</title>
      <link>https://www.wikiod.com/symfony3/event-dispatcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/event-dispatcher/</guid>
      <description>Syntax # $dispatcher-&amp;gt;dispatch(string $eventName, Event $event);
$dispatcher-&amp;gt;addListener(string $eventName, callable $listener, int $priority = 0);
$dispatcher-&amp;gt;addSubscriber(EventSubscriberInterface $subscriber);
It is often best to use a single instance of EventDispatcher in your application that you inject into the objects that need to fire events.
It is best practice to have a single location where you manage the configuration of, and add event listeners to, your EventDispatcher. The Symfony framework uses the Dependency Injection Container.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/symfony3/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/validation/</guid>
      <description>In fact, form validation is based from a component, named &amp;ldquo;Validator Component&amp;rdquo;.
You can often use the dedicated service if you did&amp;rsquo;t have to show a form in a template. Like APIs. You may validate datas in the same way, like this :
For example, based on symfony doc :
$validator = $this-&amp;gt;get(&#39;validator&#39;); $errors = $validator-&amp;gt;validate($author); if (count($errors) &amp;gt; 0) { /* * Uses a __toString method on the $errors variable which is a * ConstraintViolationList object.</description>
    </item>
    
    <item>
      <title>Declaring Entities</title>
      <link>https://www.wikiod.com/symfony3/declaring-entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/declaring-entities/</guid>
      <description>Declaring a Symfony Entity as YAML # AppBundle/Entity/Person.php
&lt;?php namespace AppBundle\Entity; /** * Person */ class Person { /** * @var int */ private $id; /** * @var string */ private $name; /** * @var int */ private $age; /** * Get id * * @return int */ public function getId() { return $this-&gt;id; } /** * Set name * * @param string $name * * @return Person */ public function setName($name) { $this-&gt;name = $name; return $this; } /** * Get name * * @return string */ public function getName() { return $this-&gt;name; } /** * Set age * * @param integer $age * * @return Person */ public function setAge($age) { $this-&gt;age = $age; return $this; } /** * Get age * * @return int */ public function getAge() { return $this-&gt;age; } } AppBundle/Resources/config/doctrine/Person.</description>
    </item>
    
    <item>
      <title>Asset Management with Assetic</title>
      <link>https://www.wikiod.com/symfony3/asset-management-with-assetic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/asset-management-with-assetic/</guid>
      <description>When using the Assetic Bundle, according to the Symfony documentation, please be aware of the following:
Starting from Symfony 2.8, Assetic is no longer included by default in the Symfony Standard Edition. Before using any of its features, install the AsseticBundle executing this console command in your project:
$ composer require symfony/assetic-bundle
There are other steps you have to take. For more information go to: http://symfony.com/doc/current/assetic/asset_management.html
Parameters # Name Example Path &amp;lsquo;static/images/logo/logo-default.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://www.wikiod.com/symfony3/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony3/configuration/</guid>
      <description>Examples and good practices for configuring your Symfony application that aren&amp;rsquo;t in the official documentation.
Use fully qualified class name (FQCN) as service id # In many examples, you will find a service id like &amp;lsquo;acme.demo.service.id&amp;rsquo; (a string with dots). You services.yml will look like this:
services: acme.demo.service.id: class: Acme\DemoBundle\Services\DemoService arguments: [&amp;quot;@doctrine.orm.default_entity_manager&amp;quot;, &amp;quot;@cache&amp;quot;] In your controller, you can use this service:
$service = $this-&amp;gt;get(&#39;acme.demo.service.id&#39;); While there is no issue with this, you can use a Fully Qualified Class Name (FQCN) as service id:</description>
    </item>
    
  </channel>
</rss>

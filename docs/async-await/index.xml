<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>async-await Tutorial on </title>
    <link>https://www.wikiod.com/docs/async-await/</link>
    <description>Recent content in async-await Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/async-await/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with async-await</title>
      <link>https://www.wikiod.com/async-await/getting-started-with-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/async-await/getting-started-with-async-await/</guid>
      <description>async void # You can use void (instead of Task) as a return type of an asynchronous method. This will result in a &amp;ldquo;fire-and-forget&amp;rdquo; action:
public void DoStuff() { FireAndForgetAsync(); } private async void FireAndForgetAsync() { await Task.Delay(1000); throw new Exception(); //will be swallowed } As you are returning void, you can not await FireAndForgetAsync. You will not be able to know when the method finishes, and any exception raised inside the async void method will be swallowed.</description>
    </item>
    
    <item>
      <title>Best practices</title>
      <link>https://www.wikiod.com/async-await/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/async-await/best-practices/</guid>
      <description>Avoid async void # The only place where you can safely use async void is in event handlers. Consider the following code:
private async Task&amp;lt;bool&amp;gt; SomeFuncAsync() { ... await ... } public void button1_Click(object sender, EventArgs e) { var result = SomeFuncAsync().Result; SomeOtherFunc(); } Once the async call completes, it waits for the SynchronizationContext to become available. However, the event handler holds on to the SynchronizationContext while it is waiting for SomeFuncAsync method to complete; thus causing a circular wait (deadlock).</description>
    </item>
    
  </channel>
</rss>

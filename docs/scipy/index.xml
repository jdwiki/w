<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scipy Tutorial on </title>
    <link>https://www.wikiod.com/docs/scipy/</link>
    <description>Recent content in scipy Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with scipy</title>
      <link>https://www.wikiod.com/scipy/getting-started-with-scipy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scipy/getting-started-with-scipy/</guid>
      <description>Convert a sparse matrix to a dense matrix using SciPy # from scipy.sparse import csr_matrix A = csr_matrix([[1,0,2],[0,3,0]]) &amp;gt;&amp;gt;&amp;gt;A &amp;lt;2x3 sparse matrix of type &#39;&amp;lt;type &#39;numpy.int64&#39;&amp;gt;&#39; with 3 stored elements in Compressed Sparse Row format&amp;gt; &amp;gt;&amp;gt;&amp;gt; A.todense() matrix([[1, 0, 2], [0, 3, 0]]) &amp;gt;&amp;gt;&amp;gt; A.toarray() array([[1, 0, 2], [0, 3, 0]]) Image Manipulation using Scipy (Basic Image resize) # SciPy provides basic image manipulation functions. These include functions to read images from disk into numpy arrays, to write numpy arrays to disk as images, and to resize images.</description>
    </item>
    
    <item>
      <title>Smoothing a signal</title>
      <link>https://www.wikiod.com/scipy/smoothing-a-signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scipy/smoothing-a-signal/</guid>
      <description>Using a Savitzky–Golay filter # Given a noisy signal:
import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 plt.plot(x,y) plt.show() one can smooth it using a Savitzky–Golay filter using the scipy.signal.savgol_filter() method:
import scipy.signal import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 yhat = scipy.signal.savgol_filter(y, 51, 3) # window size 51, polynomial order 3 plt.</description>
    </item>
    
    <item>
      <title>Fitting functions with scipy.optimize curve_fit</title>
      <link>https://www.wikiod.com/scipy/fitting-functions-with-scipyoptimize-curve_fit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scipy/fitting-functions-with-scipyoptimize-curve_fit/</guid>
      <description>Fitting a function which describes the expected occurence of data points to real data is often required in scientific applications. A possible optimizer for this task is curve_fit from scipy.optimize. In the following, an example of application of curve_fit is given.
Fitting a function to data from a histogram # Suppose there is a peak of normally (gaussian) distributed data (mean: 3.0, standard deviation: 0.3) in an exponentially decaying background. This distribution can be fitted with curve_fit within a few steps:</description>
    </item>
    
    <item>
      <title>How to write a Jacobian function for optimize.minimize</title>
      <link>https://www.wikiod.com/scipy/how-to-write-a-jacobian-function-for-optimizeminimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scipy/how-to-write-a-jacobian-function-for-optimizeminimize/</guid>
      <description>Syntax # import numpy as np from scipy.optimize import _minimize from scipy import special import matplotlib.pyplot as plt Note the underscore before &amp;lsquo;minimize&amp;rsquo; when importing from scipy.optimize; &amp;lsquo;_minimize&amp;rsquo; Also, i tested the functions from this link before doing this section, and found I had less trouble/it worked faster, if I imported &amp;lsquo;special&amp;rsquo; separately. The Rosenbrock function on the linked page was incorrect - you have to configure the colorbar first; I&amp;rsquo;ve posted alternate code but think it could be better.</description>
    </item>
    
    <item>
      <title>rv_continuous for Distribution with Parameters</title>
      <link>https://www.wikiod.com/scipy/rv_continuous-for-distribution-with-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scipy/rv_continuous-for-distribution-with-parameters/</guid>
      <description>Negative binomial on positive reals # from scipy.stats import rv_continuous import numpy class Neg_exp(rv_continuous): def _cdf(self, x, lamda): return 1-numpy.exp(-lamda*x) neg_exp = Neg_exp(name=&amp;quot;Negative exponential&amp;quot;, a=0) print (neg_exp.pdf(0,.5)) print (neg_exp.pdf(5,.5)) print (neg_exp.cdf(5,.5)) print (neg_exp.stats(0.5)) print (neg_exp.rvs(0.5)) It&amp;rsquo;s essential to define either _pdf or _cdf because scipy infers the parameters of the other function (that you do not define), and the order of these parameters in any functions calls that you make, from the your definition.</description>
    </item>
    
  </channel>
</rss>

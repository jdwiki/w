<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>racket Tutorial on </title>
    <link>https://www.wikiod.com/docs/racket/</link>
    <description>Recent content in racket Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/racket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with racket</title>
      <link>https://www.wikiod.com/racket/getting-started-with-racket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/getting-started-with-racket/</guid>
      <description>Racket # Racket is a full-spectrum programming language. It goes beyond Lisp and Scheme with dialects that support objects, types, laziness, and more. Racket enables programmers to link components written in different dialects, and it empowers programmers to create new, project-specific dialects. Racket&amp;rsquo;s libraries support applications from web servers and databases to GUIs and charts.
The offical, comprehensive and very well-written documentation can be found at http://docs.racket-lang.org/. On this site (Stack Overflow Documentation) you can find user-contributed examples.</description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://www.wikiod.com/racket/closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/closures/</guid>
      <description>From the StackOverflow closure tag:
A closure is a first-class function that refers to (closes over) variables from the scope in which it was defined. If the closure still exists after its defining scope ends, the variables it closes over will continue to exist as well.
It is sometimes useful to consider closures and objects as similar.
The venerable master Qc Na was walking with his student, Anton. Hoping to prompt the master into a discussion, Anton said &amp;ldquo;Master, I have heard that objects are a very good thing - is this true?</description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://www.wikiod.com/racket/higher-order-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/higher-order-functions/</guid>
      <description>Map # Map applies a function to every element of a list:
map: (a -&amp;gt; b) (listof a) -&amp;gt; (listof b) &amp;gt; (map (lambda (x) (* x 2)) (list 1 2 3 4 5) (list 2 4 6 8 10) &amp;gt; (map sqrt (list 1 4 9)) (list 1 2 3) &amp;gt; (map (lambda (x) (if (even? x) &amp;quot;even&amp;quot; &amp;quot;odd&amp;quot;)) (list 1 2 3)) (list &amp;quot;odd&amp;quot; &amp;quot;even&amp;quot; &amp;quot;odd&amp;quot;) Fold # Fold Right successively applies a two-argument function to every element in a list from left to right starting with a base value:</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.wikiod.com/racket/comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/comments/</guid>
      <description>The most common comment types are line and s-expression comment (using ; and #; respectively).
It is common to use from 1 to 3 semi colons depending on the type of comment made. Refer to ???
Single line comments # ; We make single line comments by writing out text after a semicolon Block comments # #| We make block comments like this |# S-expression comments # #;(define (commented-out-function x) (print (string-append &amp;quot;This entire &amp;quot; &amp;quot;s-expression is commented out!</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/racket/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/functions/</guid>
      <description>Syntax # (define (name arguments &amp;hellip;) body)
(function arguments &amp;hellip;)
Simple Function Calls # You can call a function in Racket by wrapping it in parentheses with the arguments after it. This looks like (function argument ...).
&amp;gt; (define (f x) x) &amp;gt; (f 1) 1 &amp;gt; (f &amp;quot;salmon&amp;quot;) &amp;quot;salmon&amp;quot; &amp;gt; (define (g x y) (string-append x y)) &amp;gt; (g &amp;quot;large&amp;quot; &amp;quot;salmon&amp;quot;) &amp;quot;largesalmon&amp;quot; &amp;gt; (g &amp;quot;large &amp;quot; &amp;quot;salmon&amp;quot;) &amp;quot;large salmon&amp;quot; Operations like + and * are functions as well, and they use the same syntax as calling f or g.</description>
    </item>
    
    <item>
      <title>Installation steps (Linux)</title>
      <link>https://www.wikiod.com/racket/installation-steps-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/installation-steps-linux/</guid>
      <description>Installation or Setup # Visit https://download.racket-lang.org and choose between the two available distributions:
Racket is the main distribution, it comes with several additional packages like math/number-theory as well as the DrRacket IDE. Minimal Racket is far smaller and comes only with the needed packages. Installation steps for Linux: # The installation is very simple. If you are used to this kind of thing, just follow these four steps. A more detailed step-by-step walkthrough is detailed afterwards, if you prefer.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://www.wikiod.com/racket/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/recursion/</guid>
      <description>Using define # #lang racket (define (sum-of-list l) (if (null? l) 0 (+ (car l) (sum-of-list (cdr l))))) (sum-of-list &#39;(1 2 3 4 5)) ;; =&amp;gt; 15 Using let-rec # #lang racket (letrec ([sum-of-list (λ (l) (if (null? l) 0 (+ (car l) (sum-of-list (cdr l)))))]) (sum-of-list &#39;(1 2 3 4 5))) ;; =&amp;gt; 15 It is possible to write mutually recursive functions with letrec:
#lang racket (letrec ([even? (λ (n) (if (= n 0) #t (odd?</description>
    </item>
    
    <item>
      <title>Installation steps (Windows)</title>
      <link>https://www.wikiod.com/racket/installation-steps-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/installation-steps-windows/</guid>
      <description>Installation or Setup # Visit https://download.racket-lang.org and choose between the two available distributions:
Racket is the main distribution, it comes with several additional packages like math/number-theory as well as the DrRacket IDE.
Minimal Racket is far smaller and comes only with the needed packages.
To run a program, open DrRacket, enter the program starting with #lang racket, and click the Run button near the top-right corner.
Installation steps for Windows: # The installation is very simple.</description>
    </item>
    
    <item>
      <title>Scribble</title>
      <link>https://www.wikiod.com/racket/scribble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/scribble/</guid>
      <description>Scribble is the tool used to create Racket&amp;rsquo;s documentation, and you can document your own packages with it too! When published, their documentation will appear at https://docs.racket-lang.org/, alongside the main Racket documentation.
Scribble is implemented as a language for the Racket platform. Scribble documents will therefore usually start with #lang scribble/manual
Paragraphs and sections # #lang scribble/manual @section{Introduction} First paragraph. Some text, some text, some text, some text, some text, some text.</description>
    </item>
    
    <item>
      <title>Installation steps (macOS)</title>
      <link>https://www.wikiod.com/racket/installation-steps-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/racket/installation-steps-macos/</guid>
      <description>Installation or Setup # Visit https://download.racket-lang.org and choose between the two available distributions:
Racket is the main distribution, it comes with several additional packages like math/number-theory as well as the DrRacket IDE. Minimal Racket is far smaller and comes only with the needed packages. Installation steps for macOS: # The installation is very simple. If you are used to this kind of thing, just go to https://download.racket-lang.org, then download and install the .</description>
    </item>
    
  </channel>
</rss>

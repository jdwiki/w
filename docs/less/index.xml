<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>less Tutorial on </title>
    <link>https://www.wikiod.com/docs/less/</link>
    <description>Recent content in less Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/less/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with less</title>
      <link>https://www.wikiod.com/less/getting-started-with-less/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/getting-started-with-less/</guid>
      <description>Installation or Setup # Less has been one of the most popular CSS Pre-processors, and has also been widely deployed in numerous front-end frameworks like Bootstrap, Foundation, etc. The Less Compiler is a JavaScript based compiler, which can be obtained from a Content Delivery Network:
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; You need to add your Less document before the JavaScript compiler is loaded, using &amp;lt;link /&amp;gt; tag. The Less stylesheet along with the compiler looks like this:</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/less/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/variables/</guid>
      <description>Introduction # In Less, unlike Sass or Shell, the variables are declared by having names starting with a @ symbol. For example:
@sky-blue: #87ceeb; body { background-color: @sky-blue; } The above example gives you:
body { background-color: #87ceeb; } Here it explains how to declare a variable and make use of them.
Operations in Colour # Consider the following example:
@sky-blue: #87ceeb; @dark-sky-blue: @sky-blue + #333; body { background-color: @dark-sky-blue; } The above example gives you:</description>
    </item>
    
    <item>
      <title>Color Operation Functions</title>
      <link>https://www.wikiod.com/less/color-operation-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/color-operation-functions/</guid>
      <description>Syntax # contrast(&amp;lt;reference-color&amp;gt;, &amp;lt;output-for-light-refcolor&amp;gt;, &amp;lt;output-for-dark-refcolor&amp;gt;, &amp;lt;threshold&amp;gt;) lighten(&amp;lt;reference-color&amp;gt;, &amp;lt;amount&amp;gt;, &amp;lt;method&amp;gt;) darken(&amp;lt;reference-color&amp;gt;, &amp;lt;amount&amp;gt;, &amp;lt;method&amp;gt;) Parameters # Parameter Details reference-color The color based on which the color operation should be performed. output-for-light-ref-color The color value that should be output when reference color is a dark color. This is optional and default value is white. output-for-dark-ref-color The color value that should be output when reference color is a light color. This is optional and default value is black.</description>
    </item>
    
    <item>
      <title>Mixins</title>
      <link>https://www.wikiod.com/less/mixins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/mixins/</guid>
      <description>Introduction # Mixins are similar to defining and calling functions. Say, if we need to create a repetitive style, mixins are handy. Mixins may or may not take parameters. For e.g.:
.default-round-borders { border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; } .round-borders (@radius) { border-radius: @radius; -moz-border-radius: @radius; -webkit-border-radius: @radius; } We have two types of declarations above. One takes in a parameter and the other doesn&amp;rsquo;t. Let&amp;rsquo;s see how this is being used somewhere:</description>
    </item>
    
    <item>
      <title>Parent selectors</title>
      <link>https://www.wikiod.com/less/parent-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/parent-selectors/</guid>
      <description>As at the time of writing (Aug &amp;lsquo;16), parent selector (&amp;amp;) always refers to the full parent selector chain right till the top most level. It cannot be used to select just the immediate parent or the root most ancestor alone.
That is, in the below code &amp;amp;#type1 would resolve to #demo-container .content#type1 and not just .content or just #demo-container.
#demo-container { padding: 4px; border: 1px solid gray; #heading { padding: 4px; font-size: 20px; } .</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://www.wikiod.com/less/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/loops/</guid>
      <description>Writing a for-each loop # A for-each loop in Less has the same key components as a for loop except for the following differences:
A variable which contains the list of items that has to be iterated over. An extract() function to extract each item in the variable based on the loop&amp;rsquo;s index. A length() function to calculate the length of the array (that is, the no of items in the list) and use it in the primary mixin call (for [initialization]).</description>
    </item>
    
    <item>
      <title>Guards (for writing conditional mixins)</title>
      <link>https://www.wikiod.com/less/guards-for-writing-conditional-mixins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/guards-for-writing-conditional-mixins/</guid>
      <description>Syntax # Mixin with Guards .mixin-name(&amp;lt;arguments&amp;gt;) when &amp;lt;is-negation&amp;gt; (&amp;lt;ref-variable&amp;gt; &amp;lt;operator&amp;gt; &amp;lt;value&amp;gt;) CSS Guards &amp;lt;selector&amp;gt; when &amp;lt;is-negation&amp;gt; (&amp;lt;ref-variable&amp;gt; &amp;lt;operator&amp;gt; &amp;lt;value&amp;gt;) Parameters # Parameter Details arguments The variables that are passed to the parametric mixin. Arguments are optional. is-negation This indicates whether the guard condition is a not condition or not. For example when not (@type = error) means the mixin will be used whenever the value of @type is not error. ref-variable This is the variable whose value determines which mixin&amp;rsquo;s properties should be applied to the element.</description>
    </item>
    
    <item>
      <title>Extend</title>
      <link>https://www.wikiod.com/less/extend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/less/extend/</guid>
      <description>This is related to the extend functionality of less, which was introduced in v1.4.0.
&amp;ldquo;Extend is a Less pseudo-class which merges the selector it is put on with ones that match what it references.&amp;rdquo; [ref]
Syntax # selector1:extend([css selector](https://www.wikiod.com/css/selectors#Basic selectors)){ //other styles go here} selector1{ &amp;amp;:extend([css selector](https://www.wikiod.com/css/selectors#Basic selectors))); //other styles go here } Parameters # Parameter Details [css selector](https://www.wikiod.com/css/selectors#Basic selectors) This is any generic CSS selector, and may include .class, #id, ::pseudoElements, etc Basic Example # The following Less:</description>
    </item>
    
  </channel>
</rss>

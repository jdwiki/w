<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shiny Tutorial on </title>
    <link>https://www.wikiod.com/docs/shiny/</link>
    <description>Recent content in shiny Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with shiny</title>
      <link>https://www.wikiod.com/shiny/getting-started-with-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shiny/getting-started-with-shiny/</guid>
      <description>Simple App # Each shiny app contains two parts: A user interface definition (UI) and a server script (server). This example shows how you can print &amp;ldquo;Hello world&amp;rdquo; from UI or from server.
UI.R
In the UI you can place some view objects (div, inputs, buttons, etc).
library(shiny) # Define UI for application print &amp;quot;Hello world&amp;quot; shinyUI( # Create bootstrap page fluidPage( # Paragraph &amp;quot;Hello world&amp;quot; p(&amp;quot;Hello world&amp;quot;), # Create button to print &amp;quot;Hello world&amp;quot; from server actionButton(inputId = &amp;quot;Print_Hello&amp;quot;, label = &amp;quot;Print_Hello World&amp;quot;), # Create position for server side text textOutput(&amp;quot;Server_Hello&amp;quot;) ) ) Server.</description>
    </item>
    
    <item>
      <title>Javascript API</title>
      <link>https://www.wikiod.com/shiny/javascript-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shiny/javascript-api/</guid>
      <description>Syntax # session$sendCustomMessage(name,list of parameters) Shiny.addCustomMessageHandler(name, JS function that accepts list of parameters) Shiny.onInputChange(name,value) Sending data from server to client # In many instances, you will want to send data from the R server to the JS client. Here is a very simple example:
library(shiny) runApp( list( ui = fluidPage( tags$script( &amp;quot;Shiny.addCustomMessageHandler(&#39;message&#39;, function(params) { alert(params); });&amp;quot; ), actionButton(&amp;quot;btn&amp;quot;,&amp;quot;Press Me&amp;quot;) ), server = function(input, output, session) { observeEvent(input$btn,{ randomNumber &amp;lt;- runif(1,0,100) session$sendCustomMessage(&amp;quot;message&amp;quot;,list(paste0(randomNumber,&amp;quot; is a random number!</description>
    </item>
    
    <item>
      <title>reactive, reactiveValue and eventReactive, observe and observeEvent in Shiny</title>
      <link>https://www.wikiod.com/shiny/reactive-reactivevalue-and-eventreactive-observe-and-observeevent-in-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shiny/reactive-reactivevalue-and-eventreactive-observe-and-observeevent-in-shiny/</guid>
      <description>reactive, reactiveValue and eventReactive are various kinds of reactive expressions in Shiny. They yield output which can be used as input in other expressions, which will in turn take a dependency on the reactive expression.
observe and observeEvent are similar to reactive expressions. The big difference is that the observers do not yield any output and thus they are only useful for their side effects.
Examples of their use are given in this document.</description>
    </item>
    
    <item>
      <title>Upload Data to shiny</title>
      <link>https://www.wikiod.com/shiny/upload-data-to-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shiny/upload-data-to-shiny/</guid>
      <description>Uploading csv files to Shiny # It is also possible to have an user upload csv&amp;rsquo;s to your Shiny app. The code below shows a small example on how this can be achieved. It also includes a radioButton input so the user can interactively choose the separator to be used.
library(shiny) library(DT) # Define UI ui &amp;lt;- shinyUI(fluidPage( fileInput(&#39;target_upload&#39;, &#39;Choose file to upload&#39;, accept = c( &#39;text/csv&#39;, &#39;text/comma-separated-values&#39;, &#39;.csv&#39; )), radioButtons(&amp;quot;separator&amp;quot;,&amp;quot;Separator: &amp;quot;,choices = c(&amp;quot;;&amp;quot;,&amp;quot;,&amp;quot;,&amp;quot;:&amp;quot;), selected=&amp;quot;;&amp;quot;,inline=TRUE), DT::dataTableOutput(&amp;quot;sample_table&amp;quot;) ) ) # Define server logic server &amp;lt;- shinyServer(function(input, output) { df_products_upload &amp;lt;- reactive({ inFile &amp;lt;- input$target_upload if (is.</description>
    </item>
    
    <item>
      <title>How to write MCVE (Minimal, Complete, and Verifiable example) Shiny apps</title>
      <link>https://www.wikiod.com/shiny/how-to-write-mcve-minimal-complete-and-verifiable-example-shiny-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shiny/how-to-write-mcve-minimal-complete-and-verifiable-example-shiny-apps/</guid>
      <description>If you are having issues with your Shiny apps, it is good practice to create an app that illustrates your point. This app should be as simple as possible while still reflecting your problem. This means using simple datasets, self-explanatory naming (especially for I/O IDs) and replacing plots with simpler ones.
It is also advisable to create your MCVE in a way that as little non-standard libraries as possible are required.</description>
    </item>
    
  </channel>
</rss>

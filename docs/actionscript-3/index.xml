<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ActionScript 3 Tutorial on </title>
    <link>https://www.wikiod.com/docs/actionscript-3/</link>
    <description>Recent content in ActionScript 3 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/actionscript-3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with ActionScript 3</title>
      <link>https://www.wikiod.com/actionscript-3/getting-started-with-actionscript-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/getting-started-with-actionscript-3/</guid>
      <description>Installation Overview # ActionScript 3 can be used by installing the Adobe AIR SDK or Apache Flex SDK or as part Adobe&amp;rsquo;s Animate CC product (formerly known as Flash Professional).
Adobe Animate CC is a professional software solution that can be used to create AS3 projects using visual tools - once installed, no further steps are necessary to begin creating AS3 projects.
The AIR SDK and Flex SDK can be used with command line tools or with various third party IDEs.</description>
    </item>
    
    <item>
      <title>Random Value Generation</title>
      <link>https://www.wikiod.com/actionscript-3/random-value-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/random-value-generation/</guid>
      <description>Random number between min and max values # function randomMinMax(min:Number, max:Number):Number { return (min + (Math.random() * Math.abs(max - min))); } This function is called by passing a range of minimum and maximum values.
Example:
randomMinMax(1, 10); Example outputs:
1.661770915146917 2.5521070677787066 9.436270965728909 Create a random color # To get any random color:
function randomColor():uint { return Math.random() * 0xFFFFFF; } If you need more control over the red, green and blue channels:</description>
    </item>
    
    <item>
      <title>Sending and Receiving Data From Servers</title>
      <link>https://www.wikiod.com/actionscript-3/sending-and-receiving-data-from-servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/sending-and-receiving-data-from-servers/</guid>
      <description>Making a request from Flash # The URLRequest and URLLoader classes work together to make requests from Flash to external resources. The URLRequest defines information about the request e.g. the request body and the request method type, and the URLLoader references this to perform the actual request and provide a means of being notified when a response is received from the resource.
Example:
var request:URLRequest = new URLRequest(&#39;http://stackoverflow.com&#39;); var loader:URLLoader = new URLLoader(); loader.</description>
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://www.wikiod.com/actionscript-3/singleton-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/singleton-pattern/</guid>
      <description>The singleton pattern has the goal to allow only one instance of a class to exists at any given time.
Preventing the direct instantiation via constructor is usually prevent by making it private. However, this is not possible in As3 and thus other ways to control the number of instances have to be used.
Singleton enforcer via private instance # In this approach, the single is accessed via the static method:</description>
    </item>
    
    <item>
      <title>Understanding the Error 1009 Cannot access a property or method of a null object reference</title>
      <link>https://www.wikiod.com/actionscript-3/understanding-the-error-1009-cannot-access-a-property-or-method-of-a-null-object-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/understanding-the-error-1009-cannot-access-a-property-or-method-of-a-null-object-reference/</guid>
      <description>An error 1009 is a general error that arises when you are trying to receive a value out of a variable or property that has a value of null. The examples provided expose various cases where this error arises, together with some recommendations on how to mitigate the error.
The dreaded and often asked &amp;ldquo;Error 1009: Cannot access a property or method of a null object reference&amp;rdquo; is a signal that some of the data appears null, but is tried to be used as a populated object.</description>
    </item>
    
    <item>
      <title>Bitmap Manipulation and Filtering</title>
      <link>https://www.wikiod.com/actionscript-3/bitmap-manipulation-and-filtering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/bitmap-manipulation-and-filtering/</guid>
      <description>In this topic you can learn a bit about manipulating bitmapdata and visual processing, working with pixels and getting started with effects filters.
Threshold (monochrome) effect # required: # understanding Bitmap and Bitmap data what is threshold
This adjustment takes all the pixels in an image andâ€¦pushes them to either pure white or pure black
what we have to do
here is a Live Demo of this example with some additional changes like using a UI to changing threshold level in runtime.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming</title>
      <link>https://www.wikiod.com/actionscript-3/object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/object-oriented-programming/</guid>
      <description>Method overriding # When you extend a class, you can override methods that the inherited class defines using the override keyword:
public class Example { public function test():void { trace(&#39;It works!&#39;); } } public class AnotherExample extends Example { public override function test():void { trace(&#39;It still works!&#39;); } } Example:
var example:Example = new Example(); var another:AnotherExample = new AnotherExample(); example.test(); // Output: It works! another.test(); // Output: It still works!</description>
    </item>
    
    <item>
      <title>Optimizing Performance</title>
      <link>https://www.wikiod.com/actionscript-3/optimizing-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/optimizing-performance/</guid>
      <description>Vectors instead of Arrays # Flash Player 10 introduced the Vector.&amp;lt;*&amp;gt; generic list type that was faster than the Array. However, this is not entirely true. Only the following Vector types are faster than the Array counterparts, due to the way they are implemented in Flash Player.
Vector.&amp;lt;int&amp;gt; - Vector of 32-bit integers Vector.&amp;lt;uint&amp;gt; - Vector of 32-bit unsigned integers Vector.&amp;lt;Double&amp;gt; - Vector of 64-bit floats In all other cases, using an Array will be more performant than using Vectors, for all operations (creation, manipulation, etc).</description>
    </item>
    
    <item>
      <title>Working with Sound</title>
      <link>https://www.wikiod.com/actionscript-3/working-with-sound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/working-with-sound/</guid>
      <description>Syntax # Sound.play(startTime:Number = 0, loops:int = 0, sndTransform:flash.media:SoundTransform = null):SoundChannel // Plays a loaded sound, returns a SoundChannel Stop Playing a Sound # import flash.net.URLRequest; import flash.media.Sound; import flash.media.SoundChannel; import flash.events.Event; var snd:Sound; = new Sound(); var sndChannel:SoundChannel var sndTimer:Timer; snd.addEventListener(Event.COMPLETE, soundLoaded); snd.load(new URLRequest(&amp;quot;soundFile.mp3&amp;quot;)); //load after adding the complete event function soundLoaded(e:Event):void { sndChannel = snd.play(); //Create a timer to wait 1 second sndTimer = new Timer(1000, 1); sndTimer.addEventListener(TimerEvent.TIMER, stopSound, false, 0, true); sndTimer.</description>
    </item>
    
    <item>
      <title>Drawing Bitmaps</title>
      <link>https://www.wikiod.com/actionscript-3/drawing-bitmaps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/actionscript-3/drawing-bitmaps/</guid>
      <description>Draw a display object into bitmap data # A helper function to create a bitmap copy of an object. This can be used to convert vector objects, text or complex nested Sprite&amp;rsquo;s to a flattened bitmap.
function makeBitmapCopy(displayObj:IBitmapDrawable, transparent:Boolean = false, bgColor:uint = 0x00000000, smooth:Boolean = true):Bitmap { //create an empty bitmap data that matches the width and height of the object you wish to draw var bmd:BitmapData = new BitmapData(displayObj.</description>
    </item>
    
  </channel>
</rss>

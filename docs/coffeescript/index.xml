<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coffeescript Tutorial on </title>
    <link>https://www.wikiod.com/docs/coffeescript/</link>
    <description>Recent content in coffeescript Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with coffeescript</title>
      <link>https://www.wikiod.com/coffeescript/getting-started-with-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/getting-started-with-coffeescript/</guid>
      <description>Hello Word (Linux and OS X) # CoffeeScript is a scripting language that compiles into JavaScript. Any code written in CoffeeScript can be translated into JavaScript with a one-to-one matching.
CoffeeScript can be easily installed with npm:
$ mkdir coffee &amp;amp;&amp;amp; cd coffee $ npm install -g coffee-script The -g flag will install CoffeeScript globally, so it will always be available on your CLI. Don&amp;rsquo;t use the -g flag if you want a local installation:</description>
    </item>
    
    <item>
      <title>Destructuring Assignment</title>
      <link>https://www.wikiod.com/coffeescript/destructuring-assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/destructuring-assignment/</guid>
      <description>Named Function Parameters # CoffeeScript allows to deconstruct objects and arrays when they are fed to functions as arguments.
A function that leverages deconstruction will specify in its signature all the fields that are expected within its body. When invoking such function, an object or array containing all the expected fields has to be passed as argument.
drawRect = ({x, y, width, height}) -&amp;gt; # here you can use the passed parameters # color will not be visible here!</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/coffeescript/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/arrays/</guid>
      <description>Mapping values # You want to convert all elements in an array to some other form.
For example, you have
theUsers = [ {id: 1, username: &#39;john&#39;} {id: 2, username: &#39;lexy&#39;} {id: 3, username: &#39;pete&#39;} ] and you want to have an array of usernames only, i.e.
[&#39;john&#39;, &#39;lexy&#39;, &#39;pete&#39;] Method 1 - using .map # theUsernames = theUsers.map (user) -&amp;gt; user.username Method 2 - using comprehension # theUsernames = (user.</description>
    </item>
    
    <item>
      <title>Conditionals</title>
      <link>https://www.wikiod.com/coffeescript/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/conditionals/</guid>
      <description>if, if / then, if / else, unless, ternary operator # The most basic instance of an if construct evaluates a condition and executes some code according to the condition outcome. If the condition returns true, the code within the conditional is executed.
counter = 10 if counter is 10 console.log &#39;This will be executed!&#39; The if construct can be enriched with an else statement. The code within the else statement will be executed whenever the if condition is not met.</description>
    </item>
    
    <item>
      <title>Pro&#39;s &amp; Con&#39;s of using Coffeescript</title>
      <link>https://www.wikiod.com/coffeescript/pros--cons-of-using-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/pros--cons-of-using-coffeescript/</guid>
      <description>Pros # Simplicity # Probably the best part of CoffeeScript is its simplicity. CoffeeScript allows for a more concise and simplistic syntax than plain JavaScript. One simple but surprisingly time-saving feature is that CoffeeScript has no need for ; or {}, eliminating the need to spend hours finding out the place from which a } is missing.
Loops # Creating a loop that outputs the value of each item in an array unless the value is &amp;ldquo;monkey&amp;rdquo; in CoffeeScript is very easy.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/coffeescript/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/functions/</guid>
      <description>Small Arrow functions # # creates a function with no arguments, which returns 3 get_three = () -&amp;gt; return 3 # same as above get_three = -&amp;gt; 3 # creates a function with arguments add_three = (num) -&amp;gt; num + 3 # multiple arguments, etc. add = (a, b) -&amp;gt; a + b </description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://www.wikiod.com/coffeescript/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/classes/</guid>
      <description>Classes, Inheritance, and Super # CoffeeScript provides a basic class structure that allows you to name your class, set the superclass, assign prototypal properties, and define the constructor, in a single assignable expression.
Small example below:
class Animal constructor: (@name) -&amp;gt; move: (meters) -&amp;gt; alert @name + &amp;quot; moved #{meters}m.&amp;quot; class Snake extends Animal move: -&amp;gt; alert &amp;quot;Slithering...&amp;quot; super 5 class Horse extends Animal move: -&amp;gt; alert &amp;quot;Galloping...&amp;quot; super 45 sam = new Snake &amp;quot;Sammy the Python&amp;quot; tom = new Horse &amp;quot;Tommy the Palomino&amp;quot; sam.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://www.wikiod.com/coffeescript/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/loops/</guid>
      <description>Looping a Function # The following codes will output the numbers 1 through 10 in the console, although console.log could be any function that accepts an input.
Method 1 - Standard # for x in [1..10] console.log x Method 2 - Compact # console.log x for x in [1..10] </description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.wikiod.com/coffeescript/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/operators/</guid>
      <description>Existential Operator # CoffeeScript&amp;rsquo;s existential operator ? check if the variable is null or undefined.
1. Check for null or undefined.
alert &amp;quot;Hello CoffeeScript!&amp;quot; if myVar? javascript equivalent:
if (typeof myVar !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; myVar !== null) { alert(&amp;quot;Hello CoffeeScript!&amp;quot;); } 2. Safer conditional assignment
You can also use this operator safer conditional assignment
language = favoriteLanguage ? &amp;quot;coffeescript&amp;quot; javascript equivalent:
language = typeof favoriteLanguage !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; favoriteLanguage !== null ?</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/coffeescript/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/coffeescript/strings/</guid>
      <description>Block strings # Block strings can be used to hold formatted or indentation-sensitive text (or, if you just don&amp;rsquo;t feel like escaping quotes and apostrophes). The indentation level that begins the block is maintained throughout, so you can keep it all aligned with the body of your code.
html = &amp;quot;&amp;quot;&amp;quot; &amp;lt;strong&amp;gt; cup of coffeescript &amp;lt;/strong&amp;gt; &amp;quot;&amp;quot;&amp;quot; Multiline strings # Multiline strings are allowed in CoffeeScript. Lines are joined by a single space unless they end with a backslash.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net-core Tutorial on </title>
    <link>https://www.wikiod.com/docs/dotnet-core/</link>
    <description>Recent content in .net-core Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with .net-core</title>
      <link>https://www.wikiod.com/dotnet-core/getting-started-with-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/getting-started-with-net-core/</guid>
      <description>Building a Hello World Sample Application # Create an empty directory somewhere &amp;hellip;
mkdir HelloWorld cd HelloWorld Then use the built in scaffolding technology to create a Hello World sample
dotnet new console -o This command creates two files:
HelloWorld.csproj describes the project dependencies, settings, and Target Framework Program.cs which defines the source code for the main entry point and the console emitting of &amp;ldquo;Hello World&amp;rdquo;. If the dotnet new command fails, make sure you have installed .</description>
    </item>
    
    <item>
      <title>Understanding System.Runtime vs. mscorlib</title>
      <link>https://www.wikiod.com/dotnet-core/understanding-systemruntime-vs-mscorlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/understanding-systemruntime-vs-mscorlib/</guid>
      <description>Every .NET library and programming language utilize a set of elementary data types like System.Int32, System.Object, System.Type or System.Uri. These data types form the base of all other structures including all custom written .NET libraries. All these types are hosted in a base library, which is either mscorlib or System.Runtime.
The libraries which can be used with .NET Core are based on System.Runtime core library while for the .NET Framework (the Windows component) they are based on mscorlib.</description>
    </item>
    
    <item>
      <title>Components and Versioning in .NET Core</title>
      <link>https://www.wikiod.com/dotnet-core/components-and-versioning-in-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/components-and-versioning-in-net-core/</guid>
      <description>This document covers the different components that make up a .NET Core distribution and how they are versioned. This document currently covers the 1.x releases.
How components in .NET Core are versioned.
Components # .NET Core consists of multiple components that are each versioned independently and can often be mixed and matched.
Shared Framework. This contains the APIs and the Virtual Machine and other runtime services needed for running .NET Core applications.</description>
    </item>
    
    <item>
      <title>The global.json</title>
      <link>https://www.wikiod.com/dotnet-core/the-globaljson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/the-globaljson/</guid>
      <description>The global.json file is extremely powerful and unique to .NET Core and ASP.NET Core applications.
Schema # Schema store:
{ &amp;quot;title&amp;quot;: &amp;quot;JSON schema for the ASP.NET global configuration files&amp;quot;, &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;additionalProperties&amp;quot;: true, &amp;quot;required&amp;quot;: [ &amp;quot;projects&amp;quot; ], &amp;quot;properties&amp;quot;: { &amp;quot;projects&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A list of project folders relative to this file.&amp;quot;, &amp;quot;items&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } }, &amp;quot;packages&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;The location to store packages&amp;quot; }, &amp;quot;sdk&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Specify information about the SDK.</description>
    </item>
    
    <item>
      <title>Building libraries with .NET Core</title>
      <link>https://www.wikiod.com/dotnet-core/building-libraries-with-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/building-libraries-with-net-core/</guid>
      <description>Platform-specific dependencies # You can specify different dependencies for each platforms:
&amp;quot;net45&amp;quot;: { &amp;quot;frameworkAssemblies&amp;quot;: { &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } }, &amp;quot;netstandard1.3&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0-rc2&amp;quot; } }, &amp;quot;netstandard1.4&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } } When this project is compiled and packed, each framework target will use a different set of dependencies:
net45 (projects targeting .NET 4.5+) will use the System.Linq assembly from the GAC. netstandard1.3 (.</description>
    </item>
    
    <item>
      <title>.NET Core with Docker</title>
      <link>https://www.wikiod.com/dotnet-core/net-core-with-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/net-core-with-docker/</guid>
      <description>Fill with examples of using Docker on .NET Core platform, official base images for .NET Core application and self-hosted .NET Core app as well
Dockerfile sample # .NET Core app should be published using dotnet publish
FROM microsoft/dotnet:latest COPY bin/Debug/netcoreapp1.0/publish/ /root/ EXPOSE 5000 ENTRYPOINT dotnet /root/sampleapp.dll </description>
    </item>
    
    <item>
      <title>.NET Core command line interface</title>
      <link>https://www.wikiod.com/dotnet-core/net-core-command-line-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/net-core-command-line-interface/</guid>
      <description>Creating a NuGet package # To create a NuGet package from a project, run this command from a directory that contains project.json:
dotnet pack The resulting .nupkg file will be named and versioned according to the properties in project.json. If there are multiple frameworks targeted in the project file, the package will support all of them.
Publish and run a .NET Core project # Go to the project.json directory and publish:</description>
    </item>
    
    <item>
      <title>Installing .NET Core on Linux</title>
      <link>https://www.wikiod.com/dotnet-core/installing-net-core-on-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/installing-net-core-on-linux/</guid>
      <description>Generic installation for Linux distributions # If you have one of the supported Linux distributions, you can follow the steps on the .NET Core website: https://www.microsoft.com/net
If you have an unsupported distribution:
Download the .NET Core SDK from the links, picking the distribution closer to the used one.
https://www.microsoft.com/net/download
If you have support for deb packages, you can install Ubuntu/Debian packages.
If you have support for yum packages, you can install Fedora packages.</description>
    </item>
    
    <item>
      <title>Getting started with appsetting.json</title>
      <link>https://www.wikiod.com/dotnet-core/getting-started-with-appsettingjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dotnet-core/getting-started-with-appsettingjson/</guid>
      <description>If you need more info, you can go and see official microsoft documentation
Simple configuration # Add this text to appsettings.json
{ &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: 2, &amp;quot;subsectionKey&amp;quot;: { &amp;quot;suboption1&amp;quot;: &amp;quot;subvalue1&amp;quot; } } Now you can use this configuration in your app, in the way like this
public class Program { static public IConfigurationRoot Configuration { get; set; } public static void Main(string[] args = null) { var builder = new ConfigurationBuilder() .</description>
    </item>
    
  </channel>
</rss>

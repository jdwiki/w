<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>datatables Tutorial on </title>
    <link>https://www.wikiod.com/docs/datatables/</link>
    <description>Recent content in datatables Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/datatables/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with datatables</title>
      <link>https://www.wikiod.com/datatables/getting-started-with-datatables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/getting-started-with-datatables/</guid>
      <description>DataTables API # DataTables comes with an extensive API which is used to manipulate or obtain information about the DataTables on a page.
The API can be accessed in 3 ways:
var table = $(&#39;#tableid&#39;).DataTable(); //DataTable() returns an API instance immediately var table = $(&#39;#tableid&#39;).dataTable().api(); //dataTable() returns a jQuery object var table = new $.fn.dataTable.Api(&#39;#tableid&#39;); Once the object has been set, you can call any of the API functions on that object.</description>
    </item>
    
    <item>
      <title>Server Side Data Processing</title>
      <link>https://www.wikiod.com/datatables/server-side-data-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/server-side-data-processing/</guid>
      <description>DataTables 1.10+ Serverside Processing # Example Table
There are several ways to inject your data into DataTables. Serverside Processing is just one method. In this manner, DataTables has a pre-configured endpoint to retrieve data from, and that endpoint is responsible for accepting all paging/filtering/sorting requests that DataTables applies. There are a variety of pros and cons to this versus sending your complete dataset back from the server and letting DataTables do it all client-side depending on your use case.</description>
    </item>
    
    <item>
      <title>Add export buttons to table in Bootstrap 4</title>
      <link>https://www.wikiod.com/datatables/add-export-buttons-to-table-in-bootstrap-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/add-export-buttons-to-table-in-bootstrap-4/</guid>
      <description>With the datatables plugin you can add export buttons to your table.
You can export your table data to excel, pdf or copy it to the clipboard.
This manual is intended for the bootstrap 4 framework.
Add buttons to table # In your JS File add this option to your datatable:
buttons: [ &#39;excel&#39;, &#39;pdf&#39;, &#39;copy&#39; ] It will look like:
$(&#39;#yourTableID&#39;).DataTable({ buttons: [ &#39;excel&#39;, &#39;pdf&#39;, &#39;copy&#39; ] }); Add the necessary css files for the datatable with the buttons:</description>
    </item>
    
    <item>
      <title>datatables - Show Selected Rows option</title>
      <link>https://www.wikiod.com/datatables/datatables---show-selected-rows-option/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/datatables---show-selected-rows-option/</guid>
      <description>Show Selected Rows only # Its common for datatables to have a checkbox to select multiple rows. If the data is spread across multiple pages, it could be difficult for the user to view the records he selected. To enable the user view all the selected records in one go, we usually use a hyperlink that when clicked displays only the selected rows from the datatable. This link can be used a toggle between viewing selected records and all records.</description>
    </item>
    
    <item>
      <title>How to get the search value entered in Datatables programmatically?</title>
      <link>https://www.wikiod.com/datatables/how-to-get-the-search-value-entered-in-datatables-programmatically/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/how-to-get-the-search-value-entered-in-datatables-programmatically/</guid>
      <description>Example # This is the code to filter the Datatables [1.10.7] by value programmatically, you can find it on official documentation.
function setFilterValue(datatable, value){ if(datatable !== undefined){ datatable .columns(0) .search(value) .draw(); } } This is the code to get the value by the previous search.
function getFilterValue(datatable){ var value; if(datatable !== undefined){ value = datatable .settings()[0] .oSavedState .columns[0] .search.search; } return value; } This approach is useful when you have the cache active (&amp;ldquo;stateSave&amp;rdquo;: true) and you need to know the previous search value after reloaded the page.</description>
    </item>
    
    <item>
      <title>datatables search input box for a realtime search</title>
      <link>https://www.wikiod.com/datatables/datatables-search-input-box-for-a-realtime-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/datatables-search-input-box-for-a-realtime-search/</guid>
      <description>Search input box for progressive search on the datatable # Below is an example for implementing a Search input box that helps users to search the occurances of a particular value across the datatable.
In the below example, #report is the div id of the div that contains the search input box. This function is called as soon as the user enters a value in this input box. Since there can be many occurances of a single character, we call the actual search function only when more than 1 character is entered in the search box.</description>
    </item>
    
    <item>
      <title>Migration from &lt;1.10 to 1.10 and above</title>
      <link>https://www.wikiod.com/datatables/migration-from-110-to-110-and-above/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/datatables/migration-from-110-to-110-and-above/</guid>
      <description>Datatables 1.10.x is the latest release as of now. Though it is backwards compatible to the previous versions (1.9 etc.), it is highly advisable to use the latest version which directly returns a datatable api object.
Another major change, that is the most visible, is the change from Hungarian Notation to camelCase
Syntax # The only major syntax change is the usage of camelCase everywhere instead of the Hungarian Notation. A more detailed guide can be found here which involves the conversion of parameters in &amp;lt;1.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/erlang/</link>
    <description>Recent content in Erlang Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Erlang Language</title>
      <link>https://www.wikiod.com/erlang/getting-started-with-erlang-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/getting-started-with-erlang-language/</guid>
      <description>Hello World # There are two things you will need to know when writing a &amp;ldquo;hello world&amp;rdquo; application in Erlang:
The source code is written in the erlang programming language using the text editor of your choice The application is then executed in the erlang virtual machine. In this example we will interact with the erlang VM thorugh the erlang shell. First the application source code: # Create a new file hello.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/erlang/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/installation/</guid>
      <description>Build and Install Erlang/OTP on FreeBSD # The following examples show 3 main methods for installing Erlang/OTP on FreeBSD.
Method 1 - Pre-built Binary Package # Use pkg to install the pre-built binary package:
$ pkg install erlang Test your new installation:
$ erl Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false] Eshell V7.3.1 (abort with ^G) Method 2 - Build and install using the port collection (recommended) # Build and install the port as usual:</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.wikiod.com/erlang/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/data-types/</guid>
      <description>Every data type in erlang is called Term. It is a generic name that means any data type.
Numbers # In Erlang, numbers are either integers or floats. Erlang uses arbitrary-precision for integers (bignums), so their values are limited only by the memory size of your system.
1&amp;gt; 11. 11 2&amp;gt; -44. -44 3&amp;gt; 0.1. 0.1 4&amp;gt; 5.1e-3. 0.0051 5&amp;gt; 5.2e2. 520.0 Numbers can be used in various bases:
1&amp;gt; 2#101.</description>
    </item>
    
    <item>
      <title>Processes</title>
      <link>https://www.wikiod.com/erlang/processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/processes/</guid>
      <description>Creating Processes # We create a new concurrent process by calling the spawn function. The spawn function will get as parameter a function Fun that the process will evaluate. The return value of the spawn function is the created process identifier (pid).
1&amp;gt; Fun = fun() -&amp;gt; 2+2 end. #Fun&amp;lt;erl_eval.20.52032458&amp;gt; 2&amp;gt; Pid = spawn(Fun). &amp;lt;0.60.0&amp;gt; You can also use spawn/3 to start a process that will execute a specific function from a module: spawn(Module, Function, Args).</description>
    </item>
    
    <item>
      <title>Rebar3</title>
      <link>https://www.wikiod.com/erlang/rebar3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/rebar3/</guid>
      <description>Installing Rebar3 # Rebar3 is written in Erlang, so you need Erlang to run it. It is available as a binary that you can download and run. Just fetch the nightly build and give it execution permissions:
$ wget https://s3.amazonaws.com/rebar3/rebar3 &amp;amp;&amp;amp; chmod +x rebar3 Place this binary in a convenient place and add it to your path. For example, in a bin directory in your home:
$ mkdir ~/bin &amp;amp;&amp;amp; mv rebar3 ~/bin $ export PATH=~/bin:$PATH This last line should be put in your .</description>
    </item>
    
    <item>
      <title>Behaviours</title>
      <link>https://www.wikiod.com/erlang/behaviours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/behaviours/</guid>
      <description>Defining a behaviour # You can define your own behaviour by adding -callback directives in your module. For example, if modules implementing your behaviour need to have a foo function that takes an integer and returns an atom:
-module(my_behaviour). -callback foo(integer()) -&amp;gt; atom(). If you use this behaviour in another module, the compiler will warn if it does not export foo/1, and Dialyzer will warn if the types are not correct.</description>
    </item>
    
    <item>
      <title>Format Strings</title>
      <link>https://www.wikiod.com/erlang/format-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/format-strings/</guid>
      <description>Syntax # io:format(FormatString, Args) % write to standard output io:format(standard_error, FormatString, Args) % write to standard error io:format(F, FormatString, Args) % write to open file io_lib:format(FormatString, Args) % return an iolist Common control sequences in format strings # While there are many different control sequences for io:format and io_lib:format, most of the time you&amp;rsquo;ll use only three different ones: ~s, ~p and ~w.
~s # The ~s is for strings.</description>
    </item>
    
    <item>
      <title>iolists</title>
      <link>https://www.wikiod.com/erlang/iolists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/iolists/</guid>
      <description>While an Erlang string is a list of integers, an &amp;ldquo;iolist&amp;rdquo; is a list whose elements are either integers, binaries or other iolists, e.g. [&amp;quot;foo&amp;quot;, $b, $a, $r, &amp;lt;&amp;lt;&amp;quot;baz&amp;quot;&amp;gt;&amp;gt;]. That iolist represents the string &amp;quot;foobarbaz&amp;quot;.
While you can convert an iolist to a binary with iolist_to_binary/1, you often don&amp;rsquo;t need to, since Erlang library functions such as file:write_file/2 and gen_tcp:send/2 accept iolists as well as strings and binaries.
Syntax # -type iolist() :: maybe_improper_list(byte() | binary() | iolist(), binary() | []).</description>
    </item>
    
    <item>
      <title>gen_server behavior</title>
      <link>https://www.wikiod.com/erlang/gen_server-behavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/gen_server-behavior/</guid>
      <description>gen_server is an important feature of Erlang, and require some prerequisite to understand every aspect of this functionality:
Loop, recursion and state Spawning processes Message passing OTP principles A good way to learn more about a feature in Erlang is to directly read the source code from official github repository. gen_server behavior embed lot of useful information and interesting structure in its core.
gen_server is defined in gen_server.erl and its associated documentation can be find in stdlib Erlang documentation.</description>
    </item>
    
    <item>
      <title>NIFs</title>
      <link>https://www.wikiod.com/erlang/nifs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/erlang/nifs/</guid>
      <description>Example: current UNIX time # Here is a very simple example to illustrate how to write a NIF.
Directory structure:
nif_test ├── c_src │ ├── Makefile │ └── nif_test.c ├── rebar.config └── src ├── nif_test.app.src └── nif_test.erl This structure can be easily initialized using Rebar3:
$ rebar3 new lib nif_test &amp;amp;&amp;amp; cd nif_test &amp;amp;&amp;amp; rebar3 new cmake Contents of nif_test.c:
#include &amp;quot;erl_nif.h&amp;quot; #include &amp;quot;time.h&amp;quot; static ERL_NIF_TERM now(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_int(env, time(0)); } static ErlNifFunc nif_funcs[] = { {&amp;quot;now&amp;quot;, 0, now} }; ERL_NIF_INIT(nif_test,nif_funcs,NULL,NULL,NULL,NULL); Contents of nif_test.</description>
    </item>
    
  </channel>
</rss>

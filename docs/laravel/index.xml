<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel Tutorial on </title>
    <link>https://www.wikiod.com/docs/laravel/</link>
    <description>Recent content in Laravel Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Laravel</title>
      <link>https://www.wikiod.com/laravel/getting-started-with-laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/getting-started-with-laravel/</guid>
      <description>Welcome to Laravel tag documentation! # Laravel is a well-known PHP Framework. Here, you will learn all-about Laravel. Starting from as-simple-as knowing what Object-Oriented Programming is, to the advanced Laravel package development topic.
This, like every other Stackoverflow documentation tag, is community-driven documentation, so if you already have experiences on Laravel, share your knowledge by add your own topics or examples! Just don&amp;rsquo;t forget to consult our Contribution style guide on this topic remarks to know more about how to contribute and the style guide that we made to make sure we can give the best experience towards people that want to learn more about Laravel.</description>
    </item>
    
    <item>
      <title>Eloquent</title>
      <link>https://www.wikiod.com/laravel/eloquent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/eloquent/</guid>
      <description>The Eloquent is an ORM (Object Relational Model) included with the Laravel. It implements the active record pattern and is used to interact with relational databases.
Table naming
The convention is to use pluralised “snake_case” for table names and singular “StudlyCase” for model names. For example:
A cats table would have a Cat model A jungle_cats table would have a JungleCat model A users table would have a User model A people table would have a Person model Eloquent will automatically try to bind your model with a table that has the plural of the name of the model, as stated above.</description>
    </item>
    
    <item>
      <title>Deploy Laravel 5 App on Shared Hosting on Linux Server</title>
      <link>https://www.wikiod.com/laravel/deploy-laravel-5-app-on-shared-hosting-on-linux-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/deploy-laravel-5-app-on-shared-hosting-on-linux-server/</guid>
      <description>To get more information on deploying Laravel project on shared hosting, visit this Github repo.
Laravel 5 App on Shared Hosting on Linux Server # By default Laravel project&amp;rsquo;s public folder exposes the content of the app which can be requested from anywhere by anyone, the rest of the app code is invisible or inaccessible to anyone without proper permissions.
After developing the application on your development machine, it needs to be pushed to a production server so that it can be accessed through the internet from anywhere - right?</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/laravel/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/validation/</guid>
      <description>Parameters # Parameter Details required The field is required sometimes Run validation checks against a field only if that field is present in the input array email The input is a valid email max:value The input value should be below the maximum value unique:db_table_name The input value should be unique in the provided database table name accepted Yes / On / 1 true, useful for checking TOS active_url Must be a valid URL according to checkdnsrr after :date Field under validation must provide a value after the given date alpha The field under validation must be entirely alphabetic characters.</description>
    </item>
    
    <item>
      <title>Seeding</title>
      <link>https://www.wikiod.com/laravel/seeding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/seeding/</guid>
      <description>Database seeding allows you to insert data, general test data into your database. By default there is a DatabaseSeeder class under database/seeds.
Running seeders can be done with
php artisan db:seed Or if you only want to process a single class
php artisan db:seed --class=TestSeederClass As with all artisan commands, you have access to a wide array of methods which can be found in the api documentation
Creating a Seeder # To create seeders, you may use the make:seeder Artisan command.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/laravel/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/installation/</guid>
      <description>Installation # Laravel applications are installed and managed with Composer, a popular PHP dependency manager. There are two ways to create a new Laravel application.
Via Composer # $ composer create-project laravel/laravel [foldername] Or
$ composer create-project --prefer-dist laravel/laravel [foldername] Replace [foldername] with the name of the directory you want your new Laravel application installed to. It must not exist before installation. You may also need to add the Composer executable to your system path.</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/laravel/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/collections/</guid>
      <description>Syntax # $collection = collect([&amp;lsquo;Value1&amp;rsquo;, &amp;lsquo;Value2&amp;rsquo;, &amp;lsquo;Value3&amp;rsquo;]); // Keys default to 0, 1, 2, &amp;hellip;, Illuminate\Support\Collection provides a fluent and convenient interface to deal with arrays of data. You may well have used these without knowing, for instance Model queries that fetch multiple records return an instance of Illuminate\Support\Collection.
For up to date documentation on Collections you can find the official documentation here
Creating Collections # Using the collect() helper, you can easily create new collection instances by passing in an array such as:</description>
    </item>
    
    <item>
      <title>Blade Templates</title>
      <link>https://www.wikiod.com/laravel/blade-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/blade-templates/</guid>
      <description>Laravel supports Blade templating engine out of the box. The Blade templating engine allows us to create master templates and child templating loading content from master templates, we can have variables, loops and conditional statements inside the blade file.
Views: Introduction # Views, in an MVC pattern, contain the logic on how to present data to the user. In a web application, typically they are used to generate the HTML output that is sent back to users with each response.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/laravel/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/routing/</guid>
      <description>Basic Routing # Routing defines a map between HTTP methods and URIs on one side, and actions on the other. Routes are normally written in the app/Http/routes.php file.
In its simplest form, a route is defined by calling the corresponding HTTP method on the Route facade, passing as parameters a string that matches the URI (relative to the application root), and a callback.
For instance: a route to the root URI of the site that returns a view home looks like this:</description>
    </item>
    
    <item>
      <title>Database Migrations</title>
      <link>https://www.wikiod.com/laravel/database-migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/laravel/database-migrations/</guid>
      <description>Inside a database migration # Each migration should have an up() method and a down() method. The purpose of the up() method is to perform the required operations to put the database schema in its new state, and the purpose of the down() method is to reverse any operations performed by the up() method. Ensuring that the down() method correctly reverses your operations is critical to being able to rollback database schema changes.</description>
    </item>
    
  </channel>
</rss>

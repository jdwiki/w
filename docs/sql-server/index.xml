<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microsoft SQL Server Tutorial on </title>
    <link>https://www.wikiod.com/docs/sql-server/</link>
    <description>Recent content in Microsoft SQL Server Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sql-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Microsoft SQL Server</title>
      <link>https://www.wikiod.com/sql-server/getting-started-with-microsoft-sql-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/getting-started-with-microsoft-sql-server/</guid>
      <description>INSERT / SELECT / UPDATE / DELETE: the basics of Data Manipulation Language # Data Manipulation Language (DML for short) includes operations such as INSERT, UPDATE and DELETE:
-- Create a table HelloWorld CREATE TABLE HelloWorld ( Id INT IDENTITY, Description VARCHAR(1000) ) -- DML Operation INSERT, inserting a row into the table INSERT INTO HelloWorld (Description) VALUES (&#39;Hello World&#39;) -- DML Operation SELECT, displaying the table SELECT * FROM HelloWorld -- Select a specific column from table SELECT Description FROM HelloWorld -- Display number of records in the table SELECT Count(*) FROM HelloWorld -- DML Operation UPDATE, updating a specific row in the table UPDATE HelloWorld SET Description = &#39;Hello, World!</description>
    </item>
    
    <item>
      <title>String Functions</title>
      <link>https://www.wikiod.com/sql-server/string-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/string-functions/</guid>
      <description>List of string functions (Alphabetically sorted):
Ascii
Char
Charindex
Concat
Difference
Format
Left
Len
Lower
Ltrim
Nchar
Patindex
Quotename
Replace
Replicate
Reverse
Right
Rtrim
Soundex
Space
Str
String_escape
String_split
Stuff
Substring
Unicode
Upper
Quotename # Returns a Unicode string surrounded by delimiters to make it a valid SQL Server delimited identifier.
Parameters:
character string. A string of Unicode data, up to 128 characters (sysname). If an input string is longer than 128 characters function returns null.</description>
    </item>
    
    <item>
      <title>Join</title>
      <link>https://www.wikiod.com/sql-server/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/join/</guid>
      <description>In Structured Query Language (SQL), a JOIN is a method of linking two data tables in a single query, allowing the database to return a set that contains data from both tables at once, or using data from one table to be used as a Filter on the second table. There are several types of JOINs defined within the ANSI SQL standard.
Inner Join # Inner join returns only those records/rows that match/exists in both the tables based on one or more conditions (specified using ON keyword).</description>
    </item>
    
    <item>
      <title>Retrieve information about the database</title>
      <link>https://www.wikiod.com/sql-server/retrieve-information-about-the-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/retrieve-information-about-the-database/</guid>
      <description>As with other relational database systems, SQL Server exposes metadata about your databases.
This is provided through the ISO Standard INFORMATION_SCHEMA schema, or the SQL Server-specific sys catalog views.
Retrieve a List of all Stored Procedures # The following queries will return a list of all Stored Procedures in the database, with basic information about each Stored Procedure:
SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_TYPE = &#39;PROCEDURE&#39; The ROUTINE_NAME, ROUTINE_SCHEMA and ROUTINE_DEFINITION columns are generally the most useful.</description>
    </item>
    
    <item>
      <title>The STUFF Function</title>
      <link>https://www.wikiod.com/sql-server/the-stuff-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/the-stuff-function/</guid>
      <description>Parameters # Parameter Details character_expression the existing string in your data start_position the position in character_expression to delete length and then insert the replacement_string length the number of characters to delete from character_expression replacement_string the sequence of characters to insert in character_expression Using FOR XML to Concatenate Values from Multiple Rows # One common use for the FOR XML function is to concatenate the values of multiple rows.
Here&amp;rsquo;s an example using the Customers table:</description>
    </item>
    
    <item>
      <title>Stored Procedures</title>
      <link>https://www.wikiod.com/sql-server/stored-procedures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/stored-procedures/</guid>
      <description>In SQL Server, a procedure is a stored program that you can pass parameters into. It does not return a value like a function does. However, it can return a success/failure status to the procedure that called it.
Syntax # CREATE { PROCEDURE | PROC } [schema_name.]procedure_name [ @parameter [type_schema_name.] datatype [ VARYING ] [ = default ] [ OUT | OUTPUT | READONLY ] , @parameter [type_schema_name.] datatype [ VARYING ] [ = default ] [ OUT | OUTPUT | READONLY ] ] [ WITH { ENCRYPTION | RECOMPILE | EXECUTE AS Clause } ] [ FOR REPLICATION ] AS BEGIN [declaration_section] executable_section END; Creating and executing a basic stored procedure # Using the Authors table in the Library Database</description>
    </item>
    
    <item>
      <title>Dates</title>
      <link>https://www.wikiod.com/sql-server/dates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/dates/</guid>
      <description>Syntax # EOMONTH (start_date [, month_to_add ] ) as per https://msdn.microsoft.com/en-us/library/ms187819.aspx, DateTimes are only precise to 3ms.
Rounding of datetime Fractional Second Precision datetime values are rounded to increments of .000, .003, or .007 seconds, as shown in the following table.
User-specified value System stored value 01/01/98 23:59:59.999 1998-01-02 00:00:00.000 &amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash; 01/01/98 23:59:59.995 1998-01-01 23:59:59.997 01/01/98 23:59:59.996 01/01/98 23:59:59.997 01/01/98 23:59:59.998 &amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash; 01/01/98 23:59:59.992 1998-01-01 23:59:59.993 01/01/98 23:59:59.</description>
    </item>
    
    <item>
      <title>OVER Clause</title>
      <link>https://www.wikiod.com/sql-server/over-clause/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/over-clause/</guid>
      <description>Parameters # Parameter Details PARTITION BY The field(s) that follows PARTITION BY is the one that the &amp;lsquo;grouping&amp;rsquo; will be based on The OVER clause determines a windows or a subset of row within a query result set. A window function can be applied to set and compute a value for each row in the set. The OVER clause can be used with:
Ranking functions Aggregate functions so someone can compute aggregated values such as moving averages, cumulative aggregates, running totals, or a top N per group results.</description>
    </item>
    
    <item>
      <title>FOR XML PATH</title>
      <link>https://www.wikiod.com/sql-server/for-xml-path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/for-xml-path/</guid>
      <description>There are also several other FOR XML modes:
FOR XML RAW - Creates one &amp;lt;row&amp;gt; element per row. FOR XML AUTO - Attempts to heuristically autogenerate a hierarchy. FOR XML EXPLICIT - Provides more control over the shape of the XML, but is more cumbersome than FOR XML PATH. Using FOR XML PATH to concatenate values # The FOR XML PATH can be used for concatenating values into string. The example below concatenates values into a CSV string:</description>
    </item>
    
    <item>
      <title>Common Table Expressions</title>
      <link>https://www.wikiod.com/sql-server/common-table-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql-server/common-table-expressions/</guid>
      <description>Syntax # WITH cte_name [(column_name_1, column_name_2, &amp;hellip;)] AS (cte_expression) It is necessary to separate a CTE from the previous statement with a semi-colon (;) character.
i.e. ;WITH CommonTableName (...) SELECT ... FROM CommonTableName ...
A CTE&amp;rsquo;s scope is a single batch, and only downstream of its definition. A batch may contain multiple CTEs, and a CTE may reference another CTE defined earlier in the batch, but a CTE may not reference another CTE that is defined later in the batch.</description>
    </item>
    
  </channel>
</rss>

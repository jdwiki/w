<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xamarin.iOS Tutorial on </title>
    <link>https://www.wikiod.com/docs/xamarin-ios/</link>
    <description>Recent content in Xamarin.iOS Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xamarin-ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Xamarin.iOS</title>
      <link>https://www.wikiod.com/xamarin-ios/getting-started-with-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/getting-started-with-xamarinios/</guid>
      <description>Get Started in Visual Studio # Browse to File &amp;gt; New &amp;gt; Project to bring you up the New Project dialog. Navigate to Visual C# &amp;gt; iOS &amp;gt; iPhone and select Single View App: Give your app a Name and press OK to create your project. Select the Mac Agent icon from the toolbar, as illustrated below: Select the Mac that will build your application from the list (make sure you Mac is set up to receive the connection!</description>
    </item>
    
    <item>
      <title>Binding Swift Libraries</title>
      <link>https://www.wikiod.com/xamarin-ios/binding-swift-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/binding-swift-libraries/</guid>
      <description>An easy to follow guide that will lead you through the process of binding Swift .framework files for use in a Xamarin project.
When building a library in Xcode it has an option to include the swift libraries. Don’t! They will be included in your final app as NAME.app/Frameworks/LIBRARY.framework/Frameworks/libswift*.dylib but they must be included as NAME.app/Frameworks/libswift*.dylib
You can find this information elsewhere, but it’s worth mention: Don’t include Bitcode in the library.</description>
    </item>
    
    <item>
      <title>Resizing Methods for UIImage</title>
      <link>https://www.wikiod.com/xamarin-ios/resizing-methods-for-uiimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/resizing-methods-for-uiimage/</guid>
      <description>Resize Image - with Aspect Ratio # // resize the image to be contained within a maximum width and height, keeping aspect ratio public static UIImage MaxResizeImage(this UIImage sourceImage, float maxWidth, float maxHeight) { var sourceSize = sourceImage.Size; var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height); if (maxResizeFactor &amp;gt; 1) return sourceImage; var width = maxResizeFactor * sourceSize.Width; var height = maxResizeFactor * sourceSize.Height; UIGraphics.BeginImageContext(new CGSize(width, height)); sourceImage.Draw(new CGRect(0, 0, width, height)); var resultImage = UIGraphics.</description>
    </item>
    
    <item>
      <title>Touch ID</title>
      <link>https://www.wikiod.com/xamarin-ios/touch-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/touch-id/</guid>
      <description>Parameters # Column Column Cell Cell First, establish if the device is capable of accepting Touch ID input.
if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)) If it does then we can display the Touch ID UI by using:
context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler); There are three pieces of information we have to pass into EvaluatePolicy – the policy itself, a string explaining why authentication is necessary, and a reply handler. The reply handler tells the application what it should do in the case of a successful, or unsuccessful, authentication.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in Xamarin.iOS</title>
      <link>https://www.wikiod.com/xamarin-ios/concurrent-programming-in-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/concurrent-programming-in-xamarinios/</guid>
      <description>Manipulating UI from background threads # Background threads cannot modify the UI; almost all UIKit methods must be called on the main thread.
From a subclass of NSObject (including any UIViewController or UIView):
InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); From a standard C# class:
UIApplication.SharedApplication.InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); InvokeOnMainThread waits for your code running on the main thread to execute before continuing. If you don&amp;rsquo;t need to wait, use BeginInvokeOnMainThread.</description>
    </item>
    
    <item>
      <title>Calculating variable row height in GetHeightForRow</title>
      <link>https://www.wikiod.com/xamarin-ios/calculating-variable-row-height-in-getheightforrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/calculating-variable-row-height-in-getheightforrow/</guid>
      <description>Calculating row heights might be expensive and scrolling performance can suffer if you have larger amounts of data. In that scenario, override UITableViewSource.EstimatedHeight(UITableView, NSIndexPath) to quickly provide a number sufficient for rapid scrolling, e.g.,:
public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath) { return 44.0f; } Using GetHeightForRow # To set a custom row height, override UITableViewSource.GetHeightForRow(UITableView,NSIndexPath):
public class ColorTableDataSource : UITableViewSource { List&amp;lt;DomainClass&amp;gt; Model { get; set; } public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath) { var height = Model[indexPath.</description>
    </item>
    
    <item>
      <title>Auto Layout in Xamarin.iOS</title>
      <link>https://www.wikiod.com/xamarin-ios/auto-layout-in-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/auto-layout-in-xamarinios/</guid>
      <description>Adding Constraints With iOS 9+ Layout Anchors # // Since the anchor system simply returns constraints, you still need to add them somewhere. View.AddConstraints( new[] { someLabel.TopAnchor.ConstraintEqualTo(TopLayoutGuide.GetBottomAnchor()), anotherLabel.TopAnchor.ConstraintEqualTo(someLabel.BottomAnchor, 6), oneMoreLabel.TopAnchor.ConstraintEqualTo(anotherLabel.BottomAnchor, 6), oneMoreLabel.BottomAnchor.ConstraintGreaterThanOrEqualTo(BottomLayoutGuide.GetTopAnchor(), -10), } ); Adding Constraints Using Visual Format Language (VFL) # // Using Visual Format Language requires a special look-up dictionary of names&amp;lt;-&amp;gt;views. var views = new NSDictionary( nameof(someLabel), someLabel, nameof(anotherLabel), anotherLabel, nameof(oneMoreLabel), oneMoreLabel ); // It can also take a look-up dictionary for metrics (such as size values).</description>
    </item>
    
    <item>
      <title>Alerts</title>
      <link>https://www.wikiod.com/xamarin-ios/alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/alerts/</guid>
      <description>Display an Alert # For Alerts since iOS 8, you would use a UIAlertController but for versions before, you would have used a UIAlertView, which is now deprecated.
var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert); alert.AddAction(UIAlertAction.Create(otherTitle, UIAlertActionStyle.Destructive, (action) =&amp;gt; { // otherTitle(); })); alert.AddAction(UIAlertAction.Create(cancelTitle, UIAlertActionStyle.Cancel, null)); this.PresentViewController(alert, true, null); var alert = new UIAlertView (title, message, null, cancelTitle, otherTitle); alert.Clicked += (object sender, UIButtonEventArgs e) =&amp;gt; { if(e.ButtonIndex == 1) // otherTitle(); }; alert.</description>
    </item>
    
    <item>
      <title>Using Asset Catalogs</title>
      <link>https://www.wikiod.com/xamarin-ios/using-asset-catalogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/using-asset-catalogs/</guid>
      <description>Adding image assets to asset catalog # This is how the Asset Catalog in Xamarin Studio looks like,
As shown in above picture there are 5 types of assets you can create within the catalog.
I will cover only image set, because its the simplest one.
When you create a new image set. You will get options like this To add images to the catalog you can simply click on the dashed squares and select the image you want to set for particular option.</description>
    </item>
    
    <item>
      <title>Best practices for migrating from UILocalNotification to User Notifications framework</title>
      <link>https://www.wikiod.com/xamarin-ios/best-practices-for-migrating-from-uilocalnotification-to-user-notifications-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-ios/best-practices-for-migrating-from-uilocalnotification-to-user-notifications-framework/</guid>
      <description>UserNotifications # You will have to import UserNotifications
@import UserNotifications; 2.Request authorization for localNotification
let center = UNUserNotificationCenter.current() center.requestAuthorization([.alert, .sound]) { (granted, error) in // Enable or disable features based on authorization. } Now we will update the application icon badge number
@IBAction func triggerNotification(){ let content = UNMutableNotificationContent() content.title = NSString.localizedUserNotificationString(forKey: &amp;quot;Tom said:&amp;quot;, arguments: nil) content.body = NSString.localizedUserNotificationString(forKey: &amp;quot;Hello Mike！Let&#39;s go.&amp;quot;, arguments: nil) content.sound = UNNotificationSound.default() content.badge = UIApplication.shared().applicationIconBadgeNumber + 1; content.</description>
    </item>
    
  </channel>
</rss>

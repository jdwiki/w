<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust Tutorial on </title>
    <link>https://www.wikiod.com/docs/rust/</link>
    <description>Recent content in Rust Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Rust</title>
      <link>https://www.wikiod.com/rust/getting-started-with-rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/getting-started-with-rust/</guid>
      <description>Advanced usage of println! # println! (and its sibling, print!) provides a convenient mechanism for producing and printing text that contains dynamic data, similar to the printf family of functions found in many other languages. Its first argument is a format string, which dictates how the other arguments should be printed as text. The format string may contain placeholders (enclosed in {}) to specify that a substitution should occur:
// No substitution -- the simplest kind of format string println!</description>
    </item>
    
    <item>
      <title>Serde</title>
      <link>https://www.wikiod.com/rust/serde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/serde/</guid>
      <description>Serde is a popular serialization and deserialization framework for Rust, used to convert serialized data (e.g. JSON and XML) to Rust structures and vice versa.
Serde supports many formats, including: JSON, YAML, TOML, BSON, Pickle and XML.
Struct ↔ JSON # main.rs # extern crate serde; extern crate serde_json; // Import this crate to derive the Serialize and Deserialize traits. #[macro_use] extern crate serde_derive; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point { x: 1, y: 2 }; // Convert the Point to a packed JSON string.</description>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://www.wikiod.com/rust/traits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/traits/</guid>
      <description>Traits are a way of describing a &amp;lsquo;contract&amp;rsquo; that a struct must implement. Traits typically define method signatures but can also provide implementations based on other methods of the trait, providing the trait bounds allow for this.
For those familiar with object oriented programming, traits can be thought of as interfaces with some subtle differences.
Syntax # trait Trait { fn method(&amp;hellip;) -&amp;gt; ReturnType; &amp;hellip; }
trait Trait: Bound { fn method(&amp;hellip;) -&amp;gt; ReturnType; &amp;hellip; }</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://www.wikiod.com/rust/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/loops/</guid>
      <description>Syntax # loop { block } // infinite loop
while condition { block }
while let pattern = expr { block }
for pattern in expr { block } // expr must implement IntoIterator
continue // jump to the end of the loop body, starting a new iteration if necessary
break // stop the loop
&amp;lsquo;label: loop { block }
&amp;lsquo;label: while condition { block }
&amp;lsquo;label: while let pattern = expr { block }</description>
    </item>
    
    <item>
      <title>Rust Style Guide</title>
      <link>https://www.wikiod.com/rust/rust-style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/rust-style-guide/</guid>
      <description>Although there is no official Rust style guide, the following examples show the conventions adopted by most Rust projects. Following these conventions will align your project&amp;rsquo;s style with that of the standard library, making it easier for people to see the logic in your code.
The official Rust style guidelines were available in the rust-lang/rust repository on GitHub, but they have recently been removed, pending migration to the rust-lang-nursery/fmt-rfcs repository. Until new guidelines are published there, you should try to follow the guidelines in the rust-lang repository.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>https://www.wikiod.com/rust/pattern-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/pattern-matching/</guid>
      <description>Syntax # _ // wildcard pattern, matches anything¹ ident // binding pattern, matches anything and binds it to ident¹ ident @ pat // same as above, but allow to further match what is binded ref ident // binding pattern, matches anything and binds it to a reference ident¹ ref mut ident // binding pattern, matches anything and binds it to a mutable reference ident¹ &amp;amp;pat // matches a reference (pat is therefore not a reference but the referee)¹ &amp;amp;mut pat // same as above with a mutable reference¹ CONST // matches a named constant Struct { field1, field2 } // matches and deconstructs a structure value, see below the note about fields¹ EnumVariant // matches an enumeration variant EnumVariant(pat1, pat2) // matches a enumeration variant and the corresponding parameters EnumVariant(pat1, pat2, .</description>
    </item>
    
    <item>
      <title>Lifetimes</title>
      <link>https://www.wikiod.com/rust/lifetimes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/lifetimes/</guid>
      <description>Syntax # fn function&amp;lt;&amp;lsquo;a&amp;gt;(x: &amp;amp;&amp;lsquo;a Type)
struct Struct&amp;lt;&amp;lsquo;a&amp;gt; { x: &amp;amp;&amp;lsquo;a Type }
enum Enum&amp;lt;&amp;lsquo;a&amp;gt; { Variant(&amp;amp;&amp;lsquo;a Type) }
impl&amp;lt;&amp;lsquo;a&amp;gt; Struct&amp;lt;&amp;lsquo;a&amp;gt; { fn x&amp;lt;&amp;lsquo;a&amp;gt;(&amp;amp;self) -&amp;gt; &amp;amp;&amp;lsquo;a Type { self.x } }
impl&amp;lt;&amp;lsquo;a&amp;gt; Trait&amp;lt;&amp;lsquo;a&amp;gt; for Type
impl&amp;lt;&amp;lsquo;a&amp;gt; Trait for Type&amp;lt;&amp;lsquo;a&amp;gt;
fn function&amp;lt;F&amp;gt;(f: F) where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type)
struct Struct&amp;lt;F&amp;gt; where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { x: F }
enum Enum&amp;lt;F&amp;gt; where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { Variant(F) }
impl&amp;lt;F&amp;gt; Struct&amp;lt;F&amp;gt; where for&amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { fn x(&amp;amp;self) -&amp;gt; &amp;amp;F { &amp;amp;self.</description>
    </item>
    
    <item>
      <title>File IO</title>
      <link>https://www.wikiod.com/rust/file-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/file-io/</guid>
      <description>Read a file as a whole as a String # use std::fs::File; use std::io::Read; fn main() { let filename = &amp;quot;src/main.rs&amp;quot;; // Open the file in read-only mode. match File::open(filename) { // The file is open (no error). Ok(mut file) =&amp;gt; { let mut content = String::new(); // Read all the file content into a variable (ignoring the result of the operation). file.read_to_string(&amp;amp;mut content).unwrap(); println!(&amp;quot;{}&amp;quot;, content); // The file is automatically closed when is goes out of scope.</description>
    </item>
    
    <item>
      <title>Parallelism</title>
      <link>https://www.wikiod.com/rust/parallelism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/parallelism/</guid>
      <description>Parallelism is supported well by Rust&amp;rsquo;s standard library through various classes such as the std::thread module, channels and atomics. This section will guide you through the usage of these types.
Cross-thread communication with channels # Channels can be used to send data from one thread to another. Below is an example of a simple producer-consumer system, where the main thread produces the values 0, 1, &amp;hellip;, 9, and the spawned thread prints them:</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/rust/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rust/strings/</guid>
      <description>Unlike many other languages, Rust has two main string types: String (a heap-allocated string type) and &amp;amp;str (a borrowed string, which does not use extra memory). Knowing the difference and when to use each is vital to understand how Rust works.
Basic String manipulation # fn main() { // Statically allocated string slice let hello = &amp;quot;Hello world&amp;quot;; // This is equivalent to the previous one let hello_again: &amp;amp;&#39;static str = &amp;quot;Hello world&amp;quot;; // An empty String let mut string = String::new(); // An empty String with a pre-allocated initial buffer let mut capacity = String::with_capacity(10); // Add a string slice to a String string.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Tutorial on </title>
    <link>https://www.wikiod.com/docs/reactjs/</link>
    <description>Recent content in React Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with React</title>
      <link>https://www.wikiod.com/reactjs/getting-started-with-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/getting-started-with-react/</guid>
      <description>What is ReactJS? # ReactJS is an open-source, component based front end library responsible only for the view layer of the application. It is maintained by Facebook.
ReactJS uses virtual DOM based mechanism to fill in data (views) in HTML DOM. The virtual DOM works fast owning to the fact that it only changes individual DOM elements instead of reloading complete DOM every time
A React application is made up of multiple components, each responsible for outputting a small, reusable piece of HTML.</description>
    </item>
    
    <item>
      <title>React.createClass vs extends React.Component</title>
      <link>https://www.wikiod.com/reactjs/reactcreateclass-vs-extends-reactcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/reactcreateclass-vs-extends-reactcomponent/</guid>
      <description>Syntax # Case 1: React.createClass({ }) Case 2: class MyComponent extends React.Component { } React.createClass was deprecated in v15.5 and expected to be removed in v16. There is a drop-in replacement package for those that still require it. Examples using it should be updated.
Create React Component # Let&amp;rsquo;s explore the syntax differences by comparing two code examples.
React.createClass (deprecated) # Here we have a const with a React class assigned, with the render function following on to complete a typical base component definition.</description>
    </item>
    
    <item>
      <title>Using ReactJS with Typescript</title>
      <link>https://www.wikiod.com/reactjs/using-reactjs-with-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/using-reactjs-with-typescript/</guid>
      <description>ReactJS component written in Typescript # Actually you can use ReactJS&amp;rsquo;s components in Typescript as in facebook&amp;rsquo;s example. Just replace &amp;lsquo;jsx&amp;rsquo; file&amp;rsquo;s extension to &amp;rsquo;tsx&amp;rsquo;:
//helloMessage.tsx: var HelloMessage = React.createClass({ render: function() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } }); ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode); But in order to make full use of Typescript&amp;rsquo;s main feature (static type checking) should be done couple things:
1) convert React.createClass example to ES6 Class:
//helloMessage.tsx: class HelloMessage extends React.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://www.wikiod.com/reactjs/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/components/</guid>
      <description>React.createClass was deprecated in v15.5 and expected to be removed in v16. There is a drop-in replacement package for those that still require it. Examples using it should be updated.
Creating Components # This is an extension of Basic Example:
Basic Structure # import React, { Component } from &#39;react&#39;; import { render } from &#39;react-dom&#39;; class FirstComponent extends Component { render() { return ( &amp;lt;div&amp;gt; Hello, {this.props.name}! I am a FirstComponent.</description>
    </item>
    
    <item>
      <title>React Component Lifecycle</title>
      <link>https://www.wikiod.com/reactjs/react-component-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/react-component-lifecycle/</guid>
      <description>Lifecycle methods are to be used to run code and interact with your component at different points in the components life. These methods are based around a component Mounting, Updating, and Unmounting.
Component Creation # When a React component is created, a number of functions are called:
If you are using React.createClass (ES5), 5 user defined functions are called If you are using class Component extends React.Component (ES6), 3 user defined functions are called getDefaultProps() (ES5 only) # This is the first method called.</description>
    </item>
    
    <item>
      <title>Communication Between Components</title>
      <link>https://www.wikiod.com/reactjs/communication-between-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/communication-between-components/</guid>
      <description>There are a total of 3 cases of communication between React components:
Case 1: Parent to Child communication Case 2: Child to Parent communication Case 3: Not-related components (any component to any component) communication Child to Parent Components # Sending data back to the parent, to do this we simply pass a function as a prop from the parent component to the child component, and the child component calls that function.</description>
    </item>
    
    <item>
      <title>Props in React</title>
      <link>https://www.wikiod.com/reactjs/props-in-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/props-in-react/</guid>
      <description>NOTE: As of React 15.5 and up the PropTypes component lives in its own npm package, namely &amp;lsquo;prop-types&amp;rsquo; and needs its own import statement when using PropTypes. See the official react documentation for the breaking change: https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html
Introduction # props are used to pass data and methods from a parent component to a child component.
Interesting things about props
They are immutable. They allow us to create reusable components. Basic example</description>
    </item>
    
    <item>
      <title>React AJAX call</title>
      <link>https://www.wikiod.com/reactjs/react-ajax-call/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/react-ajax-call/</guid>
      <description>HTTP GET request # Sometimes a component needs to render some data from a remote endpoint (e.g. a REST API). A standard practice is to make such calls in componentDidMount method.
Here is an example, using superagent as AJAX helper:
import React from &#39;react&#39; import request from &#39;superagent&#39; class App extends React.Component { constructor () { super() this.state = {} } componentDidMount () { request .get(&#39;/search&#39;) .query({ query: &#39;Manny&#39; }) .</description>
    </item>
    
    <item>
      <title>State in React</title>
      <link>https://www.wikiod.com/reactjs/state-in-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/state-in-react/</guid>
      <description>Basic State # State in React components is essential to manage and communicate data in your application. It is represented as a JavaScript object and has component level scope, it can be thought of as the private data of your component.
In the example below we are defining some initial state in the constructor function of our component and make use of it in the render function.
class ExampleComponent extends React.</description>
    </item>
    
    <item>
      <title>Stateless Functional Components</title>
      <link>https://www.wikiod.com/reactjs/stateless-functional-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/reactjs/stateless-functional-components/</guid>
      <description>Stateless functional components in React are pure functions of the passed in props. These components do not rely on state and discard the use of component lifecycle methods. You may, however, still define propTypes and defaultPropts.
See https://facebook.github.io/react/docs/reusable-components.html#stateless-functions for further information about stateless functional components.
Stateless Functional Component # Components let you split the UI into independent, reusable pieces. This is the beauty of React; we can separate a page into many small reusable components.</description>
    </item>
    
  </channel>
</rss>

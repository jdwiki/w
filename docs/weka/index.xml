<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>weka Tutorial on </title>
    <link>https://www.wikiod.com/docs/weka/</link>
    <description>Recent content in weka Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/weka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with weka</title>
      <link>https://www.wikiod.com/weka/getting-started-with-weka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/getting-started-with-weka/</guid>
      <description>Installation or Setup # Weka is a collection of machine learning algorithms for data mining tasks. The algorithms can either be applied directly to a dataset or called from your own Java code. Weka contains tools for data pre-processing, classification, regression, clustering, association rules, and visualization. It is also well-suited for developing new machine learning schemes.
Downloading and installing Weka # There are two versions of Weka: Weka 3.8 is the latest stable version, and Weka 3.</description>
    </item>
    
    <item>
      <title>Loading Instances</title>
      <link>https://www.wikiod.com/weka/loading-instances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/loading-instances/</guid>
      <description>ARFF Files # ARFF files (Attribute-Relation File Format) are the most common format for data used in Weka. Each ARFF file must have a header describing what each data instance should be like. The attributes that can be used are as follows:
Numeric Real or integer numbers.
Nominal Nominal attributes must provide a set of possible values. For example:
@ATTRIBUTE class {Iris-setosa,Iris-versicolor,Iris-virginica} String Allows for arbitrary string values. Usually processed later using the StringToWordVector filter.</description>
    </item>
    
    <item>
      <title>How to use R in Weka</title>
      <link>https://www.wikiod.com/weka/how-to-use-r-in-weka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/how-to-use-r-in-weka/</guid>
      <description>Why use R in Weka? # R is a powerful tool for preprocessing data R has a huge number of libraries and keeps growing R in Weka, can easily get data from, process it, and pass to Weka seamlessly How to setup R in Weka # For Mac User
replace the old info.Plist with the new one given by Mark Hall
download and install R
install rJava inside R with</description>
    </item>
    
    <item>
      <title>Text Classification</title>
      <link>https://www.wikiod.com/weka/text-classification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/text-classification/</guid>
      <description>Text classification with LibLinear # Create training instances from .arff file
private static Instances getDataFromFile(String path) throws Exception{
DataSource source = new DataSource(path); Instances data = source.getDataSet(); if (data.classIndex() == -1){ data.setClassIndex(data.numAttributes()-1); //last attribute as class index } return data; }
Instances trainingData = getDataFromFile(pathToArffFile); Use StringToWordVector to transform your string attributes to number representation:
*Important features of this filter:
tf-idf representation
stemming
lowercase wrods
stopwords
n-gram representation*
StringToWordVector() filter = new StringToWordVector();</description>
    </item>
    
    <item>
      <title>How to use CPython Scripting in Weka?</title>
      <link>https://www.wikiod.com/weka/how-to-use-cpython-scripting-in-weka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/how-to-use-cpython-scripting-in-weka/</guid>
      <description>How to install CPython in Weka? # Install wekaPython
go to tools, open package manager search wekaPython, select and click to install Install Python libraries
install anaconda or conda install four packages: numpy, pandas, matplotlib, scikit-learn for full installation doc see conda Hello World Example for CPython of Weka # Go to Explorer, Open iris.arff data, then go to CPython Scripting, Copy and Paste the following lines of codes into Python Scripts:</description>
    </item>
    
    <item>
      <title>Getting Started With Jython in Weka</title>
      <link>https://www.wikiod.com/weka/getting-started-with-jython-in-weka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/getting-started-with-jython-in-weka/</guid>
      <description>Why would we use Jython inside Weka?
If you are unsatisfied with what Explorer, Experimenter, KnowledgeFlow, simpleCLI allow you to do, and looking for something to unleash the greater power of weka;
With Jython, we can access all functionalities provided by Weka API, right inside Weka;
Its syntax is Python-like, which is considered to be a beginner-friendly scripting language;
How to setup Jython in weka # install Jython and JFreeChart library from Weka Package manager;</description>
    </item>
    
    <item>
      <title>Mistakes easily made when using KnowledgeFlow</title>
      <link>https://www.wikiod.com/weka/mistakes-easily-made-when-using-knowledgeflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/mistakes-easily-made-when-using-knowledgeflow/</guid>
      <description>Weka KnowledgeFlow(KF) is a great interface to use. However, Weka manual does not cover every little details of using KF. Here would be a place for collecting those little tricks or details I learnt from those errors I did or will make as time goes. Many thanks to people at Wekalist (especially Mark Hall, Eibe Frank) for building a wonderful learning environment for Weka!
TrainingSetMaker and TestSetMaker # a ClassAssigner must be linked between ArffLoader and TrainingSetMaker or TestSetMaker.</description>
    </item>
    
    <item>
      <title>Simple Comparison of Weka Interfaces</title>
      <link>https://www.wikiod.com/weka/simple-comparison-of-weka-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/weka/simple-comparison-of-weka-interfaces/</guid>
      <description>Weka has many interfaces, Explorer, KnowledgeFlow, Experimenter, SimpleCLI, Workbench.
All of them share mostly can do the same tasks, with different focus and flexibility.
Here, we are going to explore their different focuses and flexibilities.
Explorer
pro:
do all things quickly give a quick and comprehensive view of data structure cos: can&amp;rsquo;t save the process;
Experimenter
pro:
compare several models at once, e.g., run 3 different classifiers against 5 datasets all together, and see the compared result at one place; experiment can be saved KnowledgeFlow</description>
    </item>
    
  </channel>
</rss>

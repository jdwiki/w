<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android-activity Tutorial on </title>
    <link>https://www.wikiod.com/docs/android-activity/</link>
    <description>Recent content in android-activity Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/android-activity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with android-activity</title>
      <link>https://www.wikiod.com/android-activity/getting-started-with-android-activity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android-activity/getting-started-with-android-activity/</guid>
      <description>Activity # Activity is complete screen. UI is XML based and
package com.example.android.activity; import android.os.Bundle; import android.app.Activity; public class MainActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } } NOTE Activity must be declared in AndroidManifest.xml before using it.
E.g:
&amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; Every activity has its layout file in xml format, we include its layout using setContentView method of Activity class.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.wikiod.com/android-activity/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android-activity/hello-world/</guid>
      <description>onCreate() is the most essential part of an activity, it&amp;rsquo;s where most of your activity logic goes.
Basic Activity structure # Activity is the root UserInterface in Android and have it&amp;rsquo;s own life-cycle.
MainActivity.java
public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Toast.makeText(this, &amp;quot;Activity created sucessfully!&amp;quot;, Toast.LENGTH_LONG).show(); } } AndroidManifest.xml (should be edited)
&amp;lt;manifest ... &amp;gt; &amp;lt;application ... &amp;gt; &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot; android:theme=&amp;quot;@android:style/Theme.AppCompat&amp;quot;&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/manifest&amp;gt; </description>
    </item>
    
    <item>
      <title>overriding back button</title>
      <link>https://www.wikiod.com/android-activity/overriding-back-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android-activity/overriding-back-button/</guid>
      <description>Double back to close application # You may have noticed that many applications have double-back-click functionality to exit the app. In this example, we are overriding the default back button action using the onBackPressed() method override.
This method will Toast a message for the single back-click action, and will close the app if the user clicks the back button twice within two seconds. We use a Handler for the functionality that relies on the two-second interval.</description>
    </item>
    
  </channel>
</rss>

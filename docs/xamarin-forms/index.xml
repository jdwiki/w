<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xamarin.Forms Tutorial on </title>
    <link>https://www.wikiod.com/docs/xamarin-forms/</link>
    <description>Recent content in Xamarin.Forms Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xamarin-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Xamarin.Forms</title>
      <link>https://www.wikiod.com/xamarin-forms/getting-started-with-xamarinforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/getting-started-with-xamarinforms/</guid>
      <description>Installation (Visual Studio) # Xamarin.Forms is a cross-platform natively backed UI toolkit abstraction that allows developers to easily create user interfaces that can be shared across Android, iOS, Windows, and Windows Phone. The user interfaces are rendered using the native controls of the target platform, allowing Xamarin.Forms applications to retain the appropriate look and feel for each platform.
Xamarin Plugin for Visual Studio # To get started with Xamarin.Forms for Visual Studio you need to have the Xamarin plugin itself.</description>
    </item>
    
    <item>
      <title>Display Alert</title>
      <link>https://www.wikiod.com/xamarin-forms/display-alert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/display-alert/</guid>
      <description>DisplayAlert # An alert box can be popped-up on a Xamarin.Forms Page by the method, DisplayAlert. We can provide a Title, Body (Text to be alerted) and one/two Action Buttons. Page offers two overrides of DisplayAlert method.
public Task DisplayAlert (String title, String message, String cancel) This override presents an alert dialog to the application user with a single cancel button. The alert displays modally and once dismissed the user continues interacting with the application.</description>
    </item>
    
    <item>
      <title>Platform specific visual adjustments</title>
      <link>https://www.wikiod.com/xamarin-forms/platform-specific-visual-adjustments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/platform-specific-visual-adjustments/</guid>
      <description>Idiom adjustments # Idiom specific adjustments can be done from C# code, for example for changing the layout orientation whether the view is shown or a phone or a tablet.
if (Device.Idiom == TargetIdiom.Phone) { this.panel.Orientation = StackOrientation.Vertical; } else { this.panel.Orientation = StackOrientation.Horizontal; } Those functionalities are also available directly from XAML code :
&amp;lt;StackLayout x:Name=&amp;quot;panel&amp;quot;&amp;gt; &amp;lt;StackLayout.Orientation&amp;gt; &amp;lt;OnIdiom x:TypeArguments=&amp;quot;StackOrientation&amp;quot;&amp;gt; &amp;lt;OnIdiom.Phone&amp;gt;Vertical&amp;lt;/OnIdiom.Phone&amp;gt; &amp;lt;OnIdiom.Tablet&amp;gt;Horizontal&amp;lt;/OnIdiom.Tablet&amp;gt; &amp;lt;/OnIdiom&amp;gt; &amp;lt;/StackLayout.Orientation&amp;gt; &amp;lt;/StackLayout&amp;gt; Platform adjustments # Adjustments can be done for specific platforms from C# code, for example for changing padding for all the targeted platforms.</description>
    </item>
    
    <item>
      <title>Custom Renderers</title>
      <link>https://www.wikiod.com/xamarin-forms/custom-renderers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/custom-renderers/</guid>
      <description>Accessing renderer from a native project # var renderer = Platform.GetRenderer(visualElement); if (renderer == null) { renderer = Platform.CreateRenderer(visualElement); Platform.SetRenderer(visualElement, renderer); } DoSomeThingWithRender(render); // now you can do whatever you want with render Custom renderer for ListView # Custom Renderers let developers customize the appearance and behavior of Xamarin.Forms controls on each platform. Developers could use features of native controls.
For example, we need to disable scroll in ListView. On iOS ListView is scrollable even if all items are placed on the screen and user shouldn&amp;rsquo;t be able to scroll the list.</description>
    </item>
    
    <item>
      <title>Xamarin Forms Layouts</title>
      <link>https://www.wikiod.com/xamarin-forms/xamarin-forms-layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/xamarin-forms-layouts/</guid>
      <description>AbsoluteLayout # AbsoluteLayout positions and sizes child elements proportional to its own size and position or by absolute values. Child views may be positioned and sized using proportional values or static values, and proportional and static values can be mixed.
A definition of an AbsoluteLayout in XAML looks like this:
&amp;lt;AbsoluteLayout&amp;gt; &amp;lt;Label Text=&amp;quot;I&#39;m centered on iPhone 4 but no other device&amp;quot; AbsoluteLayout.LayoutBounds=&amp;quot;115,150,100,100&amp;quot; LineBreakMode=&amp;quot;WordWrap&amp;quot; /&amp;gt; &amp;lt;Label Text=&amp;quot;I&#39;m bottom center on every device.</description>
    </item>
    
    <item>
      <title>Custom Fonts in Styles</title>
      <link>https://www.wikiod.com/xamarin-forms/custom-fonts-in-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/custom-fonts-in-styles/</guid>
      <description>Resources to look at:
Xamarin Styles Using custom fonts on iOS and Android with Xamarin.Forms Custom Renderers Resource Dictionaries Attached Properties Accessing custom Fonts in Syles # Xamarin.Forms provide great mechanism for styling your cross-platforms application with global styles.
In mobile world your application must be pretty and stand out from the other applications. One of this characters is Custom Fonts used in application.
With power support of XAML Styling in Xamarin.</description>
    </item>
    
    <item>
      <title>Xamarin Plugin</title>
      <link>https://www.wikiod.com/xamarin-forms/xamarin-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/xamarin-plugin/</guid>
      <description>Media Plugin # Take or pick photos and videos from a cross platform API.
Available Nuget : https://www.nuget.org/packages/Xam.Plugin.Media/
XAML
&amp;lt;StackLayout Spacing=&amp;quot;10&amp;quot; Padding=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;Button x:Name=&amp;quot;takePhoto&amp;quot; Text=&amp;quot;Take Photo&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;pickPhoto&amp;quot; Text=&amp;quot;Pick Photo&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;takeVideo&amp;quot; Text=&amp;quot;Take Video&amp;quot;/&amp;gt; &amp;lt;Button x:Name=&amp;quot;pickVideo&amp;quot; Text=&amp;quot;Pick Video&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;Save to Gallery&amp;quot;/&amp;gt; &amp;lt;Switch x:Name=&amp;quot;saveToGallery&amp;quot; IsToggled=&amp;quot;false&amp;quot; HorizontalOptions=&amp;quot;Center&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;Image will show here&amp;quot;/&amp;gt; &amp;lt;Image x:Name=&amp;quot;image&amp;quot;/&amp;gt; &amp;lt;Label Text=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;/StackLayout&amp;gt; Code
namespace PluginDemo { public partial class MediaPage : ContentPage { public MediaPage() { InitializeComponent(); takePhoto.</description>
    </item>
    
    <item>
      <title>Accessing native features with DependencyService</title>
      <link>https://www.wikiod.com/xamarin-forms/accessing-native-features-with-dependencyservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/accessing-native-features-with-dependencyservice/</guid>
      <description>If you do not want your code to break when no implementation is found, check the DependencyService first if it has a implementation available.
You can do this by a simple check if it is not null.
var speaker = DependencyService.Get&amp;lt;ITextToSpeech&amp;gt;(); if (speaker != null) { speaker.Speak(&amp;quot;Ready for action!&amp;quot;); } or, if your IDE supports C# 6, with null-conditional operator:
var speaker = DependencyService.Get&amp;lt;ITextToSpeech&amp;gt;(); speaker?.Speak(&amp;quot;Ready for action!&amp;quot;); If you don&amp;rsquo;t do this and no implementation is found at runtime, your code will generate an exception.</description>
    </item>
    
    <item>
      <title>Working with Maps</title>
      <link>https://www.wikiod.com/xamarin-forms/working-with-maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/working-with-maps/</guid>
      <description>If you&amp;rsquo;re going to run your project on another computer, you&amp;rsquo;ll need to generate a new API key for it, because SHA-1 fingerprints will not match for different build machines.
You can explore the project, described in example Adding a map in Xamarin.Forms here
Adding a map in Xamarin.Forms (Xamarin Studio) # You can simply use the native map APIs on each platform with Xamarin Forms. All you need is to download the Xamarin.</description>
    </item>
    
    <item>
      <title>Contact Picker - Xamarin Forms (Android and iOS)</title>
      <link>https://www.wikiod.com/xamarin-forms/contact-picker---xamarin-forms-android-and-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-forms/contact-picker---xamarin-forms-android-and-ios/</guid>
      <description>Contact Picker XF (Android and iOS)
contact_picker.cs # using System; using Xamarin.Forms; namespace contact_picker { public class App : Application { public App () { // The root page of your application MainPage = new MyPage(); } protected override void OnStart () { // Handle when your app starts } protected override void OnSleep () { // Handle when your app sleeps } protected override void OnResume () { // Handle when your app resumes } } } MyPage.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xpath Tutorial on </title>
    <link>https://www.wikiod.com/docs/xpath/</link>
    <description>Recent content in xpath Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xpath/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with xpath</title>
      <link>https://www.wikiod.com/xpath/getting-started-with-xpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/getting-started-with-xpath/</guid>
      <description>Testing Xpaths in browser console # A quick way to test your xpath is in your browser developer tool console.
Format is
$x(&#39;//insert xpath here&#39;) $ - specifies it is a selector.
x - specifies it is using xpaths
Example:
$x(&amp;quot;//button[text() =&#39;Submit&#39;]&amp;quot;) When this command is entered it will return all occurrences of elements that are buttons with text equal to Submit.
Select text # For the sample XML (without namespaces):</description>
    </item>
    
    <item>
      <title>Finding elements containing specific text</title>
      <link>https://www.wikiod.com/xpath/finding-elements-containing-specific-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/finding-elements-containing-specific-text/</guid>
      <description>Find all elements with certain text # Imagine the following XML:
&amp;lt;root&amp;gt; &amp;lt;element&amp;gt;hello&amp;lt;/element&amp;gt; &amp;lt;another&amp;gt; hello &amp;lt;/another&amp;gt; &amp;lt;example&amp;gt;Hello, &amp;lt;nested&amp;gt; I am an example &amp;lt;/nested&amp;gt;.&amp;lt;/example&amp;gt; &amp;lt;/root&amp;gt; The following XPath expression:
//*[text() = &#39;hello&#39;] will return the &amp;lt;element&amp;gt;hello&amp;lt;/element&amp;gt; element, but not the &amp;lt;another&amp;gt; element. This is because the &amp;lt;another&amp;gt; element contains whitespace surrounding the hello text.
To retrieve both &amp;lt;element&amp;gt; and &amp;lt;another&amp;gt;, one could use:
//*[normalize-space(text()) = &#39;hello&#39;] or
//*[normalize-space() = &#39;hello&#39;] which will trim the surrounding whitespace before doing the comparison.</description>
    </item>
    
    <item>
      <title>Check if a node&#39;s text is empty</title>
      <link>https://www.wikiod.com/xpath/check-if-a-nodes-text-is-empty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/check-if-a-nodes-text-is-empty/</guid>
      <description>Syntax # boolean(path_to_node/text()) string(path_to_node) != &#39;&#39; Boolean function has other uses
Check if a node is present Check if the argument is not a number (NaN) or is 0 String function is used to return the string value of a node.
Check if Deborah has a master and its text value is not empty # XML
&amp;lt;Deborah&amp;gt; &amp;lt;address&amp;gt;Dark world&amp;lt;/address&amp;gt; &amp;lt;master&amp;gt;Babadi&amp;lt;/master&amp;gt; &amp;lt;ID&amp;gt;#0&amp;lt;/ID&amp;gt; &amp;lt;colour&amp;gt;red&amp;lt;/colour&amp;gt; &amp;lt;side&amp;gt;evil&amp;lt;/side&amp;gt; &amp;lt;/Deborah&amp;gt; XPATH
boolean(/Deborah/master/text()) OR
string(/Deborah/master) != &#39;&#39; OUTPUT</description>
    </item>
    
    <item>
      <title>Find nodes that have a specific attribute</title>
      <link>https://www.wikiod.com/xpath/find-nodes-that-have-a-specific-attribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/find-nodes-that-have-a-specific-attribute/</guid>
      <description>Syntax # Inside a specific node /path to/element[@attribute_name] Anywhere in the document //*[@attribute_name] Inside a specific node with some value /path to/element[@attribute_name=&amp;lsquo;search value&amp;rsquo;] /path to/element[@attribute_name=&amp;ldquo;search value&amp;rdquo;] Anywhere in the document with some value //*[@attribute_name=&amp;lsquo;search string&amp;rsquo;] //*[@attribute_name=&amp;ldquo;search string&amp;rdquo;] Parameters # Selector function @attribute_name It selects the attribute value for a node, if present Using [@attribute_name] we can select nodes that have the attribute irrespective of the value.
We can use any of the functions or combination of the functions such as starts-with and lowercase, for example, with this selector to suit our needs.</description>
    </item>
    
    <item>
      <title>Location paths and axes</title>
      <link>https://www.wikiod.com/xpath/location-paths-and-axes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/location-paths-and-axes/</guid>
      <description>An XPath location path is a series of location steps separated by a / character:
step1/step2/step3 A location step contains an axis, a node test, and an optional list of predicates. The axis and the node test are separated by two colon characters ::. The predicates are enclosed in square brackets:
axis::nodeTest[predicate1][predicate2] The evaluation of a location path starts with a node set containing the context node given by the context of the expression, or the root node, if the location path starts with a /.</description>
    </item>
    
    <item>
      <title>Select nodes with names equal to or containing some string</title>
      <link>https://www.wikiod.com/xpath/select-nodes-with-names-equal-to-or-containing-some-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/select-nodes-with-names-equal-to-or-containing-some-string/</guid>
      <description>Syntax # Inside a specific node:
{path-to-parent}/name()=&amp;lsquo;search string&amp;rsquo;]
Anywhere in the document:
//*[name()=&amp;lsquo;search string&amp;rsquo;]
Parameters # function return value local-name() the node&amp;rsquo;s name without prefix local-name() result does not include prefix (lookup name() XPATH function for it)
Search for nodes with name as Light, Device or Sensor # XML
&amp;lt;Galaxy&amp;gt; &amp;lt;Light&amp;gt;sun&amp;lt;/Light&amp;gt; &amp;lt;Device&amp;gt;satellite&amp;lt;/Device&amp;gt; &amp;lt;Sensor&amp;gt;human&amp;lt;/Sensor&amp;gt; &amp;lt;Name&amp;gt;Milky Way&amp;lt;/Name&amp;gt; &amp;lt;/Galaxy&amp;gt; XPATH
/Galaxy/*[local-name()=&#39;Light&#39; or local-name()=&#39;Device&#39; or local-name()=&#39;Sensor&#39;] or
//*[local-name()=&#39;Light&#39; or local-name()=&#39;Device&#39; or local-name()=&#39;Sensor&#39;] OUTPUT
&amp;lt;Light&amp;gt;sun&amp;lt;/Light&amp;gt; &amp;lt;Device&amp;gt;satellite&amp;lt;/Device&amp;gt; &amp;lt;Sensor&amp;gt;human&amp;lt;/Sensor&amp;gt; Search for nodes that has name that starts with Star # XML</description>
    </item>
    
    <item>
      <title>Get nodes relative to the current node</title>
      <link>https://www.wikiod.com/xpath/get-nodes-relative-to-the-current-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/get-nodes-relative-to-the-current-node/</guid>
      <description>Syntax # All ancestors of a node /path to the node/ancestor::node() A specific ancestor of a node /path to the node/ancestor::ancestor_name Parent of a node /path to the node/parent::node() Following siblings of a node /path to the node/following-sibling::node() A specific sibling following a node /path to the node/following-sibling::sibling_name Preceding siblings of a node /path to the node/preceding-sibling::node() A specific sibling preceding a node /path to the node/preceding-sibling::sibling_name All immediate child nodes of a node /path to the node/child::node() A specific immediate child node of a node /path to the node/child::chid_name All the descendants of a node /path to the node/descendant::node() All specific descendants of a node /path the to node/descendant::descendant_name Parameters # Axis selects ancestor all the ancestor nodes parent parent node following-sibling siblings following the node preceding-sibling siblings preceding the node child immediate children descendant all the descendant irrespective of the nesting level These axes can be used in combination with other functions to suit our needs.</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>https://www.wikiod.com/xpath/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/namespaces/</guid>
      <description>XPath 1.0 doesn&amp;rsquo;t have the concept of a default namespace.
Also, the namespace prefixes defined in the original XML document do not affect XPath - namespace prefixes have to be explicitly registered with the XPath provider, otherwise prefixes can&amp;rsquo;t be used at all in the XPath expression.
Namespace aware functions # &amp;lt;root xmlns=&amp;quot;http://test/&amp;quot;&amp;gt; &amp;lt;element xmlns:example=&amp;quot;http://foobar/&amp;quot;&amp;gt; &amp;lt;example:hello_world attribute=&amp;quot;another example&amp;quot; /&amp;gt; &amp;lt;/element&amp;gt; &amp;lt;/root&amp;gt; The expression /root will return nothing, because there is no non-namespaced element called root at the root level of the document.</description>
    </item>
    
    <item>
      <title>Check if a node is present</title>
      <link>https://www.wikiod.com/xpath/check-if-a-node-is-present/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/check-if-a-node-is-present/</guid>
      <description>Syntax # boolean(path_to_node) Boolean function has other uses
Check if a string is empty Check if the argument is not a number (NaN) or is 0 Does the animal have tusks? # XML
&amp;lt;Animal&amp;gt; &amp;lt;legs&amp;gt;4&amp;lt;/legs&amp;gt; &amp;lt;eyes&amp;gt;2&amp;lt;/eyes&amp;gt; &amp;lt;horns&amp;gt;2&amp;lt;/horns&amp;gt; &amp;lt;tail&amp;gt;1&amp;lt;/tail&amp;gt; &amp;lt;/Animal&amp;gt; XPATH
boolean(/Animal/tusks) OUTPUT
false Does the animal have horns? # XPATH
&amp;lt;Animal&amp;gt; &amp;lt;legs&amp;gt;4&amp;lt;/legs&amp;gt; &amp;lt;eyes&amp;gt;2&amp;lt;/eyes&amp;gt; &amp;lt;horns&amp;gt;2&amp;lt;/horns&amp;gt; &amp;lt;tail&amp;gt;1&amp;lt;/tail&amp;gt; &amp;lt;/Animal&amp;gt; XPATH
boolean(/Animal/horns) OUTPUT
true Are there plants in the house? # XML
&amp;lt;House&amp;gt; &amp;lt;LivingRoom&amp;gt; &amp;lt;plant name=&amp;quot;rose&amp;quot;/&amp;gt; &amp;lt;/LivingRoom&amp;gt; &amp;lt;TerraceGarden&amp;gt; &amp;lt;plant name=&amp;quot;passion fruit&amp;quot;/&amp;gt; &amp;lt;plant name=&amp;quot;lily&amp;quot;/&amp;gt; &amp;lt;plant name=&amp;quot;golden duranta&amp;quot;/&amp;gt; &amp;lt;/TerraceGarden&amp;gt; &amp;lt;/House&amp;gt; XPATH</description>
    </item>
    
    <item>
      <title>Finding elements containing specific attributes</title>
      <link>https://www.wikiod.com/xpath/finding-elements-containing-specific-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xpath/finding-elements-containing-specific-attributes/</guid>
      <description>Find all elements with a certain attribute # Imagine the following XML:
&amp;lt;root&amp;gt; &amp;lt;element foobar=&amp;quot;hello_world&amp;quot; /&amp;gt; &amp;lt;element example=&amp;quot;this is one!&amp;quot; /&amp;gt; &amp;lt;/root&amp;gt; /root/element[@foobar] and will return the &amp;lt;element foobar=&amp;quot;hello_world&amp;quot; /&amp;gt; element.
Find all elements with a certain attribute value # Imagine the following XML:
&amp;lt;root&amp;gt; &amp;lt;element foobar=&amp;quot;hello_world&amp;quot; /&amp;gt; &amp;lt;element example=&amp;quot;this is one!&amp;quot; /&amp;gt; &amp;lt;/root&amp;gt; The following XPath expression:
/root/element[@foobar = &#39;hello_world&#39;] will return the &amp;lt;element foobar=&amp;quot;hello_world&amp;quot; /&amp;gt; element.
double quotes can also be used:</description>
    </item>
    
  </channel>
</rss>

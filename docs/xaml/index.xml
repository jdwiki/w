<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xaml Tutorial on </title>
    <link>https://www.wikiod.com/docs/xaml/</link>
    <description>Recent content in xaml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with xaml</title>
      <link>https://www.wikiod.com/xaml/getting-started-with-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/getting-started-with-xaml/</guid>
      <description>Installation or Setup # The easiest way to get writing your first XAML is to install Microsoft Visual Studio. This is avaliable free from Microsoft.
Once installed you can create a new project, of type WPF Application, either with a VB.NET or C# code.
This is similar to windows forms in the sense that you have a series of windows, the main difference being that these windows are written in XAML and are much more responsive to different devices.</description>
    </item>
    
    <item>
      <title>Converters</title>
      <link>https://www.wikiod.com/xaml/converters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/converters/</guid>
      <description>Parameters # Parameter Details value The value to convert from targetType The type being converted to parameter Optional value to control how the conversion works culture CultureInfo object - required if localisation needed The Convert method converts the value from the source (usually the view model) to the target (usually a property of a control).
The ConvertBack method converts the value from the target back to the source. It is only needed if the binding is TwoWay or OneWayToSource.</description>
    </item>
    
    <item>
      <title>Differences in the various XAML dialects</title>
      <link>https://www.wikiod.com/xaml/differences-in-the-various-xaml-dialects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/differences-in-the-various-xaml-dialects/</guid>
      <description>XAML is used in Silverlight, Windows Phone, Windows RT and UWP apps. Sharing code or converting code between these is sometimes harder than desirable due to subtle differences between the various XAML dialects. This topic strives to give an overview of these differences with a short explanation.
Compiled data bindings: The {x:Bind} markup extension # Databings are essential for working with XAML. The XAML dialect for UWP apps provides a type of binding: the {x:Bind} markup extension.</description>
    </item>
    
    <item>
      <title>Data Binding</title>
      <link>https://www.wikiod.com/xaml/data-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/data-binding/</guid>
      <description>Syntax # &amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt;
&amp;lt;TextBlock Text=&amp;quot;{Binding Path=Title}&amp;quot;/&amp;gt;
&amp;lt;TextBlock&amp;gt; &amp;lt;TextBlock.Text&amp;gt; &amp;lt;Binding Path=&amp;quot;Title&amp;quot;/&amp;gt; &amp;lt;/TextBlock.Text&amp;gt; &amp;lt;/TextBlock&amp;gt;
All these tags produce the same result.
Binding string to Text property # To change UI content in runtime, you can use Binding. When binded property is changed from the code, it will be displayed to the UI.
&amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt; To notify UI about changes, property must raise PropertyChanged event from INotifyPropertyChanged interface or you can use Dependency Property.</description>
    </item>
    
    <item>
      <title>Layout controls</title>
      <link>https://www.wikiod.com/xaml/layout-controls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/layout-controls/</guid>
      <description>Grid # Grid is used to create table layouts.
Basic rows and columns definitions # &amp;lt;Grid&amp;gt; &amp;lt;!-- Define 3 columns with width of 100 --&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;!-- Define 3 rows with height of 50 --&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- This is placed at the top left (first row, first column) --&amp;gt; &amp;lt;Button Grid.Column=&amp;quot;0&amp;quot; Grid.Row=&amp;quot;0&amp;quot; Content=&amp;quot;Top Left&amp;quot;/&amp;gt; &amp;lt;!-- This is placed at the top left (first row, second column) --&amp;gt; &amp;lt;Button Grid.</description>
    </item>
    
    <item>
      <title>Data templates</title>
      <link>https://www.wikiod.com/xaml/data-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/data-templates/</guid>
      <description>Using DataTemplate in a ListBox # Suppose we have the following XAML snippet:
&amp;lt;ListBox x:Name=&amp;quot;MyListBox&amp;quot; /&amp;gt; Then in the code-behind for this XAML file, we write the following in the constructor:
MyListBox.ItemsSource = new[] { 1, 2, 3, 4, 5 }; Running the application, we get a list of numbers we entered.
However, if we try to display a list of objects of a custom type, like this
MyListBox.ItemsSource = new[] { new Book { Title = &amp;quot;The Hitchhiker&#39;s Guide to the Galaxy&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;The Restaurant at the End of the Universe&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;Life, the Universe and Everything&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;So Long, and Thanks for All the Fish&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; }, new Book { Title = &amp;quot;Mostly Harmless&amp;quot;, Author = &amp;quot;Douglas Adams&amp;quot; } }; assuming we have a class called Book</description>
    </item>
    
    <item>
      <title>XAML Development Tools</title>
      <link>https://www.wikiod.com/xaml/xaml-development-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/xaml-development-tools/</guid>
      <description>Microsoft Visual Studio &amp;amp; Microsoft Expression Blend # Create engaging user interfaces for Windows Desktop Applications with Blend for Visual Studio, the premier professional design tool for XAML applications. Build beautiful transitions and visualizations using Blendâ€™s full suite of vector drawing tools, powerful template editing features, real-time animation, visual state management and more.
Download Visual Studio
WPF Inspector # WPF Inspector is a utility that attaches to a running WPF application to troubleshoot common problems with layouting, databinding or styling.</description>
    </item>
    
    <item>
      <title>Working with custom XAML files</title>
      <link>https://www.wikiod.com/xaml/working-with-custom-xaml-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/working-with-custom-xaml-files/</guid>
      <description>Reading an object from XAML # Consider a structure of the following classes should be constructed in XAML an then read into a CLR object:
namespace CustomXaml { public class Test { public string Value { get; set; } public List&amp;lt;TestChild&amp;gt; Children { get; set; } = new List&amp;lt;TestChild&amp;gt;(); } public class TestChild { public string StringValue { get; set; } public int IntValue { get; set; } } } Classes should either have no explicit constructor or provide an empty one.</description>
    </item>
    
    <item>
      <title>Control Templates</title>
      <link>https://www.wikiod.com/xaml/control-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xaml/control-templates/</guid>
      <description>Control Templates # The default user interfaces for WPF controls are typically constructed from other controls and shapes. For example, a Button is composed of both ButtonChrome and ContentPresenter controls. The ButtonChrome provides the standard button appearance, while the ContentPresenter displays the button&amp;rsquo;s content, as specified by the Content property. Sometimes the default appearance of a control may be incongruent with the overall appearance of an application. In this case, you can use a ControlTemplate to change the appearance of the control&amp;rsquo;s user interface without changing its content and behavior.</description>
    </item>
    
  </channel>
</rss>

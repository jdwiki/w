<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openssl Tutorial on </title>
    <link>https://www.wikiod.com/docs/openssl/</link>
    <description>Recent content in openssl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/openssl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with openssl</title>
      <link>https://www.wikiod.com/openssl/getting-started-with-openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/openssl/getting-started-with-openssl/</guid>
      <description>Installation or Setup # OpenSSL is an open source project that provides a robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library.
The OpenSSL toolkit is licensed under an Apache-style license, which basically means that you are free to get and use it for commercial and non-commercial purposes subject to some simple license conditions.
Build and Install openssl on Linux/Unix Systems # Overview # These instructions are for acquiring, building, and installing openssl from source.</description>
    </item>
    
    <item>
      <title>Keys</title>
      <link>https://www.wikiod.com/openssl/keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/openssl/keys/</guid>
      <description>Syntax # EVP_PKEY *EVP_PKEY_new(void); RSA * RSA_new(void); int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb); int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key); int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); void EVP_PKEY_free(EVP_PKEY *key); Generate RSA Key # In order to generate an RSA key, an EVP_PKEY must first be allocated with EVP_PKEY_new:</description>
    </item>
    
  </channel>
</rss>

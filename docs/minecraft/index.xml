<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>minecraft Tutorial on </title>
    <link>https://www.wikiod.com/docs/minecraft/</link>
    <description>Recent content in minecraft Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/minecraft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with minecraft</title>
      <link>https://www.wikiod.com/minecraft/getting-started-with-minecraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/getting-started-with-minecraft/</guid>
      <description>Installing Minecraft # Buy Minecraft from here
Create a Mojang account or sign in if you already have one.
If you created a new account, verify your email.
Fill in your Payment Details. Make sure your on minecraft.net and you&amp;rsquo;re on a secure connection (HTTPS)
Download and Run Minecraft
Open the Minecraft launcher
Log in with your email address if you purchased Minecraft after November 2012, or migrated your username to a Mojang account.</description>
    </item>
    
    <item>
      <title>Creating a basic block with Forge</title>
      <link>https://www.wikiod.com/minecraft/creating-a-basic-block-with-forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/creating-a-basic-block-with-forge/</guid>
      <description>Creating a simple, decorative block with Forge is one of the first tasks an aspiring modder will have to learn. How to do that has changed over the various versions of Minecraft and is probably at a &amp;ldquo;moderate&amp;rdquo; difficulty post 1.7.10 due to the sheer number of easy to make mistakes.
If something goes wrong and your custom block (either when placed or held) has a missing texture (black/purple) or model (default cube that&amp;rsquo;s too large when held) check the log.</description>
    </item>
    
    <item>
      <title>Event Listeners in Forge</title>
      <link>https://www.wikiod.com/minecraft/event-listeners-in-forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/event-listeners-in-forge/</guid>
      <description>Creating an event listener in Forge # Creating an event listener in Forge is very similar to creating one in Bukket.
Creating the listener class requires a lot less. There&amp;rsquo;s no interface to implement or other imports.
public class ListenerClass { } //perfectly valid event listener class Registering it requires passing the instance to the Forge event bus:
MinecraftForge.EVENT_BUS.register(new ListenerClass()); There are a couple of different event buses depending on the event.</description>
    </item>
    
    <item>
      <title>Event Listeners in Bukkit</title>
      <link>https://www.wikiod.com/minecraft/event-listeners-in-bukkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/event-listeners-in-bukkit/</guid>
      <description>Creating an event listener # To register your methods, the class containing the EventHandler(s) must implement the Listener interface.
import org.bukkit.event.Listener; public final class ListenerClass implements Listener { } You need to register the event listener by adding the following call to your onEnable method in the class that extends JavaPlugin:
getServer().getPluginManager().registerEvents(new ListenerClass(), this); To listen to any given event in your listener class, you must create a method with @EventHandler annotation on the method.</description>
    </item>
    
    <item>
      <title>Writing Minecraft Mods</title>
      <link>https://www.wikiod.com/minecraft/writing-minecraft-mods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/writing-minecraft-mods/</guid>
      <description>Understanding writing your own mods for Minecraft.
The first thing to know is that there are primarily two platforms which mods are build on. Forge and Bukkit.
Each platform has its advantages and disadvantages and are generally not compatible with each other. Forge mods run the gamut and are generally game-play oriented. Bukkit mods are entirely server-based and generally admin tool oriented. Bukkit mods are called plugins.
Basic Forge Mods # Creating a basic block Creating a basic item Writing a Hello command Writing an Event Handler Getting started with Capabilities [1.</description>
    </item>
    
    <item>
      <title>Creating first Spigot plugin</title>
      <link>https://www.wikiod.com/minecraft/creating-first-spigot-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/creating-first-spigot-plugin/</guid>
      <description>First Plugin in Eclipse # Prerequisite # This guide assumes you have already used BuildTools and have run the [Spigot server][2] at least once. It also assumes that you have the Spigot-API jar file which we will use.
1) Start Eclipse; you may change the workspace location if desired.
2) Create a new Project
Set the project name to whatever you wish. Here, we chose MyFirstPlugin. Click next. Select Add External JARs under the Libraries tab.</description>
    </item>
    
    <item>
      <title>Installing a Spigot server</title>
      <link>https://www.wikiod.com/minecraft/installing-a-spigot-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/installing-a-spigot-server/</guid>
      <description>BuildTools # What is it? # BuildTools.jar is a solution to building Bukkit, CraftBukkit, Spigot, and the Spigot-API. All of which is done on your computer! A few prerequisite programs are necessary, but the instructions below will guide you through everything you need to do.
Prerequisites # There are two applications necessary to use BuildTools: Git and Java.
Windows # Git # In order for BuildTools to run on Windows, you will need to install Git.</description>
    </item>
    
    <item>
      <title>Modding with Forge</title>
      <link>https://www.wikiod.com/minecraft/modding-with-forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/modding-with-forge/</guid>
      <description>Syntax # MODID = represents the Identifier of the MOD MODPath = stands for the full qualified directory path to your mod folder This topic should contain most used patterns/examples and well tested code for modding the Minecraft application with forge. Maybe this can replace the official documentation one day.
Implementation pattern for Initialization Proxies # This example shows you how to implement proxy classes for your Minecraft Mod Application, which are used to initialize your mod.</description>
    </item>
    
    <item>
      <title>Creating a Basic Item with Forge</title>
      <link>https://www.wikiod.com/minecraft/creating-a-basic-item-with-forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/creating-a-basic-item-with-forge/</guid>
      <description>Creating a simple item with Forge is one of the first tasks an aspiring modder will have to learn. How to do that has changed over the various versions of Minecraft and is probably at a &amp;ldquo;moderate&amp;rdquo; difficulty post 1.7.10 due to the sheer number of easy to make mistakes, particularly with making it render properly.
If something goes wrong and your custom item has a missing texture (black/purple) or model (default cube that&amp;rsquo;s too large when held) check the log.</description>
    </item>
    
    <item>
      <title>Plugin Commands</title>
      <link>https://www.wikiod.com/minecraft/plugin-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/minecraft/plugin-commands/</guid>
      <description>Hello Command # In the code below you can see how to add a command to your plugin.
MainClass.java # package yourpackage; import org.bukkit.command.Command; import org.bukkit.command.CommandSender; import org.bukkit.plugin.java.JavaPlugin; public class MainClass extends JavaPlugin { @Override public boolean onCommand(CommandSender sender, Command command, String label, String[] args) { if (command.getName().equalsIgnoreCase(&amp;quot;hello&amp;quot;)) { sender.sendMessage(&amp;quot;Hey!&amp;quot;); } return false; } } Plugin.yml # name: HelloCommand main: yourpackage.MainClass version: 1.0 commands: hello: description: Hello </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP Tutorial on </title>
    <link>https://www.wikiod.com/docs/http/</link>
    <description>Recent content in HTTP Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with HTTP</title>
      <link>https://www.wikiod.com/http/getting-started-with-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/getting-started-with-http/</guid>
      <description>HTTP/2 # HTTP requests and responses # HTTP describes how an HTTP client, such as a web browser, sends an HTTP request via a network to an HTTP server, which then sends an HTTP response back to the client.
The HTTP request is typically either a request for an online resource, such as a web page or image, but may also include additional information, such as data entered on a form.</description>
    </item>
    
    <item>
      <title>HTTP requests</title>
      <link>https://www.wikiod.com/http/http-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/http-requests/</guid>
      <description>Parameters # HTTP Method Purpose OPTIONS Retrieve information about the communication options (available methods and headers) available on the specified request URI. GET Retrieve the data identified by the request URI, or the data produced by the script available at the request URI. HEAD Identical to GET except that no message body will be returned by the server: only headers. POST Submit a block of data (specified in the message body) to the server for addition to the resouce specified in the request URI.</description>
    </item>
    
    <item>
      <title>HTTP Status Codes</title>
      <link>https://www.wikiod.com/http/http-status-codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/http-status-codes/</guid>
      <description>In HTTP, status codes are a machine-readable mechanism indicating the result of a previously issued request. From RFC 7231, sec. 6: &amp;ldquo;The status-code element is a three-digit integer code giving the result of the attempt to understand and satisfy the request.&amp;rdquo;
The formal grammar allows codes to be anything between 000 and 999. However, only the range from 100 to 599 has assigned meaning.
HTTP/1.1 defines a number of numeric HTTP status codes that appear in the status line - the first line of an HTTP response - to summarise what the client should do with the response.</description>
    </item>
    
    <item>
      <title>HTTP responses</title>
      <link>https://www.wikiod.com/http/http-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/http-responses/</guid>
      <description>Parameters # Status Code Reason-Phrase — Description 100 Continue — the client should send the following part of a multi-part request. 101 Switching Protocols — the server is changing the version or type of protocol used in this communication. 200 OK — the server has received and completed the client&amp;rsquo;s request. 201 Created — the server has accepted the request and created a new resource, which is available under the URI in the Location header.</description>
    </item>
    
    <item>
      <title>Caching HTTP responses</title>
      <link>https://www.wikiod.com/http/caching-http-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/caching-http-responses/</guid>
      <description>Responses are cached separately for each URL and each HTTP method.
HTTP caching is defined in RFC 7234.
Glossary # fresh — state of a cached response, which hasn&amp;rsquo;t expired yet. Typically, a fresh response can satisfy requests without a need to contact the server the response originated from. stale — state of a cached response, which is past its expiration date. Typically, stale responses can&amp;rsquo;t be used to satisfy a request without checking with the server whether it&amp;rsquo;s still valid.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://www.wikiod.com/http/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/authentication/</guid>
      <description>Parameters # Parameter Details Response status 401 if the origin server requires authentication, 407 if an intermediate proxy requires authentication Response headers WWW-Authenticate by the origin server, Proxy-Authenticate by an intermediate proxy Request headers Authorization for authorization against an origin server, Proxy-Authorization against an intermediate proxy Authentication scheme Basic for Basic Authentication, but others such as Digest and SPNEGO can be used. See the HTTP Authentication Schemes Registry. Realm A name of the protected space on the server; a server can have multiple such spaces, each with a distinct name and authentication mechanisms.</description>
    </item>
    
    <item>
      <title>Response encodings and compression</title>
      <link>https://www.wikiod.com/http/response-encodings-and-compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/response-encodings-and-compression/</guid>
      <description>HTTP compression # The HTTP message body can be compressed (since HTTP/1.1). Either by the server compresses the request and adds a Content-Encoding header, or by a proxy does and adds a Transfer-Encoding header.
A client may send an Accept-Encoding request header to indicate which encodings it accepts.
The most commonly used encodings are:
gzip - deflate algorithm (LZ77) with CRC32 checksum implemented in &amp;ldquo;gzip&amp;rdquo; file&amp;rsquo;s compression program (RFC1952)
deflate - &amp;ldquo;zlib&amp;rdquo; data format (RFC1950), deflate algorithm (hybrid LZ77 and Huffman) with Adler32 checksum</description>
    </item>
    
    <item>
      <title>HTTP for APIs</title>
      <link>https://www.wikiod.com/http/http-for-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/http-for-apis/</guid>
      <description>HTTP APIs use a wide spectrum of HTTP verbs and typically return JSON or XML responses.
Create a resource # Not everyone agrees on what the most semantically correct method for resource creation is. Thus, your API could accept POST or PUT requests, or either.
The server should respond with 201 Created if the resource was successfully created. Pick the most appropriate error code if it was not.
For example, if you provide an API to create employee records, the request/response might look like this:</description>
    </item>
    
    <item>
      <title>Cross Origin and Access Control</title>
      <link>https://www.wikiod.com/http/cross-origin-and-access-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/http/cross-origin-and-access-control/</guid>
      <description>Cross-origin resource sharing is designed to allow dynamic requests between domains, often using techniques such as AJAX. While the scripting does most of the work, the HTTP server must support the request using the correct headers.
Client: sending a cross-origin resource sharing (CORS) request # A cross-origin request must be sent including the Origin header. This indicates from where the request originated. For example, a cross-origin request from http://example.com to http://example.</description>
    </item>
    
  </channel>
</rss>

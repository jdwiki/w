<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Basic .NET Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/vb-dotnet/</link>
    <description>Recent content in Visual Basic .NET Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/vb-dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Visual Basic .NET Language</title>
      <link>https://www.wikiod.com/vb-dotnet/getting-started-with-visual-basic-net-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/getting-started-with-visual-basic-net-language/</guid>
      <description>Hello World # First, install a version of Microsoft Visual Studio, including the free Community edition. Then, create a Visual Basic Console Application project of type Console Application, and the following code will print the string &#39;Hello World&#39; to the Console:
Module Module1 Sub Main() Console.WriteLine(&amp;quot;Hello World&amp;quot;) End Sub End Module Then, save and press F5 on the keyboard (or go to the Debug menu, then click Run without Debug or Run) to compile and run the program.</description>
    </item>
    
    <item>
      <title>Visual Basic 14.0 Features</title>
      <link>https://www.wikiod.com/vb-dotnet/visual-basic-140-features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/visual-basic-140-features/</guid>
      <description>Visual Basic 14 is the version of Visual Basic that was shipped as part of Visual Studio 2015.
This version was rewritten from scratch in about 1.3 million lines of VB. Many features were added to remove common irritations and to make common coding patterns cleaner.
The version number of Visual Basic went straight from 12 to 14, skipping 13. This was done to keep VB in line with the version numbering of Visual Studio itself.</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://www.wikiod.com/vb-dotnet/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/array/</guid>
      <description>Dim myArray(2) As Integer someFunc(myArray) An array is an index-ordered collection of objects. The type of object is defined by the type given in the array declaration.
Arrays in Visual Basic .NET are most commonly (and by default) zero (0) based, meaning that the first index is 0. An array of 10 elements will have an index range of 0-9. When accessing array elements, the maximum accessible index is one less than the total number of elements.</description>
    </item>
    
    <item>
      <title>Looping</title>
      <link>https://www.wikiod.com/vb-dotnet/looping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/looping/</guid>
      <description>For&amp;hellip;Next # For&amp;hellip;Next loop is used for repeating the same action for a finite number of times. The statements inside the following loop will be executed 11 times. The first time, i will have the value 0, the second time it will have the value 1, the last time it will have the value 10.
For i As Integer = 0 To 10 &#39;Execute the action Console.Writeline(i.ToString) Next Any integer expression can be used to parameterize the loop.</description>
    </item>
    
    <item>
      <title>Enum</title>
      <link>https://www.wikiod.com/vb-dotnet/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/enum/</guid>
      <description>GetNames() # Returns the names of constants in the specified Enum as a string array:
Module Module1 Enum Size Small Medium Large End Enum Sub Main() Dim sizes = [Enum].GetNames(GetType(Size)) For Each size In sizes Console.WriteLine(size) Next End Sub End Module Output:
Small
Medium
Large
HasFlag() # The HasFlag() method can be used to check if a flag is set.
Module Module1 &amp;lt;Flags&amp;gt; Enum Material Wood = 1 Plastic = 2 Metal = 4 Stone = 8 End Enum Sub Main() Dim houseMaterials As Material = Material.</description>
    </item>
    
    <item>
      <title>Option Strict</title>
      <link>https://www.wikiod.com/vb-dotnet/option-strict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/option-strict/</guid>
      <description>Syntax # Option Strict { On | Off } Option Strict On is a recommended good practice with Visual Basic .Net. It helps you as the developer to produce cleaner, more stable, more bug-free, more maintainable code. In some cases it may also help you write programs with better performance, avoiding things such as Implicit Conversion.
On is not the default setting for a new installation of Visual Studio. It should be one of the first things changed before beginning programming if you are going to use VB.</description>
    </item>
    
    <item>
      <title>OOP Keywords</title>
      <link>https://www.wikiod.com/vb-dotnet/oop-keywords/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/oop-keywords/</guid>
      <description>Defining a class # Classes are vital aspects of OOP. A class is like the &amp;ldquo;blueprint&amp;rdquo; of an object. An object has the properties of a class, but the characteristics are not defined within the class itself. As each object can be different, they define their own characteristics.
Public Class Person End Class Public Class Customer End Class A class can also contain subclasses. A subclass inherits the same properties and behaviors as its parent class, but can have its own unique properties and classes.</description>
    </item>
    
    <item>
      <title>Introduction to Syntax</title>
      <link>https://www.wikiod.com/vb-dotnet/introduction-to-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/introduction-to-syntax/</guid>
      <description>Intellisense Helper # One interesting thing is the ability to add you own comments into Visual Studio Intellisense. So you can make your own written functions and classes self-explanatory. To do so, you must type the comment symbol three times the line above your function.
Once done, Visual Studio will automatically add an XML documentation :
&#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; This function returns a hello to your name &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;Name&amp;quot;&amp;gt;Your Name&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; &#39;&#39;&#39; &amp;lt;remarks&amp;gt;&amp;lt;/remarks&amp;gt; Public Function Test(Name As String) As String Return &amp;quot;Hello &amp;quot; &amp;amp; Name End Function After that, if you type in your Test function somewhere in your code, this little help will show up :</description>
    </item>
    
    <item>
      <title>Threading</title>
      <link>https://www.wikiod.com/vb-dotnet/threading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/threading/</guid>
      <description>Performing thread-safe calls using Control.Invoke() # Using the Control.Invoke() method you may move the execution of a method or function from a background thread to the thread that the control was created on, which is usually the UI (User Interface) thread. By doing so your code will be queued to run on the control&amp;rsquo;s thread instead, which removes the possibility of concurrency.
The Control.InvokeRequired property should also be checked in order to determine whether you need to invoke, or if the code is already running on the same thread as the control.</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/vb-dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vb-dotnet/linq/</guid>
      <description>LINQ (Language Integrated Query) is an expression that retrieves data from a data source. LINQ simplifies this situation by offering a consistent model for working with data across various kinds of data sources and formats. In a LINQ query, you are always working with objects. You use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET Datasets, .NET collections, and any other format for which a LINQ provider is available.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AutoHotkey Tutorial on </title>
    <link>https://www.wikiod.com/docs/autohotkey/</link>
    <description>Recent content in AutoHotkey Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/autohotkey/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with AutoHotkey</title>
      <link>https://www.wikiod.com/autohotkey/getting-started-with-autohotkey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/getting-started-with-autohotkey/</guid>
      <description>Hello World # Show a &amp;ldquo;Hello World!&amp;rdquo; in message box.
MsgBox, Hello World! Show a &amp;ldquo;Hello World!&amp;rdquo; in tooltip.
#Persistent Tooltip, Hello World! Show a &amp;ldquo;Hello World!&amp;rdquo; message in the traybar edit.
#Persistent TrayTip,, Hello World! Prints &amp;ldquo;Hello, World&amp;rdquo; to Standard Output (stdout).
FileAppend, % &amp;quot;Hello, World&amp;quot;, * Installation or Setup # From Autohotkey Site Documentation
Go to the AutoHotkey Homepage. Click Download, once downloaded run the executable. During installation of AutoHotkey, you will be asked to choose from UNICODE or ANSI.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/autohotkey/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/arrays/</guid>
      <description>Creating and Initializing Simple Arrays # Intro # An array is a container object that holds a number of values. In the following image you can see an array with size 10, the first element indexed 1 and the last element 10.
Autohotkey offers a few ways of defining and creating arrays.
Array := [] Array := Array() Creating and initializing arrays with N number of items # Array := [Item1, Item2, .</description>
    </item>
    
    <item>
      <title>Use functions instead of labels</title>
      <link>https://www.wikiod.com/autohotkey/use-functions-instead-of-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/use-functions-instead-of-labels/</guid>
      <description>AutoHotkey used to heavily rely on labels until version 1.1.20. It&amp;rsquo;s reliance on labels had very serious disadvantages. The main one being that labels usually execute in the global scope meaning that any variable defined within a label will be globally available. This sounds great until you realize that for example you can&amp;rsquo;t just use other peoples libraries without making sure that their variables don&amp;rsquo;t interfere with yours.
Working in the global scope when not necessary is simply bad practice.</description>
    </item>
    
    <item>
      <title>Hotkey Scripts</title>
      <link>https://www.wikiod.com/autohotkey/hotkey-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/hotkey-scripts/</guid>
      <description>Syntax # keybindings:: ::abbreviation:: Return Parameters # Keybindings Details ^ Ctrl key ! Alt key + Shift key # Windows key {enter} send enter key {tab} send tab key * wildcard, any key can be pressed down ~ key&amp;rsquo;s native function will not be blocked &amp;lt;symbol specifies left key (&amp;lt;+ is left shift) &amp;gt;symbol specifies right key Hotstring # To make a script to replace a phrase use the ::abbreviation:: hotstring syntax.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.wikiod.com/autohotkey/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/hello-world/</guid>
      <description>Hello World examples # Show a &amp;ldquo;Hello World!&amp;rdquo; in message box. # MsgBox, Hello World! Show &amp;ldquo;Hello World!&amp;rdquo; stored in variable MyString in message box. # MyString := &amp;quot;Hello World!&amp;quot; MsgBox, %MyString% Show a &amp;ldquo;Hello World!&amp;rdquo; in tooltip. # #Persistent Tooltip, Hello World! Show a &amp;ldquo;Hello World!&amp;rdquo; message in the traybar edit. # #Persistent TrayTip,, Hello World! Show &amp;ldquo;Hello World!&amp;rdquo; in a GUI window. # Gui, Add, Text,, Hello World! Gui, Add, Edit,, Hello World!</description>
    </item>
    
    <item>
      <title>Built-in Variables and Functions</title>
      <link>https://www.wikiod.com/autohotkey/built-in-variables-and-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/built-in-variables-and-functions/</guid>
      <description>AutoHotkey comes with many built-in functions and variables which can be used anywhere inside a script.
For a full list including explanations, see:
List of built-in variables List of built-in functions Determining the User Idle Time # if(A_TimeIdlePhysical &amp;gt; 60000) { ; 60,000 milliseconds WinClose, ahk_class Chrome_WidgetWin_1 MsgBox, Google Chrome was closed due to user inactivity. } This check could be done periodically, e.g. using SetTimer.
Auto-insert current weekday&amp;rsquo;s name # This example inserts/sends the current day of the week&amp;rsquo;s full name (e.</description>
    </item>
    
    <item>
      <title>Input Field</title>
      <link>https://www.wikiod.com/autohotkey/input-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/input-field/</guid>
      <description>To get a user&amp;rsquo;s input and store it in a variable, you can use the InputBox command. The script will not continue executing commands until the user either presses &amp;lsquo;OK&amp;rsquo; or &amp;lsquo;Cancel&amp;rsquo;.
&amp;lsquo;OK&amp;rsquo; will close the window and save the user&amp;rsquo;s input &amp;lsquo;Cancel&amp;rsquo; will close the window, discarding the user&amp;rsquo;s input
Parameters # InputBox, OutputVar [, Title, Prompt, HIDE, Width, Height, X, Y, Timeout, Default] What each Option Means OutputVar The variable the user&amp;rsquo;s input will be saved to Title The name of the input box Prompt Text inside of the input box HIDE Displays the user&amp;rsquo;s input as asterisks to hide the input - type HIDE to enable Width The width of the input box Height The height of the input box X The amount of pixels from the left edge of the screen that the top-left corner of the input box will be Y The amount of pixels from the top edge of the screen that the top-left corner of the input box will be Timeout Automatically closes the input box and saves the user&amp;rsquo;s input after this time in miliseconds Default The text that will appear in the input box&amp;rsquo;s editable field when it is opened An input box is a GUI item, so it will be treated as a GUI item.</description>
    </item>
    
    <item>
      <title>Open a File in a Script</title>
      <link>https://www.wikiod.com/autohotkey/open-a-file-in-a-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/autohotkey/open-a-file-in-a-script/</guid>
      <description>Different ways to open a file to work with in a script.
Open a File through Windows Explorer # Inside the script, use the first line to store the very first variable (in this example, %1%) with a name to deal with. Example: OpenWithFile = %1%
Once you open a file with this script through Windows (Right click on any file on MS Windows and choose &amp;lsquo;Open with&amp;hellip;&amp;rsquo; then select the compiled version of the script such as script.</description>
    </item>
    
  </channel>
</rss>

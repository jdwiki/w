<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>phalcon Tutorial on </title>
    <link>https://www.wikiod.com/docs/phalcon/</link>
    <description>Recent content in phalcon Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/phalcon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with phalcon</title>
      <link>https://www.wikiod.com/phalcon/getting-started-with-phalcon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/getting-started-with-phalcon/</guid>
      <description>Installation # Download installation files from Phalcon dedicated download page, as well as finding manuals on making Phalcon work with popular platforms.
Windows # Put the actual DLL files in a directory proper to extend PHP functionality. For XAMPP use xampp\php\ext\ - and for WAMP use wamp\bin\php\php*\ext\ derectory. Then enable Phalcon by adding extension=php_phalcon.dll to the appropriate php.ini file. Restart the web server and Phalcon should become available.
Linux platforms # To compile the desired version of Phalcon, first install PHP sources along with some other necessary tools:</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://www.wikiod.com/phalcon/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/validation/</guid>
      <description>API reference to the validation class can be found here: https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html If there is entity provided in \Phalcon\Validation you don&amp;rsquo;t need to pass model key in \Phalcon\Validation\Validator\Uniqueness Built in Validators # PresenceOf - Validates that a value is not null or empty string
$validator-&amp;gt;add(&#39;name&#39;, new \Phalcon\Validation\Validator\PresenceOf([ &#39;message&#39; =&amp;gt; &#39;The name is required&#39; ])); Email - Checks if a value has a correct e-mail format
$validator-&amp;gt;add(&#39;email&#39;, new \Phalcon\Validation\Validator\Email([ &#39;message&#39; =&amp;gt; &#39;The e-mail is not valid&#39; ])); Identical - Checks if a value is identical to other</description>
    </item>
    
    <item>
      <title>Working with ACL</title>
      <link>https://www.wikiod.com/phalcon/working-with-acl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/working-with-acl/</guid>
      <description>Syntax # You can use &amp;lsquo;*&amp;rsquo; as second and third parameter in Phalcon\Acl::allow and Phalcon\Acl::deny methods. This will mean any resource and action respectively.
Second argument in Phalcon\Acl::addRole tells from which role inheritance access.
You should serialize your ACL to some file or cache backend instead of creating it on each request.
Also it&amp;rsquo;s good idea to keep acl in seperated file.
Phalcon\Acl is able to send events to event manager, there are two events - beforeCheckAccess and afterCheckAccess.</description>
    </item>
    
    <item>
      <title>Routing and dispatching</title>
      <link>https://www.wikiod.com/phalcon/routing-and-dispatching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/routing-and-dispatching/</guid>
      <description>RESTful API Routes for Multi Module Application # // Define new router group $api = new \Phalcon\Mvc\Router\Group([ &#39;module&#39; =&amp;gt; &#39;api&#39;, ]); $api-&amp;gt;setPrefix(&#39;/api/v1&#39;); // API routes (Maps to Cotnroller::Action) $api-&amp;gt;addGet(&#39;/users&#39;, &#39;Users::index&#39;); $api-&amp;gt;addGet(&#39;/users/search/{query}&#39;, &#39;Users::search&#39;); $api-&amp;gt;addGet(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::fetch&#39;); $api-&amp;gt;addPost(&#39;/users&#39;, &#39;Users::add&#39;); $api-&amp;gt;addPut(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::edit&#39;); $api-&amp;gt;addDelete(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::delete&#39;); // Add API routes to main router $router-&amp;gt;mount($api); Example of creating a user:
curl -i -X POST -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;John Snow&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;King of the North&amp;quot;}&#39; http://example.com/api/v1/users Dynamically set module routes # $router = new \Phalcon\Mvc\Router(false); $router-&amp;gt;removeExtraSlashes(true); $request = new \Phalcon\Http\Request(); $action = strtolower($request-&amp;gt;getMethod()); // get, post, etc.</description>
    </item>
    
    <item>
      <title>Database Management</title>
      <link>https://www.wikiod.com/phalcon/database-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/database-management/</guid>
      <description>Database management using Phalcon Model # A model for a new table can be created by running the following commend from the terminal root location:
phalcon model &amp;lt;table-name&amp;gt; Let us take the Model Users.
SELECT
There are two default functions to do select operation in phalcon, find() and findFirst()
findFirst() is used to get the first row which satisfies the conditions that we are passing. It returns a single object with the data in first row.</description>
    </item>
    
    <item>
      <title>Events Manager</title>
      <link>https://www.wikiod.com/phalcon/events-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/events-manager/</guid>
      <description>Dynamic ACL check # Create a Security class to run your ACL logic.
&amp;lt;?php namespace Plugins; use Phalcon\Events\Event; use Phalcon\Mvc\Dispatcher; use Phalcon\Acl; use Phalcon\Acl\Role; use Phalcon\Acl\Resource; use Phalcon\Acl\Adapter\Memory as AclList; class Security extends \Phalcon\Mvc\User\Plugin { public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher) { // your acl logic here } } Hook the Security class to the dispatcher, to run on beforeExecuteRoute.
$di = new \Phalcon\DI\FactoryDefault(); $eventsManager = $di[&#39;eventsManager&#39;]; $di-&amp;gt;setShared(&#39;dispatcher&#39;, function() use ($eventsManager) { $eventsManager-&amp;gt;attach(&#39;dispatch:beforeExecuteRoute&#39;, new \Plugins\Security); $dispatcher = new \Phalcon\Mvc\Dispatcher; $dispatcher-&amp;gt;setEventsManager($eventsManager); return $dispatcher; }); </description>
    </item>
    
    <item>
      <title>Incubator</title>
      <link>https://www.wikiod.com/phalcon/incubator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/incubator/</guid>
      <description>Introduction # The Phalcon Incubator can be used by the community to experiment with new features or expand onto the existing Phalcon adapters, prototypes or functionalities.
Anything in the Incubator can be potentially corporated into the framework.
Github repository: https://github.com/phalcon/incubator
Installation # Installation via Composer # The easiest way to install the Incubator is by using Composer.
Install Composer and create a new composer.json file in the root of your project.</description>
    </item>
    
    <item>
      <title>Filtering and Sanitizing</title>
      <link>https://www.wikiod.com/phalcon/filtering-and-sanitizing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phalcon/filtering-and-sanitizing/</guid>
      <description>Convenient in-model sanitizing # Set a convenience method in your base model
namespace Base; class Model extends \Phalcon\Mvc\Model { public function sanitize($attr, $filterName) { $filter = $this-&amp;gt;getDI()-&amp;gt;get(&#39;filter&#39;); $this-&amp;gt;$attr = $filter-&amp;gt;sanitize($this-&amp;gt;$attr, $filterName); } } Then use like so
class User extends \Base\Model { public function beforeValidation() { $this-&amp;gt;sanitize(&#39;id&#39;, &#39;int&#39;); // input $this-&amp;gt;id: 123abc // output: 123 $this-&amp;gt;sanitize(&#39;email&#39;, &#39;email&#39;); // input $this-&amp;gt;email: youre(-)mail@dom/ain.com // output: youremail@domain.com $this-&amp;gt;sanitize(&#39;wage&#39;, &#39;float&#39;); // input $this-&amp;gt;wage: +1234ab.56cd // output: 1234.</description>
    </item>
    
  </channel>
</rss>

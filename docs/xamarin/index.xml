<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xamarin Tutorial on </title>
    <link>https://www.wikiod.com/docs/xamarin/</link>
    <description>Recent content in xamarin Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xamarin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with xamarin</title>
      <link>https://www.wikiod.com/xamarin/getting-started-with-xamarin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin/getting-started-with-xamarin/</guid>
      <description>Installing Xamarin Studio on OS X # The first step to start Xamarin development on an OS X machine, is to download and install Xamarin Studio Community version from the official website. A few fields need to be filled to download the installer as shown in the picture below.
The Xamarin Unified installer takes care of identifying and installing all the required non-Xamarin components (e.g. Android SDK) on top of Xamarin.</description>
    </item>
    
    <item>
      <title>Code Sharing Between Projects</title>
      <link>https://www.wikiod.com/xamarin/code-sharing-between-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin/code-sharing-between-projects/</guid>
      <description>The Bridge Pattern # The Bridge pattern is one of the most basic Inversion of Control design patterns. For Xamarin, this pattern is used to reference platform-dependent code from a platform-independent context. For example: using Android&amp;rsquo;s AlertDialog from a Portable Class Library or Xamarin Forms. Neither of those contexts knows what an AlertDialog object is, so you must wrap it in a box for them to use.
// Define a common interface for the behavior you want in your common project (Forms/Other PCL) public interface IPlatformReporter { string GetPlatform(); } // In Android/iOS/Win implement the interface on a class public class DroidReporter : IPlatformReporter { public string GetPlatform() { return &amp;quot;Android&amp;quot;; } } public class IosReporter : IPlatformReporter { public string GetPlatform() { return &amp;quot;iOS&amp;quot;; } } // In your common project (Forms/Other PCL), create a common class to wrap the native implementations public class PlatformReporter : IPlatformReporter { // A function to get your native implemenation public static func&amp;lt;IPlatformReporter&amp;gt; GetReporter; // Your native implementation private IPlatformReporter _reporter; // Constructor accepts native class and stores it public PlatformReporter(IPlatformReporter reporter) { _reporter = GetReporter(); } // Implement interface behavior by deferring to native class public string GetPlatform() { return _reporter.</description>
    </item>
    
    <item>
      <title>Object validation  by Annotations</title>
      <link>https://www.wikiod.com/xamarin/object-validation--by-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin/object-validation--by-annotations/</guid>
      <description>mvc.net introduces data anotations for model validation. This can also be done in Xamarin
Simple example # Add nuget package System.ComponentModel.Annotations
Define a class:
public class BankAccount { public enum AccountType { Saving, Current } [Required(ErrorMessage=&amp;quot;First Name Required&amp;quot;)] [MaxLength(15,ErrorMessage=&amp;quot;First Name should not more than 1`5 character&amp;quot;)] [MinLength(3,ErrorMessage=&amp;quot;First Name should be more than 3 character&amp;quot;)] public string AccountHolderFirstName { get; set; } [Required(ErrorMessage=&amp;quot;Last Name Required&amp;quot;)] [MaxLength(15,ErrorMessage=&amp;quot;Last Name should not more than 1`5 character&amp;quot;)] [MinLength(3,ErrorMessage=&amp;quot;Last Name should be more than 3 character&amp;quot;)] public string AccountHolderLastName { get; set; } [Required] [RegularExpression(&amp;quot;^[0-9]+$&amp;quot;, ErrorMessage = &amp;quot;Only Number allowed in AccountNumber&amp;quot;)] public string AccountNumber { get; set; } public AccountType AcType { get; set; } } Define a validator:</description>
    </item>
    
  </channel>
</rss>

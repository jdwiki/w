<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>amazon-dynamodb Tutorial on </title>
    <link>https://www.wikiod.com/docs/amazon-dynamodb/</link>
    <description>Recent content in amazon-dynamodb Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/amazon-dynamodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with amazon-dynamodb</title>
      <link>https://www.wikiod.com/amazon-dynamodb/getting-started-with-amazon-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/getting-started-with-amazon-dynamodb/</guid>
      <description>Installation or Setup # DynamoDB is a fully managed service provided by AWS. It does not need to be installed or configured. AWS is responsible for all administrative burdens of operating, scalling and backup/restore of the distributed database.
Introduction # DynamoDB is a Distributed NoSQL database, based on key-value architecture, fully managed by Amazon Web Services. It was designed to provide scalability, redundancy and failover in predictable performance.</description>
    </item>
    
    <item>
      <title>How to create a DynamoDB Table</title>
      <link>https://www.wikiod.com/amazon-dynamodb/how-to-create-a-dynamodb-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/how-to-create-a-dynamodb-table/</guid>
      <description>When creating tables make sure to pay attention to the choice of attributes for the partition and sort keys. See the published guidelines for working with tables.
Create Table in Java using Document API # In the following example we will be creating a table called Membership using the AWS Java SDK for DynamoDB. The table will consist of items that represent team assignments. The table will be partitioned by TeamID.</description>
    </item>
    
    <item>
      <title>How to insert data into table using DynamoDb?</title>
      <link>https://www.wikiod.com/amazon-dynamodb/how-to-insert-data-into-table-using-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/how-to-insert-data-into-table-using-dynamodb/</guid>
      <description>Import a CSV file into a DynamoDB table using boto (Python package) # The Python function import_csv_to_dynamodb(table_name, csv_file_name, colunm_names, column_types) below imports a CSV file into a DynamoDB table. Column names and column must be specified. It uses boto. Below is the function as well as a demo (main()) and the CSV file used.
import boto MY_ACCESS_KEY_ID = &#39;copy your access key ID here&#39; MY_SECRET_ACCESS_KEY = &#39;copy your secrete access key here&#39; def do_batch_write(items, table_name, dynamodb_table, dynamodb_conn): &#39;&#39;&#39; From https://gist.</description>
    </item>
    
    <item>
      <title>Batch Operations Things to know</title>
      <link>https://www.wikiod.com/amazon-dynamodb/batch-operations-things-to-know/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/batch-operations-things-to-know/</guid>
      <description>Database is an integral part of any application and performance and persistance are real challenges faced by any web application. NoSql databases are no different in this matter and need to be dealt carefully. DynamoDB being one of the NoSQL database that is provided by Amazon Web Services support batch operations in addition to the CRUD operations. Lets start with Batch Operations. In this example we will learn how we can make use of Dynamo DB&amp;rsquo;s JAVA SDK to perform Batch Inserts.</description>
    </item>
    
    <item>
      <title>Using AWS DynamoDb with the AWS .NET SDK</title>
      <link>https://www.wikiod.com/amazon-dynamodb/using-aws-dynamodb-with-the-aws-net-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/using-aws-dynamodb-with-the-aws-net-sdk/</guid>
      <description>Amazon DynamoDB is a fast NoSQL database service offered by Amazon Web Services (AWS). DynamoDB can be invoked from .NET applications by using the AWS SDK for .NET. The SDK provides three different models for communicating with DynamoDB. This topic is introduces the various APIs in each model.
The Models # The SDK provides three ways of communicating with DynamoDB. Each one offers tradeoffs between control and ease of use. See the AWS .</description>
    </item>
    
    <item>
      <title>Dynamodb delete data over time</title>
      <link>https://www.wikiod.com/amazon-dynamodb/dynamodb-delete-data-over-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-dynamodb/dynamodb-delete-data-over-time/</guid>
      <description>Removing old data from dynamodb using a date attribute.
My use case: removing old data from dynamodb using a date attribute.
Important things to know:
You can&amp;rsquo;t query a table with using only range key attribute (date for example). You can only query a table using hash or hash+range key. You can&amp;rsquo;t query a table using a hash key with &amp;lsquo;&amp;lt;&amp;rsquo; / &amp;lsquo;&amp;gt;&amp;rsquo; operations, only &amp;lsquo;=&amp;rsquo;. Possible Solutions:
Scanning the whole table - this could be very costly My chosen solution - Defining an index with range key for the date and with a hash key that would be pretty decent such as the day of year.</description>
    </item>
    
  </channel>
</rss>

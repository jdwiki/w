<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PubNub Tutorial on </title>
    <link>https://www.wikiod.com/docs/pubnub/</link>
    <description>Recent content in PubNub Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/pubnub/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with PubNub</title>
      <link>https://www.wikiod.com/pubnub/getting-started-with-pubnub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/getting-started-with-pubnub/</guid>
      <description>Publish on Subscribe Success (connect) # This example show how to subscribe, and once that is successful, publishing a message to that channel. It also demonstrates the full set of parameters that can be included in the subscribe&amp;rsquo;s message callback function.
pubnub = PUBNUB({ publish_key : &#39;your_pub_key&#39;, subscribe_key : &#39;your_sub_key&#39; }); pubnub.subscribe({ channel : &amp;quot;channel-1&amp;quot;, message : function (message, envelope, channelOrGroup, time, channel) { console.log( &amp;quot;Message Received.&amp;quot; + &amp;quot;\n&amp;quot; + &amp;quot;Channel or Group: &amp;quot; + JSON.</description>
    </item>
    
    <item>
      <title>Presence</title>
      <link>https://www.wikiod.com/pubnub/presence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/presence/</guid>
      <description>Presence in JavaScript # Presence works by sending messages when a user joins, leaves, or times out from a particular channel. You can listen for these messages to track who is in a channel, and how long since they did anything.
First, make sure each user as a UUID. Set this when you initialize PubNub:
var pubnub = PUBNUB({ publish_key: &#39;my_pub_key&#39;, subscribe_key: &#39;my_sub_key&#39;, uuid: &#39;1234_some_uuid&#39; }); Now when you connect to a channel, add an extra listener for join events.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.wikiod.com/pubnub/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/hello-world/</guid>
      <description>&amp;lt;init&amp;gt; (i.e. require (&amp;quot;pubnub&amp;quot;))
Initialize an instance of PubNub to invoke operations.
Parameter Details publish_key String - your publish key from your PubNub Admin Dashboard account subscribe_key String - your publish key from your PubNub Admin Dashboard account subscribe
Subscribe to a channel(s) and provide a means to receive messages published to the channel(s).
Parameter Details channel String - channel name or comma-delimited list of channel names message function - the callback function that will receive messages published on the subscribe channels connect function - the callback function that will be called when the subscription to the channels is successful publish</description>
    </item>
    
    <item>
      <title>UUIDs</title>
      <link>https://www.wikiod.com/pubnub/uuids/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/uuids/</guid>
      <description>JavaScript/Web SDK # For JavaScript, here is the code we recommend for generating, persisting and retrieving a UUID. This could be wrapped in a function can called directly from the PUBNUB.init function rather than the two step inline solution below.
// get/create/store UUID var UUID = PUBNUB.db.get(&#39;session&#39;) || (function(){ var uuid = PUBNUB.uuid(); PUBNUB.db.set(&#39;session&#39;, uuid); return uuid; })(); // init PUBNUB object with UUID value var pubnub = PUBNUB.init({ publish_key: pubKey, subscribe_key: subKey, uuid: UUID }); Android/Java SDK # For Android, here is the code we recommend for generating, persisting and retrieving a UUID.</description>
    </item>
    
    <item>
      <title>Access Manager</title>
      <link>https://www.wikiod.com/pubnub/access-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/access-manager/</guid>
      <description>pubnub access manager at server side # PubNub Access Manager (PAM) extends PubNub&amp;rsquo;s existing security framework by allowing developers to create and enforce secure access to channels throughout the PubNub Real Time Network.
Access Manager allows you to manage granular permissions for your realtime apps and data streams, create multiple permission levels, grant and revoke access, and audit user access.
To use Access Manager, you need to enable Access Manager in the Admin Dashboard.</description>
    </item>
    
    <item>
      <title>Message Filtering</title>
      <link>https://www.wikiod.com/pubnub/message-filtering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/message-filtering/</guid>
      <description>Stream Filter provides the ability to filter messages on the server before they are sent to a subscriber is a popular request. With the introduction of our v4.x SDKs, you now have the ability to do so using message meta data.
Prevent Receiving Your Own Messages Using Objective-C # Setting a filter applies to all channels that you will subscribe to from that particular client. This client filter excludes messages that have this subscriber&amp;rsquo;s UUID set at the sender&amp;rsquo;s UUID:</description>
    </item>
    
    <item>
      <title>Channel Specific Callbacks for v4 SDKs</title>
      <link>https://www.wikiod.com/pubnub/channel-specific-callbacks-for-v4-sdks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/channel-specific-callbacks-for-v4-sdks/</guid>
      <description>JavaScript v4 SDK Channel Specific Callbacks # In PubNub JavaScript v3, you could implement a unique callback for every channel that you subscribed to as long as you called the subscribe function for each channel and implemented the callback in that subscribe like this:
var pubnub = new PubNub({ publishKey: &amp;quot;your-pub-key&amp;quot;, subscribeKey: &amp;quot;your-sub-key&amp;quot; }); pubnub.subscribe({ channel: &#39;ch1&#39;, message: function (m) { console.log(m + &amp;quot; ch1 callback&amp;quot;); } }); pubnub.subscribe({ channel: &#39;ch2&#39;, message: function (m) { console.</description>
    </item>
    
    <item>
      <title>Stream Controller Channel Groups</title>
      <link>https://www.wikiod.com/pubnub/stream-controller-channel-groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/stream-controller-channel-groups/</guid>
      <description>When using Channel Groups, you should not add or remove channels in your client side applications. This example shows adding channels to a channel group and subscribing to that channel group for simplicity sake. But in a real world scenario, you should have your server do all the add/remove of channels to/from channel groups. When you enable Access Manager, you will need the manage permission to add/remove channels to/from channel groups and you should never grant the manage permission to clients for security reasons.</description>
    </item>
    
    <item>
      <title>webhook</title>
      <link>https://www.wikiod.com/pubnub/webhook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/webhook/</guid>
      <description>pubnub webhook # Webhook Overview A WebHook is an HTTP callback: an HTTP POST that occurs when something happens; a simple event-notification via HTTP POST. A web application implementing WebHooks will POST a message to a URL when certain things happen.
PubNub Presence Pubnub presence all about the user presence at pubnub platform. it provides the presence of user when they are joining, leaving a channel or when there is a user&amp;rsquo;s state changes.</description>
    </item>
    
    <item>
      <title>Storage &amp; Playback</title>
      <link>https://www.wikiod.com/pubnub/storage--playback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pubnub/storage--playback/</guid>
      <description>Parameters # Parameter Type / Required / Default Description channel String / Yes Specifies channel to return history messages from. reverse Boolean / No / false Setting to true will traverse the time line in reverse starting with the oldest message first. Default is false. If both start and end arguments are provided, reverse is ignored and messages are returned starting with the newest message. limit Number / No / 100 Specifies the number of historical messages to return.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/vue-js/</link>
    <description>Recent content in Vue.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/vue-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Vue.js</title>
      <link>https://www.wikiod.com/vue-js/getting-started-with-vuejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/getting-started-with-vuejs/</guid>
      <description>&amp;ldquo;Hello, World!&amp;rdquo; Program # To start using Vue.js, make sure you have the script file included in your HTML. For example, add the following to your HTML.
&amp;lt;script src=&amp;quot;https://npmcdn.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Simple Example # HTML template # &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; JavaScript # new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue.js!&#39; } }) See a live demo of this example.
You might also want to check out the &amp;ldquo;Hello World&amp;rdquo; example made by Vue.</description>
    </item>
    
    <item>
      <title>Conditional Rendering</title>
      <link>https://www.wikiod.com/vue-js/conditional-rendering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/conditional-rendering/</guid>
      <description>Syntax # &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt;&amp;lt;element v-else=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if | v-else &amp;lt;template v-if=&amp;quot;condition&amp;quot;&amp;gt;...&amp;lt;/template&amp;gt; //templated v-if &amp;lt;element v-show=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-show It is very important to remember the difference between v-if and v-show. While their uses are almost identical, an element bound to v-if will only render into the DOM when it&amp;rsquo;s condition is true for the first time. When using the v-show directive, all elements are rendered into the DOM but are hidden using the display style if the condition is false!</description>
    </item>
    
    <item>
      <title>Lifecycle Hooks</title>
      <link>https://www.wikiod.com/vue-js/lifecycle-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/lifecycle-hooks/</guid>
      <description>Common Pitfalls: Accessing DOM from the ready() hook # A common usecase for the ready() hook is to access the DOM, e.g. to initiate a Javascript plugin, get the dimensions of an element etc.
The problem
Due to Vue&amp;rsquo;s asynchronous DOM update mechanism, it&amp;rsquo;s not guaranteed that the DOM has been fully updated when the ready() hook is called. This usually results in an error because the element is undefined.</description>
    </item>
    
    <item>
      <title>Custom Directives</title>
      <link>https://www.wikiod.com/vue-js/custom-directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/custom-directives/</guid>
      <description>Syntax # Vue.directive(id, definition); Vue.directive(id, update); //when you need only the update function. Parameters # Parameter Details id String - The directive id that will be used without the v- prefix. (Add the v- prefix when using it) definition Object - A definition object can provide several hook functions (all optional): bind, update, and unbind Basics # In addition to the default set of directives shipped in core, Vue.js also allows you to register custom directives.</description>
    </item>
    
    <item>
      <title>Props</title>
      <link>https://www.wikiod.com/vue-js/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/props/</guid>
      <description>camelCase &amp;lt;=&amp;gt; kebab-case # When defining the names of your props, always remember that HTML attribute names are case-insensitive. That means if you define a prop in camel case in your component definition&amp;hellip;
Vue.component(&#39;child&#39;, { props: [&#39;myProp&#39;], ... }); &amp;hellip;you must call it in your HTML component as my-prop.
Passing Data from parent to child with props # In Vue.js, every component instance has its own isolated scope, which means that if a parent component has a child component - the child component has its own isolated scope and the parent component has its own isolated scope.</description>
    </item>
    
    <item>
      <title>Using this in Vue</title>
      <link>https://www.wikiod.com/vue-js/using-this-in-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/using-this-in-vue/</guid>
      <description>One of the most common errors we find in Vue code on StackOverflow is the misuse of this. The most common mistakes fall generally in two areas, using this in callbacks for promises or other asynchronous functions and using arrow functions to define methods, computed properties, etc.
WRONG! Using an arrow function to define a method that refers to &amp;ldquo;this&amp;rdquo; # new Vue({ el:&amp;quot;#app&amp;quot;, data:{ foo: &amp;quot;bar&amp;quot; }, methods:{ // This is wrong!</description>
    </item>
    
    <item>
      <title>Slots</title>
      <link>https://www.wikiod.com/vue-js/slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/slots/</guid>
      <description>Important! Slots after render don&amp;rsquo;t guarantee order for positions for slots. Slot, which was the first, may have a different position after render.
Using Named Slots # Named slots work similarly to single slots but instead allow you to distribute content to different regions within your child component template.
Take the page component from the previous example but modify it&amp;rsquo;s template so it is as follows:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;slot name=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;main&amp;gt; &amp;lt;slot name=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; When using the page component we can now determine where content is placed via the slot attribute:</description>
    </item>
    
    <item>
      <title>VueJS &#43; Redux with Vua-Redux (Best Solution)</title>
      <link>https://www.wikiod.com/vue-js/vuejs--redux-with-vua-redux-best-solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/vuejs--redux-with-vua-redux-best-solution/</guid>
      <description>How to use Vua-Redux # Installing Vua Redux from NPM:
Install through:
npm i vua-redux --save Initialize: # ===============
// main.js
import Vue from &#39;vue&#39;; import { reduxStorePlugin } from &#39;vua-redux&#39;; import AppStore from &#39;./AppStore&#39;; import App from &#39;./Component/App&#39;; // install vua-redux Vue.use(reduxStorePlugin); new Vue({ store: AppStore, render(h) { return &amp;lt;App /&amp;gt; } }); // AppStore.js
import { createStore } from &#39;redux&#39;; const initialState = { todos: [] }; const reducer = (state = initialState, action) =&amp;gt; { switch(action.</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://www.wikiod.com/vue-js/vuex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/vuex/</guid>
      <description>Vuex is a state management pattern + library for Vue.js applications. It serves as a centralised store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion. It also integrates with Vue&amp;rsquo;s official dev tools extension to provide advanced features such as zero-config time-travel debugging and state snapshot export/import.
What is Vuex? # Vuex is an official plugin for Vue.</description>
    </item>
    
    <item>
      <title>Custom Filters</title>
      <link>https://www.wikiod.com/vue-js/custom-filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vue-js/custom-filters/</guid>
      <description>Syntax # Vue.filter(name, function(value){}); //Basic Vue.filter(name, function(value, begin, end){}); //Basic with wrapping values Vue.filter(name, function(value, input){}); //Dynamic Vue.filter(name, { read: function(value){}, write: function(value){} }); //Two-way Parameters # Parameter Details name String - desired callable name of the filter value [Callback] Any - value of the data passing into the filter begin [Callback] Any - value to come before the passed data end [Callback] Any - value to come after the passed data input [Callback] Any - user input bound to Vue instance for dynamic results Basic # Custom filters in Vue.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sorting Tutorial on </title>
    <link>https://www.wikiod.com/docs/sorting/</link>
    <description>Recent content in sorting Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sorting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sorting</title>
      <link>https://www.wikiod.com/sorting/getting-started-with-sorting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sorting/getting-started-with-sorting/</guid>
      <description>Installation or Setup # Detailed instructions on getting sorting set up or installed.</description>
    </item>
    
    <item>
      <title>Selection</title>
      <link>https://www.wikiod.com/sorting/selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sorting/selection/</guid>
      <description>In computer science, a selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.
The below image shows how the selection sort works-
Below pseudo code helps in creating a program(in any language) or understanding selection sort.</description>
    </item>
    
    <item>
      <title>Quick Sort</title>
      <link>https://www.wikiod.com/sorting/quick-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sorting/quick-sort/</guid>
      <description>Python # The below image shows the working of a quick sort.
Below example shows the working program for quick sort in python:
def quickSort(alist): quickSortHelper(alist,0,len(alist)-1) def quickSortHelper(alist,first,last): if first&amp;lt;last: splitpoint = partition(alist,first,last) quickSortHelper(alist,first,splitpoint-1) quickSortHelper(alist,splitpoint+1,last) def partition(alist,first,last): pivotvalue = alist[first] leftmark = first+1 rightmark = last done = False while not done: while leftmark &amp;lt;= rightmark and alist[leftmark] &amp;lt;= pivotvalue: leftmark = leftmark + 1 while alist[rightmark] &amp;gt;= pivotvalue and rightmark &amp;gt;= leftmark: rightmark = rightmark -1 if rightmark &amp;lt; leftmark: done = True else: temp = alist[leftmark] alist[leftmark] = alist[rightmark] alist[rightmark] = temp temp = alist[first] alist[first] = alist[rightmark] alist[rightmark] = temp return rightmark alist = [54,26,93,17,77,31,44,55,20] print(&amp;quot;Input:&amp;quot;) print(alist) quickSort(alist) print(&amp;quot;Output:&amp;quot;) print(alist) Below is the output of the code:</description>
    </item>
    
  </channel>
</rss>

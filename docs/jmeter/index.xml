<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache JMeter Tutorial on </title>
    <link>https://www.wikiod.com/docs/jmeter/</link>
    <description>Recent content in Apache JMeter Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jmeter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Apache JMeter</title>
      <link>https://www.wikiod.com/jmeter/getting-started-with-apache-jmeter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jmeter/getting-started-with-apache-jmeter/</guid>
      <description>Installation or Setup # Download a distributed archive from Binaries section of JMeter from Download Apache JMeter page.
Depending on the version you downloaded, check minimal Java version requirements and install Java if needed. Ensure the JAVA_HOME environment variable is set and points to a correct version.
Extract the distribution archive in the directory of your choice.
Open JMeter UI:
On Windows: navigate to &amp;lt;jmeter_location&amp;gt;\bin directory and run jmeterw.bat or jmeter.</description>
    </item>
    
    <item>
      <title>Apache JMeter Test scenario recording</title>
      <link>https://www.wikiod.com/jmeter/apache-jmeter-test-scenario-recording/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jmeter/apache-jmeter-test-scenario-recording/</guid>
      <description>Recording test scenarios is one of the most convenient ways to create test scripts. This is because test recordings let you mimic realistic user workflows, instead of having to manually create a test script. The recordings capture all browser requests to the web application, and then automatically create a jmx file that can be run in performance tests. By using JMeterâ€™s recording/playback functionality or 3rd party tools like BlazeMeter and BadBoy, testers can make their work 3 times faster.</description>
    </item>
    
    <item>
      <title>Apache JMeter Correlations</title>
      <link>https://www.wikiod.com/jmeter/apache-jmeter-correlations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jmeter/apache-jmeter-correlations/</guid>
      <description>In JMeter performance testing, Correlations means the ability to fetch dynamic data from the server response and to post it to the subsequent requests. This feature is critical for many aspects of testing, like token-based protected applications.
Correlation Using the Regular Expression Extractor in Apache JMeter # If you need to extract information from a text response, the easiest way is to use Regular Expressions. The matching pattern is very similar to the one used in Perl.</description>
    </item>
    
    <item>
      <title>Apache JMeter parameterization</title>
      <link>https://www.wikiod.com/jmeter/apache-jmeter-parameterization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jmeter/apache-jmeter-parameterization/</guid>
      <description>Parameterization is the creation of different data sets for different users in the same test script. For example, running multiple users with different credentials in the same script. This makes it one of the main aspects in performance tests creation.
Parameterization using external files # One of the common ways to parametrize your performance scripts is to use a CSV file. The best example of CSV input files usage is a login process.</description>
    </item>
    
  </channel>
</rss>

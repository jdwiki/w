<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cython Tutorial on </title>
    <link>https://www.wikiod.com/docs/cython/</link>
    <description>Recent content in cython Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/cython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with cython</title>
      <link>https://www.wikiod.com/cython/getting-started-with-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cython/getting-started-with-cython/</guid>
      <description>Hello World # A Cython pyx file needs to be translated to C code (cythonized) and compiled before it can be used from Python. A common approach is to create an extension module which is then imported in a Python program.
Code # For this example we create three files:
hello.pyx contains the Cython code. test.py is a Python script that uses the hello extension. setup.py is used to compile the Cython code.</description>
    </item>
    
    <item>
      <title>Wrapping C&#43;&#43;</title>
      <link>https://www.wikiod.com/cython/wrapping-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cython/wrapping-c-/</guid>
      <description>Wrapping a DLL: C++ to Cython to Python # This demonstrates a non-trivial example of wrapping a C++ dll with Cython. It will cover the following main steps:
Create an example DLL with C++ using Visual Studio. Wrap the DLL with Cython so that it may be called in Python. It is assumed that you have Cython installed and can successfully import it in Python.
For the DLL step, it is also assumed that you are familiar with creating a DLL in Visual Studio.</description>
    </item>
    
    <item>
      <title>Cython bundling</title>
      <link>https://www.wikiod.com/cython/cython-bundling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cython/cython-bundling/</guid>
      <description>Bundling a Cython program using pyinstaller # Start from a Cython program with a entrypoint:
def do_stuff(): cdef int a,b,c a = 1 b = 2 c = 3 print(&amp;quot;Hello World!&amp;quot;) print([a,b,c]) input(&amp;quot;Press Enter to continue.&amp;quot;) Create a setup.py file in the same folder:
from distutils.core import setup from Cython.Build import cythonize setup( name = &amp;quot;Hello World&amp;quot;, ext_modules = cythonize(&#39;program.pyx&#39;), ) Running it with python setup.py build_ext --inplace will produce a .</description>
    </item>
    
    <item>
      <title>Wrapping C Code</title>
      <link>https://www.wikiod.com/cython/wrapping-c-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cython/wrapping-c-code/</guid>
      <description>Using functions from a custom C library # We have a C library named my_random that produces random numbers from a custom distribution. It provides two functions that we want to use: set_seed(long seed) and rand() (and many more we do not need). In order to use them in Cython we need to
define an interface in the .pxd file and call the function in the .pyx file. Code # test_extern.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functional-programming Tutorial on </title>
    <link>https://www.wikiod.com/docs/functional-programming/</link>
    <description>Recent content in functional-programming Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with functional-programming</title>
      <link>https://www.wikiod.com/functional-programming/getting-started-with-functional-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/functional-programming/getting-started-with-functional-programming/</guid>
      <description>Pure functions # Pure functions are self-contained, and have no side effects. Given the same set of inputs, a pure function will always return the same output value.
The following function is pure:
function pure(data) { return data.total + 3; } However, this function is not pure as it modifies an external variable:
function impure(data) { data.total += 3; return data.total; } Example:
data = { total: 6 }; pure(data); // outputs: 9 impure(data); // outputs: 9 (but now data.</description>
    </item>
    
    <item>
      <title>Loops by Recursive and Tail Recursive Functions</title>
      <link>https://www.wikiod.com/functional-programming/loops-by-recursive-and-tail-recursive-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/functional-programming/loops-by-recursive-and-tail-recursive-functions/</guid>
      <description>As you already know, for the sake of immutability you can&amp;rsquo;t process data using for loops and while loops. So we have recursive functions to rescue.
non-recursive (where immutability isn&amp;rsquo;t a concern) # function sum(numbers) { var total = 0; for (var i = numbers.length - 1; i &amp;gt;= 0; i--) { total += numbers[i]; } return total; } It&amp;rsquo;s a procedural code with mutations (over total).
recursive to rescue # function sum(numbers) { if(numbers.</description>
    </item>
    
  </channel>
</rss>

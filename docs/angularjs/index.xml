<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AngularJS Tutorial on </title>
    <link>https://www.wikiod.com/docs/angularjs/</link>
    <description>Recent content in AngularJS Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with AngularJS</title>
      <link>https://www.wikiod.com/angularjs/getting-started-with-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/getting-started-with-angularjs/</guid>
      <description>Getting Started # Create a new HTML file and paste the following content:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, Angular&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-init=&amp;quot;name=&#39;World&#39;&amp;quot;&amp;gt; &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt; &amp;lt;input ng-model=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;span&amp;gt;Hello, {{ name }}!&amp;lt;/span&amp;gt; &amp;lt;p ng-bind=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Live demo
When you open the file with a browser, you will see an input field followed by the text Hello, World!. Editing the value in the input will update the text in real-time, without the need to refresh the whole page.</description>
    </item>
    
    <item>
      <title>Profiling and Performance</title>
      <link>https://www.wikiod.com/angularjs/profiling-and-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/profiling-and-performance/</guid>
      <description>7 Simple Performance Improvements # 1) Use ng-repeat sparingly # Using ng-repeat in views generally results in poor performance, particularly when there are nested ng-repeat&amp;rsquo;s.
This is super slow!
&amp;lt;div ng-repeat=&amp;quot;user in userCollection&amp;quot;&amp;gt; &amp;lt;div ng-repeat=&amp;quot;details in user&amp;quot;&amp;gt; {{details}} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Try to avoid nested repeats as much as possible. One way to improve the performance of ng-repeat is to use track by $index (or some other id field). By default, ng-repeat tracks the whole object.</description>
    </item>
    
    <item>
      <title>Custom Directives</title>
      <link>https://www.wikiod.com/angularjs/custom-directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/custom-directives/</guid>
      <description>Here you will learn about the Directives feature of AngularJS. Below you will find information on what Directives are, as well as Basic and Advanced examples of how to use them.
Parameters # Parameter Details scope Property to set the scope of the directive. It can be set as false, true or as an isolate scope: { @, =, &amp;lt;, &amp;amp; }. scope: falsy Directive uses parent scope. No scope created for directive.</description>
    </item>
    
    <item>
      <title>Built-in directives</title>
      <link>https://www.wikiod.com/angularjs/built-in-directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/built-in-directives/</guid>
      <description>Angular expressions - Text vs. Number # This example demonstrates how Angular expressions are evaluated when using type=&amp;quot;text&amp;quot; and type=&amp;quot;number&amp;quot; for the input element. Consider the following controller and view:
Controller
var app = angular.module(&#39;app&#39;, []); app.controller(&#39;ctrl&#39;, function($scope) { $scope.textInput = { value: &#39;5&#39; }; $scope.numberInput = { value: 5 }; }); View
&amp;lt;div ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;ctrl&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;textInput.value&amp;quot;&amp;gt; {{ textInput.value + 5 }} &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;numberInput.value&amp;quot;&amp;gt; {{ numberInput.value + 5 }} &amp;lt;/div&amp;gt; When using + in an expression bound to text input, the operator will concatenate the strings (first example), displaying 55 on the screen*.</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>https://www.wikiod.com/angularjs/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/controllers/</guid>
      <description>Syntax # &amp;lt;htmlElement ng-controller=&amp;ldquo;controllerName&amp;rdquo;&amp;gt; &amp;hellip; &amp;lt;/htmlElement&amp;gt; &amp;lt;script&amp;gt; app.controller(&amp;lsquo;controllerName&amp;rsquo;, controllerFunction); &amp;lt;/script&amp;gt; Your First Controller # A controller is a basic structure used in Angular to preserve scope and handle certain actions within a page. Each controller is coupled with an HTML view.
Below is a basic boilerplate for an Angular app:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&#39;MyFirstApp&#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First App&amp;lt;/title&amp;gt; &amp;lt;!-- angular source --&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.3/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- Your custom controller code --&amp;gt; &amp;lt;script src=&amp;quot;js/controllers.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://www.wikiod.com/angularjs/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/components/</guid>
      <description>Parameters # Parameter Details = For using two-way data binding. This means that if you update that variable in your component scope, the change will be reflected on the parent scope. &amp;lt; One-way bindings when we just want to read a value from a parent scope and not update it. @ String parameters. &amp;amp; For callbacks in case your component needs to output something to its parent scope. - - LifeCycle Hooks Details (requires angular.</description>
    </item>
    
    <item>
      <title>Angular promises with $q service</title>
      <link>https://www.wikiod.com/angularjs/angular-promises-with-q-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/angular-promises-with-q-service/</guid>
      <description>Wrap simple value into a promise using $q.when() # If all you need is to wrap the value into a promise, you don&amp;rsquo;t need to use the long syntax like here:
//OVERLY VERBOSE var defer; defer = $q.defer(); defer.resolve([&#39;one&#39;, &#39;two&#39;]); return defer.promise; In this case you can just write:
//BETTER return $q.when([&#39;one&#39;, &#39;two&#39;]); $q.when and its alias $q.resolve # Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.</description>
    </item>
    
    <item>
      <title>Form Validation</title>
      <link>https://www.wikiod.com/angularjs/form-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/form-validation/</guid>
      <description>Form and Input States # Angular Forms and Inputs have various states that are useful when validating content
Input States
State Description $touched Field has been touched $untouched Field has not been touched $pristine Field has not been modified $dirty Field has been modified $valid Field content is valid $invalid Field content is invalid All of the above states are boolean properties and can be either true or false.
With these, it is very easy to display messages to a user.</description>
    </item>
    
    <item>
      <title>Unit tests</title>
      <link>https://www.wikiod.com/angularjs/unit-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/unit-tests/</guid>
      <description>This topic provides examples for unit testing the various constructs in AngularJS. Unit tests are often written using using Jasmine, a popular behavior driven testing framework. When unit testing angular constructs, you will need to include ngMock as a dependency when running the unit tests.
Unit test a component (1.5+) # Component code:
angular.module(&#39;myModule&#39;, []).component(&#39;myComponent&#39;, { bindings: { myValue: &#39;&amp;lt;&#39; }, controller: function(MyService) { this.service = MyService; this.componentMethod = function() { return 2; }; } }); The test:</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://www.wikiod.com/angularjs/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angularjs/services/</guid>
      <description>Creating a service using angular.factory # First define the service (in this case it uses the factory pattern):
.factory(&#39;dataService&#39;, function() { var dataObject = {}; var service = { // define the getter method get data() { return dataObject; }, // define the setter method set data(value) { dataObject = value || {}; } }; // return the &amp;quot;service&amp;quot; object to expose the getter/setter return service; }) Now you can use the service to share data between controllers:</description>
    </item>
    
  </channel>
</rss>

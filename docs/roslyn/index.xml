<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roslyn Tutorial on </title>
    <link>https://www.wikiod.com/docs/roslyn/</link>
    <description>Recent content in roslyn Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/roslyn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with roslyn</title>
      <link>https://www.wikiod.com/roslyn/getting-started-with-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/getting-started-with-roslyn/</guid>
      <description>Installation or Setup # To start tinkering with Roslyn you will need the following NuGet packages:
The C# and VB compilers - Microsoft.Net.Compilers. To install it you can run the following command in the Package Manager Console:
nuget install Microsoft.Net.Compilers
The Language APIs and Services - Microsoft.CodeAnalysis. To install it you can run the following command in the Package Manager Console:
nuget install Microsoft.CodeAnalysis
Additionally it is a good to install the .</description>
    </item>
    
    <item>
      <title>Using Workspaces</title>
      <link>https://www.wikiod.com/roslyn/using-workspaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/using-workspaces/</guid>
      <description>The workspace is a programmatic representation of the C# hierarchy that consists of a solution, child projects and child documents.
Currently there is no MSBuild workspace that supports a .NET Standard compliant projects. For more information see here.
Creating an MSBuildWorspace, loading a solution and getting all the documents in all that solution # The MSBuildWorspace is built around the concept of handling MSBuild solutions (.sln files) and their respective projects (.</description>
    </item>
    
    <item>
      <title>Analyze source code with Roslyn</title>
      <link>https://www.wikiod.com/roslyn/analyze-source-code-with-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/analyze-source-code-with-roslyn/</guid>
      <description>Analyze a simple &amp;ldquo;Hello World&amp;rdquo; application in C# # Create a new console application with one line in the Main method: Console.WriteLine(&amp;quot;Hello World&amp;quot;)
Remember the path to the .csproj file and replace it in the example.
Create a new Console Application and install the Microsoft.CodeAnalysis NuGet package and try the following code:
const string projectPath = @&amp;quot;C:\HelloWorldApplication\HelloWorldProject.csproj&amp;quot;; // Creating a build workspace. var workspace = MSBuildWorkspace.Create(); // Opening the Hello World project.</description>
    </item>
    
    <item>
      <title>Change source code with Roslyn</title>
      <link>https://www.wikiod.com/roslyn/change-source-code-with-roslyn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/change-source-code-with-roslyn/</guid>
      <description>Practical examples of using Roslyn for source code transformations.
Roslyn syntax trees are immutable. By calling a method like ReplaceNodes we generate a new node rather than modifying the existing one. This requires you to always change the object you have been working on. Replace existing Attributes for all methods in C# using the syntax tree # The following snippet replaces all Attributes called PreviousAttribute by an Attribute called ReplacementAttribute for an entire solution.</description>
    </item>
    
    <item>
      <title>Syntax Tree</title>
      <link>https://www.wikiod.com/roslyn/syntax-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/syntax-tree/</guid>
      <description>One of the major parts of the Roslyn compiler is the Syntax API. It exposes the syntax trees the compilers use to understand Visual Basic and C# programs.
The Syntax Tree is a Parse Tree in the context of the Roslyn compiler. Traversing the Syntax Tree Using LINQ # You can easily navigate the a Syntax Tree using LINQ. For example it is easy to get all the ClassDeclarationSyntax nodes (declared classes), that have a name starting with the letter A:</description>
    </item>
    
    <item>
      <title>Semantic Model</title>
      <link>https://www.wikiod.com/roslyn/semantic-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/roslyn/semantic-model/</guid>
      <description>In contrast to the Syntax API the exposes all kinds of syntax level information, the semantic model gives our code more &amp;ldquo;meaning&amp;rdquo; and allows us to answer questions like &amp;ldquo;What names are in scope at this location?&amp;rdquo;, &amp;ldquo;What members are accessible from this method?&amp;rdquo;, &amp;ldquo;What variables are used in this block of text?&amp;rdquo;, &amp;ldquo;What does this name/expression refer to?&amp;rdquo;.
Querying the Semantic Model is more costly than querying the Syntax Tree, due to the fact that it most commonly triggers a compilation.</description>
    </item>
    
  </channel>
</rss>

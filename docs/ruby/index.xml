<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/ruby/</link>
    <description>Recent content in Ruby Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Ruby Language</title>
      <link>https://www.wikiod.com/ruby/getting-started-with-ruby-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/getting-started-with-ruby-language/</guid>
      <description>Hello World # This example assumes Ruby is installed.
Place the following in a file named hello.rb:
puts &#39;Hello World&#39; From the command line, type the following command to execute the Ruby code from the source file:
$ ruby hello.rb This should output:
Hello World The output will be immediately displayed to the console. Ruby source files don&amp;rsquo;t need to be compiled before being executed. The Ruby interpreter compiles and executes the Ruby file at runtime.</description>
    </item>
    
    <item>
      <title>Hashes</title>
      <link>https://www.wikiod.com/ruby/hashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/hashes/</guid>
      <description>A Hash is a dictionary-like collection of unique keys and their values. Also called associative arrays, they are similar to Arrays, but where an Array uses integers as its index, a Hash allows you to use any object type. You retrieve or create a new entry in a Hash by referring to its key.
Syntax # { first_name: &amp;ldquo;Noel&amp;rdquo;, second_name: &amp;ldquo;Edmonds&amp;rdquo; }
{ :first_name =&amp;gt; &amp;ldquo;Noel&amp;rdquo;, :second_name =&amp;gt; &amp;ldquo;Edmonds&amp;rdquo; }</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://www.wikiod.com/ruby/control-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/control-flow/</guid>
      <description>if, elsif, else and end # Ruby offers the expected if and else expressions for branching logic, terminated by the end keyword:
# Simulate flipping a coin result = [:heads, :tails].sample if result == :heads puts &#39;The coin-toss came up &amp;quot;heads&amp;quot;&#39; else puts &#39;The coin-toss came up &amp;quot;tails&amp;quot;&#39; end In Ruby, if statements are expressions that evaluate to a value, and the result can be assigned to a variable:
status = if age &amp;lt; 18 :minor else :adult end Ruby also offers C-style ternary operators ([see here for details][1]) that can be expressed as:</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/ruby/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/arrays/</guid>
      <description>Syntax # a = [] # using array literal a = Array.new # equivalent to using literal a = Array.new(5) # create an array with 5 elements with value of nil. a = Array.new(5, 0) # create an array with 5 elements with default value of 0. Create Array of Strings # Arrays of strings can be created using ruby&amp;rsquo;s percent string syntax:
array = %w(one two three four) This is functionally equivalent to defining the array as:</description>
    </item>
    
    <item>
      <title>Blocks and Procs and Lambdas</title>
      <link>https://www.wikiod.com/ruby/blocks-and-procs-and-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/blocks-and-procs-and-lambdas/</guid>
      <description>Syntax # Proc.new(block) lambda { |args| code } -&amp;gt;(arg1, arg2) { code } object.to_proc { |single_arg| code } do |arg, (key, value)| code end Be careful about operator precedence when you have a line with multiple methods chained, like:
str = &amp;quot;abcdefg&amp;quot; puts str.gsub(/./) do |match| rand(2).zero? ? match.upcase : match.downcase end Instead of printing something like abCDeFg, like you&amp;rsquo;d expect, it prints something like #&amp;lt;Enumerator:0x00000000af42b28&amp;gt; &amp;ndash; this is because do .</description>
    </item>
    
    <item>
      <title>Design Patterns and Idioms in Ruby</title>
      <link>https://www.wikiod.com/ruby/design-patterns-and-idioms-in-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/design-patterns-and-idioms-in-ruby/</guid>
      <description>Decorator Pattern # Decorator pattern adds behavior to objects without affecting other objects of the same class. The decorator pattern is a useful alternative to creating sub-classes.
Create a module for each decorator. This approach is more flexible than inheritance because you can mix and match responsibilities in more combinations. Additionally, because the transparency allows decorators to be nested recursively, it allows for an unlimited number of responsibilities.
Assume the Pizza class has a cost method that returns 300:</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://www.wikiod.com/ruby/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/classes/</guid>
      <description>Syntax # class Name #some code describing the class behavior end Class names in Ruby are Constants, so the first letter should be a capital.
class Cat # correct end class dog # wrong, throws an error end Constructor # A class can have only one constructor, that is a method called initialize. The method is automatically invoked when a new instance of the class is created.
class Customer def initialize(name) @name = name.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://www.wikiod.com/ruby/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/exceptions/</guid>
      <description>An exception is an object that represents the occurrence of an exceptional condition. In other words, it indicates that something went wrong.
In Ruby, exceptions are often referred to as errors. That&amp;rsquo;s because the base Exception class exists as a top-level exception object element, but user-defined execution exceptions are generally StandardError or descendants.
Creating a custom exception type # A custom exception is any class that extends Exception or a subclass of Exception.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.wikiod.com/ruby/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/methods/</guid>
      <description>Functions in Ruby provide organized, reusable code to preform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, yield statements and scope in Ruby.
A method is a named block of code, associated with one or more objects and generally identified by a list of parameters in addition to the name.</description>
    </item>
    
    <item>
      <title>Gem Usage</title>
      <link>https://www.wikiod.com/ruby/gem-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby/gem-usage/</guid>
      <description>Installing ruby gems # This guide assumes you already have Ruby installed. If you&amp;rsquo;re using Ruby &amp;lt; 1.9 you&amp;rsquo;ll have to manually install RubyGems as it won&amp;rsquo;t be included natively.
To install a ruby gem, enter the command:
gem install [gemname] If you are working on a project with a list of gem dependencies, then these will be listed in a file named Gemfile. To install a new gem in the project, add the following line of code in the Gemfile:</description>
    </item>
    
  </channel>
</rss>

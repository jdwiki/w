<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>guava Tutorial on </title>
    <link>https://www.wikiod.com/docs/guava/</link>
    <description>Recent content in guava Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/guava/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with guava</title>
      <link>https://www.wikiod.com/guava/getting-started-with-guava/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/guava/getting-started-with-guava/</guid>
      <description>Setup # Dependency on Guava can be added in your Java project by using any build system.
Maven:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;19.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle:
dependencies { compile &#39;com.google.guava:guava:19.0&#39; } Ivy
&amp;lt;dependency org=&amp;quot;com.google.guava&amp;quot; name=&amp;quot;guava&amp;quot; rev=&amp;quot;19.0&amp;quot; /&amp;gt; Buildr
compile.with &#39;com.google.guava:guava:jar:19.0&#39; Manual Dependency
You can also just manually download JARs from Guava&amp;rsquo;s release page for the classes, sources and javadocs.
Note that JDK 1.6 or newer is required for Guava 12.0 through 20.0. See Version list for more info.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/guava/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/guava/strings/</guid>
      <description>Checking a string for unwanted characters # As a developer, you frequently find yourself dealing with strings that are not created by your own code.
These will often be supplied by third party libraries, external systems, or even end users. Validating strings of unclear provenance is considered to be one of the hallmarks of defensive programming, and in most cases you will want to reject string input that does not meet your expectations.</description>
    </item>
    
    <item>
      <title>IO</title>
      <link>https://www.wikiod.com/guava/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/guava/io/</guid>
      <description>Handling existing InputStreams and OutputStreams # Reading the content of an InputStream as a byte array:
// Reading from a file try (InputStream in = new FileInputStream(&amp;quot;in.dat&amp;quot;)) { byte[] content = ByteStreams.toByteArray(in); // do something with content } Copying an InputStream to an OutputStream:
// Copying the content from a file in.dat to out.dat. try (InputStream in = new FileInputStream(&amp;quot;in.dat&amp;quot;); OutputStream out = new FileOutputStream(&amp;quot;out.dat&amp;quot;)) { ByteStreams.copy(in, out); } Note: to copy files directly, it&amp;rsquo;s better to use Files.</description>
    </item>
    
  </channel>
</rss>

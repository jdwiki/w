<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa Tutorial on </title>
    <link>https://www.wikiod.com/docs/jpa/</link>
    <description>Recent content in jpa Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jpa</title>
      <link>https://www.wikiod.com/jpa/getting-started-with-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/getting-started-with-jpa/</guid>
      <description>Minimal persistence.xml example # Hibernate (and embedded H2 DB) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_1.xsd&amp;quot; version=&amp;quot;2.1&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;persistenceUnit&amp;quot;&amp;gt; &amp;lt;provider&amp;gt;org.hibernate.ejb.HibernatePersistence&amp;lt;/provider&amp;gt; &amp;lt;class&amp;gt;my.application.entities.MyEntity&amp;lt;/class&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.driver&amp;quot; value=&amp;quot;org.h2.Driver&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.url&amp;quot; value=&amp;quot;jdbc:h2:data/myDB.db&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.user&amp;quot; value=&amp;quot;sa&amp;quot; /&amp;gt; &amp;lt;!-- DDL change options --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot; value=&amp;quot;org.hibernate.dialect.H2Dialect&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.flushMode&amp;quot; value=&amp;quot;FLUSH_AUTO&amp;quot; /&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt; &amp;lt;/persistence&amp;gt; Eclipselink (and embedded H2 DB) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_1.xsd&amp;quot; version=&amp;quot;2.1&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;persistenceUnit&amp;quot;&amp;gt; &amp;lt;provider&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Basic mapping</title>
      <link>https://www.wikiod.com/jpa/basic-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/basic-mapping/</guid>
      <description>Parameters # Annotation Details @Id Marks field/column as the key of the entity @Basic Marks requested field to mapped as a basic type. This is applicable to primitive types and their wrappers, String, Date and Calendar. The annotation is actually optional if no parameters are given, but good style would dictate to make your intentions explicit. @Transient Fields marked as transient are not considered for persistence, much like the transient keyword for serialization.</description>
    </item>
    
    <item>
      <title>One to Many relationship</title>
      <link>https://www.wikiod.com/jpa/one-to-many-relationship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/one-to-many-relationship/</guid>
      <description>Parameters # Annotation Purpose @TableGenerator Specifies generator name and table name where generator can be found @GeneratedValue Specifies generation strategy and refers to name of generator @ManyToOne Specifies many to one relationship between Employee and Department @OneToMany(mappedBy=&amp;ldquo;department&amp;rdquo;) creates bi-directional relationship between Employee and Department by simply referring to @ManyToOne annotation in Employee entity One To Many relationship # One to Many mapping is generally simply a bidirectional relationship of Many to One mapping.</description>
    </item>
    
    <item>
      <title>Joined Inheritance strategy</title>
      <link>https://www.wikiod.com/jpa/joined-inheritance-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/joined-inheritance-strategy/</guid>
      <description>Parameters # Annotation Purpose @Inheritance Specifies type of inheritance strategy used @DiscriminatorColumn Specifies a column in database which will be used to identify different entities based on certain ID assigned to each entity @MappedSuperClass mapped super classes are not persistent and only used to hold state for its subclasses. Generally abstract java classes are marked with @MapperSuperClass Joined inheritance strategy # A Sample class diagram based on which we will see JPA implementation.</description>
    </item>
    
    <item>
      <title>One to One mapping</title>
      <link>https://www.wikiod.com/jpa/one-to-one-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/one-to-one-mapping/</guid>
      <description>Parameters # Annotation Purpose @TableGenerator Specifies generator name and table name where generator can be found @GeneratedValue Specifies generation strategy and refers to name of generator @OneToOne Specifies one to one relationship between employee and desk, here Employee is owner of relation mappedBy This element is provided on reverse side of relation. This enables bidirectional relationship One To One relation between employee and desk # Consider a one to one bidirectional relationship between employee and desk.</description>
    </item>
    
    <item>
      <title>Relations between entities</title>
      <link>https://www.wikiod.com/jpa/relations-between-entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/relations-between-entities/</guid>
      <description>Relations Between Entities Basics # A foreign key can be one or more columns that reference a unique key, usually the primary key, in another table.
A foreign key and the primary parent key it references must have the same number and type of fields.
Foreign keys represents relationships from a column or columns in one table to a column or columns in another table.
@JoinTable Annotation Example # When mapping many-to-many relationships in JPA, configuration for the table used for the joining foreign-keys can be provided using the @JoinTable annotation:</description>
    </item>
    
    <item>
      <title>Many to Many Mapping</title>
      <link>https://www.wikiod.com/jpa/many-to-many-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/many-to-many-mapping/</guid>
      <description>A ManyToMany mapping describes a relationship between to entities where both can be related to more than one instance of each other, and is defined by the @ManyToMany annotation.
Unlike @OneToMany where a foreign key column in the table of the entity can be used, ManyToMany requires a join table, which maps the entities to each other.
Parameters # Annotation Purpose @TableGenerator Defines a primary key generator that may be referenced by name when a generator element is specified for the GeneratedValue annotation @GeneratedValue Provides for the specification of generation strategies for the values of primary keys.</description>
    </item>
    
    <item>
      <title>Table per concrete class inheritance strategy</title>
      <link>https://www.wikiod.com/jpa/table-per-concrete-class-inheritance-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/table-per-concrete-class-inheritance-strategy/</guid>
      <description>Vehicle, TransportationVehicle and PassengerVehicle are abstract classes and they will not have separate table in database. Truck, Car and Bike are concrete classes so they will be mapped to corresponding tables. These tables should include all the fields for classes annotated with @MappedSuperClass because they donâ€™t have corresponding tables in database. So, Truck table will have columns to store fields inherited from TransportationVehicle and Vehicle. Similarly, Car and Bike will have columns to store fields inherited from PassengerVehicle and Vehicle.</description>
    </item>
    
    <item>
      <title>Many To One Mapping</title>
      <link>https://www.wikiod.com/jpa/many-to-one-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/many-to-one-mapping/</guid>
      <description>Parameters # Column Column @TableGenerator Uses table generator strategy for automatic id creation @GeneratedValue Specifies that the value applied to fields is a generated value @Id Annotates the field as identifier @ManyToOne Specifies Many to One relationship between Employee and Department. This annotation is marked on many side. i.e. Multiple employees belong to a single department. So Department is annotated with @ManyToOne in Employee entity. @JoinColumn Specifies database table column which stores foreign key for related entity Employee to Department ManyToOne relationship # Employee Entity</description>
    </item>
    
    <item>
      <title>Single Table Inheritance Strategy</title>
      <link>https://www.wikiod.com/jpa/single-table-inheritance-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jpa/single-table-inheritance-strategy/</guid>
      <description>Parameters # Annotation Purpose @Inheritance Specifies type of inheritance strategy used @DiscriminatorColumn Specifies a column in database which will be used to identify different entities based on certain ID assigned to each entity @MappedSuperClass mapped super classes are not persistent and only used to hold state for its subclasses. Generally abstract java classes are marked with @MapperSuperClass @DiscriminatorValue A value specified in column defined by @DiscriminatorColumn. This value helps identify the type of entity The advantage of single table strategy is it does not require complex joins for retrieval and insertion of entities, but on the other hand it wastes database space as many columns need to be nullable and there isnâ€™t any data for them.</description>
    </item>
    
  </channel>
</rss>

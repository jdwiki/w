<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>core-bluetooth Tutorial on </title>
    <link>https://www.wikiod.com/docs/core-bluetooth/</link>
    <description>Recent content in core-bluetooth Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/core-bluetooth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with core-bluetooth</title>
      <link>https://www.wikiod.com/core-bluetooth/getting-started-with-core-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/core-bluetooth/getting-started-with-core-bluetooth/</guid>
      <description>Installation or Setup # Detailed instructions on getting core-bluetooth set up or installed.</description>
    </item>
    
    <item>
      <title>Scan &amp; connect with BLE peripherals (Bluetooth Smart)</title>
      <link>https://www.wikiod.com/core-bluetooth/scan--connect-with-ble-peripherals-bluetooth-smart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/core-bluetooth/scan--connect-with-ble-peripherals-bluetooth-smart/</guid>
      <description>This section describes how central (iOS app) can scan available BLE peripherals and connect with one we are interested in.
Scan all available peripherals # Swift:
centralManager.scanForPeripherals(withServices: nil, options: nil) Objective C:
[centralManager scanForPeripheralsWithServices:nil options:nil]; Scan available peripherals only with interested services # Swift:
let services = [CBUUID(string: SERVICE1_UUID), CBUUID(string: SERVICE2_UUID)] centralManager.scanForPeripherals(withServices: services, options: nil) Objective C:
NSArray *services = @[[CBUUID UUIDWithString:SERVICE1_UUID], [CBUUID UUIDWithString:SERVICE2_UUID]]; [centralManager scanForPeripheralsWithServices:services options:nil]; </description>
    </item>
    
    <item>
      <title>Setup bluetoooth central manager</title>
      <link>https://www.wikiod.com/core-bluetooth/setup-bluetoooth-central-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/core-bluetooth/setup-bluetoooth-central-manager/</guid>
      <description>CBCentralManager acts as a manager class central side app generally iOS app. which is responsible for bridging communication between peripherals and central.
Declare and instantiate CBCentralManager # Swift:
var centralManager:CBCentralManager! centralManager = CBCentralManager(delegate: self, queue: nil) Objective C:
@property (nonatomic, strong) CBCentralManager *centralManager; centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil]; Declare and instantiate CBCentralManager with options # Swift:
var centralManager:CBCentralManager! centralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionRestoreIdentifierKey : &amp;quot;com.companyname.appname.central&amp;quot;]) Objective C:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/c/</link>
    <description>Recent content in C Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with C Language</title>
      <link>https://www.wikiod.com/c/getting-started-with-c-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/getting-started-with-c-language/</guid>
      <description>Hello World # To create a simple C program which prints &amp;ldquo;Hello, World&amp;rdquo; on the screen, use a text editor to create a new file (e.g. hello.c â€” the file extension must be .c) containing the following source code:
hello.c # #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;quot;Hello, World&amp;quot;); return 0; } Live demo on Coliru
Let&amp;rsquo;s look at this simple program line by line # #include &amp;lt;stdio.h&amp;gt; This line tells the compiler to include the contents of the standard library header file stdio.</description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://www.wikiod.com/c/pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/pointers/</guid>
      <description>A pointer is a type of variable which can store the address of another object or a function.
Syntax # &amp;lt;Data type&amp;gt; *&amp;lt;Variable name&amp;gt;; int *ptrToInt; void *ptrToVoid; /* C89+ */ struct someStruct *ptrToStruct; int **ptrToPtrToInt; int arr[length]; int *ptrToFirstElem = arr; /* For &amp;lt;C99 &amp;rsquo;length&amp;rsquo; needs to be a compile time constant, for &amp;gt;=C11 it might need to be one. */ int *arrayOfPtrsToInt[length]; /* For &amp;lt;C99 &amp;rsquo;length&amp;rsquo; needs to be a compile time constant, for &amp;gt;=C11 it might need to be one.</description>
    </item>
    
    <item>
      <title>Undefined behavior</title>
      <link>https://www.wikiod.com/c/undefined-behavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/undefined-behavior/</guid>
      <description>In C, some expressions yield undefined behavior. The standard explicitly chooses to not define how a compiler should behave if it encounters such an expression. As a result, a compiler is free to do whatever it sees fit and may produce useful results, unexpected results, or even crash.
Code that invokes UB may work as intended on a specific system with a specific compiler, but will likely not work on another system, or with a different compiler, compiler version or compiler settings.</description>
    </item>
    
    <item>
      <title>Memory management</title>
      <link>https://www.wikiod.com/c/memory-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/memory-management/</guid>
      <description>For managing dynamically allocated memory, the standard C library provides the functions malloc(), calloc(), realloc() and free(). In C99 and later, there is also aligned_alloc(). Some systems also provide alloca().
Syntax # void *aligned_alloc(size_t alignment, size_t size); /* Only since C11 */ void *calloc(size_t nelements, size_t size); void free(void *ptr); void *malloc(size_t size); void *realloc(void *ptr, size_t size); void *alloca(size_t size); /* from alloca.h, not standard, not portable, dangerous. */ Parameters # name description size (malloc, realloc and aligned_alloc) total size of the memory in bytes.</description>
    </item>
    
    <item>
      <title>Common pitfalls</title>
      <link>https://www.wikiod.com/c/common-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/common-pitfalls/</guid>
      <description>This section discusses some of the common mistakes that a C programmer should be aware of and should avoid making. For more on some unexpected problems and their causes, please see https://www.wikiod.com/c/undefined-behavior
Mixing signed and unsigned integers in arithmetic operations # It is usually not a good idea to mix signed and unsigned integers in arithmetic operations. For example, what will be output of following example?
#include &amp;lt;stdio.h&amp;gt; int main(void) { unsigned int a = 1000; signed int b = -1; if (a &amp;gt; b) puts(&amp;quot;a is more than b&amp;quot;); else puts(&amp;quot;a is less or equal than b&amp;quot;); return 0; } Since 1000 is more than -1 you would expect the output to be a is more than b, however that will not be the case.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/c/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/strings/</guid>
      <description>In C, a string is not an intrinsic type. A C-string is the convention to have a one-dimensional array of characters which is terminated by a null-character, by a &#39;\0&#39;.
This means that a C-string with a content of &amp;quot;abc&amp;quot; will have four characters &#39;a&#39;, &#39;b&#39;, &#39;c&#39; and &#39;\0&#39;.
See the basic introduction to strings example.
1: https://www.wikiod.com/c/strings#Basic introduction to strings
Syntax # char str1[] = &amp;ldquo;Hello, world!&amp;rdquo;; /* Modifiable */ char str2[14] = &amp;ldquo;Hello, world!</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/c/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/arrays/</guid>
      <description>Arrays are derived data types, representing an ordered collection of values (&amp;ldquo;elements&amp;rdquo;) of another type. Most arrays in C have a fixed number of elements of any one type, and its representation stores the elements contiguously in memory without gaps or padding. C allows multidimensional arrays whose elements are other arrays, and also arrays of pointers.
C supports dynamically allocated arrays whose size is determined at run time. C99 and later supports variable length arrays or VLAs.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.wikiod.com/c/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/operators/</guid>
      <description>An operator in a programming language is a symbol that tells the compiler or interpreter to perform a specific mathematical, relational or logical operation and produce a final result.
C has many powerful operators. Many C operators are binary operators, which means they have two operands. For example, in a / b, / is a binary operator that accepts two operands (a, b). There are some unary operators which take one operand (for example: ~, ++), and only one ternary operator ?</description>
    </item>
    
    <item>
      <title>Assertion</title>
      <link>https://www.wikiod.com/c/assertion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/assertion/</guid>
      <description>An assertion is a predicate that the presented condition must be true at the moment the assertion is encountered by the software. Most common are simple assertions, which are validated at execution time. However, static assertions are checked at compile time.
Syntax # assert(expression) static_assert(expression, message) _Static_assert(expression, message) Parameters # Parameter Details expression expression of scalar type. message string literal to be included in the diagnostic message. Both assert and static_assert are macros defined in assert.</description>
    </item>
    
    <item>
      <title>Preprocessor and Macros</title>
      <link>https://www.wikiod.com/c/preprocessor-and-macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/c/preprocessor-and-macros/</guid>
      <description>All preprocessor commands begins with the hash (pound) symbol #. A C macro is just a preprocessor command that is defined using the #define preprocessor directive. During the preprocessing stage, the C preprocessor (a part of the C compiler) simply substitutes the body of the macro wherever its name appears.
When a compiler encounters a macro in the code, it performs simple string replacement, no additional operations are performed. Because of this, changes by the preprocessor do not respect scope of C programs - for example, a macro definition is not limited to being within a block, so is unaffected by a &#39;}&#39; that ends a block statement.</description>
    </item>
    
  </channel>
</rss>

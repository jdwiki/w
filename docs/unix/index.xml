<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix Tutorial on </title>
    <link>https://www.wikiod.com/docs/unix/</link>
    <description>Recent content in unix Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with unix</title>
      <link>https://www.wikiod.com/unix/getting-started-with-unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/getting-started-with-unix/</guid>
      <description>Installation or Setup # Detailed instructions on getting unix set up or installed.</description>
    </item>
    
    <item>
      <title>Basic console commands</title>
      <link>https://www.wikiod.com/unix/basic-console-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/basic-console-commands/</guid>
      <description>which # To determine where on your system an executable in your path exists, use the which command:
$ which python $ If there is no response, that executable does not exist in your path. The system will simply return you a new prompt without an error message. If the executable does exist on your path, it will show the directory where it actually exists:
$ which ls /bin/ls This can be helpful in determining why behavior does not match expectation by ensuring you&amp;rsquo;re executing the version of the executable that you think you are.</description>
    </item>
    
    <item>
      <title>View the Manual Pages</title>
      <link>https://www.wikiod.com/unix/view-the-manual-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/view-the-manual-pages/</guid>
      <description>Viewing the Manual Page for a System Command # man &amp;lt;command&amp;gt; This will show the manual page for the specified command.
For example, man ping will show:
PING(8) BSD System Manager&#39;s Manual PING(8) NAME ping -- send ICMP ECHO_REQUEST packets to network hosts SYNOPSIS ping [-AaCDdfnoQqRrv] [-b boundif] [-c count] [-G sweepmaxsize] [-g sweepminsize] [-h sweepincrsize] [-i wait] [-k trafficclass] [-l preload] [-M mask | time] [-m ttl] [-P policy] [-p pattern] [-S src_addr] [-s packetsize] [-t timeout] [-W waittime] [-z tos] host ping [-AaDdfLnoQqRrv] [-b boundif] [-c count] [-I iface] [-i wait] [-k trafficclass] [-l preload] [-M mask | time] [-m ttl] [-P policy] [-p pattern] [-S src_addr] [-s packetsize] [-T ttl] [-t timeout] [-W waittime] [-z tos] mcast-group DESCRIPTION The ping utility uses the ICMP protocol&#39;s mandatory ECHO_REQUEST datagram to elicit an ICMP ECHO_RESPONSE from a host or gateway.</description>
    </item>
    
    <item>
      <title>Getting Started with Unix Commands</title>
      <link>https://www.wikiod.com/unix/getting-started-with-unix-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/getting-started-with-unix-commands/</guid>
      <description>This topic will provide a comprehensive coverage of basic Unix commands.
A non exhaustive list of Unix commands # $man &amp;lt;command&amp;gt; Displays the on-line manual pages for the command
$clear Clears the terminal screen
$pwd Returns the working directory name
$echo &amp;lt;string&amp;gt; Writes the string to the standard output
$printf &amp;lt;string&amp;gt; Format and print the string Example: print $PATH $printf “%s\n” $PATH
$uptime Show how long system has been running</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>https://www.wikiod.com/unix/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/permissions/</guid>
      <description>In unix each files has certain permissions like read, write and execute. A user can manipulate the permissions of a file using &amp;lsquo;chmod&amp;rsquo; command.
In UNIX, there are three permissions used to grant a certain level of access to a file or folder.
For files:
Read: Allow the user/group/others to read a file. Write: Allow the user/group/others to modify a file. Execute: Allow the user/group/others to execute (or run) a file.</description>
    </item>
    
    <item>
      <title>Overview of Unix</title>
      <link>https://www.wikiod.com/unix/overview-of-unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/unix/overview-of-unix/</guid>
      <description>Developed in AT&amp;amp;T Bell Labs by Ken Thomson as a single user OS in 1969. Initially written in assembly language Developed as multi-user OS. later rewritten in C in 1973 Licensed to university for educational purposes in 1974 POSIX (Portable Operating System for Unix) was developed
Unix Flavours # AIX by IBM Solaris by Sun Microsystems HP-UX by Hewlett Packard IRIX by Silicon Graphics, Inc FreeBSD by Free BSD Group GNU/Linux by Open Source Movement SCO Unix by The Santa Cruz Operation Inc Features of UNIX # Multi user Multi tasking Interactive Shell Security Hierarchial file system Unix Architecture # Unix File Systems # </description>
    </item>
    
  </channel>
</rss>

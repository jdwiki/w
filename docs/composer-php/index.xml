<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>composer-php Tutorial on </title>
    <link>https://www.wikiod.com/docs/composer-php/</link>
    <description>Recent content in composer-php Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/composer-php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with composer-php</title>
      <link>https://www.wikiod.com/composer-php/getting-started-with-composer-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/composer-php/getting-started-with-composer-php/</guid>
      <description>Installing Composer on Ubuntu # Before we download and install Composer, we need to make sure our server has all dependencies installed.
First, update the package manager cache by running:
sudo apt-get update Now, let&amp;rsquo;s install the dependencies. We&amp;rsquo;ll need curl in order to download Composer and php5-cli for installing and running it. git is used by Composer for downloading project dependencies. Everything can be installed with the following command:</description>
    </item>
    
    <item>
      <title>Auto loading with composer</title>
      <link>https://www.wikiod.com/composer-php/auto-loading-with-composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/composer-php/auto-loading-with-composer/</guid>
      <description>Autoloading # For libraries that specify autoload information, Composer generates a vendor/autoload.php file. You can simply include this file and you will get autoloading for free.
require __DIR__ . &#39;/vendor/autoload.php&#39;; This makes it really easy to use third party code. For example: If your project depends on Monolog, you can just start using classes from it, and they will be autoloaded.
$log = new Monolog\Logger(&#39;name&#39;); $log-&amp;gt;pushHandler(new Monolog\Handler\StreamHandler(&#39;app.log&#39;, Monolog\Logger::WARNING)); $log-&amp;gt;addWarning(&#39;Foo&#39;); You can even add your own code to the autoloader by adding an autoload field to composer.</description>
    </item>
    
    <item>
      <title>How to use private repositories with Composer</title>
      <link>https://www.wikiod.com/composer-php/how-to-use-private-repositories-with-composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/composer-php/how-to-use-private-repositories-with-composer/</guid>
      <description>Parameters # Parameters Details repositories Tells Composer where it can download the required packages. type: vcs Tells Composer how to treat the repository. url: http://&amp;hellip; Tells Composer where is the repository. Use the type: &amp;quot;vcs&amp;quot; syntax to use private repositories.
To manage access to the private repository while developing on a local machine, use an auth.json file and don&amp;rsquo;t commit it in you project repository. Instead, give access to each single developer to the private repository so, using each one his/her own NOT COMMITTED auth.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>selenium-webdriver Tutorial on </title>
    <link>https://www.wikiod.com/docs/selenium-webdriver/</link>
    <description>Recent content in selenium-webdriver Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/selenium-webdriver/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with selenium-webdriver</title>
      <link>https://www.wikiod.com/selenium-webdriver/getting-started-with-selenium-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/getting-started-with-selenium-webdriver/</guid>
      <description>What is Selenium WebDriver ? # Selenium is a set of tools designed to automate browsers. It is commonly used for web application tests across multiple platforms. There are a few tools available under the Selenium umbrella, such as Selenium WebDriver(ex-Selenium RC), Selenium IDE and Selenium Grid.
WebDriver is a remote control interface that enables you to manipulate DOM elements in web pages, as well as to command the behaviour of user agents.</description>
    </item>
    
    <item>
      <title>Using @FindBy annotations in Java</title>
      <link>https://www.wikiod.com/selenium-webdriver/using-findby-annotations-in-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/using-findby-annotations-in-java/</guid>
      <description>Syntax # CLASS_NAME: @FindBy(className = &amp;ldquo;classname&amp;rdquo;) CSS: @FindBy(css = &amp;ldquo;css&amp;rdquo;) ID: @FindBy(id = &amp;ldquo;id&amp;rdquo;) ID_OR_NAME: @FindBy(how = How.ID_OR_NAME, using =&amp;ldquo;idOrName&amp;rdquo;) LINK_TEXT: @FindBy(linkText= &amp;ldquo;text&amp;rdquo;) NAME: @FindBy(name= &amp;ldquo;name&amp;rdquo;) PARTIAL_LINK_TEXT: @FindBy(partialLinkText= &amp;ldquo;text&amp;rdquo;) TAG_NAME: @FindBy(tagName=&amp;ldquo;tagname&amp;rdquo;) XPATH: @FindBy(xpath=&amp;ldquo;xpath&amp;rdquo;) Note that there are two ways of using the annotation. Examples:
@FindBy(id = &amp;quot;id&amp;quot;) and
@FindBy(how = How.ID, using =&amp;quot;id&amp;quot;) are equal and both look for element by its ID. In case of ID_OR_NAME you can only use</description>
    </item>
    
    <item>
      <title>Wait</title>
      <link>https://www.wikiod.com/selenium-webdriver/wait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/wait/</guid>
      <description>Types of Wait in Selenium WebDriver # While running any web application itâ€™s necessary to take loading time into consideration. If your code tries to access any element that is not yet loaded, WebDriver will throw an exception and your script will stop.
There are three types of Waits -
Implicit Waits Explicit Waits Fluent Waits Implicit waits are used to set the waiting time throughout the program, while explicit waits are used only on specific portions.</description>
    </item>
    
    <item>
      <title>Executing Javascript in the page</title>
      <link>https://www.wikiod.com/selenium-webdriver/executing-javascript-in-the-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/executing-javascript-in-the-page/</guid>
      <description>Syntax # object ExecuteAsyncScript(string script, params object[] args); object ExecuteScript(string script, params object[] args); Python # To execute Javascript in python, use execute_script(&amp;quot;javascript script here&amp;quot;). execute_script is called on a webdriver instance, and can be any valid javascript.
from selenium import webdriver driver = webdriver.Chrome() driver.execute_script(&amp;quot;alert(&#39;running javascript&#39;);&amp;quot;) C# # In order to execute JavaScript in a IWebDriver instance you need to cast the IWebDriver to a new interface, IJavaScriptExecutor
IWebDriver driver; IJavaScriptExecutor jsDriver = driver as IJavaScriptExecutor; You can now access all the methods available on the IJavaScriptExecutor instance which allow you to execute Javascript, for example:</description>
    </item>
    
    <item>
      <title>Locating Web Elements</title>
      <link>https://www.wikiod.com/selenium-webdriver/locating-web-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/locating-web-elements/</guid>
      <description>Syntax # ByChained(params By[] bys) Items are found in Selenium through the use of locators and the By class. In order to make a robust automation project with Selenium, one should use locators for Web Elements smartly. The locators should be descriptive, unique, and unlikely to change so you won&amp;rsquo;t get false positives in tests for example. The priority is to use:
ID - since it&amp;rsquo;s unique and you&amp;rsquo;ll get exactly the element you want.</description>
    </item>
    
    <item>
      <title>Switching Frames</title>
      <link>https://www.wikiod.com/selenium-webdriver/switching-frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/switching-frames/</guid>
      <description>Syntax # Java driver.switchTo().frame(String name); driver.switchTo().frame(String id); driver.switchTo().frame(int index); driver.switchTo().frame(WebElement frameElement); driver.switchTo().defaultContent(); C# driver.SwitchTo().Frame(int frameIndex); driver.SwitchTo().Frame(IWebElement frameElement); driver.SwitchTo().Frame(string frameName); driver.SwitchTo().DefaultContent(); Python driver.switch_to_frame(nameOrId) driver.switch_to.frame(nameOrId) driver.switch_to_frame(index) driver.switch_to.frame(index) driver.switch_to_frame(frameElement) driver.switch_to.frame(frameElement) driver.switch_to_default_content() driver.switch_to.default_content() JavaScript driver.switchTo().frame(nameOrId) driver.switchTo().frame(index) driver.switchTo().defaultContent() Parameters # parameter details nameOrId Select a frame by its name of id. index Select a frame by its zero-based index. frameElement Select a frame using its previously located WebElement To switch to a frame using Java # For an instance, if the html source code of an html view or element is wrapped by an iframe like this:</description>
    </item>
    
    <item>
      <title>Robot In Selenium</title>
      <link>https://www.wikiod.com/selenium-webdriver/robot-in-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/robot-in-selenium/</guid>
      <description>Syntax # delay(int ms) keyPress(int keycode) keyRelease(int keycode) mouseMove(int x, int y) mousePress(int buttons) mouseRelease(int buttons) mouseWheel(int wheelAmt) Parameters # Parameter Details ms Time to sleep in milliseconds keycode Constant to press the specified key for example to press A code is VK_A. Please refer for more details :https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html x,y Screen coordintates buttons The Button mask; a combination of one or more mouse button masks wheelAmt Number of notches to move mouse wheel, negative value to move up/away from user positive value to move down/towards user This section contains details about implementation of Robot API with Selenium Webdriver.</description>
    </item>
    
    <item>
      <title>Basic Selenium Webdriver Program</title>
      <link>https://www.wikiod.com/selenium-webdriver/basic-selenium-webdriver-program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/basic-selenium-webdriver-program/</guid>
      <description>This topic aims to show the basic web driver program in selenium supported languages like C#, Groovy, Java, Perl, PHP, Python and Ruby.
Journey includes opening browser driver &amp;ndash;&amp;gt; Google Page &amp;ndash;&amp;gt; shutdown the browser
C# # using OpenQA.Selenium; using OpenQA.Selenium.Chrome; namespace BasicWebdriver { class WebDriverTest { static void Main() { using (var driver = new ChromeDriver()) { driver.Navigate().GoToUrl(&amp;quot;http://www.google.com&amp;quot;); } } } } The above &amp;lsquo;program&amp;rsquo; will navigate to the Google homepage, and then close down the browser after fully loading the page.</description>
    </item>
    
    <item>
      <title>Page Object Model</title>
      <link>https://www.wikiod.com/selenium-webdriver/page-object-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/page-object-model/</guid>
      <description>A significant role in automating web sites and web applications involves identifying items on the screen and interacting with them. Items are found in Selenium through the use of locators and the By class. These locators and interactions are put inside Page Objects as a best practice to avoid duplicate code and make maintenance easier. It encapsulates WebElements and suppose to contain behavior and return info on the page (or part of a page in a web app).</description>
    </item>
    
    <item>
      <title>Select Class</title>
      <link>https://www.wikiod.com/selenium-webdriver/select-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium-webdriver/select-class/</guid>
      <description>Syntax # Java deselectAll() deselectByIndex(int index) deselectByValue(java.lang.String value) deselectByVisibleText(java.lang.String text) getAllSelectedOptions() getFirstSelectedOption() getOptions() isMultiple() selectByIndex(int index) selectByValue(java.lang.String value) selectByVisibleText(java.lang.String text) Parameters # Parameters Details index The option at this index will be selected value The value to match against text The visible text to match against Select class of Selenium WebDriver provides useful methods for interacting with select options. User can perform operations on a select dropdown and also de-select operation using the below methods.</description>
    </item>
    
  </channel>
</rss>

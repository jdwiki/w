<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/java/</link>
    <description>Recent content in Java Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Java Language</title>
      <link>https://www.wikiod.com/java/getting-started-with-java-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/getting-started-with-java-language/</guid>
      <description>Creating Your First Java Program # Create a new file in your text editor or IDE named HelloWorld.java. Then paste this code block into the file and save:
public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;quot;Hello, World!&amp;quot;); } } Run live on Ideone
Note: For Java to recognize this as a public class (and not throw a compile time error), the filename must be the same as the class name (HelloWorld in this example) with a .</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/java/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/arrays/</guid>
      <description>Arrays allow for the storage and retrieval of an arbitrary quantity of values. They are analogous to vectors in mathematics. Arrays of arrays are analogous to matrices, and act as multidimensional arrays. Arrays can store any data of any type: primitives such as int or reference types such as Object.
Syntax # ArrayType[] myArray; // Declaring arrays ArrayType myArray[]; // Another valid syntax (less commonly used and discouraged) ArrayType[][][] myArray; // Declaring multi-dimensional jagged arrays (repeat []s) ArrayType myVar = myArray[index]; // Accessing (reading) element at index myArray[index] = value; // Assign value to position index of array ArrayType[] myArray = new ArrayType[arrayLength]; // Array initialization syntax int[] ints = {1, 2, 3}; // Array initialization syntax with values provided, length is inferred from the number of provided values: {[value1[, value2]*]} new int[]{4, -5, 6} // Can be used as argument, without a local variable int[] ints = new int[3]; // same as {0, 0, 0} int[][] ints = {{1, 2}, {3}, null}; // Multi-dimensional array initialization.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://www.wikiod.com/java/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/streams/</guid>
      <description>A Stream represents a sequence of elements and supports different kind of operations to perform computations upon those elements. With Java 8, Collection interface has two methods to generate a Stream: stream() and parallelStream(). Stream operations are either intermediate or terminal. Intermediate operations return a Stream so multiple intermediate operations can be chained before the Stream is closed. Terminal operations are either void or return a non-stream result.
Syntax # collection.</description>
    </item>
    
    <item>
      <title>Lambda Expressions</title>
      <link>https://www.wikiod.com/java/lambda-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/lambda-expressions/</guid>
      <description>Lambda expressions provide a clear and concise way of implementing a single-method interface using an expression. They allow you to reduce the amount of code you have to create and maintain. While similar to anonymous classes, they have no type information by themselves. Type inference needs to happen.
Method references implement functional interfaces using existing methods rather than expressions. They belong to the lambda family as well.
Syntax # () -&amp;gt; { return expression; } // Zero-arity with function body to return a value.</description>
    </item>
    
    <item>
      <title>Common Java Pitfalls</title>
      <link>https://www.wikiod.com/java/common-java-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/common-java-pitfalls/</guid>
      <description>This topic outlines some of the common mistakes made by beginners in Java.
This includes any common mistakes in use of the Java language or understanding of the run-time environment.
Mistakes associated with specific APIs can be described in topics specific to those APIs. Strings are a special case; they&amp;rsquo;re covered in the Java Language Specification. Details other than common mistakes can be described in this topic on Strings.
Pitfall: using == to compare primitive wrappers objects such as Integer # (This pitfall applies equally to all primitive wrapper types, but we will illustrate it for Integer and int.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/java/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/strings/</guid>
      <description>Strings (java.lang.String) are pieces of text stored in your program. Strings are not a primitive data type in Java, however, they are very common in Java programs.
In Java, Strings are immutable, meaning that they cannot be changed. (Click here for a more thorough explanation of immutability.)
Since Java strings are immutable, all methods which manipulate a String will return a new String object. They do not change the original String.</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://www.wikiod.com/java/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/generics/</guid>
      <description>Generics are a facility of generic programming that extend Java&amp;rsquo;s type system to allow a type or method to operate on objects of various types while providing compile-time type safety. In particular, the Java collections framework supports generics to specify the type of objects stored in a collection instance.
Syntax # class ArrayList&amp;lt;E&amp;gt; {} // a generic class with type parameter E class HashMap&amp;lt;K, V&amp;gt; {} // a generic class with two type parameters K and V &amp;lt;E&amp;gt; void print(E element) {} // a generic method with type parameter E ArrayList&amp;lt;String&amp;gt; names; // declaration of a generic class ArrayList&amp;lt;?</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://www.wikiod.com/java/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/enums/</guid>
      <description>Java enums (declared using the enum keyword) are shorthand syntax for sizable quantities of constants of a single class.
Syntax # [public/protected/private] enum Enum_name { // Declare a new enum. ENUM_CONSTANT_1[, ENUM_CONSTANT_2&amp;hellip;]; // Declare the enum constants. This must be the first line inside of the enum, and should be separated by commas, with a semicolon at the end. ENUM_CONSTANT_1(param)[, ENUM_CONSTANT_2(param)&amp;hellip;]; // Declare enum constants with parameters. The parameter types must match the constructor.</description>
    </item>
    
    <item>
      <title>Exceptions and exception handling</title>
      <link>https://www.wikiod.com/java/exceptions-and-exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/exceptions-and-exception-handling/</guid>
      <description>Objects of type Throwable and its subtypes can be sent up the stack with the throw keyword and caught with tryâ€¦catch statements.
Syntax # void someMethod() throws SomeException { } //method declaration, forces method callers to catch if SomeException is a checked exception type
try {
someMethod(); //code that might throw an exception }
catch (SomeException e) {
System.out.println(&amp;quot;SomeException was thrown!&amp;quot;); //code that will run if certain exception (SomeException) is thrown }</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/java/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/java/collections/</guid>
      <description>The collections framework in java.util provides a number of generic classes for sets of data with functionality that can&amp;rsquo;t be provided by regular arrays.
Collections framework contains interfaces for Collection&amp;lt;O&amp;gt;, with main sub-interfaces List&amp;lt;O&amp;gt; and Set&amp;lt;O&amp;gt;, and mapping collection Map&amp;lt;K,V&amp;gt;. Collections are the root interface and are being implemented by many other collection frameworks.
Collections are objects that can store collections of other objects inside of them. You can specify the type of data stored in a collection using Generics.</description>
    </item>
    
  </channel>
</rss>

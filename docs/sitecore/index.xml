<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sitecore Tutorial on </title>
    <link>https://www.wikiod.com/docs/sitecore/</link>
    <description>Recent content in sitecore Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sitecore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sitecore</title>
      <link>https://www.wikiod.com/sitecore/getting-started-with-sitecore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/getting-started-with-sitecore/</guid>
      <description>Using SIM manager for installation # Sitecore Instance Manager is open-source tool which is used for managing the local park of Sitecore instances. You can install, locate, maintain, reinstal or delete Sitecore products. It also helps you install your sitecore instance with any sitecore packages, modules and only thing you need to do is set the folder for local repository where all the installations files are kept. See the below screenshot for settings.</description>
    </item>
    
    <item>
      <title>Sitecore query syntax</title>
      <link>https://www.wikiod.com/sitecore/sitecore-query-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/sitecore-query-syntax/</guid>
      <description>Template Names vs. Template IDs vs. Item Names in Queries:
I strongly recommend that you use Template IDs and not Template Names or Item Names in your queries. This will ensure that your queries will still work, even when templates and/or items are renamed.
The one exception to this is when working with OOTB templates, while querying an OOTB structure, e.g. /sitecore/content or /sitecore/system/Marketing Control Panel. In these situations, the loss of readability is often greater than the risk of queries breaking, since these templates are far less likely to be renamed.</description>
    </item>
    
    <item>
      <title>Diagnostics Asserts</title>
      <link>https://www.wikiod.com/sitecore/diagnostics-asserts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/diagnostics-asserts/</guid>
      <description>Syntax # Assert.ArgumentCondition(bool condition, string argumentName, string message) Assert.ArgumentNotNull(object argument, string argumentName) Assert.ArgumentNotNull(object argument, Func&amp;lt;string&amp;gt; getArgumentName) Assert.ArgumentNotNullOrEmpty(ID argument, string argumentName) Assert.ArgumentNotNullOrEmpty(string argument, string argumentName) Assert.ArgumentNotNullOrEmpty(string argument, Func&amp;lt;string&amp;gt; getArgumentName) Assert.AreEqual(int value1, int value2, string message) Assert.AreEqual(int value1, int value2, string format, params object[] args) Assert.AreEqual(string value1, string value2, string message) Assert.AreEqual(string value1, string value2, string format, params object[] args) Assert.AreEqual(bool value1, bool value2, string message) Assert.AreEqual(bool value1, bool value2, string format, params object[] args) Assert.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://www.wikiod.com/sitecore/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/templates/</guid>
      <description>Get Sitecore Template Item by ID # To get template item by template Id.
TemplateItem templateItem = Sitecore.Context.Database.GetTemplate(new ID(&amp;quot;{11111111-1111-1111-1111-111111111111}&amp;quot;)); Get Sitecore Template Item by name # Input the name of the template to get the template by using GetTemplate Method.
TemplateItem templateItem = Sitecore.Context.Database.GetTemplate(&amp;quot;NameOfTheTemplate&amp;quot;); </description>
    </item>
    
    <item>
      <title>Index configuration</title>
      <link>https://www.wikiod.com/sitecore/index-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/index-configuration/</guid>
      <description>Field Configuration # When adding custom fields to a Lucene index you can add new fields into the index using the following configuration:
&amp;lt;configuration ref=&amp;quot;contentSearch/indexConfigurations/defaultLuceneIndexConfiguration&amp;quot;&amp;gt; &amp;lt;indexAllfields&amp;gt;false&amp;lt;/indexAllfields&amp;gt; &amp;lt;fieldNames hint=&amp;quot;raw:AddFieldByFieldName&amp;quot;&amp;gt; &amp;lt;field fieldName=&amp;quot;title&amp;quot; storageType=&amp;quot;YES&amp;quot; indexType=&amp;quot;TOKENIZED&amp;quot; vectorType=&amp;quot;NO&amp;quot; boost=&amp;quot;1f&amp;quot; type=&amp;quot;System.String&amp;quot; settingType=&amp;quot;Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration, Sitecore.ContentSearch.LuceneProvider&amp;quot;/&amp;gt; &amp;lt;/fieldNames&amp;gt; &amp;lt;/configuration&amp;gt; A field has a couple of possible properties:
storageType indexType vectorType boost Tjhese fields directly relate to the content of the Sitecore.ContentSearch.LuceneProvider.LuceneSearchFieldConfiguration class. If we reflect the values out of this class we can see their possible values, etc.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://www.wikiod.com/sitecore/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/search/</guid>
      <description>Sitecore search is built on top of Lucene, providing the ability to create very fast searching capabilities for your site. Instead of querying against a centralised database (such as Sitecore&amp;rsquo;s SQL DB), it queries Lucene index files which are stored on the physical file system of the web-server. Sitecore provides a layer of abstraction over the Lucene.NET API including a LINQ provider which makes writing Lucene queries a simple &amp;amp; familiar process for .</description>
    </item>
    
    <item>
      <title>Items</title>
      <link>https://www.wikiod.com/sitecore/items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/items/</guid>
      <description>Syntax # Database.GetItem(ID itemId) Database.GetItem(ID itemId, Language language) Database.GetItem(ID itemId, Language language, Version version) Database.GetItem(string path) Database.GetItem(string path, Language language) Database.GetItem(string path, Language language, Version version) Most of the above examples make use of Sitecore.Context.Database to fetch items. Keep in mind that most Sitecore implementations have multiple content databases, so using the correct database to fetch your item is important.
Get Item by ID # To fetch the latest version of an item in the current language:</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://www.wikiod.com/sitecore/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/security/</guid>
      <description>Sitecore offers two ways to access items that the context user doesn&amp;rsquo;t have permissions to access. The preferred way is to use the UserSwitcher class to temporarily change the user that will be used to access the item. The reason that this is preferred is because you can still have permissions in effect for the user account that is being utilised.
The alternative is to use the SecurityDisabler class. This performs the action without any security constraints.</description>
    </item>
    
    <item>
      <title>Engagement Automation</title>
      <link>https://www.wikiod.com/sitecore/engagement-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/engagement-automation/</guid>
      <description>Sitecore automation gives marketer a possobility to create marketing workflows which will put user through different states on the website.
The example of automation usage could be registration workflow (registered, confirmed, logged in) or purchase workflow (new order, added products, payment details, purchase complete).
Get the contact by username # ContactManager contactManager = Factory.CreateObject(&amp;quot;tracking/contactManager&amp;quot;, true) as ContactManager; Contact contact = contactManager.LoadContactReadOnly(userName); return contact; Change the automation state of the contact # This method doesn&amp;rsquo;t require initialization of the tracker, which is handy if the state should be changed outside of the site context (for example in the shell).</description>
    </item>
    
    <item>
      <title>Unicorn</title>
      <link>https://www.wikiod.com/sitecore/unicorn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sitecore/unicorn/</guid>
      <description>Unicorn is a utility for Sitecore that solves the issue of moving templates, renderings, and other database items between Sitecore instances. This becomes problematic when developers have their own local instances - packages are error-prone and tend to be forgotten on the way to production. Unicorn solves this issue by writing serialized copies of Sitecore items to disk along with the code - this way, a copy of the necessary database items for a given codebase accompanies it in source control.</description>
    </item>
    
  </channel>
</rss>

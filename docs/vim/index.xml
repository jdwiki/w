<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim Tutorial on </title>
    <link>https://www.wikiod.com/docs/vim/</link>
    <description>Recent content in vim Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with vim</title>
      <link>https://www.wikiod.com/vim/getting-started-with-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/getting-started-with-vim/</guid>
      <description>Exiting Vim # In order to exit Vim, first make sure you are in Normal mode by pressing Esc.
:q Enter (will prevent you from exiting if you have unsaved changes - short for :quit) To discard changes and exit Vim:
:q! Enter to force exit and discard changes (short for :quit!, not to be confused with :!q), ZQ is a shortcut that does the same as :q!, :cq Enter quit and return error (discard all changes so the compiler will not recompile this file) To save changes and exit Vim:</description>
    </item>
    
    <item>
      <title>Easter Eggs</title>
      <link>https://www.wikiod.com/vim/easter-eggs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/easter-eggs/</guid>
      <description>When you&amp;rsquo;re feeling down # Problem: Vim users are not always happy.
Solution: Make them happy.
:smile
Note: Requires patch version ≥7.4.1005
Help! # For the distressed user, vim provides words of wisdom.
:help! Looking for the Holy Grail # Check this out:
:help holy-grail The Answer # Vim knows The Answer:
:help 42
Vim will open the usr_42.txt document from the manual and show the following text:
What is the meaning of life, the universe and everything?</description>
    </item>
    
    <item>
      <title>Tips and tricks to boost productivity</title>
      <link>https://www.wikiod.com/vim/tips-and-tricks-to-boost-productivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/tips-and-tricks-to-boost-productivity/</guid>
      <description>Syntax # :set relativenumber :set number :set nonumber / :set nonu :pwd This automatic reload will only happen if you edit your vimrc in a version full version of vim which supports autocmd.
Turn On Relative Line Numbers # To delete some lines of text when you don&amp;rsquo;t know exact number of lines to delete, you try 10dd , 5dd , 3dd until you remove all the lines.
Relative line numbers solves this problem, suppose we have a file containing :</description>
    </item>
    
    <item>
      <title>Converting text files from DOS to UNIX with vi</title>
      <link>https://www.wikiod.com/vim/converting-text-files-from-dos-to-unix-with-vi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/converting-text-files-from-dos-to-unix-with-vi/</guid>
      <description>The ^M character stands for a carriage return in Vim (&amp;lt;c-m&amp;gt; or just &amp;lt;CR&amp;gt;). Vim displays this character when at least on line in the file uses LF line endings. In other words, when Vim consider a file to have fileformat=unix but some lines do have carriage returns (CR), the carriage returns are displayed as ^M.
A file that has a single line with LF line ending and several lines with CRLF line endings is most often created by wrongly editing a file created on a MSDOS based system.</description>
    </item>
    
    <item>
      <title>Inserting text</title>
      <link>https://www.wikiod.com/vim/inserting-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/inserting-text/</guid>
      <description>Running normal commands from insert mode # While in insert mode, press &amp;lt;C-o&amp;gt; to temporarily leave insert mode and execute a one-off normal command.
Example # &amp;lt;C-o&amp;gt;2w jumps to the second word to the left and returns to insert mode.
Note: Repeating with . will only repeat the actions from returning to insert mode
This allows for some useful mappings, e.g.
inoremap &amp;lt;C-f&amp;gt; &amp;lt;Right&amp;gt; inoremap &amp;lt;C-b&amp;gt; &amp;lt;Left&amp;gt; inoremap &amp;lt;C-a&amp;gt; &amp;lt;C-o&amp;gt;^ inoremap &amp;lt;C-e&amp;gt; &amp;lt;C-o&amp;gt;$ Now ctrl+a will put the cursor to the beginning of the line and ctrl+e - to the end of line.</description>
    </item>
    
    <item>
      <title>Movement</title>
      <link>https://www.wikiod.com/vim/movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/movement/</guid>
      <description>Basic Motion # Remarks # Every motion can be used after an operator command, so the command operates on the text comprised by the movement&amp;rsquo;s reach. Just like operator commands, motions can include a count, so you can move by 2words, for example. Arrows # In Vim, normal arrow/cursor keys (←↓↑→) work as expected. However, for touch-typers, it&amp;rsquo;s easier to use the hjkl alternative keys. On a typical keyboard, they&amp;rsquo;re located next to each other on the same row, and easily accessible using right hand.</description>
    </item>
    
    <item>
      <title>Split windows</title>
      <link>https://www.wikiod.com/vim/split-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/split-windows/</guid>
      <description>Syntax # :split &amp;lt;file&amp;gt; :vsplit &amp;lt;file&amp;gt; :sp &amp;lt;- shorthand for split :vsp &amp;lt;- shorthand for vsplit When called from the command line, multiple files can be provided in the argument and vim will create one split for each file. When called from ex mode, only one file can be opened per invocation of the command.
Opening multiple files in splits from the command line # Horizontally # vim -o file1.txt file2.</description>
    </item>
    
    <item>
      <title>Configuring Vim</title>
      <link>https://www.wikiod.com/vim/configuring-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/configuring-vim/</guid>
      <description>Files and directories # Whatever you do to customize Vim, it should NEVER happen outside of $HOME:
on Linux, BSD and Cygwin, $HOME is usually /home/username/, on Mac OS X, $HOME is /Users/username/, on Windows, $HOME is usually C:\Users\username\. The canonical location for your vimrc and your vim directory is at the root of that $HOME directory:
on Unix-like systems
$HOME/.vimrc &amp;lt;-- the file $HOME/.vim/ &amp;lt;-- the directory on Windows</description>
    </item>
    
    <item>
      <title>Macros</title>
      <link>https://www.wikiod.com/vim/macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/macros/</guid>
      <description>Recording a macro # One way to create a macro is to record it.
Start recording a macro and save it to a register (in this example, we&amp;rsquo;ll use a, but it can be any register you could normally yank text to):
qa Then run the commands you want to record in the macro (here, we&amp;rsquo;ll surround the contents of a line with &amp;lt;li&amp;gt; tags):
I&amp;lt;li&amp;gt;&amp;lt;ESC&amp;gt;A&amp;lt;/li&amp;gt; When we&amp;rsquo;re finished with the commands we want to record in the macro, stop the recording:</description>
    </item>
    
    <item>
      <title>Extending Vim</title>
      <link>https://www.wikiod.com/vim/extending-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vim/extending-vim/</guid>
      <description>A plugin is a script or set of scripts that changes Vim&amp;rsquo;s default behavior, either by adding non-existing features or by extending existing features.
Often added &amp;ldquo;non-existing features&amp;rdquo; include:
commenting, indentation detection, autocompletion, fuzzy-matching, support for a specific language, etc. Often extended &amp;ldquo;existing features&amp;rdquo; include:
omni-completion, text-objects &amp;amp; motions, yanking &amp;amp; putting, status line, search &amp;amp; replace, buffer/window/tab page switching, folding, etc. Vundle # Vundle is a plugin manager for Vim.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOM Tutorial on </title>
    <link>https://www.wikiod.com/docs/dom/</link>
    <description>Recent content in DOM Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with DOM</title>
      <link>https://www.wikiod.com/dom/getting-started-with-dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/getting-started-with-dom/</guid>
      <description>HTML markup # example input:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;the title&amp;lt;/title&amp;gt; &amp;lt;link href=&#39;css/app.css&#39; type=&#39;text/css&#39; rel=&#39;stylesheet&#39;&amp;gt; &amp;lt;script src=&#39;js/app.js&#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;hello!&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; DOM element output: # ------------ | document | &amp;lt;--- DOM root object. ------------ | | ------------ | html | &amp;lt;--- document.documentElement ------------ ______________|______________ | | ------------ ------------ | head | | body | ------------ ------------ ______________|______________ |______________ | | | | | ------------ ------------ ------------ ------------ ------------ | title | | link | | script | | h1 | | div | ------------ ------------ ------------ ------------ ------------ | | ------------ | p | ------------ All the above elements inherit from HTMLElement interface and get customized depending on specific tag</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://www.wikiod.com/dom/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/events/</guid>
      <description>Parameters # Parameter Description type String defines the name of the event to listen to. listener Function triggers when the event occurs. options Boolean to set capture, if Object you can set the following properties on it, notice that the object option is weakly supported. 1. capture A Boolean that indicates that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.</description>
    </item>
    
    <item>
      <title>Retrieving Elements</title>
      <link>https://www.wikiod.com/dom/retrieving-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/retrieving-elements/</guid>
      <description>By ID # document.getElementById(&#39;uniqueID&#39;) will retrieve
&amp;lt;div id=&amp;quot;uniqueID&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; As long as an element with the given ID exists, document.getElementById will return only that element. Otherwise, it will return null.
Note: IDs must be unique. Multiple elements cannot have the same ID.
By Tag Name # document.getElementsByTagName(&#39;b&#39;) will retrieve
&amp;lt;b&amp;gt;All&amp;lt;/b&amp;gt; &amp;lt;b&amp;gt;of&amp;lt;/b&amp;gt; &amp;lt;b&amp;gt;the b elements.&amp;lt;/b&amp;gt; If no elements with the given tag name exist, an empty collection will be returned.
By CSS Selector # Consider following html code</description>
    </item>
    
    <item>
      <title>Manipulating a list of CSS classes</title>
      <link>https://www.wikiod.com/dom/manipulating-a-list-of-css-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/manipulating-a-list-of-css-classes/</guid>
      <description>Testing for a class # Modern browsers provide a classList object to ease manipulation of the element&amp;rsquo;s class attribute. Older browsers require direct manipulation of the element&amp;rsquo;s className property.
* Note class names are not stored in the element&amp;rsquo;s property in any particular order
Testing if an element contains a class requires a bit of manipulation of the className property. This example is using an array method to test for the class.</description>
    </item>
    
    <item>
      <title>Traversal</title>
      <link>https://www.wikiod.com/dom/traversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/traversal/</guid>
      <description>Tree walking # Iterating over nodes # The NodeIterator interface provides methods for iterating over nodes in a DOM tree.
Given a document like this one:
&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;section class=&amp;quot;main&amp;quot;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;List Item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List Item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List Item&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;List Item&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; One could imagine an iterator to get the &amp;lt;li&amp;gt; elements:
let root = document.body; let whatToShow = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT; let filter = (node) =&amp;gt; node.nodeName.toLowerCase() === &#39;li&#39; ?</description>
    </item>
    
    <item>
      <title>Manipulating Elements</title>
      <link>https://www.wikiod.com/dom/manipulating-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/manipulating-elements/</guid>
      <description>Cloning elements # Adding an element # In this example we create a new list element with the text &amp;ldquo;new text&amp;rdquo;, and select the first unordered list, and its first list element.
let newElement = document.createElement(&amp;quot;li&amp;quot;); newElement.innerHTML = &amp;quot;new text&amp;quot;; let parentElement = document.querySelector(&amp;quot;ul&amp;quot;); let nextSibling = parentElement.querySelector(&amp;quot;li&amp;quot;); When inserting an element, we do it under the parent element, and just before a particular child element of that parent element.</description>
    </item>
    
    <item>
      <title>Using CSS styles</title>
      <link>https://www.wikiod.com/dom/using-css-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/using-css-styles/</guid>
      <description>The interfaces detailed herein were introduced in DOM Level 2 Style, which came out at approximately the same time as DOM Level 2 Core and is thus considered &amp;ldquo;part of DOM version 2&amp;rdquo;.
Reading and changing inline styles # Inline style # You can manipulate the inline CSS style of an HTML element by simply reading or editing its style property.
Assume the following element:
&amp;lt;div id=&amp;quot;element_id&amp;quot; style=&amp;quot;color:blue;width:200px;&amp;quot;&amp;gt;abc&amp;lt;/div&amp;gt; With this JavaScript applied:</description>
    </item>
    
    <item>
      <title>Manipulating Attributes</title>
      <link>https://www.wikiod.com/dom/manipulating-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dom/manipulating-attributes/</guid>
      <description>Attributes are a specific type of object in the DOM API. In earlier versions of the DOM API, they inherited from the Node type, but this was changed in version 4.
In the examples referring to dataset, &amp;ldquo;modern browsers&amp;rdquo; specifically excludes versions of Internet Explorer less than 11. See caniuse.com for more up to date information.
Getting an attribute # Some attributes are directly accessible as properties of the element (e.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jasmine Tutorial on </title>
    <link>https://www.wikiod.com/docs/jasmine/</link>
    <description>Recent content in jasmine Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jasmine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jasmine</title>
      <link>https://www.wikiod.com/jasmine/getting-started-with-jasmine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jasmine/getting-started-with-jasmine/</guid>
      <description>Installation or Setup # Installing Jasmine standalone
Download the latest Jasmine release from the Jasmine release page:
Running Jasmine locally
Run Jasmine in the browser by downloading the zip file, extracting it, the referencing the files as follows:
Installing Jasmine using npm (Node Package Manager)
Set up project directory for Jasmine
Create a folder and run npm init this will create an empty package.json file and will ask some questions about your project to fill project json file.</description>
    </item>
    
    <item>
      <title>Spies</title>
      <link>https://www.wikiod.com/jasmine/spies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jasmine/spies/</guid>
      <description>A spy is defined as a test specific function which intercepts calls to an underlying function in the application code and dispatches its own implementation when the underlying function is called to test the interface rather than the implementation.
Spying on an existing function # Jasmine can spy on an existing function using the spyOn function.
let calculator = { multiply: function(a, b) { return a * b; }, square: function(a) { return this.</description>
    </item>
    
    <item>
      <title>Custom Matchers</title>
      <link>https://www.wikiod.com/jasmine/custom-matchers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jasmine/custom-matchers/</guid>
      <description>Adding Custom Matchers # Custom matchers can be added in jasmine using the syntax:
jasmine.addMatchers([ toMatch: function () { return { compare: function (actual, expected) { return { pass: actual===expected, message: &amp;quot;Expected actual to match expected } } } } ]); This matcher can now be called with:
expected(actual).toMatch(expected); Negative Matchers # Custom matchers will have their pass value negated when using &amp;rsquo;not&amp;rsquo;. Custom matchers can have a negative compare attribute to explicitly handle cases where their negation is desired:</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>https://www.wikiod.com/jasmine/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jasmine/attributes/</guid>
      <description>There are some terms you must be aware of before going to write the Jasmine test cases.
Suites A suit is the starting point of a Jasmine test cases, it actually calls the global jasmine function describe. It can have two parameters, a string value which describes the suit, and a function which implements the suit.
Spec Like suites, a spec starts with a string which can be the title of the suit and a function where we write the tests.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gwt Tutorial on </title>
    <link>https://www.wikiod.com/docs/gwt/</link>
    <description>Recent content in gwt Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/gwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with gwt</title>
      <link>https://www.wikiod.com/gwt/getting-started-with-gwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gwt/getting-started-with-gwt/</guid>
      <description>Installation # Download and unzip the GWT SDK. This contains the core libraries, compiler, and development server that you need to write web applications.
On Windows, extract the files from the compressed folder gwt-2.7.0.zip. On Mac or Linux, you can unpack the package with a command like:
unzip gwt-2.7.0.zip The GWT SDK doesnâ€™t have an installer application. All the files you need to run and use the SDK are located in the extracted directory.</description>
    </item>
    
    <item>
      <title>Server side communication with RestyGwt</title>
      <link>https://www.wikiod.com/gwt/server-side-communication-with-restygwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gwt/server-side-communication-with-restygwt/</guid>
      <description>As RestyGWT is a GWT generator, it will automatically create the implementation of your client interface. Under the hood it will use the RequestBuilder class to implement your calls.
Defining and using your REST client # You should already have your backend REST resource available. On the client side (GWT) your need to
Add RestyGwt dependency to your project with maven
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.fusesource.restygwt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;restygwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the inheritance to your module file</description>
    </item>
    
    <item>
      <title>Events usage with HandlerManager</title>
      <link>https://www.wikiod.com/gwt/events-usage-with-handlermanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gwt/events-usage-with-handlermanager/</guid>
      <description>Simple Event and EventHandler usage syntax # HanlderManager providing:
public class HandlerManagerProvider { private static HandlerManager handlerManager; private HandlerManagerProvider() { } public static HandlerManager get() { return handlerManager != null ? handlerManager : (handlerManager = new HandlerManager(null)); } } EventHandler:
import com.google.gwt.event.shared.EventHandler; public interface CustomEventHandler extends EventHandler { void doMyAction(CustomEvent event); } Event:
import com.google.gwt.event.shared.GwtEvent; public class CustomEvent extends GwtEvent&amp;lt;CustomEventHandler&amp;gt; { public static final Type&amp;lt;CustomEventHandler&amp;gt; TYPE = new Type&amp;lt;&amp;gt;(); @Override public Type&amp;lt;CustomEventHandler&amp;gt; getAssociatedType() { return TYPE; } @Override protected void dispatch(CustomEventHandler) { handler.</description>
    </item>
    
  </channel>
</rss>

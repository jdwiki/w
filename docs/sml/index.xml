<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sml Tutorial on </title>
    <link>https://www.wikiod.com/docs/sml/</link>
    <description>Recent content in sml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sml</title>
      <link>https://www.wikiod.com/sml/getting-started-with-sml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sml/getting-started-with-sml/</guid>
      <description>Installation # There is a dozen implementations of Standard ML. MLton produces very optimized code, but has no REPL. SML/NJ is the most widely used, but has slightly difficult error messages for learning purposes. Moscow ML and Poly/ML are easy to get started with, but don&amp;rsquo;t support the .mlb package format. That isn&amp;rsquo;t essential for getting started, though.
Here are instructions for installing each of SML/NJ, Moscow ML and Poly/ML divided by operating system.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.wikiod.com/sml/comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sml/comments/</guid>
      <description>Syntax # (* opens a block comment *) closes a block comment (* and *) must be balanced in number All comments are block comments # (************************************************* * All comments in SML are block comments * Block Comments begin with &#39;(*&#39; * Block Comments end with &#39;*)&#39; * (* Block Comments can be nested *) * The additional framing asterisks at the beginning * and end of this block comment are common to languages * of SML&#39;s vintage.</description>
    </item>
    
    <item>
      <title>Numeric Types</title>
      <link>https://www.wikiod.com/sml/numeric-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sml/numeric-types/</guid>
      <description>Syntax # Real numbers must begin with one or more digits followed by a period followed by one or more digits. ~ is the operator to denote negative numbers div is the operator for integer division. / is the operator for real division. Integer # Integer Basics
Standard ML of New Jersey v110.78 [built: Thu Jul 23 11:21:58 2015] - 6; val it = 6 : int - ~6; val it = ~6 : int - 6 + ~6; val it = 0 : int Integer Division</description>
    </item>
    
    <item>
      <title>Interactive Programming using the REPL</title>
      <link>https://www.wikiod.com/sml/interactive-programming-using-the-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sml/interactive-programming-using-the-repl/</guid>
      <description>Syntax # Unlike source code files, the semicolon &amp;lsquo;;&amp;rsquo; is mandatory to terminate each expression in the REPL. Starting the SMLNJ REPL # REPL stands for &amp;lsquo;Read Evaluate Print Loop.&amp;rsquo; The REPL can be used to write and execute code one line at a time and is an alternative to writing code to a file and then compiling or interpreting the entire file before execution.
To start the SMLNJ REPL from a command prompt:</description>
    </item>
    
    <item>
      <title>Module System</title>
      <link>https://www.wikiod.com/sml/module-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sml/module-system/</guid>
      <description>Lazy evaluation # Standard ML doesn&amp;rsquo;t have built-in support for lazy evaluation. Some implementations, notably SML/NJ, have nonstandard lazy evaluation primitives, but programs that use those primitives won&amp;rsquo;t be portable. Lazy suspensions can also be implemented in a portable manner, using Standard ML&amp;rsquo;s module system.
First we define an interface, or signature, for manipulating lazy suspensions:
signature LAZY = sig type &#39;a lazy val pure : &#39;a -&amp;gt; &#39;a lazy val delay : (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;a -&amp;gt; &#39;b lazy val force : &#39;a lazy -&amp;gt; &#39;a exception Diverge val fix : (&#39;a lazy -&amp;gt; &#39;a) -&amp;gt; &#39;a end This signature indicates that:</description>
    </item>
    
  </channel>
</rss>

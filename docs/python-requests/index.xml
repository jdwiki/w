<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python-requests Tutorial on </title>
    <link>https://www.wikiod.com/docs/python-requests/</link>
    <description>Recent content in python-requests Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/python-requests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with python-requests</title>
      <link>https://www.wikiod.com/python-requests/getting-started-with-python-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/getting-started-with-python-requests/</guid>
      <description>Installation or Setup # python-requests is available on PyPI, the Python Package Index, which means it can be installed through pip:
pip install requests Up-to-date source code can be found on the requests GitHub repository
If you wish to install it from source, you can do this by either cloning the GitHub repository:
git clone git://github.com/kennethreitz/requests.git Or by getting the tarball (-O writes the output to file; -L follows redirects):</description>
    </item>
    
    <item>
      <title>Automating login using Requests over Single Sign On</title>
      <link>https://www.wikiod.com/python-requests/automating-login-using-requests-over-single-sign-on/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/automating-login-using-requests-over-single-sign-on/</guid>
      <description>Example of accessing authenticated pages using requests # Sometimes we have requirement of parsing pages, but doing so requires you to be an authorised user. Here is an example which shows you how to do in oracle sign in.
import sys import requests import json from bs4 import BeautifulSoup def mprint(x): sys.stdout.write(x) print return headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux i686; rv:7.0.1) Gecko/20100101 Firefox/7.0.1&#39;} mprint(&#39;[-] Initialization...&#39;) s = requests.session() s.headers.update(headers) print &#39;done&#39; mprint(&#39;[-] Gathering JSESSIONID.</description>
    </item>
    
    <item>
      <title>Sending and receiving JSON</title>
      <link>https://www.wikiod.com/python-requests/sending-and-receiving-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/sending-and-receiving-json/</guid>
      <description>POSTing JSON # To POST a JSON body, pass in a Python data structure to the json argument; here a dictionary is posted but anything that can be encoded to JSON will do:
import requests # Create a dictionary to be sent. json_data = {&#39;foo&#39;: [&#39;bar&#39;, &#39;baz&#39;], &#39;spam&#39;: True, &#39;eggs&#39;: 5.5} # Send the data. response = requests.post(url=&#39;http://example.com/api/foobar&#39;, json=json_data) print(&amp;quot;Server responded with %s&amp;quot; % response.status_code) requests takes care of encoding to JSON for you, and sets the Content-Type to application/json.</description>
    </item>
    
    <item>
      <title>Django Framework</title>
      <link>https://www.wikiod.com/python-requests/django-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/django-framework/</guid>
      <description>Installation &amp;amp; Setup # Django is a full stack framework for web development. It powers some of the most popular websites on the Internet.
To install the framework; use the pip tool:
pip install django If you are installing this on OSX or Linux, the above command may result in a permission error; to avoid this error, install the package for your user account or use a virtual environment:
pip install --user django Once it is installed - you will have access to django-admin bootstrapping tool, which will create a directory with some defaults to start development.</description>
    </item>
    
    <item>
      <title>Using requests behind a proxy</title>
      <link>https://www.wikiod.com/python-requests/using-requests-behind-a-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/using-requests-behind-a-proxy/</guid>
      <description>Setting proxy in Python code # If your code is running behind a proxy and you know the end point, you can set this information in your code.
requests accepts a proxies parameter. This should be a dictionary that maps protocol to the proxy URL.
proxies = { &#39;http&#39;: &#39;http://proxy.example.com:8080&#39;, &#39;https&#39;: &#39;http://secureproxy.example.com:8090&#39;, } Notice that in the dictionary we have defined the proxy URL for two separate protocols: HTTP and HTTPS.</description>
    </item>
    
    <item>
      <title>Files</title>
      <link>https://www.wikiod.com/python-requests/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python-requests/files/</guid>
      <description>Parameters # Parameters Function file JSON List of paths to the files. content_type MIME Types headers HTTP Headers The r variable in the examples contains the full binary data of whatever file you&amp;rsquo;re sending.
Simple File Upload # url = &#39;http://your_url&#39; files = {&#39;file&#39;: open(&#39;myfile.test&#39;, &#39;rb&#39;)} r = requests.post(url, files=files) File Upload w/ Manual Params # url = &#39;http://httpbin.org/post&#39; files = {&#39;file&#39;: (&#39;report.xls&#39;, open(&#39;report.xls&#39;, &#39;rb&#39;), &#39;application/vnd.ms-excel&#39;, {&#39;Expires&#39;: &#39;0&#39;})} r = requests.</description>
    </item>
    
  </channel>
</rss>

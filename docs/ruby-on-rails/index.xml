<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails Tutorial on </title>
    <link>https://www.wikiod.com/docs/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Ruby on Rails</title>
      <link>https://www.wikiod.com/ruby-on-rails/getting-started-with-ruby-on-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/getting-started-with-ruby-on-rails/</guid>
      <description>Creating a Ruby on Rails Application # This example assumes Ruby and Ruby on Rails have already been installed properly. If not, you can find how to do it here.
Open up a command line or terminal. To generate a new rails application, use rails new command followed by the name of your application:
$ rails new my_app If you want to create your Rails application with a specific Rails version then you can specify it at the time of generating the application.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/ruby-on-rails/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/routing/</guid>
      <description>The Rails router recognizes URLs and dispatches them to a controller&amp;rsquo;s action. It can also generate paths and URLs, avoiding the need to hardcode strings in your views.
&amp;ldquo;Routing&amp;rdquo; in general is how URL&amp;rsquo;s are &amp;ldquo;handled&amp;rdquo; by your app. In Rails case it&amp;rsquo;s typically which controller and which action of that controller will handle a particular incoming URL. In Rails apps, routes are usually placed in the config/routes.rb file.
Resource Routing (Basic) # Routes are defined in config/routes.</description>
    </item>
    
    <item>
      <title>ActiveRecord Migrations</title>
      <link>https://www.wikiod.com/ruby-on-rails/activerecord-migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/activerecord-migrations/</guid>
      <description>Parameters # Column type Description :primary_key Primary key :string Shorter string datatype. Allows limit option for maximum number of characters. :text Longer amount of text. Allows limit option for maximum number of bytes. :integer Integer. Allows limit option for maximum number of bytes. :bigint Larger integer :float Float :decimal Decimal number with variable precision. Allows precision and scale options. :numeric Allows precision and scale options. :datetime DateTime object for dates/times. :time Time object for times.</description>
    </item>
    
    <item>
      <title>Rails Best Practices</title>
      <link>https://www.wikiod.com/ruby-on-rails/rails-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/rails-best-practices/</guid>
      <description>Fat Model, Skinny Controller # “Fat Model, Skinny Controller” refers to how the M and C parts of MVC ideally work together. Namely, any non-response-related logic should go in the model, ideally in a nice, testable method. Meanwhile, the “skinny” controller is simply a nice interface between the view and model.
In practice, this can require a range of different types of refactoring, but it all comes down to one idea: by moving any logic that isn’t about the response to the model (instead of the controller), not only have you promoted reuse where possible but you’ve also made it possible to test your code outside of the context of a request.</description>
    </item>
    
    <item>
      <title>ActiveRecord</title>
      <link>https://www.wikiod.com/ruby-on-rails/activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/activerecord/</guid>
      <description>Creating a Model via generator # Ruby on Rails provides a model generator you can use to create ActiveRecord models. Simply use rails generate model and provide the model name.
$ rails g model user In addition to the model file in app/models, the generator will also create:
the Test in test/models/user_test.rb the Fixtures in test/fixtures/users.yml the database Migration in db/migrate/XXX_create_users.rb You can also generate some fields for the model when generating it.</description>
    </item>
    
    <item>
      <title>ActiveRecord Query Interface</title>
      <link>https://www.wikiod.com/ruby-on-rails/activerecord-query-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/activerecord-query-interface/</guid>
      <description>ActiveRecord is the M in MVC which is the layer of the system responsible for representing business data and logic. The technique that connects the rich objects of an application to tables in a relational database management system is Object Relational Mapper(ORM).
ActiveRecord will perform queries on the database for you and is compatible with most database systems. Regardless of which database system you&amp;rsquo;re using, the ActiveRecord method format will always be the same.</description>
    </item>
    
    <item>
      <title>Naming Conventions</title>
      <link>https://www.wikiod.com/ruby-on-rails/naming-conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/naming-conventions/</guid>
      <description>Controllers # Controller class names are pluralized. The reason is the controller controls multiple instances of object instance.
For Example: OrdersController would be the controller for an orders table. Rails will then look for the class definition in a file called orders_controller.rb in the /app/controllers directory.
For Example: PostsController would be the controller for a posts table.
If the controller class name has multiple capitalized words, the table name is assumed to have underscores between these words.</description>
    </item>
    
    <item>
      <title>Configure Angular with Rails</title>
      <link>https://www.wikiod.com/ruby-on-rails/configure-angular-with-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/configure-angular-with-rails/</guid>
      <description>Angular with Rails 101 # Step 1: Create a new Rails app # gem install rails -v 4.1 rails new angular_example Step 2: Remove Turbolinks # Removing turbolinks requires removing it from the Gemfile.
gem &#39;turbolinks&#39; Remove the require from app/assets/javascripts/application.js:
//= require turbolinks Step 3: Add AngularJS to the asset pipeline # In order to get Angular to work with the Rails asset pipeline we need to add to the Gemfile:</description>
    </item>
    
    <item>
      <title>User Authentication in Rails</title>
      <link>https://www.wikiod.com/ruby-on-rails/user-authentication-in-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/user-authentication-in-rails/</guid>
      <description>Devise is a very powerful gem, it allows you to sign up, sign in and sign out options just after installing. Moreover user can add authentications and restrictions to its applications. Devise also come with its own views, if user wants to use. A user can also customize sign up and sign in forms according to its need and requirement. It should be noted that Devise recommends that you implement your own login if you&amp;rsquo;re new to rails.</description>
    </item>
    
    <item>
      <title>ActiveRecord Validations</title>
      <link>https://www.wikiod.com/ruby-on-rails/activerecord-validations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ruby-on-rails/activerecord-validations/</guid>
      <description>Validating length of an attribute # class Person &amp;lt; ApplicationRecord validates :name, length: { minimum: 2 } validates :bio, length: { maximum: 500 } validates :password, length: { in: 6..20 } validates :registration_number, length: { is: 6 } end The possible length constraint options are:
:minimum - The attribute cannot have less than the specified length. :maximum - The attribute cannot have more than the specified length. :in (or :within) - The attribute length must be included in a given interval.</description>
    </item>
    
  </channel>
</rss>

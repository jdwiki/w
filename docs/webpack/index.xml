<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webpack Tutorial on </title>
    <link>https://www.wikiod.com/docs/webpack/</link>
    <description>Recent content in webpack Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/webpack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with webpack</title>
      <link>https://www.wikiod.com/webpack/getting-started-with-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/getting-started-with-webpack/</guid>
      <description>Example of Javascript + CSS + Fonts + Images # Required modules
npm install --save-dev webpack extract-text-webpack-plugin file-loader css-loader style-loader Folder structure
. └── assets ├── css ├── images └── js webpack.config.js
const webpack = require(&#39;webpack&#39;); const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;); const path = require(&#39;path&#39;); const glob = require(&#39;glob&#39;); module.exports = { entry: { script: path.resolve(__dirname, &#39;./assets/js/app.js&#39;), style: path.resolve(__dirname, &#39;./assets/css/app.css&#39;), images: glob.sync(path.resolve(__dirname, &#39;./assets/images/**/*.*&#39;)), }, context: __dirname, output: { path: path.resolve(&#39;./dist/assets&#39;), publicPath: &#39;/dist/assets&#39;, filename: &#39;[name].</description>
    </item>
    
    <item>
      <title>DllPlugin and DllReferencePlugin</title>
      <link>https://www.wikiod.com/webpack/dllplugin-and-dllreferenceplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/dllplugin-and-dllreferenceplugin/</guid>
      <description>The Dll and DllReference plugins allow the code to be split in multiple bundles in a way the bundles can be compiled independently.
It is possible to build &amp;ldquo;vendor&amp;rdquo; scripts in a library that does not need to be compiled often (ex: React, jQuery, Bootstrap, Fontawesome&amp;hellip;) and reference it in your app bundle that will need those scripts.
The application bundle, the one that is constantly going to be changed, will be in a separate configuration just referencing a already built &amp;ldquo;vendor&amp;rdquo; bundle.</description>
    </item>
    
    <item>
      <title>Hot Module Replacement</title>
      <link>https://www.wikiod.com/webpack/hot-module-replacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/hot-module-replacement/</guid>
      <description>webpack-hot-middleware # Use with webpack-dev-middleware, by adding webpack-hot-middleware/client to entry.
Config # Add configs as query string to the path. Example:
webpack-hot-middleware/client?path=/__what&amp;amp;timeout=2000&amp;amp;overlay=false Option Description path The path which the middleware is serving the event stream on timeout The time to wait after a disconnection before attempting to reconnect overlay Set to false to disable the DOM-based client-side overlay. reload Set to true to auto-reload the page when webpack gets stuck. noInfo Set to true to disable informational console logging.</description>
    </item>
    
    <item>
      <title>Loaders</title>
      <link>https://www.wikiod.com/webpack/loaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/loaders/</guid>
      <description>Webpack loaders can be configured as &amp;ldquo;preLoaders&amp;rdquo;, &amp;ldquo;loaders&amp;rdquo; and &amp;ldquo;postLoaders&amp;rdquo;. Although they don&amp;rsquo;t have to be, configurations which use linting or other imperative or serial operations can take advantage of these build stages in the pipeline.
The key to understanding loaders and their use is that Webpack will run each module in the require graph through the loader system. Following the example above, this means that as Webpack begins crawling through the imports of your application, it will identify the files required and using a simple regex, will determine which file or file type requires what loader or series of loaders.</description>
    </item>
    
    <item>
      <title>Loaders &amp; Plugins</title>
      <link>https://www.wikiod.com/webpack/loaders--plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/loaders--plugins/</guid>
      <description>Loaders and plugins make up the building blocks of Webpack.
Loaders are typically delegated to a single task and file type. They are easier to setup and usually require less boilerplate code.
Plugins, on the other hand, have access to Webpack&amp;rsquo;s internal build system via hooks, and are therefore more powerful. Plugins can modify the fully configured Webpack environment, and they can perform custom actions throughout the compilation process.
When dealing with our CSS files, for example, a loader might be used to automatically add vendor prefixes to properties, while a plugin might be used to produce a minified stylesheet in the bundler build process.</description>
    </item>
    
    <item>
      <title>Usage of Webpack</title>
      <link>https://www.wikiod.com/webpack/usage-of-webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/usage-of-webpack/</guid>
      <description>Usage CommonJS modules example # Create folder. Open it in command line. Run npm install webpack -g. Create 2 files:
cats.js:
var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; app.js
cats = require(&#39;./cats.js&#39;); console.log(cats); Run in command line: webpack ./app.js app.bundle.js
Now in folder will be file app.bundle.js. You can include it in index.html page, open it in browser and see result in console.
But more fast way is run in command line: node app.</description>
    </item>
    
    <item>
      <title>Tree Shaking</title>
      <link>https://www.wikiod.com/webpack/tree-shaking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/tree-shaking/</guid>
      <description>ES2015 tree shaking # webpack 2 introduces tree shaking which can remove unused code when ES2015 modules are used to import and export code.
Install # npm install babel-preset-es2015-webpack --save-dev Usage # in .babelrc:
{ &amp;quot;presets&amp;quot;: [ &amp;quot;es2015-webpack&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>Development server webpack-dev-server</title>
      <link>https://www.wikiod.com/webpack/development-server-webpack-dev-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/webpack/development-server-webpack-dev-server/</guid>
      <description>Installation # webpack-dev-server can be installed via npm
npm --save-dev webpack-dev-server now you can start server
./node_modules/.bin/webpack-dev-server To simplify usage you can add script to package.json
// package.json { ... &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }, ... } now to run server you can use
npm run start webpack-dev-server is configured in webpack.config.js file in section devServer.
To change server content base directory you can use option contentBase. Example configuration setting root directory to public_html could look like</description>
    </item>
    
  </channel>
</rss>

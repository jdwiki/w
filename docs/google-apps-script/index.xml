<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google-apps-script Tutorial on </title>
    <link>https://www.wikiod.com/docs/google-apps-script/</link>
    <description>Recent content in google-apps-script Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with google-apps-script</title>
      <link>https://www.wikiod.com/google-apps-script/getting-started-with-google-apps-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/getting-started-with-google-apps-script/</guid>
      <description>Types of Scripts # Google App scripts are of three types.
Standalone Bound to Google Apps Web Apps Standalone script
Standalone scripts are not bound to any Google apps i.e Docs, Sheets or Forms etc. Standalone script can either be created by visiting script.google.com or by connecting Google app script with Google drive. Standalone script can be used to program Google apps independently, can be used as a Web App or can be set up to run automatically from an installable trigger.</description>
    </item>
    
    <item>
      <title>DriveApp - getFileById(id)</title>
      <link>https://www.wikiod.com/google-apps-script/driveapp---getfilebyidid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/driveapp---getfilebyidid/</guid>
      <description>It is also possible to get a file by the file&amp;rsquo;s URL. The ID of a file is in the url, so using the ID instead of the entire URL means that the parameter is shorter. Storing the URL rather than the ID takes up more space.
Get a file from Google Drive using the file ID # function getGoogleDriveFileById(id) { var file; file = DriveApp.getFileById(id);//Returns a file - The &amp;quot;id&amp;quot; must be a string //One way to manually get a file ID // - Open the file from Google Drive // - The file ID is in the URL in the browsers address bar //https://docs.</description>
    </item>
    
    <item>
      <title>Google sheets MailApp</title>
      <link>https://www.wikiod.com/google-apps-script/google-sheets-mailapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/google-sheets-mailapp/</guid>
      <description>This service allows users to send emails with complete control over the content of the email. Unlike GmailApp, MailApp&amp;rsquo;s sole purpose is sending email. MailApp cannot access a user&amp;rsquo;s Gmail inbox.
Changes to scripts written using GmailApp are more likely to trigger a re-authorization request from a user than MailApp scripts.
A basic MailApp Example # MailApp is the api from Google App Script that can be used to send mail</description>
    </item>
    
    <item>
      <title>DriveApp</title>
      <link>https://www.wikiod.com/google-apps-script/driveapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/driveapp/</guid>
      <description>Create a new folder in a Google Drive root # function createNewFolderInGoogleDrive(folderName) { return DriveApp.createFolder(folderName); } Use function createNewFolderInGoogleDrive to create folder named Test folder in a Google Drive root:
var newFolder = createNewFolderInGoogleDrive(&#39;Test folder&#39;); newFolder has Class Folder type:
// output id of new folder to log Logger.log(newFolder.getId()); Create new file in Google Drive of a certain Mime type # function createGoogleDriveFileOfMimeType() { var content,fileName,newFile;//Declare variable names fileName = &amp;quot;Test File &amp;quot; + new Date().</description>
    </item>
    
    <item>
      <title>DriveApp Service</title>
      <link>https://www.wikiod.com/google-apps-script/driveapp-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/driveapp-service/</guid>
      <description>Google Mime types can not be used for the third parameter of Mime Types. Using a Google Mime Type will result in an error that states:
Cannot use &amp;ldquo;DriveApp.createFile()&amp;rdquo; to create Google MIME types. Please use Advanced Drive Service
MimeType.GOOGLE_APPS_SCRIPT
MimeType.GOOGLE_DOCS
MimeType.GOOGLE_DRAWINGS
MimeType.GOOGLE_FORMS
MimeType.GOOGLE_SHEETS
MimeType.GOOGLE_SLIDES
Create a new folder in Google root drive # function createNewFolderInGoogleDrive() { var folderName,newFolder;//Declare variable names folderName = &amp;quot;Test Folder &amp;quot; + new Date().toString().slice(0,15);//Create a new folder name with date on end newFolder = DriveApp.</description>
    </item>
    
    <item>
      <title>Create a custom function for Google Sheets</title>
      <link>https://www.wikiod.com/google-apps-script/create-a-custom-function-for-google-sheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/create-a-custom-function-for-google-sheets/</guid>
      <description>A custom function in google docs is tied to a specific document (and thus can only be used in that document).
It must therefore be created with that document&amp;rsquo;s scrip edit (Tools -&amp;gt; Script Editor). Once saved, it can then be used like any other regular spreadsheet formula.
Standard gravity custom constant # This function return the standart gravity constant in the specified acceleration units (1 for cm/s², 2 for ft/s², 3 for m/s²)</description>
    </item>
    
    <item>
      <title>Spreadsheet Service</title>
      <link>https://www.wikiod.com/google-apps-script/spreadsheet-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/spreadsheet-service/</guid>
      <description>The official API reference for the Spreadsheet Service can be found at https://developers.google.com/apps-script/reference/spreadsheet/.
Sheet # Getting a reference to a named sheet tab
var spread_sheet = SpreadsheetApp.getActiveSpreadsheet();//Get active spreadsheet var sheet_with_name_a = spread_sheet.getSheetByName(&amp;quot;sheet_tab_name&amp;quot;); Getting active sheet tab
var spread_sheet = SpreadsheetApp.getActiveSpreadsheet(); var active_sheet = spread_sheet.getActiveSheet(); Insert Column
var spread_sheet = SpreadsheetApp.getActiveSpreadsheet(); var active_sheet = spread_sheet.getActiveSheet(); active_sheet.insertColumnAfter(1); // This inserts a column after the first column position active_sheet.insertColumnBefore(1); // This inserts a column in the first column position active_sheet.</description>
    </item>
    
    <item>
      <title>SpreadsheetApp Active Sheet</title>
      <link>https://www.wikiod.com/google-apps-script/spreadsheetapp-active-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/spreadsheetapp-active-sheet/</guid>
      <description>Method: getActive()
Return Type: Spreadsheet
getActive() - Get active spreadsheet # This returns the currently active spreadsheet, or null if there is none.
var currentSheet = SpreadsheetApp.getActive(); var url = currentSheet.getUrl(); Logger.log( url ); </description>
    </item>
    
    <item>
      <title>Google Web App Script To Auto Download From Google Drive</title>
      <link>https://www.wikiod.com/google-apps-script/google-web-app-script-to-auto-download-from-google-drive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/google-web-app-script-to-auto-download-from-google-drive/</guid>
      <description>This Simple Google App Web Script (Standalone) allows Google Drive to be repeated polled for files to be downloaded to the user&amp;rsquo;s local PC.
Shows how to use one app script to provide the function of both the:
User interface (a simple one in this example) The file download page. For a fuller explanation of how it works read the Example &amp;ldquo;How it works&amp;rdquo;.
The Web Script must be published in order to work.</description>
    </item>
    
    <item>
      <title>Apps Script Web Apps</title>
      <link>https://www.wikiod.com/google-apps-script/apps-script-web-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-apps-script/apps-script-web-apps/</guid>
      <description>This is an example form web app, the client-side bit shows some basic UX design, such as a disabled submit button when the form is submitting, or an error message if it fails&amp;hellip;etc
The Apps Script bit is very basic. It contains just the code necessary to serve up the html, and to validate the field.
Here is a link to this example app in action: Example Apps Script Form</description>
    </item>
    
  </channel>
</rss>

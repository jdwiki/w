<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uwp Tutorial on </title>
    <link>https://www.wikiod.com/docs/uwp/</link>
    <description>Recent content in uwp Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with uwp</title>
      <link>https://www.wikiod.com/uwp/getting-started-with-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/getting-started-with-uwp/</guid>
      <description>Creating your first UWP Application # This example demonstrates how to develop a simple UWP application.
On creation of a &amp;ldquo;Blank App (Universal Windows)&amp;rdquo; project there are many essential files that are created in your solution.
All files in your project can be seen in the Solution Explorer.
Some of the crucial files in your project are :
App.xaml and App.xaml.cs - App.xaml is used to declare resources that are available across the application and App.</description>
    </item>
    
    <item>
      <title>Device Families</title>
      <link>https://www.wikiod.com/uwp/device-families/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/device-families/</guid>
      <description>DeviceFamily specific code # In general, UWP is used for making a single application that runs on Windows 10 across many different devices. However, it is also possible to make code tailored to specific devices. You can achieve this in several different ways.
Different XAML Layout
If you want to use a specific layout on for a certain &amp;ldquo;device family&amp;rdquo;, you can do this by creating a new XAML Page item with the same name as the default XAML file, with a suffix to indicate the device family you are targeting.</description>
    </item>
    
    <item>
      <title>Unit Testing for UWP</title>
      <link>https://www.wikiod.com/uwp/unit-testing-for-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/unit-testing-for-uwp/</guid>
      <description>I would like to show you how to create Unit Tests for Universal Windows 10 Application. To test UWP apps we will use xUnit.net Framework about which you can read more from the link I provided in remarks section.
You can read more about xUnit Framewwork: https://xunit.github.io/docs/getting-started-uwp.html
Configure Test Application # Once you have your UWP application ready for tests you should add test application to your solution. To do it &amp;ldquo;right&amp;rdquo; click on the solution and choose &amp;ldquo;Unit Test App (Universal Windows)&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Settings and app data</title>
      <link>https://www.wikiod.com/uwp/settings-and-app-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/settings-and-app-data/</guid>
      <description>Store and retrieve settings # UWP applications can easily store simple settings in a key/value store locally or even in the cloud so your application or a game can share settings between different user&amp;rsquo;s devices.
Following data types can be used for settings:
UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double Boolean Char16, String DateTime, TimeSpan GUID, Point, Size, Rect Start by retrieving the local and/or roaming data container.</description>
    </item>
    
    <item>
      <title>UWP background tasks</title>
      <link>https://www.wikiod.com/uwp/uwp-background-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/uwp-background-tasks/</guid>
      <description>For registering a background task that runs in a seperate process, you have to go to the &amp;ldquo;Declarations&amp;rdquo; Tab in the Package.appxmanifest and add a new &amp;ldquo;Background Task&amp;rdquo; and set the entry point. Registering a single-process background task can be done by means of BackgroundTaskBuilder, but the application will throw an exception if you register a task twice, so you must check if you have already registered a task. The app must gain authority to register a new task, this can be done by calling BackgroundExecutionManager.</description>
    </item>
    
    <item>
      <title>Theme Resources</title>
      <link>https://www.wikiod.com/uwp/theme-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/theme-resources/</guid>
      <description>Syntax # C# : Application.Current.Resources[&amp;ldquo;yourColorKey&amp;rdquo;] Xaml : {ThemeResource yourColorKey} Parameters # Parameter Purpose yourColorKey A key you give to get a Color object back. It differs between C# and Xaml UWP allows you to take full control of the advantages of Windows 10. Some of these advantages are graphical, as the Accent color or Dark/Light themes.
To prepare your app to be compatible with these feature, a bunch of premade colors have been implemented in UWP to change with the Accent color of the OS the program runs on, or with the theme choice of the user.</description>
    </item>
    
    <item>
      <title>WebView navigation</title>
      <link>https://www.wikiod.com/uwp/webview-navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/webview-navigation/</guid>
      <description>All examples that fetch data from a remote URL, has to have &amp;ldquo;Internet (client)&amp;rdquo; capability checked in the Package.appxmanifest. For examples that only manipulate local data it&amp;rsquo;s not necessary.
Open HTML file from app package # You can easily open a file from your app package, but Uri scheme must be &amp;ldquo;ms-appx-web&amp;rdquo; instead of &amp;ldquo;ms-appx&amp;rdquo;:
var uri = new Uri(&amp;quot;ms-appx-web:///Assets/Html/html-sample.html&amp;quot;); this.webView.Navigate(uri); Navigate to Uri # This code simply navigates WebView to some Uri:</description>
    </item>
    
    <item>
      <title>UWP Hello World</title>
      <link>https://www.wikiod.com/uwp/uwp-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/uwp-hello-world/</guid>
      <description>Syntax # This is the simple example of popular &amp;ldquo;Hello World!&amp;rdquo; for Universal Windows Platform on Windows 10. Hello World - Universal Windows Platform # After launching Visual Studio 2015, go to File → New → Project. In the New Project dialog box, browse in the templates tree to Visual C# → Windows → Universal and select Blank App (Universal Windows). Next, we need to fill the form to describe the Application:</description>
    </item>
    
    <item>
      <title>Application Lifecycle</title>
      <link>https://www.wikiod.com/uwp/application-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/application-lifecycle/</guid>
      <description>Universal Windows 10 App lifecycle consists of three different states:
Running - application is currentyl in use Not running - application is closed and removed from the memory Suspended - application state is frozen but it is still in memory As you cann see in the picture above there are different events connected with moving from one state to another. In examples section I show how to handle them.
It is good to refer to two good articles on MSDN Blog:</description>
    </item>
    
    <item>
      <title>Convert image size and crop image file in Windows Universal app</title>
      <link>https://www.wikiod.com/uwp/convert-image-size-and-crop-image-file-in-windows-universal-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/uwp/convert-image-size-and-crop-image-file-in-windows-universal-app/</guid>
      <description>Crop and resize image using bitmap tool # public class BitmapTools { /// &amp;lt;summary&amp;gt; /// Gets the cropped bitmap asynchronously. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;originalImage&amp;quot;&amp;gt;The original image.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;startPoint&amp;quot;&amp;gt;The start point.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;cropSize&amp;quot;&amp;gt;Size of the corp.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;scale&amp;quot;&amp;gt;The scale.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;The cropped image.&amp;lt;/returns&amp;gt; public static async Task&amp;lt;WriteableBitmap&amp;gt; GetCroppedBitmapAsync(IRandomAccessStream originalImage, Point startPoint, Size cropSize, double scale) { if (double.IsNaN(scale) || double.IsInfinity(scale)) { scale = 1; } // Convert start point and size to integer.</description>
    </item>
    
  </channel>
</rss>

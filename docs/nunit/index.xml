<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nunit Tutorial on </title>
    <link>https://www.wikiod.com/docs/nunit/</link>
    <description>Recent content in nunit Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/nunit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with nunit</title>
      <link>https://www.wikiod.com/nunit/getting-started-with-nunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nunit/getting-started-with-nunit/</guid>
      <description>Why you canâ€™t use Assert.Equals # Ever wondered why you cannot use Assert.Equals() for both Nunit and MSTest. If you have not then maybe as a start you need to be aware that you cannot use this method. Instead you would use Assert.AreEqual() to compare two objects for equality.
The reason here is very simple. Like any class the Assert class is inheriting from System.Object that has a public virtual Equals method meant to check if a given object is equal to the current object.</description>
    </item>
    
    <item>
      <title>Write a custom constraint for the constraint model</title>
      <link>https://www.wikiod.com/nunit/write-a-custom-constraint-for-the-constraint-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nunit/write-a-custom-constraint-for-the-constraint-model/</guid>
      <description>Match an integer approximatively # Suppose we want to write a constraint which matches a number, but approximatively. Say, you are supposed to have 95 people in a survey, but 93 or 96 will do as well. We can write a custom constraint of the form:
public class AlmostEqualToConstraint : Constraint { readonly int _expected; readonly double _expectedMin; readonly double _expectedMax; readonly int _percentageTolerance; public AlmostEqualToConstraint(int expected, int percentageTolerance) { _expected = expected; _expectedMin = expected * (1 - (double)percentageTolerance / 100); _expectedMax = expected * (1 + (double)percentageTolerance / 100); _percentageTolerance = percentageTolerance; Description = $&amp;quot;AlmostEqualTo {expected} with a tolerance of {percentageTolerance}%&amp;quot;; } public override ConstraintResult ApplyTo&amp;lt;TActual&amp;gt;(TActual actual) { if (typeof(TActual) !</description>
    </item>
    
    <item>
      <title>Fluent Assertions</title>
      <link>https://www.wikiod.com/nunit/fluent-assertions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nunit/fluent-assertions/</guid>
      <description>NUnit&amp;rsquo;s Assert.That() form supports the use of constraints as its second parameter. All constraints provided out of the box by NUnit are available through the static classes Is, Has and Does. Constraints can be combined into fluent expressions using the built in methods And, Or and With. Expressions can be conveniently expanded up using the many methods in ConstraintExpression, such as AtMost and Contains.
Advanced Constraint Usage # Large fluent assertions do become harder to read, but when combined with classes that have good implementations of ToString(), they can generate very useful error messages.</description>
    </item>
    
    <item>
      <title>Test execution and lifecycle</title>
      <link>https://www.wikiod.com/nunit/test-execution-and-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nunit/test-execution-and-lifecycle/</guid>
      <description>Executing tests in a given order # Normally your tests should be created in such a way that execution order is no concern. However there is always going to be an edge case were you need to break that rule.
The one scenario I came across was with R.NET whereby in a given process you can only initialize one R Engine and once disposed you cannot reinitialize. One of my test happened to deal with disposing the engine and if this test were to run before any other test(s) they would fail.</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>https://www.wikiod.com/nunit/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nunit/attributes/</guid>
      <description>Version 1 of NUnit used the classic approach to identifying tests based on inheritance and naming conventions. From version 2.0 on, NUnit has used custom attributes for this purpose.
Because NUnit test fixtures do not inherit from a framework class, the developer is free to use inheritance in other ways. And because there is no arbitrary convention for naming tests, the choice of names can be entirely oriented toward communicating the purpose of the test.</description>
    </item>
    
  </channel>
</rss>

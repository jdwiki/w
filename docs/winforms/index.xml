<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>winforms Tutorial on </title>
    <link>https://www.wikiod.com/docs/winforms/</link>
    <description>Recent content in winforms Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/winforms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with winforms</title>
      <link>https://www.wikiod.com/winforms/getting-started-with-winforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/getting-started-with-winforms/</guid>
      <description>Creating a Simple WinForms Application using Visual Studio # This example will show you how to create a Windows Forms Application project in Visual Studio.
Create Windows Forms Project # Start Visual Studio.
On the File menu, point to New, and then select Project. The New Project dialog box appears.
In the Installed Templates pane, select &amp;ldquo;Visual C#&amp;rdquo; or &amp;ldquo;Visual Basic&amp;rdquo;.
Above the middle pane, you can select the target framework from the drop-down list.</description>
    </item>
    
    <item>
      <title>Help Integration</title>
      <link>https://www.wikiod.com/winforms/help-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/help-integration/</guid>
      <description>You can provide help for Forms and Controls in a Windows Forms Applications in different ways. You can show a pop-up help, open a CHM file or a URL. You can show context-sensitive help for Forms, Controls and dialogs.
HelpProvider Component # You can setup a HelpProvider component to provide context sensitive help for component. This way when the user press F1 key or Help button of form, you can automatically:</description>
    </item>
    
    <item>
      <title>TextBox</title>
      <link>https://www.wikiod.com/winforms/textbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/textbox/</guid>
      <description>Auto completion from a collection of strings # var source = new AutoCompleteStringCollection(); // Add your collection of strings. source.AddRange(new[] { &amp;quot;Guybrush Threepwood&amp;quot;, &amp;quot;LeChuck&amp;quot; }); var textBox = new TextBox { AutoCompleteCustomSource = source, AutoCompleteMode = AutoCompleteMode.SuggestAppend, AutoCompleteSource = AutoCompleteSource.CustomSource }; form.Controls.Add(textBox); This will autocomplete the as the user tries to type G or L.
AutoCompleteMode.SuggestAppend will both display a list of suggested values and it will auto type the first match, Append only and Suggest only are available, too.</description>
    </item>
    
    <item>
      <title>Databinding</title>
      <link>https://www.wikiod.com/winforms/databinding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/databinding/</guid>
      <description>Parameters # Argument Description propertyName The name of the control property to bind. dataSource An Object representing the data source. dataMember The property or list to bind to. formattingEnabled Determines, whether the displayed data should be formatted. updateMode Data source is updated when the control property is validated (default), or immediately when the property has changed nullValue When the data source has this value, the bound property is set to DBNull.</description>
    </item>
    
    <item>
      <title>Showing a form</title>
      <link>https://www.wikiod.com/winforms/showing-a-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/showing-a-form/</guid>
      <description>This topic explains how the WinForms engine works to display forms and how you control their lifetimes.
Closing a modal form # When a form is shown using the ShowDialog method, it is necessary to set the form&amp;rsquo;s DialogResult property to close to form. This property can be set using the enum that&amp;rsquo;s also called DialogResult.
To close a form, you just need to set the form&amp;rsquo;s DialogResult property (to any value by DialogResult.</description>
    </item>
    
    <item>
      <title>Basic controls</title>
      <link>https://www.wikiod.com/winforms/basic-controls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/basic-controls/</guid>
      <description>Button # Buttons are one of the simplest controls and mostly used for executing some code when the user wants.
Here we have a really simple case, show a Message box when a button is clicked. We add a button to a form, name it cmdShowMessage as used in code to identify the object and set the buttons text to Show Message.
We just need to double click the button on the visual designer and Visual Studio will generate the code for the click Event.</description>
    </item>
    
    <item>
      <title>Inheriting Controls</title>
      <link>https://www.wikiod.com/winforms/inheriting-controls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/winforms/inheriting-controls/</guid>
      <description>Controls are derived in exactly the same way as other classes. The only thing to be careful of is overriding events: it is usually advisable to make sure that you call the base event handler after your own. My own rule of thumb: if in doubt, call the base event.
Application wide Settings # A quick read of most developer sites will reveal that WinForms is considered inferior to WPF. One of the most often cited reasons is the supposed difficulty in making application wide changes to the &amp;ldquo;look-and-feel&amp;rdquo; of an entire application.</description>
    </item>
    
  </channel>
</rss>

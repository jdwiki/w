<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pthreads Tutorial on </title>
    <link>https://www.wikiod.com/docs/pthreads/</link>
    <description>Recent content in pthreads Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/pthreads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with pthreads</title>
      <link>https://www.wikiod.com/pthreads/getting-started-with-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pthreads/getting-started-with-pthreads/</guid>
      <description>Installation or Setup # Detailed instructions on getting pthreads set up or installed.
Minimal &amp;ldquo;Hello World&amp;rdquo; with pthreads # #include &amp;lt;pthread.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; /* function to be run as a thread always must have the same signature: it has one void* parameter and returns void */ void *threadfunction(void *arg) { printf(&amp;quot;Hello, World!\n&amp;quot;); /*printf() is specified as thread-safe as of C11*/ return 0; } int main(void) { pthread_t thread; int createerror = pthread_create(&amp;amp;thread, NULL, threadfunction, NULL); /*creates a new thread with default attributes and NULL passed as the argument to the start routine*/ if (!</description>
    </item>
    
    <item>
      <title>Conditional Variables</title>
      <link>https://www.wikiod.com/pthreads/conditional-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pthreads/conditional-variables/</guid>
      <description>Conditional variables are useful in cases where you want a thread to wait for something that happens in another thread. For instance, in a producer/consumer scenario with one or or more producing threads and one consuming thread, conditional variables can be used to signal the consuming thread that new data is available.
General process
A wait on a conditional variable (queueCond in the producer/consumer example) is always coupled to a mutex (the queueMutex in the producer/consumer example), and should always be coupled to a &amp;ldquo;normal&amp;rdquo; state variable also (queue.</description>
    </item>
    
    <item>
      <title>Race condition in pthreads</title>
      <link>https://www.wikiod.com/pthreads/race-condition-in-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pthreads/race-condition-in-pthreads/</guid>
      <description>When writing multi-threaded applications, one of the most common problems experienced are race conditions. So we document the How do you detect them? and How do you handle them?
Example: Consider will have two threads T1 and T2. # How do you detect them?
If the same variable/resource/memory location is accessible by multiple threads and at least of the thread is changing the value of variable/resource/memory location, then Race Condition can occurred.</description>
    </item>
    
  </channel>
</rss>

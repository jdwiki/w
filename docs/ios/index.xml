<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS Tutorial on </title>
    <link>https://www.wikiod.com/docs/ios/</link>
    <description>Recent content in iOS Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with iOS</title>
      <link>https://www.wikiod.com/ios/getting-started-with-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/getting-started-with-ios/</guid>
      <description>Creating a default Single View Application # To develop an application for iOS, you should start with an application called Xcode. There are other alternative tools you can use, but Xcode is Apple&amp;rsquo;s official tool. Note, however, that it only runs on macOS. The latest official version is Xcode 8.3.3 with Xcode 9 (currently in beta) due to be released later this year.
Boot up your Mac and install Xcode from the App Store if it&amp;rsquo;s not already installed.</description>
    </item>
    
    <item>
      <title>Custom UIViews from XIB files</title>
      <link>https://www.wikiod.com/ios/custom-uiviews-from-xib-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/custom-uiviews-from-xib-files/</guid>
      <description>From Apple: Creating a Custom View That Renders in Interface Builder
• Note: Keep in mind that if you&amp;rsquo;d use fancy &amp;lsquo;custom&amp;rsquo; fonts in your XIB elements (such UILabel, UITextField etc) then the initial loading time of your XIB will be longer depending on the font chosen and system version.
Wiring elements # Create a XIB file
Xcode Menu Bar &amp;gt; File &amp;gt; New &amp;gt; File.
Select iOS, User Interface and then &amp;ldquo;View&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>UILabel</title>
      <link>https://www.wikiod.com/ios/uilabel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/uilabel/</guid>
      <description>The UILabel class implements a read-only text view. You can use this class to draw one or multiple lines of static text, such as those you might use to identify other parts of your user interface. The base UILabel class provides support for both simple and complex styling of the label text. You can also control over aspects of appearance, such as whether the label uses a shadow or draws with a highlight.</description>
    </item>
    
    <item>
      <title>Passing Data between View Controllers</title>
      <link>https://www.wikiod.com/ios/passing-data-between-view-controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/passing-data-between-view-controllers/</guid>
      <description>Using the Delegate Pattern (passing data back) # To pass data from the current view controller back to the previous view controller, you can use the delegate pattern.
This example assumes that you have made a segue in the Interface Builder and that you set the segue identifier to showSecondViewController. The outlets and actions must also be hooked up to the names in the following code.
First View Controller
The code for the First View Controller is</description>
    </item>
    
    <item>
      <title>Auto Layout</title>
      <link>https://www.wikiod.com/ios/auto-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/auto-layout/</guid>
      <description>Auto Layout dynamically calculates the size and position of all the views in your view hierarchy, based on constraints placed on those views. Source
Syntax # NSLayoutConstraint(item: Any, attribute: NSLayoutAttribute, relatedBy: NSLayoutRelation, toItem: Any?, attribute: NSLayoutAttribute, multiplier: CGFloat, constant: CGFloat) // Create a contraint programmatically Space Views Evenly # It is common to want two views to be side by side, centered in their superview. The common answer given on Stack Overflow is to embed these two views in a UIView and center the UIView.</description>
    </item>
    
    <item>
      <title>UIAlertController</title>
      <link>https://www.wikiod.com/ios/uialertcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/uialertcontroller/</guid>
      <description>A UIAlertController object displays an alert message to the user. This class replaces the UIActionSheet and UIAlertView classes for displaying alerts. After configuring the alert controller with the actions and style you want, present it using the presentViewController:animated:completion: method.
From Apple&amp;rsquo;s Documentation
UIAlertController in Swift
AlertViews with UIAlertController # UIAlertView and UIActionSheet are Deprecated in iOS 8 and Later. So Apple introduced a new controller for AlertView and ActionSheet called UIAlertController , changing the preferredStyle, you can switch between AlertView and ActionSheet.</description>
    </item>
    
    <item>
      <title>UILocalNotification</title>
      <link>https://www.wikiod.com/ios/uilocalnotification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/uilocalnotification/</guid>
      <description>Local notifications allow your app to notify the user about content which does not require the use of a server.
Unlike remote notifications which are triggered from a server, local notifications are scheduled and triggered within an app. Notifications in general are targeted to increase user interaction with the app, inviting or tempting the user to open and interact with it.
UILocalNotification was deprecated in iOS 10. Use the UserNotifications framework instead.</description>
    </item>
    
    <item>
      <title>Push Notifications</title>
      <link>https://www.wikiod.com/ios/push-notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/push-notifications/</guid>
      <description>Syntax # UIUserNotificationSettings.types: UIUserNotificationType // A bitmask of the notification types that your app is allowed to use UIUserNotificationSettings.categories: Set // The app’s registered groups of actions Parameters # Parameter Description userInfo A dictionary that contains remote notification info, potentially including a badge number for the app icon, alert sound, alert message, a notification identifier, and custom data. Registering device for Push Notifications # To register your device for push notifications, add the following code to your AppDelegate file in didFinishLaunchingWithOptions method:</description>
    </item>
    
    <item>
      <title>UIColor</title>
      <link>https://www.wikiod.com/ios/uicolor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/uicolor/</guid>
      <description>Creating a UIColor # There are many ways you can create a UIColor:
Swift
Using one of the predefined colors:
let redColor = UIColor.redColor() let blueColor: UIColor = .blueColor() // In Swift 3, the &amp;quot;Color()&amp;quot; suffix is removed: let redColor = UIColor.red let blueColor: UIColor = .blue If the compiler already knows that the variable is an instance of UIColor you can skip the type all together:
let view = UIView() view.</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://www.wikiod.com/ios/uitableview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ios/uitableview/</guid>
      <description>A simple, widely-used, yet very powerful view that can present data in a list form using rows and a single column. Users may scroll vertically through the items in a table view, and optionally manipulate and select content.
Syntax # - (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section;
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section;
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section;
- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section;
- (UITableViewCellAccessoryType)tableView:(UITableView *)tableView accessoryTypeForRowWithIndexPath:(NSIndexPath *)indexPath
- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath;</description>
    </item>
    
  </channel>
</rss>

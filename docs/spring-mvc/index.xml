<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-mvc Tutorial on </title>
    <link>https://www.wikiod.com/docs/spring-mvc/</link>
    <description>Recent content in spring-mvc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with spring-mvc</title>
      <link>https://www.wikiod.com/spring-mvc/getting-started-with-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/getting-started-with-spring-mvc/</guid>
      <description>First Spring-MVC Project # Create Dynamic Web project, provide following information&amp;rsquo;s as stated below
Project name : DemoSpringMVCProject Target runtime : set as Apache Tomcat v7.0 server Click on finish, successfully we have created dynamic web project.
Now we have to setup Spring-MVC framework :
Create web.xml under &amp;rsquo; WebContent\WEB-INF\ &amp;lsquo; folder &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; id=&amp;quot;WebApp_ID&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;Demo9&amp;lt;/display-name&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;demo&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; Where DispatcherServlet class Intercepts incoming request and determines which controller handles the request.</description>
    </item>
    
    <item>
      <title>Spring MVC Validation</title>
      <link>https://www.wikiod.com/spring-mvc/spring-mvc-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/spring-mvc-validation/</guid>
      <description>In Spring MVC it is possible to validate form fields using Bean Validation API (JSR 303 for Bean Vaidation 1.0 and JSR 349 for Bean Validation 1.1) that is used to define validation constraints of the JavaBean object.
Hibernate Validator is Bean Validation API reference implementation. Hibernate Validator offers additional value on top of the features required by Bean Validation. For example, a programmatic constraint configuration API as well as an annotation processor which plugs into the build process and raises compilation errors whenever constraint annotations are incorrectly used.</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>https://www.wikiod.com/spring-mvc/file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/file-upload/</guid>
      <description>Syntax # @RequestPart(String, String, boolean) Parameters # Parameter Details @RequestPart This annotation specifies that a parameter should be mapped to a given request part. The part name must match the name of the method parameter, unless you choose to provide it as an argument to @RequestPart. If the part name is not expressible as a Java name (e.g. 123), then you can use the value attribute of the @RequestPart to specify the actual name.</description>
    </item>
    
    <item>
      <title>Global Exception Handling</title>
      <link>https://www.wikiod.com/spring-mvc/global-exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/global-exception-handling/</guid>
      <description>Don&amp;rsquo;t forget to create custom exceptions if you have to Both the resolver and handler must be beens discovered by Spring If you are on Spring 3.2 or higher, you can use @ContrllerAdvice Source
Global Exception Resolver # @Component public class RestExceptionResolver extends ExceptionHandlerExceptionResolver { @Autowired //If you have multiple handlers make this a list of handlers private RestExceptionHandler restExceptionHandler; /** * This resolver needs to be injected because it is the easiest (maybe only) way of getting the configured MessageConverters */ @Resource private ExceptionHandlerExceptionResolver defaultResolver; @PostConstruct public void afterPropertiesSet() { setMessageConverters(defaultResolver.</description>
    </item>
    
    <item>
      <title>Exception Handling</title>
      <link>https://www.wikiod.com/spring-mvc/exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/exception-handling/</guid>
      <description>Syntax # @ExceptionHandler(ExceptionToBeHandled.class) @ExceptionHandler({ExceptionToBeHandled.class, AnotherExceptionToBeHandled.class}) Controller-Based Exception Handling # In the scenario that a controller throws an exception, we can define exception handler methods to build and return specific responses. It is important to note that the defined exception handlers within the given controller will only apply to exceptions that occur within that controller.
@Controller public class MyController { @GetMapping(&amp;quot;/&amp;quot;) public String somePage() throws Exception { // some set of code that can throw exceptions } @ExceptionHandler(Exception.</description>
    </item>
    
    <item>
      <title>Spring-MVC with annotations</title>
      <link>https://www.wikiod.com/spring-mvc/spring-mvc-with-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-mvc/spring-mvc-with-annotations/</guid>
      <description>In this topic you&amp;rsquo;ll read about annotations mainly related to Spring MVC. Some of the related annotations are as follows: @Controller, @RequestMapping, @RequestParam, @RequestBody, @ResponseBody, @RestController, @ModelAttribute, @ControllerAdvice, @ExceptionHandler, @ResponseStatus.
Of course there&amp;rsquo;re more annotations which are extremly important as well but not belong directly to Spring MVC. Such as: @Required, @Autowired, @Resource, and many more.
Parameters # Annotation Explanation @Controller With @Controller annotation you mark a Java Class as a Class that holds HTTP handlers, in other words, HTTP access points to your application.</description>
    </item>
    
  </channel>
</rss>

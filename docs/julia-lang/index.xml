<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/julia-lang/</link>
    <description>Recent content in Julia Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/julia-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Julia Language</title>
      <link>https://www.wikiod.com/julia-lang/getting-started-with-julia-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/getting-started-with-julia-language/</guid>
      <description>Hello, World! # println(&amp;quot;Hello, World!&amp;quot;) To run Julia, first get the interpreter from the website’s download page. The current stable release is v0.5.0, and this version is recommended for most users. Certain package developers or power users may choose to use the nightly build, which is far less stable.
When you have the interpreter, write your program in a file named hello.jl. It can then be run from a system terminal as:</description>
    </item>
    
    <item>
      <title>for Loops</title>
      <link>https://www.wikiod.com/julia-lang/for-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/for-loops/</guid>
      <description>Syntax # for i in iter; &amp;hellip;; end while cond; &amp;hellip;; end break continue @parallel (op) for i in iter; &amp;hellip;; end @parallel for i in iter; &amp;hellip;; end @goto label @label label Whenever it makes code shorter and easier to read, consider using higher-order functions, such as map or filter, instead of loops.
Find smallest prime factor # In some situations, one might want to return from a function before finishing an entire loop.</description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://www.wikiod.com/julia-lang/closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/closures/</guid>
      <description>Syntax # x -&amp;gt; [body] (x, y) -&amp;gt; [body] (xs&amp;hellip;) -&amp;gt; [body] In older versions of Julia, closures and anonymous functions had a runtime performance penalty. This penalty has been eliminated in 0.5.
Introduction to Closures # Functions are an important part of Julia programming. They can be defined directly within modules, in which case the functions are referred to as top-level. But functions can also be defined within other functions.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/julia-lang/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/json/</guid>
      <description>Syntax # using JSON JSON.parse(str) JSON.json(obj) JSON.print(io, obj, indent) Since neither Julia Dict nor JSON objects are inherently ordered, it&amp;rsquo;s best not to rely on the order of key-value pairs in a JSON object.
Installing JSON.jl # JSON is a popular data interchange format. The most popular JSON library for Julia is JSON.jl. To install this package, use the package manager:
julia&amp;gt; Pkg.add(&amp;quot;JSON&amp;quot;) The next step is to test whether the package is working on your machine:</description>
    </item>
    
    <item>
      <title>Input</title>
      <link>https://www.wikiod.com/julia-lang/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/input/</guid>
      <description>Syntax # readline() readlines() readstring(STDIN) chomp(str) open(f, file) eachline(io) readstring(file) read(file) readcsv(file) readdlm(file) Parameters # Parameter Details chomp(str) Remove up to one trailing newline from a string. str The string to strip a trailing newline from. Note that strings are immutable by convention. This function returns a new string. open(f, file) Open a file, call the function, and close the file afterward. f The function to call on the IO stream opening the file generates.</description>
    </item>
    
    <item>
      <title>Conditionals</title>
      <link>https://www.wikiod.com/julia-lang/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/conditionals/</guid>
      <description>Syntax # if cond; body; end if cond; body; else; body; end if cond; body; elseif cond; body; else; end if cond; body; elseif cond; body; end cond ? iftrue : iffalse cond &amp;amp;&amp;amp; iftrue cond || iffalse ifelse(cond, iftrue, iffalse) All conditional operators and functions involve using boolean conditions (true or false). In Julia, the type of booleans is Bool. Unlike some other languages, other kinds of numbers (like 1 or 0), strings, arrays, and so forth cannot be used directly in conditionals.</description>
    </item>
    
    <item>
      <title>Metaprogramming</title>
      <link>https://www.wikiod.com/julia-lang/metaprogramming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/metaprogramming/</guid>
      <description>Syntax # macro name(ex) &amp;hellip; end quote &amp;hellip; end :(&amp;hellip;) $x Meta.quot(x) QuoteNode(x) esc(x) Julia’s metaprogramming features are heavily inspired by those of Lisp-like languages, and will seem familiar to those with some Lisp background. Metaprogramming is very powerful. When used correctly, it can lead to more concise and readable code.
The quote ... end is quasiquote syntax. Instead of the expressions within being evaluated, they are simply parsed. The value of the quote .</description>
    </item>
    
    <item>
      <title>Parallel Processing</title>
      <link>https://www.wikiod.com/julia-lang/parallel-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/parallel-processing/</guid>
      <description>@async and @sync # According to the documentation under ?@async, &amp;ldquo;@async wraps an expression in a Task.&amp;rdquo; What this means is that for whatever falls within its scope, Julia will start this task running but then proceed to whatever comes next in the script without waiting for the task to complete. Thus, for instance, without the macro you will get:
julia&amp;gt; @time sleep(2) 2.005766 seconds (13 allocations: 624 bytes) But with the macro, you get:</description>
    </item>
    
    <item>
      <title>Tuples</title>
      <link>https://www.wikiod.com/julia-lang/tuples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/tuples/</guid>
      <description>Syntax # a, a, b a, b = xs () (a,) (a, b) (a, b&amp;hellip;) Tuple{T, U, V} NTuple{N, T} Tuple{T, U, Vararg{V}} Tuples have much better runtime performance than arrays for two reasons: their types are more precise, and their immutability allows them to be allocated on the stack instead of the heap. However, this more precise typing comes with both more compile-time overhead and more difficulty achieving type stability.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://www.wikiod.com/julia-lang/unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/julia-lang/unit-testing/</guid>
      <description>Syntax # @test [expr] @test_throws [Exception] [expr] @testset &amp;ldquo;[name]&amp;rdquo; begin; [tests]; end Pkg.test([package]) The standard library documentation for Base.Test covers additional material beyond that shown in these examples.
Testing a Package # To run the unit tests for a package, use the Pkg.test function. For a package named MyPackage, the command would be
julia&amp;gt; Pkg.test(&amp;quot;MyPackage&amp;quot;) An expected output would be similar to
INFO: Computing test dependencies for MyPackage... INFO: Installing BaseTestNext v0.</description>
    </item>
    
  </channel>
</rss>

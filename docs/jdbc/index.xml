<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdbc Tutorial on </title>
    <link>https://www.wikiod.com/docs/jdbc/</link>
    <description>Recent content in jdbc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jdbc</title>
      <link>https://www.wikiod.com/jdbc/getting-started-with-jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/getting-started-with-jdbc/</guid>
      <description>Creating a connection # To be able to use JDBC you need to have the JDBC driver of your database on the class path of your application.
There are multiple ways to connect to a database, but the common ways are to either use the java.sql.DriverManager, or to configure and use a database specific implementation of javax.sql.DataSource.
A simple example to create a connection to a database with the url jdbc:somedb://localhost/foobar and execute an update statement to give all employees a 5% raise:</description>
    </item>
    
    <item>
      <title>Creating a database connection</title>
      <link>https://www.wikiod.com/jdbc/creating-a-database-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/creating-a-database-connection/</guid>
      <description>Syntax # DB_URL = &amp;ldquo;jdbc:DBMS://DB_HOST:DB_PORT/DB_NAME&amp;rdquo;
DBMS: Data Base Driver Manager, this can be any DBMS (mysql, oracle, postgresql, sqlite, &amp;hellip;), exemple of mysql: &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo;
DB_HOST: your database base host, the IP adress of your database exemple : 10.6.0.1, the default is localhost or 127.0.0.1
DB_PORT: Database port, every DBMS has a defeaut port exemple mysql=3306, postegesql=5432
DB_NAME: the name of your Database
To connect you should to obtains a reference to the class object,</description>
    </item>
    
    <item>
      <title>PreparedStatement</title>
      <link>https://www.wikiod.com/jdbc/preparedstatement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/preparedstatement/</guid>
      <description>A PreparedStatement declares the statement before it is executed, and allows for placeholders for parameters. This allows the statement to be prepared (and optimized) once on the server, and then reused with different sets of parameters.
The added benefit of the parameter placeholders, is that it provides protection against SQL injection. This is achieved either by sending the parameter values separately, or because the driver escapes values correctly as needed.</description>
    </item>
    
    <item>
      <title>Statement batching</title>
      <link>https://www.wikiod.com/jdbc/statement-batching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/statement-batching/</guid>
      <description>Statement batching is either executing multiple statements as one unit (with a normal java.sql.Statement), or a single statement with multiple sets of parameter values (with a java.sql.PreparedStatement).
Statement batching allows a program to collect related statement, or in the case of prepared statements related parameter value sets, and send them to the database server as a single execute.
The benefits of statement batching can include improved performance. If and how these performance benefits are achieved depends on the driver and database support, but they include:</description>
    </item>
    
    <item>
      <title>ResultSet</title>
      <link>https://www.wikiod.com/jdbc/resultset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/resultset/</guid>
      <description>A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result se
ResultSet # To create a ResultSet you should to create a Statement or PrepapredStatement :</description>
    </item>
    
    <item>
      <title>JDBC - Statement Injection</title>
      <link>https://www.wikiod.com/jdbc/jdbc---statement-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/jdbc---statement-injection/</guid>
      <description>SQL injection is a code injection technique, used to attack data-driven applications, in which nefarious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker).
In this section we will talk about that and its relation with JDBC Statement.
Statement &amp;amp; SQL Injection evil # Note in this example we will use PostgreSQL DBMS, but you can use any DBMS
We will use a database bd_test witch contain a Schema: sch_test and two tables users and test :</description>
    </item>
    
    <item>
      <title>ResultSetMetaData</title>
      <link>https://www.wikiod.com/jdbc/resultsetmetadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jdbc/resultsetmetadata/</guid>
      <description>As we all know Metadata mean data about data.
To fetch metadata of a table like total number of column, column name, column type etc. , ResultSetMetaData interface is useful because it provides methods to get metadata from the ResultSet object.
ResultSetMetaData # import java.sql.*; class Rsmd { public static void main(String args[]) { try { Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;); Connection con = DriverManager.getConnection( &amp;quot;jdbc:oracle:thin:@localhost:1521:xe&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;oracle&amp;quot;); PreparedStatement ps = con.prepareStatement(&amp;quot;select * from emp&amp;quot;); ResultSet rs = ps.</description>
    </item>
    
  </channel>
</rss>

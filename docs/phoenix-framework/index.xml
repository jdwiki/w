<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>phoenix-framework Tutorial on </title>
    <link>https://www.wikiod.com/docs/phoenix-framework/</link>
    <description>Recent content in phoenix-framework Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/phoenix-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with phoenix-framework</title>
      <link>https://www.wikiod.com/phoenix-framework/getting-started-with-phoenix-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phoenix-framework/getting-started-with-phoenix-framework/</guid>
      <description>Skeleton Installation # Sometimes you want an installation without anything except the bare minimum phoenix setup. The follow command will give you that.
mix phoenix.new web --no-brunch --no-ecto Note: You must have installed Elixir, Erlang, Hex, Mix and the Phoenix archive for skeleton installation
Creating Phoenix project # For creating your first project in Phoenix framework at this point you should have, Elixir, Erlang, Hex, and the Phoenix archive installed. You should also have PostgreSQL and node.</description>
    </item>
    
    <item>
      <title>Generate project documentation</title>
      <link>https://www.wikiod.com/phoenix-framework/generate-project-documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phoenix-framework/generate-project-documentation/</guid>
      <description>Rationale # The correct invocation of helper modules and functions can be intimidating because
these are generated dynamically (e.g., when creating a new project or adding a new resource) they are not documented explicitly (e.g., MyApp.ErrorHelpers.error_tag) the documentation does not cover all examples (e.g., MyApp.Router.Helpers.*_path in Phoenix.Router). Although the created helpers are scattered all over your project but their location follows a solid logic. You can get used to them pretty quick and fortunately, when you generate a project with Phoenix, the code is shipped with documentation via Elixir&amp;rsquo;s @doc and @moduledoc module attributes.</description>
    </item>
    
    <item>
      <title>Ecto models usage in phoenix</title>
      <link>https://www.wikiod.com/phoenix-framework/ecto-models-usage-in-phoenix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/phoenix-framework/ecto-models-usage-in-phoenix/</guid>
      <description>How to generate, edit and use ecto models in the phoenix frameworks.
Generate User model from command line # To generate json user model with username, password_hash, email_id, created_at, updated_at, type
mix phoenix.gen.json User users username:string email_id:string password_hash:string timestamps()
Migrations of ecto model # When you run mix phoenix.gen.html or mix phoenix.gen.json from command line, migrations are created in priv -&amp;gt; repo -&amp;gt; migrations in your project folder.
To run migrations type mix ecto.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin Tutorial on </title>
    <link>https://www.wikiod.com/docs/kotlin/</link>
    <description>Recent content in Kotlin Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Kotlin</title>
      <link>https://www.wikiod.com/kotlin/getting-started-with-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/getting-started-with-kotlin/</guid>
      <description>Hello World # All Kotlin programs start at the main function. Here is an example of a simple Kotlin &amp;ldquo;Hello World&amp;rdquo; program:
package my.program fun main(args: Array&amp;lt;String&amp;gt;) { println(&amp;quot;Hello, world!&amp;quot;) } Place the above code into a file named Main.kt (this filename is entirely arbitrary)
When targeting the JVM, the function will be compiled as a static method in a class with a name derived from the filename. In the above example, the main class to run would be my.</description>
    </item>
    
    <item>
      <title>Loops in Kotlin</title>
      <link>https://www.wikiod.com/kotlin/loops-in-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/loops-in-kotlin/</guid>
      <description>In Kotlin, loops are compiled down to optimized loops wherever possible. For example, if you iterate over a number range, the bytecode will be compiled down to a corresponding loop based on plain int values to avoid the overhead of object creation.
Looping over iterables # You can loop over any iterable by using the standard for-loop:
val list = listOf(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;, &amp;quot;!&amp;quot;) for(str in list) { print(str) } Lots of things in Kotlin are iterable, like number ranges:</description>
    </item>
    
    <item>
      <title>Java 8 Stream Equivalents</title>
      <link>https://www.wikiod.com/kotlin/java-8-stream-equivalents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/java-8-stream-equivalents/</guid>
      <description>Kotlin provides many extension methods on collections and iterables for applying functional-style operations. A dedicated Sequence type allows for lazy composition of several such operations.
About laziness # If you want to lazy process a chain, you can convert to a Sequence using asSequence() before the chain. At the end of the chain of functions, you usually end up with a Sequence as well. Then you can use toList(), toSet(), toMap() or some other function to materialize the Sequence at the end.</description>
    </item>
    
    <item>
      <title>Enum</title>
      <link>https://www.wikiod.com/kotlin/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/enum/</guid>
      <description>Just like in Java, enum classes in Kotlin have synthetic methods allowing to list the defined enum constants and to get an enum constant by its name. The signatures of these methods are as follows (assuming the name of the enum class is EnumClass):
EnumClass.valueOf(value: String): EnumClass EnumClass.values(): Array&amp;lt;EnumClass&amp;gt; The valueOf() method throws an IllegalArgumentException if the specified name does not match any of the enum constants defined in the class.</description>
    </item>
    
    <item>
      <title>Vararg Parameters in Functions</title>
      <link>https://www.wikiod.com/kotlin/vararg-parameters-in-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/vararg-parameters-in-functions/</guid>
      <description>Syntax # Vararg Keyword: vararg is used in a method declaration to indicate that a variable number of parameters will be accepted. Spread Operator: An asterisk (*) before an array that is used in function calls to &amp;ldquo;unfold&amp;rdquo; the contents into individual parameters. Basics: Using the vararg keyword # Define the function using the vararg keyword.
fun printNumbers(vararg numbers: Int) { for (number in numbers) { println(number) } } Now you can pass as many parameters (of the correct type) into the function as you want.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://www.wikiod.com/kotlin/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/interfaces/</guid>
      <description>See also: Kotlin reference documentation for Interfaces: Interfaces
Interface with default implementations # An interface in Kotlin can have default implementations for functions:
interface MyInterface { fun withImplementation() { print(&amp;quot;withImplementation() was called&amp;quot;) } } Classes implementing such interfaces will be able to use those functions without reimplementing
class MyClass: MyInterface { // No need to reimplement here } val instance = MyClass() instance.withImplementation() Properties # Default implementations also work for property getters and setters:</description>
    </item>
    
    <item>
      <title>Extension Methods</title>
      <link>https://www.wikiod.com/kotlin/extension-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/extension-methods/</guid>
      <description>Syntax # fun TypeName.extensionName(params, &amp;hellip;) { /* body */ } // Declaration fun &amp;lt;T: Any&amp;gt; TypeNameWithGenerics&amp;lt;T&amp;gt;.extensionName(params, &amp;hellip;) { /* body */ } // Declaration with Generics myObj.extensionName(args, &amp;hellip;) // invocation Extensions are resolved statically. This means that the extension method to be used is determined by the reference-type of the variable you are accessing; it doesn&amp;rsquo;t matter what the variable&amp;rsquo;s type is at runtime, the same extension method will always be called.</description>
    </item>
    
    <item>
      <title>Kotlin Android Extensions</title>
      <link>https://www.wikiod.com/kotlin/kotlin-android-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/kotlin-android-extensions/</guid>
      <description>Kotlin has a built-in view injection for Android, allowing to skip manual binding or need for frameworks such as ButterKnife. Some of the advantages are a nicer syntax, better static typing and thus being less error-prone.
Using Views # Assuming we have an activity with an example layout called activity_main.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt; &amp;lt;Button android:id=&amp;quot;@+id/my_button&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:text=&amp;quot;My button&amp;quot;/&amp;gt; &amp;lt;/LinearLayout&amp;gt; We can use Kotlin extensions to call the button without any additional binding like so:</description>
    </item>
    
    <item>
      <title>Conditional Statements</title>
      <link>https://www.wikiod.com/kotlin/conditional-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/conditional-statements/</guid>
      <description>In contrast to Java&amp;rsquo;s switch, the when statement has no fall-through behavior. This means, that if a branch is matched, the control flow returns after its execution and no break statement is required. If you want to combine the bahaviors for multiple arguments, you can write multiple arguments separated by commas:
when (x) { &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; -&amp;gt; println(&amp;quot;either foo or bar&amp;quot;) else -&amp;gt; println(&amp;quot;didn&#39;t match anything&amp;quot;) } When-statement argument matching # When given an argument, the when-statement matches the argument against the branches in sequence.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://www.wikiod.com/kotlin/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kotlin/exceptions/</guid>
      <description>Catching exception with try-catch-finally # Catching exceptions in Kotlin looks very similar to Java
try { doSomething() } catch(e: MyException) { handle(e) } finally { cleanup() } You can also catch multiple exceptions
try { doSomething() } catch(e: FileSystemException) { handle(e) } catch(e: NetworkException) { handle(e) } catch(e: MemoryException) { handle(e) } finally { cleanup() } try is also an expression and may return value
val s: String? = try { getString() } catch (e: Exception) { null } Kotlin doesn&amp;rsquo;t have checked exceptions, so you don&amp;rsquo;t have to catch any exceptions.</description>
    </item>
    
  </channel>
</rss>

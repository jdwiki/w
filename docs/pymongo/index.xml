<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyMongo Tutorial on </title>
    <link>https://www.wikiod.com/docs/pymongo/</link>
    <description>Recent content in PyMongo Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/pymongo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with PyMongo</title>
      <link>https://www.wikiod.com/pymongo/getting-started-with-pymongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pymongo/getting-started-with-pymongo/</guid>
      <description>Hello, World # PyMongo is a native Python driver for MongoDB.
Install PyMongo # pip install pymongo Create a connection # Use MongoClient to create a connection. MongoClient defaults to MongoDB instance running on localhost:27017 if not specified.
from pymongo import MongoClient client = MongoClient() Access Database Objects # PyMongo&amp;rsquo;s Database class represents database construct in MongoDB. Databases hold groups of logically related collections.
db = client.mydb Access Collection Objects # PyMongo&amp;rsquo;s Collection class represents collection construct in MongoDB.</description>
    </item>
    
    <item>
      <title>Converting between BSON and JSON</title>
      <link>https://www.wikiod.com/pymongo/converting-between-bson-and-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pymongo/converting-between-bson-and-json/</guid>
      <description>In many applications, records from MongoDB need to be serialized in JSON format. If your records have fields of type date, datetime, objectId, binary, code, etc. you will encounter TypeError: not JSON serializable exceptions when using json.dumps. This topic shows how to overcome this.
Using json_util # json_util provides two helper methods, dumps and loads, that wrap the native json methods and provide explicit BSON conversion to and from json.</description>
    </item>
    
    <item>
      <title>Filter documents by creation time stored in ObjectId</title>
      <link>https://www.wikiod.com/pymongo/filter-documents-by-creation-time-stored-in-objectid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/pymongo/filter-documents-by-creation-time-stored-in-objectid/</guid>
      <description>Includes pymongo query examples to filter documents by timestamp encapsulated in ObjectId
Documents created in the last 60 seconds # How to find documents created 60 seconds ago
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) dummy_id = ObjectId.from_datetime(gen_time) db.CollectionName.find({&amp;quot;_id&amp;quot;: {&amp;quot;$gte&amp;quot;: dummy_id}}) If you&amp;rsquo;re in a different timezone, you may need to offset the datetime to UTC
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) # converts datetime to UTC gen_time=datetime.</description>
    </item>
    
  </channel>
</rss>

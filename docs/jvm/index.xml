<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvm Tutorial on </title>
    <link>https://www.wikiod.com/docs/jvm/</link>
    <description>Recent content in jvm Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jvm</title>
      <link>https://www.wikiod.com/jvm/getting-started-with-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jvm/getting-started-with-jvm/</guid>
      <description>Installation or Setup # Detailed instructions on getting jvm set up or installed.
Enabling Parallel GC # Parallel GC is Stop-The-World (STW) collector which stop all the application threads when running the garbage collector.
When Parallel GC was introduced it was only enabled the parallel GC in young generation collector and OldGeneration Collector was single thread stop-the-world collector, but later introduce separate command line option to enable the Old Parallel.</description>
    </item>
    
    <item>
      <title>JVM Heap</title>
      <link>https://www.wikiod.com/jvm/jvm-heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jvm/jvm-heap/</guid>
      <description>Setting the maximum heap size. # Most JVMs have an option to set the maximum heap size e.g.
-Xmx64m -Xmx8g In Java 1.0 to 1.2 you could use
-mx64m and this is still available on some JVMs for backward compatibility (E.g. Oracle JVM).
There are a few common misconceptions about this setting.
It doesn&amp;rsquo;t set the heap size, only the maximum. -Xms sets the initial heap size. It doesn&amp;rsquo;t set the amount of memory the JVM will use.</description>
    </item>
    
    <item>
      <title>JVM Heap Dump</title>
      <link>https://www.wikiod.com/jvm/jvm-heap-dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jvm/jvm-heap-dump/</guid>
      <description>Generating heap dump upon OutOfMemoryError # Note: This example is based on the Oracle JVM implementation.
Built-in tools like jmap, jconsole, and jvisualvm are available in a JDK and can be used to generate and analyze heap memory dumps taken from a running JVM application. However, one option to generate a heap dump without using JDK tools is to add the VM argument -XX:+HeapDumpOnOutOfMemoryError which tells the JVM to automatically generate a heap dump when an OutOfMemoryError occurs, and the argument -XX:HeapDumpPath to specify the path for the heap dump.</description>
    </item>
    
  </channel>
</rss>

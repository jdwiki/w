<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mongoose Tutorial on </title>
    <link>https://www.wikiod.com/docs/mongoose/</link>
    <description>Recent content in mongoose Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/mongoose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with mongoose</title>
      <link>https://www.wikiod.com/mongoose/getting-started-with-mongoose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/getting-started-with-mongoose/</guid>
      <description>Installation # Installing mongoose is as easy as running the npm command
npm install mongoose --save
But make sure you have also installed MongoDB for your OS or Have access to a MongoDB database.
Connecting to MongoDB database: # 1. Import mongoose into the app:
import mongoose from &#39;mongoose&#39;; 2. Specify a Promise library:
mongoose.Promise = global.Promise; 3. Connect to MongoDB:
mongoose.connect(&#39;mongodb://127.0.0.1:27017/database&#39;); /* Mongoose connection format looks something like this */ mongoose.</description>
    </item>
    
    <item>
      <title>mongoose pre and post middleware (hooks)</title>
      <link>https://www.wikiod.com/mongoose/mongoose-pre-and-post-middleware-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/mongoose-pre-and-post-middleware-hooks/</guid>
      <description>Middleware # Middleware (also called pre and post hooks) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing plugins. Mongoose 4.0 has 2 types of middleware: document middleware and query middleware. Document middleware is supported for the following document functions.
init validate save remove Query middleware is supported for the following Model and Query functions.
count find findOne findOneAndRemove findOneAndUpdate update Both document middleware and query middleware support pre and post hooks.</description>
    </item>
    
    <item>
      <title>Mongoose Population</title>
      <link>https://www.wikiod.com/mongoose/mongoose-population/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/mongoose-population/</guid>
      <description>Syntax # Query.populate(path, [select], [model], [match], [options]) Parameters # Parameter Explanation path &amp;lt;Object, String&amp;gt; either the path to populate or an object specifying all parameters [select] &amp;lt;Object, String&amp;gt; Field selection for the population query (can use &#39;-id&#39; to include everything but the id field) [model] &amp;lt;Model&amp;gt; The model you wish to use for population.If not specified, populate will look up the model by the name in the Schema&amp;rsquo;s ref field. [match] &amp;lt;Object&amp;gt; Conditions for the population [options] &amp;lt;Object&amp;gt; Options for the population query (sort, etc) A simple mongoose populate example # .</description>
    </item>
    
    <item>
      <title>Mongoose Middleware</title>
      <link>https://www.wikiod.com/mongoose/mongoose-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/mongoose-middleware/</guid>
      <description>In mongoose, Middlewares are also called as pre and post hooks.
There are two types of middleware # Both of these middleware support pre and post hooks.
Document middleware
Its supported for document functions init, validate, save and remove
Query middleware
Its supported for query functions count, find, findOne, findOneAndRemove, findOneAndUpdate, insertMany and update.
Pre and Post hooks # There are two types of Pre hooks
serial
As the name suggests, Its executed in serial order i.</description>
    </item>
    
    <item>
      <title>Mongoose Queries</title>
      <link>https://www.wikiod.com/mongoose/mongoose-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/mongoose-queries/</guid>
      <description>Mongoose is a Node.JS driver for MongoDB. It provides certain benefits over the default MongoDB driver, such as adding types to Schemas. One difference is that some Mongoose queries may differ from their MongoDB equivalents.
Find One Query # Import a Mongoose Model (See topic &amp;ldquo;Mongoose Schemas&amp;rdquo;)
var User = require(&amp;quot;../models/user-schema.js&amp;quot;)
The findOne method will return the first entry in the database that matches the first parameter. The parameter should be an object where the key is the field to look for and the value is the value to be matched.</description>
    </item>
    
    <item>
      <title>Mongoose Schemas</title>
      <link>https://www.wikiod.com/mongoose/mongoose-schemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mongoose/mongoose-schemas/</guid>
      <description>Creating a Schema # var mongoose = require(&#39;mongoose&#39;); //assume Player and Board schemas are already made var Player = mongoose.model(&#39;Player&#39;); var Board = mongoose.model(&#39;Board&#39;); //Each key in the schema is associated with schema type (ie. String, Number, Date, etc) var gameSchema = new mongoose.Schema({ name: String, players: [{ type: mongoose.Schema.Types.ObjectId, ref: &#39;Player&#39; }], host: { type: mongoose.Schema.Types.ObjectId, ref: &#39;Player&#39; }, board: { type: mongoose.Schema.Types.ObjectId, ref: &#39;Board&#39; }, active: { type: Boolean, default: true }, state: { type: String, enum: [&#39;decision&#39;, &#39;run&#39;, &#39;waiting&#39;], default: &#39;waiting&#39; }, numFlags: { type: Number, enum: [1,2,3,4] }, isWon: { type: Boolean, default: false } }); mongoose.</description>
    </item>
    
  </channel>
</rss>

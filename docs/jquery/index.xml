<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jQuery Tutorial on </title>
    <link>https://www.wikiod.com/docs/jquery/</link>
    <description>Recent content in jQuery Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jquery/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jQuery</title>
      <link>https://www.wikiod.com/jquery/getting-started-with-jquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/getting-started-with-jquery/</guid>
      <description>Getting Started # Create a file hello.html with the following content:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, World!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p id=&amp;quot;hello&amp;quot;&amp;gt;Some random text&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-2.2.4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; $(document).ready(function() { $(&#39;#hello&#39;).text(&#39;Hello, World!&#39;); }); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Live Demo on JSBin
Open this file in a web browser. As a result you will see a page with the text: Hello, World!
Explanation of code # Loads the jQuery library from the jQuery CDN:</description>
    </item>
    
    <item>
      <title>Ajax</title>
      <link>https://www.wikiod.com/jquery/ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/ajax/</guid>
      <description>Syntax # var jqXHR = $.ajax( url [,settings] ) var jqXHR = $.ajax( [settings] ) jqXHR.done(function( data, textStatus, jqXHR ) {}); jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); jqXHR.always(function( jqXHR ) {}); Parameters # Parameter Details url Specifies the URL to which the request will be sent settings an object containing numerous values that affect the behavior of the request type The HTTP method to be used for the request data Data to be sent by the request success A callback function to be called if the request succeeds error A callback to handle error statusCode An object of numeric HTTP codes and functions to be called when the response has the corresponding code dataType The type of data that you&amp;rsquo;re expecting back from the server contentType Content type of the data to sent to the server.</description>
    </item>
    
    <item>
      <title>Selectors</title>
      <link>https://www.wikiod.com/jquery/selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/selectors/</guid>
      <description>A jQuery selectors selects or finds a DOM (document object model) element in an HTML document. It is used to select HTML elements based on id, name, types, attributes, class and etc. It is based on existing CSS selectors.
Syntax # Tag: No marker, use the tag directly Id: #id Class: .className Attribute: [attributeName] Attribute with value: [attributeName =&#39;value&#39;] Attribute starts with value ^=: [attributeName ^= &#39;value&#39;] Attribute ends with value $=: [attributeName $=&#39;value&#39;] Attribute contains value *= : [attributeName *= &#39;value&#39;] Pseudo-selector: :pseudo-selector Any descendant: Space between selectors Direct children: &amp;gt; between selectors Adjacent sibling following the first: + Non-adjacent sibling following the first: ~ Or: , (comma) between selector When writing selectors for class or id or attribute which contains some special characters like</description>
    </item>
    
    <item>
      <title>document-ready event</title>
      <link>https://www.wikiod.com/jquery/document-ready-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/document-ready-event/</guid>
      <description>What is document-ready and how should I use it? # jQuery code is often wrapped in jQuery(function($) { ... }); so that it only runs after the DOM has finished loading.
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; jQuery(function($) { // this will set the div&#39;s text to &amp;quot;Hello&amp;quot;. $(&amp;quot;#myDiv&amp;quot;).text(&amp;quot;Hello&amp;quot;); }); &amp;lt;/script&amp;gt; &amp;lt;div id=&amp;quot;myDiv&amp;quot;&amp;gt;Text&amp;lt;/div&amp;gt; This is important because jQuery (and JavaScript generally) cannot select a DOM element that has not been rendered to the page.</description>
    </item>
    
    <item>
      <title>jQuery .animate() Method</title>
      <link>https://www.wikiod.com/jquery/jquery-animate-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/jquery-animate-method/</guid>
      <description>Syntax # (selector).animate({styles},{options}) Parameters # Parameter Details properties An object of CSS properties and values that the animation will move toward duration (default: 400) A string or number determining how long the animation will run easing (default: swing) A string indicating which easing function to use for the transition complete A function to call once the animation is complete, called once per matched element. start specifies a function to be executed when the animation begins.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://www.wikiod.com/jquery/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/events/</guid>
      <description>jQuery internally handles events via the addEventListener function. This means it is perfectly legal to have more than one function bound to the same event for the same DOM element.
Delegated Events # Let&amp;rsquo;s start with example. Here is a very simple example HTML.
Example HTML &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;some_url/&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;some_url/&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;some_url/&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; The problem Now in this example, we want to add an event listener to all &amp;lt;a&amp;gt; elements.</description>
    </item>
    
    <item>
      <title>DOM Manipulation</title>
      <link>https://www.wikiod.com/jquery/dom-manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/dom-manipulation/</guid>
      <description>Creating DOM elements # The jQuery function (usually aliased as $) can be used both to select elements and to create new elements.
var myLink = $(&#39;&amp;lt;a href=&amp;quot;http://stackexchange.com&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;); You can optionally pass a second argument with element attributes:
var myLink = $(&#39;&amp;lt;a&amp;gt;&#39;, { &#39;href&#39;: &#39;http://stackexchange.com&#39; }); &#39;&amp;lt;a&amp;gt;&#39; &amp;ndash;&amp;gt; The first argument specifies the type of DOM element you want to create. In this example it&amp;rsquo;s an anchor but could be anything on this list.</description>
    </item>
    
    <item>
      <title>CSS Manipulation</title>
      <link>https://www.wikiod.com/jquery/css-manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/css-manipulation/</guid>
      <description>Syntax # .css( cssProperty ) // Get the rendered CSS property value .css( [cssProperty , &amp;hellip;] ) // Get values from Array of cssProperties .css( cssProperty, value ) // Set value .css( {cssProperty:value, &amp;hellip;} ) // Set properties and values .css( cssProperty, function ) // Expose the cssProperty to a callback function Rendered values
If a responsive unit is used (like &amp;quot;auto&amp;quot;, &amp;quot;%&amp;quot;, &amp;quot;vw&amp;quot; etc.), .css() will return the actual rendered value in px</description>
    </item>
    
    <item>
      <title>DOM Traversing</title>
      <link>https://www.wikiod.com/jquery/dom-traversing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/dom-traversing/</guid>
      <description>Select children of element # To select the children of an element you can use the children() method.
&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;A headline&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet...&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Praesent quis dolor turpis...&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; Change the color of all the children of the .parent element:
$(&#39;.parent&#39;).children().css(&amp;quot;color&amp;quot;, &amp;quot;green&amp;quot;); The method accepts an optional selector argument that can be used to filter the elements that are returned.
// Only get &amp;quot;p&amp;quot; children $(&#39;.parent&#39;).children(&amp;quot;p&amp;quot;).css(&amp;quot;color&amp;quot;, &amp;quot;green&amp;quot;); Iterating over list of jQuery elements # When you need to iterate over the list of jQuery elements.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>https://www.wikiod.com/jquery/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jquery/plugins/</guid>
      <description>Plugins - Getting Started # The jQuery API may be extended by adding to its prototype. For example, the existing API already has many functions available such as .hide(), .fadeIn(), .hasClass(), etc.
The jQuery prototype is exposed through $.fn, the source code contains the line
jQuery.fn = jQuery.prototype Adding functions to this prototype will allow those functions to be available to be called from any constructed jQuery object (which is done implicitly with each call to jQuery, or each call to $ if you prefer).</description>
    </item>
    
  </channel>
</rss>

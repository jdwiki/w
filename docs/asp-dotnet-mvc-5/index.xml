<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-mvc-5 Tutorial on </title>
    <link>https://www.wikiod.com/docs/asp-dotnet-mvc-5/</link>
    <description>Recent content in asp.net-mvc-5 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/asp-dotnet-mvc-5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with asp.net-mvc-5</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc-5/getting-started-with-aspnet-mvc-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc-5/getting-started-with-aspnet-mvc-5/</guid>
      <description>What&amp;rsquo;s New in ASP.NET MVC 5 # Authentication filters Are a new kind of filter added in ASP.NET MVC 5.0 .That run prior to authorization filters in the ASP.NET MVC pipeline and allow you to specify authentication logic per-action, per-controller, or globally for all controllers. Authentication filters process credentials in the request and provide a corresponding principal. Authentication filters can also add authentication challenges in response to unauthorized requests. 2.Filter overrides You can now override which filters apply to a given action method or controller by specifying an override filter.</description>
    </item>
    
    <item>
      <title>Attribute routing in mvc-5</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc-5/attribute-routing-in-mvc-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc-5/attribute-routing-in-mvc-5/</guid>
      <description>Syntax # {productId:int}/{productTitle} Mapped to ProductsController.Show(int id)
{username} Mapped to ProfilesController.Show(string username)
{username}/catalogs/{catalogId:int}/{catalogTitle} Mapped to CatalogsController.Show(string username, int catalogId)
Routing is how ASP.NET MVC matches a URI to an action. MVC 5 supports a new type of routing, called attribute routing. As the name implies, attribute routing uses attributes to define routes. Attribute routing gives you more control over the URIs in your web application.
The earlier style of routing, called convention-based routing, is still fully supported.</description>
    </item>
    
    <item>
      <title>Create Html Helpers</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc-5/create-html-helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc-5/create-html-helpers/</guid>
      <description>Html helpers are a very useful way of creating html elements in views using MVC framework. With a bit of time your team can really benefit from using them. It helps with keeping the code clean and error prone.
To use the helpers you need to first add a @using directive inside the view, or add the namespace inside the Web.config file located in the Views folder.
Create a simple helper - a div with a text in it # public static class MyHelpers { public static MvcHtmlString MyCustomDiv(this HtmlHelper htmlHelper, string text, object htmlAttributes = null) { var mainTag = new TagBuilder(&amp;quot;div&amp;quot;); mainTag.</description>
    </item>
    
    <item>
      <title>Asynchronous Controller in MVC 5</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc-5/asynchronous-controller-in-mvc-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc-5/asynchronous-controller-in-mvc-5/</guid>
      <description>Defination # Using an Asynchronous Controller in ASP.NET MVC. The AsyncController class enables you to write asynchronous action methods. You can use asynchronous action methods for long-running, non-CPU bound requests. This avoids blocking the Web server from performing work while the request is being processed.
Asynchronous Controller # public async Task&amp;lt;actionresult&amp;gt; Index() { return View(&amp;quot;View&amp;quot;, await db.UserMasers.ToListAsync()); } </description>
    </item>
    
  </channel>
</rss>

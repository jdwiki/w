<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javafx Tutorial on </title>
    <link>https://www.wikiod.com/docs/javafx/</link>
    <description>Recent content in javafx Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/javafx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with javafx</title>
      <link>https://www.wikiod.com/javafx/getting-started-with-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/getting-started-with-javafx/</guid>
      <description>Hello World program # The following code creates a simple user interface containing a single Button that prints a String to the console on click.
import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Alert.AlertType; import javafx.scene.control.Button; import javafx.scene.layout.StackPane; import javafx.stage.Stage; public class HelloWorld extends Application { @Override public void start(Stage primaryStage) { // create a button with specified text Button button = new Button(&amp;quot;Say &#39;Hello World&#39;&amp;quot;); // set a handler that is executed when the user activates the button // e.</description>
    </item>
    
    <item>
      <title>Internationalization in JavaFX</title>
      <link>https://www.wikiod.com/javafx/internationalization-in-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/internationalization-in-javafx/</guid>
      <description>Loading Resource Bundle # JavaFX provides an easy way to internationalize your user interfaces. While creating a view from an FXML file you can provide the FXMLLoader with a resource bundle:
Locale locale = new Locale(&amp;quot;en&amp;quot;, &amp;quot;UK&amp;quot;); ResourceBundle bundle = ResourceBundle.getBundle(&amp;quot;strings&amp;quot;, locale); Parent root = FXMLLoader.load(getClass().getClassLoader() .getResource(&amp;quot;ui/main.fxml&amp;quot;), bundle); This provided bundle is automatically used to translate all texts in your FXML file that start with a %. Lets say your properties file strings_en_UK.</description>
    </item>
    
    <item>
      <title>FXML and Controllers</title>
      <link>https://www.wikiod.com/javafx/fxml-and-controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/fxml-and-controllers/</guid>
      <description>Syntax # xmlns:fx=&amp;ldquo;http://javafx.com/fxml&amp;rdquo; // namespace declaration Setting Properties # There are multiple ways of adding data to a object in fxml:
&amp;lt;property&amp;gt; tag # A tag with the name of a property can be added as child of an element used for creating a instance. The child of this tag is assigned to the property using the setter or added to the contents of the property (readonly list/map properties).
Default property # A class can be annotated with the @DefaultProperty annotation.</description>
    </item>
    
    <item>
      <title>Scene Builder</title>
      <link>https://www.wikiod.com/javafx/scene-builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/scene-builder/</guid>
      <description>JavaFX Scene Builder is a visual layout tool that lets users quickly design JavaFX application user interfaces, without coding. It is used to generate FXML files.
JavaFX Scene Builder is a visual layout tool that lets users quickly design JavaFX application user interfaces, without coding. Users can drag and drop UI components to a work area, modify their properties, apply style sheets, and the FXML code for the layout that they are creating is automatically generated in the background.</description>
    </item>
    
    <item>
      <title>Layouts</title>
      <link>https://www.wikiod.com/javafx/layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/layouts/</guid>
      <description>BorderPane # The BorderPane is separated into five different areas.
The border areas (Top, Right, Bottom, Left) have preferred sized based on their content. By default they will only take what they need, while the Center area will take any remaining space. When the border areas are empty, they do not take up any space.
Each area can contain only one element. It can be added using the methods setTop(Node), setRight(Node), setBottom(Node), setLeft(Node), setCenter(Node).</description>
    </item>
    
    <item>
      <title>TableView</title>
      <link>https://www.wikiod.com/javafx/tableview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/tableview/</guid>
      <description>PropertyValueFactory # PropertyValueFactory can be used as cellValueFactory in a TableColumn. It uses reflection to access methods that match a certain pattern to retrieve the data from a TableView item:
Example
TableColumn&amp;lt;Person, String&amp;gt; nameColumn = ... PropertyValueFactory&amp;lt;Person, String&amp;gt; valueFactory = new PropertyValueFactory&amp;lt;&amp;gt;(&amp;quot;name&amp;quot;); nameColumn.setCellValueFactory(valueFactory); The name of the method that is used to get the data depends on the constructor paramerter for PropertyValueFactory.
Property method: This kind of method is expected to return a ObservableValue containing the data.</description>
    </item>
    
    <item>
      <title>WebView and WebEngine</title>
      <link>https://www.wikiod.com/javafx/webview-and-webengine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/webview-and-webengine/</guid>
      <description>The WebViewis the JavaFX Node that is integrated into the JavaFX component tree. It manages a WebEngine and displays it&amp;rsquo;s content.
The WebEngine is the underlying Browser Engine, which basically does the whole work.
Loading a page # WebView wv = new WebView(); WebEngine we = wv.getEngine(); we.load(&amp;quot;https://stackoverflow.com&amp;quot;); WebView is the UI shell around the WebEngine. Nearly all controls for non UI interaction with a page are done through the WebEngine class.</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://www.wikiod.com/javafx/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/css/</guid>
      <description>Syntax # NodeClass /* selector by Node&amp;rsquo;s class */ .someclass /* selector by class */ #someId /* selector by id */ [selector1] &amp;gt; [selector2] /* selector for a direct child of a node matching selector1 that matches selector2 */ [selector1] [selector2] /* selector for a descendant of a node matching selector1 that matches selector2 */ Using CSS for styling # CSS can be applied in multiple places:
inline (Node.setStyle) in a stylesheet to a Scene as user agent stylesheet (not demonstrated here) as &amp;ldquo;normal&amp;rdquo; stylesheet for the Scene to a Node This allows to change styleable properties of Nodes.</description>
    </item>
    
    <item>
      <title>Properties &amp; Observable</title>
      <link>https://www.wikiod.com/javafx/properties--observable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/properties--observable/</guid>
      <description>Properties are observable and listeners can be added to them. They are consistently used for properties of Nodes.
Types of properties and naming # Standard properties # Depending on the type of the property, there are up to 3 methods for a single property. Let &amp;lt;property&amp;gt; denote the name of a property and &amp;lt;Property&amp;gt; the name of the property with an uppercase first letter. And let T be the type of the property; for primitive wrappers we use the primitive type here, e.</description>
    </item>
    
    <item>
      <title>Dialogs</title>
      <link>https://www.wikiod.com/javafx/dialogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javafx/dialogs/</guid>
      <description>Dialogs were added in JavaFX 8 update 40.
TextInputDialog # TextInputDialog allows the to ask the user to input a single String.
TextInputDialog dialog = new TextInputDialog(&amp;quot;42&amp;quot;); dialog.setHeaderText(&amp;quot;Input your favourite int.&amp;quot;); dialog.setTitle(&amp;quot;Favourite number?&amp;quot;); dialog.setContentText(&amp;quot;Your favourite int: &amp;quot;); Optional&amp;lt;String&amp;gt; result = dialog.showAndWait(); String s = result.map(r -&amp;gt; { try { Integer n = Integer.valueOf(r); return MessageFormat.format(&amp;quot;Nice! I like {0} too!&amp;quot;, n); } catch (NumberFormatException ex) { return MessageFormat.format(&amp;quot;Unfortunately \&amp;quot;{0}\&amp;quot; is not a int!</description>
    </item>
    
  </channel>
</rss>

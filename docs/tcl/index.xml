<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tcl Tutorial on </title>
    <link>https://www.wikiod.com/docs/tcl/</link>
    <description>Recent content in tcl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/tcl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with tcl</title>
      <link>https://www.wikiod.com/tcl/getting-started-with-tcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/getting-started-with-tcl/</guid>
      <description>Installation # Installing Tcl 8.6.4 on Windows :
The easiest way to get Tcl on a windows machine is to install the ActiveTcl distribution from ActiveState.
Navigate to www.activestate.com and follow the links to download the Free Community Edition of ActiveTcl for Windows (choose 32/64 bit version appropriately).
Run the installer which will result in a fresh install of ActiveTcl usually in the C:\Tcl directory.
Open a command prompt to test the install, type in &amp;ldquo;tclsh&amp;rdquo; which should open an interactive tcl console.</description>
    </item>
    
    <item>
      <title>Expressions</title>
      <link>https://www.wikiod.com/tcl/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/expressions/</guid>
      <description>Another benefit from using braced expression strings is that the byte compiler usually can generate more efficient code (5 - 10x faster) from them.
The problems with unbraced expressions # It is a good practice to provide expression string arguments as braced strings. The heading &amp;ldquo;Double Substitution&amp;rdquo; outlines important reasons behind the same.
The expr command evaluates an operator-based expression string to calculate a value. This string is constructed from the arguments in the invocation.</description>
    </item>
    
    <item>
      <title>Procedure arguments</title>
      <link>https://www.wikiod.com/tcl/procedure-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/procedure-arguments/</guid>
      <description>References: proc
Argument Expansion (section 5)
A procedure that does not accept arguments # proc myproc {} { puts &amp;quot;hi&amp;quot; } myproc # =&amp;gt; hi An empty argument list (the second argument after the procedure name, &amp;ldquo;myproc&amp;rdquo;) means that the procedure will not accept arguments.
A procedure that accepts a variable number of arguments # ### Definition proc myproc {alpha {beta {}} {gamma green}} { puts [list $alpha $beta $gamma] } ### Use myproc A # =&amp;gt; A {} green myproc A B # =&amp;gt; A B green myproc A B C # =&amp;gt; A B C This procedure accepts one, two, or three arguments: those parameters whose names are the first item in a two-item list are optional.</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>https://www.wikiod.com/tcl/dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/dictionaries/</guid>
      <description>Dictionaries in Tcl are values that hold a mapping from arbitrary values to other arbitrary values. They were introduced in Tcl 8.5, though there are limited versions for (the now unsupported) Tcl 8.4. Dictionaries are syntactically the same as lists with even numbers of elements; the first pair of elements is the first key and value of the dictionary, the second pair is the second tuple.
Thus:
fox &amp;quot;quick brown&amp;quot; dogs &amp;quot;lazy&amp;quot; is a valid dictionary.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/tcl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/variables/</guid>
      <description>Syntax # set varName ?value?
unset ?-nocomplain? ?&amp;ndash;? ?varName varName varName?
puts $varName
puts [set varName]
variable varName
global varName ?varName varName?
Parameters enclosed within ?&amp;hellip;? such as ?varName? represent optional arguments to a Tcl command.
Documentation: global, upvar
Assigning values to variables # The command set is used to assign values in Tcl. When it is called with two arguments in the following manner,
% set tempVar &amp;quot;This is a string.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://www.wikiod.com/tcl/regular-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/regular-expressions/</guid>
      <description>Syntax # regexp ?switches? exp string ?matchVar? ?subMatchVar subMatchVar &amp;hellip;? regsub ?switches? exp string subSpec ?varName? This topic is not intended to discuss regular expressions themselves. There are many resources on the internet explaining regular expressions and tools to help build regular expressions.
This topic will try to cover the common switches and methods of using regular expressions in Tcl and some of the differences between Tcl and other regular expression engines.</description>
    </item>
    
    <item>
      <title>Pathnames and filenames</title>
      <link>https://www.wikiod.com/tcl/pathnames-and-filenames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/pathnames-and-filenames/</guid>
      <description>Syntax # file dirname filepath file tail filepath file rootname filepath file extension filepath file join path1 path2 &amp;hellip; file normalize path file nativename path Working with pathnames and filenames # % set mypath /home/tcluser/sources/tcl/myproject/test.tcl /home/tcluser/sources/tcl/myproject/test.tcl % set dir [file dirname $mypath] /home/tcluser/sources/tcl/myproject % set filename [file tail $mypath] test.tcl % set basefilename [file rootname $filename] test % set extension [file extension $filename] .tcl % set newpath [file join $dir .</description>
    </item>
    
    <item>
      <title>Tcl Language Constructs</title>
      <link>https://www.wikiod.com/tcl/tcl-language-constructs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/tcl-language-constructs/</guid>
      <description>Syntax # # This is a valid comment # This is a valid { comment } Placing Comments # Comments in Tcl are best thought of as another command.
A comment consists of a # followed by any number of characters up to the next newline. A comment can appear wherever a command can be placed.
# this is a valid comment proc hello { } { # the next comment needs the ; before it to indicate a new command is # being started.</description>
    </item>
    
    <item>
      <title>Control Structures</title>
      <link>https://www.wikiod.com/tcl/control-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tcl/control-structures/</guid>
      <description>Syntax # if expr1 ?then? body1 elseif expr2 ?then? body2 &amp;hellip; ?else? ?bodyN? for start test next body while test body foreach varlist1 list1 ?varlist2 list2 &amp;hellip;? body Documentation: break, for, foreach, if, switch, uplevel, while
if / while / for # if expr1 ?then? body1 elseif expr2 ?then? body2 &amp;hellip; ?else? ?bodyN?
exprN is an expression that evaluates to a boolean value. bodyN is a list of commands.
set i 5 if {$i &amp;lt; 10} { puts {hello world} } elseif {$i &amp;lt; 70} { puts {enjoy world} } else { puts {goodbye world} } for start test next body</description>
    </item>
    
  </channel>
</rss>

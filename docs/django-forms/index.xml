<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django-forms Tutorial on </title>
    <link>https://www.wikiod.com/docs/django-forms/</link>
    <description>Recent content in django-forms Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/django-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with django-forms</title>
      <link>https://www.wikiod.com/django-forms/getting-started-with-django-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/django-forms/getting-started-with-django-forms/</guid>
      <description>Installation or Setup # Detailed instructions on getting django-forms set up or installed.</description>
    </item>
    
    <item>
      <title>Using Model Form</title>
      <link>https://www.wikiod.com/django-forms/using-model-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/django-forms/using-model-form/</guid>
      <description>Django ModelForm enables the creation of a Form class from a Django model.
Making fields not editable # Django 1.9 added the Field.disabled attribute:
The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won’t be editable by users. Even if a user tampers with the field’s value submitted to the server, it will be ignored in favor of the value from the form’s initial data.</description>
    </item>
    
    <item>
      <title>Django Built-in forms</title>
      <link>https://www.wikiod.com/django-forms/django-built-in-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/django-forms/django-built-in-forms/</guid>
      <description>Django is shipped with several views that require forms. These forms are, naturally, built-in. A good example are Authentication Built-in forms.
This topic intends to bring documentation on how to work with these forms.
Add custom CSS classes # Built-in forms are great but sometimes there is a need to customize them, adding new fields or simply changing CSS attributes.
This example is applicable to several use cases but here it is presented regarding PasswordChangeForm and its use in a Bootstrap website.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://www.wikiod.com/django-forms/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/django-forms/testing/</guid>
      <description>One core feature of Django is unit tests.
This topic intends to bring a complete documentation on how to test forms.
Simple Test # from django.test import TestCase from myapp.forms import MyForm class MyAppTests(TestCase): def test_forms(self): form_data = {&#39;field1&#39;: &#39;fieldvalue1&#39;} form = MyForm(data=form_data) self.assertTrue(form.is_valid()) </description>
    </item>
    
  </channel>
</rss>

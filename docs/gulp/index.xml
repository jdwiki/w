<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gulp Tutorial on </title>
    <link>https://www.wikiod.com/docs/gulp/</link>
    <description>Recent content in gulp Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/gulp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with gulp</title>
      <link>https://www.wikiod.com/gulp/getting-started-with-gulp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/getting-started-with-gulp/</guid>
      <description>Task dependency # You can run tasks in series, by passing a second parameter to gulp.task().
This parameters is an array of tasks to be executed and completed before your task will run:
var gulp = require(&#39;gulp&#39;); gulp.task(&#39;one&#39;, function() { // compile sass css }); gulp.task(&#39;two&#39;, function() { // compile coffeescript }); // task three will execute only after tasks one and two have been completed // note that task one and two run in parallel and order is not guaranteed gulp.</description>
    </item>
    
    <item>
      <title>Show errors with gulp-jslint</title>
      <link>https://www.wikiod.com/gulp/show-errors-with-gulp-jslint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/show-errors-with-gulp-jslint/</guid>
      <description>Installation and usage # Installation
$ npm install gulp-jslint --save-dev Usage
In gulpfile.js add:
var gulp = require(&#39;gulp&#39;); var jslint = require(&#39;gulp-jslint&#39;); gulp.task(&#39;lint&#39;, function(){ return gulp.src([&#39;source.js&#39;]) .pipe(jslint({ /* this object represents the JSLint directives being passed down */ })) .pipe(jslint.reporter( &#39;my-reporter&#39; )); }); for use this task:
$ ./node_modules/gulp/bin/gulp.js lint </description>
    </item>
    
    <item>
      <title>Minifying HTML</title>
      <link>https://www.wikiod.com/gulp/minifying-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/minifying-html/</guid>
      <description>Minify HTML using gulp-htmlmin # First, Install gulp and gulp-htmlmin to project directory locally
npm install --save-dev gulp gulp-htmlmin Then add the minify-html task to your gulpfile.js
var gulp = require(&#39;gulp&#39;); var htmlmin = require(&#39;gulp-htmlmin&#39;); // Task to minify HTML gulp.task(&#39;minify-html&#39;, function() { return gulp.src(&#39;source/*.html&#39;) .pipe(htmlmin()) .pipe(gulp.dest(&#39;public/&#39;)); }); gulp.task(&#39;watch&#39;, function (){ gulp.watch(&#39;source/*.html&#39;, [&#39;minify-html&#39;]); // other tasks }); gulp.task(&#39;default&#39;, [&#39;minify-html&#39;, &#39;watch&#39;]); This task finds all files in the source directory with a .</description>
    </item>
    
    <item>
      <title>Create documentation with gulp-jsdoc3</title>
      <link>https://www.wikiod.com/gulp/create-documentation-with-gulp-jsdoc3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/create-documentation-with-gulp-jsdoc3/</guid>
      <description>Installation # First of all, install gulp and gulp-jsdoc3 to your project:
npm install gulp-jsdoc3 --save-dev Then add it to your gulpfile.js
var gulp = require(&#39;gulp&#39;); var jsdoc = require(&#39;gulp-jsoc3&#39;); gulp.task(&#39;doc&#39;, function (cb){ gulp.src(&#39;src/*.js&#39;) .pipe(jsdoc(cb)); }); In order to documentate, for example, a function, you have to add a comment just at the top of the function, like this:
/** * @function example * @summary This is a short description of example * @author Whoever * @param {any} cb * @returns */ function example(cb){ //Code } If you want to know more block tags to use, please visit usejsdoc.</description>
    </item>
    
    <item>
      <title>Minifying JS</title>
      <link>https://www.wikiod.com/gulp/minifying-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/minifying-js/</guid>
      <description>Syntax # ext An object that specifies output source and minified file extensions. source The suffix string of the filenames that output source files ends with. min When string: The suffix string of the filenames that output minified files ends with. When Array: The regex expressions to be replaced with input filenames. For example: [/.(.*)-source.js$/, &amp;lsquo;$1.js&amp;rsquo;] exclude Will not minify files in the dirs. noSource Will not output the source code in the dest dirs.</description>
    </item>
    
    <item>
      <title>Concatenating files</title>
      <link>https://www.wikiod.com/gulp/concatenating-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/concatenating-files/</guid>
      <description>Concat and Uglify JS and CSS files # Remember to npm install all the files into devDependencies first. E.g.
npm install --save-dev gulp gulp-concat gulp-rename gulp-uglify gulp-uglifycss Gulpfile.js
var gulp = require(&#39;gulp&#39;); var gulp_concat = require(&#39;gulp-concat&#39;); var gulp_rename = require(&#39;gulp-rename&#39;); var gulp_uglify = require(&#39;gulp-uglify&#39;); var uglifycss = require(&#39;gulp-uglifycss&#39;); var destDir = &#39;./public/assets/dist/&#39;; //or any folder inside your public asset folder var tempDir = &#39;./public/assets/temp/&#39;; //any place where you want to store the concatenated, but unuglified/beautified files //To concat and Uglify All JS files in a particular folder gulp.</description>
    </item>
    
    <item>
      <title>Minifying CSS</title>
      <link>https://www.wikiod.com/gulp/minifying-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/minifying-css/</guid>
      <description>Using gulp-clean-css and gulp-rename # First, Install gulp, gulp-clean-css and gulp-rename to project directory localy
npm install --save-dev gulp gulp-clean-css gulp-rename Than add following minify-css task to your gulpfile.js
var gulp = require(&#39;gulp&#39;); var cleanCSS = require(&#39;gulp-clean-css&#39;); var rename = require(&#39;gulp-rename&#39;); gulp.task(&#39;minify-css&#39;, function() { return gulp.src(&#39;css/dist/dist.css&#39;) .pipe(cleanCSS()) .pipe(rename(&#39;dist.min.css&#39;)) .pipe(gulp.dest(&#39;css/dist&#39;)); }); gulp.task(&#39;watch&#39;, function(){ gulp.watch(&#39;css/dist/**/*.css&#39;, [&#39;minify-css&#39;]); // Other watchers }); gulp.task(&#39;default&#39;, [&#39;minify-css&#39;, &#39;watch&#39;]); Here .pipe(cleanCSS()) executes minification of your css/dist/dist.css file and .</description>
    </item>
    
    <item>
      <title>Comprehensive Guide to a Front-end Workflow Automation with Gulpjs -1 of 2</title>
      <link>https://www.wikiod.com/gulp/comprehensive-guide-to-a-front-end-workflow-automation-with-gulpjs--1-of-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/comprehensive-guide-to-a-front-end-workflow-automation-with-gulpjs--1-of-2/</guid>
      <description>Syntax # npm install [plugin-name] &amp;ndash;save-dev npm install [plugin-name] &amp;ndash;save Function &amp;lt;function-name&amp;gt; (glob) { $.src(glob).pipe([plugin 1]).pipe([plugin 2])&amp;hellip;.pipe([plugin n]).pipe( $.dest(&amp;lt;destination-name&amp;gt;) } $.task(&amp;lt;taskname&amp;gt; , [dependencies] , &amp;lt;body&amp;gt;); Continue Reading - Creating a default task and setting up browser-sync
References
Gulp-Clean-Css Gulp-Uglify Gulp-Autoprefixer - for Css Prefixes that maintain browser compatibility Gulp-Cached Gulp-Remember Gulp-Jshint Step-By-Step Guide to Gulp Workflow Automation for absolute beginners that I documented iny my blog
Loading All The Plugins from Package.</description>
    </item>
    
    <item>
      <title>Create a watcher</title>
      <link>https://www.wikiod.com/gulp/create-a-watcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/create-a-watcher/</guid>
      <description>Watcher task # config.paths.html represents the path to your HTML file.
gulp.task(&amp;quot;watch&amp;quot;, function() { gulp.watch(config.paths.html, [&amp;quot;html&amp;quot;]); }); The task should be added to default as well:
gulp.task(&amp;quot;default&amp;quot;, [&amp;quot;html&amp;quot;, &amp;quot;watch&amp;quot;]); </description>
    </item>
    
    <item>
      <title>Image lossless compression (with gulp-imagemin)</title>
      <link>https://www.wikiod.com/gulp/image-lossless-compression-with-gulp-imagemin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gulp/image-lossless-compression-with-gulp-imagemin/</guid>
      <description>Syntax # imagemin([plugins], {options}) Parameters # Argument Description sourcePath Images&amp;rsquo; source directory (for example: /assets/images) buildPath Destination path (for example: /static/dist/) First argument to imagemin constructor is plugin array. By default, following plugins are used: [imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()]
Second argument are options. In the above example following options are used:
{ progressive: true, interlaced: true, svgoPlugins: [{removeUnknownsAndDefaults: false}, {cleanupIDs: false}] } Those are completely optional.
progressive is used by imagemin-jpegtran.</description>
    </item>
    
  </channel>
</rss>

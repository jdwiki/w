<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing Tutorial on </title>
    <link>https://www.wikiod.com/docs/testing/</link>
    <description>Recent content in testing Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with testing</title>
      <link>https://www.wikiod.com/testing/getting-started-with-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/testing/getting-started-with-testing/</guid>
      <description>Test case # TEST CASE â€“
A test case is a set of conditions and steps that when followed/applied, a tester can determine whether a feature, an application or a software system is working as originally designed.
A test case usually contains References to the original task, Pre-conditions ( if the pre-conditions are not met, testing can not continue), Steps (steps describe what a tester needs to do in order to get a result), Expected Result (what should happen after following all the described steps) but may also contain Estimation, Priority, Environment on which to perform test.</description>
    </item>
    
    <item>
      <title>UI Testing</title>
      <link>https://www.wikiod.com/testing/ui-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/testing/ui-testing/</guid>
      <description>The focus of this topic is basically cover most important aspects of UI testing. This post would be mostly beneficial for freshers since they get assignments to work on and many times it so happens that few of the important points are missed. Let&amp;rsquo;s help the freshers by contributing to this topic :)
[UI Testing] How to test a website? # Following points are to be kept in mind always:</description>
    </item>
    
    <item>
      <title>Software Testing Techniques - Equivalence Partition</title>
      <link>https://www.wikiod.com/testing/software-testing-techniques---equivalence-partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/testing/software-testing-techniques---equivalence-partition/</guid>
      <description>This technique divides input data into data classes to reduce test cases amount to validate a rule. The idea is that given a set of possible equivalent values, using just one of those values will be enough to design a test case.
An advantage of this approach is reduction in the time required for testing a software due to lesser number of test cases.
It strives to find errors that may arise based on information classes and reduce to the minimum the effort needed in terms of test case design as well as test data mass.</description>
    </item>
    
    <item>
      <title>Software Testing Techniques - State Transition</title>
      <link>https://www.wikiod.com/testing/software-testing-techniques---state-transition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/testing/software-testing-techniques---state-transition/</guid>
      <description>This technique should be used when you have any workflow in place, and should consider positive test cases (transitions that can happen), as well as negative test cases (transitions that are not allowed).
Any rule that can be described, thinked, scratched as a state transition diagram, workflow, lifecycle can have their test cases designed using this technique.
This technique can be also works to find completeness problems inside worflows and diagrams during documentation analysis.</description>
    </item>
    
    <item>
      <title>Software Testing Techniques - Boundary Value Analysis</title>
      <link>https://www.wikiod.com/testing/software-testing-techniques---boundary-value-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/testing/software-testing-techniques---boundary-value-analysis/</guid>
      <description>This technique should be used whenever you have boundaries defined into a spec. It is a great idea to apply it to any rule based on time, values, any kind of counting or scale to be triggered.
It also ensure and helps finding n + 1 errors. And yes, it is an expansion from Equivalence Partition concepts. Your decision to apply this or the other should be the boundaries existing and being clearly defined.</description>
    </item>
    
  </channel>
</rss>

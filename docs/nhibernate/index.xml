<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nhibernate Tutorial on </title>
    <link>https://www.wikiod.com/docs/nhibernate/</link>
    <description>Recent content in nhibernate Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/nhibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with nhibernate</title>
      <link>https://www.wikiod.com/nhibernate/getting-started-with-nhibernate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nhibernate/getting-started-with-nhibernate/</guid>
      <description>Installation or Setup # Detailed instructions on getting nhibernate set up or installed.</description>
    </item>
    
    <item>
      <title>Mappings</title>
      <link>https://www.wikiod.com/nhibernate/mappings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nhibernate/mappings/</guid>
      <description>Xml Mappings # The xml mapping uses a hbm.xml file which is a hibernate mapping file. It is a syntax xml file which contains the metadata required for the object/relational mapping. The metadata includes declaration of persistent classes and the mapping of properties (to columns and foreign key relationships to other entities) to database tables.
Add a file named Entity.hbm.xml into the project and set it as embedded resource on the properties tab.</description>
    </item>
    
    <item>
      <title>QueryOver Queries</title>
      <link>https://www.wikiod.com/nhibernate/queryover-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nhibernate/queryover-queries/</guid>
      <description>NHibernate 3.0 introduced the QueryOver API, which combines the use of extension methods and lambda expressions to provide a statically typesafe wrapper around the ICriteria API. The ICriteria API is NHibernate&amp;rsquo;s implementation of the Query Object pattern.
Basic query # A basic QueryOver query is performed against an ISession using the QueryOver&amp;lt;T&amp;gt; method, where T is the type of a mapped entity.
IList&amp;lt;Customer&amp;gt; customers = session.QueryOver&amp;lt;Customer&amp;gt;() .Where(c =&amp;gt; c.LastName == &amp;quot;Simpson&amp;quot;) .</description>
    </item>
    
    <item>
      <title>LINQ to NHibernate Queries</title>
      <link>https://www.wikiod.com/nhibernate/linq-to-nhibernate-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nhibernate/linq-to-nhibernate-queries/</guid>
      <description>The LINQ to NHibernate driver is centered on the IQueryable&amp;lt;T&amp;gt; interface.
Be sure to add using NHibernate.Linq; in order to use the NHibernate LINQ provider.
Basic query # IQueryable&amp;lt;Cat&amp;gt; cats = session.Query&amp;lt;Cat&amp;gt;() .Where(c =&amp;gt; c.Name == &amp;quot;Max&amp;quot;); </description>
    </item>
    
    <item>
      <title>Cascades</title>
      <link>https://www.wikiod.com/nhibernate/cascades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nhibernate/cascades/</guid>
      <description>Syntax # cascade=&amp;ldquo;all-delete-orphan&amp;rdquo; Entities has associations to other objects, this may be an association to a single item (many-to-one) or an association to a collection (one-to-many, many-to-any).
At any rate, you are able to tell NHibernate to automatically traverse an entity&amp;rsquo;s associations, and act according to the cascade option. For instance, adding an unsaved entity to a collection with save-update cascade will cause it to be saved along with its parent object, without any need for explicit instructions on our side.</description>
    </item>
    
  </channel>
</rss>

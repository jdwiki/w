<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular Tutorial on </title>
    <link>https://www.wikiod.com/docs/angular/</link>
    <description>Recent content in Angular Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Angular</title>
      <link>https://www.wikiod.com/angular/getting-started-with-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/getting-started-with-angular/</guid>
      <description>Installation of Angular using angular-cli # This example is a quick setup of Angular and how to generate a quick example project.
Prerequisites: # Node.js 6.9.0 or greater. npm v3 or greater or yarn. Typings v1 or greater. Open a terminal and run the commands one by one:
npm install -g typings or yarn global add typings
npm install -g @angular/cli or yarn global add @angular/cli
The first command installs the typings library globally (and adds the typings executable to PATH).</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/routing/</guid>
      <description>Basic Routing # Router enables navigation from one view to another based on user interactions with the application.
Following are the steps in implementing basic routing in Angular -
NOTE: Ensure you have this tag:
&amp;lt;base href=&#39;https://www.wikiod.com/&#39;&amp;gt; as the first child under your head tag in your index.html file. This element states that your app folder is the application root. Angular would then know how to organize your links.
Check if you are pointing to the correct/latest routing dependencies in package.</description>
    </item>
    
    <item>
      <title>Sharing data among components</title>
      <link>https://www.wikiod.com/angular/sharing-data-among-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/sharing-data-among-components/</guid>
      <description>The objective of this topic is to create simple examples of several ways data can be shared between components via data binding and shared service.
There are always many of ways of accomplishing one task in programming. Please feel free to edit current examples or add some of your own.
Sending data from child to parent via @Output event emitter # event-emitter.component.ts
import { Component, OnInit, EventEmitter, Output } from &#39;@angular/core&#39;; @Component({ selector: &#39;event-emitting-child-component&#39;, template: `&amp;lt;div *ngFor=&amp;quot;let item of data&amp;quot;&amp;gt; &amp;lt;div (click)=&amp;quot;select(item)&amp;quot;&amp;gt; {{item.</description>
    </item>
    
    <item>
      <title>RXJS and Observables</title>
      <link>https://www.wikiod.com/angular/rxjs-and-observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/rxjs-and-observables/</guid>
      <description>Wait for multiple requests # One common scenario is to wait for a number of requests to finish before continuing. This can be accomplished using the forkJoin method.
In the following example, forkJoin is used to call two methods that return Observables. The callback specified in the .subscribe method will be called when both Observables complete. The parameters supplied by .subscribe match the order given in the call to .forkJoin. In this case, first posts then tags.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://www.wikiod.com/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/forms/</guid>
      <description>Reactive Forms # app.module.ts # Add these into your app.module.ts file to use reactive forms
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { FormsModule, ReactiveFormsModule } from &#39;@angular/forms&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule, FormsModule, ReactiveFormsModule, ], declarations: [ AppComponent ] providers: [], bootstrap: [ AppComponent ] }) export class AppModule {} app.component.ts # import { Component,OnInit } from &#39;@angular/core&#39;; import template from &#39;.</description>
    </item>
    
    <item>
      <title>Pipes</title>
      <link>https://www.wikiod.com/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/pipes/</guid>
      <description>Pipes are very similar to filters in AngularJS in that they both help to transform the data into a specified format.The pipe character | is used to apply pipes in Angular.
Custom Pipes # my.pipe.ts
import { Pipe, PipeTransform } from &#39;@angular/core&#39;; @Pipe({name: &#39;myPipe&#39;}) export class MyPipe implements PipeTransform { transform(value:any, args?: any):string { let transformedValue = value; // implement your transformation logic here return transformedValue; } } my.component.ts
import { Component } from &#39;@angular/core&#39;; @Component({ selector: &#39;my-component&#39;, template: `{{ value | myPipe }}` }) export class MyComponent { public value:any; } my.</description>
    </item>
    
    <item>
      <title>For Loop</title>
      <link>https://www.wikiod.com/angular/for-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/for-loop/</guid>
      <description>NgFor - Markup For Loop # The NgFor directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from the outer context with the given loop variable set to the current item from the iterable.
To customize the default tracking algorithm, NgFor supports trackBy option. trackBy takes a function which has two arguments: index and item. If trackBy is given, Angular tracks changes by the return value of the function.</description>
    </item>
    
    <item>
      <title>Event Emitter</title>
      <link>https://www.wikiod.com/angular/event-emitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular/event-emitter/</guid>
      <description>Catching the event # Create a service-
import {EventEmitter} from &#39;angular2/core&#39;; export class NavService { navchange: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter(); constructor() {} emitNavChangeEvent(number) { this.navchange.emit(number); } getNavChangeEmitter() { return this.navchange; } } Create a component to use the service-
import {Component} from &#39;angular2/core&#39;; import {NavService} from &#39;../services/NavService&#39;; @Component({ selector: &#39;obs-comp&#39;, template: `obs component, item: {{item}}` }) export class ObservingComponent { item: number = 0; subscription: any; constructor(private navService:NavService) {} ngOnInit() { this.</description>
    </item>
    
  </channel>
</rss>

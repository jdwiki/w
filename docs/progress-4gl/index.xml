<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>progress-4gl Tutorial on </title>
    <link>https://www.wikiod.com/docs/progress-4gl/</link>
    <description>Recent content in progress-4gl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/progress-4gl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with progress-4gl</title>
      <link>https://www.wikiod.com/progress-4gl/getting-started-with-progress-4gl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/getting-started-with-progress-4gl/</guid>
      <description>FizzBuzz # Another example of &amp;ldquo;Hello World&amp;rdquo; style programs is FizzBuzz.
DEFINE VARIABLE i AS INTEGER NO-UNDO. DEFINE VARIABLE cOut AS CHARACTER NO-UNDO. DO i = 1 TO 100: /* Dividable by 3: fizz */ IF i MODULO 3 = 0 THEN cOut = &amp;quot;Fizz&amp;quot;. /* Dividable by 5: buzz */ ELSE IF i MODULO 5 = 0 THEN cOut = &amp;quot;Buzz&amp;quot;. /* Otherwise just the number */ ELSE cOut = STRING(i).</description>
    </item>
    
    <item>
      <title>Compiling</title>
      <link>https://www.wikiod.com/progress-4gl/compiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/compiling/</guid>
      <description>Compile Progress code as called &amp;ldquo;r-code&amp;rdquo; and is normally saved in a file with the extension .r. There are a couple of different ways of compiling: using the COMPILE statement or on Linux or AppBuilder: the built in Application Compiler. Developer Studio (the Eclipse environment) has compiling built into it&amp;rsquo;s build process.
You must have 4GL Development or OpenEdge Studio installed to compile 4GL programs which update the database.
Syntax # COMPILE program.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/progress-4gl/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/functions/</guid>
      <description>A user defined function in Progress ABL is a reusable program module.
A function must be declared in the &amp;ldquo;main&amp;rdquo; procedure. It cannot be declared inside a procedure or inside another function. A function in Progress ABL isn&amp;rsquo;t a &amp;ldquo;first class citizen&amp;rdquo; unlike in programming languages like Haskell or Javascript. You cannot pass a function as an input or output parameter. You can however invioke them dynamically using DYNAMIC-FUNCTION or the CALL object.</description>
    </item>
    
    <item>
      <title>Working with numbers</title>
      <link>https://www.wikiod.com/progress-4gl/working-with-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/working-with-numbers/</guid>
      <description>Progress ABL supports three number formats: 32 and 64 bit integers and floats.
Operators # Progress supports + / - * as operators. They cannot be overloaded. Division always returns a decimal. If any of the numbers in a calculation is a decimal a decimal will be returned. Otherwise an INTEGER or INT64.
There&amp;rsquo;s no += or ++ operator. To increase or decrease a variable you have to assign it to itself plus or minus something.</description>
    </item>
    
    <item>
      <title>TEMP-TABLE</title>
      <link>https://www.wikiod.com/progress-4gl/temp-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/temp-table/</guid>
      <description>The TEMP-TABLE is a very powerful feature of Progress ABL. It&amp;rsquo;s a temporary in-memory (mostly at least) table that can be used for writing complex logic. It can be used as input/output parameters to procedures, functions and other programs. One or more temp-tables can make up the foundation of a DATASET (often called ProDataset).
Almost anything that can be done with a native Progress database table can be done with a temp-table.</description>
    </item>
    
    <item>
      <title>Procedures</title>
      <link>https://www.wikiod.com/progress-4gl/procedures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/procedures/</guid>
      <description>There are two types of procedures in Progress ABL: internal procedures and procedure prototypes that are facades to Windows dlls or Unix/Linux shared library procedures.
Just like with functions, procedures cannot be nested. You cannot nest functions in procedures and vice versa.
A procedure is called with the RUN statement.
Syntax # RUN procedurename. //Runs a procedure called procedurename.
RUN proc1(INPUT &amp;ldquo;HELLO&amp;rdquo;). //Inputs the string HELLO to proc1
RUN proc2(INPUT var1, output var2).</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/progress-4gl/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/strings/</guid>
      <description>In Progress ABL there are two types of strings, those defined as CHARACTER and those defined as LONGCHAR. A file larger than 32K in length is a LONGCHAR. Most strings are unless specified any other way case insensitive.
Remember - all positions start with the position 1!
Concatenating strings # Using the + operator you can easily concatenate two or more strings.
DEFINE VARIABLE cString AS CHARACTER NO-UNDO. cString = &amp;quot;HELLO&amp;quot;.</description>
    </item>
    
    <item>
      <title>OS-utilities</title>
      <link>https://www.wikiod.com/progress-4gl/os-utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/os-utilities/</guid>
      <description>There are several built in functions and statements for accessing the operating system.
OS-COMMAND # Executes a OS-command.
OS-COMMAND without any options will start a new shell and not exit it - thus you will on graphical OS:es leave a window &amp;ldquo;hanging&amp;rdquo;.
DEFINE VARIABLE cmd AS CHARACTER NO-UNDO. cmd = &amp;quot;dir&amp;quot;. OS-COMMAND VALUE(cmd). There are three options: SILENT, NO-WAIT and NO-CONSOLE.
SILENT
After processing an operating system command, the AVM shell pauses.</description>
    </item>
    
    <item>
      <title>FIND statement</title>
      <link>https://www.wikiod.com/progress-4gl/find-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/find-statement/</guid>
      <description>The FIND statement is used to retrieve a single record from a single table. It has some limitations compared to FOR or QUERY, but it&amp;rsquo;s a simple and handy statement for fast access to records.
FIND basic examples # A simple sports2000 example:
FIND FIRST Customer NO-LOCK WHERE CustNum = 1 NO-ERROR. IF AVAILABLE Customer THEN DO: DISPLAY Customer.NAME. END. ELSE DO: MESSAGE &amp;quot;No record available&amp;quot;. END. FIRST - find the first record that matches the query</description>
    </item>
    
    <item>
      <title>Queries</title>
      <link>https://www.wikiod.com/progress-4gl/queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/progress-4gl/queries/</guid>
      <description>The examples will be based on a copy of the demo database Sports 2000 provided with the setup of Progress.
When working with queries in Progress you need to:
DEFINE the query and set what buffers (tables) and fields it works against.
OPEN the query with a specific WHERE-clause that defines how to retrieve the records. Possibly also sorting (BY/BREAK BY)
GET the actual data - that can be the FIRST, NEXT, PREV (for previous) or LAST matching record.</description>
    </item>
    
  </channel>
</rss>

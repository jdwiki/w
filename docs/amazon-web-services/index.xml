<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>amazon-web-services Tutorial on </title>
    <link>https://www.wikiod.com/docs/amazon-web-services/</link>
    <description>Recent content in amazon-web-services Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/amazon-web-services/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with amazon-web-services</title>
      <link>https://www.wikiod.com/amazon-web-services/getting-started-with-amazon-web-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/getting-started-with-amazon-web-services/</guid>
      <description>Before it is too late # Tips &amp;amp; Tricks to avoid nasty situations
EC2 Instances and EBS
Set IAM Roles. Unlike tags, the IAM Role is set once and for all on EC2 instanciation (even after 4 years) ! Try to identify and categorize beforehand your instances so you can give an them appropriate IAM roles. IAM Roles are a nice way to identify your machines, it will let amazon automatically store Instance Profile credentials safely in your machines, and you will be easily able to give extra privileges.</description>
    </item>
    
    <item>
      <title>Deploy a docker container image using ECS</title>
      <link>https://www.wikiod.com/amazon-web-services/deploy-a-docker-container-image-using-ecs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/deploy-a-docker-container-image-using-ecs/</guid>
      <description>Before you can add ECS instances to a cluster you must first go to the EC2 Management Console and create ecs-optimized instances with an IAM role that has the AmazonEC2ContainerServiceforEC2Role policy attached.
Go to your EC2 Dashboard, and click the Launch Instance button.
Under Community AMIs, search for ecs-optimized, and select the one that best fits your project needs. Any will work. Click next.
When you get to Configure Instance Details, click on the create new IAM role link and create a new role called ecsInstanceRole.</description>
    </item>
    
    <item>
      <title>Amazon Cognito</title>
      <link>https://www.wikiod.com/amazon-web-services/amazon-cognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/amazon-cognito/</guid>
      <description>User Identity management using Amazon Cognito # var app = {}; app.signUp = function(){ app.userName = $(&#39;#userName&#39;).val(); app.password = $(&#39;#password&#39;).val(); app.email = $(&#39;#form-email&#39;).val(); app.phoneNumber = $(&#39;#form-phone&#39;).val(); app.emailRegex = /^(([^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\.,;:\s@\&amp;quot;]+)*)|(\&amp;quot;.+\&amp;quot;))@(([^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]+\.)+[^&amp;lt;&amp;gt;()[\]\.,;:\s@\&amp;quot;]{2,})$/i; /* Put the User input validation logic here. */ if (!app.userName) { alert(&amp;quot;Please provide a user name&amp;quot;); return; } if (!app.password) { alert(&amp;quot;Please provide a password&amp;quot;); return; } if (!app.email) { alert(&amp;quot;Please provide an Email address&amp;quot;); return; } if(!app.emailRegex.test(app.email)){ alert(&amp;quot;Please provide a valid Email address&amp;quot;); return; } if (!</description>
    </item>
    
    <item>
      <title>AWS CloudFormation</title>
      <link>https://www.wikiod.com/amazon-web-services/aws-cloudformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/aws-cloudformation/</guid>
      <description>CloudFormation sample script to create an EC2 instance along with a Security Group to associate with. # This example will create an EC2 instance of t2.micro type in N.Virginia region running Amazon Linux. During the execution, it will ask to select the KeyPair to use and an I.P. CIDR from where you can SSH to the instance, use default to make SSH open to the internet
{ &#34;AWSTemplateFormatVersion&#34; : &#34;2010-09-09&#34;, &#34;</description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://www.wikiod.com/amazon-web-services/aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/aws-lambda/</guid>
      <description>AWS Lambda is a service that lets you run back-end code without the need to provision or manage servers. AWS Lambda takes care of scaling and high availability. The cost directly depends on how often and how long your code executes.
You will find examples of how to create and deploy AWS Lambda functions in different languages.
AWS Lambda code must be written in a stateless manner. While the instance of a lambda might be retained and re-used, you must never expect this.</description>
    </item>
    
    <item>
      <title>Amazon DynamoDB</title>
      <link>https://www.wikiod.com/amazon-web-services/amazon-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/amazon-dynamodb/</guid>
      <description>DynamoDB basic Crud Operation using NodeJS # let doc = require(&#39;dynamodb-doc&#39;); let dynamo = new doc.DynamoDB(); var tblName = &#34;MyTable&#34;; exports.handler = (event, context, callback) =&gt; { readOperation(context); } function readOperation(cnxt) { var params = { TableName: tblName, Key: { &#34;id&#34;: &#34;2013&#34;, &#34;topic&#34;: &#34;Turn It Down, Or Else!&#34; }, AttributesToGet: [ &#34;id&#34;, &#34;client_name&#34;, &#34;info&#34; ], ConsistentRead: false }; dynamo.getItem(params, function(err, data) { if (err) console.log(&#34;Error: &#34;+err); // an error occurred else { var jsonDoc = JSON.</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk</title>
      <link>https://www.wikiod.com/amazon-web-services/elastic-beanstalk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/elastic-beanstalk/</guid>
      <description>Current Limitations (As of 2016-10-03)
Environment Tags cannot be changed once the Environment is created, so choose wisely. Autoscaling in Elastic Beanstalk is limited to Simple and Scheduled, so if you wish to use Step-Scaling, re-consider if Elastic Beanstalk is a good fit. Automation with Jenkins
There is a great AWSEB Deployment Plugin for Jenkins that will plug-n-play for deployment to Elastic Beanstalk (blue/green deployments with automatic idle termination is just a checkbox away).</description>
    </item>
    
    <item>
      <title>Root Class</title>
      <link>https://www.wikiod.com/amazon-web-services/root-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/amazon-web-services/root-class/</guid>
      <description>Amazon api root class is as following. # public class AmazonRootobject { public Itemsearchresponse ItemSearchResponse { get; set; } } public class Itemsearchresponse { public string xmlns { get; set; } public Operationrequest OperationRequest { get; set; } public Items Items { get; set; } } public class Operationrequest { public Httpheaders HTTPHeaders { get; set; } public string RequestId { get; set; } public Arguments Arguments { get; set; } public string RequestProcessingTime { get; set; } } public class Httpheaders { public Header Header { get; set; } } public class Header { public string Name { get; set; } public string Value { get; set; } } public class Arguments { public Argument[] Argument { get; set; } } public class Argument { public string Name { get; set; } public object Value { get; set; } } public class Items { public Request Request { get; set; } public string TotalResults { get; set; } public string TotalPages { get; set; } public string MoreSearchResultsUrl { get; set; } public Item[] Item { get; set; } } public class Request { public string IsValid { get; set; } public Itemsearchrequest ItemSearchRequest { get; set; } } public class Itemsearchrequest { public string Keywords { get; set; } public string[] ResponseGroup { get; set; } public string SearchIndex { get; set; } public string Sort { get; set; } } public class Item { public string ASIN { get; set; } public string ParentASIN { get; set; } public string DetailPageURL { get; set; } public Itemlinks ItemLinks { get; set; } public Smallimage SmallImage { get; set; } public Mediumimage MediumImage { get; set; } public Largeimage LargeImage { get; set; } public Imagesets ImageSets { get; set; } public Itemattributes ItemAttributes { get; set; } public OfferSummary OfferSummary { get; set; } public Offers Offers { get; set; } public Variationsummary VariationSummary { get; set; } } public class Variationsummary { public Highestprice HighestPrice { get; set; } public Lowestprice LowestPrice { get; set; } public Highestsaleprice HighestSalePrice { get; set; } public Lowestsaleprice LowestSalePrice { get; set; } } public class Highestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Highestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestsaleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Itemlinks { public Itemlink[] ItemLink { get; set; } } public class Itemlink { public string Description { get; set; } public string URL { get; set; } } public class Smallimage { public string URL { get; set; } public Height Height { get; set; } public Width Width { get; set; } } public class Height { public string Units { get; set; } public string text { get; set; } } public class Width { public string Units { get; set; } public string text { get; set; } } public class Mediumimage { public string URL { get; set; } public Height1 Height { get; set; } public Width1 Width { get; set; } } public class Height1 { public string Units { get; set; } public string text { get; set; } } public class Width1 { public string Units { get; set; } public string text { get; set; } } public class Largeimage { public string URL { get; set; } public Height2 Height { get; set; } public Width2 Width { get; set; } } public class Height2 { public string Units { get; set; } public string text { get; set; } } public class Width2 { public string Units { get; set; } public string text { get; set; } } public class Imagesets { public object ImageSet { get; set; } } public class Itemattributes { public string Binding { get; set; } public string Brand { get; set; } public string Color { get; set; } public string Model { get; set; } public string Manufacturer { get; set; } public string ProductGroup { get; set; } public string Title { get; set; } public ListPrice ListPrice { get; set; } } public class ListPrice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class OfferSummary { public Lowestnewprice LowestNewPrice { get; set; } public Lowestusedprice LowestUsedPrice { get; set; } public string TotalNew { get; set; } public string TotalUsed { get; set; } public string TotalCollectible { get; set; } public string TotalRefurbished { get; set; } public Lowestrefurbishedprice LowestRefurbishedPrice { get; set; } } public class Lowestnewprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestusedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Lowestrefurbishedprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Offers { public string TotalOffers { get; set; } public string TotalOfferPages { get; set; } public string MoreOffersUrl { get; set; } public Offer Offer { get; set; } } public class Offer { public Merchant Merchant { get; set; } public Offerattributes OfferAttributes { get; set; } public Offerlisting OfferListing { get; set; } } public class Merchant { public string Name { get; set; } } public class Offerattributes { public string Condition { get; set; } } public class Offerlisting { public string OfferListingId { get; set; } public string PricePerUnit { get; set; } public Price Price { get; set; } public string Availability { get; set; } public Availabilityattributes AvailabilityAttributes { get; set; } public string IsEligibleForSuperSaverShipping { get; set; } public string IsEligibleForPrime { get; set; } public Saleprice SalePrice { get; set; } public Amountsaved AmountSaved { get; set; } public string PercentageSaved { get; set; } } public class Price { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Availabilityattributes { public string AvailabilityType { get; set; } public string MinimumHours { get; set; } public string MaximumHours { get; set; } } public class Saleprice { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } public class Amountsaved { public string Amount { get; set; } public string CurrencyCode { get; set; } public string FormattedPrice { get; set; } } Business class # using System; using System.</description>
    </item>
    
  </channel>
</rss>

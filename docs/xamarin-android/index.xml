<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xamarin.Android Tutorial on </title>
    <link>https://www.wikiod.com/docs/xamarin-android/</link>
    <description>Recent content in Xamarin.Android Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xamarin-android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Xamarin.Android</title>
      <link>https://www.wikiod.com/xamarin-android/getting-started-with-xamarinandroid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/getting-started-with-xamarinandroid/</guid>
      <description>Get Started in Visual Studio # Browse to File &amp;gt; New &amp;gt; Project to bring you up the New Project dialog. Navigate to Visual C# &amp;gt; Android and select Blank App: Give your app a Name and press OK to create your project. Set up your device for deployment, or configure an emulator To run your application, select the Debug configuration, and press the Start button: Get started in Xamarin Studio # Browse to File &amp;gt; New &amp;gt; Solution to bring you up the new project dialog.</description>
    </item>
    
    <item>
      <title>Xamarin.Android - How to create a toolbar</title>
      <link>https://www.wikiod.com/xamarin-android/xamarinandroid---how-to-create-a-toolbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/xamarinandroid---how-to-create-a-toolbar/</guid>
      <description>Dear Team,
I think that its good to mention about official Android documentation where toolbar control is explained in details:
https://developer.android.com/reference/android/support/v7/widget/Toolbar.html
There is also interested content about Android.Support.v7 library used in the sample:
https://developer.android.com/training/appbar/index.html
Add toolbar to the Xamarin.Android application # Firstly you have to add Xamarin.Android.Support.V7.AppCompat library for NuGet: https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/
In the &amp;ldquo;values&amp;rdquo; folder under &amp;ldquo;Resources&amp;rdquo; add new xml file called &amp;ldquo;styles.xml&amp;rdquo;: &amp;ldquo;styles.xml&amp;rdquo; file should contain below code:
&amp;lt;?xml version=&amp;quot;1.</description>
    </item>
    
    <item>
      <title>RecyclerView</title>
      <link>https://www.wikiod.com/xamarin-android/recyclerview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/recyclerview/</guid>
      <description>RecyclerView Basics # This is an example of using Android Support Library V7 RecyclerView. Support libraries are generally recommended because they provide backward-compatible versions of new features, provide useful UI elements that are not included in the framework, and provide a range of utilities that apps can draw on.
To get the RecyclerView, we will install the necessary Nuget packages. First, we will search for v7 recyclerview. Scroll down until we see Xamarin Android Support Library - v7 RecyclerView.</description>
    </item>
    
    <item>
      <title>App lifecycle - Xamarin.Andorid</title>
      <link>https://www.wikiod.com/xamarin-android/app-lifecycle---xamarinandorid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/app-lifecycle---xamarinandorid/</guid>
      <description>Xamarin.Android application lifecycle is the same as normal Android app. When talking about lifecycle we need to talk about: Application lifecycle, Activity lifecycle and Fragment lifecycle.
In the below I&amp;rsquo;ll try to provide a good description and way of using them. I obtained this documentation from the official Android and Xamarin documentation and many helpful web resources provided in remarks section below.
Interesting links to broad your knowledge about Android application lifecycle:</description>
    </item>
    
    <item>
      <title>Bindings</title>
      <link>https://www.wikiod.com/xamarin-android/bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/bindings/</guid>
      <description>Removing Types # It is possible to instruct the Xamarin.Android Bindings Generator to ignore a Java type and not bind it. This is done by adding a remove-node XML element to the metadata.xml file:
&amp;lt;remove-node path=&amp;quot;/api/package[@name=&#39;{package_name}&#39;]/class[@name=&#39;{name}&#39;]&amp;quot; /&amp;gt; Implementing Java interfaces # If a java library contains interfaces that should be implemented by the user (e.g. click listeners like View.IOnClickListener or callbacks), the implementing class has to inherit &amp;ndash; directly or indirectly &amp;ndash; from Java.</description>
    </item>
    
    <item>
      <title>Publishing your Xamarin.Android APK</title>
      <link>https://www.wikiod.com/xamarin-android/publishing-your-xamarinandroid-apk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/publishing-your-xamarinandroid-apk/</guid>
      <description>This topic shows information on how to prepare your Xamarin.Android app for release mode and how to optimize it.
Preparing your APK in the Visual Studio # You finished your app, tested on debug mode and it is working perfect. Now, you want to prepare it to publish in the Google Play Store.
Xamarin documentation provides good informations in here:
https://developer.xamarin.com/guides/android/deployment,_testing,_and_metrics/publishing_an_application/
Android Manifest
First, in Visual Studio, right-click your Xamarin.Android project in the Solution Explorer and select Properties.</description>
    </item>
    
    <item>
      <title>Dialogs</title>
      <link>https://www.wikiod.com/xamarin-android/dialogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/dialogs/</guid>
      <description>Parameters # commonly used Public Method Use SetTitle(String) Sets Title for the dialog SetIcon(Drawable) Set Icon for the alert dialog SetMessage(string) Set the message to display. SetNegativeButton(String, EventHandler) Set a listener to be invoked when the negative button of the dialog is pressed. SetPositiveButton(String, EventHandler) Set a listener to be invoked when the positive button of the dialog is pressed. SetNeutralButton(String, EventHandler) Set a listener to be invoked when the neutral button of the dialog is pressed.</description>
    </item>
    
    <item>
      <title>Toasts</title>
      <link>https://www.wikiod.com/xamarin-android/toasts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/toasts/</guid>
      <description>Basic Toast Message # First, instantiate a Toast object with one of the MakeText() methods. This method takes three parameters: the application Context, the text message, and the duration for the toast. It returns a properly initialized Toast object. You can display the toast notification with Show(), as shown in the following example:
Context context = Application.Context; string text = &amp;quot;Hello toast!&amp;quot;; ToastLength duration = ToastLength.Short; var toast = Toast.MakeText(context, text, duration); toast.</description>
    </item>
    
    <item>
      <title>Xamarin.Android - Bluetooth communication</title>
      <link>https://www.wikiod.com/xamarin-android/xamarinandroid---bluetooth-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/xamarinandroid---bluetooth-communication/</guid>
      <description>In Xamarin.Android the BluetoothSocket.InputStream and BluetoothSocket.OutputStream properties are by design automatically converted to System.IO.Stream. In case of so called interactive communication protocol, when server responds only when client talks to it, System.IO.Stream is not good because it has no method or property to get the number of available response bytes before reading the response.
Parameters # Parameter Details socket An instance of BluetoothSocket object. Socket must be opened before call this method.</description>
    </item>
    
    <item>
      <title>Custom ListView</title>
      <link>https://www.wikiod.com/xamarin-android/custom-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xamarin-android/custom-listview/</guid>
      <description>Custom Listview comprises of rows that are designed as per the users needs. # For the layout above your customrow.axml file is as shown below
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;fill_parent&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:padding=&amp;quot;8dp&amp;quot;&amp;gt; &amp;lt;ImageView android:id=&amp;quot;@+id/Image&amp;quot; android:layout_width=&amp;quot;80dp&amp;quot; android:layout_height=&amp;quot;80dp&amp;quot; android:layout_alignParentLeft=&amp;quot;true&amp;quot; android:layout_marginRight=&amp;quot;8dp&amp;quot; android:src=&amp;quot;@drawable/icon&amp;quot; /&amp;gt; &amp;lt;TextView android:id=&amp;quot;@+id/Text1&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:layout_alignTop=&amp;quot;@id/Image&amp;quot; android:layout_toRightOf=&amp;quot;@id/Image&amp;quot; android:layout_marginTop=&amp;quot;5dip&amp;quot; android:text=&amp;quot;This is Line1&amp;quot; android:textSize=&amp;quot;20dip&amp;quot; android:textStyle=&amp;quot;bold&amp;quot; /&amp;gt; &amp;lt;TextView android:id=&amp;quot;@+id/Text2&amp;quot; android:layout_width=&amp;quot;fill_parent&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:layout_below=&amp;quot;@id/Text1&amp;quot; android:layout_marginTop=&amp;quot;1dip&amp;quot; android:text=&amp;quot;This is line2&amp;quot; android:textSize=&amp;quot;15dip&amp;quot; android:layout_toRightOf=&amp;quot;@id/Image&amp;quot; /&amp;gt; &amp;lt;/RelativeLayout&amp;gt; Then you can design your main.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dapper.NET Tutorial on </title>
    <link>https://www.wikiod.com/docs/dapper/</link>
    <description>Recent content in Dapper.NET Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dapper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Dapper.NET</title>
      <link>https://www.wikiod.com/dapper/getting-started-with-dappernet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/getting-started-with-dappernet/</guid>
      <description>Install Dapper from Nuget # Either search in the Visual Studio GUI:
Tools &amp;gt; NuGet Package Manager &amp;gt; Manage Packages for Solution&amp;hellip; (Visual Studio 2015)
Or run this command in a Nuget Power Shell instance to install the latest stable version
Install-Package Dapper Or for a specific version
Install-Package Dapper -Version 1.42.0 Using Dapper in C# # using System.Data; using System.Linq; using Dapper; class Program { static void Main() { using (IDbConnection db = new SqlConnection(&amp;quot;Server=myServer;Trusted_Connection=true&amp;quot;)) { db.</description>
    </item>
    
    <item>
      <title>Dynamic Parameters</title>
      <link>https://www.wikiod.com/dapper/dynamic-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/dynamic-parameters/</guid>
      <description>Basic Usage # It isn&amp;rsquo;t always possible to neatly package all the parameters up in a single object / call. To help with more complicated scenarios, dapper allows the param parameter to be an IDynamicParameters instance. If you do this, your custom AddParameters method is called at the appropriate time and handed the command to append to. In most cases, however, it is sufficient to use the pre-existing DynamicParameters type:</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>https://www.wikiod.com/dapper/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/transactions/</guid>
      <description>Syntax # conn.Execute(sql, transaction: tran); // specify the parameter by name conn.Execute(sql, parameters, tran); conn.Query(sql, transaction: tran); conn.Query(sql, parameters, tran); await conn.ExecuteAsync(sql, transaction: tran); // Async await conn.ExecuteAsync(sql, parameters, tran); await conn.QueryAsync(sql, transaction: tran); await conn.QueryAsync(sql, parameters, tran); Speed up inserts # Wrapping a group of inserts in a transaction will speed them up according to this StackOverflow Question/Answer.
You can use this technique, or you can use Bulk Copy to speed up a series of related operations to perform.</description>
    </item>
    
    <item>
      <title>Basic Querying</title>
      <link>https://www.wikiod.com/dapper/basic-querying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/basic-querying/</guid>
      <description>Syntax # public static IEnumerable&amp;lt;T&amp;gt; Query&amp;lt;T&amp;gt;(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true) public static IEnumerable&amp;lt;dynamic&amp;gt; Query (this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true) Parameters # Parameter Details cnn Your database connection, which must already be open. sql Command to execute. param Object to extract parameters from. transaction Transaction which this query is a part of, if any.</description>
    </item>
    
    <item>
      <title>Parameter Syntax Reference</title>
      <link>https://www.wikiod.com/dapper/parameter-syntax-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/parameter-syntax-reference/</guid>
      <description>Parameters # Parameter Details this cnn The underlying database connection - the this denotes an extension method; the connection does not need to be open - if it is not open, it is opened and closed automatically. &amp;lt;T&amp;gt; / Type (optional) The type of object to return; if the non-generic / non-Type API is used, a dynamic object is returned per row, simulating a property named per column name returned from the query (this dynamic object also implements IDicionary&amp;lt;string,object&amp;gt;).</description>
    </item>
    
    <item>
      <title>Multiple Results</title>
      <link>https://www.wikiod.com/dapper/multiple-results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/multiple-results/</guid>
      <description>Syntax # public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null) public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, CommandDefinition command) Parameters # Parameter Details cnn Your database connection, must already be open sql The sql string to process, contains multiple queries param Object to extract parameters from SqlMapper.GridReader Provides interfaces for reading multiple result sets from a Dapper query Base Multiple Results Example # To fetch multiple grids in a single query, the QueryMultiple method is used.</description>
    </item>
    
    <item>
      <title>Multimapping</title>
      <link>https://www.wikiod.com/dapper/multimapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/multimapping/</guid>
      <description>Syntax # public static IEnumerable&amp;lt;TReturn&amp;gt; Query&amp;lt;TFirst, TSecond, TReturn&amp;gt;( this IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TReturn&amp;gt; map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int? commandTimeout = null, CommandType? commandType = null) public static IEnumerable&amp;lt;TReturn&amp;gt; Query&amp;lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&amp;gt;(this IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&amp;gt; map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int?</description>
    </item>
    
    <item>
      <title>Type Handlers</title>
      <link>https://www.wikiod.com/dapper/type-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/type-handlers/</guid>
      <description>Type Handlers allow database types to be converted to .Net custom types.
Installing a TypeHandler # The above type handler can be installed into SqlMapper using the AddTypeHandler method.
SqlMapper.AddTypeHandler&amp;lt;IHtmlString&amp;gt;(new IHtmlStringTypeHandler()); Type inference allows you to omit the generic type parameter:
SqlMapper.AddTypeHandler(new IHtmlStringTypeHandler()); There&amp;rsquo;s also a two-argument overload which takes an explicit Type argument:
SqlMapper.AddTypeHandler(typeof(IHtmlString), new IHtmlStringTypeHandler()); Converting varchar to IHtmlString # public class IHtmlStringTypeHandler : SqlMapper.TypeHandler&amp;lt;IHtmlString&amp;gt; { public override void SetValue( IDbDataParameter parameter, IHtmlString value) { parameter.</description>
    </item>
    
    <item>
      <title>Executing Commands</title>
      <link>https://www.wikiod.com/dapper/executing-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/executing-commands/</guid>
      <description>Stored Procedures # Simple usage # Dapper fully supports stored procs:
var user = conn.Query&amp;lt;User&amp;gt;(&amp;quot;spGetUser&amp;quot;, new { Id = 1 }, commandType: CommandType.StoredProcedure) .SingleOrDefault(); Input, Output and Return parameters # If you want something more fancy, you can do:
var p = new DynamicParameters(); p.Add(&amp;quot;@a&amp;quot;, 11); p.Add(&amp;quot;@b&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.Output); p.Add(&amp;quot;@c&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.ReturnValue); conn.Execute(&amp;quot;spMagicProc&amp;quot;, p, commandType: CommandType.StoredProcedure); var b = p.Get&amp;lt;int&amp;gt;(&amp;quot;@b&amp;quot;); var c = p.Get&amp;lt;int&amp;gt;(&amp;quot;@c&amp;quot;); Table Valued Parameters # If you have a stored procedure that accepts a Table Valued Parameter, you need to pass a DataTable which has the same structure as the table type in SQL Server has.</description>
    </item>
    
    <item>
      <title>Temp Tables</title>
      <link>https://www.wikiod.com/dapper/temp-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dapper/temp-tables/</guid>
      <description>Temp Table that exists while the connection remains open # When the temp table is created by itself, it will remain while the connection is open.
// Widget has WidgetId, Name, and Quantity properties public async Task PurchaseWidgets(IEnumerable&amp;lt;Widget&amp;gt; widgets) { using(var conn = new SqlConnection(&amp;quot;{connection string}&amp;quot;)) { await conn.OpenAsync(); await conn.ExecuteAsync(&amp;quot;CREATE TABLE #tmpWidget(WidgetId int, Quantity int)&amp;quot;); // populate the temp table using(var bulkCopy = new SqlBulkCopy(conn)) { bulkCopy.BulkCopyTimeout = SqlTimeoutSeconds; bulkCopy.</description>
    </item>
    
  </channel>
</rss>

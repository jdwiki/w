<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/python/</link>
    <description>Recent content in Python Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Python Language</title>
      <link>https://www.wikiod.com/python/getting-started-with-python-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/getting-started-with-python-language/</guid>
      <description>Getting Started # Python is a widely used high-level programming language for general-purpose programming, created by Guido van Rossum and first released in 1991. Python features a dynamic type system and automatic memory management and supports multiple programming paradigms, including object-oriented, imperative, functional programming, and procedural styles. It has a large and comprehensive standard library.
Two major versions of Python are currently in active use:
Python 3.x is the current version and is under active development.</description>
    </item>
    
    <item>
      <title>Incompatibilities moving from Python 2 to Python 3</title>
      <link>https://www.wikiod.com/python/incompatibilities-moving-from-python-2-to-python-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/incompatibilities-moving-from-python-2-to-python-3/</guid>
      <description>Unlike most languages, Python supports two major versions. Since 2008 when Python 3 was released, many have made the transition, while many have not. In order to understand both, this section covers the important differences between Python 2 and Python 3.
There are currently two supported versions of Python: 2.7 (Python 2) and 3.6 (Python 3). Additionally versions 3.3 and 3.4 receive security updates in source format.
Python 2.7 is backwards-compatible with most earlier versions of Python, and can run Python code from most 1.</description>
    </item>
    
    <item>
      <title>Generators</title>
      <link>https://www.wikiod.com/python/generators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/generators/</guid>
      <description>Generators are lazy iterators created by generator functions (using yield) or generator expressions (using (an_expression for x in an_iterator)).
Syntax # yield &amp;lt;expr&amp;gt; yield from &amp;lt;expr&amp;gt; &amp;lt;var&amp;gt; = yield &amp;lt;expr&amp;gt; next(&amp;lt;iter&amp;gt;) Introduction # Generator expressions are similar to list, dictionary and set comprehensions, but are enclosed with parentheses. The parentheses do not have to be present when they are used as the sole argument for a function call.
expression = (x**2 for x in range(10)) This example generates the 10 first perfect squares, including 0 (in which x = 0).</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://www.wikiod.com/python/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/classes/</guid>
      <description>Python offers itself not only as a popular scripting language, but also supports the object-oriented programming paradigm. Classes describe data and provide methods to manipulate that data, all encompassed under a single object. Furthermore, classes allow for abstraction by separating concrete implementation details from abstract representations of data.
Code utilizing classes is generally easier to read, understand, and maintain.
Introduction to classes # A class, functions as a template that defines the basic characteristics of a particular object.</description>
    </item>
    
    <item>
      <title>Common Pitfalls</title>
      <link>https://www.wikiod.com/python/common-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/common-pitfalls/</guid>
      <description>Python is a language meant to be clear and readable without any ambiguities and unexpected behaviors. Unfortunately, these goals are not achievable in all cases, and that is why Python does have a few corner cases where it might do something different than what you were expecting.
This section will show you some issues that you might encounter when writing Python code.
List multiplication and common references # Consider the case of creating a nested list structure by multiplying:</description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>https://www.wikiod.com/python/string-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/string-formatting/</guid>
      <description>When storing and transforming data for humans to see, string formatting can become very important. Python offers a wide variety of string formatting methods which are outlined in this topic.
Syntax # &amp;ldquo;{}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0:.2f}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{0:.0f}&amp;quot;.format(42.1234) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer:.2f}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{[key]}&amp;quot;.format({&amp;lsquo;key&amp;rsquo;: &amp;lsquo;value&amp;rsquo;}) ==&amp;gt; &amp;ldquo;value&amp;rdquo;
&amp;ldquo;{1}&amp;quot;.format([&amp;lsquo;zero&amp;rsquo;, &amp;lsquo;one&amp;rsquo;, &amp;rsquo;two&amp;rsquo;]) ==&amp;gt; &amp;ldquo;one&amp;rdquo;
&amp;ldquo;{answer} = {answer}&amp;quot;.format(answer=42) ==&amp;gt; &amp;ldquo;42 = 42&amp;rdquo;
&amp;rsquo; &amp;lsquo;.join([&amp;lsquo;stack&amp;rsquo;, &amp;lsquo;overflow&amp;rsquo;]) ==&amp;gt; &amp;ldquo;stack overflow&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Decorators</title>
      <link>https://www.wikiod.com/python/decorators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/decorators/</guid>
      <description>Decorator functions are software design patterns. They dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the decorated function. When used correctly, decorators can become powerful tools in the development process. This topic covers implementation and applications of decorator functions in Python.
Syntax # def decorator_function(f): pass # defines a decorator named decorator_function
@decorator_function
def decorated_function(): pass # the function is now wrapped (decorated by) decorator_function</description>
    </item>
    
    <item>
      <title>List Comprehensions</title>
      <link>https://www.wikiod.com/python/list-comprehensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/list-comprehensions/</guid>
      <description>A list comprehension is a syntactical tool for creating lists in a natural and concise way, as illustrated in the following code to make a list of squares of the numbers 1 to 10:
[i ** 2 for i in range(1,11)]
The dummy i from an existing list range is used to make a new element pattern. It is used where a for loop would be necessary in less expressive languages.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/python/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/functions/</guid>
      <description>Functions in Python provide organized, reusable and modular code to perform a set of specific actions. Functions simplify the coding process, prevent redundant logic, and make the code easier to follow. This topic describes the declaration and utilization of functions in Python.
Python has many built-in functions like print(), input(), len(). Besides built-ins you can also create your own functions to do more specific jobsâ€”these are called user-defined functions.
Syntax # def function_name(arg1, &amp;hellip; argN, *args, kw1, kw2=default, &amp;hellip;, **kwargs): statements lambda arg1, &amp;hellip; argN, *args, kw1, kw2=default, &amp;hellip;, **kwargs: expression Parameters # Parameter Details arg1, &amp;hellip;, argN Regular arguments *args Unnamed positional arguments kw1, &amp;hellip;, kwN Keyword-only arguments **kwargs The rest of keyword arguments 5 basic things you can do with functions:</description>
    </item>
    
    <item>
      <title>List destructuring (aka packing and unpacking)</title>
      <link>https://www.wikiod.com/python/list-destructuring-aka-packing-and-unpacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/python/list-destructuring-aka-packing-and-unpacking/</guid>
      <description>Destructuring assignment # In assignments, you can split an Iterable into values using the &amp;ldquo;unpacking&amp;rdquo; syntax:
Destructuring as values # a, b = (1, 2) print(a) # Prints: 1 print(b) # Prints: 2 If you try to unpack more than the length of the iterable, you&amp;rsquo;ll get an error:
a, b, c = [1] # Raises: ValueError: not enough values to unpack (expected 3, got 1) Destructuring as a list # You can unpack a list of unknown length using the following syntax:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sympy Tutorial on </title>
    <link>https://www.wikiod.com/docs/sympy/</link>
    <description>Recent content in sympy Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sympy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sympy</title>
      <link>https://www.wikiod.com/sympy/getting-started-with-sympy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sympy/getting-started-with-sympy/</guid>
      <description>Installing SymPy # The easiest and recommended way to install SymPy is to install Anaconda.
If you already have Anaconda or Miniconda installed, you can install the latest version with conda:
conda install sympy Another way of installing SymPy is using pip:
pip install sympy Note that this might require root privileges, so one might acually need
sudo pip install sympy Most linux distributions also offer SymPy in their package repositories.</description>
    </item>
    
    <item>
      <title>Differential Calculus</title>
      <link>https://www.wikiod.com/sympy/differential-calculus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sympy/differential-calculus/</guid>
      <description>Constrained Non-Linear Optimization # Problem statement:
Find the minimum (over x, y) of the function f(x,y), subject to g(x,y)=0, where f(x,y) = 2 * x**2 + 3 * y**2 and g(x,y) = x**2 + y**2 - 4.
Solution: We will solve this problem by performing the following steps:
Specify the Lagrangian function for the problem Determine the Karush-Kuhn-Tucker (KKT) conditions Find the (x,y) tuples that satisfy the KKT conditions Determine which of these (x,y) tuples correspond to the minimum of f(x,y) First, define the optimization variables as well as objective and constraint functions:</description>
    </item>
    
    <item>
      <title>Equations</title>
      <link>https://www.wikiod.com/sympy/equations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sympy/equations/</guid>
      <description>Solve system of linear equations # import sympy as sy x1, x2 = sy.symbols(&amp;quot;x1 x2&amp;quot;) equations = [ sy.Eq( 2*x1 + 1*x2 , 10 ), sy.Eq( 1*x1 - 2*x2 , 11 ) ] print sy.solve(equations) # Result: {x1: 31/5, x2: -12/5} Solve a single equation # import sympy as sy # Symbols have to be defined before one can use them x = sy.S(&#39;x&#39;) # Definition of the equation to be solved eq=sy.</description>
    </item>
    
    <item>
      <title>Solvers</title>
      <link>https://www.wikiod.com/sympy/solvers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sympy/solvers/</guid>
      <description>As of version 1.0 of Sympy perhaps the main thing to understand about using its solvers is that &amp;lsquo;solveset will take over solve either internally or externally&amp;rsquo;. At this point solveset should already be used for solving univariate equations and systems of linear equations.
Solving a univariate inequality # &amp;gt;&amp;gt;&amp;gt; from sympy.solvers.inequalities import solve_univariate_inequality &amp;gt;&amp;gt;&amp;gt; from sympy import var &amp;gt;&amp;gt;&amp;gt; x=var(&#39;x&#39;) &amp;gt;&amp;gt;&amp;gt; solve_univariate_inequality(2*x**2-6&amp;gt;1,x,relational=False) (-oo, -sqrt(14)/2) U (sqrt(14)/2, oo) The relational=False parameter simply indicates how the results are to be rendered.</description>
    </item>
    
  </channel>
</rss>

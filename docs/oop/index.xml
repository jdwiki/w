<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oop Tutorial on </title>
    <link>https://www.wikiod.com/docs/oop/</link>
    <description>Recent content in oop Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with oop</title>
      <link>https://www.wikiod.com/oop/getting-started-with-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/getting-started-with-oop/</guid>
      <description>OOP Introduction # Intoduction # Object Oriented Programming (mostly referred as OOP) is a programming paradigm for solving problems.
The beauty an OO (object oriented) program, is that we think about the program as a bunch of objects communicating with each other, instead of as a sequential script following specific orders.
There are lots of programming languages which support OOP, some of the popular are:
Java C++ c# Python is also known to support OOP but it lacks a few properties.</description>
    </item>
    
    <item>
      <title>Encapsulation</title>
      <link>https://www.wikiod.com/oop/encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/encapsulation/</guid>
      <description>Information hiding # The state of an object at a given time is represented by the information that it holds at that point. In an OO language, the state is implemented as member variables.
In a properly designed object, the state can be changed only by means of calls to its methods and not by direct manipulation of its member variables. This is achieved by providing public methods that operate on the values of private member variables.</description>
    </item>
    
    <item>
      <title>Diamond problem</title>
      <link>https://www.wikiod.com/oop/diamond-problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/diamond-problem/</guid>
      <description>Diamond Problem - Example # Diamond problem is a common problem occurred in Object Oriented Programming, while using multiple-inheritance.
Consider the case where class C, is inherited from class A and class B. Suppose that both class A and class B have a method called foo().
Then when we are calling the method foo(), compiler cannot identify the exact method we are trying to use
foo() from class A foo() from class B This is called the diamond problem basically.</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.wikiod.com/oop/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/inheritance/</guid>
      <description>Note: Multi-level inheritance is allowed in Java but not multiple inheritance. Find out more at http://beginnersbook.com/2013/04/oops-concepts/
Inheritance - Definition # Inheritance is one of the main concepts in Object Oriented Programming (OOP). Using inheritance, we can model a problem properly and we can reduce the number of lines we have to write. Let&amp;rsquo;s see inheritance using a popular example.
Consider you have to model animal kingdom (Simplified animal kingdom, of course.</description>
    </item>
    
    <item>
      <title>Polymorphism</title>
      <link>https://www.wikiod.com/oop/polymorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/polymorphism/</guid>
      <description>Method Overriding # Method overriding is the way of using polymorphism between classes. if one class is inherited from another, the former (sub class) can override the latter&amp;rsquo;s (super class&amp;rsquo;s) methods, and change the implementation.
this is used where the super class defines the more general implementation of the method while the sub class uses a more specific one.
Consider following example:
We have a class for Mammals:
class Mammal { void whoIam () { System.</description>
    </item>
    
    <item>
      <title>Abstraction</title>
      <link>https://www.wikiod.com/oop/abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/abstraction/</guid>
      <description>Access Modifiers # Access modifiers are used to control the access to an object or to a function/method. This is a main part of the concept of Abstraction.
Different programming languages use different access modifiers. Here are some examples:
Java
Java has 4 access modifiers.
private - These attributes can be accessed only inside the class. protected - These attributes can be accessed by sub classes and classes from the same package.</description>
    </item>
    
    <item>
      <title>Object</title>
      <link>https://www.wikiod.com/oop/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/object/</guid>
      <description>Introduction # Object is the base module in the Object Oriented Programming (OOP). An Object can be a variable, data structure (like an array, map, etc), or even a function or method. In OOP, we model real world objects like animals, vehicles, etc.
An object can be defined in a class, which can be defined as the blueprint of the object. Then we can create instances of that class, which we call objects.</description>
    </item>
    
    <item>
      <title>Class</title>
      <link>https://www.wikiod.com/oop/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/oop/class/</guid>
      <description>Introduction # Class is the piece of code where we define the attributes and/or behaviors of an object. You can define variables, constants, methods and constructors to the object, inside the class. In another words, class is the blueprint of an object.
Let&amp;rsquo;s see a sample class in Java, which defines a (simple) Car:
public class Car { private Engine engine; private Body body; private Tire [] tire; private Interior interior; // Constructor public Car (Engine engine, Body body, Tire[] tires, Interior interior) { } // Another constructor public Car () { } public void drive(Direction d) { // Method to drive } public void start(Key key) { // Start } } This is just for an example.</description>
    </item>
    
  </channel>
</rss>

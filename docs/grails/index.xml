<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grails Tutorial on </title>
    <link>https://www.wikiod.com/docs/grails/</link>
    <description>Recent content in grails Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/grails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with grails</title>
      <link>https://www.wikiod.com/grails/getting-started-with-grails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/grails/getting-started-with-grails/</guid>
      <description>Creating an application # To create a Grails application, use the grails create-app command. The following command creates a Grails application, named myapp in the current directory:
grails create-app fancy-app Running it, is as simple as visiting the, newly created, application directory:
cd fancy-app and then
grails run-app // in order to run the app on a different port, e.g. 8888, use this instead grails run-app -port 8888 // in order to run the app with a secure communication grails run-app -https Grails Installation # Note: GRAILS requires a Java JDK installed (a runtime environment JRE is not sufficient) on your system, before setting up Grails.</description>
    </item>
    
    <item>
      <title>Domain classes as REST resources</title>
      <link>https://www.wikiod.com/grails/domain-classes-as-rest-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/grails/domain-classes-as-rest-resources/</guid>
      <description>The easiest way to create a RESTful API in Grails is to expose a domain class as a REST resource. This can be done by adding the grails.rest.Resource transformation to any domain class.
Simple REST API with grails # import grails.rest.* @Resource(uri=&#39;/books&#39;) class Book { String title static constraints = { title blank:false } } Simply by adding the Resource transformation and specifying a URI, your domain class will automatically be available as a REST resource in either XML or JSON formats.</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://www.wikiod.com/grails/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/grails/deployment/</guid>
      <description>Executable Jar # One of the easiest ways to deploy Grails 3.x is to build an executable jar file that embeds a servlet container (Tomcat, Undertow, etc) with the application.
Modify build.gradle:
// Remove or comment out the war plugin: // apply plugin:&amp;quot;war&amp;quot; // Enable the executable jar: springBoot { executable = true } // Optional: Customize the jar properties: // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html jar { archiveName(&#39;myapp.jar&#39;) } Build using ./gradlew assemble</description>
    </item>
    
    <item>
      <title>GSP</title>
      <link>https://www.wikiod.com/grails/gsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/grails/gsp/</guid>
      <description>Parameters # Variables and scopes Details application ServletContext instance applicationContext Spring ApplicationContext instance flash The flash object grailsApplication GrailsApplication instance out response writer for writing to the output stream params params object for retrieving request parameters request HttpServletRequest instance response HttpServletResponse instance session HttpSession instance webRequest GrailsWebRequest instance Expressions # In GSP the &amp;lt;%= %&amp;gt; syntax is rarely used due to the support for GSP expressions.
A GSP expression is similar to a JSP EL expression or a Groovy GString and takes the form ${expr}:</description>
    </item>
    
  </channel>
</rss>

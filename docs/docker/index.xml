<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Tutorial on </title>
    <link>https://www.wikiod.com/docs/docker/</link>
    <description>Recent content in Docker Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Docker</title>
      <link>https://www.wikiod.com/docker/getting-started-with-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/getting-started-with-docker/</guid>
      <description>Installing Docker on Windows # Requirements: 64-bit version of Windows 7 or higher on a machine which supports Hardware Virtualization Technology, and it is enabled.
While the docker binary can run natively on Windows, to build and host containers you need to run a Linux virtual machine on the box.
Since version 1.12 you don&amp;rsquo;t need to have a separate VM to be installed, as Docker can use the native Hyper-V functionality of Windows to start up a small Linux machine to act as backend.</description>
    </item>
    
    <item>
      <title>Docker Engine API</title>
      <link>https://www.wikiod.com/docker/docker-engine-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/docker-engine-api/</guid>
      <description>An API that allows you to control every aspect of Docker from within your own applications, build tools to manage and monitor applications running on Docker, and even use it to build apps on Docker itself.
Enable Remote access to Docker API on Linux running systemd # Linux running systemd, like Ubuntu 16.04, adding -H tcp://0.0.0.0:2375 to /etc/default/docker does not have the effect it used to.
Instead, create a file called /etc/systemd/system/docker-tcp.</description>
    </item>
    
    <item>
      <title>Running containers</title>
      <link>https://www.wikiod.com/docker/running-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/running-containers/</guid>
      <description>Syntax # docker run [OPTIONS] IMAGE [COMMAND] [ARG&amp;hellip;] Automatically delete a container after running it # Normally, a Docker container persists after it has exited. This allows you to run the container again, inspect its filesystem, and so on. However, sometimes you want to run a container and delete it immediately after it exits. For example to execute a command or show a file from the filesystem. Docker provides the --rm command line option for this purpose:</description>
    </item>
    
    <item>
      <title>Debugging a container</title>
      <link>https://www.wikiod.com/docker/debugging-a-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/debugging-a-container/</guid>
      <description>Syntax # docker stats [OPTIONS] [CONTAINER&amp;hellip;] docker logs [OPTIONS] CONTAINER docker top [OPTIONS] CONTAINER [ps OPTIONS] Printing the logs # Following the logs is the less intrusive way to debug a live running application. This example reproduces the behavior of the traditional tail -f some-application.log on container 7786807d8084.
docker logs --follow --tail 10 7786807d8084 This command basically shows the standard output of the container process (the process with pid 1).</description>
    </item>
    
    <item>
      <title>Docker swarm mode</title>
      <link>https://www.wikiod.com/docker/docker-swarm-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/docker-swarm-mode/</guid>
      <description>A swarm is a number of Docker Engines (or nodes) that deploy services collectively. Swarm is used to distribute processing across many physical, virtual or cloud machines.
Syntax # Initialize a swarm: docker swarm init [OPTIONS]
Join a swarm as a node and/or manager: docker swarm join [OPTIONS] HOST:PORT
Create a new service: docker service create [OPTIONS] IMAGE [COMMAND] [ARG&amp;hellip;]
Display detailed information on one or more services: docker service inspect [OPTIONS] SERVICE [SERVICE&amp;hellip;]</description>
    </item>
    
    <item>
      <title>Dockerfiles</title>
      <link>https://www.wikiod.com/docker/dockerfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/dockerfiles/</guid>
      <description>Dockerfiles are files used to programatically build Docker images. They allow you to quickly and reproducibly create a Docker image, and so are useful for collaborating. Dockerfiles contain instructions for building a Docker image. Each instruction is written on one row, and is given in the form &amp;lt;INSTRUCTION&amp;gt;&amp;lt;argument(s)&amp;gt;. Dockerfiles are used to build Docker images using the docker build command.
Dockerfiles are of the form:
# This is a comment INSTRUCTION arguments Comments starts with a # Instructions are upper case only The first instruction of a Dockerfile must be FROM to specify the base image When building a Dockerfile, the Docker client will send a &amp;ldquo;build context&amp;rdquo; to the Docker daemon.</description>
    </item>
    
    <item>
      <title>Managing containers</title>
      <link>https://www.wikiod.com/docker/managing-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/managing-containers/</guid>
      <description>Syntax # docker rm [OPTIONS] CONTAINER [CONTAINER&amp;hellip;] docker attach [OPTIONS] CONTAINER docker exec [OPTIONS] CONTAINER COMMAND [ARG&amp;hellip;] docker ps [OPTIONS] docker logs [OPTIONS] CONTAINER docker inspect [OPTIONS] CONTAINER|IMAGE [CONTAINER|IMAGE&amp;hellip;] In the examples above, whenever container is a parameter of the docker command, it is mentioned as &amp;lt;container&amp;gt; or container id or &amp;lt;CONTAINER_NAME&amp;gt;. In all these places you can either pass a container name or container id to specify a container. Listing containers # $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2bc9b1988080 redis &amp;quot;docker-entrypoint.</description>
    </item>
    
    <item>
      <title>Checkpoint and Restore Containers</title>
      <link>https://www.wikiod.com/docker/checkpoint-and-restore-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/checkpoint-and-restore-containers/</guid>
      <description>Compile docker with checkpoint and restore enabled (ubuntu) # In order to compile docker its recommended you have at least 2 GB RAM. Even with that it fails sometimes so its better to go for 4GB instead.
make sure git and make is installed
sudo apt-get install make git-core -y install a new kernel (at least 4.2)
sudo apt-get install linux-generic-lts-xenial reboot machine to have the new kernel active
sudo reboot compile criu which is needed in order to run docker checkpoint</description>
    </item>
    
    <item>
      <title>Data Volumes and Data Containers</title>
      <link>https://www.wikiod.com/docker/data-volumes-and-data-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/data-volumes-and-data-containers/</guid>
      <description>Data-Only Containers # Data-only containers are obsolete and are now considered an anti-pattern!
In the days of yore, before Docker&amp;rsquo;s volume subcommand, and before it was possible to create named volumes, Docker deleted volumes when there were no more references to them in any containers. Data-only containers are obsolete because Docker now provides the ability to create named volumes, as well as much more utility via the various docker volume subcommand.</description>
    </item>
    
    <item>
      <title>Building images</title>
      <link>https://www.wikiod.com/docker/building-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/docker/building-images/</guid>
      <description>Parameters # Parameter Details &amp;ndash;pull Ensures that the base image (FROM) is up-to-date before building the rest of the Dockerfile. Building an image from a Dockerfile # Once you have a Dockerfile, you can build an image from it using docker build. The basic form of this command is:
docker build -t image-name path If your Dockerfile isn&amp;rsquo;t named Dockerfile, you can use the -f flag to give the name of the Dockerfile to build.</description>
    </item>
    
  </channel>
</rss>

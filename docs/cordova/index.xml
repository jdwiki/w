<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cordova Tutorial on </title>
    <link>https://www.wikiod.com/docs/cordova/</link>
    <description>Recent content in Cordova Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/cordova/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firebase Push Notification Cordova</title>
      <link>https://www.wikiod.com/cordova/firebase-push-notification-cordova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/firebase-push-notification-cordova/</guid>
      <description>Firebase Push Notification in Cordova Android # Add Firebase to Your Android Project
Add Firebase to your app
To add Firebase to your app you&amp;rsquo;ll need a Firebase project and a Firebase configuration file for your app.
Create a Firebase project in the Firebase console, if you don&amp;rsquo;t already have one. If you already have an existing Google project associated with your mobile app, click Import Google Project. Otherwise, click Create New Project.</description>
    </item>
    
    <item>
      <title>Cordova Crop Image Plugin</title>
      <link>https://www.wikiod.com/cordova/cordova-crop-image-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/cordova-crop-image-plugin/</guid>
      <description>Crop Image after clicking using camera or selecting image. # It crops the images in square shape.
This cordova project uses two plugins:
Cordova Camera Plugin &amp;ndash; https://github.com/apache/cordova-plugin-camera
Cordova Crop Image Plugin &amp;ndash; https://github.com/jeduan/cordova-plugin-crop
The Camera plugin is combined with the Crop Image Plugin by putting the Cop Image Plugin Code within the success callback of Camera Plugin Code.
/*Camera Plugin Code*/ navigator.camera.getPicture(onSuccess, onFail, { quality: 50, destinationType: Camera.DestinationType.FILE_URI }); function onSuccess(imageData) { console.</description>
    </item>
    
    <item>
      <title>How to detect the state of the network connection</title>
      <link>https://www.wikiod.com/cordova/how-to-detect-the-state-of-the-network-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/how-to-detect-the-state-of-the-network-connection/</guid>
      <description>Using the cordova-plugin-network-information plugin # Detecting the current state of the network connection and responding to any changes that might occur, can be done by using one of several plugins. This example is about the cordova-plugin-network-information plugin.
Add the plugin to the project:
cordova plugin add cordova-plugin-network-information After the Cordova deviceready event a connection object is available through navigator.connection. The type property contains the current network state:
document.addEventListener(&amp;quot;deviceready&amp;quot;, function() { var networkState = navigator.</description>
    </item>
    
    <item>
      <title>Sign Android build with Cordova 5</title>
      <link>https://www.wikiod.com/cordova/sign-android-build-with-cordova-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/sign-android-build-with-cordova-5/</guid>
      <description>Add the build configuration to sign the .apk file # Add a keystore using:
keytool -genkey -v -keystore example.keystore -alias example -keyalg RSA -keysize 2048 -validity 10000 Note: This should be at root of project. Though not a hard requirement, it eases the file referencing
Add a build.json with release/dev configuration for keystore, at the root of project:
{ &amp;quot;android&amp;quot;: { &amp;quot;debug&amp;quot;: { &amp;quot;keystore&amp;quot;: &amp;quot;..\android.keystore&amp;quot;, &amp;quot;storePassword&amp;quot;: &amp;quot;android&amp;quot;, &amp;quot;alias&amp;quot;: &amp;quot;mykey1&amp;quot;, &amp;quot;password&amp;quot; : &amp;quot;password&amp;quot;, &amp;quot;keystoreType&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;release&amp;quot;: { &amp;quot;keystore&amp;quot;: &amp;quot;.</description>
    </item>
    
    <item>
      <title>Creating Your First Application With Cordova</title>
      <link>https://www.wikiod.com/cordova/creating-your-first-application-with-cordova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/creating-your-first-application-with-cordova/</guid>
      <description>In case running cordova run android fails. Make sure that your Android device is connected to your computer and run adb devices to make sure the Android Development Tools (ADT) can detect your device.
Using the command-line tool # First you create a new Cordova project:
cordova create HelloWorld my.application.identifier AppName This will create a blank Cordova project
in the HelloWorld folder with identifier my.application.identifier (which should be unique for each application) with name AppName.</description>
    </item>
    
    <item>
      <title>Debugging the application</title>
      <link>https://www.wikiod.com/cordova/debugging-the-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/debugging-the-application/</guid>
      <description>Important thing to remember when debugging cordova apps, if you have an OnDeviceReady event and code that executes there, by the time the app launches, your debugger will still not be attached(unlike say Visual Studio C# debugging where application waits for the debug process to attach before continuing with launching the program).
This means that any initial set up console messages or breakpoints will not be captured.
Solution for this can be a delayed set up or delayed console logging with setTimeout when DeviceReady event is fired.</description>
    </item>
    
    <item>
      <title>How to customize platform specific www folder in cordova</title>
      <link>https://www.wikiod.com/cordova/how-to-customize-platform-specific-www-folder-in-cordova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/how-to-customize-platform-specific-www-folder-in-cordova/</guid>
      <description>create css/js specific to a platform (android/ios) # Let say you want to create css/js file specific to a platform. For that you have to create a merges folder in root folder of you cordova porject. In merges folder create directory for each platform (android/ios..). then in specific platform folder create a css/js folder and put your css/js file specific to platform folder. That&amp;rsquo;s it, once you run cordova build command, all js/css files corresponding to each platform would be placed in respected platform folder</description>
    </item>
    
    <item>
      <title>Push Notification in Android and iOS</title>
      <link>https://www.wikiod.com/cordova/push-notification-in-android-and-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/push-notification-in-android-and-ios/</guid>
      <description>Using the new phonegap-plugin-push # For the purpose of sending push notifications to cordova apps. The first step is to obtain a device token. A &amp;ldquo;device token&amp;rdquo; is specific to each device and each project.
Pre-requisite:
Google Cloud Messaging Project Number For this go to Google Developer Console and create a new project.
Under Project Information is the Project Number
Google Cloud Messaging API Key for above Project (needed for server) Go to Library -&amp;gt; Google Cloud Messaging -&amp;gt; Enable.</description>
    </item>
    
    <item>
      <title>Visual Studio Tools for Apache Cordova</title>
      <link>https://www.wikiod.com/cordova/visual-studio-tools-for-apache-cordova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/visual-studio-tools-for-apache-cordova/</guid>
      <description>Update Apache Cordova Tools in Visual Studio # In Visual Studio, choose Tools-&amp;gt;Extensions and Updates. In the Updates tab of the Extensions and Updates dialog box, choose Product Updates. If an update for Visual Studio Tools for Apache appears, select it, and then choose the Update button. Get Apache Cordova Tools in Visual Studio # Open Control Panel -&amp;gt; Programs and Features, choose the Visual Studio 2015 item, and then choose the Change button.</description>
    </item>
    
    <item>
      <title>Getting started with Cordova</title>
      <link>https://www.wikiod.com/cordova/getting-started-with-cordova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/cordova/getting-started-with-cordova/</guid>
      <description>Mobile App Development using Cordova
Apache Cordova is an open-source mobile development framework. It allows you to use standard web technologies - HTML5, CSS3, and JavaScript for cross-platform development.
Creating Android build (.apk) # Install cordova using the following command npm install -g cordova.
Use cordova -version to check the cordova version.
Set path variables ANDROID_HOME and JAVA_HOME.
Example:
export ANDROID_HOME = /home/geethu/android-sdk-linux
export PATH = $PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
export JAVA_HOME = /usr/lib/jvm/java-7-openjdk-amd64</description>
    </item>
    
  </channel>
</rss>

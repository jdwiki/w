<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adb Tutorial on </title>
    <link>https://www.wikiod.com/docs/adb/</link>
    <description>Recent content in adb Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/adb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with adb</title>
      <link>https://www.wikiod.com/adb/getting-started-with-adb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/getting-started-with-adb/</guid>
      <description>Introduction # adb is a command line tool for communicating with an emulator instance or connected device. It allows for installing and debugging apps, transferring files, as well as a variety of other interactions with the connected emulator or device. The ADB system consists of a client, which sends commands from the host computer, a daemon, which runs on the connected device and executes commands received from the client, and a server, which runs on the host computer and manages communications between the client and daemon.</description>
    </item>
    
    <item>
      <title>Starting an app in debug mode</title>
      <link>https://www.wikiod.com/adb/starting-an-app-in-debug-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/starting-an-app-in-debug-mode/</guid>
      <description>How to wait for debugger before starting the app? # Let&amp;rsquo;s say your launch activity is called MainActivity, in your app com.example.myapp. In the manifest:
&amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot; &amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot;/&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; Now let&amp;rsquo;s say you want to launch the app, so that it waits for the debugger to connect before the app really starts.
You can use adb shell to achieve that.
In our case, simply run:</description>
    </item>
    
    <item>
      <title>Showing Logs on ADB</title>
      <link>https://www.wikiod.com/adb/showing-logs-on-adb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/showing-logs-on-adb/</guid>
      <description>Displaying and filtering with Logcat # Displaying all the logs from the default buffer on the Command Line can be accomplished by:
adb logcat This command will show you all the logs from the device&amp;rsquo;s main buffer. Notice that if you use it for the first time, you&amp;rsquo;ll get a lot of information, an enormous stream of data. So you may want to clear the logs first&amp;hellip;
Cleaning the logs:</description>
    </item>
    
    <item>
      <title>Transferring files using push and pull</title>
      <link>https://www.wikiod.com/adb/transferring-files-using-push-and-pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/transferring-files-using-push-and-pull/</guid>
      <description>Syntax # adb push [-p] LOCAL REMOTE adb pull [-a] [-p] REMOTE [LOCAL] Parameters # Parameters Details LOCAL A file or directory that is located on the user&amp;rsquo;s computer REMOTE A file or directory that is located on the user&amp;rsquo;s Android device -a Also copy the file the remote file&amp;rsquo;s timestamp and file mode data -p Display transfer progress while the file or directory is copying If LOCAL is omitted in the adb pull command, the filename from REMOTE is used</description>
    </item>
    
    <item>
      <title>Collecting adb commands log</title>
      <link>https://www.wikiod.com/adb/collecting-adb-commands-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/collecting-adb-commands-log/</guid>
      <description>Make sure that your automation does not use adb kill-server command.
in Windows # Open a Command Prompt window and run the following commands:
adb kill-server set ADB_TRACE=sockets adb nodaemon server 2&amp;gt;&amp;amp;1 | for /f &amp;quot;usebackq tokens=7*&amp;quot; %a in (`findstr /c:&amp;quot;): &#39;&amp;quot;`) do @echo %a %b &amp;gt;&amp;gt; %USERPROFILE%\Desktop\adb_host_log.txt Now you can run your Android automation. When done run adb kill-server in another Command Prompt window. Now the adb_host_log.txt file on your Desktop contains the log of all commands all adb clients have sent to the adb host.</description>
    </item>
    
    <item>
      <title>Connecting to device</title>
      <link>https://www.wikiod.com/adb/connecting-to-device/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/adb/connecting-to-device/</guid>
      <description>Finding devices connected to your PC # Enable USB Debugging on your device and from command line type adb devices. If everything is OK, the response should be:
List of devices attached
1234567890 device
Where 1234567890 is the device&amp;rsquo;s id.
If multiple devices are connected, you should see all of them:
List of devices attached
1234567890 device
2222222222 device
&amp;hellip;
When connecting a device for the first time, you&amp;rsquo;ll get a pop-up window on your device, asking you to approve the connection.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OCaml Tutorial on </title>
    <link>https://www.wikiod.com/docs/ocaml/</link>
    <description>Recent content in OCaml Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ocaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with OCaml</title>
      <link>https://www.wikiod.com/ocaml/getting-started-with-ocaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/getting-started-with-ocaml/</guid>
      <description>Installation or Setup # Installing OPAM # OPAM is a package manager for OCaml. It builds and manages compiler versions and OCaml libraries for you easily.
The easiest way to install OPAM on your operating system is to use a package manager for your system. e.g apt-get, yum or homebrew.
Mac OSX Installation Instructions # Update homebrew formulae and install OPAM.
brew update brew install opam Ubuntu Installation Instructions # add-apt-repository ppa:avsm/ppa apt-get update apt-get install ocaml opam Compiling from source # wget http://caml.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>https://www.wikiod.com/ocaml/pattern-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/pattern-matching/</guid>
      <description>Factorial Function using Pattern Matching # let rec factorial n = match n with | 0 | 1 -&amp;gt; 1 | n -&amp;gt; n * (factorial (n - 1)) This function matches on both the values 0 and 1 and maps them to the base case of our recursive definition. Then all other numbers map to the recursive call of this function.
Evaluation of boolean expressions # We define the type of boolean expressions whose atoms are identified by strings as</description>
    </item>
    
    <item>
      <title>Write your first OCaml Script</title>
      <link>https://www.wikiod.com/ocaml/write-your-first-ocaml-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/write-your-first-ocaml-script/</guid>
      <description>Hello World # This example assumes you&amp;rsquo;ve installed OCaml.
Compiling OCaml Code # Create a new file named hello.ml, with the following contents:
print_string &amp;quot;Hello world!\n&amp;quot; ocamlc is the OCaml compiler. To compile and run this script, run
$ ocamlc -o hello hello.ml and then execute the resulting binary
$ ./hello Hello world! Executing OCaml Code # You can also run this script without compiling it into a binary. You can do so by using ocaml, the ocaml toplevel system that permits interactive use of OCaml.</description>
    </item>
    
    <item>
      <title>Ocamlbuild</title>
      <link>https://www.wikiod.com/ocaml/ocamlbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/ocamlbuild/</guid>
      <description>Basic example with no external dependency # If your project has no external dependency and has foo.ml as its main entry point, you can compile a bytecode version with
ocamlbuild foo.byte To get a native executable, run
ocamlbuild foo.native Project depending on external libraries # If your project depends on the external libraries, you should first install them with opam. Assuming your dependencies are foo and bar and the main entry point of your project is foobar.</description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://www.wikiod.com/ocaml/higher-order-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/higher-order-functions/</guid>
      <description>Syntax # val (|&amp;gt;) : &#39;a -&amp;gt; (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;b val (@@) : (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;a -&amp;gt; &#39;b Generic algorithms # Higher-order functions can be used to implement generic algorithms, giving up the responsibility of providing final details to the user. For instance List.sort expects a comparison function, which allows to implement various ways of sorting. Here we implement case-insensitive sorting of strings:
let string_case_insensitive_sort lst = let case_insensitive_compare a b = String.</description>
    </item>
    
    <item>
      <title>List Processing</title>
      <link>https://www.wikiod.com/ocaml/list-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/list-processing/</guid>
      <description>List.Map # List.map has the signature (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;a list -&amp;gt; &#39;b list which in English is a function that takes a function (we&amp;rsquo;ll call this the mapping function) from one type (namely &#39;a) to another type (namely &#39;b) and a list of the first type. The function returns a list of the second type where every element is the result of calling the mapping function on an element of the first list.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/ocaml/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/functions/</guid>
      <description>Anonymous functions # Since functions are ordinary values, there is a convenient syntax for creating functions without names:
List.map (fun x -&amp;gt; x * x) [1; 2; 3; 4] (* - : int list = [1; 4; 9; 16] *) This is handy, as we would otherwise have to name the function first (see [let][1]) to be able to use it:
let square x = x * x (* val square : int -&amp;gt; int = &amp;lt;fun&amp;gt; *) List.</description>
    </item>
    
    <item>
      <title>Pipes, Files, and Streams</title>
      <link>https://www.wikiod.com/ocaml/pipes-files-and-streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/pipes-files-and-streams/</guid>
      <description>Read from Standard Input and Print to Standard Output # We prepare a file called reverser.ml with the following contents:
let acc = ref [] in try while true do acc := read_line () :: !acc; done with End_of_file -&amp;gt; print_string (String.concat &amp;quot;\n&amp;quot; !acc) We then compile our program using the following command:
$ ocamlc -o reverser.byte reverser.ml We test it out by piping data to our new executable:
$ cat data.</description>
    </item>
    
    <item>
      <title>Common Pitfalls</title>
      <link>https://www.wikiod.com/ocaml/common-pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/common-pitfalls/</guid>
      <description>Using the wrong operator # In OCaml, there are different arithmetic operators for floats and integers. Additionally, these operators can only be used on 2 floats or 2 integers. Here are invalid expressions in OCaml
1.0 + 2.0 1 + 2.0 1 +. 2 1 +. 2.0 The correct expression for each of these respectively are
1. +. 2. float_of_int 1 +. 2. 1 + 2 float_of_int 1 +. 2. There is no automatic casting of integers to floats or vice-versa in OCaml.</description>
    </item>
    
    <item>
      <title>Mutable record fields</title>
      <link>https://www.wikiod.com/ocaml/mutable-record-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ocaml/mutable-record-fields/</guid>
      <description>Like most OCaml values, records are immutable by default. However, since OCaml also handles imperative programming, it provides a way to make individual fields mutable. Mutable fields can be modified in-place by assignment, rather than having to resort to usual functional techniques, such as functional update.
While introducing side-effects, mutable fields can result in an improved performance when used correctly.
Declaring a record with mutable fields # In the following, weight is declared as a mutable field.</description>
    </item>
    
  </channel>
</rss>

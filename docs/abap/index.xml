<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ABAP Tutorial on </title>
    <link>https://www.wikiod.com/docs/abap/</link>
    <description>Recent content in ABAP Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/abap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with ABAP</title>
      <link>https://www.wikiod.com/abap/getting-started-with-abap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/getting-started-with-abap/</guid>
      <description>Hello World # PROGRAM zhello_world. START-OF-SELECTION. WRITE &#39;Hello, World!&#39;. Instead of printing to the console, ABAP writes values to a list which will be displayed as soon as the main logic was executed.
Hello World in ABAP Objects # PROGRAM zhello_world. CLASS main DEFINITION FINAL CREATE PRIVATE. PUBLIC SECTION. CLASS-METHODS: start. ENDCLASS. CLASS main IMPLEMENTATION. METHOD start. cl_demo_output=&amp;gt;display( &#39;Hello World!&#39; ). ENDMETHOD. ENDCLASS. START-OF-SELECTION. main=&amp;gt;start( ). </description>
    </item>
    
    <item>
      <title>ABAP Objects</title>
      <link>https://www.wikiod.com/abap/abap-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/abap-objects/</guid>
      <description>Class declaration # ABAP Classes can be declared Globally or Locally. A global class can be used by any object within the ABAP repository. By contrast, a local class can only be used within the scope it is declared. # CLASS lcl_abap_class DEFINITION. PUBLIC SECTION. PROTECTED SECTION. PRIVATE SECTION. ENDCLASS. CLASS lcl_abap_class IMPLEMENTATION. ENDCLASS. Constructor, methods # Class implementation:
CLASS lcl_abap_class DEFINITION. PUBLIC SECTION. METHODS: constructor, method1. PROTECTED SECTION. PRIVATE SECTION.</description>
    </item>
    
    <item>
      <title>Internal Tables</title>
      <link>https://www.wikiod.com/abap/internal-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/internal-tables/</guid>
      <description>Types of Internal tables # DATA: &amp;lt;TABLE NAME&amp;gt; TYPE &amp;lt;SORTED|STANDARD|HASHED&amp;gt; TABLE OF &amp;lt;TYPE NAME&amp;gt; WITH &amp;lt;UNIQUE|NON-UNIQUE&amp;gt; KEY &amp;lt;FIELDS FOR KEY&amp;gt;. Standard Table
This table has all of the entries stored in a linear fashion and records are accessed in a linear way. For large table sizes, table access can be slow.
Sorted Table
Requires the addition WITH UNIQUE|NON-UNIQUE KEY. Searching is quick due to performing a binary search. Entries cannot be appended to this table as it might break the sort order, so they are always inserted using the INSERT keyword.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.wikiod.com/abap/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/strings/</guid>
      <description>String templates # String templates are a convenient way of mixing literal strings with values from variables:
WRITE |Hello, { lv_name }, nice to meet you!|. It can also format things like dates. To use the logged on user&amp;rsquo;s date format:
WRITE |The order was completed on { lv_date DATE = USER } and can not be changed|. Functional method calls and expressions are supported:
WRITE |Your token is { to_upper( lv_token ) }|.</description>
    </item>
    
    <item>
      <title>ABAP GRID List Viewer (ALV)</title>
      <link>https://www.wikiod.com/abap/abap-grid-list-viewer-alv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/abap-grid-list-viewer-alv/</guid>
      <description>Creating and Displaying an ALV # This example portrays the most simple ALV creation using the cl_salv_table class and no additional formatting options. Additional formatting options would be included after the TRY ENDTRY block and before the alv-&amp;gt;display( ) method call.
All subsequent examples using the ABAP Objects approach to ALV creation will use this example as a starting point.
DATA: t_spfli TYPE STANDARD TABLE OF spfli, alv TYPE REF TO cl_salv_table, error_message TYPE REF TO cx_salv_msg.</description>
    </item>
    
    <item>
      <title>Dynamic Programming</title>
      <link>https://www.wikiod.com/abap/dynamic-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/dynamic-programming/</guid>
      <description>Field-Symbols # Field-Symbols are ABAP&amp;rsquo;s equivalent to pointers, except that Field-Symbols are always dereferenced (it is not possible to change the actual address in memory).
Declaration
To declare a Field-Symbol the keyword FIELD-SYMBOLS must be used. Types can be generic (ANY [... TABLE]) to handle a wide variety of variables.
FIELD-SYMBOLS: &amp;lt;fs_line&amp;gt; TYPE any, &amp;quot;generic &amp;lt;fs_struct&amp;gt; TYPE kna1. &amp;quot;non-generic Assigning
Field-Symbols are unassigned on declaration, which means that they are pointing to nothing.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://www.wikiod.com/abap/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/loops/</guid>
      <description>When looping over internal tables, it is generally preferable to ASSIGN to a field symbol rather than loop INTO a work area. Assigning field symbols simply updates their reference to point to the next line of the internal table during each iteration, whereas using INTO results in the line of the table being copied into the work area, which can be expensive for long/wide tables.
Internal Table Loop # LOOP AT itab INTO wa.</description>
    </item>
    
    <item>
      <title>Data Declaration</title>
      <link>https://www.wikiod.com/abap/data-declaration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/data-declaration/</guid>
      <description>Inline Data Declaration # In certain situations, data declarations can be performed inline.
LOOP AT lt_sflight INTO DATA(ls_sflight). WRITE ls_sflight-carrid. ENDLOOP. Single Variable Declaration # DATA begda TYPE sy-datum. Multiple Variable Declaration # DATA: begda TYPE sy-datum, endda TYPE sy-datum. Inline Data Declaration in SELECT Statement # When using an inline data declaration inside of a SELECT...ENDSELECT block or SELECT SINGLE statement, the @ character must be used as an escape character for the DATA(lv_cityto) expression.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://www.wikiod.com/abap/regular-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/regular-expressions/</guid>
      <description>Evaluating Regular Expressions with a Predicate Function # The predicate function matches can be used to evaluate strings on the fly without use of any object declarations.
IF matches( val = &#39;Not a hex string&#39; regex = &#39;[0-9a-f]*&#39; ). cl_demo_output=&amp;gt;display( &#39;This will not display&#39; ). ELSEIF matches( val = &#39;6c6f7665&#39; regex = &#39;[0-9a-f]*&#39; ). cl_demo_output=&amp;gt;display( &#39;This will display&#39; ). ENDIF. Replacing # The REPLACE statement can work with regular expressions directly:</description>
    </item>
    
    <item>
      <title>Open SQL</title>
      <link>https://www.wikiod.com/abap/open-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/abap/open-sql/</guid>
      <description>SELECT statement # SELECT is an Open-SQL-statement for reading data from one or several database tables into data objects.
Selecting All Records
* This returns all records into internal table lt_mara. SELECT * FROM mara INTO lt_mara. Selecting Single Record
* This returns single record if table consists multiple records with same key. SELECT SINGLE * INTO TABLE lt_mara FROM mara WHERE matnr EQ &#39;400-500&#39;. Selecting Distinct Records
* This returns records with distinct values.</description>
    </item>
    
  </channel>
</rss>

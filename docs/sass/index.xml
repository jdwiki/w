<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sass Tutorial on </title>
    <link>https://www.wikiod.com/docs/sass/</link>
    <description>Recent content in sass Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sass</title>
      <link>https://www.wikiod.com/sass/getting-started-with-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/getting-started-with-sass/</guid>
      <description>Variables # If you have a value that you use often, you can store it in a variable. You could use this to define color schemes, for example. You would only have to define your scheme once and then you could use it throughout your stylesheets.
To define a variable, you must prefix its name with the $ symbol. (Like you would in PHP.)
You can store any valid CSS property value inside a variable.</description>
    </item>
    
    <item>
      <title>SCSS vs Sass</title>
      <link>https://www.wikiod.com/sass/scss-vs-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/scss-vs-sass/</guid>
      <description>Main Differences # Although people often say Sass as the name of this CSS-preprocessor, they often mean the SCSS-syntax. Sass uses the .sass file extension, while SCSS-Sass uses the .scss extension. They are both referred to as &amp;ldquo;Sass&amp;rdquo;.
Speaking generally, the SCSS-syntax is more commonly used. SCSS looks like regular CSS with more capabilities, whereas Sass looks quite different to regular CSS. Both syntaxes have the same abilities.
Syntax # The main differences are that Sass doesn&amp;rsquo;t use curly brackets or semicolons, where SCSS does.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/sass/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/variables/</guid>
      <description>Syntax # $variable_name: value; SCSS # Just as in Sass, SCSS variables are used to store a value which will be used multiple times throughout a SCSS document.
Variables are mostly used to store frequently-used property values (such as fonts and colors), but can be used for any value of any property.
SCSS uses the $ symbol to declare a variable.
$font-stack: Helvetica, sans-serif; $primary-color: #000000; body { font-family: $font-stack; color: $primary-color; } You can use !</description>
    </item>
    
    <item>
      <title>Nesting</title>
      <link>https://www.wikiod.com/sass/nesting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/nesting/</guid>
      <description>Basic nesting # Whenever you declare a new rule inside another rule it is called nesting. With basic nesting, as shown below, the nested selector will be compiled as a new CSS selector with all its parents prepended, separated by a space.
// SCSS .parent { margin: 1rem; .child { float: left; } } // CSS output .parent { margin: 1rem; } .parent .child { float: left; } Nesting depth # Nesting is a very powerful feature, but should be used with caution.</description>
    </item>
    
    <item>
      <title>Loops and Conditons</title>
      <link>https://www.wikiod.com/sass/loops-and-conditons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/loops-and-conditons/</guid>
      <description>While loop # The @while directive will loop over a block of code until the condition specified becomes false. In the following example, this loop will run until $font-size &amp;lt;= 18 while incrementing the value for $font-size by 2.
$font-size: 12; @while $font-size &amp;lt;= 18 { .font-size-#{$font-size} { font-size: ($font-size * 1px); } $font-size: $font-size + 2; } Output of above code
.font-size-12 { font-size: 12px; } .font-size-14 { font-size: 14px; } .</description>
    </item>
    
    <item>
      <title>Partials and Import</title>
      <link>https://www.wikiod.com/sass/partials-and-import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/partials-and-import/</guid>
      <description>Importing # Using @import allows you to split up your files into multiple smaller files. This makes sense, as you are able to keep better structure for your stylesheets and avoid very large files.
Example # Let&amp;rsquo;s say you have a few files.
- application.scss - header.scss - content |-- article.scss &#39;-- list.scss - footer.scss Your main stylesheet application.scss can import all files as well as define its own styles.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.wikiod.com/sass/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/operators/</guid>
      <description>Arithmetic Operators # Sass supports the following standard arithmetic operators:
Operator Description + Addition â€“ Subtraction * Multiplication / Division % Remainder Examples
p { font-size: 16px + 4px; // 20px } h3 { width: 2px * 5 + 12px; // 22px } h2 { width: 8px + (12px / 2) * 3; // 26px } Normal order of operations applies as usual.
Assignment Operator # Sass uses the colon (:) operator to assign values to variables.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.wikiod.com/sass/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/installation/</guid>
      <description>This covers Ruby only, which is the main SASS compiler for many systems but other options exist. A very common one for any node developer would be node-sass which could be easier, and orders of magnitude faster, for many users.
Mac # Ruby comes pre-installed on a Mac computer.
Follow the instructions below to install Sass:
Open CMD Run gem install sass If you get an error message, try sudo gem install sass Check it works using sass -v Linux # Ruby will need to be installed first before setup.</description>
    </item>
    
    <item>
      <title>Mixins</title>
      <link>https://www.wikiod.com/sass/mixins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/mixins/</guid>
      <description>Syntax # @mixin mixin-name ($argument1, $argument, ...){ ... } Mixin with variable argument # There are some cases in mixins where there can be single or multiple arguments while using it. Let&amp;rsquo;s take a case of border-radius where there can be single argument like border-radius:4px; or multiple arguments like border-radius:4px 3px 2px 1px;.
Traditional with Keyword Arguments mixing will be like below:-
@mixin radius($rad1, $rad2, $rad3, $rad4){ -webkit-border-radius: $rad1 $rad2 $rad3 $rad4; -moz-border-radius: $rad1 $rad2 $rad3 $rad4; -ms-border-radius: $rad1 $rad2 $rad3 $rad4; -o-border-radius: $rad1 $rad2 $rad3 $rad4; border-radius: $rad1 $rad2 $rad3 $rad4; } And used as</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/sass/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sass/functions/</guid>
      <description>Syntax # @function function-name(parameter) { /* Function body */ } Basic Functions # A function is similar in look to a mixin but it doesn&amp;rsquo;t add any styles, it only returns a value. Functions should be used to prevent repeated logic in your styles.
Sass has some built-in functions that are called using the standard CSS function syntax.
h1 { background: hsl(0, 25%, 50%); } Functions are declared using the below syntax,</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache Tutorial on </title>
    <link>https://www.wikiod.com/docs/apache/</link>
    <description>Recent content in apache Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/apache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with apache</title>
      <link>https://www.wikiod.com/apache/getting-started-with-apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache/getting-started-with-apache/</guid>
      <description>Installation or Setup # Detailed instructions on getting apache set up or installed.
Ubuntu Installation # sudo apt-get install apache2 Windows Installation # Check out the WAMP stack. WAMP stands for Windows, Apache, MySQL, PhpMyAdmin.
CentOS Installation # Apache 2.2 comes with CentOS6, whereas 2.4 comes with CentOS7, to install on either OS, run
yum -y install httpd macOS Installation # macOS comes with Apache pre-installed,however,can install Apache via Homebrew</description>
    </item>
    
    <item>
      <title>.htaccess files in Apache</title>
      <link>https://www.wikiod.com/apache/htaccess-files-in-apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache/htaccess-files-in-apache/</guid>
      <description>Force HTTPS # .htaccess can be used to force your HTTP site to redirect to HTTPS.
Here&amp;rsquo;s a quick way that doesn&amp;rsquo;t require editing the code for your domain:
RewriteEngine On RewriteCond %{HTTPS} =off RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] Warning: The code above assumes that you can trust %{HTTP_HOST} to point to your domain.
If you need to be sure that the redirect location is your domain, replace %{HTTP_HOST} with your domain.</description>
    </item>
    
    <item>
      <title>How to create virtual host in Apache</title>
      <link>https://www.wikiod.com/apache/how-to-create-virtual-host-in-apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache/how-to-create-virtual-host-in-apache/</guid>
      <description>The main entry point for Apache&amp;rsquo;s VirtualHost is at Apache Virtual Host documentation. From there, you have general documentation about virtual host configuration, and reference documentation about VirtualHost and related directives as well.
1) IP based vhosts 2) Multiple vhosts with the same Port 3) Defining vhosts using Macro (Apache2.4) # 1) IP based vhosts
&amp;lt;VirtualHost 192.168.13.37&amp;gt; ServerName example.com DocumentRoot /var/www/domains/example.com/html ErrorLog /var/log/example.com/error.log CustomLog /var/log/example.com/access.log common &amp;lt;/VirtualHost&amp;gt; &amp;lt;VirtualHost 192.168.47.11&amp;gt; ServerName otherurl.</description>
    </item>
    
    <item>
      <title>Apache Flume</title>
      <link>https://www.wikiod.com/apache/apache-flume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache/apache-flume/</guid>
      <description>Apache Flume is a tool/service/data ingestion mechanism for collecting aggregating and transporting large amounts of streaming data such as log files, events (etc&amp;hellip;) from various sources to a centralized data store.
Flume is a highly reliable, distributed, and configurable tool. It is principally designed to copy streaming data (log data) from various web servers to HDFS.
Streaming / Log Data # Generally, most of the data that is to be analyzed will be produced by various data sources like applications servers, social networking sites, cloud servers, and enterprise servers.</description>
    </item>
    
  </channel>
</rss>

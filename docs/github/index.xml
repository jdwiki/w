<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github Tutorial on </title>
    <link>https://www.wikiod.com/docs/github/</link>
    <description>Recent content in github Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with github</title>
      <link>https://www.wikiod.com/github/getting-started-with-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/getting-started-with-github/</guid>
      <description>GitHub Flavored Markdown # GitHub expands Markdown syntax to provide new useful features.
Header # # Header1 ## Header2 ### Header3 #### Header4 ##### Header5 ###### Header6 H1 === H2 --- Emphasis # *Italic1* _Italic2_ **Bold1** __Bold2__ ***Bold_Italic*** ~~Strikethrough~~ Horizontal Line # --- *** ___ List # unordered list: * item-1 * sub-item-1 * sub-item-2 - item-2 - sub-item-3 - sub-item-4 + item-3 + sub-item-5 + sub-item-6 ordered list: 1. item-1 1.</description>
    </item>
    
    <item>
      <title>Removing sensitive data or large files</title>
      <link>https://www.wikiod.com/github/removing-sensitive-data-or-large-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/removing-sensitive-data-or-large-files/</guid>
      <description>If you commit sensitive data, such as a password or SSH key into a Git repository, you can remove it from the history. To entirely remove unwanted files from a repository&amp;rsquo;s history you can use either the git filter-branch command or the BFG Repo-Cleaner.
Tell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.</description>
    </item>
    
    <item>
      <title>Displaying GitHub timeline  feeds in your Website</title>
      <link>https://www.wikiod.com/github/displaying-github-timeline--feeds-in-your-website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/displaying-github-timeline--feeds-in-your-website/</guid>
      <description>Displaying GitHub timeline / feeds on your website # This document explains how to display your GitHub feeds/timeline on your website.
Example: A live example is available at:
https://newtonjoshua.com
GitHub timeline:
GitHub provides the public timeline for any user in Atom format.
You can view your timeline at:
https://github.com/{{GitHub_username}}.atom
refer: https://developer.github.com/v3/activity/feeds
Google Feed API:
With the Feed API, you can download any public Atom, RSS, or Media RSS feed using only JavaScript, so you can mash up feeds with your content and other APIs with just a few lines of JavaScript.</description>
    </item>
    
    <item>
      <title>GitHub Pages</title>
      <link>https://www.wikiod.com/github/github-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/github-pages/</guid>
      <description>Using Git to create pages from scratch # Create a new repository or clone an existing one.
Create a new branch called gh-pages without any history
$ git checkout &amp;ndash;orphan gh-pages
ensure you are in the correct directory then, # remove all files from the old working tree # $ git rm -rf
Add an index.html file to the root of the repository.
$ echo &amp;ldquo;Hello World&amp;rdquo; &amp;gt; index.html $ git add index.</description>
    </item>
    
    <item>
      <title>Cloning a repository from GitHub</title>
      <link>https://www.wikiod.com/github/cloning-a-repository-from-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/cloning-a-repository-from-github/</guid>
      <description>Syntax # git clone github.com/username/repository Clone a repository # Go to the repository you want to clone (something like: https://github.com/username/repo) On the right, click on the green button named clone or download A small window will appear, copy the url (something like: https://github.com/username/repo.git) Open a terminal window on the machine you want to clone that project to
Navigate from the command line to the location you want to clone the project to</description>
    </item>
    
    <item>
      <title>How to create custom GitHub Labels?</title>
      <link>https://www.wikiod.com/github/how-to-create-custom-github-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/how-to-create-custom-github-labels/</guid>
      <description>Create Custom GitHub Labels! # Here&amp;rsquo;s a quick GIF to make the process as easy as it can be. Labels can be applied to issues and pull requests to signify priority, category, or any other information that you find useful.
On GitHub, navigate to the main page of the repository.
Under your repository name, click Issues or Pull requests.
Issues Labels buttonNext to the search field, click Labels.
Click New Label to create a new label, or click Edit to edit an existing one.</description>
    </item>
    
    <item>
      <title>Update a forked Repository</title>
      <link>https://www.wikiod.com/github/update-a-forked-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/update-a-forked-repository/</guid>
      <description> GitHub Help: Configuring a remote for a fork GitHub Help: Syncing a fork popular ans in StackOverFlow Config a remote for your fork then sync your fork (master branch) # Config a remote for my fork $ cd my_local_repo $ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git # Specify a new remote upstream repository that will be synced with the fork $ git remote -v # Verify the new upstream repository specified for my fork Sync my fork locally $ cd my_local_repo $ git fetch upstream # Fetch the branches and their respective commits from the upstream repository # Commits to master will be stored in a local branch, upstream/master $ git checkout master $ git merge upstream/master # Merge the changes from upstream/master into your local master branch # brings your fork&#39;s master branch into sync with the upstream repo Sync my fork on Github $ git push origin master </description>
    </item>
    
    <item>
      <title>Using Gist</title>
      <link>https://www.wikiod.com/github/using-gist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/using-gist/</guid>
      <description>Gists are a great way to share your work. You can share single files, parts of files, or full applications. You can access gists at https://gist.github.com.
Every gist is a Git repository, which means that it can be forked and cloned. The gist editor is powered by CodeMirror.
There are two types of gists: public gists and secret gists.
Additionally, if you are not logged into GitHub when you create your gist, it will be an anonymous gist.</description>
    </item>
    
    <item>
      <title>Backing up GitHub</title>
      <link>https://www.wikiod.com/github/backing-up-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/backing-up-github/</guid>
      <description>Cloning all repositories for a username # Run the following command, replacing username with the username, to clone all of the GitHub repositories for that user to the current directory.
curl &amp;quot;https://api.github.com/users/username/repos?page=1&amp;amp;per_page=100&amp;quot; | grep -e &#39;git_url*&#39; | cut -d \&amp;quot; -f 4 | xargs -L1 git clone This will only clone the first 100 repositories.</description>
    </item>
    
    <item>
      <title>Working with Gitflow</title>
      <link>https://www.wikiod.com/github/working-with-gitflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/github/working-with-gitflow/</guid>
      <description>Syntax # git flow &amp;lt;subcommand&amp;gt; git flow init git flow [feature|release|hotfix] [start|finish] Parameters # Subcommand Details init Initialize a new git repo with support for the branching model. feature Manage your feature branches. release Manage your release branches. hotfix Manage your hotfix branches. gitflow concept from author branch model picture Operation on 5 common branches locally # One of most common use cases of Gitflow
Initialize repo and define branches $ git flow init # if you use default setup, you&#39;ll define six types of branches: # # main branches (lives forever) # # 1.</description>
    </item>
    
  </channel>
</rss>

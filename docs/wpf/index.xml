<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wpf Tutorial on </title>
    <link>https://www.wikiod.com/docs/wpf/</link>
    <description>Recent content in wpf Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with wpf</title>
      <link>https://www.wikiod.com/wpf/getting-started-with-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/getting-started-with-wpf/</guid>
      <description>Hello World application # To create and run new WPF project in Visual Studio:
Click File → New → Project Select template by clicking Templates → Visual C# → Windows → WPF Application and press OK: Open MainWindow.xaml file in Solution Explorer (if you don&amp;rsquo;t see Solution Explorer window, open it by clicking View → Solution Explorer): In the XAML section (by default below Design section) add this code
Hello world!</description>
    </item>
    
    <item>
      <title>MVVM in WPF</title>
      <link>https://www.wikiod.com/wpf/mvvm-in-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/mvvm-in-wpf/</guid>
      <description>Models and View-Models
The definition of a model is often hotly debated, and the line between a model and a view-model can be blurred. Some prefer not to &amp;ldquo;pollute&amp;rdquo; their models with the INotifyPropertyChanged interface, and instead duplicate the model properties in the view-model, which does implement this interface. Like many things in software development, there is no right or wrong answer. Be pragmatic and do whatever feels right.
View Separation</description>
    </item>
    
    <item>
      <title>Creating Splash Screen in WPF</title>
      <link>https://www.wikiod.com/wpf/creating-splash-screen-in-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/creating-splash-screen-in-wpf/</guid>
      <description>When WPF application launched, it could take a while for a current language runtime (CLR) to initialize .NET Framework. As a result, first application window can appear some time after application was launched, depending of application complexity.
Splash screen in WPF allows application to show either static image or custom dynamic content during initialization before first window appears.
Adding simple Splash Screen # Follow this steps for adding splash screen into WPF application in Visual Studio:</description>
    </item>
    
    <item>
      <title>Introduction to WPF Data Binding</title>
      <link>https://www.wikiod.com/wpf/introduction-to-wpf-data-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/introduction-to-wpf-data-binding/</guid>
      <description>Syntax # {Binding PropertyName} is equivalent to {Binding Path=PropertyName} {Binding Path=SomeProperty.SomeOtherProperty.YetAnotherProperty} {Binding Path=SomeListProperty1} Parameters # Parameter Details Path Specifies the path to bind to. If unspecified, binds to the DataContext itself. UpdateSourceTrigger Specifies when the binding source has its value updated. Defaults to LostFocus. Most used value is PropertyChanged. Mode Typically OneWay or TwoWay. If unspecified by the binding, it defaults to OneWay unless the binding target requests it to be TwoWay.</description>
    </item>
    
    <item>
      <title>Value and Multivalue Converters</title>
      <link>https://www.wikiod.com/wpf/value-and-multivalue-converters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/value-and-multivalue-converters/</guid>
      <description>Parameters # Parameter Details value The value produced by the binding source. values The values array, produced by the binding source. targetType The type of the binding target property. parameter The converter parameter to use. culture The culture to use in the converter. What IValueConverter and IMultiValueConverterthey are # IValueConverter and IMultiValueConverter - interfaces that provides a way to apply a custom logic to a binding.
What they are useful for # You have a some type value but you want to show zero values in one way and positive numbers in another way You have a some type value and want to show element in one case and hide in another You have a numeric value of money but want to show it as words You have a numeric value but want to show different images for defferent numbers These are some of the simple cases, but there are many more.</description>
    </item>
    
    <item>
      <title>Dependency Properties</title>
      <link>https://www.wikiod.com/wpf/dependency-properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/dependency-properties/</guid>
      <description>Dependency Properties are a type of property that extend out a CLR property. Whereas a CLR property is read directly from a member of your class, a Dependency Property will be dynamically resolved when calling the GetValue() method that your object gains via inheritance from the base DependencyObject class.
This section will break down Dependency Properties and explain their usage both conceptually and through code examples.
Syntax # DependencyProperty.Register(string name, Type propertyType, Type ownerType) DependencyProperty.</description>
    </item>
    
    <item>
      <title>WPF Architecture</title>
      <link>https://www.wikiod.com/wpf/wpf-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/wpf-architecture/</guid>
      <description>DispatcherObject # Derives from # Object
Key members # public Dispatcher Dispatcher { get; } Summary # Most objects in WPF derive from DispatcherObject, which provides the basic constructs for dealing with concurrency and threading. Such objects are associated with a Dispatcher.
Only the thread that the Dispatcher was created on may access the DispatcherObject directly. To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, a call to Invoke or BeginInvoke on the Dispatcher the object is associated with is required.</description>
    </item>
    
    <item>
      <title>Styles in WPF</title>
      <link>https://www.wikiod.com/wpf/styles-in-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/styles-in-wpf/</guid>
      <description>Introductory remarks # In WPF, a Style defines the values of one or more dependency properties for a given visual element. Styles are used throughout the application to make the user interface more consistent (e.g. giving all dialog buttons a consistent size) and to make bulk changes easier (e.g. changing the width of all buttons.)
Styles are typically defined in a ResourceDictionary at a high level in the application (e.g. in App.</description>
    </item>
    
    <item>
      <title>WPF Behaviors</title>
      <link>https://www.wikiod.com/wpf/wpf-behaviors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/wpf-behaviors/</guid>
      <description>WPF behaviors allow a developer to alter the way WPF controls acts in response to system and user events.
Behaviors inherit from the Behavior class of the System.Windows.Interactity namespace. This namespace is a part of the overarching Expression Blend SDK, but a lighter version, suitable for behavior libraries, is available as a nuget package.
Simple Behavior to Intercept Mouse Wheel Events # Implementing the Behavior
This behavior will cause mouse wheel events from an inner ScrollViewer to bubble up to the parent ScrollViewer when the inner one is at either its upper or lower limit.</description>
    </item>
    
    <item>
      <title>WPF Localization</title>
      <link>https://www.wikiod.com/wpf/wpf-localization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/wpf/wpf-localization/</guid>
      <description>Content of controls can be localized using Resource files, just as this is possible in classes. For XAML there is a specific syntax, that is different between a C# and a VB application.
The steps are:
For any WPF project: make the resource file public, the default is internal. For C# WPF projects use the XAML provided in the example For VB WPF projects use the XAML provided in the example and change the Custom Tool property to PublicVbMyResourcesResXFileCodeGenerator.</description>
    </item>
    
  </channel>
</rss>

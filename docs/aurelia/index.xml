<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aurelia Tutorial on </title>
    <link>https://www.wikiod.com/docs/aurelia/</link>
    <description>Recent content in aurelia Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/aurelia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with aurelia</title>
      <link>https://www.wikiod.com/aurelia/getting-started-with-aurelia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/getting-started-with-aurelia/</guid>
      <description>Hello World: Getting started with aurelia-cli # This example will show you how to quickly get a hello world Aurelia application up and running using the Aurelia CLI.
Prerequisites # The Aurelia CLI is a Node.js based application, so make sure you install it first before proceeding. You will need Node.js 4.4.7 or later.
You will also need a Git client installed. Some great options include: Github Desktop, Sourcetree and Git SCM.</description>
    </item>
    
    <item>
      <title>Value Converters</title>
      <link>https://www.wikiod.com/aurelia/value-converters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/value-converters/</guid>
      <description>This section provides an overview of Value Converters in Aurelia. It should detail not only how to create a value converter, but also why you might want to use them and many examples of basic tasks accomplished through the use of a Value Converter.
Value converters can be chained and used alongside other binding features in Aurelia such as Binding Behaviors.
Creating A Basic Value Converter # While Value Converters can be comprised of either a toView or fromView method, in the below example we will be creating a basic Value Converter which just uses the toView method which accepts the value being sent to the view as the first argument.</description>
    </item>
    
    <item>
      <title>Aurelia CLI</title>
      <link>https://www.wikiod.com/aurelia/aurelia-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/aurelia-cli/</guid>
      <description>Adding Bootstrap To A CLI Application # A commonly used CSS/Javascript library is Bootstrap. To install it into your Aurelia CLI driven application first you need to install it using Npm.
npm install bootstrap --save Because Bootstrap has a hard dependency on jQuery, we need to make sure we also have jQuery installed:
npm install jquery --save Now in your preferred IDE/code editor open up the following file in your project directory: aurelia_project/aurelia.</description>
    </item>
    
    <item>
      <title>Custom Elements</title>
      <link>https://www.wikiod.com/aurelia/custom-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/custom-elements/</guid>
      <description>A Custom Element in Aurelia is used to extend the basic set of HTML elements by feature-enriched, reusable components. A Custom Element normally exists out of two files, a View-Model based on Javasciprt, and a corresponding view written in HTML. Both files compose the HTML element which can then be used throughout the application like every other HTML element.
Creating A Custom Element Based On Naming Conventions # A basic custom element is created in Aurelia based on naming conventions, by simply adding the suffix CustomElement to the name of a class.</description>
    </item>
    
    <item>
      <title>Aurelia CLI Explained</title>
      <link>https://www.wikiod.com/aurelia/aurelia-cli-explained/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/aurelia-cli-explained/</guid>
      <description>Setting Up Environment for Aurelia-cli Explained # OS: Mac OS X 10.11 (Should work on Windows / Linux since we are using Vagrant) Vagrant 1.8.4 Installed Directory Structure on Host OS (Mac OS): /path/to/project /provision /packages Note: If you use different vesions, be sure to update Variables at top of provision.sh script below. atom.x86_64.rpm (Download: Atom) node-v6.4.0-linux-x64.tar.xz (Download: Node) /vagrant Vagrantfile (File contents below) provision.sh (File contents below) Starting up the Virtual Machine ($ == Terminal prompt) In Mac OS Terminal $cd /path/to/project/vagrant $vagrant up Downloads CentOS 7 vagrant box, runs provision script Launches VM window outside of your Mac OS terminal When all done, log into VM using gui User: vagrant PW: vagrant Launch X Windows: $startx (Starts a Gnome UI) Setting up the VM Launch a Terminal window (Applications Drop Down Menu / Utilities) Set up sudo to run &amp;ldquo;npm&amp;rdquo; Get path to npm: $which npm (/opt/node-v6.</description>
    </item>
    
    <item>
      <title>Binding</title>
      <link>https://www.wikiod.com/aurelia/binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/binding/</guid>
      <description>Binding To Checkboxes # Basic Checkboxes
export class MyViewModel { favoriteColors = []; colors = [&#39;Red&#39;, &#39;Yellow&#39;, &#39;Pink&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Blue&#39;]; } &amp;lt;template&amp;gt; &amp;lt;label repeat.for=&amp;quot;color of colors&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; value.bind=&amp;quot;color&amp;quot; checked.bind=&amp;quot;favoriteColors&amp;quot; /&amp;gt; ${color} &amp;lt;/label&amp;gt; &amp;lt;p&amp;gt;Favourite colors:&amp;lt;/p&amp;gt; &amp;lt;ul if.bind=&amp;quot;favoriteColors&amp;quot;&amp;gt; &amp;lt;li repeat.for=&amp;quot;color of favoriteColors&amp;quot;&amp;gt;${color}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt; Checkboxes With Object Arrays
export class MyViewModel { people = []; selectedPeople = []; constructor() { this.people = [ {name: &#39;John Michaels&#39;}, {name: &#39;Gary Stevens&#39;}, {name: &#39;Carrie Smitch&#39;}, {name: &#39;Jesus Wohau&#39;} ]; } } &amp;lt;template&amp;gt; &amp;lt;label repeat.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.wikiod.com/aurelia/dependency-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/dependency-injection/</guid>
      <description>If injecting more than one class, the order you put them in the @inject() statement does not matter. However, the order they appear in the @inject() statement must match the order of the parameters in the constructor.
Get and Display Username by Id # import {User} from &#39;backend/user&#39;; // import custom class import {inject} from &#39;aurelia-framework&#39;; // allows us to inject @inject(User) // inject custom class export class ProfileView { constructor(user) { // use instance of custom class as a parameter to the constructor this.</description>
    </item>
    
    <item>
      <title>Templating</title>
      <link>https://www.wikiod.com/aurelia/templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/templating/</guid>
      <description>Creating A Basic Template # In Aurelia all HTML templates are defined inside of opening and closing &amp;lt;template&amp;gt;&amp;lt;/template&amp;gt; tags. All of your HTML and Aurelia specific logic goes inside of these template tags and cannot exist outside of them.
&amp;lt;template&amp;gt; &amp;lt;/template&amp;gt; Working With Loops Using &amp;ldquo;repeat.for&amp;rdquo; # Looping over an iterable defined inside of your viewmodel or passed through as a bindable (if a Custom Attribute or Custom Element) can be done like so.</description>
    </item>
    
    <item>
      <title>Working with &lt;compose&gt;</title>
      <link>https://www.wikiod.com/aurelia/working-with-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/aurelia/working-with-compose/</guid>
      <description>Compose with View only # Presumably the simplest way to use compose is with a View only. This allows you to include HTML templates without the need to declare a ViewModel with bindable properties for each of them, making it easier to reuse smaller pieces of HTML.
The BindingContext (ViewModel) of the View will be set to that of the parent ViewModel.
Usage:
src/app.html
&amp;lt;template&amp;gt; &amp;lt;compose view=&amp;quot;./greeter.html&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt; &amp;lt;/template&amp;gt; src/greeter.html
&amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;Hello, ${name}!</description>
    </item>
    
  </channel>
</rss>

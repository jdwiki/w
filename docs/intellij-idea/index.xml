<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>intellij-idea Tutorial on </title>
    <link>https://www.wikiod.com/docs/intellij-idea/</link>
    <description>Recent content in intellij-idea Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/intellij-idea/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with intellij-idea</title>
      <link>https://www.wikiod.com/intellij-idea/getting-started-with-intellij-idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/getting-started-with-intellij-idea/</guid>
      <description>Hello, World! # This will teach you how to make your first project using IDEA.
Launch IDEA, and click Create New Project from the startup screen: Click Next on the next screen. We&amp;rsquo;re creating a simple Java project, so we don&amp;rsquo;t need any addons or extras to this project Use the next screen to create the Java Hello World template project: Finally, name your project and select a location on disk, and click Finish: You should end up with a window that looks something like this: At this point, the project is all ready to go, simply click the Run button or go to Run -&amp;gt; Run &#39;Main&#39; And you&amp;rsquo;re done!</description>
    </item>
    
    <item>
      <title>How to Install Plugins</title>
      <link>https://www.wikiod.com/intellij-idea/how-to-install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/how-to-install-plugins/</guid>
      <description>Plugins help us to do things easier. Intellij provides a vast range of plugins for various technologies / laguages. There are three ways to install plugin in Intellij.
To download and install a repository plugin # 1. Go to File --&amp;gt; Settings (e.g. Ctrl+Alt+S ). 2. In the left-hand pane, select Plugins. 3.On the Plugins window, click &amp;quot;Install JetBrains plugin&amp;quot; or the &amp;quot;Browse repositories button&amp;quot;. To install a plugin from the disk # 1.</description>
    </item>
    
    <item>
      <title>IdeaVim</title>
      <link>https://www.wikiod.com/intellij-idea/ideavim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/ideavim/</guid>
      <description>IdeaVim is a plugin for IDEA products that aims in providing Vim functionality in editor views
Showing line numbers # As of IntelliJ IDEA version 2016.2, and IdeaVim version 0.46, IntelliJ&amp;rsquo;s native option for showing line numbers is ineffective. When clicking Show line numbers, the line numbers immediately show and disappear.
This problem is caused by a bug in the IdeaVim plugin, which can be resolved by using the Vim command for showing line numbers:</description>
    </item>
    
    <item>
      <title>Useful Shortcuts</title>
      <link>https://www.wikiod.com/intellij-idea/useful-shortcuts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/useful-shortcuts/</guid>
      <description>Basic navigation # Go to editor (from tool window) # Esc
Switching focus to corresponding tool window # Windows: Alt + &amp;lt;tool window number&amp;gt; # OS X / macOS: Cmd + &amp;lt;tool window number&amp;gt; # For example switching focus to the project window # Windows: Alt + 1 # OS X / macOS: Cmd + 1 # Recent files popup # Windows: Ctrl + E # OS X / macOS: Cmd + E # Find Action # Windows: Ctrl + Shift + A # OS X / macOS: Cmd + Shift + A # Navigate to # File : # Windows: Ctrl + Shift + N # OS X / macOS: Cmd + Shift + N # Class : # Windows: Ctrl + N # OS X / macOS: Cmd + N # Symbol (class/method/variable/constant name) : # Windows: Ctrl + Alt + Shift + N # OS X / macOS: Cmd + Option + Shift + N # Note that you can use class name to narrow down the method/variable/constant search, for example to find symbol usersCollection in class UserDAO type:</description>
    </item>
    
    <item>
      <title>Little-known features</title>
      <link>https://www.wikiod.com/intellij-idea/little-known-features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/little-known-features/</guid>
      <description>Quick Preview # [Check screencast video on YouTube about this feature](https://youtu.be/D6YlYZVprCw) IntelliJ provides a quick-preview feature called Viewing Definition. Using this feature allows a user to quickly see the contents of a method/class without navigating into the class itself
OS X - (⌘+Y) or (⌥+Space) Unix / Windows - Ctrl+Shift+I Example: Looking into Arrays.copyOfRange(): Verifying if you&amp;rsquo;ve selected the right class in Search:
Or a quick look at some project files:</description>
    </item>
    
    <item>
      <title>Hibernate HQL console and inspections</title>
      <link>https://www.wikiod.com/intellij-idea/hibernate-hql-console-and-inspections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/hibernate-hql-console-and-inspections/</guid>
      <description>Intellij IDEA supports HQL auto completion and running HQL queries on console. This is how you enable that support.
Configuring HQL Inspections # Go to File -&amp;gt; Project Structure -&amp;gt; Modules. Add new Hibernate module. Right click on the desired module -&amp;gt; Add -&amp;gt; Hibernate. Select the newly created Hibernate configuration option, and click the (+) sign in the right pane to create hibernate.cfg.xml file. Go to File -&amp;gt; Project Structure -&amp;gt; Facets, and add new JPA.</description>
    </item>
    
    <item>
      <title>Live Templates</title>
      <link>https://www.wikiod.com/intellij-idea/live-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/live-templates/</guid>
      <description>Add a test method easily # @org.junit.Test public void should_$name$() { $END$ } Make sure to check the Shorted FQ names box when creating this template.
When you type &amp;ldquo;should&amp;rdquo; (the abbreviation), this will add the necessary import org.junit.Test; statement at the top of the file, and this code:
@Test public void should_() { } It is thanks to the Shorten FQ names option that @org.junit.Test is reduced to simply @Test.</description>
    </item>
    
    <item>
      <title>Optimization</title>
      <link>https://www.wikiod.com/intellij-idea/optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/optimization/</guid>
      <description>Customizing the VM Options # You can override the default vmoptions with your own personal settings by choosing Help &amp;gt; Edit Custom VM Options from the toolbar. This will create a local copy of the file which you are free to edit.
For example, if you double the value set for Xmx, the maximum size of the memory allocation pool will be doubled after you restart the IDE. On many machines this will lead to faster performance.</description>
    </item>
    
    <item>
      <title>Database Tools</title>
      <link>https://www.wikiod.com/intellij-idea/database-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/database-tools/</guid>
      <description>Creating new data source # Open &amp;ldquo;Database Tool Window&amp;rdquo; if you don&amp;rsquo;t have it opened:
This what it looks like: Create new data source: By clicking on &amp;ldquo;+&amp;rdquo; icon:
Or by opening &amp;ldquo;Data Sources and Drivers&amp;rdquo; dialog
And adding new data source by clicking &amp;ldquo;+&amp;rdquo; there
If you have not already downloaded JDBC driver, you will be prompted to do it:
Enter connection parameters:
Configure SSH tunnel if you need it:</description>
    </item>
    
    <item>
      <title>Exporting</title>
      <link>https://www.wikiod.com/intellij-idea/exporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/intellij-idea/exporting/</guid>
      <description>Building a .jar # Eventually, when you&amp;rsquo;re ready to release a version of your code to production, you&amp;rsquo;ll need a .jar file to distribute. Intellij makes building JARs quite easy.
First, navigate to File -&amp;gt; Project Structure and click on Artifacts: Click on the + button, and select JAR -&amp;gt; From modules with dependencies: Select your module from the dropdown list, and the main file (this is the file that contains your public static void main() method): Click OK, verify that all the information regarding dependencies is correct, and click OK to finish setting up the artifact.</description>
    </item>
    
  </channel>
</rss>

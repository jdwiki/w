<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plsql Tutorial on </title>
    <link>https://www.wikiod.com/docs/plsql/</link>
    <description>Recent content in plsql Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/plsql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with plsql</title>
      <link>https://www.wikiod.com/plsql/getting-started-with-plsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/getting-started-with-plsql/</guid>
      <description>Hello World # set serveroutput on DECLARE message constant varchar2(32767):= &#39;Hello, World!&#39;; BEGIN dbms_output.put_line(message); END; / Command set serveroutput on is required in SQL*Plus and SQL Developer clients to enable the output of dbms_output. Without the command nothing is displayed.
The end; line signals the end of the anonymous PL/SQL block. To run the code from SQL command line, you may need to type / at the beginning of the first blank line after the last line of the code.</description>
    </item>
    
    <item>
      <title>PLSQL procedure</title>
      <link>https://www.wikiod.com/plsql/plsql-procedure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/plsql-procedure/</guid>
      <description>PLSQL procedure is a group of SQL statements stored on the server for reuse. It increases the performance because the SQL statements do not have to be recompiled every time it is executed.
Stored procedures are useful when same code is required by multiple applications. Having stored procedures eliminates redundancy, and introduces simplicity to the code. When data transfer is required between the client and server, procedures can reduce communication cost in certain situations.</description>
    </item>
    
    <item>
      <title>Cursors</title>
      <link>https://www.wikiod.com/plsql/cursors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/cursors/</guid>
      <description>Syntax # Cursor cursor_name Is your_select_statement Cursor cursor_name(param TYPE) Is your_select_statement_using_param FOR x in (your_select_statement) LOOP &amp;hellip; Declared Cursors are difficult to use, and you should prefer FOR loops in most cases. What&amp;rsquo;s very interesting in cursors compared to simple FOR loops, is that you can parameterize them.
It&amp;rsquo;s better to avoid doing loops with PL/SQL and cursors instead of using Oracle SQL anyway. However, For people accustomed to procedural language, it can be far easier to understand.</description>
    </item>
    
    <item>
      <title>Bulk collect</title>
      <link>https://www.wikiod.com/plsql/bulk-collect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/bulk-collect/</guid>
      <description>Bulk data Processing # local collections are not allowed in select statements. Hence the first step is to create a schema level collection. If the collection is not schema level and being used in SELECT statements then it would cause &amp;ldquo;PLS-00642: local collection types not allowed in SQL statements&amp;rdquo;
CREATE OR REPLACE TYPE table1_t IS OBJECT ( a_1 INTEGER, a_2 VARCHAR2(10) ); &amp;ndash;Grant permissions on collection so that it could be used publically in database</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/plsql/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/functions/</guid>
      <description>Syntax # CREATE [OR REPLACE] FUNCTION function_name [ (parameter [,parameter]) ]
RETURN return_datatype
IS | AS
[declaration_section]
BEGIN executable_section
[EXCEPTION exception_section]
END [function_name];
Calling Functions # There are a few ways to use functions.
Calling a function with an assignment statement
DECLARE x NUMBER := functionName(); --functions can be called in declaration section BEGIN x := functionName(); END; Calling a function in IF statement
IF functionName() = 100 THEN Null; END IF; Calling a function in a SELECT statement</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://www.wikiod.com/plsql/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/packages/</guid>
      <description>Syntax # CREATE [OR REPLACE] PACKAGE package_name
[AUTHID {CURRENT_USER | DEFINER}]
{IS | AS}
[PRAGMA SERIALLY_REUSABLE;]
[collection_type_definition &amp;hellip;]
[record_type_definition &amp;hellip;]
[subtype_definition &amp;hellip;]
[collection_declaration &amp;hellip;]
[constant_declaration &amp;hellip;]
[exception_declaration &amp;hellip;]
[object_declaration &amp;hellip;]
[record_declaration &amp;hellip;]
[variable_declaration &amp;hellip;]
[cursor_spec &amp;hellip;]
[function_spec &amp;hellip;]
[procedure_spec &amp;hellip;]
[call_spec &amp;hellip;]
[PRAGMA RESTRICT_REFERENCES(assertions) &amp;hellip;]
END [package_name];
CREATE OR REPLACE PACKAGE PackageName IS
FUNCTION FunctionName(parameter1 IN VARCHAR2, paramter2 IN NUMBER) RETURN VARCHAR2;
END PackageName;
CREATE [OR REPLACE] PACKAGE BODY package_name</description>
    </item>
    
    <item>
      <title>IF-THEN-ELSE Statement</title>
      <link>https://www.wikiod.com/plsql/if-then-else-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/if-then-else-statement/</guid>
      <description>Syntax # IF [condition 1] THEN
[statements to execute when condition 1 is TRUE];
ELSIF [condition 2] THEN
[statements to execute when condition 2 is TRUE];
ELSE
[statements to execute when both condition 1 &amp;amp; condition 2 are FALSE];
END IF;
IF-THEN # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 1; IF v_num1 &amp;gt; v_num2 THEN dbms_output.put_line(&#39;v_num1 is bigger than v_num2&#39;); END IF; END; IF-THEN-ELSE # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 10; IF v_num1 &amp;gt; v_num2 THEN dbms_output.</description>
    </item>
    
    <item>
      <title>Triggers</title>
      <link>https://www.wikiod.com/plsql/triggers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/triggers/</guid>
      <description>Introduction:
Triggers are a useful concept in PL/SQL. A trigger is a special type of stored procedure which does not require to be explicitly called by the user. It is a group of instructions, which is automatically fired in response to a specific data modification action on a specific table or relation, or when certain specified conditions are satisfied. Triggers help maintain the integrity, and security of data. They make the job convenient by taking the required action automatically.</description>
    </item>
    
    <item>
      <title>Loop</title>
      <link>https://www.wikiod.com/plsql/loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/loop/</guid>
      <description>Syntax # LOOP [statements]; EXIT WHEN [condition for exit loop]; END LOOP; Simple Loop # DECLARE v_counter NUMBER(2); BEGIN v_counter := 0; LOOP v_counter := v_counter + 1; dbms_output.put_line(&#39;Line number&#39; || v_counter); EXIT WHEN v_counter = 10; END LOOP; END; WHILE Loop # The WHILE loop is executed untill the condition of end is fulfilled. Simple example:
DECLARE v_counter NUMBER(2); --declaration of counter variable BEGIN v_counter := 0; --point of start, first value of our iteration WHILE v_counter &amp;lt; 10 LOOP --exit condition dbms_output.</description>
    </item>
    
    <item>
      <title>Collections and Records</title>
      <link>https://www.wikiod.com/plsql/collections-and-records/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/plsql/collections-and-records/</guid>
      <description>Use a collection as a return type for a split function # It&amp;rsquo;s necessary to declare the type; here t_my_list; a collection is a TABLE OF something
CREATE OR REPLACE TYPE t_my_list AS TABLE OF VARCHAR2(100); Here&amp;rsquo;s the function. Notice the () used as a kind of constructor, and the COUNT and EXTEND keywords that help you create and grow your collection;
CREATE OR REPLACE FUNCTION cto_table(p_sep in Varchar2, p_list IN VARCHAR2) RETURN t_my_list AS --- this function takes a string list, element being separated by p_sep -- as separator l_string VARCHAR2(4000) := p_list || p_sep; l_sep_index PLS_INTEGER; l_index PLS_INTEGER := 1; l_tab t_my_list := t_my_list(); BEGIN LOOP l_sep_index := INSTR(l_string, p_sep, l_index); EXIT WHEN l_sep_index = 0; l_tab.</description>
    </item>
    
  </channel>
</rss>

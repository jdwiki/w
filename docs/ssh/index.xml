<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secure Shell Tutorial on </title>
    <link>https://www.wikiod.com/docs/ssh/</link>
    <description>Recent content in Secure Shell Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ssh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Secure Shell</title>
      <link>https://www.wikiod.com/ssh/getting-started-with-secure-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/getting-started-with-secure-shell/</guid>
      <description>Creating your SSH key # You can create your ssh key using ssh-keygen, it&amp;rsquo;s a program that is part of the ssh installation. To do so just run it and follow the instructions on screen.
Here&amp;rsquo;s an example:
$ ssh-keygen Generating public/private rsa key pair. The default directory where you ssh key pair will be saved is inside the .ssh folder in your home directory (you can change this by specifying a valid path) and the default name for the keypair is id_rsa for the private key and id_rsa.</description>
    </item>
    
    <item>
      <title>Debugging ssh problems</title>
      <link>https://www.wikiod.com/ssh/debugging-ssh-problems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/debugging-ssh-problems/</guid>
      <description>Connection Refused # A &amp;ldquo;Connection Refused&amp;rdquo; error will occur if your client sends a connection request to a remote server host, and the remote host responds to say that it refuses to accept the request. The &amp;ldquo;Connection Refused&amp;rdquo; error essentially means that the computer is not accepting connections to the requested IP address and port.
&amp;ldquo;Connection refused&amp;rdquo; can be caused by a firewall which is blocking connection requests. A firewall which is configured to block connections to a particular endpoint can be set to drop connection requests&amp;ndash;in which case the client will never get a response and will eventually timeout.</description>
    </item>
    
    <item>
      <title>Reverse tunnels</title>
      <link>https://www.wikiod.com/ssh/reverse-tunnels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/reverse-tunnels/</guid>
      <description>OpenSSH # Creating a reverse ssh tunnel takes just one switch -R to the original command.
Command line # Let&amp;rsquo;s assume you are connecting to the example.com as a user guest using a command ssh guest@example.com. Opening reverse tunnel can look like this:
ssh -R 2222:localhost:22 guest@example.com It will open a port 2222 on the remote server (loopback interface only) and every connection to this port will be forwarded to your local computer ssh server (port 22).</description>
    </item>
    
    <item>
      <title>Remote commands</title>
      <link>https://www.wikiod.com/ssh/remote-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/remote-commands/</guid>
      <description>Interactive and screen-based commands # Many commands and programs in the remote side are screen-based (e.g. mc) or they need to ask password (e.g. sudo), to be able to run these kind of programs you can use option -t.
ssh -t alice@example.com sudo ls / [sudo] password for alice:
bin root dev etc home lib mnt opt proc root run usr var
Hello World # To send a remote command via SSH (the SSH server needs to be running on the remote host), you can simply write the command after user@machine.</description>
    </item>
    
    <item>
      <title>Working with ssh keys</title>
      <link>https://www.wikiod.com/ssh/working-with-ssh-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/working-with-ssh-keys/</guid>
      <description>Convert PPK (PuTTY key) to OpenSSH format # You might receive from your peer private key in PPK format, which seems it does not work in OpenSSH (command-line ssh). The client will be asking for the passphrase, because of OpenSSH bug.
$ ssh -i mykey.ppk example.com Enter passphrase for mykey.ppk: You need to convert the key to OpenSSH format using PuTTYgen (command-line version):
puttygen mykey.ppk -o mykey.key -O private-openssh Or in GUI version:</description>
    </item>
    
    <item>
      <title>Kill unresponsive SSH session</title>
      <link>https://www.wikiod.com/ssh/kill-unresponsive-ssh-session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/kill-unresponsive-ssh-session/</guid>
      <description>Sometimes your SSH session stops responding. You can easily get out of that session using the following trick.
Killing an SSH session using the Escape character # By default, the escape character is ~.
Just go ahead and type ~. in your opened SSH session.
After hitting Enter your session will end immediately.
Go ahead and try it in any session, it works regardless of the responsiveness of your session.</description>
    </item>
    
    <item>
      <title>Managing remote files through ssh</title>
      <link>https://www.wikiod.com/ssh/managing-remote-files-through-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ssh/managing-remote-files-through-ssh/</guid>
      <description>this topic should describe various ways of using ssh as a secure way to manage files on remote machines
Mounting remote directory through ssh # You can mount remote directory through ssh by using sshfs. Sshfs does not come as a default on Ubuntu, so you need to install it first by using sudo apt-get install sshfs. You can then mount the remote directory to your local machine like this</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symfony2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/symfony2/</link>
    <description>Recent content in symfony2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/symfony2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with symfony2</title>
      <link>https://www.wikiod.com/symfony2/getting-started-with-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/getting-started-with-symfony2/</guid>
      <description>Installation or Setup # Symfony Framework - built with symfony components, is one of the leading PHP framework used to create robust websites and web applications.
Symfony can be installed quickly through two recommended ways.
The official documentaion recommends to install the framework through the Symfony Installer which is a tiny php application that is installed once on the local system that helps in downloading the framework and setting up the configuration of the framework.</description>
    </item>
    
    <item>
      <title>Creating Web-Services with Symfony 2.8</title>
      <link>https://www.wikiod.com/symfony2/creating-web-services-with-symfony-28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/creating-web-services-with-symfony-28/</guid>
      <description>Work with RESTFul API # REpresentational State Transfer (REST) is an architectural style used for web development, introduced and defined in 2000 by Roy Fielding.
See it on wiki : REST wiki
It&amp;rsquo;s based on HTTP protocol (HTTP on Wiki), HTTP requests (GET, POST, PATCH, DELETE&amp;hellip;) / responses codes (404, 400, 200, 201, 500&amp;hellip;) and bodies structure.
This is a great way to expose your datas to an another system on Internet.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/symfony2/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/routing/</guid>
      <description>Return a 404 response # 404 responses are returned when a resource is not found on the server, in Symfony this status can be created by throwing a NotFoundHttpException exception. To avoid an extra use statement inside a controller use the createNotFoundException() provided by the Controller class
&amp;lt;?php namespace Bundle\Controller; use Symfony\Bundle\FrameworkBundle\Controller\Controller; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; class TestController extends Controller { /** * @Route(&amp;quot;/{id}&amp;quot;, name=&amp;quot;test&amp;quot;) * Recommended to avoid template() as it has a lot of background processing.</description>
    </item>
    
    <item>
      <title>Doctrine Entity Relationships</title>
      <link>https://www.wikiod.com/symfony2/doctrine-entity-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/doctrine-entity-relationships/</guid>
      <description>One-To-Many, Bidirectional # This bidirectional mapping requires the mappedBy attribute on the OneToMany association and the inversedBy attribute on the ManyToOne association.
A bidirectional relationship has both an owning and inverse side. OneToMany relationships can use join tables, so you have to specify an owning side. The OneToMany association is always the inverse side of a bidirectional association.
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity * @ORM\Table(name=&amp;quot;users&amp;quot;) */ class User { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;username&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $username; /** * @var Group|null * * @ORM\ManyToOne(targetEntity=&amp;quot;AppBundle\Entity\Group&amp;quot;, inversedBy=&amp;quot;users&amp;quot;) * @ORM\JoinColumn(name=&amp;quot;group_id&amp;quot;, referencedColumnName=&amp;quot;id&amp;quot;, nullable=true) */ protected $group; /** * @param string $username * @param Group|null $group */ public function __construct($username, Group $group = null) { $this-&amp;gt;username = $username; $this-&amp;gt;group = $group; } /** * Set username * * @param string $username */ public function setUsername($username) { $this-&amp;gt;username = $username; } /** * Get username * * @return string */ public function getUsername() { return $this-&amp;gt;username; } /** * @param Group|null $group */ public function setGroup(Group $group = null) { if($this-&amp;gt;group !</description>
    </item>
    
    <item>
      <title>Symfony Services</title>
      <link>https://www.wikiod.com/symfony2/symfony-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/symfony-services/</guid>
      <description>How to declare, write and use a simple service in Symfony2 # Services declaration :
# src/Acme/YourBundle/Resources/config/services.yml services: my_service: class: Acme\YourBundle\Service\MyService arguments: [&amp;quot;@doctrine&amp;quot;, &amp;quot;%some_parameter%&amp;quot;, &amp;quot;@another_service&amp;quot;] another_service: class: Acme\YourBundle\Service\AnotherService arguments: [] Service code :
&amp;lt;?php namespace Acme\YourBundle\Service\Service; class MyService { /** * Constructor * You can had whatever you want to use in your service by dependency injection * @param $doctrine Doctrine * @param $some_parameter Some parameter defined in app/config/parameters.yml * @param $another_service Another service */ public function __construct($doctrine, $some_parameter, $another_service) { $this-&amp;gt;doctrine = $doctrine; $this-&amp;gt;some_parameter = $some_parameter; $this-&amp;gt;another_service = $another_service; } public function doMagic() { // Your code here } } Use it in a controller :</description>
    </item>
    
    <item>
      <title>Deployment of Symfony2</title>
      <link>https://www.wikiod.com/symfony2/deployment-of-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/deployment-of-symfony2/</guid>
      <description>Steps to move Symfony 2 project to hosting manually # It depends on kind of hosting that you have:
If you have SSH console, then you can do it on hosting after step 2, if you haven&amp;rsquo;t then do it locally: run command
php app/console cache:clear --env=prod&#39;. Suppose you have on you hosting folders youdomain/public_html, so in public_html must be located all web files. So you must upload all from Symfony project (folders: app, src, vendors, bin; files: deps, deps.</description>
    </item>
    
    <item>
      <title>Symfony Design Patterns</title>
      <link>https://www.wikiod.com/symfony2/symfony-design-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/symfony-design-patterns/</guid>
      <description>Dependency Injection pattern # Imagine you have a class manager to manages sending mails (be called MailManager).
In this, you have to log mails that are sent. A good solution is to transform the MailManager class into a service and then inject class for creating logs (Monolog for example) into the MailManager creating a service.
To do this :
1- Declare future MailManager class as service (in services.yml)
services: mail.manager.class: class: Vendor/YourBundle/Manager/MailManager 2- Inject logger existant service using argument method</description>
    </item>
    
    <item>
      <title>Symfony Twig Extensions</title>
      <link>https://www.wikiod.com/symfony2/symfony-twig-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/symfony-twig-extensions/</guid>
      <description>A Simple Twig Extension &amp;ndash; Symfony 2.8 # Before creating any extension, always check if it has already been implemented.
The first thing one would have to do is define the extension class which will house the twig filters and/or functions.
&amp;lt;?php namespace AppBundle\Twig; class DemoExtension extends \Twig_Extension { /** * A unique identifier for your application * * @return string */ public function getName() { return &#39;demo&#39;; } /** * This is where one defines the filters one would to use in their twig * templates * * @return Array */ public function getFilters() { return array ( new \Twig_SimpleFilter ( &#39;price&#39;, // The name of the twig filter array($this, &#39;priceFilter&#39;) ), ); } public function priceFilter($number, $decimals = 0, $decPoint = &#39;.</description>
    </item>
    
    <item>
      <title>Doctrine Entity Repository</title>
      <link>https://www.wikiod.com/symfony2/doctrine-entity-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/doctrine-entity-repository/</guid>
      <description>Creating a new Repository # You can create a new Repository where ever you want, but it&amp;rsquo;s recommended to create them in a seperate Repository folder.
While you could name the Repository file and class as you wish, it&amp;rsquo;s recommended to name the Repository EntityNameRepository, to that you could quickly find those in your folder.
Let&amp;rsquo;s assume we have an Project Entity, stored in AppBundle\Entity, it would look like this:</description>
    </item>
    
    <item>
      <title>Monolog  improve your logs</title>
      <link>https://www.wikiod.com/symfony2/monolog--improve-your-logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/symfony2/monolog--improve-your-logs/</guid>
      <description>Add user&amp;rsquo;s details and posted parameters sent to logs # Logs are very important. Recreate an error context can be sometimes very painful due to the lack of information about how and when the error occurred.
This example shows:
How to add user&amp;rsquo;s data in the error logs
How to add post parameters sent when an error occurred
How to use WebProcessor in order to add all data regarding the request like :</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>selenium Tutorial on </title>
    <link>https://www.wikiod.com/docs/selenium/</link>
    <description>Recent content in selenium Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/selenium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with selenium</title>
      <link>https://www.wikiod.com/selenium/getting-started-with-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/getting-started-with-selenium/</guid>
      <description>Simple Selenium test in Java # Below code is simple java program using selenium. The journey of the below code is
Open Firefox browser Open google page Print title of Google page Find the search box location Pass the value as Selenium in the search box Submit the form Shutdown the browser package org.openqa.selenium.example; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.firefox.FirefoxDriver; import java.util.concurrent.TimeUnit; public class Selenium2Example { public static void main(String[] args) { // Create a new instance of the Firefox driver WebDriver driver = new FirefoxDriver(); // An implicit wait is to tell WebDriver to poll the DOM for a certain amount of time // when trying to find an element or elements if they are not immediately available.</description>
    </item>
    
    <item>
      <title>WebDriver Factory</title>
      <link>https://www.wikiod.com/selenium/webdriver-factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/webdriver-factory/</guid>
      <description>WebDriver Factory C# # using OpenQA.Selenium; using OpenQA.Selenium.Chrome; using OpenQA.Selenium.Firefox; using OpenQA.Selenium.IE; /// &amp;lt;summary&amp;gt; /// Factory for creating WebDriver for various browsers. /// &amp;lt;/summary&amp;gt; public static class WebDriverFactory { /// &amp;lt;summary&amp;gt; /// Initilizes IWebDriver base on the given WebBrowser name. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public static IWebDriver CreateWebDriver(WebBrowser name) { switch (name) { case WebBrowser.Firefox: return new FirefoxDriver(); case WebBrowser.IE: case WebBrowser.InternetExplorer: InternetExplorerOptions ieOption = new InternetExplorerOptions(); ieOption.</description>
    </item>
    
    <item>
      <title>Take a screenshot of a webpage</title>
      <link>https://www.wikiod.com/selenium/take-a-screenshot-of-a-webpage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/take-a-screenshot-of-a-webpage/</guid>
      <description>Java Selenium take/save screenshot of webpage and add on report # public void Screenshot() throws Throwable{ final byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES); scenario.embed(screenshot, &amp;quot;image/png&amp;quot;); // ... and embed it in the report. Thread.sleep(1000); } Alternately
public static void captureScreenShot(WebDriver ldriver){ // Take screenshot and store as a file format File src= ((TakesScreenshot)ldriver).getScreenshotAs(OutputType.FILE); try { // now copy the screenshot to desired location using copyFile method FileUtils.copyFile(src, new File(&amp;quot;C:/selenium/&amp;quot;+System.currentTimeMillis()+&amp;quot;.png&amp;quot;)); } catch (IOException e) { System.</description>
    </item>
    
    <item>
      <title>Waiting in Selenium</title>
      <link>https://www.wikiod.com/selenium/waiting-in-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/waiting-in-selenium/</guid>
      <description>One of the most common stumbling blocks for newer Selenium users is waiting until a page is fully loaded. Human users can easily tell if a page has fully loaded or if it is still loading. Selenium, however, just waits for a set amount of time. Therefore, it is often convenient to have a good way to wait for elements in a page. While it is possible to do this with a loop and sleep() functions, there are much cleaner ways already built into Selenium.</description>
    </item>
    
    <item>
      <title>Accepting popup alerts with Selenium</title>
      <link>https://www.wikiod.com/selenium/accepting-popup-alerts-with-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/accepting-popup-alerts-with-selenium/</guid>
      <description>Python example of Accepting alert # from selenium import webdriver # Create a new webdriver driver = webdriver.Chrome() # Get a page that has a popup window (Use mouse to click &amp;quot;try it&amp;quot; button) driver.get(&amp;quot;http://www.w3schools.com/js/tryit.asp?filename=tryjs_alert&amp;quot;) # Accept the opened alert driver.switch_to.alert.accept() C# Extensions to WebDriver # public static IWebDriver dismissAlert(this IWebDriver driver) { try { IAlert alert = driver.SwitchTo().Alert(); alert.Dismiss(); } catch {} return driver; } public static IWebDriver acceptAlert(this IWebDriver driver) { try { IAlert alert = driver.</description>
    </item>
    
    <item>
      <title>First project in selenium with Java</title>
      <link>https://www.wikiod.com/selenium/first-project-in-selenium-with-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/first-project-in-selenium-with-java/</guid>
      <description>This is an introduction to Selenium, using Java. While we don&amp;rsquo;t expect you to know anything regarding Selenium, you have to have prior Java knowledge to follow this course.
Download Links :
Selenium
IntelliJ IDEA
ChromeDriver
JDK 8
Getting Elements in Selenium # Every Html-Element in Selenium is called a WebElement. For example, a p tag would be a WebElement, an a tag would be a WebElement, etc. Consider the following html Structure:</description>
    </item>
    
    <item>
      <title>Getting started with Selenium in python</title>
      <link>https://www.wikiod.com/selenium/getting-started-with-selenium-in-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/getting-started-with-selenium-in-python/</guid>
      <description>What is Selenium?
Selenium is a library of commands to help a programmer interface with a browser like a real user.
Things that Selenium does:
Finding element(s) in a webpage&amp;rsquo;s html
Finds a single element:
driver.find_element_by_css_selector(&amp;quot;css.selector.of.element&amp;quot;) CSS Selector help driver.find_element_by_xpath(&amp;quot;//xpath//of//element&amp;quot;) XPATH help driver.find_element_by_name(&amp;quot;name_of_element&amp;quot;) driver.find_element_by_id(&amp;quot;id_of_element&amp;quot;) driver.find_element_by_partial_link_text(&amp;quot;element_link_text&amp;quot;) driver.find_element_by_class_name(&amp;quot;class_name_of_element&amp;quot;) driver.find_element_by_tag_name(&amp;quot;tag_name_of_element&amp;quot;) Finds a list of elements:
driver.find_elements_by_css_selector(&amp;quot;css.selector.of.elements&amp;quot;) driver.find_elements_by_xpath(&amp;quot;//xpath//of//elements&amp;quot;) driver.find_elements_by_name(&amp;quot;name_of_elements&amp;quot;) driver.find_elements_by_partial_link_text(&amp;quot;elements_link_text&amp;quot;) driver.find_elements_by_class_name(&amp;quot;class_name_of_elements&amp;quot;) driver.find_elements_by_tag_name(&amp;quot;tag_name_of_elements&amp;quot;) Official documentation: selenium-python read the docs
Interact with elements:
&amp;ldquo;method&amp;rdquo; represents any of the above methods to find an element or list of elements.</description>
    </item>
    
    <item>
      <title>Selenium IDE</title>
      <link>https://www.wikiod.com/selenium/selenium-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/selenium-ide/</guid>
      <description>Try a simple Selenium script: Search Wikipedia on Google # Prerequisites:
Install Firefox Install Selenium IDE addon (https://addons.mozilla.org/fr/firefox/addon/selenium-ide/) Open the plugin. A button displaying a red circle must be shown. If it&amp;rsquo;s pressed, it means you can start your scenario. The plugin is recording everything you do within this Firefox instance.
Do whatever you want to be recorded.
In the end, save your scenario; you will notice that Selenium IDE&amp;rsquo;s scenarios are html files.</description>
    </item>
    
    <item>
      <title>WebDriverManager for Selenium - a very neat tool from Boni Garcia</title>
      <link>https://www.wikiod.com/selenium/webdrivermanager-for-selenium---a-very-neat-tool-from-boni-garcia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/webdrivermanager-for-selenium---a-very-neat-tool-from-boni-garcia/</guid>
      <description>I switched to Selenium 3 and started using Chrome instead of Firefox. I discovered that for Chrome I need to download a binary for WebDriver to handle the browser. For that to work I need to set absolute path to this binary as Java variable. If binary gets updated, I need to update that binary manually in my test framework - which takes time and is really annoying. I discovered a very neat Java library that does it for me: https://github.</description>
    </item>
    
    <item>
      <title>Mobile app automation</title>
      <link>https://www.wikiod.com/selenium/mobile-app-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/selenium/mobile-app-automation/</guid>
      <description>Android + Chrome + Python # To be able to run tests Chrome broser should be pre-installed on Android device,
Python + Chrome + Android # To be able to work with web-application on Android device using Selenium below pre-conditions should be met:
Android SDK installed on computer Chrome browser installed on Android device Debugging mode enabled on Android device Start adb and chromedriver server with below commands from cmd/Terminal:</description>
    </item>
    
  </channel>
</rss>

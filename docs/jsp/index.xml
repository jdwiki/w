<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jsp Tutorial on </title>
    <link>https://www.wikiod.com/docs/jsp/</link>
    <description>Recent content in jsp Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jsp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jsp</title>
      <link>https://www.wikiod.com/jsp/getting-started-with-jsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsp/getting-started-with-jsp/</guid>
      <description>Hello World # Content has been moved back to good &amp;lsquo;ol JSP wiki page
Installing JSP # Content has been moved back to good &amp;lsquo;ol JSP wiki page
JavaScript # Content has been moved back to good &amp;lsquo;ol JSP wiki page</description>
    </item>
    
    <item>
      <title>Creating custom tag libraries using JSP 2.0(Without java classes)</title>
      <link>https://www.wikiod.com/jsp/creating-custom-tag-libraries-using-jsp-20without-java-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsp/creating-custom-tag-libraries-using-jsp-20without-java-classes/</guid>
      <description>In order to use custom tags in JSP,we used to have TLD files,along with a Java class to define the custom tags but post JSP 2.0 specs,the same can be achieved,without the need for any Source code files,making it easy to maintain and it can also be created by someone with basic knowledge of JSP tags without need for java code.
Usually for adding static content to a HTML page,we use either</description>
    </item>
    
    <item>
      <title>Directives</title>
      <link>https://www.wikiod.com/jsp/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsp/directives/</guid>
      <description>Syntax # &amp;lt;%@ directiveName attributeName=&amp;ldquo;value&amp;rdquo;%&amp;gt; Simple example # Directives, as the name suggests, are direction or instructions for the container to follow when translating a JSP to a servlet. There are 3 directives namely page, include and taglib which you can use in your JSP.
Below is a simple example of using page directive:
&amp;lt;%@ page isErrorPage=&amp;quot;true&amp;quot; %&amp;gt; This would instruct the container that the JSP file containing this line is an error page.</description>
    </item>
    
    <item>
      <title>Comments in JSP</title>
      <link>https://www.wikiod.com/jsp/comments-in-jsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsp/comments-in-jsp/</guid>
      <description>There are multiple ways to add comment in JSP page, as it is java view technology which primarily focuses on view part of web application which includes html majorly and being java technology it can contain java code as well. So one needs to understand how to use proper comments in jsp.
There are 3 types of comments we can use in JSP page:
JSP comment
HTML comment
Java comment (which can used inside scriplets)</description>
    </item>
    
    <item>
      <title>Implicit objects</title>
      <link>https://www.wikiod.com/jsp/implicit-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsp/implicit-objects/</guid>
      <description>Java objects which are created by web container.There are 9 implicit objects
object Type out JspWriter request HttpServletRequest response HttpServletResponse config ServletConfig application ServletContext session HttpSession pageContext PageContext page Object exception Throwable JSP out implicit object - simply displaying date and time. # &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;% out.print(&amp;quot;Today is:&amp;quot;+java.util.Calendar.getInstance().getTime()); %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; request object in JSP # used to get request information such as parameter, header information, remote address, server name, server port, content type, character encoding.</description>
    </item>
    
  </channel>
</rss>

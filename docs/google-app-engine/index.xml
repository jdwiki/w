<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google-app-engine Tutorial on </title>
    <link>https://www.wikiod.com/docs/google-app-engine/</link>
    <description>Recent content in google-app-engine Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/google-app-engine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with google-app-engine</title>
      <link>https://www.wikiod.com/google-app-engine/getting-started-with-google-app-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/getting-started-with-google-app-engine/</guid>
      <description>Setup # Google AppEngine (GAE) is a Platform as a Service (PaaS) that provides the ability to deploy applications at &amp;ldquo;Google Scale&amp;rdquo;. It is one of the many services on Google Cloud Platform (GCP). Developers can integrate other services such as Google Cloud Storage (GCS) and Google Cloud SQL on GCP easily. Developers can write a set of code that runs locally and can easily be deployed on Google Cloud Platform.</description>
    </item>
    
    <item>
      <title>EdgeCache</title>
      <link>https://www.wikiod.com/google-app-engine/edgecache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/edgecache/</guid>
      <description>Details
When Edge Cache is enabled and working, App Engine sends an age header whose value is the time (in seconds) since the response has been cached. For example, if the response has been cached for two minutes thus far, the response will include a header of age: 120. If no age header is being sent, it&amp;rsquo;s a good sign that you haven&amp;rsquo;t gotten Edge Cache to work yet. Additionally, when the response doesn&amp;rsquo;t include an age header, it means the request missed Edge Cache.</description>
    </item>
    
    <item>
      <title>Google App Engine Quickstart for Java</title>
      <link>https://www.wikiod.com/google-app-engine/google-app-engine-quickstart-for-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/google-app-engine-quickstart-for-java/</guid>
      <description>Before you begin # Before running this sample, you must:
Download and install the Java SE Development Kit (JDK):
Download JDK
Download Apache Maven version 3.3.9 or greater:
Install and configure Maven for your local development environment.
Download the Hello World app # We&amp;rsquo;ve created a simple Hello World app for Java so you can quickly get a feel for deploying an app to Google Cloud Platform. Follow these steps to download Hello World to your local machine.</description>
    </item>
    
    <item>
      <title>Python Runtime Examples for Google Appengine</title>
      <link>https://www.wikiod.com/google-app-engine/python-runtime-examples-for-google-appengine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/python-runtime-examples-for-google-appengine/</guid>
      <description>NDB with Python on AppEngine # NDB relates models as python objects, which can be stored and accessed in the Appengine NoSQL datastore, available to all AppEngine applications.
models.py
from google.appengine.ext import ndb # https://cloud.google.com/appengine/docs/python/ndb/properties class Series(ndb.Model): &amp;quot;&amp;quot;&amp;quot;TV Series Object&amp;quot;&amp;quot;&amp;quot; folder_name = ndb.StringProperty() title = ndb.StringProperty() rating = ndb.StringProperty() banner_blob_key = ndb.BlobKeyProperty() year = ndb.IntegerProperty() plot = ndb.TextProperty() genre = ndb.StringProperty(repeated=True) json_of_show = ndb.JsonProperty() date_added = ndb.DateTimeProperty(auto_now_add=True) date_updated = ndb.DateTimeProperty(auto_now=True) class Episode(ndb.</description>
    </item>
    
    <item>
      <title>Quick start with Users Python API, App Engine Authentication</title>
      <link>https://www.wikiod.com/google-app-engine/quick-start-with-users-python-api-app-engine-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/quick-start-with-users-python-api-app-engine-authentication/</guid>
      <description>Using the Users API is a very simple and flexible way to work the authentication in App Engine, but please make sure that your application cases don&amp;rsquo;t require more elements for the authentication environment.
Note: If you need more information about the traditional structure of an App Engine app, please review this info.
The Users API allows:
Detect whether the current user has signed in. Redirect the user to the appropriate sign-in page to sign in.</description>
    </item>
    
    <item>
      <title>Unit testing with datastore</title>
      <link>https://www.wikiod.com/google-app-engine/unit-testing-with-datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/google-app-engine/unit-testing-with-datastore/</guid>
      <description>Create a context with a strongly consistent data store. # When testing with Google App Engine&amp;rsquo;s testing library the challenges of eventual consistency are present in the same manner they will be in production. Therefore in order to write something into the datastore to test retrieval you have to create a context which is strongly consistent.
type Foo struct { Bar string } func TestDataStore(t *testing.T) { inst, err := aetest.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seaborn Tutorial on </title>
    <link>https://www.wikiod.com/docs/seaborn/</link>
    <description>Recent content in seaborn Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/seaborn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with seaborn</title>
      <link>https://www.wikiod.com/seaborn/getting-started-with-seaborn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/seaborn/getting-started-with-seaborn/</guid>
      <description>Installation or Setup # Detailed instructions on getting seaborn set up or installed.</description>
    </item>
    
    <item>
      <title>Correlation plot</title>
      <link>https://www.wikiod.com/seaborn/correlation-plot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/seaborn/correlation-plot/</guid>
      <description>A correlation plot can be regarded as a subcategory of heatmaps. An out-of-the box seaborn heatmap shows the correlation between two variables twice. A correlation plot should handle duplicated values by masking parts of the map, and / or let the masked part show values instead of colors. A bar chart should also be included.
Basic correlation plot # A basic but illustrative heatmap showing correlations between a number of variables.</description>
    </item>
    
    <item>
      <title>Barplot</title>
      <link>https://www.wikiod.com/seaborn/barplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/seaborn/barplot/</guid>
      <description>Barplot with Gradient # Imagine you have a simple dataframe to plot on a barplot like:
df = pd.DataFrame({&#39;a&#39;:[1,2,3,4,5], &#39;b&#39;:[10,5,2,4,5]}) using seaborn:
sns.barplot(df[&#39;a&#39;], df[&#39;b&#39;], palette=&#39;Blues_d&#39;) you can obtain something like:
then you can also play with the palette option and colormap adding a gradient according to some data like:
sns.barplot(df[&#39;a&#39;], df[&#39;b&#39;], palette=cm.Blues(df[&#39;b&#39;]*10) obtaining:</description>
    </item>
    
  </channel>
</rss>

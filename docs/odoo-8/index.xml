<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>odoo-8 Tutorial on </title>
    <link>https://www.wikiod.com/docs/odoo-8/</link>
    <description>Recent content in odoo-8 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/odoo-8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with odoo-8</title>
      <link>https://www.wikiod.com/odoo-8/getting-started-with-odoo-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/getting-started-with-odoo-8/</guid>
      <description>What is Odoo? # Odoo (formerly known as OpenERP and before that, TinyERP) is a suite of open core enterprise management applications. Targeting companies of all sizes, the application suite covers all business needs, from Website/Ecommerce down to manufacturing, inventory and accounting, all seamlessly integrated. It is the first time ever a software editor managed to reach such a functional coverage. Odoo is the most installed business software in the world.</description>
    </item>
    
    <item>
      <title>RPC using Odoo v8 API (Call Python function from JavaScript)</title>
      <link>https://www.wikiod.com/odoo-8/rpc-using-odoo-v8-api-call-python-function-from-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/rpc-using-odoo-v8-api-call-python-function-from-javascript/</guid>
      <description>If you are considering to add new methods in Python to use them in RPC from JavaScript, then consider the following options of method decorators: if you&amp;rsquo;ve to deal with ids/recordsets then for python method definition choose decorator:
@api.multi - to get recordset in your method @api.one - to get browse_records one by one in your method in above examples @api.multi is used, but @api.one also may be used to deal with ids, depending on requirements (However, it&amp;rsquo;s strongly recommended to use @api.</description>
    </item>
    
    <item>
      <title>How to activate OpenERP Developer Mode</title>
      <link>https://www.wikiod.com/odoo-8/how-to-activate-openerp-developer-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/how-to-activate-openerp-developer-mode/</guid>
      <description>Developer Mode
Odoo developer mode allows you to make substantial modifications to the Odoo database such as adding fields to your documents and views. You change the default views of your actions and can even create dynamic forms based on other fields within your models.
Advantage
While Odoo is a powerful application framework the development cycle can be brutal to test changes to your application. By utilizing the developer mode you can test expressions and solve many functional problems without having to restart the server over and over to test simple changes.</description>
    </item>
    
    <item>
      <title>Configure Email - Office 365 in Odoo</title>
      <link>https://www.wikiod.com/odoo-8/configure-email---office-365-in-odoo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/configure-email---office-365-in-odoo/</guid>
      <description>Configure E-Mail # - Initially check your E-Mail Settings
In Odoo go to Settings &amp;ndash;&amp;gt; Email . Enter the field values in &amp;ldquo;Incoming Mail Servers&amp;rdquo; &amp;amp; &amp;ldquo;Outgoing Mail Servers&amp;rdquo; Options. </description>
    </item>
    
    <item>
      <title>What are the ORM Methods and details?</title>
      <link>https://www.wikiod.com/odoo-8/what-are-the-orm-methods-and-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/what-are-the-orm-methods-and-details/</guid>
      <description>Create method: Create new record with specified value. Takes a number of field values, and returns a recordset containing the record created
def create(self,vals): return super(class_name, self).create(vals) Write Method: Update records with given ids with the given field values.Takes a number of field values, writes them to all the records in its recordset. Does not return anything
def write(self,vals): return super(class_name, self).write(vals) Search method: Search for records based on a search domain.</description>
    </item>
    
    <item>
      <title>Add CSS and Javascript files to Odoo module</title>
      <link>https://www.wikiod.com/odoo-8/add-css-and-javascript-files-to-odoo-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/add-css-and-javascript-files-to-odoo-module/</guid>
      <description>Syntax # Note about XML syntax: As the record is made inside of XML file, you can not leave any tag unclosed as you could in a plain HTML, like: &amp;lt;link rel=&amp;lsquo;stylesheet&amp;rsquo; href=&amp;quot;&amp;hellip;&amp;quot; &amp;gt;, Close the link tag instead, like: &amp;lt;link rel=&amp;lsquo;stylesheet&amp;rsquo; href=&amp;quot;&amp;hellip;&amp;quot; /&amp;gt; Parameters # Possible values of inherit_id parameter meaning web.assets_backend Used in internal pages only, NOT included in a public website. website.assets_frontend Used in a public website only (via &amp;ldquo;website&amp;rdquo; module).</description>
    </item>
    
    <item>
      <title>Custom widgets for fields</title>
      <link>https://www.wikiod.com/odoo-8/custom-widgets-for-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/custom-widgets-for-fields/</guid>
      <description>make sure you properly add javascript file to your module do not forget to add &amp;lsquo;web&amp;rsquo; as dependency in __openerp__.py: &#39;depends&#39;: [&#39;web&#39;,....] Custom widget for numeric fields to use in TreeView # The below example widget demonstrates how to format individual cells of a TreeView column conditionally, depending on value of the field in the particular cell. If value of field is negative, then it&amp;rsquo;ll be displayed in red color and minus symbol will be hidden, otherwise it&amp;rsquo;ll be displayed in normal color .</description>
    </item>
    
    <item>
      <title>Fields used in Odoo 8</title>
      <link>https://www.wikiod.com/odoo-8/fields-used-in-odoo-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/fields-used-in-odoo-8/</guid>
      <description>This is section where you can find the details about the fields that is being used in Odoo 8
Parameters # Parameters Description string=&amp;ldquo;Name&amp;rdquo; Optional label of the field compute=&amp;quot;_compute_name_custom&amp;quot; Transform the fields into computed fields store=True If computed it will store the result select=True Force index on field readonly=True Field will be readonly in views inverse=&amp;quot;_write_name&amp;quot; On update trigger required=True Mandatory field translate=True Translation enable help=&amp;lsquo;blabla&amp;rsquo; Help tooltip text comodel_name=&amp;ldquo;model.</description>
    </item>
    
    <item>
      <title>Create Automated Functions For Model</title>
      <link>https://www.wikiod.com/odoo-8/create-automated-functions-for-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/odoo-8/create-automated-functions-for-model/</guid>
      <description>We often need to run some code automatically during module install. This have many reasons for example configuring Sale module settings to meet our project requirements.
In this topic you will learn how to make automated function run on module install.
First of all you need to create xml file for make function call # &amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;openerp&amp;gt; &amp;lt;data noupdate=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;function model=&amp;quot;*model_name*&amp;quot; name=&amp;quot;_configure_sales&amp;quot;/&amp;gt; &amp;lt;/data&amp;gt; &amp;lt;/openerp&amp;gt; This simple xml file is calls _configure_sales function from model_name model.</description>
    </item>
    
  </channel>
</rss>

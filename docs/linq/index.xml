<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linq Tutorial on </title>
    <link>https://www.wikiod.com/docs/linq/</link>
    <description>Recent content in linq Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/linq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with linq</title>
      <link>https://www.wikiod.com/linq/getting-started-with-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/linq/getting-started-with-linq/</guid>
      <description>Setup # LINQ requires .NET 3.5 or higher (or .NET 2.0 using LINQBridge).
Add a reference to System.Core, if it hasn&amp;rsquo;t been added yet.
At the top of the file, import the namespace:
C# using System; using System.Linq; VB.NET Imports System.Linq The different joins in LINQ # In the following examples, we&amp;rsquo;ll be using the following samples:
List&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;() { new Product() { ProductId = 1, Name = &amp;quot;Book nr 1&amp;quot;, Price = 25 }, new Product() { ProductId = 2, Name = &amp;quot;Book nr 2&amp;quot;, Price = 15 }, new Product() { ProductId = 3, Name = &amp;quot;Book nr 3&amp;quot;, Price = 20 }, }; List&amp;lt;Order&amp;gt; Orders = new List&amp;lt;Order&amp;gt;() { new Order() { OrderId = 1, ProductId = 1, }, new Order() { OrderId = 2, ProductId = 1, }, new Order() { OrderId = 3, ProductId = 2, }, new Order() { OrderId = 4, ProductId = NULL, }, }; INNER JOIN Query Syntax</description>
    </item>
    
    <item>
      <title>Standard Query Operators</title>
      <link>https://www.wikiod.com/linq/standard-query-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/linq/standard-query-operators/</guid>
      <description>Linq queries are written using the Standard Query Operators (which are a set of extension methods that operates mainly on objects of type IEnumerable&amp;lt;T&amp;gt; and IQueryable&amp;lt;T&amp;gt;) or using Query Expressions (which at compile time, are converted to Standard Query Operator method calls).
Query operators provide query capabilities including filtering, projection, aggregation, sorting and more.
Aggregation Operations # Aggregation operations computes a single value from a collection of values.
Aggregate
Performs a custom aggregation operation on the values of a collection.</description>
    </item>
    
    <item>
      <title>Method execution modes - immediate, deferred streaming, deferred non-streaming</title>
      <link>https://www.wikiod.com/linq/method-execution-modes---immediate-deferred-streaming-deferred-non-streaming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/linq/method-execution-modes---immediate-deferred-streaming-deferred-non-streaming/</guid>
      <description>Deferred execution vs immediate execution # Some LINQ methods return a query object. This object does not hold the results of the query; instead, it has all the information needed to generate those results:
var list = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5}; var query = list.Select(x =&amp;gt; { Console.Write($&amp;quot;{x} &amp;quot;); return x; }); The query contains a call to Console.Write, but nothing has been output to the console. This is because the query hasn&amp;rsquo;t been executed yet, and thus the function passed to Select has never been evaluated.</description>
    </item>
    
    <item>
      <title>Linq Using Take while And  Skip While</title>
      <link>https://www.wikiod.com/linq/linq-using-take-while-and--skip-while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/linq/linq-using-take-while-and--skip-while/</guid>
      <description>Take, Skip, TakeWhile and SkipWhile are all called Partitioning Operators since they obtain a section of an input sequence as determined by a given condition. Let us discuss these operators
Take method # The Take Method Takes elements up to a specified position starting from the first element in a sequence. Signature of Take:
Public static IEnumerable&amp;lt;TSource&amp;gt; Take&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source,int count); Example:
int[] numbers = { 1, 5, 8, 4, 9, 3, 6, 7, 2, 0 }; var TakeFirstFiveElement = numbers.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL Tutorial on </title>
    <link>https://www.wikiod.com/docs/sql/</link>
    <description>Recent content in SQL Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with SQL</title>
      <link>https://www.wikiod.com/sql/getting-started-with-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/getting-started-with-sql/</guid>
      <description>Overview # Structured Query Language (SQL) is a special-purpose programming language designed for managing data held in a Relational Database Management System (RDBMS). SQL-like languages can also be used in Relational Data Stream Management Systems (RDSMS), or in &amp;ldquo;not-only SQL&amp;rdquo; (NoSQL) databases.
SQL comprises of 3 major sub-languages:
Data Definition Language (DDL): to create and modify the structure of the database; Data Manipulation Language (DML): to perform Read, Insert, Update and Delete operations on the data of the database; Data Control Language (DCL): to control the access of the data stored in the database.</description>
    </item>
    
    <item>
      <title>SELECT</title>
      <link>https://www.wikiod.com/sql/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/select/</guid>
      <description>The SELECT statement is at the heart of most SQL queries. It defines what result set should be returned by the query, and is almost always used in conjunction with the FROM clause, which defines what part(s) of the database should be queried.
Syntax # SELECT [DISTINCT] [column1] [, [column2] &amp;hellip; ]
FROM [table]
[ WHERE condition ]
[ GROUP BY [column1] [, [column2] &amp;hellip; ]
[ HAVING [column1] [, [column2] &amp;hellip; ]</description>
    </item>
    
    <item>
      <title>JOIN</title>
      <link>https://www.wikiod.com/sql/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/join/</guid>
      <description>JOIN is a method of combining (joining) information from two tables. The result is a stitched set of columns from both tables, defined by the join type (INNER/OUTER/CROSS and LEFT/RIGHT/FULL, explained below) and join criteria (how rows from both tables relate).
A table may be joined to itself or to any other table. If information from more than two tables needs to be accessed, multiple joins can be specified in a FROM clause.</description>
    </item>
    
    <item>
      <title>Example Databases and Tables</title>
      <link>https://www.wikiod.com/sql/example-databases-and-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/example-databases-and-tables/</guid>
      <description>Auto Shop Database # In the following example - Database for an auto shop business, we have a list of departments, employees, customers and customer cars. We are using foreign keys to create relationships between the various tables.
Live example: SQL fiddle
Relationships between tables # Each Department may have 0 or more Employees Each Employee may have 0 or 1 Manager Each Customer may have 0 or more Cars Departments # Id Name 1 HR 2 Sales 3 Tech SQL statements to create the table:</description>
    </item>
    
    <item>
      <title>String Functions</title>
      <link>https://www.wikiod.com/sql/string-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/string-functions/</guid>
      <description>String functions perform operations on string values and return either numeric or string values.
Using string functions, you can, for example, combine data, extract a substring, compare strings, or convert a string to all uppercase or lowercase characters.
Syntax # CONCAT ( string_value1, string_value2 [, string_valueN ] ) LTRIM ( character_expression ) RTRIM ( character_expression ) SUBSTRING ( expression ,start , length ) ASCII ( character_expression ) REPLICATE ( string_expression ,integer_expression ) REVERSE ( string_expression ) UPPER ( character_expression ) TRIM ( [ characters FROM ] string ) STRING_SPLIT ( string , separator ) STUFF ( character_expression , start , length , replaceWith_expression ) REPLACE ( string_expression , string_pattern , string_replacement ) String functions reference for Transact-SQL / Microsoft</description>
    </item>
    
    <item>
      <title>CASE</title>
      <link>https://www.wikiod.com/sql/case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/case/</guid>
      <description>The CASE expression is used to implement if-then logic.
Syntax # CASE input_expression
WHEN compare1 THEN result1
[WHEN compare2 THEN result2]&amp;hellip;
[ELSE resultX]
END CASE
WHEN condition1 THEN result1
[WHEN condition2 THEN result2]&amp;hellip;
[ELSE resultX]
END The simple CASE expression returns the first result whose compareX value is equal to the input_expression.
The searched CASE expression returns the first result whose conditionX is true.
Use CASE to COUNT the number of rows in a column match a condition.</description>
    </item>
    
    <item>
      <title>Filter results using WHERE and HAVING</title>
      <link>https://www.wikiod.com/sql/filter-results-using-where-and-having/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/filter-results-using-where-and-having/</guid>
      <description>Syntax # SELECT column_name
FROM table_name
WHERE column_name operator value SELECT column_name, aggregate_function(column_name)
FROM table_name
GROUP BY column_name
HAVING aggregate_function(column_name) operator value Use BETWEEN to Filter Results # The following examples use the Item Sales and Customers sample databases.
Note: The BETWEEN operator is inclusive.
Using the BETWEEN operator with Numbers:
SELECT * From ItemSales WHERE Quantity BETWEEN 10 AND 17 This query will return all ItemSales records that have a quantity that is greater or equal to 10 and less than or equal to 17.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://www.wikiod.com/sql/sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/sql-injection/</guid>
      <description>SQL injection is an attempt to access a website&amp;rsquo;s database tables by injecting SQL into a form field. If a web server does not protect against SQL injection attacks, a hacker can trick the database into running the additional SQL code. By executing their own SQL code, hackers can upgrade their account access, view someone else&amp;rsquo;s private information, or make any other modifications to the database.
SQL injection sample # Assuming the call to your web application&amp;rsquo;s login handler looks like this:</description>
    </item>
    
    <item>
      <title>UNION  UNION ALL</title>
      <link>https://www.wikiod.com/sql/union--union-all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/union--union-all/</guid>
      <description>UNION keyword in SQL is used to combine to SELECT statement results with out any duplicate.
In order to use UNION and combine results both SELECT statement should have same number of column with same data type in same order, but the length of column can be different.
Syntax # SELECT column_1 [, column_2 ] FROM table_1 [, table_2 ] [WHERE condition]
UNION | UNION ALL
SELECT column_1 [, column_2 ] FROM table_1 [, table_2 ] [WHERE condition] UNION and UNION ALL clauses combine the result-set of two or more identically structured SELECT statements into a single result / table.</description>
    </item>
    
    <item>
      <title>CREATE TABLE</title>
      <link>https://www.wikiod.com/sql/create-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sql/create-table/</guid>
      <description>The CREATE TABLE statement is used create a new table in the database. A table definition consists of a list of columns, their types, and any integrity constraints.
Syntax # CREATE TABLE tableName( [ColumnName1] [datatype1] [, [ColumnName2] [datatype2] &amp;hellip;] ) Parameters # Parameter Details tableName The name of the table columns Contains an &amp;rsquo;enumeration&amp;rsquo; of all the columns that the table have. See Create a New Table for more details. Table names must be unique.</description>
    </item>
    
  </channel>
</rss>

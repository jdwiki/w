<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android Tutorial on </title>
    <link>https://www.wikiod.com/docs/android/</link>
    <description>Recent content in Android Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Android</title>
      <link>https://www.wikiod.com/android/getting-started-with-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/getting-started-with-android/</guid>
      <description>Creating a New Project # Set up Android Studio # Start by [setting up Android Studio](https://www.wikiod.com/android/getting-started-with-android#Setting up Android Studio) and then open it. Now, you&amp;rsquo;re ready to make your first Android App!
Note: this guide is based on Android Studio 2.2, but the process on other versions is mainly the same.
Configure Your Project # Basic Configuration # You can start a new project in two ways:
Click Start a New Android Studio Project from the welcome screen.</description>
    </item>
    
    <item>
      <title>Intent</title>
      <link>https://www.wikiod.com/android/intent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/intent/</guid>
      <description>An Intent is a small message passed around the Android system. This message may hold information about our intention to perform a task.
It is basically a passive data structure holding an abstract description of an action to be performed.
Syntax # Intent Intent() Intent Intent(Intent intent) Intent Intent(String action) Intent Intent(String action, Uri uri) Intent Intent(Context packageContext, Class&lt;?&gt; cls) Intent Intent(String action, Uri uri, Context packageContext, Class&lt;?&gt; cls) void startActivity(Intent intent) void startActivity(Intent intent, Bundle options) void startActivityForResult (Intent intent, int requestCode) void startActivityForResult (Intent intent, int requestCode, Bundle options) Intent putExtra(String name, double[] value) Intent putExtra(String name, int value) Intent putExtra(String name, CharSequence value) Intent putExtra(String name, char value) Intent putExtra(String name, Bundle value) Intent putExtra(String name, Parcelable[] value) Intent putExtra(String name, Serializable value) Intent putExtra(String name, int[] value) Intent putExtra(String name, float value) Intent putExtra(String name, byte[] value) Intent putExtra(String name, long[] value) Intent putExtra(String name, Parcelable value) Intent putExtra(String name, float[] value) Intent putExtra(String name, long value) Intent putExtra(String name, String[] value) Intent putExtra(String name, boolean value) Intent putExtra(String name, boolean[] value) Intent putExtra(String name, short value) Intent putExtra(String name, double value) Intent putExtra(String name, short[] value) Intent putExtra(String name, String value) Intent putExtra(String name, byte value) Intent putExtra(String name, char[] value) Intent putExtra(String name, CharSequence[] value) Parameters # Parameter Details intent The intent to start requestCode Unique number to identify the request options Additional options for how the Activity should be started name The name of the extra data value The value of the extra data CHOOSE_CONTACT_REQUEST_CODE the code of the request, to identify it on onActivityResult method action Any action to perform via this intent, ex: Intent.</description>
    </item>
    
    <item>
      <title>Material Design</title>
      <link>https://www.wikiod.com/android/material-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/material-design/</guid>
      <description>Material Design is a comprehensive guide for visual, motion, and interaction design across platforms and devices.
Also see the original Android blog post introducing the Design Support Library
Official Documentation
https://developer.android.com/design/material/index.html
Guidelines for Material Design
https://material.io/guidelines
Other design resources and libraries
https://design.google.com/resources/
Adding a Toolbar # A Toolbar is a generalization of ActionBar for use within application layouts. While an ActionBar is traditionally part of an Activity&#39;s opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy.</description>
    </item>
    
    <item>
      <title>Gradle for Android</title>
      <link>https://www.wikiod.com/android/gradle-for-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/gradle-for-android/</guid>
      <description>Gradle is a JVM-based build system that enables developers to write high-level scripts that can be used to automate the process of compilation and application production. It is a flexible plugin-based system, which allows you to automate various aspects of the build process; including compiling and signing a .jar, downloading and managing external dependencies, injecting fields into the AndroidManifest or utilising specific SDK versions.
Syntax # apply plugin: The plugins which should been used normally just &#39;com.</description>
    </item>
    
    <item>
      <title>RecyclerView</title>
      <link>https://www.wikiod.com/android/recyclerview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/recyclerview/</guid>
      <description>RecyclerView is a more advanced version of List View with improved performance and additional features.
Parameters # Parameter Detail Adapter A subclass of RecyclerView.Adapter responsible for providing views that represent items in a data set Position The position of a data item within an Adapter Index The index of an attached child view as used in a call to getChildAt(int). Contrast with Position Binding The process of preparing a child view to display data corresponding to a position within the adapter Recycle (view) A view previously used to display data for a specific adapter position may be placed in a cache for later reuse to display the same type of data again later.</description>
    </item>
    
    <item>
      <title>Creating Custom Views</title>
      <link>https://www.wikiod.com/android/creating-custom-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/creating-custom-views/</guid>
      <description>Creating Custom Views # If you need a completely customized view, you&amp;rsquo;ll need to subclass View (the superclass of all Android views) and provide your custom sizing (onMeasure(...)) and drawing (onDraw(...)) methods:
Create your custom view skeleton: this is basically the same for every custom view. Here we create the skeleton for a custom view that can draw a smiley, called SmileyView:
public class SmileyView extends View { private Paint mCirclePaint; private Paint mEyeAndMouthPaint; private float mCenterX; private float mCenterY; private float mRadius; private RectF mArcBounds = new RectF(); public SmileyView(Context context) { this(context, null, 0); } public SmileyView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public SmileyView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initPaints(); } private void initPaints() {/* .</description>
    </item>
    
    <item>
      <title>Memory Leaks</title>
      <link>https://www.wikiod.com/android/memory-leaks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/memory-leaks/</guid>
      <description>Avoid leaking Activities with AsyncTask # A word of caution: AsyncTask has many gotcha&amp;rsquo;s apart from the memory leak described here. So be careful with this API, or avoid it altogether if you don&amp;rsquo;t fully understand the implications. There are many alternatives (Thread, EventBus, RxAndroid, etc).
One common mistake with AsyncTask is to capture a strong reference to the host Activity (or Fragment):
class MyActivity extends Activity { private AsyncTask&amp;lt;Void, Void, Void&amp;gt; myTask = new AsyncTask&amp;lt;Void, Void, Void&amp;gt;() { // Don&#39;t do this!</description>
    </item>
    
    <item>
      <title>SQLite</title>
      <link>https://www.wikiod.com/android/sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/sqlite/</guid>
      <description>SQLite is a relational database management system written in C. To begin working with SQLite databases within the Android framework, define a class that extends SQLiteOpenHelper, and customize as needed.
The SQLiteOpenHelper class defines static onCreate() and onUpgrade() methods. These methods are called in the corresponding methods of a SQLiteOpenHelper subclass that you customize with your own tables.
onUpgrade() method # SQLiteOpenHelper is a helper class to manage database creation and version management.</description>
    </item>
    
    <item>
      <title>JSON in Android with org.json</title>
      <link>https://www.wikiod.com/android/json-in-android-with-orgjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/json-in-android-with-orgjson/</guid>
      <description>Syntax # Object : An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma).
Array : An array is an ordered collection of values. An array begins with [ (left bracket) and ends with ] (right bracket). Values are separated by , (comma).</description>
    </item>
    
    <item>
      <title>ADB (Android Debug Bridge)</title>
      <link>https://www.wikiod.com/android/adb-android-debug-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/android/adb-android-debug-bridge/</guid>
      <description>ADB (Android Debug Bridge) is a command line tool that used to communicate with an emulator instance or connected Android device.
Overview of ADB A large portion of this topic was split out to https://www.wikiod.com/android/adb-shell
List of examples moved to https://www.wikiod.com/android/adb-shell#t=201703130900469866621:
https://www.wikiod.com/android/adb-shell/3967/granting-revoking-api-23-permissions https://www.wikiod.com/android/adb-shell/3958/send-text-key-pressed-and-touch-events-to-android-device-via-adb https://www.wikiod.com/android/adb-shell/3959/list-packages https://www.wikiod.com/android/adb-shell/9559/recording-the-display https://www.wikiod.com/android/adb-shell/18032/open-developer-options https://www.wikiod.com/android/adb-shell/16607/set-date-time-via-adb https://www.wikiod.com/android/adb-shell/14524/changing-file-permissions-using-chmod-command https://www.wikiod.com/android/adb-shell/18033/generating-a-boot-complete-broadcast https://www.wikiod.com/android/adb-shell/3968/print-application-data https://www.wikiod.com/android/adb-shell/18323/view-external-secondary-storage-content https://www.wikiod.com/android/adb-shell/29140/adb-shell https://www.wikiod.com/android/adb-shell/29141/kill-a-process-inside-an-android-device Connect ADB to a device via WiFi # The standard ADB configuration involves a USB connection to a physical device.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scheme Tutorial on </title>
    <link>https://www.wikiod.com/docs/scheme/</link>
    <description>Recent content in scheme Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with scheme</title>
      <link>https://www.wikiod.com/scheme/getting-started-with-scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/getting-started-with-scheme/</guid>
      <description>Installing CHICKEN Scheme # CHICKEN is a Scheme interpreter and compiler with its own extension module system called &amp;ldquo;eggs&amp;rdquo;. It is capable of compiling Scheme to native code by first compiling Scheme to C.
Installing # Debian or Ubuntu or other derived distros: # sudo apt-get install chicken-bin Fedora / RHEL / CentOS: # sudo yum install chicken-bin Arch Linux: # sudo pacman -S chicken Gentoo: # sudo emerge -av dev-scheme/chicken OS X with Homebrew: # brew install chicken OpenBSD # doas pkg_add -vi chicken Microsoft Windows # Install MSYS2</description>
    </item>
    
    <item>
      <title>Scheme Macros</title>
      <link>https://www.wikiod.com/scheme/scheme-macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/scheme-macros/</guid>
      <description>Hygienic and referentially-transparent macros with syntax-rules # LISP and Scheme&amp;rsquo;s greatest advantage over other mainstream programming language is their macro system. Unlike the C preprocessor and other macro languages, Scheme macros take parsed code as input and return expanded code as output. This is one of the applications of Scheme&amp;rsquo;s “code is data” phrase, and it is what makes the language so powerful.
Macros in Scheme are created with define-syntax, which can define a macro in a number of ways.</description>
    </item>
    
    <item>
      <title>Implementation of different sortings algorithms</title>
      <link>https://www.wikiod.com/scheme/implementation-of-different-sortings-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/implementation-of-different-sortings-algorithms/</guid>
      <description>Quicksort # Quicksort is a common sorting algorithm with an average case complexity of O(n log n) and a worst case complexity of O(n^2). Its advantage over other O(n log n) methods is that it can be executed in-place.
Quicksort splits the input on a chosen pivot value, separating the list into those values that are less than and those values that are greater than (or equal to) the pivot. Splitting the list is easily done with filter.</description>
    </item>
    
    <item>
      <title>Input Output in Scheme</title>
      <link>https://www.wikiod.com/scheme/input-output-in-scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/input-output-in-scheme/</guid>
      <description>Input and Output in scheme is usually handled trough ports. A port is a data structure which is used to interact with the world outside Scheme. A Port isn&amp;rsquo;t limited to files but can be used to read/write to sockets.
In some ways, the port object is some kind of universal object that can not only manipulate file and sockets but any kind of read/write operation with the OS.
For example, one could implement a port that can write to a printer or even control a CNC machine from Scheme using a port.</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://www.wikiod.com/scheme/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/syntax/</guid>
      <description>S-Expression # An expression in Scheme is what is going to get executed. A S-expression, as it&amp;rsquo;s usually called starts with a ( and end with a ). The first member of the expression is what is going to get executed. The following member of the expression are the parameters that will be sent to the expression during the evaluation of the expression.
For example adding numbers:
(+ 1 2 3) In this case, + is a symbol to a add function that takes multiple parameters.</description>
    </item>
    
    <item>
      <title>Pairs</title>
      <link>https://www.wikiod.com/scheme/pairs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scheme/pairs/</guid>
      <description>A Pair is one of the most basic data type in scheme. It is also usually called cons cells.
Create a pair # A pair can be create with the cons function. The name of the function stand for constructor. In Scheme, everything is pretty much based on pairs.
(cons a b) The function return a pair containing the element a and b. The first parameter of cons is called car (Content Address Register) and the second argument is the cdr (Content Decrement Register).</description>
    </item>
    
  </channel>
</rss>

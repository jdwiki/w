<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mercurial Tutorial on </title>
    <link>https://www.wikiod.com/docs/mercurial/</link>
    <description>Recent content in mercurial Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/mercurial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with mercurial</title>
      <link>https://www.wikiod.com/mercurial/getting-started-with-mercurial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mercurial/getting-started-with-mercurial/</guid>
      <description>Installation and Setup # You can download Mercurial from the project&amp;rsquo;s website, and there are graphical utilities for Windows, Linux and OSX if you&amp;rsquo;d prefer that to a command line interface. Most Unix package managers include Mercurial, for example on Debian/Ubuntu:
$ apt-get install mercurial You can verify Mercurial is installed by running:
$ hg --version Setup # Mercurial works out of the box, but you&amp;rsquo;ll likely want to configure Mercurial to know who you are before you go further.</description>
    </item>
    
    <item>
      <title>Common operations</title>
      <link>https://www.wikiod.com/mercurial/common-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mercurial/common-operations/</guid>
      <description>Using the bisect command to find a bug # The bisect command helps you to track down the changeset that introduced a bug.
Reset the bisect state and mark the current revision as bad (it contains the bug!)
hg bisect --reset hg bisect --bad Go back to a point where you think the bug isn&amp;rsquo;t present
hg update -r -200 Now you&amp;rsquo;ve to test the software and if your assumption was right (bug not present), mark the revision as good:</description>
    </item>
    
    <item>
      <title>Mercurial Queues</title>
      <link>https://www.wikiod.com/mercurial/mercurial-queues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mercurial/mercurial-queues/</guid>
      <description>Syntax # hg qnew -m &amp;ldquo;My commit message&amp;rdquo; myPatch hg qpop hg qpush hg qrefresh -m &amp;ldquo;My new commit message&amp;rdquo; hg qapplied hg qseries hg qfinish hg qdelete myPatch hg qfold myPatch hg qqueue &amp;ndash;list hg qqueue &amp;ndash;create myNewQueue hg qqueue &amp;ndash;delete myNewQueue Enable Extension # Edit Mercurial.ini (Windows) or .hgrc (Linux/OSX):
[extenstions] mq = Create and Update Patches # Create new patches with hg qnew patch-name and then update them with new changes with hg qrefresh:</description>
    </item>
    
    <item>
      <title>List of commands</title>
      <link>https://www.wikiod.com/mercurial/list-of-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mercurial/list-of-commands/</guid>
      <description>Commands for preparing commits # add: add the specified files on the next commit addremove: add all new files, delete all missing files backout: reverse effect of earlier changeset commit, ci: commit the specified files or all outstanding changes copy, cp: mark files as copied for the next commit forget: forget the specified files on the next commit merge: merge another revision into working directory remove, rm: remove the specified files on the next commit rename, move, mv: rename files; equivalent of copy + remove resolve: redo merges or set/view the merge status of files revert: restore files to their freshly-checked-out state Inspecting the history # annotate, blame: show changeset information by line for each file bisect: subdivision search of changesets cat: output the current or given revision of files diff: diff repository (or selected files) grep: search for a pattern in specified files and revisions log, history: show revision history of entire repository or files Exchanging changesets with remote repos # archive: create an unversioned archive of a repository revision bundle: create a changegroup file clone: make a copy of an existing repository export: dump the header and diffs for one or more changesets graft: copy changes from other branches onto the current branch incoming: show new changesets found in source import, patch: import an ordered set of patches init: create a new repository in the given directory outgoing: show changesets not found in the destination phase: set or show the current phase name pull: pull changes from the specified source push: push changes to the specified destination recover: roll back an interrupted transaction rollback: roll back the last transaction (DANGEROUS) (DEPRECATED) serve: start stand-alone webserver unbundle: apply one or more changegroup files Status: where are you now?</description>
    </item>
    
  </channel>
</rss>

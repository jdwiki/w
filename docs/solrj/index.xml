<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>solrj Tutorial on </title>
    <link>https://www.wikiod.com/docs/solrj/</link>
    <description>Recent content in solrj Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/solrj/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with solrj</title>
      <link>https://www.wikiod.com/solrj/getting-started-with-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/solrj/getting-started-with-solrj/</guid>
      <description>Installation or Setup # SolrJ comes as part of the Solr distribution since Solr 1.x. The latest Solr version can be downloaded here. From Solr-6.3.0 that is the latest version available, we need to get the following libraries and add them to our build path: /dist/apache-solr-solrj-.jar /dist/solrj-lib/
Once we&amp;rsquo;re done, SolrJ is ready to communicate with our Solr instance. In the following example we&amp;rsquo;ll see how to use SolrJ to query or add content to Solr.</description>
    </item>
    
    <item>
      <title>Get highlighted snippets with SolrJ</title>
      <link>https://www.wikiod.com/solrj/get-highlighted-snippets-with-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/solrj/get-highlighted-snippets-with-solrj/</guid>
      <description>When we get highlighted snippets in our Solr response programmatically, we need to extract and handle them. The code below shows how to do that with SolrJ.
Get highlighted text for single-valued fields # public String getHighlightedText(final QueryResponse queryResponse, final String fieldName, final String docId) { String highlightedText = &amp;quot;&amp;quot;; Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; highlights = queryResponse.getHighlighting(); if (highlights!=null &amp;amp;&amp;amp; MapUtils.isNotEmpty(highlights.get(docId))) { List&amp;lt;String&amp;gt; snippets = highlights.get(docId).get(fieldName); if (CollectionUtils.isNotEmpty(snippets)) { highlightedText = getFragments(snippets); } } return highlightedText; } private static final String getFragments(List&amp;lt;String&amp;gt; snippets){ StringBuilder fragments = new StringBuilder(); for (int i = 0; i &amp;lt; snippets.</description>
    </item>
    
    <item>
      <title>Get shard leaders using SolrJ</title>
      <link>https://www.wikiod.com/solrj/get-shard-leaders-using-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/solrj/get-shard-leaders-using-solrj/</guid>
      <description>In some cases, for instance when we want to backup solrcloud collections programmatically, we need to know what are the Shard Leaders. The example below shows how that can be achieved using SolrJ.
Get shard leaders using SolrJ API # private final String COLLECTION_NAME = &amp;quot;myCollection&amp;quot;; private final String ZOOKEPER_CLIENT_TIMEOUT_MS = &amp;quot;1000000&amp;quot; private Map&amp;lt;String, String&amp;gt; getShardLeaders(CloudSolrServer cloudSolrServer) throws InterruptedException, KeeperException { Map&amp;lt;String, String&amp;gt; shardleaders = new TreeMap&amp;lt;String, String&amp;gt;(); ZkStateReader zkStateReader = cloudSolrServer.</description>
    </item>
    
  </channel>
</rss>

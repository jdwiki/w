<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>azure Tutorial on </title>
    <link>https://www.wikiod.com/docs/azure/</link>
    <description>Recent content in azure Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/azure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with azure</title>
      <link>https://www.wikiod.com/azure/getting-started-with-azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/getting-started-with-azure/</guid>
      <description>Azure N-series(GPU) : install CUDA, cudnn, Tensorflow on UBUNTU 16.04 LTS # After spending more than 5 hours, i found this easy solution:
-To verify that the system has a CUDA-capable GPU, run the following command:
lspci | grep -i NVIDIA You will see output similar to the following example (showing an NVIDIA Tesla K80/M60 card):
-Disabling the nouveau driver:
sudo -i rmmod nouveau -After a reboot: sudo reboot, verify the driver is installed properly by issuing:</description>
    </item>
    
    <item>
      <title>Azure Powershell</title>
      <link>https://www.wikiod.com/azure/azure-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-powershell/</guid>
      <description>Login to Azure # Classic (Service Management) mode:
Add-AzureAccount This will authenticate you using Azure Active Directory, and PowerShell gets an access token that expires after about 12 hours. So you must repeat the authentication after 12 hours.
An alternative is to run the following cmdlet:
Get-AzurePublishSettingsFile This opens a browser window where you can download a publish settings file. This file contains a certificate that allows PowerShell to authenticate. Then you can import your publish settings file using the following:</description>
    </item>
    
    <item>
      <title>Azure DocumentDB</title>
      <link>https://www.wikiod.com/azure/azure-documentdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-documentdb/</guid>
      <description>Connect to an account (.NET) # To connect to your DocumentDB database you will need to create a DocumentClient with your Endpoint URI and the Service Key (you can get both from the portal).
First of all, you will need the following using clauses:
using System; using Microsoft.Azure.Documents.Client; Then you can create the client with:
var endpointUri = &amp;quot;&amp;lt;your endpoint URI&amp;gt;&amp;quot;; var primaryKey = &amp;quot;&amp;lt;your key&amp;gt;&amp;quot;; var client = new DocumentClient(new Uri(endpointUri), primaryKey); Create a database (.</description>
    </item>
    
    <item>
      <title>Azure-Automation</title>
      <link>https://www.wikiod.com/azure/azure-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-automation/</guid>
      <description>Parameters # Parameter Name Description resourceGroupName The Azure Resource group where the storage account sits connectionName The Azure Run As connection (service pricipal) that was created when the automation account was created StorageAccountName The name of the Azure Storage account ContainerName The blob container name DaysOld The number of days a blob can be before it is deleted Ensure you have access to Azure Active Directory so, on Automation Account creation, Azure creates a RunAs account for you.</description>
    </item>
    
    <item>
      <title>Azure Virtual Machines</title>
      <link>https://www.wikiod.com/azure/azure-virtual-machines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-virtual-machines/</guid>
      <description>Create Azure VM by classic ASM API # # 1. Login Azure by admin account Add-AzureAccount # # 2. Select subscription name $subscriptionName = Get-AzureSubscription | Select -ExpandProperty SubscriptionName # # 3. Create storage account $storageAccountName = $VMName # here we use VMName to play the storage account name and create it, you can choose your name or use existed one to replace the storage account creation operation New-AzureStorageAccount -StorageAccountName $storageAccountName -Location $Location | Out-Null # # 4.</description>
    </item>
    
    <item>
      <title>Azure Service Fabric</title>
      <link>https://www.wikiod.com/azure/azure-service-fabric/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-service-fabric/</guid>
      <description>Azure Service Fabric is one of the PaaS services offered by Azure. It is based on the notion of containers and services: unlike Compute services (Web Roles and Worker roles), your code does not run inside one (or more) Virtual Machines, but instead they are run inside a container, sharing it with other services.
It is important to note that here, and throughout Microsoft articles and documentation on Service Fabric, container is intended in its more general meaning, not as a &amp;ldquo;Docker&amp;rdquo; style container.</description>
    </item>
    
    <item>
      <title>Azure Resource Manager Templates</title>
      <link>https://www.wikiod.com/azure/azure-resource-manager-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-resource-manager-templates/</guid>
      <description>Syntax # Syntax for ARM templates is well documented: https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/ Create extension resource # Extension Resources in Azure are resources that extend other resources.
This template creates an Azure Key Vault as well as a DiagnosticSettings extension.
Things to note:
The extension resource is created under the resources attribute of the parent resource
It needs to have a dependsOn attribute referencing the parent resource (to prevent ARM from attempting to create the extension in parallel with the parent resource)</description>
    </item>
    
    <item>
      <title>Azure Storage Options</title>
      <link>https://www.wikiod.com/azure/azure-storage-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-storage-options/</guid>
      <description>Connecting to an Azure Storage Queue # Storage options in Azure provide a &amp;ldquo;REST&amp;rdquo; API (or, better, an HTTP API)
The Azure SDK offers clients for several languages. Let&amp;rsquo;s see for example how to initialize one of the storage objects (a queue) using the C# client libraries.
All access to Azure Storage is done through a storage account. You can create a storage account in several ways: through the portal, through the Azure CLI, PowerShell, Azure Resource Manager (ARM), &amp;hellip;</description>
    </item>
    
    <item>
      <title>Azure Media Service Account</title>
      <link>https://www.wikiod.com/azure/azure-media-service-account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/azure/azure-media-service-account/</guid>
      <description>A media service account is a Azure based account which gives you access to cloud based media services in Azure. Stores metadata of the media files you create, instead saving the actual media content. To work with media service account, you must have an associated storage account. While creating a media service account, you can either select the storage account you already have or you can create a new one. Since the media service account and storage account is treated separately, the content will be available in your storage account even if you delete your media service account Please be noted that your storage account region must be same as your media service account region.</description>
    </item>
    
  </channel>
</rss>

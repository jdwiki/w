<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shapeless Tutorial on </title>
    <link>https://www.wikiod.com/docs/shapeless/</link>
    <description>Recent content in shapeless Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/shapeless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with shapeless</title>
      <link>https://www.wikiod.com/shapeless/getting-started-with-shapeless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shapeless/getting-started-with-shapeless/</guid>
      <description>Installation or Setup # Detailed instructions on getting shapeless set up or installed.</description>
    </item>
    
    <item>
      <title>Typeclass derivation</title>
      <link>https://www.wikiod.com/shapeless/typeclass-derivation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/shapeless/typeclass-derivation/</guid>
      <description>ProductTypeClass # trait Show[T] { def show(t: T): String } object Show extends ProductTypeClassCompanion[Show] { def apply[T](implicit T: Show[T]) = T def from[T](f: T =&amp;gt; String): Show[T] = new Show[T] { def show(t: T): String = f(t) } implicit val string = from[String](_.reverse) implicit val int = from[Int](Integer.toHexString) object typeClass extends ProductTypeClass[Show] { override def product[H, T &amp;lt;: HList](ch: Show[H], ct: Show[T]): Show[::[H, T]] = from(ht =&amp;gt; ch.show(ht.head) + &amp;quot; &amp;quot; + ct.</description>
    </item>
    
  </channel>
</rss>

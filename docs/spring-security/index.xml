<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-security Tutorial on </title>
    <link>https://www.wikiod.com/docs/spring-security/</link>
    <description>Recent content in spring-security Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/spring-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with spring-security</title>
      <link>https://www.wikiod.com/spring-security/getting-started-with-spring-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-security/getting-started-with-spring-security/</guid>
      <description>Spring Securitiy to protect REST API endpoints # Add below entries in pom.xml.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-config&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Important for Spring version greater than 3.1:
Bean creation error for org.springframework.security.filterChains comes when you are using Spring version higher than 3.1 and have not added dependencies manually for spring-aop, spring-jdbc, spring-tx and spring-expressions in your pom.xml.
Add below entries in Spring context. We want to protect two REST endpoints (helloworld &amp;amp; goodbye).</description>
    </item>
    
    <item>
      <title>Spring Security Configuration</title>
      <link>https://www.wikiod.com/spring-security/spring-security-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-security/spring-security-configuration/</guid>
      <description>Configuration # Here is the corresponding Java configuration:
Add this annotation to an @Configuration class to have the Spring Security configuration defined in any WebSecurityConfigurer or more likely by extending the WebSecurityConfigurerAdapter base class and overriding individual methods:
@Configuration @EnableWebSecurity @Profile(&amp;quot;container&amp;quot;) public class XSecurityConfig extends WebSecurityConfigurerAdapter { inMemoryAuthentication
It defines an in memory authentication scheme with a user that has the username &amp;ldquo;user&amp;rdquo;, the password &amp;ldquo;password&amp;rdquo;, and the role &amp;ldquo;ROLE_USER&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Spring Security config with java (not XML)</title>
      <link>https://www.wikiod.com/spring-security/spring-security-config-with-java-not-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-security/spring-security-config-with-java-not-xml/</guid>
      <description>Typical database backed, annotation base spring security setup.
Syntax # configureGlobal() configure the auth object. The later two SQLs may be optional. configure() method tells spring mvc how to authenticate request some url we do not need to authenticate others will redirect to /login if not yet authenticated. Basic spring security with annotation, SQL datasource # @Configuration public class AppSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired DataSource dataSource; @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception { auth.</description>
    </item>
    
  </channel>
</rss>

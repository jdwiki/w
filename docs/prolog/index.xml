<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prolog Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/prolog/</link>
    <description>Recent content in Prolog Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/prolog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Prolog Language</title>
      <link>https://www.wikiod.com/prolog/getting-started-with-prolog-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/getting-started-with-prolog-language/</guid>
      <description>Database Programming # Prolog categorizes everything into:
Atoms - Any sequence of characters that do not start with an uppercase alphabet. Eg - a, b, okay Numbers - There is no special syntax for numbers, no declaration is required. Eg 1, 22, 35.8 Variables - A string which starts with an uppercase character or underscore (_). Eg X, Y, Abc, AA Complex Terms - They are made from a functor and a sequence of arguments.</description>
    </item>
    
    <item>
      <title>Control structures</title>
      <link>https://www.wikiod.com/prolog/control-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/control-structures/</guid>
      <description>Disjunction (logical OR), implicit vs. explict # Prolog tries alternative clauses for a predicate in the order of appearance:
likes(alice, music). likes(bob, hiking). // Either alice likes music, or bob likes hiking will succeed. The disjunction (OR) operator ; can be used to express this in one rule:
likes(P,Q) :- ( P = alice , Q = music ) ; ( P = bob , Q = hiking ). Parentheses are important here for clarity.</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://www.wikiod.com/prolog/data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/data-structures/</guid>
      <description>Association lists # In all serious Prolog systems, association lists are available to allow faster than linear access to a collection of elements. These association lists are typically based on balanced trees like AVLÂ trees. There is a public domain library called library(assoc) that ships with many Prolog systems and provides O(log(N)) operations for inserting, fetching and changing elements to a collection.
Lists # Lists are a special kind of compound term.</description>
    </item>
    
    <item>
      <title>Monotonicity</title>
      <link>https://www.wikiod.com/prolog/monotonicity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/monotonicity/</guid>
      <description>Monotonic alternatives for non-monotonic constructs # Here are examples of how to use monotonic predicates instead of impure, non-monotonic constructs in your programs:
dif/2 is meant to be used instead of non-monotonic constructs like (\=)/2 arithmetic constraints (CLP(FD), CLP(Q) and others) are meant to be used instead of moded arithmetic predicates !/0 almost always leads to non-monotonic programs and should be avoided entirely. instantiation errors can be raised in situations where you cannot make a sound decision at this point in time.</description>
    </item>
    
    <item>
      <title>Derivation trees</title>
      <link>https://www.wikiod.com/prolog/derivation-trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/derivation-trees/</guid>
      <description>Proof tree # The proof tree (also search tree or derivation tree) is a tree that shows the execution of a Prolog program. This tree helps visualise the chronological backtracking process present in Prolog. The root of the tree represents the initial query and branches are created when choice points occur. Every node in the tree thus represents a goal. Branches only become leafs when either true/false was proven for the required (set of) goal(s) and search in Prolog is performed in a left-to-right depth-first fashion.</description>
    </item>
    
    <item>
      <title>Reasoning about data</title>
      <link>https://www.wikiod.com/prolog/reasoning-about-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/reasoning-about-data/</guid>
      <description>A new section called Data Structures was brought to life where explanations of certain structures + some simple example(s) of creation are provided. To keep its content concise and uncluttered, it should not contain any documentation about data manipulation.
Therefore, this section was renamed to &amp;ldquo;Reasoning about data&amp;rdquo; with as purpose the generalisation of reasoning about data in Prolog. This could include topics ranging from &amp;rsquo;top-down inference&amp;rsquo; to &amp;rsquo;traversal of lists&amp;rsquo;, as well as many others.</description>
    </item>
    
    <item>
      <title>Constraint Logic Programming</title>
      <link>https://www.wikiod.com/prolog/constraint-logic-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/constraint-logic-programming/</guid>
      <description>CLP(FD) # CLP(FD) constraints (Finite Domains) implement arithmetic over integers. They are available in all serious Prolog implementations.
There are two major use cases of CLP(FD) constraints:
Declarative integer arithmetic Solving combinatorial problems such as planning, scheduling and allocation tasks. Examples:
?- X #= 1+2. X = 3. ?- 3 #= Y+2. Y = 1. Note that if is/2 were to be used in the second query, an instantiation error would occur:</description>
    </item>
    
    <item>
      <title>Higher-Order Programming</title>
      <link>https://www.wikiod.com/prolog/higher-order-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/higher-order-programming/</guid>
      <description>call/N predicates # The call/N family of predicates can call arbitrary Prolog goals at run time:
?- G=true, call(G). true. ?- G=(true,false), call(G). false. maplist/[2,3] # maplist/2 and maplist/3 are higher-order predicates, which allow the definition of a predicate to be lifted about a single element to lists of such elements. These predicates can be defined using call/2 and call/3 as building blocks and ship with many Prolog systems.
For example:</description>
    </item>
    
    <item>
      <title>Logical Purity</title>
      <link>https://www.wikiod.com/prolog/logical-purity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/logical-purity/</guid>
      <description>dif/2 # The predicate dif/2 is a pure predicate: It can be used in all directions and with all instantiation patterns, always meaning that its two arguments are different.
Unification # Unification is a pure relation. It does not produce side effects and can be used in all directions, with either or both arguments fully or only partially instantiated.
In Prolog, unification can happen
explicitly, using built-in predicates like (=)/2 or unify_with_occurs_check/2 implicitly, when unification is used for selecting a suitable clause.</description>
    </item>
    
    <item>
      <title>Using Modern Prolog</title>
      <link>https://www.wikiod.com/prolog/using-modern-prolog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/prolog/using-modern-prolog/</guid>
      <description>CLP(FD) for integer arithmetic # Traditionally Prolog performed arithmetic using the is and =:= operators. However, several current Prologs offer CLP(FD) (Constraint Logic Programming over Finite Domains) as a cleaner alternative for integer arithmetic. CLP(FD) is based on storing the constraints that apply to an integer value and combining those together in memory.
CLP(FD) is an extension in most Prologs that support it, so must be loaded explicitly. Once it is loaded, the #= syntax can take the place of both is and =:=.</description>
    </item>
    
  </channel>
</rss>

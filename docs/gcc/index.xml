<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcc Tutorial on </title>
    <link>https://www.wikiod.com/docs/gcc/</link>
    <description>Recent content in gcc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with gcc</title>
      <link>https://www.wikiod.com/gcc/getting-started-with-gcc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gcc/getting-started-with-gcc/</guid>
      <description>&amp;ldquo;Hello world!&amp;rdquo; with common command line options # For programs with a single source file, using gcc is simple.
/* File name is hello_world.c */ #include &amp;lt;stdio.h&amp;gt; int main(void) { int i; printf(&amp;quot;Hello world!\n&amp;quot;); } To compile the file hello_world.c from the command line:
gcc hello_world.c gcc will then compile program and output the executable to the file a.out. If you want to name the executable, use the -o option.</description>
    </item>
    
    <item>
      <title>Code coverage gcov</title>
      <link>https://www.wikiod.com/gcc/code-coverage-gcov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gcc/code-coverage-gcov/</guid>
      <description>GCC provide some documentation of gcov here
Gcovr and Lcov can be used to help generate and summarize the coverage results
Introduction # Code coverage is a measure used to how often each source code statement and branch is executed. This measure is usually required when running a test suite to ensure that as much of the code as possible is tested by the test suite. It can also be used during profiling to determine code hot-spots and thus where optimization efforts may have the most effect.</description>
    </item>
    
    <item>
      <title>GNU C Extensions</title>
      <link>https://www.wikiod.com/gcc/gnu-c-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gcc/gnu-c-extensions/</guid>
      <description>The GNU C compiler comes with some cool features that are not specified by the C standards. These extensions are heavily used in system software and are a great tool for performance optimization.
Attribute packed # packed is a variable attribute that is used with structures and unions in order to minimize the memory requirements.
#include &amp;lt;stdio.h&amp;gt; struct foo { int a; char c; }; struct __attribute__((__packed__))foo_packed { int a; char c; }; int main() { printf(&amp;quot;Size of foo: %d\n&amp;quot;, sizeof(struct foo)); printf(&amp;quot;Size of packed foo: %d\n&amp;quot;, sizeof(struct foo_packed)); return 0; } On my 64 bit Linux,</description>
    </item>
    
    <item>
      <title>Warnings</title>
      <link>https://www.wikiod.com/gcc/warnings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gcc/warnings/</guid>
      <description>Syntax # gcc [-Woption [-Woption [&amp;hellip;]]] src-file Parameters # Parameter Details option It can be used to enable or disable warnings. It can make warnings into errors. src-file The source file to be compiled. It is a good practice to enable most warnings while developing a software.
Enable nearly all warnings # C source file # gcc -Wall -Wextra -o main main.c C++ source file # g++ -Wall -Wextra -Wconversion -Woverloaded-virtual -o main main.</description>
    </item>
    
    <item>
      <title>GCC Optimizations</title>
      <link>https://www.wikiod.com/gcc/gcc-optimizations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gcc/gcc-optimizations/</guid>
      <description>The GNU compiler offers various levels of optimizations for the compilation process. These optimizations are used to improve the code performance and/or code size. Compiling a code with optimizations on, typically takes longer to complete.
This command tells you what optimizations are available on your system : $gcc -Q &amp;ndash;help=optimizations
Here is a detailed documentation of options to control optimizations:
https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
Differnce between codes compiled with O0 and O3 # I wrote a simple C code foo.</description>
    </item>
    
  </channel>
</rss>

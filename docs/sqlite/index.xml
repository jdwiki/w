<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sqlite Tutorial on </title>
    <link>https://www.wikiod.com/docs/sqlite/</link>
    <description>Recent content in sqlite Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sqlite</title>
      <link>https://www.wikiod.com/sqlite/getting-started-with-sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sqlite/getting-started-with-sqlite/</guid>
      <description>Installation # SQLite is a C library that is typically compiled directly into the application by downloading the source code of the latest version, and adding the sqlite3.c file to the project.
Many script languages (e.g., Perl, Python, Ruby, etc.) and frameworks (e.g., Android) have support for SQLite; this is done with a built-in copy of the SQLite library, which does not need to be installed separately.
For testing SQL, it might be useful to use the command-line shell (sqlite3 or sqlite3.</description>
    </item>
    
    <item>
      <title>sqlite3_stmt Prepared Statement (C API)</title>
      <link>https://www.wikiod.com/sqlite/sqlite3_stmt-prepared-statement-c-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sqlite/sqlite3_stmt-prepared-statement-c-api/</guid>
      <description>official documentation: Prepared Statement Object
Executing a Statement # A statement is constructed with a function such as sqlite3_prepare_v2().
A prepared statement object must be cleaned up with sqlite3_finalize(). Do not forget this in case of an error.
If parameters are used, set their values with the sqlite3_bind_xxx() functions.
The actual execution happens when sqlite3_step() is called.
const char *sql = &amp;quot;INSERT INTO MyTable(ID, Name) VALUES (?, ?)&amp;quot;; sqlite3_stmt *stmt; int err; err = sqlite3_prepare_v2(db, sql, -1, &amp;amp;stmt, NULL); if (err !</description>
    </item>
    
    <item>
      <title>PRAGMA Statements</title>
      <link>https://www.wikiod.com/sqlite/pragma-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sqlite/pragma-statements/</guid>
      <description>The SQLite documentation has a reference of all PRAGMA statements.
PRAGMAs with permanent effects # Most PRAGMA statements affect only the current database connection, which means that they have to be re-applied whenever the database has been opened.
However, the following PRAGMAs write to the database file, and can be executed at any time (but in some cases, not inside a transaction):
application_id journal_mode when enabling or disabling WAL mode schema_version user_version wal_checkpoint The following PRAGMA settings set properties of the database file which cannot be changed after creation, so they must be executed before the first actual write to the database:</description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>https://www.wikiod.com/sqlite/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sqlite/data-types/</guid>
      <description>official documentation: Datatypes In SQLite Version 3
Date/time types # SQLite has no separate data type for date or time values.
ISO8601 strings # The built-in keywords CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP return strings in ISO8601 format:
&amp;gt; SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP; CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP ------------ ------------ ------------------- 2016-07-08 12:34:56 2016-07-08 12:34:56 Such values are also understood by all built-in date/time functions:
&amp;gt; SELECT strftime(&#39;%Y&#39;, &#39;2016-07-08&#39;); 2016 Julian day numbers # The built-in date/time functions interpret numbers as Julian days:</description>
    </item>
    
    <item>
      <title>Command line dot-commands</title>
      <link>https://www.wikiod.com/sqlite/command-line-dot-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sqlite/command-line-dot-commands/</guid>
      <description>The sqlite3 command-line shell implements an additional set of commands (which are not available in programs that use the SQLite library).
Official documentation: Special commands to sqlite3
Exporting and importing a table as an SQL script # Exporting a database is a simple two step process:
sqlite&amp;gt; .output mydatabase_dump.sql sqlite&amp;gt; .dump Exporting a table is pretty similar:
sqlite&amp;gt; .output mytable_dump.sql sqlite&amp;gt; .dump mytable The output file needs to be defined with .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsoup Tutorial on </title>
    <link>https://www.wikiod.com/docs/jsoup/</link>
    <description>Recent content in Jsoup Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jsoup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Jsoup</title>
      <link>https://www.wikiod.com/jsoup/getting-started-with-jsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/getting-started-with-jsoup/</guid>
      <description>Extract the URLs and titles of links # Jsoup can be be used to easily extract all links from a webpage. In this case, we can use Jsoup to extract only specific links we want, here, ones in a h3 header on a page. We can also get the text of the links.
Document doc = Jsoup.connect(&amp;quot;http://stackoverflow.com&amp;quot;).userAgent(&amp;quot;Mozilla&amp;quot;).get(); for (Element e: doc.select(&amp;quot;a.question-hyperlink&amp;quot;)) { System.out.println(e.attr(&amp;quot;abs:href&amp;quot;)); System.out.println(e.text()); System.out.println(); } This gives the following output:</description>
    </item>
    
    <item>
      <title>Selectors</title>
      <link>https://www.wikiod.com/jsoup/selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/selectors/</guid>
      <description>A selector is a chain of simple selectors, separated by combinators. Selectors are case insensitive (including against elements, attributes, and attribute values).
The universal selector (*) is implicit when no element selector is supplied (i.e. *.header and .header is equivalent).
Pattern Matches Example * any element * tag elements with the given tag name div ns|E elements of type E in the namespace ns fb|name finds fb:name elements #id elements with attribute ID of &amp;ldquo;id&amp;rdquo; div#wrap, #logo .</description>
    </item>
    
    <item>
      <title>Logging into websites with Jsoup</title>
      <link>https://www.wikiod.com/jsoup/logging-into-websites-with-jsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/logging-into-websites-with-jsoup/</guid>
      <description>A more comprehensive authentication POST request with Jsoup # Most websites require a much more complicated process than the one demonstrated above.
Common steps for logging into a website are:
Get the unique cookie from the initial login form. Inspect the login form to see what the destination url is for the authentication request Parse the login form to check for any security token that needs to be sent along with username and password.</description>
    </item>
    
    <item>
      <title>Web crawling with Jsoup</title>
      <link>https://www.wikiod.com/jsoup/web-crawling-with-jsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/web-crawling-with-jsoup/</guid>
      <description>Extracting email adresses &amp;amp; links to other pages # Jsoup can be used to extract links and email address from a webpage, thus &amp;ldquo;Web email address collector bot&amp;rdquo; First, this code uses a Regular expression to extract the email addresses, and then uses methods provided by Jsoup to extract the URLs of links on the page.
public class JSoupTest { public static void main(String[] args) throws IOException { Document doc = Jsoup.</description>
    </item>
    
    <item>
      <title>Formatting HTML Output</title>
      <link>https://www.wikiod.com/jsoup/formatting-html-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/formatting-html-output/</guid>
      <description>Parameters # Parameter Detail boolean outline() Get if outline mode is enabled. Default is false. If enabled, the HTML output methods will consider all tags as block. Document.OutputSettings outline(boolean) Enable or disable HTML outline mode. Jsoup 1.9.2 API
Display all elements as block # By default, Jsoup will display only block-level elements with a trailing line break. Inline elements are displayed without a line break.
Given a body fragment, with inline elements:</description>
    </item>
    
    <item>
      <title>Parsing Javascript Generated Pages</title>
      <link>https://www.wikiod.com/jsoup/parsing-javascript-generated-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsoup/parsing-javascript-generated-pages/</guid>
      <description>Parsing JavaScript Generated Page with Jsoup and HtmUnit # page.html - source code
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;loadData.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body onLoad=&amp;quot;loadData()&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;table id=&amp;quot;data&amp;quot; border=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;col1&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;col2&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; loadData.js
// append rows and cols to table.data in page.html function loadData() { data = document.getElementById(&amp;quot;data&amp;quot;); for (var row = 0; row &amp;lt; 2; row++) { var tr = document.createElement(&amp;quot;tr&amp;quot;); for (var col = 0; col &amp;lt; 2; col++) { td = document.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jenkins Tutorial on </title>
    <link>https://www.wikiod.com/docs/jenkins/</link>
    <description>Recent content in jenkins Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jenkins/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jenkins</title>
      <link>https://www.wikiod.com/jenkins/getting-started-with-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/getting-started-with-jenkins/</guid>
      <description>Setting up Nginx Proxy # Natively, Jenkins runs on port 8080. We can establish a proxy from port 80 -&amp;gt; 8080 so Jenkins can be accessed via:
http://&amp;lt;url&amp;gt;.com instead of the default
http://&amp;lt;url&amp;gt;.com:8080 Begin by installing Nginx.
sudo aptitude -y install nginx
Remove the default settings for Nginx
cd /etc/nginx/sites-available
sudo rm default ../sites-enabled/default
Create the new configuration file
sudo touch jenkins
Copy the following code into the newly created jenkins file.</description>
    </item>
    
    <item>
      <title>Jenkins Groovy Scripting</title>
      <link>https://www.wikiod.com/jenkins/jenkins-groovy-scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/jenkins-groovy-scripting/</guid>
      <description>Create default user # Create groovy file by path $JENKINS_HOME/init.groovy.d/basic-security.groovy In Ubuntu 16 Jenkins home directory places in /var/lib/jenkins
Place in file next code
#!groovy
import jenkins.model.* import hudson.security.*
def instance = Jenkins.getInstance()
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount(&amp;ldquo;admin_name&amp;rdquo;,&amp;ldquo;admin_password&amp;rdquo;) instance.setSecurityRealm(hudsonRealm) instance.save()
Restart Jenkins service
After Jenkins starts you need to remove $JENKINS_HOME/init.groovy.d/basic-security.groovy file
Disable Setup Wizard # Open Jenkins default config file and add in JAVA_ARGS next key -Djenkins.install.runSetupWizard=false In Ubuntu 16 default file places in /etc/default/jenkins</description>
    </item>
    
    <item>
      <title>Configure Auto Git Push on Successful Build in Jenkins</title>
      <link>https://www.wikiod.com/jenkins/configure-auto-git-push-on-successful-build-in-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/configure-auto-git-push-on-successful-build-in-jenkins/</guid>
      <description>This document will take you through the steps to configure a Jenkins job that allows user to setup auto push on successful build.The push operation can be controlled by the user. User can choose if they want to perform the auto push operation on successful build or not.
Configuring the Auto Push Job # Create a build job (according to your requirement). For this example I have created a freestyle job (AutoPush) to perform ANT build.</description>
    </item>
    
    <item>
      <title>Install Jenkins on Windows with SSH support for private GitHub repositories</title>
      <link>https://www.wikiod.com/jenkins/install-jenkins-on-windows-with-ssh-support-for-private-github-repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/install-jenkins-on-windows-with-ssh-support-for-private-github-repositories/</guid>
      <description>GitHub pull requests fail # Out of the box installations of Jenkins with the Git and SSH plugins will not work when attempting to pull a private repository from GitHub. PSExec.exe PS Tool by Microsoft # The first step to fix this issue I found was to download PSTools and extract the tools to a convenient location on the build server (e.g. c:\Programs\PSTools is there I extracted mine).
Generate a new SSH key just for Jenkins using PSExec or PSExec64 # First open the Command prompt and &amp;ldquo;Run as Administrator&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Setting up Jenkins for iOS build automation.</title>
      <link>https://www.wikiod.com/jenkins/setting-up-jenkins-for-ios-build-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/setting-up-jenkins-for-ios-build-automation/</guid>
      <description>Now you can define Continuous Integration and Continuous Delivery (CI/CD) process as code with Jenkins 2.0 for your projects in iOS 10. Activities like to build, test, code coverage, check style, reports, and notifications can be described in only one file.
To read the complete article go to Pipeline in Jenkins 2.0 as Code for iOS 10 and XCode 8
Parameters # Parameter Details node(&amp;lsquo;iOS Node&amp;rsquo;) Jenkins Node with Mac OS.</description>
    </item>
    
    <item>
      <title>Role Strategy Plugin</title>
      <link>https://www.wikiod.com/jenkins/role-strategy-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/role-strategy-plugin/</guid>
      <description>Configuration # Manage Roles # Global Roles- Create roles with selected set of Jenkins features e.g. Usually for a development project, 2 roles can be created.
Developer- Global role can be set to only Overall : Read ProjectOwner- Global role can be set to Overall : Read This restricts developer and project owner to read access to all Jenkins features.
Project Roles- Create roles by restricting user access respective jenkins job and credential features using regular expressions.</description>
    </item>
    
    <item>
      <title>Setting up Build Automation for iOS using Shenzhen</title>
      <link>https://www.wikiod.com/jenkins/setting-up-build-automation-for-ios-using-shenzhen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jenkins/setting-up-build-automation-for-ios-using-shenzhen/</guid>
      <description>iOS Build Automation Setup using Shenzhen # Part I : Setup the Mac machine to use shenzhen
Go to terminal
Install Shenzhen
sudo gem install shenzhen
sudo gem install nomad-cli
Download XCode command line utility
xcode-select &amp;ndash;install
Popup shows up with the below text
The xcode-select command requires the command line developer tools. Would you like to install the tools now?‚Äù
Click - Install
Create project directory
gitclone your project</description>
    </item>
    
  </channel>
</rss>

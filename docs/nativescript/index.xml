<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nativescript Tutorial on </title>
    <link>https://www.wikiod.com/docs/nativescript/</link>
    <description>Recent content in nativescript Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/nativescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with nativescript</title>
      <link>https://www.wikiod.com/nativescript/getting-started-with-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/getting-started-with-nativescript/</guid>
      <description>Windows # Ensure you have the latest nodeJS LTS installed Open command prompt and type $ npm install -g nativescript In the command prompt type $ @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://www.nativescript.org/setup/win&#39;))&amp;quot; - this might take a while To verify the above has worked, type $ tns doctor in command prompt (your cmd) If there are any errors, follow up with the troubleshooting guide Installation or Setup # Detailed instructions on getting Nativescript set up or installed.</description>
    </item>
    
    <item>
      <title>Displaying data as list (using Repeater, ListView or *ngFor for {N}&#43;Angular-2 apps)</title>
      <link>https://www.wikiod.com/nativescript/displaying-data-as-list-using-repeater-listview-or-ngfor-for-n-angular-2-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/displaying-data-as-list-using-repeater-listview-or-ngfor-for-n-angular-2-apps/</guid>
      <description>Note: Don&amp;rsquo;t use Repeater in {N}+Angular-2 applications! The *ngRepeat is obsolete directive in Angular-2. When you need to display repeating item patterns use either ListView or *ngFor structural directive.
Using *ngFor Structural Directive to display data (nativeScript + Angular-2) # ngfor.component.html
&amp;lt;StackLayout&amp;gt; &amp;lt;Label *ngFor=&amp;quot;let item of items&amp;quot; [text]=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/Label&amp;gt; &amp;lt;/StackLayout&amp;gt; ngfor.component.ts
import { Component } from &amp;quot;@angular/core&amp;quot;; var dataItems = [&amp;quot;data-item 1&amp;quot;, &amp;quot;data-item 2&amp;quot;, &amp;quot;data-item 3&amp;quot;] @Component({ selector: &#39;ngfor-component&#39;, styleUrls:[&amp;quot;./ngfor.component.css&amp;quot;], templateUrl: &amp;quot;.</description>
    </item>
    
    <item>
      <title>Implementing Animations in Nativescript</title>
      <link>https://www.wikiod.com/nativescript/implementing-animations-in-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/implementing-animations-in-nativescript/</guid>
      <description>Use of animation timing function and animation properties. # pages/main.component.ts
import {Component, ElementRef, ViewChild} from &amp;quot;@angular/core&amp;quot;; import {View} from &amp;quot;ui/core/view&amp;quot;; import {AnimationCurve} from &amp;quot;ui/enums&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;Image #img src=&amp;quot;~/assets/images/user-shape.png&amp;quot;&amp;gt;&amp;lt;/Image&amp;gt; &amp;lt;Button text=&amp;quot;Apply Changes&amp;quot; (tap)=&amp;quot;animateImage()&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;], }) export class MainComponent { @ViewChild(&amp;quot;img&amp;quot;) img: ElementRef; animateImage() { let img = &amp;lt;View&amp;gt;this.img.nativeElement; img.animate({ translate: { x: 0, y: 120 }, duration: 2000, curve: AnimationCurve.easeIn }); } } #snippet for other animation properties</description>
    </item>
    
    <item>
      <title>Styling nativescript template</title>
      <link>https://www.wikiod.com/nativescript/styling-nativescript-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/styling-nativescript-template/</guid>
      <description>Adding a sample layout in your app # main.component.ts
import {Component} from &amp;quot;@angular/core&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;TextField hint=&amp;quot;some text&amp;quot;&amp;gt;&amp;lt;/TextField&amp;gt; &amp;lt;Button text=&amp;quot;Click me&amp;quot; class=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;, &amp;quot;pages/main/main.css&amp;quot;] }) export class MainComponent { } Method 1 : Global CSS # app.css &amp;ndash; Applies globally to all layouts.
StackLayout { margin: 10; background-color: white; } .btn, TextField { margin-left: 16; margin-right: 16; } Method 2 : Platform specific CSS # platform.</description>
    </item>
    
    <item>
      <title>Accessing native apis</title>
      <link>https://www.wikiod.com/nativescript/accessing-native-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/accessing-native-apis/</guid>
      <description>Write java code in nativescript and use it directly in javascript # This is the image of project structure in Android studio:
This is the image of project structure of nativescript project:
As you see they are same. so we can write java code in nativescript as we write in android studio.
We want to Add Toast to the default app of nativescript. after creating a new nativescript project create a directory the java/org/example directory like this:</description>
    </item>
    
    <item>
      <title>using native widget</title>
      <link>https://www.wikiod.com/nativescript/using-native-widget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/using-native-widget/</guid>
      <description>Using surfaceView in ng2-TNS-Android : step by step # For example you want to use surfaceView in ng2-nativescript. As we don&amp;rsquo;t have surfaceView in nativescript we should use placeholder.
first we should import the requirements:
import {Component} from &amp;quot;@angular/core&amp;quot;; import placeholder = require(&amp;quot;ui/placeholder&amp;quot;); let application= require(&amp;quot;application&amp;quot;); then add the placeholder to your html file:
&amp;lt;Placeholder (creatingView)=&amp;quot;creatingView($event)&amp;quot;&amp;gt;&amp;lt;/Placeholder&amp;gt; Add this method to your class:
public creatingView(args: any) { var nativeView = new android.</description>
    </item>
    
    <item>
      <title>Global Variables</title>
      <link>https://www.wikiod.com/nativescript/global-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/global-variables/</guid>
      <description>Console # NativeScriptâ€™s global console variable lets you print values to your terminal for debugging. The simplest usage is passing a value to the console.log() function:
console.log(&amp;quot;hello world&amp;quot;); The console object has several other methods, including dump(), trace(), assert() and more.
// Prints the state of a full object. console.dump({ firstName: &amp;quot;Native&amp;quot;, lastName: &amp;quot;Script&amp;quot;}); // Prints the current stack trace console.trace(); // Asserts a boolean condition, and prints to the console if the assertion fails.</description>
    </item>
    
    <item>
      <title>StatusBar</title>
      <link>https://www.wikiod.com/nativescript/statusbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/statusbar/</guid>
      <description>Hide/show - android # This is a statusbar that you see on top of your screen with icons of battry,clock &amp;hellip; . let frame = require(&amp;quot;ui/frame&amp;quot;); Hide:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN); Show:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_VISIBLE ); Make statusBar Transparent android # open APP_Resources/values/styles.xml and add the
&amp;lt;item name=&amp;quot;android:windowTranslucentStatus&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
in the
&amp;lt;style name=&amp;quot;AppThemeBase&amp;quot; parent=&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt; &amp;lt;/style&amp;gt; section.</description>
    </item>
    
    <item>
      <title>implement Interface</title>
      <link>https://www.wikiod.com/nativescript/implement-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/implement-interface/</guid>
      <description>implement View.OnLayoutChangeListener in Nativescript # let playerLayoutChangeListener = new android.view.View.OnLayoutChangeListener( { onLayoutChange : function ( v:View, left:number, top:number, right:number, bottom:number, oldLeft:number, oldTop:number, oldRight:number, oldBottom:number):any { if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) { console.log(&amp;quot;OnLayoutChangeListener&amp;quot;); __this.changeSurfaceLayout(); } } }); create a surfaceView https://www.wikiod.com/proposed
Add Listener:
surfaceView.addOnLayoutChangeListener(playerLayoutChangeListener); remove Listener:
surfaceView.removeOnLayoutChangeListener(playerLayoutChangeListener); </description>
    </item>
    
    <item>
      <title>Multithreading Model</title>
      <link>https://www.wikiod.com/nativescript/multithreading-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/nativescript/multithreading-model/</guid>
      <description>The new chrome v8 engine is partially ES7 compliant. So if we add &amp;quot;use strict&amp;quot;; to top of our file (typescript do that when transpiles typescript) we have to make sure that any functions that are on the global scope are actually assigned to the global scope. so we should use self.functionName or global.functionName.
use Workers in angular2 service # /app/services/greeting.service.ts :
import { Injectable } from &#39;@angular/core&#39;; import {greetingTypes,request,response} from &#39;.</description>
    </item>
    
  </channel>
</rss>

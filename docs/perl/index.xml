<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/perl/</link>
    <description>Recent content in Perl Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Perl Language</title>
      <link>https://www.wikiod.com/perl/getting-started-with-perl-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/getting-started-with-perl-language/</guid>
      <description>Getting started with Perl # Perl tries to do what you mean:
print &amp;quot;Hello World\n&amp;quot;; The two tricky bits are the semicolon at the end of the line and the \n, which adds a newline (line feed). If you have a relatively new version of perl, you can use say instead of print to have the carriage return added automatically:
use feature &#39;say&#39;; say &amp;quot;Hello World&amp;quot;; The say feature is also enabled automatically with a use v5.</description>
    </item>
    
    <item>
      <title>File IO (reading and writing files)</title>
      <link>https://www.wikiod.com/perl/file-io-reading-and-writing-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/file-io-reading-and-writing-files/</guid>
      <description>Parameters # Mode Explaination &amp;gt; Write (trunc). Will overwrite existing files. Creates a new file if no file was found &amp;gt;&amp;gt; Write (append). Will not overwrite files but append new content at the end of it. Will also create a file if used for opening a non existing file. &amp;lt; Read. Opens the file in read only mode. +&amp;lt; Read / Write. Will not create or truncate the file. +&amp;gt; Read / Write (trunc).</description>
    </item>
    
    <item>
      <title>Reading a file&#39;s content into a variable</title>
      <link>https://www.wikiod.com/perl/reading-a-files-content-into-a-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/reading-a-files-content-into-a-variable/</guid>
      <description>Path::Tiny # Using the idiom from [The Manual Way](https://www.wikiod.com/perl/reading-a-files-content-into-a-variable#The manual way) several times in a script soon gets tedious so you might want to try a module.
use Path::Tiny; my $contents = path($filename)-&amp;gt;slurp; You can pass a binmode option if you need control over file encodings, line endings etc. - see man perlio:
my $contents = path($filename)-&amp;gt;slurp( {binmode =&amp;gt; &amp;quot;:encoding(UTF-8)&amp;quot;} ); Path::Tiny also has a lot of other functions for dealing with files so it may be a good choice.</description>
    </item>
    
    <item>
      <title>Object-oriented Perl</title>
      <link>https://www.wikiod.com/perl/object-oriented-perl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/object-oriented-perl/</guid>
      <description>Defining classes in modern Perl # Although available, defining a class [from scratch](https://www.wikiod.com/perl/object-oriented-perl#Defining Classes) is not recommended in modern Perl. Use one of helper OO systems which provide more features and convenience. Among these systems are:
Moose - inspired by Perl 6 OO design
Class::Accessor - a lightweight alternative to Moose
Class::Tiny - truly minimal class builder
Moose
package Foo; use Moose; has bar =&amp;gt; (is =&amp;gt; &#39;ro&#39;); # a read-only property has baz =&amp;gt; (is =&amp;gt; &#39;rw&#39;, isa =&amp;gt; &#39;Bool&#39;); # a read-write boolean property sub qux { my $self = shift; my $barIsBaz = $self-&amp;gt;bar eq &#39;baz&#39;; # property getter $self-&amp;gt;baz($barIsBaz); # property setter } Class::Accessor (Moose syntax)</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://www.wikiod.com/perl/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/lists/</guid>
      <description>Array as list # The array is one of Perl&amp;rsquo;s basic variable types. It contains a list, which is an ordered sequence of zero or more scalars. The array is the variable holding (and providing access to) the list data, as is documented in perldata.
You can assign a list to an array:
my @foo = ( 4, 5, 6 ); You can use an array wherever a list is expected:</description>
    </item>
    
    <item>
      <title>Debug Output</title>
      <link>https://www.wikiod.com/perl/debug-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/debug-output/</guid>
      <description>Dumping with Style # Sometimes Data::Dumper is not enough. Got a Moose object you want to inspect? Huge numbers of the same structure? Want stuff sorted? Colored? Data::Printer is your friend.
use Data::Printer; p $data_structure; Data::Printer writes to STDERR, like warn. That makes it easier to find the output. By default, it sorts hash keys and looks at objects.
use Data::Printer; use LWP::UserAgent; my $ua = LWP::UserAgent-&amp;gt;new; p $ua; It will look at all the methods of the object, and also list the internals.</description>
    </item>
    
    <item>
      <title>True and false</title>
      <link>https://www.wikiod.com/perl/true-and-false/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/true-and-false/</guid>
      <description>Syntax # undef # False &amp;rsquo;&amp;rsquo; # Defined, False 0 # Defined, Has Length, False &amp;lsquo;0&amp;rsquo; # Defined, Has Length, False Perl does not have a boolean data type, nor does it have any true and false keywords like many other languages. However, every scalar value will evaluate to true or false when evaluated in a boolean context (the condition in an if statement or a while loop, for example).</description>
    </item>
    
    <item>
      <title>Packages and modules</title>
      <link>https://www.wikiod.com/perl/packages-and-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/packages-and-modules/</guid>
      <description>Syntax # require Module::Name; # Require by name from @INC require &amp;ldquo;path/to/file.pm&amp;rdquo;; # Require by relative path from @INC use Module::Name; # require and default import at BEGIN use Module::Name (); # require and no import at BEGIN use Module::Name (@ARGS); # require and import with args at BEGIN use Module::Name VERSION; # require, version check, and default import at BEGIN use Module::Name VERSION (); # require, version check, and no import at BEGIN use Module::Name VERSION (@ARGS); # require, version check, import with args at BEGIN do &amp;ldquo;path/to/file.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/perl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/variables/</guid>
      <description>Syntax # my # Lexical declaration our # Global declaration $foo # Scalar @foo # Array $#foo # Array Last-Index %foo # Hash ${$foo} # Scalar De-Reference @{$foo} # Array De-Reference $#{$foo} # Array-DeRef Last-Index %{$foo} # Hash De-Reference $foo[$index] # Array get indexed ${$foo}[$index] # Array De-Reference and get indexed. $foo-&amp;gt;[$index] # Array De-Reference and get indexed ( Simplified ) $foo{$key} # Hash get value for key ${$foo}{$key} # Hash Dereference and get value for key $foo-&amp;gt;{$key} # Hash Dereference and get value for key ( Simplified ) \$x # Reference to Scalar \@x # Reference to Array \%x # Reference to Hash = # Reference to Anonymous Array (Inline) ={ } # Reference to Anonymous Hash (Inline) Scalars # Scalars are Perl&amp;rsquo;s most basic data type.</description>
    </item>
    
    <item>
      <title>Subroutines</title>
      <link>https://www.wikiod.com/perl/subroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/perl/subroutines/</guid>
      <description>Subroutines get their arguments to magic variable called @_. While it doesn&amp;rsquo;t have to be unpacked, it&amp;rsquo;s recommended, as it helps readability, and prevents accidental changes as arguments of @_ are passed by reference (can be modified).
Creating subroutines # Subroutines are created by using the keyword sub followed by an identifier and a code block enclosed in braces.
You can access the arguments by using the special variable @_, which contains all arguments as an array.</description>
    </item>
    
  </channel>
</rss>

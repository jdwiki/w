<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>extjs Tutorial on </title>
    <link>https://www.wikiod.com/docs/extjs/</link>
    <description>Recent content in extjs Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/extjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with extjs</title>
      <link>https://www.wikiod.com/extjs/getting-started-with-extjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/extjs/getting-started-with-extjs/</guid>
      <description>Creating a Hello World Application – Via Sencha Cmd # Installation &amp;amp; Setup # Typical usage of ExtJS leverages the framework to build single-page rich-applications (RIA). The simplest way to get started is to make use of Sencha Cmd, a CLI build tool covering most of the general concerns in a deployment life-cycle, primarily:
package and dependency management code compilation / bundling and minification managing build strategies for different targets and platforms » Download Sencha Cmd</description>
    </item>
    
    <item>
      <title>MVC  MVVM - Application Architecture</title>
      <link>https://www.wikiod.com/extjs/mvc--mvvm---application-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/extjs/mvc--mvvm---application-architecture/</guid>
      <description>Introduction to models # A model represents some data object in an application. For example you can have a model such as: Fruit, Car, Building, etc. in your application. Models are normally used by stores. Here is example how you would define a new model class. e.g.
Ext.define(&#39;MyApp.model.Person&#39;, { extend: &#39;Ext.data.Model&#39;, fields: [ {name: &#39;name&#39;, type: &#39;string&#39;}, {name: &#39;surname&#39;, type: &#39;string&#39;}, {name: &#39;age&#39;, type: &#39;int&#39;} ], getFullName: function() { return this.</description>
    </item>
    
    <item>
      <title>Common Pitfalls &amp; Best Practices</title>
      <link>https://www.wikiod.com/extjs/common-pitfalls--best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/extjs/common-pitfalls--best-practices/</guid>
      <description>Extend vs Override # Overrides: # Override file:
Ext.define(&#39;MyApp.override.CornField&#39;, override: &#39;Ext.form.field.Text&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Use in app:
{ xtype: &#39;textfield&#39; } Extensions: # Override file:
Ext.define(&#39;MyApp.form.field.CornField&#39;, extend: &#39;Ext.form.field.Text&#39;, alias: &#39;widget.cornfield&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Use in app:
{ xtype: &#39;cornfield&#39; } Explanation # ExtJS provides two main ways to change the behavior of existing classes: extending them, and overriding them. Each has benefits and pitfalls that should be considered before using them.</description>
    </item>
    
    <item>
      <title>ExtJS AJAX</title>
      <link>https://www.wikiod.com/extjs/extjs-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/extjs/extjs-ajax/</guid>
      <description>A singleton instance of an Ext.data.Connection class. This class is used to communicate with your server side.
Basic Request # Some of the Class properties Ext.Data.Connection
Properties Details url Address of the request timeout Waiting time in milliseconds success Return on success failure Return on failure Ext.Ajax.on(&amp;quot;beforerequest&amp;quot;, function(conn , options , eOpts) { console.log(&amp;quot;beforerequest&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestcomplete&amp;quot;, function(conn , response , options , eOpts) { console.log(&amp;quot;requestcomplete&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestexception&amp;quot;, function(conn , response , options , eOpts) { console.</description>
    </item>
    
    <item>
      <title>Event Model</title>
      <link>https://www.wikiod.com/extjs/event-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/extjs/event-model/</guid>
      <description>ExtJS advocates the use of firing of and listening for events between classes. By firing events and listening for fired events, classes require no &amp;lsquo;dirty&amp;rsquo; knowledge of each others&amp;rsquo; class structure and prevent coupling code together. Additionally, events make it easy to listen to multiple instances of the same component by allowing a generic listener for all objects with the same selector. Finally, other classes may also be able to make use of events that already exist.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lodash Tutorial on </title>
    <link>https://www.wikiod.com/docs/lodash/</link>
    <description>Recent content in lodash Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/lodash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with lodash</title>
      <link>https://www.wikiod.com/lodash/getting-started-with-lodash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/lodash/getting-started-with-lodash/</guid>
      <description>Setup # Lodash works equally well on both servers (like node.js) and browsers.
node.js with npm # Download with npm from the CLI:
npm install lodash Then in your node scripts:
var _ = require(&amp;quot;lodash&amp;quot;); // use lodash in your program... Download own copy for clientside in website (ie. in the browser) # Download lodash or use a package manager like npm, jspm or bower. Include the script reference in your page with &amp;lt;script src=&amp;quot;lodash.</description>
    </item>
    
    <item>
      <title>Chaining</title>
      <link>https://www.wikiod.com/lodash/chaining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/lodash/chaining/</guid>
      <description>Implicit chaining with _(arr1) and explicit chaining with _.chain(arr1) work in similar ways. The examples below show how they differ slighlty.
Explicit chaining with _.chain(...) # var arr1 = [10, 15, 20, 25, 30, 15, 25, 35]; var sumOfUniqueValues = _.chain(arr1) .uniq() .sum() // sum returns a single value .value(); // which must be unwrapped manually with explicit chaining // sumOfUniqueValues is now 135 Implicit chaining with _(...) # var arr1 = [10, 15, 20, 25, 30, 15, 25, 35]; var sumOfUniqueValues = _(arr1) .</description>
    </item>
    
    <item>
      <title>Working with Lists and Arrays</title>
      <link>https://www.wikiod.com/lodash/working-with-lists-and-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/lodash/working-with-lists-and-arrays/</guid>
      <description>Syntax # _.map(collection, Function) =&amp;gt; newCollection _.filter(collection, Predicate) =&amp;gt; newCollection _.some(collection, Predicate) =&amp;gt; true or false _.reduce(collection, BiFunction, seed) =&amp;gt; accumulated value Parameters # Parameter Meaning Collection An iterable group of elements. This can be an array or an object. Function A function that takes 1 input, and returns one output. BiFunction A function that takes 2 inputs, and returns one output. Predicate A function that takes 1 input, and returns a boolean value.</description>
    </item>
    
    <item>
      <title>Utils</title>
      <link>https://www.wikiod.com/lodash/utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/lodash/utils/</guid>
      <description>_.identity # This method just returns the first argument.
var res1 = _.identity(10, 20); // res1 now is 10 var res2 = _.identity(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;); // res2 now is &amp;quot;hello&amp;quot; What does _.identity mean in lodash documentation? # This method is used throughout lodash documentation instead of function(x){return x;} (or ES6 equivalent x =&amp;gt; x).
It usually means either &amp;ldquo;no transformation&amp;rdquo; or when used as a predicate: the truthiness of the value.</description>
    </item>
    
    <item>
      <title>Working with objects</title>
      <link>https://www.wikiod.com/lodash/working-with-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/lodash/working-with-objects/</guid>
      <description>.has # Determine if an object has (or contains) a key. If the key to search for is expressed as a path (with dot notation) it will traverse nested object structures to determine if the key exists.
var obj = { a: 2, b: 3, c: { dd:40, ee:{ fff:500 } } }; var res1 = _.has(obj, &amp;quot;a&amp;quot;); // true var res2 = _.has(obj, &amp;quot;a.b&amp;quot;); // false var res3 = _.</description>
    </item>
    
  </channel>
</rss>

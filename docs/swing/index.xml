<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swing Tutorial on </title>
    <link>https://www.wikiod.com/docs/swing/</link>
    <description>Recent content in swing Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/swing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with swing</title>
      <link>https://www.wikiod.com/swing/getting-started-with-swing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/getting-started-with-swing/</guid>
      <description>Incrementing with a button # import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; import javax.swing.WindowConstants; /** * A very simple Swing example. */ public class SwingExample { /** * The number of times the user has clicked the button. */ private long clickCount; /** * The main method: starting point of this application. * * @param arguments the unused command-line arguments. */ public static void main(final String[] arguments) { new SwingExample().</description>
    </item>
    
    <item>
      <title>Using Swing for Graphical User Interfaces</title>
      <link>https://www.wikiod.com/swing/using-swing-for-graphical-user-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/using-swing-for-graphical-user-interfaces/</guid>
      <description>Quitting the application on window close # It&amp;rsquo;s easy to forget to quit the application when the window is closed. Remember to add the following line.
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //Quit the application when the JFrame is closed Creating an Empty Window (JFrame) # Creating the JFrame # Creating a window is easy. You just have to create a JFrame.
JFrame frame = new JFrame(); Titling the Window # You may wish to give your window a title.</description>
    </item>
    
    <item>
      <title>GridBag Layout</title>
      <link>https://www.wikiod.com/swing/gridbag-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/gridbag-layout/</guid>
      <description>Syntax # frame.setLayout(new GridBagLayout()); //Set GridBagLayout for frame pane.setLayout(new GridBagLayout()); //Set GridBagLayout for Panel JPanel pane = new JPanel(new GridBagLayout()); //Set GridBagLayout for Panel GridBagConstraints c = new GridBagConstraints() //Initialize a GridBagConstraint How does GridBagLayout work? # Layouts are used whenever you want your components to not just be displayed next to each other. The GridBagLayout is a useful one, as it divides your window into rows and columns, and you decide which row and column to put components into, as well as how many rows and colums big the component is.</description>
    </item>
    
    <item>
      <title>GridLayout</title>
      <link>https://www.wikiod.com/swing/gridlayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/gridlayout/</guid>
      <description>How GridLayout works # A GridLayout is a layout manager which places components inside a grid with equal cell sizes. You can set the number of rows, columns, the horizontal gap and the vertical gap using the following methods:
setRows(int rows) setColumns(int columns) setHgap(int hgap) setVgap(int vgap) or you can set them with the following constructors:
GridLayout(int rows, int columns) GridLayout(int rows, int columns, int hgap, int vgap) If the number of rows or columns is unknown, you can set the respective variable to 0.</description>
    </item>
    
    <item>
      <title>MVP Pattern</title>
      <link>https://www.wikiod.com/swing/mvp-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/mvp-pattern/</guid>
      <description>Simple MVP Example # To illustrate a simple example usage of the MVP pattern, consider the following code which creates a simple UI with only a button and a label. When the button is clicked, the label updates with the number of times the button has been clicked.
We have 5 classes:
Model - The POJO to maintain state (M in MVP) View - The class with UI code (V in MVP) ViewListener - Interface providing methods to responding to actions in the view Presenter - Responds to input, and updates the view (P in MVP) Application - The &amp;ldquo;main&amp;rdquo; class to pull everything together and launch the app A minimal &amp;ldquo;model&amp;rdquo; class which just maintains a single count variable.</description>
    </item>
    
    <item>
      <title>StyledDocument</title>
      <link>https://www.wikiod.com/swing/styleddocument/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/styleddocument/</guid>
      <description>Syntax # doc.insertString(index, text, attributes); //attributes should be a AttributeSet Creating a DefaultStyledDocument # Adding StyledDocument to JTextPane # Copying DefaultStyledDocument # Serializing a DefaultStyledDocument to RTF # </description>
    </item>
    
    <item>
      <title>Using Look and Feel</title>
      <link>https://www.wikiod.com/swing/using-look-and-feel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/using-look-and-feel/</guid>
      <description>Using system L&amp;amp;F # Swing supports quite a few native L&amp;amp;Fs.
You can always easily install one without calling for a specific L&amp;amp;F class:
public class SystemLookAndFeel { public static void main ( final String[] args ) { // L&amp;amp;F installation should be performed within EDT (Event Dispatch Thread) // This is important to avoid any UI issues, exceptions or even deadlocks SwingUtilities.invokeLater ( new Runnable () { @Override public void run () { // Process of L&amp;amp;F installation might throw multiple exceptions // It is always up to you whether to handle or ignore them // In most common cases you would never encounter any of those try { // Installing native L&amp;amp;F as a current application L&amp;amp;F // We do not know what exactly L&amp;amp;F class is, it is provided by the UIManager UIManager.</description>
    </item>
    
    <item>
      <title>Swing Workers and the EDT</title>
      <link>https://www.wikiod.com/swing/swing-workers-and-the-edt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/swing-workers-and-the-edt/</guid>
      <description>Syntax # public abstract class SwingWorker&amp;lt;T,V&amp;gt;
T - the result type returned by this SwingWorker&amp;rsquo;s doInBackground and get methods.
V - the type used for carrying out intermediate results by this SwingWorker&amp;rsquo;s publish and process methods.
T doInBackground() - The abstract function that must be overridden.Return type is T.
Main and event dispatch thread # Like any other java program, every swing program starts with a main method. The main method is initiated by the main thread.</description>
    </item>
    
    <item>
      <title>Graphics</title>
      <link>https://www.wikiod.com/swing/graphics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/graphics/</guid>
      <description>Using the Graphics class # Intro # The Graphics class allows you to draw onto java components such as a Jpanel, it can be used to draw strings, lines, shapes and images. This is done by overriding the paintComponent(Graphics g) method of the JComponent you are drawing on using the Graphics object received as argument to do the drawing:
class Board # import java.awt.*; import javax.swing.*; public class Board extends JPanel{ public Board() { setBackground(Color.</description>
    </item>
    
    <item>
      <title>MigLayout</title>
      <link>https://www.wikiod.com/swing/miglayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/swing/miglayout/</guid>
      <description>Wrapping elements # This example demonstrates how to place 3 buttons in total with 2 buttons being in the first row. Then a wrap occurs, so the last button is in a new row.
The constraints are simple strings, in this case &amp;ldquo;wrap&amp;rdquo; while placing the component.
public class ShowMigLayout { // Create the elements private final JFrame demo = new JFrame(); private final JPanel panel = new JPanel(); private final JButton button1 = new JButton(&amp;quot;First Button&amp;quot;); private final JButton button2 = new JButton(&amp;quot;Second Button&amp;quot;); private final JButton button3 = new JButton(&amp;quot;Third Button&amp;quot;); public static void main(String[] args) { ShowMigLayout showMigLayout = new ShowMigLayout(); SwingUtilities.</description>
    </item>
    
  </channel>
</rss>

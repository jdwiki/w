<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dagger-2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/dagger-2/</link>
    <description>Recent content in dagger-2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dagger-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with dagger-2</title>
      <link>https://www.wikiod.com/dagger-2/getting-started-with-dagger-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dagger-2/getting-started-with-dagger-2/</guid>
      <description>Android example # One of the central difficulties of writing an Android application using Dagger is that many Android framework classes are instantiated by the OS itself, like Activity and Fragment, but Dagger works best if it can create all the injected objects. Instead, you have to perform members injection in a lifecycle method. Starting from version 2.10 dagger allows using dagger.android which simplify using dagger with android components.
Injecting Activity objects</description>
    </item>
    
    <item>
      <title>@Named annotation in Kotlin</title>
      <link>https://www.wikiod.com/dagger-2/named-annotation-in-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dagger-2/named-annotation-in-kotlin/</guid>
      <description>How to correctly use the named annotation in Kotlin v1.1
Declaring a qualified dependency # @Module class AppModule(val app: Application) { @Provides @Named(&amp;quot;the_answer&amp;quot;) fun providesTheAnswer(): Int { return 42 } } Setter based dependency injection # class MyClass{ @field:[Inject Named(&amp;quot;the_answer&amp;quot;)] lateinit var answer: Int } In Android Development, this is the way in which you inject dependencies into Activity, Fragment or any other object that is instantiated directly by the OS.</description>
    </item>
    
  </channel>
</rss>

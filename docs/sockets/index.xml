<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sockets Tutorial on </title>
    <link>https://www.wikiod.com/docs/sockets/</link>
    <description>Recent content in sockets Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sockets</title>
      <link>https://www.wikiod.com/sockets/getting-started-with-sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sockets/getting-started-with-sockets/</guid>
      <description>How to instantiate a socket class object # Instantiating a socket can be done in various ways.
by 2 line declaration &amp;amp; instantiation:
First we need to define a variable which will hold a Socket class object:
Socket socket; then we can create a Socket class object:
socket = new Socket(); We can also make a one line definition &amp;amp; instantiation:
Socket socket = new Socket(); both ways will create an unconnected socket.</description>
    </item>
    
    <item>
      <title>Python TCP sockets; simple server and client examples with annotation</title>
      <link>https://www.wikiod.com/sockets/python-tcp-sockets-simple-server-and-client-examples-with-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sockets/python-tcp-sockets-simple-server-and-client-examples-with-annotation/</guid>
      <description>These are two sample programs that work together. One is a simple server, the other a simple client. Start the server in one window:
python tserver.py Edit the server address in the client source file if desired. Then run
python tclient.py The client connects to the server, then asks for input from the console, then sends it to the server. For each received buffer, the server prepends some canned info and sends it back to the client.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Sockets</title>
      <link>https://www.wikiod.com/sockets/c-sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sockets/c-sockets/</guid>
      <description>This topic will be about modern C++ style Berkeley Socket Programming (This is code for Linux, but easily portable to other platforms)
Sample server code # constexpr const size_t addressSize = sizeof(sockaddr_in); constexpr const uint16_t defaultPort = 80; // The port you want to use int serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); sockaddr_in serverAddress, clientAddress; memset(&amp;amp;serverAddress, 0, addressSize); serverAddress.sin_family = AF_INET; serverAddress.sin_addr.s_addr = htonl(INADDR_ANY); serverAddress.sin_port = htons(defaultPort); bind(serverSocket, (sockaddr*)&amp;amp;serverAddress, addressSize); listen(serverSocket, SOMAXCONN); while (true) { // Infinite running app std::thread{ // Create new thread for every client handleConnection, //Connection handler accept(serverSocket, (sockaddr*)&amp;amp;clientAddress, &amp;amp;addressSize) //Client socket // Any other parameters for the handler here }.</description>
    </item>
    
  </channel>
</rss>

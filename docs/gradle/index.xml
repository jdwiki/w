<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle Tutorial on </title>
    <link>https://www.wikiod.com/docs/gradle/</link>
    <description>Recent content in gradle Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with gradle</title>
      <link>https://www.wikiod.com/gradle/getting-started-with-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/getting-started-with-gradle/</guid>
      <description>Gradle Installation # Requirements: Installed Java JDK or JRE (version 7 or higher for Gradle 3.x version)
Installation steps:
Download Gradle distribution from the official web site Unpack the ZIP Add the GRADLE_HOME environment variable. This variable should point to the unpacked files from the previous step. Add GRADLE_HOME/bin to your PATH environment variable, so you can run Gradle from the command line interface (CLI) Test your Gradle installation by typing gradle -v in the CLI.</description>
    </item>
    
    <item>
      <title>Task dependencies</title>
      <link>https://www.wikiod.com/gradle/task-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/task-dependencies/</guid>
      <description>doLast
Note, that in a gradle 3.x more idiomatic way task definition: using explicit doLast{closure} notation instead &amp;ldquo;leftShift&amp;rdquo;(&amp;laquo;) operator preferable.(leftShift has been deprecated in a gradle 3.2 is scheduled to be removed in gradle 5.0.)
task oldStyle &amp;lt;&amp;lt; { println &#39;Deprecated style task&#39; } is equivalent to:
task newStyle { doLast { println &#39;Deprecated style task&#39; } } Adding dependencies using task names # We can change the tasks execution order with the dependsOn method.</description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>https://www.wikiod.com/gradle/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/dependencies/</guid>
      <description>Add a Local JAR File Dependency # Single JAR # Sometimes you have a local JAR file you need to add as a dependency to your Gradle build. Here&amp;rsquo;s how you can do this:
dependencies { compile files(&#39;path/local_dependency.jar&#39;) } Where path is a directory path on your filesystem and local_dependency.jar is the name of your local JAR file. The path can be relative to the build file.
Directory of JARs # It&amp;rsquo;s also possible to add a directory of jars to compile.</description>
    </item>
    
    <item>
      <title>Gradle Plugins</title>
      <link>https://www.wikiod.com/gradle/gradle-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/gradle-plugins/</guid>
      <description>How to write a standalone plugin # To create a custom standalone Gradle plug-in using java (you can also use Groovy) you have to create a structure like this:
plugin |-- build.gradle |-- settings.gradle |-- src |-- main | |-- java | |-- resources | |-- META-INF | |-- gradle-plugins |-- test Setup gradle configuration # In the build.gradle file you define your project.
apply plugin: &#39;java&#39; apply plugin: &#39;maven&#39; dependencies { compile gradleApi() } The java plugin will be used to write java code.</description>
    </item>
    
    <item>
      <title>Gradle Wrapper</title>
      <link>https://www.wikiod.com/gradle/gradle-wrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/gradle-wrapper/</guid>
      <description>Gradle Wrapper introduction # Gradle has the ability to add a wrapper to projects. This wrapper alleviates the need for all users or continuous integration systems to have Gradle installed. It also prevents version issues where there is some incompatibility between the version the project uses and that which users have installed. It does this by installing a version of gradle locally in the project.
Users of the project simply run:</description>
    </item>
    
    <item>
      <title>Gradle Performance</title>
      <link>https://www.wikiod.com/gradle/gradle-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/gradle-performance/</guid>
      <description>Profiling a Build # Before you begin tuning your Gradle build for performance, you should establish a baseline and figure out which portions of the build are taking the most time. To do this, you can profile your build by adding the --profile argument to your Gradle command:
gradle --profile ./gradlew --profile After the build is complete, you will see an HTML profile report for the build under ./build/reports/profile/, looking something like this:</description>
    </item>
    
    <item>
      <title>Gradle Init Scripts</title>
      <link>https://www.wikiod.com/gradle/gradle-init-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/gradle-init-scripts/</guid>
      <description>Add default repository for all projects # Add a init.gradle to your user gradle folder. The init.gradle is recognized on every project.
Unix: ~/.gradle/init.gradle These are also alternative locations where init script can be placed and loaded automatically:-
Any *.gradle file in USER_HOME/.gradle/init.d Any *.gradle file in the Gradle installationâ€™s init.d directory init.gradle with mavenLocal as repository in all projects.
allprojects { repositories { mavenLocal() } } With that you have your local maven cache available in all repositories.</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA Task Customization</title>
      <link>https://www.wikiod.com/gradle/intellij-idea-task-customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/intellij-idea-task-customization/</guid>
      <description>Syntax # groovy.util.Node = node.find { childNode -&amp;gt; return true || false } node.append(nodeYouWantAsAChild) groovy.util.Node parsedNode = (new XmlParser()).parseText(someRawXMLString) &amp;rsquo;&amp;rsquo;&amp;rsquo; mutli-line string (not interpolated) &amp;rsquo;&#39;&#39; The three basic files of an IntelliJ project - the ipr, iws, and iml files - can be accessed as in gradle in the idea task through
project.ipr module.iml workspace.iws using the .withXml lets you access the xml. Using the .asNode() on that turns it into a groovy xml node.</description>
    </item>
    
    <item>
      <title>Initializing Gradle</title>
      <link>https://www.wikiod.com/gradle/initializing-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/initializing-gradle/</guid>
      <description>Terminology # Task - an atomic piece of work which a build performs. Tasks have inputs, outputs and task dependencies.
dependencies {} - Declares File or binary dependencies necessary to execute tasks. For example, org.slf4j:slf4j-api:1.7.21 is shorthand coordinates to a Maven dependency.
repositories {} - How Gradle finds files for external dependencies. Really, just a collection of files organized by group, name, and version. For example: jcenter() is a convenience method for maven { url &#39;http://jcenter.</description>
    </item>
    
    <item>
      <title>Ordering tasks</title>
      <link>https://www.wikiod.com/gradle/ordering-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/gradle/ordering-tasks/</guid>
      <description>Please note that mustRunAfter and shouldRunAfter are marked as &amp;ldquo;incubating&amp;rdquo; (as of Gradle 3.0) which means that these are experimental features and their behavior can be changed in future releases.
There are two ordering rules available:
mustRunAfter shouldRunAfter When you use the mustRunAfter ordering rule you specify that taskB must always run after taskA, whenever both taskA and taskB will be run.
The shouldRunAfter ordering rule is similar but less strict as it will be ignored in two situations:</description>
    </item>
    
  </channel>
</rss>

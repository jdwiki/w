<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache-camel Tutorial on </title>
    <link>https://www.wikiod.com/docs/apache-camel/</link>
    <description>Recent content in apache-camel Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/apache-camel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with apache-camel</title>
      <link>https://www.wikiod.com/apache-camel/getting-started-with-apache-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-camel/getting-started-with-apache-camel/</guid>
      <description>Installation or Setup # Detailed instructions on adding the required Camel dependencies.
Maven Dependency One of the most common ways to include Apache Camel in your application is through a Maven dependency. By adding the dependency block below, Maven will resolve the Camel libraries and dependencies for you.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.17.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle Another common way to include Apache Camel in your application is through a Gradle dependency. Simply add the dependency line below and Gradle will import the Camel library and its dependencies for you.</description>
    </item>
    
    <item>
      <title>PubSub using Camel &#43; Redis</title>
      <link>https://www.wikiod.com/apache-camel/pubsub-using-camel--redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-camel/pubsub-using-camel--redis/</guid>
      <description>Using the publisher:
producerTemplate.asyncSendBody(&amp;quot;direct:myprocedure&amp;quot;, massageBody); Using the &amp;ldquo;createProducer()&amp;rdquo; in ManagedCamel to create the producerTemplate.
RedisPublisher # public class RedisPublisher extends RouteBuilder { public static final String CAMEL_REDIS_CHANNEL = &amp;quot;CamelRedis.Channel&amp;quot;; public static final String CAMEL_REDIS_MESSAGE = &amp;quot;CamelRedis.Message&amp;quot;; @Value(&amp;quot;${redis.host}&amp;quot;) private String redisHost; @Value(&amp;quot;${redis.port}&amp;quot;) private int redisPort; @Value(&amp;quot;${redis.channel.mychannel}&amp;quot;) private String redisChannel; private String producerName; @Required public void setProducerName(String producerName) { this.producerName = producerName; } @Override public void configure() throws Exception { from(producerName) .log(String.format(&amp;quot;Publishing with redis in channel: %s, massage body: ${body}&amp;quot;, redisChannel)) .</description>
    </item>
    
    <item>
      <title>Integration testing on existing routes with Apache-Camel and Spring (And DBUnit)</title>
      <link>https://www.wikiod.com/apache-camel/integration-testing-on-existing-routes-with-apache-camel-and-spring-and-dbunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-camel/integration-testing-on-existing-routes-with-apache-camel-and-spring-and-dbunit/</guid>
      <description>The point of this wiki is to show you how to execute integration tests using Apache Camel.
More precisely, doing this you will be able to launch an existing route from beginning to end (With or without your real database) or intercept the exchange between each part of the route and test if your headers or body are correct or not.
The project I have been doing this on uses classic Spring with xml configuration and DBUnit to mock a test database.</description>
    </item>
    
  </channel>
</rss>

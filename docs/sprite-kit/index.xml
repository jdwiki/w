<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sprite-kit Tutorial on </title>
    <link>https://www.wikiod.com/docs/sprite-kit/</link>
    <description>Recent content in sprite-kit Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/sprite-kit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with sprite-kit</title>
      <link>https://www.wikiod.com/sprite-kit/getting-started-with-sprite-kit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/getting-started-with-sprite-kit/</guid>
      <description>Your first SpriteKit Game (Hello World) # Open Xcode and select Create a new Xcode Project.
Now select iOS &amp;gt; Application on the left and Game on the main selection area.
Press Next.
Write into Product Name the name of your first great game. Into Organization Name the name of your company (or simply your own name). Organisation Identifier should contain your reversed domain name (www.yourdomain.com becomes com.yourdomain). If you don&amp;rsquo;t have a domain write anything you want (this is just and test).</description>
    </item>
    
    <item>
      <title>SKNode Collision</title>
      <link>https://www.wikiod.com/sprite-kit/sknode-collision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/sknode-collision/</guid>
      <description>The determinants of Sprite Kit collision and contact event processing are the relationship settings, created by you, of categoryBitMask, collisionBitMask and contactTestBitMask for each of your interacting object types. By rationally setting these in service of your desired outcomes from contacts and collisions, you determine which types can collide and inform of contacts with others, and avoid undesired collision, contact and physics processing overhead.
For each type of &amp;rsquo;entity&amp;rsquo; you can set all three:</description>
    </item>
    
    <item>
      <title>UIKit elements with SpriteKit</title>
      <link>https://www.wikiod.com/sprite-kit/uikit-elements-with-spritekit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/uikit-elements-with-spritekit/</guid>
      <description>UITableView in SKScene # import SpriteKit import UIKit class GameRoomTableView: UITableView,UITableViewDelegate,UITableViewDataSource { var items: [String] = [&amp;quot;Player1&amp;quot;, &amp;quot;Player2&amp;quot;, &amp;quot;Player3&amp;quot;] override init(frame: CGRect, style: UITableViewStyle) { super.init(frame: frame, style: style) self.delegate = self self.dataSource = self } required init?(coder aDecoder: NSCoder) { fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;) } // MARK: - Table view data source func numberOfSections(in tableView: UITableView) -&amp;gt; Int { return 1 } func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int { return items.</description>
    </item>
    
    <item>
      <title>SKScene</title>
      <link>https://www.wikiod.com/sprite-kit/skscene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/skscene/</guid>
      <description>SKScene represents a single scene in a SpriteKit application. An SKScene is &amp;lsquo;presented&amp;rsquo; into an SKView. SKSpriteNodes are added to the scene to implement the actual sprites.
Simple applications may have a single SKScene that contains all the SpriteKit content. More complex apps may have several SKScenes that are presented at different times (e.g. an opening scene to present the game options, a second scene to implement the game itself and a third scene to present the &amp;lsquo;Game Over&amp;rsquo; results).</description>
    </item>
    
    <item>
      <title>SKSpriteNode (Sprites)</title>
      <link>https://www.wikiod.com/sprite-kit/skspritenode-sprites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/skspritenode-sprites/</guid>
      <description>Syntax # convenience init(imageNamed name: String) // Create an SKSpriteNode from a named image in the assets catalogue
var position: CGPoint // SKNode property, inherited by SKSpriteNode. The position of the node in the parents co-ordinate system.
func addChild(_ node: SKNode) // SKNode method, inherited by SKScene. Used to add an SKSpriteNode to the scene (also used to add SKNodes to other SKNodes).
Subclassing SKSpriteNode # You can subclass SKSpriteNode and define your own type of sprite.</description>
    </item>
    
    <item>
      <title>Detecting touch input on iOS devices</title>
      <link>https://www.wikiod.com/sprite-kit/detecting-touch-input-on-ios-devices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/detecting-touch-input-on-ios-devices/</guid>
      <description>Detecting touch # You can override 4 methods of SKScene to detect user touch
class GameScene: SKScene { override func touchesBegan(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesMoved(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesEnded(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) { } override func touchesCancelled(touches: Set&amp;lt;UITouch&amp;gt;?, withEvent event: UIEvent?) { } } Please note that each method receives a touches parameter which (under particular circumstances) can contain more then one single touch event.</description>
    </item>
    
    <item>
      <title>SKView</title>
      <link>https://www.wikiod.com/sprite-kit/skview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/skview/</guid>
      <description>Parameters # Parameter Details showsFPS Display a count of the current frame rate in Frames Per Second in the view. showsNodeCount Display a count of the current number of SKNodes being displayed in the view. showsPhysics Display a visual representation of the SKPhysicsBodys in the view. showsFields Display an image representing the effects of the physics fields in the view. showsDrawCount Display a count of the number of drawing passes required to render the view.</description>
    </item>
    
    <item>
      <title>SKAction</title>
      <link>https://www.wikiod.com/sprite-kit/skaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/skaction/</guid>
      <description>Create and Run a Simple SKAction # A very simple example would be to fade out an SKSpriteNode.
In Swift:
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let action = SKAction.fadeOutWithDuration(1.0) node.runAction(action) Creating a Repeating Sequence of Actions # Sometimes it is necessary to do an action on repeat or in a sequence. This example will make the node fade in and out a total of 3 times.
In Swift:
let node = SKSpriteNode(imageNamed: &amp;quot;image&amp;quot;) let actionFadeOut = SKAction.</description>
    </item>
    
    <item>
      <title>Timed functions in SpriteKit  SKActions vs NSTimers</title>
      <link>https://www.wikiod.com/sprite-kit/timed-functions-in-spritekit--skactions-vs-nstimers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/timed-functions-in-spritekit--skactions-vs-nstimers/</guid>
      <description>When should you use SKActions to perform timer functions? Almost always. The reason for this is because Sprite Kit operates on an update interval, and the speed of this interval can be changed throughout the life time of the process using the speed property. Scenes can also be paused as well. Since SKActions work inside the scene, when you alter these properties, there is no need to alter your time functions.</description>
    </item>
    
    <item>
      <title>Physics</title>
      <link>https://www.wikiod.com/sprite-kit/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/sprite-kit/physics/</guid>
      <description>How to correctly remove node in didBeginContact method (multiple contacts) # // PHYSICS CONSTANTS struct PhysicsCategory { static let None : UInt32 = 0 static let All : UInt32 = UInt32.max static let player : UInt32 = 0b1 // 1 static let bullet : UInt32 = 0b10 // 2 } var nodesToRemove = [SKNode]() // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# //MARK: - Physic Contact Delegate methods // #-#-#-#-#-#-#-#-#-#-#-#-#-#-# func didBegin(_ contact: SKPhysicsContact) { var one: SKPhysicsBody var two: SKPhysicsBody if contact.</description>
    </item>
    
  </channel>
</rss>

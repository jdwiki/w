<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular 2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/angular2/</link>
    <description>Recent content in Angular 2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/angular2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Angular 2</title>
      <link>https://www.wikiod.com/angular2/getting-started-with-angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/getting-started-with-angular-2/</guid>
      <description>Install angular2 with angular-cli # This example is a quick setup of Angular 2 and how to generate a quick example project.
Prerequisites: # Node.js v4 or greater. npm v3 or greater or yarn. Open a terminal and run the commands one by one:
npm install -g @angular/cli or
yarn global add @angular/cli depending on your choice of package manager.
The previous command installs @angular/cli globally, adding the executable ng to PATH.</description>
    </item>
    
    <item>
      <title>Angular 2 Forms Update</title>
      <link>https://www.wikiod.com/angular2/angular-2-forms-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/angular-2-forms-update/</guid>
      <description>Angular 2 allow to access the ngForm instance by creating a local template variable. Angular 2 exposes directive instances like ngForm by specifying exportAs property of the directive metadata. Now, the advantage here is without much coding you can access the ngForm instance and use it to access submitted values or to check if all the fields are valid using properties (valid, submitted, value etc).
#f = ngForm (creates local template instance &amp;quot;f&amp;quot;) ngForm emits the event &amp;ldquo;ngSubmit&amp;rdquo; when it&amp;rsquo;s submitted (Check @Output documentation for more details of event emitter)</description>
    </item>
    
    <item>
      <title>Pipes</title>
      <link>https://www.wikiod.com/angular2/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/pipes/</guid>
      <description>The pipe | character is used to apply pipes in Angular 2. Pipes are very similar to filters in AngularJS in that they both help to transform the data into a specified format.
Parameters # Function/Parameter Explanation @Pipe({name, pure}) metadata for pipe, must immediately precede pipe class name: string what you will use inside the template pure: boolean defaults to true, mark this as false to have your pipe re-evaluated more often transform( value, args[]?</description>
    </item>
    
    <item>
      <title>Dynamically add components using ViewContainerRef.createComponent</title>
      <link>https://www.wikiod.com/angular2/dynamically-add-components-using-viewcontainerrefcreatecomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/dynamically-add-components-using-viewcontainerrefcreatecomponent/</guid>
      <description>A wrapper component that adds dynamic components declaratively # A custom component that takes the type of a component as input and creates an instance of that component type inside itself. When the input is updated, the previously added dynamic component is removed and the new one added instead.
@Component({ selector: &#39;dcl-wrapper&#39;, template: `&amp;lt;div #target&amp;gt;&amp;lt;/div&amp;gt;` }) export class DclWrapper { @ViewChild(&#39;target&#39;, { read: ViewContainerRef }) target; @Input() type; cmpRef: ComponentRef; private isViewInitialized: boolean = false; constructor(private resolver: ComponentResolver) {} updateComponent() { if (!</description>
    </item>
    
    <item>
      <title>Mocking @ngrxStore</title>
      <link>https://www.wikiod.com/angular2/mocking-ngrxstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/mocking-ngrxstore/</guid>
      <description>@ngrx/Store is becoming more widely used in Angular 2 projects. As such, the Store is required to be injected into the constructor of any Component or Service that wishes to use it. Unit testing Store isn&amp;rsquo;t as easy as testing a simple service though. As with many problems, there are a myriad of ways to implement solutions. However, the basic recipe is to write a mock class for the Observer interface and to write a mock class for Store.</description>
    </item>
    
    <item>
      <title>Angular RXJS Subjects and Observables with API requests</title>
      <link>https://www.wikiod.com/angular2/angular-rxjs-subjects-and-observables-with-api-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/angular-rxjs-subjects-and-observables-with-api-requests/</guid>
      <description>Making API requests with Angular 2 Http service and RxJS is very similar to working with promises in Angular 1.x.
Use the Http class to make requests. The Http class exposes the methods for issuing HTTP requests GET, POST, PUT, DELETE, PATCH, HEAD requests via corresponding methods. It also exposes a generic request method for issuing any kind of HTTP request.
All methods of the Http class return an Observable&amp;lt;Response&amp;gt;, to which you can apply RxJS operations.</description>
    </item>
    
    <item>
      <title>Routing (3.0.0&#43;)</title>
      <link>https://www.wikiod.com/angular2/routing-300-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/routing-300-/</guid>
      <description>There are a few more tricks we can do with the router (such as restricting access), but those can be covered in a separate tutorial.
If you need a new route, simply modify app.routes.ts and follow the following steps:
Import the Component Add to the routes array. Make sure to include a new path and component. Controlling Access to or from a Route # The default Angular router allows navigation to and from any route unconditionally.</description>
    </item>
    
    <item>
      <title>Bootstrap Empty module in angular 2</title>
      <link>https://www.wikiod.com/angular2/bootstrap-empty-module-in-angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/bootstrap-empty-module-in-angular-2/</guid>
      <description>An empty module # import { NgModule } from &#39;@angular/core&#39;; @NgModule({ declarations: [], // components your module owns. imports: [], // other modules your module needs. providers: [], // providers available to your module. bootstrap: [] // bootstrap this root component. }) export class MyModule {} This is an empty module containing no declarations, imports, providers, or components to bootstrap. Use this a reference.
Application Root Module # import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { AppComponent } from &#39;.</description>
    </item>
    
    <item>
      <title>Testing an Angular 2 App</title>
      <link>https://www.wikiod.com/angular2/testing-an-angular-2-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/testing-an-angular-2-app/</guid>
      <description>Installing the Jasmine testing framework # The most common way to test Angular 2 apps is with the Jasmine test framework. Jasmine allows you to test your code in the browser.
Install # To get started, all you need is the jasmine-core package (not jasmine).
npm install jasmine-core --save-dev --save-exact Verify # To verify that Jasmine is set up properly, create the file ./src/unit-tests.html with the following content and open it in the browser.</description>
    </item>
    
    <item>
      <title>Detecting resize events</title>
      <link>https://www.wikiod.com/angular2/detecting-resize-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/angular2/detecting-resize-events/</guid>
      <description>A component listening in on the window resize event. # Suppose we have a component which will hide at a certain window width.
import { Component } from &#39;@angular/core&#39;; @Component({ ... template: ` &amp;lt;div&amp;gt; &amp;lt;p [hidden]=&amp;quot;!visible&amp;quot; (window:resize)=&amp;quot;onResize($event)&amp;quot; &amp;gt;Now you see me...&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;now you dont!&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ` ... }) export class MyComponent { visible: boolean = false; breakpoint: number = 768; constructor() { } onResize(event) { const w = event.target.innerWidth; if (w &amp;gt;= this.</description>
    </item>
    
  </channel>
</rss>

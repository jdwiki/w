<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>watchkit Tutorial on </title>
    <link>https://www.wikiod.com/docs/watchkit/</link>
    <description>Recent content in watchkit Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/watchkit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with watchkit</title>
      <link>https://www.wikiod.com/watchkit/getting-started-with-watchkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/watchkit/getting-started-with-watchkit/</guid>
      <description>Connecting the code with the UI # Like iOS where you use @IBOutlet and @IBAction, here you could use them too.
Let&amp;rsquo;s say we have a button which when clicked changes the label&amp;rsquo;s text to something else.
To get started:
Add a WKInterfaceLabel and a WKInterfaceLabel to the InterfaceController.
Ctrl-Drag from the WKInterfaceLabel to InterfaceController.swift and enter the details as shown in the following picture to add an outlet property:</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://www.wikiod.com/watchkit/navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/watchkit/navigation/</guid>
      <description>Important Note # Apple has highly discouraged use of both navigation styles in one controller, and this may result in an app rejection.
Currently, the preferred way is to use hierarchical style rather than page based, as used in many more Apple apps than before.
Page-based navigation # Many watchOS apps (like Activity) have several pages which you could simply scroll between them, which is a very good way to use Apple Watch.</description>
    </item>
    
    <item>
      <title>WatchConnectivity</title>
      <link>https://www.wikiod.com/watchkit/watchconnectivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/watchkit/watchconnectivity/</guid>
      <description>Connecting your WatchOS application to your iOS application can be a task to complete when you have never done it before. This tutorial will show you the basic fundamentals in order to accomplish this very important task.
iOS Configuration # iPhone App
import WatchConnectivity and conform to WCSessionDelegate. use the static session delegate via WCSession.default(). Send data to Watch app using: WCSession.default().sendMessage(message, replyHandler:_ errorHandler:_) The message object should be a dictionary of type [String:Any] If you are looking for data to be returned from the Watch app, provide the logic in a closure defined in the replyHandler; otherwise, pass in nil.</description>
    </item>
    
  </channel>
</rss>

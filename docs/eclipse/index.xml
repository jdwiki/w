<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eclipse Tutorial on </title>
    <link>https://www.wikiod.com/docs/eclipse/</link>
    <description>Recent content in eclipse Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/eclipse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with eclipse</title>
      <link>https://www.wikiod.com/eclipse/getting-started-with-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/getting-started-with-eclipse/</guid>
      <description>Installation and Setup # To install Eclipse, go to the Eclipse Downloads Web page where there is usually a direct link to download the latest version of Eclipse. Starting Eclipse Mars (version 4.5), an installer can be downloaded which guides you through the installation procedure, as opposed to downloading the whole installation as a compressed file (this option is still available, however). There are also links to download old Eclipse packages.</description>
    </item>
    
    <item>
      <title>Configuring Eclipse</title>
      <link>https://www.wikiod.com/eclipse/configuring-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/configuring-eclipse/</guid>
      <description>Increasing maximum heap memory for Eclipse # To increase the maximum amount of heap memory used Eclipse, edit the eclipse.ini file located in the Eclipse installation directory.
This file specifies options for the startup of Eclipse, such as which JVM to use, and the options for the JVM. Specifically, you need to edit the value of the -Xmx JVM option (or create one if it does not exist).
Below is an example configuration that sets a maximum heap memory of 1 GB (1024m).</description>
    </item>
    
    <item>
      <title>Remote Debugging in Eclipse</title>
      <link>https://www.wikiod.com/eclipse/remote-debugging-in-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/remote-debugging-in-eclipse/</guid>
      <description>Configure Eclipse Remote Debugging for an application # The following are the steps to start an Eclipse remote debugger. This is useful when the application is not started from a server instance within Eclipse. This feature is really powerful and can also help debugging code which resides in the test or production environment. Let&amp;rsquo;s have a look at the settings:
Eclipse Settings:
1.Click the Run Button
2.Select the Debug Configurations</description>
    </item>
    
    <item>
      <title>Setting up Eclipse for C&#43;&#43;</title>
      <link>https://www.wikiod.com/eclipse/setting-up-eclipse-for-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/setting-up-eclipse-for-c-/</guid>
      <description>Linux + CMake (&amp;ldquo;Unix Makefiles&amp;rdquo; generator) + Qt (optional) # You should have a plain CMake project myproject, and we are going to make an Eclipse workspace outside of it:
myproject/ .git/ CMakeLists.txt src/ main.cpp workspace/ myproject/ Release/ Debug/ Qt (optional) # Get latest Eclipse CDT and then install the Qt package in it through &amp;ldquo;Help -&amp;gt; Install New Software&amp;rdquo;. Workspace # Create an empty &amp;ldquo;workspace&amp;rdquo; directory alongside your CMake project source directory.</description>
    </item>
    
    <item>
      <title>Create a new workspace in Eclipse</title>
      <link>https://www.wikiod.com/eclipse/create-a-new-workspace-in-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/create-a-new-workspace-in-eclipse/</guid>
      <description>How to create a workspace # Go to File -&amp;gt; Switch Workspace -&amp;gt; Other&amp;hellip; and type in your new workspace name.</description>
    </item>
    
    <item>
      <title>Debugging Java programs in Eclipse</title>
      <link>https://www.wikiod.com/eclipse/debugging-java-programs-in-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/debugging-java-programs-in-eclipse/</guid>
      <description>Remote debugging of a Java application # n order to debug a remote Java application, it should be launched with some extra arguments to instruct the JVM to execute it in debug mode. This is done as follows:
java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 -jar sampleApp.jar The above command tells the JVM to start the application sampleApp.jar while having a server socket listening at port 8000 for a debugger to attach to it. The suspend argument tells whether you want the JVM to wait until a debugger attaches to the port number before the application effectively runs.</description>
    </item>
    
    <item>
      <title>Eclipse Shortcuts</title>
      <link>https://www.wikiod.com/eclipse/eclipse-shortcuts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/eclipse-shortcuts/</guid>
      <description>Eclipse has many shortcuts to make your life easier.
Comment/Uncomment code # To comment or uncomment code select the lines and use Ctrl + Shift + C or Ctrl + Shift + /
Refactor Highlighted Text # Renaming a variable or class is usually a tedious task, by searching for all the locations where it is used. This can be significantly speeded up by highlighting the word, pressing Alt+Shift+R and then typing the new word.</description>
    </item>
    
    <item>
      <title>How Eclipse Remote Debugging works behind the scenes</title>
      <link>https://www.wikiod.com/eclipse/how-eclipse-remote-debugging-works-behind-the-scenes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/how-eclipse-remote-debugging-works-behind-the-scenes/</guid>
      <description>How does Eclipse Remote Debugging work behind the scences # Eclipse debugging starts with what is referred to as Agents.
The JVM, which runs the complied .class sources has a feature that allows externally libraries (written in either Java or C++) to be injected into the JVM, just about runtime. These external libraries are referred to as Agents and they have the ability to modify the content of the .class files been run.</description>
    </item>
    
    <item>
      <title>Tomcat deployment procedure</title>
      <link>https://www.wikiod.com/eclipse/tomcat-deployment-procedure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/eclipse/tomcat-deployment-procedure/</guid>
      <description>Procedure when nothing else helps # Once a while concecuent deploys to internal tomcat start giving constant error, without any clear cause (Listener start or ClassNotFoundException). When nothing seems to cure it, this procedure saves the world:
1 delete Servers folder
2 restart Eclipse
3 create new server, add project and start
Works like charm and is not so lengthy.
If from some reason this fails, my original lengthy procedure (where the other is a short cut that should do the same) is here:</description>
    </item>
    
  </channel>
</rss>

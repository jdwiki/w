<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>moq Tutorial on </title>
    <link>https://www.wikiod.com/docs/moq/</link>
    <description>Recent content in moq Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/moq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with moq</title>
      <link>https://www.wikiod.com/moq/getting-started-with-moq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/moq/getting-started-with-moq/</guid>
      <description>Installation or Setup # Select the project you want to add the reference to Moq. Open Nuget for this project. Select &amp;ldquo;Browse&amp;rdquo; than type &amp;ldquo;moq&amp;rdquo; at the search box. Select &amp;ldquo;Moq&amp;rdquo; and than click on Install. Following these steps will install the Moq package and will add a reference to it in the selected project references. After completing these steps Moq can be used in the unit test project by simply declaring it in the test classes files:</description>
    </item>
    
    <item>
      <title>Validating call order</title>
      <link>https://www.wikiod.com/moq/validating-call-order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/moq/validating-call-order/</guid>
      <description>Validating call order implicitly # Where a method to be tested uses information from one call to pass on to subsequent calls, one approach that can be used to ensure the methods are called in the expected order is to setup the expectations to reflect this flow of data.
Given the method to test:
public void MethodToTest() { var str = _utility.GetInitialValue(); str = _utility.PrefixString(str); str = _utility.ReverseString(str); _target.DoStuff(str); } Expectations can be set to pass data from GetInitialValue through PrefixString and ReverseString to DoStuff, where the information is verified.</description>
    </item>
    
    <item>
      <title>Mocking Behavior</title>
      <link>https://www.wikiod.com/moq/mocking-behavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/moq/mocking-behavior/</guid>
      <description>Syntax # mock.Setup(expression).Returns(value) //Whenever called the method in the expression will return value Parameters # Parameter Details expression Lambda expression that specifies the method invocation. No-Argument method mocking # interface Mockable { bool DoSomething(); } var mock = new Mock&amp;lt;Mockable&amp;gt;(); mock.Setup(x =&amp;gt; x.DoSomething()).Returns(true); var result = mock.Object.DoSomething(); //true Mocking protected members # To mock a protected member you must first include the following at the top of your test fixture:</description>
    </item>
    
    <item>
      <title>Mocking common interfaces</title>
      <link>https://www.wikiod.com/moq/mocking-common-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/moq/mocking-common-interfaces/</guid>
      <description>Mocking IEnumerable # Mocking an interface that inherits from IEnumerable to return canned data is quite straightforward. Assuming the following classes:
public class DataClass { public int Id { get; set; } } public interface IEnumerableClass : IEnumerable&amp;lt;DataClass&amp;gt; { } The following approach can be taken. First, create a list containing the information that needs to be returned by the mock:
IList&amp;lt;DataClass&amp;gt; list = new List&amp;lt;DataClass&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { list.</description>
    </item>
    
    <item>
      <title>Mocking properties</title>
      <link>https://www.wikiod.com/moq/mocking-properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/moq/mocking-properties/</guid>
      <description>Auto stubbing properties # Sometimes you want to mock a class or an interface and have its properties behave as if they were simple getters and setters. As this is a common requirement, Moq provides a short cut method to setup all properties of a mock to store and retrieve values:
// SetupAllProperties tells mock to implement setter/getter funcationality var userMock = new Mock&amp;lt;IUser&amp;gt;().SetupAllProperties(); // Invoke the code to test SetPropertiesOfUser(userMock.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elm Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/elm/</link>
    <description>Recent content in Elm Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/elm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Elm Language</title>
      <link>https://www.wikiod.com/elm/getting-started-with-elm-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/getting-started-with-elm-language/</guid>
      <description>Installation # To start development with Elm, you need to install a set of tools called elm-platform.
It includes: elm-make, elm-reactor, elm-repl and elm-package.
All of these tools are available through CLI, in other words you can use them from your terminal.
Pick one of the following methods to install Elm:
Using the installer # Download the installer from the official website and follow the installation wizard.
Using npm # You can use Node Package Manager to install Elm platform.</description>
    </item>
    
    <item>
      <title>Ports (JS interop)</title>
      <link>https://www.wikiod.com/elm/ports-js-interop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/ports-js-interop/</guid>
      <description>Syntax # Elm (receiving): port functionName : (value -&amp;gt; msg) -&amp;gt; Sub msg JS (sending): app.ports.functionName.send(value) Elm (sending): port functionName : args -&amp;gt; Cmd msg JS (receiving): app.ports.functionName.subscribe(function(args) { &amp;hellip; }); Consult http://guide.elm-lang.org/interop/javascript.html from The Elm Guide to aid in understanding these examples.
Outgoing # Outgoing ports are used as Commands, that you return from your update function.
Elm side # Define outgoing port:
port output : () -&amp;gt; Cmd msg In this example we send an empty Tuple, just to trigger a subscription on the JavaScript side.</description>
    </item>
    
    <item>
      <title>Lists and Iteration</title>
      <link>https://www.wikiod.com/elm/lists-and-iteration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/lists-and-iteration/</guid>
      <description>The List (linked list) shines in sequential access:
accessing the first element prepending to the front of the list deleting from the front of the list On the other hand, it&amp;rsquo;s not ideal for random access (ie. getting nth element) and traversation in reverse order, and you might have better luck (and performance) with the Array data structure.
Creating a list by range # Prior to 0.18.0 you can create ranges like this:</description>
    </item>
    
    <item>
      <title>The Elm Architecture</title>
      <link>https://www.wikiod.com/elm/the-elm-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/the-elm-architecture/</guid>
      <description>The recommended way to structure your applications is dubbed &amp;rsquo;the Elm Architecture.&#39;
The simplest program consists of a model record storing all data that might be updated, a union type Msg that defines ways your program updates that data, a function update which takes the model and a Msg and returns a new model, and a function view which takes a model and returns the HTML your page will display. Anytime a function returns a Msg, the Elm runtime uses it to update the page.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://www.wikiod.com/elm/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/debugging/</guid>
      <description>Syntax # Debug.log &amp;ldquo;tag&amp;rdquo; anyValue Debug.log takes two parameters, a String to tag the debug output in the console (so you know where it&amp;rsquo;s coming from / what the message corresponds to), and a value of any type. Debug.log executes the side-effect of logging the tag and the value to the JavaScript console, and then returns the value. The implementation in JS might look something like:
function log (tag, value){ console.</description>
    </item>
    
    <item>
      <title>Types, Type Variables, and Type Constructors</title>
      <link>https://www.wikiod.com/elm/types-type-variables-and-type-constructors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/types-type-variables-and-type-constructors/</guid>
      <description>Please play with these concepts yourself to really master them! The elm-repl (see the Introduction to the REPL) is probably a good place to play around with the code above. You can also play with elm-repl online.
Improving Type-Safety Using New Types # Aliasing types cuts down on boilerplate and enhances readability, but it is no more type-safe than the aliased type itself is. Consider the following:
type alias Email = String type alias Name = String someEmail = &amp;quot;holmes@private.</description>
    </item>
    
    <item>
      <title>Functions and Partial Application</title>
      <link>https://www.wikiod.com/elm/functions-and-partial-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/functions-and-partial-application/</guid>
      <description>Syntax # &amp;ndash; defining a function with no arguments looks the same as simply defining a value
language = &amp;ldquo;Elm&amp;rdquo; &amp;ndash; calling a function with no arguments by stating its name
language &amp;ndash; parameters are separated by spaces and follow the function&amp;rsquo;s name
add x y = x + y &amp;ndash; call a function in the same way
add 5 2 &amp;ndash; partially apply a function by providing only some of its parameters</description>
    </item>
    
    <item>
      <title>Json.Decode</title>
      <link>https://www.wikiod.com/elm/jsondecode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/jsondecode/</guid>
      <description>Json.Decode exposes two functions to decode a payload, first one is decodeValue which tries to decode a Json.Encode.Value, the second one is decodeString which tries to decode a JSON string. Both function take 2 parameters, a decoder and a Json.Encode.Value or Json string.
Pre-decode a field and decode the rest depending on that decoded value # The following examples can be tested on https://ellie-app.com/m9vmQ8NcMc/0.
import Html exposing (..) import Json.Decode payload = &amp;quot;&amp;quot;&amp;quot; [ { &amp;quot;bark&amp;quot;: true, &amp;quot;tag&amp;quot;: &amp;quot;dog&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Zap&amp;quot;, &amp;quot;playful&amp;quot;: true } , { &amp;quot;whiskers&amp;quot;: true, &amp;quot;tag&amp;quot; : &amp;quot;cat&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Felix&amp;quot; } , {&amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;, &amp;quot;tag&amp;quot;: &amp;quot;tomato&amp;quot;} ] &amp;quot;&amp;quot;&amp;quot; -- OUR MODELS type alias Dog = { bark: Bool , name: String , playful: Bool } type alias Cat = { whiskers: Bool , name: String } -- OUR DIFFERENT ANIMALS type Animal = DogAnimal Dog | CatAnimal Cat | NoAnimal main = Json.</description>
    </item>
    
    <item>
      <title>Collecting Data Tuples, Records and Dictionaries</title>
      <link>https://www.wikiod.com/elm/collecting-data-tuples-records-and-dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/collecting-data-tuples-records-and-dictionaries/</guid>
      <description>Dictionaries # Dictionaries are implemented in a Dict core library.
A dictionary mapping unique keys to values. The keys can be any comparable type. This includes Int, Float, Time, Char, String, and tuples or lists of comparable types.
Insert, remove, and query operations all take O(log n) time.
Unlike Tuples and Records, Dictionaries can change their structure, in other words it is possible to add and remove keys.
It is possible to update a value by a key.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>https://www.wikiod.com/elm/pattern-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/elm/pattern-matching/</guid>
      <description>Single type deconstructed argument # type ProjectIdType = ProjectId String getProject : ProjectIdType -&amp;gt; Cmd Msg getProject (ProjectId id) = Http.get &amp;lt;| &amp;quot;/projects/&amp;quot; ++ id Function arguments # type Dog = Dog String dogName1 dog = case dog of Dog name -&amp;gt; name dogName2 (Dog name) -&amp;gt; name dogName1 and dogName2 are equivalent. Note that this only works for ADTs that have a single constructor.
type alias Pet = { name: String , weight: Float } render : Pet -&amp;gt; String render ({name, weight} as pet) = (findPetEmoji pet) ++ &amp;quot; &amp;quot; ++ name ++ &amp;quot; weighs &amp;quot; ++ (toString weight) findPetEmoji : Pet -&amp;gt; String findPetEmoji pet = Debug.</description>
    </item>
    
  </channel>
</rss>

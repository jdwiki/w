<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>appium Tutorial on </title>
    <link>https://www.wikiod.com/docs/appium/</link>
    <description>Recent content in appium Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/appium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with appium</title>
      <link>https://www.wikiod.com/appium/getting-started-with-appium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/appium/getting-started-with-appium/</guid>
      <description>Installation or Setup # Pre-requirements # Check the requirements for each device type you wish to automate and make sure they&amp;rsquo;re installed before attempting to use Appium!
iOS Requirements
Mac OS X 10.10 or higher, 10.11.1 recommended XCode &amp;gt;= 6.0, 7.1.1 recommended Apple Developer Tools (iPhone simulator SDK, command line tools) Ensure you read the documentation on setting yourself up for iOS testing! Android Requirements
Android SDK API &amp;gt;= 17 (Additional features require 18/19)</description>
    </item>
    
    <item>
      <title>Java client</title>
      <link>https://www.wikiod.com/appium/java-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/appium/java-client/</guid>
      <description>Java Client API
Java Client Source Code
Android Play Store automation (Real device) # File Structure:
pom.xml src/test/java/PlayStoreAutomation.java Launch command:
mvn test -Dtest=PlayStoreAutomation
PlayStoreAutomation.java # import org.junit.AfterClass; import org.junit.BeforeClass; import org.junit.Test; import io.appium.java_client.android.AndroidDriver; import io.appium.java_client.android.AndroidKeyCode; import io.appium.java_client.MobileElement; import org.openqa.selenium.remote.DesiredCapabilities; import org.openqa.selenium.By; import java.util.concurrent.TimeUnit; import java.net.URL; public class PlayStoreAutomation { public static AndroidDriver&amp;lt;MobileElement&amp;gt; driver; @BeforeClass public static void setUp() throws Exception { DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(&amp;quot;platformName&amp;quot;, &amp;quot;Android&amp;quot;); capabilities.setCapability(&amp;quot;deviceName&amp;quot;, &amp;quot;Android Device&amp;quot;); capabilities.</description>
    </item>
    
    <item>
      <title>Parallel Testing in Appium</title>
      <link>https://www.wikiod.com/appium/parallel-testing-in-appium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/appium/parallel-testing-in-appium/</guid>
      <description>Parallel execution in appium using selenium GRID concept. Please find step by step process.
Step By Step process # Parallel Testing with Appium using GRID: I will describe the way which worked for me. Create Selenium Grid with Appium
Setup the selenium grid Download selenium standalone server jar on local file system Open your terminal and navigate to the directory to where you placed the jar file and execute the following command: java -jar selenium-server-standalone-2.</description>
    </item>
    
  </channel>
</rss>

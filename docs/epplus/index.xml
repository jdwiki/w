<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>epplus Tutorial on </title>
    <link>https://www.wikiod.com/docs/epplus/</link>
    <description>Recent content in epplus Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/epplus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with epplus</title>
      <link>https://www.wikiod.com/epplus/getting-started-with-epplus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/getting-started-with-epplus/</guid>
      <description>Installation # Download the files from CodePlex and add them to the project.
Or install the files with the Package Manager.
PM&amp;gt; Install-Package EPPlus Getting started # //Create a new ExcelPackage using (ExcelPackage excelPackage = new ExcelPackage()) { //Set some properties of the Excel document excelPackage.Workbook.Properties.Author = &amp;quot;VDWWD&amp;quot;; excelPackage.Workbook.Properties.Title = &amp;quot;Title of Document&amp;quot;; excelPackage.Workbook.Properties.Subject = &amp;quot;EPPlus demo export data&amp;quot;; excelPackage.Workbook.Properties.Created = DateTime.Now; //Create the WorkSheet ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Add(&amp;quot;Sheet 1&amp;quot;); //Add some text to cell A1 worksheet.</description>
    </item>
    
    <item>
      <title>Creating formulas and calculate ranges</title>
      <link>https://www.wikiod.com/epplus/creating-formulas-and-calculate-ranges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/creating-formulas-and-calculate-ranges/</guid>
      <description>Basic examples of how to create cells with a formula for calculations within the Excel sheet.
Add formulas to a cell # //set the total value of cells in range A1 - A25 into A27 worksheet.Cells[&amp;quot;A27&amp;quot;].Formula = &amp;quot;=SUM(A1:A25)&amp;quot;; //set the number of cells with content in range C1 - C25 into C27 worksheet.Cells[&amp;quot;C27&amp;quot;].Formula = &amp;quot;=COUNT(C1:C25)&amp;quot;; //fill column K with the sum of each row, range A - J for (int i = 1; i &amp;lt;= 25; i++) { var cell = worksheet.</description>
    </item>
    
    <item>
      <title>Saving the Excel document</title>
      <link>https://www.wikiod.com/epplus/saving-the-excel-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/saving-the-excel-document/</guid>
      <description>Examples on how to save the created Excel sheet to the Disk or send it to the Browser.
Save to disk # //Using File.WriteAllBytes using (ExcelPackage excelPackage = new ExcelPackage()) { //create a new Worksheet ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Add(&amp;quot;Sheet 1&amp;quot;); //add some text to cell A1 worksheet.Cells[&amp;quot;A1&amp;quot;].Value = &amp;quot;My second EPPlus spreadsheet!&amp;quot;; //convert the excel package to a byte array byte[] bin = excelPackage.GetAsByteArray(); //the path of the file string filePath = &amp;quot;C:\\ExcelDemo.</description>
    </item>
    
    <item>
      <title>Importing data from existing file</title>
      <link>https://www.wikiod.com/epplus/importing-data-from-existing-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/importing-data-from-existing-file/</guid>
      <description>How to import data from an existing Excel or CSV file.
Import data from Excel file # //create a list to hold all the values List&amp;lt;string&amp;gt; excelData = new List&amp;lt;string&amp;gt;(); //read the Excel file as byte array byte[] bin = File.ReadAllBytes(&amp;quot;C:\\ExcelDemo.xlsx&amp;quot;); //or if you use asp.net, get the relative path byte[] bin = File.ReadAllBytes(Server.MapPath(&amp;quot;ExcelDemo.xlsx&amp;quot;)); //create a new Excel package in a memorystream using (MemoryStream stream = new MemoryStream(bin)) using (ExcelPackage excelPackage = new ExcelPackage(stream)) { //loop all worksheets foreach (ExcelWorksheet worksheet in excelPackage.</description>
    </item>
    
    <item>
      <title>User Input Validation</title>
      <link>https://www.wikiod.com/epplus/user-input-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/user-input-validation/</guid>
      <description>How to validade user inputs. Validation constrains the values a user can input into a cell, and/or set a combobox for the user select the value for the cell. Optionally, a message can be displayed when the user clicks in a cell and a message error, when the validation fails.
List Validation # //Add a List validation to B column. Values should be in a list var val = worksheet.DataValidations.AddListValidation(&amp;quot;B:B&amp;quot;); //Shows error message when the input doesn&#39;t match the accepted values val.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>https://www.wikiod.com/epplus/tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/tables/</guid>
      <description>This topic describe how to add and style tables
Adding and formating a table # //Using statement for ExcelTable and TableStyles using OfficeOpenXml.Table; //Defining the tables parameters int firstRow =1; int lastRow = worksheet.Dimension.End.Row; int firstColumn = 1; int lastColumn = worksheet.Dimension.End.Column; ExcelRange rg = worksheet.Cells[firstRow, firstColumn, lastRow, LastColumn]; string tableName = &amp;quot;Table1&amp;quot;; //Ading a table to a Range ExcelTable tab = worksheet.Tables.Add(rg, tableName); //Formating the table style tab.TableStyle = TableStyles.</description>
    </item>
    
    <item>
      <title>Pivot Table</title>
      <link>https://www.wikiod.com/epplus/pivot-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/pivot-table/</guid>
      <description>Pivot table is one kind of interactive table, which can be used to calculate data, such as get sum or count data. Also, users can change pivot table layout for analyzing data with different ways or reassign row/column label. Every time users change layout, data will be recalculated in pivot table.
Creating a Pivot Table # //create a new ExcelPackage using (ExcelPackage excelPackage = new ExcelPackage()) { //create 2 WorkSheets. One for the source data and one for the Pivot table ExcelWorksheet worksheetPivot = excelPackage.</description>
    </item>
    
    <item>
      <title>Append data to existing document</title>
      <link>https://www.wikiod.com/epplus/append-data-to-existing-document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/append-data-to-existing-document/</guid>
      <description>How to append data to an already existing Excel document.
Appending data # //the path of the file string filePath = &amp;quot;C:\\ExcelDemo.xlsx&amp;quot;; //or if you use asp.net, get the relative path filePath = Server.MapPath(&amp;quot;ExcelDemo.xlsx&amp;quot;); //create a fileinfo object of an excel file on the disk FileInfo file = new FileInfo(filePath); //create a new Excel package from the file using (ExcelPackage excelPackage = new ExcelPackage(file)) { //create an instance of the the first sheet in the loaded file ExcelWorksheet worksheet = excelPackage.</description>
    </item>
    
    <item>
      <title>Formatting values</title>
      <link>https://www.wikiod.com/epplus/formatting-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/formatting-values/</guid>
      <description>How to get the desired formatting of DateTime and Numeric values.
Number formatting # //integer (not really needed unless you need to round numbers, Excel with use default cell properties) worksheet.Cells[&amp;quot;A1:A25&amp;quot;].Style.Numberformat.Format = &amp;quot;0&amp;quot;; //integer without displaying the number 0 in the cell worksheet.Cells[&amp;quot;A1:A25&amp;quot;].Style.Numberformat.Format = &amp;quot;#&amp;quot;; //number with 1 decimal place worksheet.Cells[&amp;quot;A1:A25&amp;quot;].Style.Numberformat.Format = &amp;quot;0.0&amp;quot;; //number with 2 decimal places worksheet.Cells[&amp;quot;A1:A25&amp;quot;].Style.Numberformat.Format = &amp;quot;0.00&amp;quot;; //number with 2 decimal places and thousand separator worksheet.Cells[&amp;quot;A1:A25&amp;quot;].Style.Numberformat.Format = &amp;quot;#,##0.</description>
    </item>
    
    <item>
      <title>Columns and Rows</title>
      <link>https://www.wikiod.com/epplus/columns-and-rows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/epplus/columns-and-rows/</guid>
      <description>This topic contains information about working with columns and rows, like resizing, hiding, autofit
Autofit columns # //Make all text fit the cells worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns(); //Autofit with minimum size for the column. double minimumSize = 10; worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns(minimumSize); //Autofit with minimum and maximum size for the column. double maximumSize = 50; worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns(minimumSize, maximumSize); //optional use this to make all columms just a bit wider, text would sometimes still overflow after AutoFitColumns(). for (int col = 1; col &amp;lt;= worksheet.</description>
    </item>
    
  </channel>
</rss>

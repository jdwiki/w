<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache-poi Tutorial on </title>
    <link>https://www.wikiod.com/docs/apache-poi/</link>
    <description>Recent content in apache-poi Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/apache-poi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with apache-poi</title>
      <link>https://www.wikiod.com/apache-poi/getting-started-with-apache-poi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-poi/getting-started-with-apache-poi/</guid>
      <description>Installation or Setup # Detailed instructions on getting apache-poi set up or installed.</description>
    </item>
    
    <item>
      <title>Simple Excel (XLSX) creation</title>
      <link>https://www.wikiod.com/apache-poi/simple-excel-xlsx-creation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-poi/simple-excel-xlsx-creation/</guid>
      <description>Basic excel # String fileName = &amp;quot;Fruit.xlsx&amp;quot;; String sheetName = &amp;quot;Apples&amp;quot;; XSSFWorkbook wb = new XSSFWorkbook(); XSSFSheet sheet = wb.createSheet(sheetName) ; for (int r=0;r &amp;lt; 3; r++ ) { XSSFRow row = sheet.createRow(r); //iterating c number of columns for (int c=0;c &amp;lt; 3; c++ ) { XSSFCell cell = row.createCell(c); cell.setCellValue(&amp;quot;Nice apple, in row: &amp;quot;+r+&amp;quot; and col: &amp;quot;+c); } } try(FileOutputStream fos = new FileOutputStream(fileName)) { wb.write(fos); } </description>
    </item>
    
    <item>
      <title>Getting started with NPOI</title>
      <link>https://www.wikiod.com/apache-poi/getting-started-with-npoi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-poi/getting-started-with-npoi/</guid>
      <description>It is .NET version of POI Java project. it allows to read/write xls, doc, ppt files without Microsoft Office installed. Details about documentation is available here:https://github.com/tonyqus/npoi
Installing NPOI # Best way to include all library related to NPOI is NUGet Package Manager. Search for NPOI on NUGet package manager window.
Once it is successfully installed all needed library will appear in reference section of your current project Then include the NPOI into your file like this</description>
    </item>
    
    <item>
      <title>NPOI Data validation approach for XSSF(.xslx) excel file using c#</title>
      <link>https://www.wikiod.com/apache-poi/npoi-data-validation-approach-for-xssfxslx-excel-file-using-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-poi/npoi-data-validation-approach-for-xssfxslx-excel-file-using-c/</guid>
      <description>Data validation allows user to create a drop-down list and restrict values in the cell to these entries. Due to limitation Excel can&amp;rsquo;t bind more than 256 characters programmatically. To bind more than 256 characters one can follow explained approach.
When Sum of all list item&amp;rsquo;s total character count less than 256 # You can read all items either from any config file or type it inline.
Considering if its saved in Config File</description>
    </item>
    
    <item>
      <title>NPOI Data validation constraint approach for Date, Time , List Item , email etc. for XSSF(.xslx) excel file using c#</title>
      <link>https://www.wikiod.com/apache-poi/npoi-data-validation-constraint-approach-for-date-time--list-item--email-etc-for-xssfxslx-excel-file-using-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/apache-poi/npoi-data-validation-constraint-approach-for-date-time--list-item--email-etc-for-xssfxslx-excel-file-using-c/</guid>
      <description>Creating the data validation constraint can be tricky and time taking in NPOI. I have shared some of my workable approach. These approach will give good idea to customize your own constraint types.
Set the Date Constraints for Date Field Values Between 01/01/1900 To 12/31/2119 with Date Format mm/dd//yyyyy; # int DVRowLimit = (Int16.MaxValue); CellRangeAddressList cellRangeFieldsType1 = new CellRangeAddressList(1, DVRowLimit, targetFirstCol, targetLastCol); XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint)validationHelper.CreateDateConstraint(OperatorType.BETWEEN, &amp;quot;=DATE(1900,1,1)&amp;quot;, &amp;quot;=DATE(2119,12,31)&amp;quot;, &amp;quot;mm/dd/yyyyy&amp;quot;); //dvConstraint = (XSSFDataValidationConstraint)validationHelper.</description>
    </item>
    
  </channel>
</rss>

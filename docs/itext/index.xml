<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>itext Tutorial on </title>
    <link>https://www.wikiod.com/docs/itext/</link>
    <description>Recent content in itext Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/itext/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with itext</title>
      <link>https://www.wikiod.com/itext/getting-started-with-itext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/getting-started-with-itext/</guid>
      <description>Hello World # This is a very simple program to create a PDF using iText 7 / Java:
//Initialize writer PdfWriter writer = new PdfWriter(dest); //Initialize document PdfDocument pdfDoc = new PdfDocument(writer); Document doc = new Document(pdfDoc); //Add paragraph to the document doc.add(new Paragraph(&amp;quot;Hello World!&amp;quot;)); //Close document doc.close(); (Listing_01_01_HelloWorld.java)
You can navigate to many other examples from that page.
And this is a very simple program to create a PDF using the precursor iText 5.</description>
    </item>
    
    <item>
      <title>Text to PDF iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/text-to-pdf-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/text-to-pdf-itext-5-versus-itext-7/</guid>
      <description>The code to convert a plain text file to a PDF document is pretty simple whether you use iText 5 or iText 7. In iText 7, you have the advantage that you can define the alignment at the level of the document. In iText 5, you have to set the alignment for every separate Paragraph object.
To understand the real difference between iText 5 and iText 7 in this pair of examples, we have to take a look at the resulting PDF.</description>
    </item>
    
    <item>
      <title>Tables iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/tables-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/tables-itext-5-versus-itext-7/</guid>
      <description>The iText 5 class names PdfPTable and PdfPCell were chosen because we already had classes named Table and Cell to create table and cell objects at the highest programming level. There was also a class named PdfTable to be used by iText internally. Those classes had a lot of flaws and they were deprecated in favor of PdfPTable and PdfPCell. They have been removed a long time ago.
Over the years, PdfPTable and PdfPCell also received some criticism from users.</description>
    </item>
    
    <item>
      <title>Pdf Creation iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/pdf-creation-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/pdf-creation-itext-5-versus-itext-7/</guid>
      <description>In the original design for iText, it was possible to create a high-level Document object, and then have different DocListener objects listening to that Document object. This was achieved by using different writers: a PdfWriter, an HTMLWriter, and an RtfWriter. When using a PdfWriter, a PdfDocument was created internally. This low-level class took care of all PDF-related structures. More or less the same was true for the other formats.
Over the years, iText specialized and it became a pure PDF library.</description>
    </item>
    
    <item>
      <title>Forms iText 5 vs iText 7</title>
      <link>https://www.wikiod.com/itext/forms-itext-5-vs-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/forms-itext-5-vs-itext-7/</guid>
      <description>iText 5 is a library that has grown organically. Many developers contributed code. For instance: one developer contributed code to create form fields from scratch, using classes such as TextField and PdfFormField; another developer contributed code to change existing form fields, using the AcroField class and a series of setFieldProperty() methods.
In iText 5, the classes used to create form fields cannot be used to change form fields, and vice-versa. There is no relationship whatsoever between the two sets of classes.</description>
    </item>
    
    <item>
      <title>Fonts iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/fonts-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/fonts-itext-5-versus-itext-7/</guid>
      <description>In the first versions of iText, there was only one font class: Font.
With this font, you could create a Font object for fourteen fonts from five font families: Helvetica (regular, bold, oblique, bold-oblique), Times Roman (regular, bold, italic, bold-italic), Courier (regular, bold, oblique, bold-oblique), Symbol and Zapf Dingbats.
Such a Font object was created like this:
Font font = new Font(FontFamily.TIMES_ROMAN); You also had to define the font size, for instance:</description>
    </item>
    
    <item>
      <title>Styles iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/styles-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/styles-itext-5-versus-itext-7/</guid>
      <description>Creating a document in which you have to switch between styles frequently tends to be tedious in iText 5. You need to create a lot of Chunk objects and you always have to make a trade-off between applying the styles directly to every new Chunk or creating a helper method that creates the Chunk for you.
What we fixed in iText 7:
It is now possible to chain methods. The setFont(), setFontSize(), addStyle(), and other methods all return the object on which they are invoked.</description>
    </item>
    
    <item>
      <title>Page events (iText 5) versus Event handlers and Renderers (iText 7)</title>
      <link>https://www.wikiod.com/itext/page-events-itext-5-versus-event-handlers-and-renderers-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/page-events-itext-5-versus-event-handlers-and-renderers-itext-7/</guid>
      <description>In iText 5, we introduced the concept of page events to allow developers to add specific behavior when a document is opened, when a new page is opened, when a page ends, and when a document is closed.
In the documentation, we made it very clear that it was forbidden to add content in the onStartPage() method; content can only be added in the onEndPage() method. We also made it very clear that the Document object passed to the page event methods was passed for read-only purposes only.</description>
    </item>
    
    <item>
      <title>Columns iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/itext/columns-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/columns-itext-5-versus-itext-7/</guid>
      <description>In iText 5, you can&amp;rsquo;t use the add() method to add a Paragraph to a Document if you want to organize the content in columns. We can&amp;rsquo;t reuse the code of the https://www.wikiod.com/itext/text-to-pdf-itext-5-versus-itext-7#Text2Pdf.java (iText 5) example.
Instead we have to create a ColumnText object, we have to add all the Paragraph objects to this object, and once we&amp;rsquo;ve finished adding all the content, we can start rendering that content using the go() method.</description>
    </item>
    
    <item>
      <title>Q &amp; A about versions</title>
      <link>https://www.wikiod.com/itext/q--a-about-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/itext/q--a-about-versions/</guid>
      <description>Some frequently asked questions about the version numbers in iText.
Why do the version numers jump from 2 to 5, and from 5 to 7? There are several reasons for skipping version numbers. In 2009, the version number of iText (Java) and iTextSharp (C#) were not in sync. The Java version was at version 2.1.7; the C# version was at version 4.1.6. A decision was taken to move to Java 5 for the Java version and to harmonize the version numbers of iText and iTextSharp.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arduino Tutorial on </title>
    <link>https://www.wikiod.com/docs/arduino/</link>
    <description>Recent content in arduino Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with arduino</title>
      <link>https://www.wikiod.com/arduino/getting-started-with-arduino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/getting-started-with-arduino/</guid>
      <description>Bare Minimum # Here&amp;rsquo;s the &amp;lsquo;bare minimum&amp;rsquo; Arduino sketch. This can be loaded into the Arduino IDE by choosing File &amp;gt; Examples &amp;gt; 01. Basics &amp;gt; Bare Minimum.
void setup() { // put your setup code here, to run once } void loop() { // put your main code here, to run repeatedly } Code in the setup() function will be run once when the program starts. This is useful to set up I/O pins, initialize variables, etc.</description>
    </item>
    
    <item>
      <title>PWM - Pulse Width Modulation</title>
      <link>https://www.wikiod.com/arduino/pwm---pulse-width-modulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/pwm---pulse-width-modulation/</guid>
      <description>Control a DC motor through the Serial port using PWM # In this example we aim to accomplish one of the most common tasks: I have a small DC motor laying around, how do I use my Arduino to control it? Easy, with PWM and serial communication, using the function analogWrite() and the Serial library.
The basics # Pulse Width Modulation or PWM for short is a technique for mimicking analog signals using digital output.</description>
    </item>
    
    <item>
      <title>Using Arduino with Atmel Studio 7</title>
      <link>https://www.wikiod.com/arduino/using-arduino-with-atmel-studio-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/using-arduino-with-atmel-studio-7/</guid>
      <description>Setup # Download and install Atmel Studio 7 from here. Purchase a debugger. You can get by with a ISP programmer, but if you want debugging capabilities, which is one of the big advantages of using Atmel Studio, you will want a debugger. I recommend the Atmel ICE, as it provides debugging capabilities for AVR based arduinos (like the Uno, pro mini, etc) and the ARM based Arduinos, such as the Zero and Due.</description>
    </item>
    
    <item>
      <title>SPI Communication</title>
      <link>https://www.wikiod.com/arduino/spi-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/spi-communication/</guid>
      <description>Chip select signals # Most slaves have an active low chip select input. So proper code to initialize and use a chip select pin is this:
#define CSPIN 1 // or whatever else your CS pin is // init: pinMode(CSPIN, OUTPUT); digitalWrite(CSPIN, 1); // deselect // use: digitalWrite(CSPIN, 0); // select ... perform data transfer ... digitalWrite(CSPIN, 1); // deselect Deselecting a slave is just as important as selecting it, because a slave may drive the MISO line while it is selected.</description>
    </item>
    
    <item>
      <title>Hardware pins</title>
      <link>https://www.wikiod.com/arduino/hardware-pins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/hardware-pins/</guid>
      <description>Arduino Uno R3 # Microcontrollers use pins to interact with the rest of the circuit. These pins will usually be one of input / output pins, vin or ground. I/O pins can be simple digital I/O pins, or they can have some special carachteristics like being able to vary the voltage of their output using pulse width modulation. Here&amp;rsquo;s a schematic of the Arduino R3 Uno and its pins.
(source)</description>
    </item>
    
    <item>
      <title>Serial Communication</title>
      <link>https://www.wikiod.com/arduino/serial-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/serial-communication/</guid>
      <description>Syntax # Serial.begin(speed) // Opens the serial port on the given baud rate Serial.begin(speed, config) Serial[1-3].begin(speed) // Arduino Mega only! When writing 1-3 it means you can choose between the numbers 1 to 3 when choosing the serial port. Serial[1-3].begin(speed, config) // Arduino Mega only! When writing 1-3 it means you can choose between the numbers 1 to 3 when choosing the serial port. Serial.peek() // Reads the next byte of input without removing it from the buffer Serial.</description>
    </item>
    
    <item>
      <title>How Python integrates with Arduino Uno</title>
      <link>https://www.wikiod.com/arduino/how-python-integrates-with-arduino-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/how-python-integrates-with-arduino-uno/</guid>
      <description>Syntax # Serial.begin(baudrate) // Set baud rate (bits per second) for serial data transmission Serial.println(value) // Print data to serial port followed by Carriage Return \r and Newline character \n serial.Serial((port=None, baudrate=9600, bytesize=EIGHTBITS, parity=PARITY_NONE, stopbits=STOPBITS_ONE, timeout=None, xonxoff=False, rtscts=False, write_timeout=None, dsrdtr=False, inter_byte_timeout=None) // Initialize serial port with all parameters serial.readline() // Read serial data which contains Carriage Return \r and Newline character \n Parameters # Parameter Details serial Python package contains classes and methods to access serial port time Python package includes time-related functions I use an Arduino Uno with Arduino IDE 1.</description>
    </item>
    
    <item>
      <title>Time Management</title>
      <link>https://www.wikiod.com/arduino/time-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/time-management/</guid>
      <description>Syntax # unsigned long millis()
unsigned long micros()
void delay(unsigned long milliseconds)
void delayMicroseconds(unsigned long microseconds)
See the elapsedMillis header for constructors and operators of that class. In short:
elapsedMillis elapsedMillisObject; creates an object to keep track of time since it was created or since some other explicitly set point in time elapsedMillisObject = 0; reset the time tracked by the object to &amp;ldquo;since now&amp;rdquo; unsigned long deltaT = elapsedMillisObject; lets us look at the tracked time elapsedMillisObject += and -= these work as expected Blocking vs.</description>
    </item>
    
    <item>
      <title>Arduino IDE</title>
      <link>https://www.wikiod.com/arduino/arduino-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/arduino-ide/</guid>
      <description>Installing on Windows # Go to https://www.arduino.cc/en/Main/Software Click the &amp;ldquo;Windows Installer&amp;rdquo; link Follow the instructions Installing on Fedora # Open a terminal and run: sudo dnf install arduino Open the Arduino application, or type arduino into the terminal Installing on Ubuntu # Open a terminal and run: sudo apt-get install arduino Open the Arduino application, or type arduino into the terminal Portable app on Windows # To use the Arduino IDE on Windows without needing to install it:</description>
    </item>
    
    <item>
      <title>Bluetooth Communication</title>
      <link>https://www.wikiod.com/arduino/bluetooth-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/arduino/bluetooth-communication/</guid>
      <description>Parameters # method details SoftwareSerial.h Documentation SoftwareSerial(rxPin, txPin, inverse_logic) Constructor. rxPin: Data in (receive) pin, defaults to 0. txPin: Data out (transmit) pin, defaults to 1. inverse_logic: If true, treats LOW as if it were HIGH and HIGH as LOW when determining bit values. defaults to false. begin(speed) Sets the baud rate for serial communication. Supported baud rates are 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 31250, 38400, 57600, and 115200.</description>
    </item>
    
  </channel>
</rss>

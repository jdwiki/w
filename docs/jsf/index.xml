<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jsf Tutorial on </title>
    <link>https://www.wikiod.com/docs/jsf/</link>
    <description>Recent content in jsf Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/jsf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with jsf</title>
      <link>https://www.wikiod.com/jsf/getting-started-with-jsf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/getting-started-with-jsf/</guid>
      <description>Installing JSF # Content has been moved back to the good &amp;lsquo;ol JSF wiki page
Hello World # Content has been moved back to the good &amp;lsquo;ol JSF wiki page
Minimum requirements # Content has been moved back to the good &amp;lsquo;ol JSF wiki page</description>
    </item>
    
    <item>
      <title>Comments in JSF</title>
      <link>https://www.wikiod.com/jsf/comments-in-jsf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/comments-in-jsf/</guid>
      <description>JSF as a markup language, supports comments of some parts of code, but we have be carefully, because if we use a normal HTML comment code like this:
&amp;lt;!-- I want to comment the next button --&amp;gt; &amp;lt;!-- &amp;lt;h:commandButton value=&amp;quot;Push&amp;quot; onclick=&amp;quot;alert(&#39;Hello&#39;);&amp;quot; /&amp;gt; --&amp;gt; It&amp;rsquo;s possible that it doesn&amp;rsquo;t has commented anything. This is because JSF process this code as default, even if is commented between tags &amp;lt;!-- and --&amp;gt;.
There are two solutions to comment any JSF code</description>
    </item>
    
    <item>
      <title>The Flash Scope in JSF 2</title>
      <link>https://www.wikiod.com/jsf/the-flash-scope-in-jsf-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/the-flash-scope-in-jsf-2/</guid>
      <description>The Flash concept is taken from Ruby on Rails and provides a way to pass temporary objects between the user views generated by the faces lifecycle. As in Rails, anything one places in the flash will be exposed to the next view encountered by the same user session and then cleared out. It is important to note that “next view” may have the same view id as the previous view.</description>
    </item>
    
    <item>
      <title>JSF Annotations</title>
      <link>https://www.wikiod.com/jsf/jsf-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/jsf-annotations/</guid>
      <description>I get many informations from this web sites:
http://www.jmdoudoux.fr/java/dej/chap-annotations.html http://docs.oracle.com/javaee/6/tutorial/doc/girch.html Introduction to annotations # Why annotations?
Generally we use annotation to facilitate the development and to make the code more clear and clean.
What are annotations?
Java 5 annotations provide standardization of metadata in a general goal. This metadata associated with Java features can be exploited in the compilation or execution.
Java was modified to allow the implementation of annotations:</description>
    </item>
    
    <item>
      <title>JSF Templates</title>
      <link>https://www.wikiod.com/jsf/jsf-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/jsf-templates/</guid>
      <description>JSF provides special tags to create common layout for a web application called facelets tags. These tags gives flexibility to manage common parts of a multiple pages at one place.
Namespaces:
xmlns:h=&amp;quot;http://xmlns.jcp.org/jsf/html&amp;quot; xmlns:ui=&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot; How to create a template # Setting up a template for one application # Create a file named template.xhtml under the /WEB-INF folder, that way the template files will be accessible only for the framework.
/WEB-INF/template.xhtml
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; xmlns=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Ajax Integration</title>
      <link>https://www.wikiod.com/jsf/ajax-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/jsf/ajax-integration/</guid>
      <description>Partially update the view # Makes an ajax request and updates only part of the view.
Bean.java
@ManagedBean @ViewScoped public class Bean { public Date getCurrentDate() { return new Date(); } } sample.xhtml
&lt;!DOCTYPE html&gt; &amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xmlns:h=&amp;quot;http://xmlns.jcp.org/jsf/html&amp;quot; xmlns:f=&amp;quot;http://xmlns.jcp.org/jsf/core&amp;quot; xmlns:ui=&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot;&amp;gt; &amp;lt;h:head /&amp;gt; &amp;lt;h:body&amp;gt; &amp;lt;h:form&amp;gt; &amp;lt;h:commandButton value=&amp;quot;Execute ajax&amp;quot;&amp;gt; &amp;lt;f:ajax render=&amp;quot;output&amp;quot; /&amp;gt; &amp;lt;/h:commandButton&amp;gt; &amp;lt;p&amp;gt; &amp;lt;h:outputText id=&amp;quot;output&amp;quot; value=&amp;quot;Ajax date: #{bean.currentDate}&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;h:outputText id=&amp;quot;output2&amp;quot; value=&amp;quot;Non-Ajax date: #{bean.currentDate}&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/h:form&amp;gt; &amp;lt;/h:body&amp;gt; &amp;lt;/html&amp;gt; Send form parts and listen to the request # Makes a request only sending part of the form.</description>
    </item>
    
  </channel>
</rss>

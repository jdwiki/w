<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript Tutorial on </title>
    <link>https://www.wikiod.com/docs/javascript/</link>
    <description>Recent content in JavaScript Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with JavaScript</title>
      <link>https://www.wikiod.com/javascript/getting-started-with-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/getting-started-with-javascript/</guid>
      <description>Using console.log() # Introduction # All modern web browsers, NodeJs as well as almost every other JavaScript environments support writing messages to a console using a suite of logging methods. The most common of these methods is console.log().
In a browser environment, the console.log() function is predominantly used for debugging purposes.
Getting Started # Open up the JavaScript Console in your browser, type the following, and press Enter:
console.log(&amp;quot;Hello, World!&amp;quot;); This will log the following to the console:</description>
    </item>
    
    <item>
      <title>Promises</title>
      <link>https://www.wikiod.com/javascript/promises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/promises/</guid>
      <description>Syntax # new Promise( /* executor function: */ function(resolve, reject) { }) promise.then(onFulfilled[, onRejected]) promise.catch(onRejected) Promise.resolve(resolution) Promise.reject(reason) Promise.all(iterable) Promise.race(iterable) Promises are part of the ECMAScript 2015 specification and browser support is limited, with 88% of browsers worldwide supporting it as of July 2017. The following table gives an overview of the earliest browser versions that provide support for promises.
Chrome Edge Firefox Internet Explorer Opera Opera Mini Safari iOS Safari 32 12 27 x 19 x 7.</description>
    </item>
    
    <item>
      <title>Arrow Functions</title>
      <link>https://www.wikiod.com/javascript/arrow-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/arrow-functions/</guid>
      <description>Arrow functions are a concise way of writing [anonymous](https://www.wikiod.com/javascript/functions#Anonymous Function), lexically scoped functions in ECMAScript 2015 (ES6).
Syntax # x =&amp;gt; y // Implicit return
x =&amp;gt; { return y } // Explicit return
(x, y, z) =&amp;gt; { &amp;hellip; } // Multiple arguments
async () =&amp;gt; { &amp;hellip; } // Async arrow functions
(() =&amp;gt; { &amp;hellip; })() // Immediately-invoked function expression
const myFunc = x
=&amp;gt; x*2 // A line break before the arrow will throw a &amp;lsquo;Unexpected token&amp;rsquo; error</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/javascript/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/arrays/</guid>
      <description>Syntax # array = [value, value, &amp;hellip;] array = new Array(value, value, &amp;hellip;) array = Array.of(value, value, &amp;hellip;) array = Array.from(arrayLike) Summary: Arrays in JavaScript are, quite simply, modified Object instances with an advanced prototype, capable of performing a variety of list-related tasks. They were added in ECMAScript 1st Edition, and other prototype methods arrived in ECMAScript 5.1 Edition.
Warning: If a numeric parameter called n is specified in the new Array() constructor, then it will declare an array with n amount of elements, not declare an array with 1 element with the value of n!</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/javascript/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/json/</guid>
      <description>JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write and easy for machines to parse and generate. It is important to realize that, in JavaScript, JSON is a string and not an object.
A basic overview can be found on the json.org website which also contains links to implementations of the standard in many different programming languages.
Syntax # JSON.parse(input[, reviver]) JSON.</description>
    </item>
    
    <item>
      <title>Creational Design Patterns</title>
      <link>https://www.wikiod.com/javascript/creational-design-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/creational-design-patterns/</guid>
      <description>Design patterns are a good way to keep your code readable and DRY. DRY stands for don&amp;rsquo;t repeat yourself. Below you could find more examples about the most important design patterns.
In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design.
Factory Functions # A factory function is simply a function that returns an object.
Factory functions do not require the use of the new keyword, but can still be used to initialize an object, like a constructor.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://www.wikiod.com/javascript/console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/console/</guid>
      <description>A browser&amp;rsquo;s debugging console or web console is generally used by developers to identify errors, understand flow of execution, log data and for many other purpose at runtime. This information is accessed through the console object.
Syntax # void console.log(obj1 [, obj2, &amp;hellip;, objN]); void console.log(msg [, sub1, &amp;hellip;, subN]); Parameters # Parameter Description obj1 &amp;hellip; objN A list of JavaScript objects whose string representations are outputted in the console msg A JavaScript string containing zero or more substitution strings.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/javascript/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/functions/</guid>
      <description>Functions in JavaScript provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in JavaScript.
Syntax # function example(x) { return x }
var example = function (x) { return x }
(function() { &amp;hellip; })(); // Immediately Invoked Function Expression (IIFE)</description>
    </item>
    
    <item>
      <title>Async functions (asyncawait)</title>
      <link>https://www.wikiod.com/javascript/async-functions-asyncawait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/async-functions-asyncawait/</guid>
      <description>async and await build on top of promises and generators to express asynchronous actions inline. This makes asynchronous or callback code much easier to maintain.
Functions with the async keyword return a Promise, and can be called with that syntax.
Inside an async function the await keyword can be applied to any Promise, and will cause all of the function body after the await to be executed after the promise resolves.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://www.wikiod.com/javascript/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/javascript/debugging/</guid>
      <description>Interactive interpreter variables # Note that these only work in the developer tools of certain browsers.
$_ gives you the value of whatever expression was evaluated last.
&amp;quot;foo&amp;quot; // &amp;quot;foo&amp;quot; $_ // &amp;quot;foo&amp;quot; $0 refers to the DOM element currently selected in the Inspector. So if &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; is highlighted:
$0 // &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; $0.getAttribute(&#39;id&#39;) // &amp;quot;foo&amp;quot; $1 refers to the element previously selected, $2 to the one selected before that, and so forth for $3 and $4.</description>
    </item>
    
  </channel>
</rss>

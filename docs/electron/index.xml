<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>electron Tutorial on </title>
    <link>https://www.wikiod.com/docs/electron/</link>
    <description>Recent content in electron Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/electron/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with electron</title>
      <link>https://www.wikiod.com/electron/getting-started-with-electron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/getting-started-with-electron/</guid>
      <description>Installation of Electron # Dependencies # To install electron you must first install Node.js, which comes with npm.
How to install it? # Use npm:
# Install the `electron` command globally in your $PATH npm install electron -g # OR # Install as a development dependency npm install electron --save-dev Hello World! # Setup # An Electron project structure usually looks like this:
hello-world-app/ ├── package.json ├── index.js └── index.html Now let&amp;rsquo;s create the files and initialize our package.</description>
    </item>
    
    <item>
      <title>Main and renderer process.</title>
      <link>https://www.wikiod.com/electron/main-and-renderer-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/main-and-renderer-process/</guid>
      <description>Process that runs package.json’s main script is called the main process. The main process creates web pages by creating BrowserWindow instances. Each web page in Electron runs in its own process, which is called the renderer process. The main process manages all web pages and their corresponding renderer processes. Each renderer process is isolated and only cares about the web page running in it.
Asynchronous IPC communication # Main process source code index.</description>
    </item>
    
    <item>
      <title>electron-winstaller</title>
      <link>https://www.wikiod.com/electron/electron-winstaller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/electron-winstaller/</guid>
      <description>NPM module that builds Windows installers for Electron apps. It will help to create single EXE for Electron windows application
Syntax # Install Globally npm install -g electron-winstaller Install Locally npm install &amp;ndash;save-dev electron-winstaller Parameters # Config Name Description appDirectory The authors value for the nuget package metadata. Defaults to the author field from your app&amp;rsquo;s package.json file when unspecified. owners The owners value for the nuget package metadata. Defaults to the authors field when unspecified.</description>
    </item>
    
    <item>
      <title>Packaging an electron app</title>
      <link>https://www.wikiod.com/electron/packaging-an-electron-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/packaging-an-electron-app/</guid>
      <description>When ready for distribution, your electron app can be packaged into an executable file.
Electron applications can be packaged to run on Windows (32/64 bit), OSX (macOS) and Linux (x86/x86_64).
To package your code, use the npm package &amp;rsquo;electron-packager\
https://github.com/electron-userland/electron-packager
Syntax # $ electron-packager sourcedir appname &amp;ndash;platform=platform &amp;ndash;arch=arch [optional flags&amp;hellip;] Parameters # Parameter Details sourcedir The directory of your electron application files appname The name of your application platform The platform you want to compile your code for.</description>
    </item>
    
    <item>
      <title>Remote function - use Electron functions in JavaScript</title>
      <link>https://www.wikiod.com/electron/remote-function---use-electron-functions-in-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/remote-function---use-electron-functions-in-javascript/</guid>
      <description>If you have to change some things in renderer.js or main.js but you want to do the changes in index.html, you can use the remote function. It lets you access all the electron functions you need!
Syntax # use remote like require(&amp;quot;electron&amp;quot;): main.js: const electron = require(&amp;quot;electron&amp;quot;);
index.html: const electron = require(&amp;quot;electron&amp;quot;).remote;
Using remote by setting the progress bar # const { remote } = require(&amp;quot;electron&amp;quot;); // &amp;lt;- The Node.js require() function is // added to JavaScript by electron function setProgress(p) { // p = number from 0 to 1 const currentWindow = remote.</description>
    </item>
    
    <item>
      <title>Electron-tray-app</title>
      <link>https://www.wikiod.com/electron/electron-tray-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/electron-tray-app/</guid>
      <description>Electron Tray App # Adding a icon to your tray-bar
let tray = null; let mainWindow = null; let user = null; app.on(&#39;ready&#39;, () =&amp;gt; { /** * Tray related code. */ const iconName = &#39;icon.png&#39;; const iconPath = path.join(__dirname, iconName); tray = new Tray(iconPath); tray.setToolTip(&#39;AMP Notifier App&#39;); const contextMenu = Menu.buildFromTemplate([{ label: &#39;Quit&#39;, click: destroyApp }]); tray.setContextMenu(contextMenu); tray.on(&#39;click&#39;, () =&amp;gt; { app.quit(); }); }); </description>
    </item>
    
    <item>
      <title>Using bootstrap in electron</title>
      <link>https://www.wikiod.com/electron/using-bootstrap-in-electron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/using-bootstrap-in-electron/</guid>
      <description>One of the best front-end frameworks in the web world in twitter bootstrap. As electron is relies on web browser, we can easily use bootstrap with electron in order to use the power of bootstrap in our electron framework. The latest version of bootstrap as of today is 3.3.7 and bootstrap 4 is still in alpha phase.
Linking Electron with Bootstrap # In order to use bootstrap, there are 2 cases.</description>
    </item>
    
    <item>
      <title>Using nedb in electron</title>
      <link>https://www.wikiod.com/electron/using-nedb-in-electron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/electron/using-nedb-in-electron/</guid>
      <description>Installation of nedb # It&amp;rsquo;s very easy to install nedb.
npm install nedb --save # Put latest version in your package.json For bower loving people,
bower install nedb Connecting electron app with Nedb # While building electron apps, usually the backend is in separate folder (js files) and front end is in a separate folder (html files). In the backend, in order to use the database, we have to include the nedb package with the require statement as follows.</description>
    </item>
    
  </channel>
</rss>

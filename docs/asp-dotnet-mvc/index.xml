<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-mvc Tutorial on </title>
    <link>https://www.wikiod.com/docs/asp-dotnet-mvc/</link>
    <description>Recent content in asp.net-mvc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/asp-dotnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with asp.net-mvc</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/getting-started-with-aspnet-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/getting-started-with-aspnet-mvc/</guid>
      <description>Hello MVC! # ASP.NET MVC is open source web application framework. MVC itself is a design pattern which is built around three main components: model-view-controller.
Model - Models reflect your business objects, and are a means to pass data between Controllers and Views.
View - Views are the pages that render and display the model data to the user. ASP.NET MVC Views are typically written using Razor syntax.
Controller - Controllers handle incoming HTTP requests from a client, and usually return one or more Models to an appropriate View.</description>
    </item>
    
    <item>
      <title>Html.AntiForgeryToken</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/htmlantiforgerytoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/htmlantiforgerytoken/</guid>
      <description>The anti-forgery token can be used to help protect your application against cross-site request forgery. To use this feature, call the AntiForgeryToken method from a form and add the ValidateAntiForgeryTokenAttribute attribute to the action method that you want to protect.
Generates a hidden form field (anti-forgery token) that is validated when the form is submitted.
Syntax # @Html.AntiForgeryToken() When submitting an ajax request with CSRF token (__RequestVerificationToken) make sure that content type is not set to application/json.</description>
    </item>
    
    <item>
      <title>Razor</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/razor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/razor/</guid>
      <description>What is Razor?
Razor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.
Server-based code can create dynamic web content on the fly, while a web page is written to the browser. When a web page is called, the server executes the server-based code inside the page before it returns the page to the browser. By running on the server, the code can perform complex tasks, like accessing databases.</description>
    </item>
    
    <item>
      <title>ViewData, ViewBag, TempData</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/viewdata-viewbag-tempdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/viewdata-viewbag-tempdata/</guid>
      <description>ViewData and ViewBag are used to transfer data from controller to view.
ViewData is nothing but a dictionary of objects and it is accessible by string as key.
ViewBag is very similar to ViewData. ViewBag is a dynamic property. ViewBag is just a wrapper around the ViewData.
TempData keeps data for the time of HTTP Request, which means that it holds data between two consecutive requests. TempData helps us to transfer data between controllers or between actions.</description>
    </item>
    
    <item>
      <title>Data annotations</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/data-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/data-annotations/</guid>
      <description>We can add validations to our application by adding Data Annotations to our model classes. Data Annotations allow us to describe the rules we want applied to our model properties, and ASP.NET MVC will take care of enforcing them and displaying appropriate messages to users.
Remote validation # Remote Validation used to check whether the content enter in the input control is valid or not by sending an ajax request to server side to check it.</description>
    </item>
    
    <item>
      <title>Html.RouteLink</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/htmlroutelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/htmlroutelink/</guid>
      <description>Parameters # Parameter Details linkText The text that will be displayed for the link. routeName The name of the route to return a virtual path for. Basic Example Using Link Text and Route Name # As an alternative to using Html.ActionLink to generate links in a view, you can use
Html.RouteLink
To make use of this feature, you need to configure a route, for example:
public static void RegisterRoutes(RouteCollection routes) { routes.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/routing/</guid>
      <description>Routing is how ASP.NET MVC matches a URI to an action. Routing module is responsible for mapping incoming browser requests to particular MVC controller actions.
MVC 5 supports a new type of routing, called attribute routing. As the name implies, attribute routing uses attributes to define routes. Attribute routing gives you more control over the URIs in your web application.
Attribute routing in MVC # Along with classic way of route definition MVC WEB API 2 and then MVC 5 frameworks introduced Attribute routing:</description>
    </item>
    
    <item>
      <title>Action filters</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/action-filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/action-filters/</guid>
      <description>Session Control action filter - page&amp;amp;ajax request # Usually authentication&amp;amp;authorization processes are performed by built-in cookie and token supports in .net MVC. But if you decide to do it yourself with Session you can use below logic for both page requests and ajax requests.
public class SessionControl : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var session = filterContext.HttpContext.Session; /// user is logged in (the &amp;quot;loggedIn&amp;quot; should be set in Login action upon a successful login request) if ( session[&amp;quot;loggedIn&amp;quot;] !</description>
    </item>
    
    <item>
      <title>Model binding</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/model-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/model-binding/</guid>
      <description>Model binding is the process of taking HTTP parameters, typically in the Query String of a GET request, or within POST body, and applying it into an object that can then be validated and consumed in an object-oriented manner without the need for Controller actions having intimate knowledge of how to retrieve HTTP parameters.
In other words, model binding is what allows actions, in MVC, to have either parameter(s), whether it being a value type or an object.</description>
    </item>
    
    <item>
      <title>Model validation</title>
      <link>https://www.wikiod.com/asp-dotnet-mvc/model-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/asp-dotnet-mvc/model-validation/</guid>
      <description>Remove an object from validation # Say you have the following model:
public class foo { [Required] public string Email { get; set; } [Required] public string Password { get; set; } [Required] public string FullName { get; set; } } But you want to exclude FullName from the modelvalidation because you are using the model also in a place where FullName is not filled in, you can do so in the following way:</description>
    </item>
    
  </channel>
</rss>

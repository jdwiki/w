<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git Tutorial on </title>
    <link>https://www.wikiod.com/docs/git/</link>
    <description>Recent content in Git Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Git</title>
      <link>https://www.wikiod.com/git/getting-started-with-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/getting-started-with-git/</guid>
      <description>Create your first repository, then add and commit files # At the command line, first verify that you have Git installed:
On all operating systems:
git --version On UNIX-like operating systems:
which git If nothing is returned, or the command is not recognized, you may have to install Git on your system by downloading and running the installer. See the Git homepage for exceptionally clear and easy installation instructions.
After installing Git, [configure your username and email address][2].</description>
    </item>
    
    <item>
      <title>Ignoring Files and Folders</title>
      <link>https://www.wikiod.com/git/ignoring-files-and-folders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/ignoring-files-and-folders/</guid>
      <description>This topic illustrates how to avoid adding unwanted files (or file changes) in a Git repo. There are several ways (global or local .gitignore, .git/exclude, git update-index --assume-unchanged, and git update-index --skip-tree), but keep in mind Git is managing content, which means: ignoring actually ignores a folder content (i.e. files). An empty folder would be ignored by default, since it cannot be added anyway.
Ignoring files and directories with a .</description>
    </item>
    
    <item>
      <title>Cherry Picking</title>
      <link>https://www.wikiod.com/git/cherry-picking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/cherry-picking/</guid>
      <description>A cherry-pick takes the patch that was introduced in a commit and tries to reapply it on the branch you’re currently on.
Source: Git SCM Book
Syntax # git cherry-pick [&amp;ndash;edit] [-n] [-m parent-number] [-s] [-x] [&amp;ndash;ff] [-S[key-id]] commit&amp;hellip; git cherry-pick &amp;ndash;continue git cherry-pick &amp;ndash;quit git cherry-pick &amp;ndash;abort Parameters # Parameters Details -e, &amp;ndash;edit With this option, git cherry-pick will let you edit the commit message prior to committing. -x When recording the commit, append a line that says &amp;ldquo;(cherry picked from commit …​)&amp;rdquo; to the original commit message in order to indicate which commit this change was cherry-picked from.</description>
    </item>
    
    <item>
      <title>Rebasing</title>
      <link>https://www.wikiod.com/git/rebasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/rebasing/</guid>
      <description>Syntax # git rebase [-i | --interactive] [options] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] [&amp;lt;upstream&amp;gt;] [&amp;lt;branch&amp;gt;] git rebase [-i | --interactive] [options] [--exec &amp;lt;cmd&amp;gt;] [--onto &amp;lt;newbase&amp;gt;] --root [&amp;lt;branch&amp;gt;] git rebase --continue | --skip | --abort | --edit-todo Parameters # Parameter Details &amp;ndash;continue Restart the rebasing process after having resolved a merge conflict. &amp;ndash;abort Abort the rebase operation and reset HEAD to the original branch. If branch was provided when the rebase operation was started, then HEAD will be reset to branch.</description>
    </item>
    
    <item>
      <title>Branching</title>
      <link>https://www.wikiod.com/git/branching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/branching/</guid>
      <description>Syntax # git branch [--set-upstream | --track | --no-track] [-l] [-f] &amp;lt;branchname&amp;gt; [&amp;lt;start-point&amp;gt;] git branch (--set-upstream-to=&amp;lt;upstream&amp;gt; | -u &amp;lt;upstream&amp;gt;) [&amp;lt;branchname&amp;gt;] git branch --unset-upstream [&amp;lt;branchname&amp;gt;] git branch (-m | -M) [&amp;lt;oldbranch&amp;gt;] &amp;lt;newbranch&amp;gt; git branch (-d | -D) [-r] &amp;lt;branchname&amp;gt;…​ git branch --edit-description [&amp;lt;branchname&amp;gt;] git branch [--color[=&amp;lt;when&amp;gt;] | --no-color] [-r | -a] [--list] [-v [--abbrev=&amp;lt;length&amp;gt; | --no-abbrev]] [--column[=&amp;lt;options&amp;gt;] | --no-column] [(--merged | --no-merged | --contains) [&amp;lt;commit&amp;gt;]] [--sort=&amp;lt;key&amp;gt;] [--points-at &amp;lt;object&amp;gt;] [&amp;lt;pattern&amp;gt;…​] Parameters # Parameter Details -d, &amp;ndash;delete Delete a branch.</description>
    </item>
    
    <item>
      <title>Stashing</title>
      <link>https://www.wikiod.com/git/stashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/stashing/</guid>
      <description>Syntax # git stash list [&amp;lt;options&amp;gt;] git stash show [&amp;lt;stash&amp;gt;] git stash drop [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash ( pop | apply ) [--index] [-q|--quiet] [&amp;lt;stash&amp;gt;] git stash branch &amp;lt;branchname&amp;gt; [&amp;lt;stash&amp;gt;] git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a|--all] [&amp;lt;message&amp;gt;]] git stash clear git stash create [&amp;lt;message&amp;gt;] git stash store [-m|--message &amp;lt;message&amp;gt;] [-q|--quiet] &amp;lt;commit&amp;gt; Parameters # Parameter Details show Show the changes recorded in the stash as a diff between the stashed state and its original parent.</description>
    </item>
    
    <item>
      <title>Git Diff</title>
      <link>https://www.wikiod.com/git/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/git-diff/</guid>
      <description>Syntax # git diff [options] [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​] git diff [options] --cached [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​] git diff [options] &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; [--] [&amp;lt;path&amp;gt;…​] git diff [options] &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt; git diff [options] [--no-index] [--] &amp;lt;path&amp;gt; &amp;lt;path&amp;gt; Parameters # Parameter Details -p, -u, &amp;ndash;patch Generate patch -s, &amp;ndash;no-patch Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch &amp;ndash;raw Generate the diff in raw format &amp;ndash;diff-algorithm= Choose a diff algorithm.</description>
    </item>
    
    <item>
      <title>Committing</title>
      <link>https://www.wikiod.com/git/committing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/committing/</guid>
      <description>Commits with Git provide accountability by attributing authors with changes to code. Git offers multiple features for the specificity and security of commits. This topic explains and demonstrates proper practices and procedures in committing with Git.
Syntax # git commit [flags] Parameters # Parameter Details &amp;ndash;message, -m Message to include in the commit. Specifying this parameter bypasses Git&amp;rsquo;s normal behavior of opening an editor. &amp;ndash;amend Specify that the changes currently staged should be added (amended) to the previous commit.</description>
    </item>
    
    <item>
      <title>Squashing</title>
      <link>https://www.wikiod.com/git/squashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/squashing/</guid>
      <description>What is squashing? # Squashing is the process of taking multiple commits and combining them into a single commit encapsulating all the changes from the initial commits.
Squashing and Remote Branches # Pay special attention when squashing commits on a branch that is tracking a remote branch; if you squash a commit that has already been pushed to a remote branch, the two branches will be diverged, and you will have to use git push -f to force those changes onto the remote branch.</description>
    </item>
    
    <item>
      <title>Staging</title>
      <link>https://www.wikiod.com/git/staging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/git/staging/</guid>
      <description>It&amp;rsquo;s worth noting that staging has little to do with &amp;lsquo;files&amp;rsquo; themselves and everything to do with the changes within each given file. We stage files that contain changes, and git tracks the changes as commits (even when the changes in a commit are made across several files).
The distinction between files and commits may seem minor, but understanding this difference is fundamental to understanding essential functions like cherry-pick and diff.</description>
    </item>
    
  </channel>
</rss>

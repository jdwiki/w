<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure Tutorial on </title>
    <link>https://www.wikiod.com/docs/clojure/</link>
    <description>Recent content in clojure Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with clojure</title>
      <link>https://www.wikiod.com/clojure/getting-started-with-clojure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/getting-started-with-clojure/</guid>
      <description>Installation and Setup # Option 1: Leiningen # Requires JDK 6 or newer.
The easiest way to get started with Clojure is to download and install Leiningen, the de facto standard tool to manage Clojure projects, then run lein repl to open a REPL.
Linux # curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &amp;gt; ~/bin/lein export PATH=$PATH:~/bin chmod 755 ~/bin/lein OS X # Follow Linux steps above or install with macOS package managers.
Install with Homebrew # brew install leiningen Install with MacPorts # First install Clojure</description>
    </item>
    
    <item>
      <title>Clojure destructuring</title>
      <link>https://www.wikiod.com/clojure/clojure-destructuring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/clojure-destructuring/</guid>
      <description>Destructuring a map # Here&amp;rsquo;s how you can destructure a map:
(def my-map {:a 1 :b 2 :c 3}) Then, for example, within a let block you can extract values from the map very succinctly as follows:
(let [{x :a y :c} my-map] (println &amp;quot;:a val:&amp;quot; x &amp;quot;, :c val: &amp;quot; y)) ;; :a val: 1 , :c val: 3 Notice that the values being extracted in each mapping are on the left and the keys they are associated with are on the right.</description>
    </item>
    
    <item>
      <title>Setting up your development environment</title>
      <link>https://www.wikiod.com/clojure/setting-up-your-development-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/setting-up-your-development-environment/</guid>
      <description>Emacs # To setup Emacs for working with Clojure, install clojure-mode and cider package from melpa:
M-x package-install [RET] clojure-mode [RET] M-x package-install [RET] cider [RET] Now when you open a .clj file, run M-x cider-jack-in to connect to a REPL. Alternatively, you can use C-u M-x (cider-jack-in) to specify the name of a lein or boot project, without having to visit any file in it. You should now be able to evaluate expressions in your file using C-x C-e.</description>
    </item>
    
    <item>
      <title>clojure.spec</title>
      <link>https://www.wikiod.com/clojure/clojurespec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/clojurespec/</guid>
      <description>Syntax # :: is a shorthand a namespace-qualified keyword. E.g. if we are in the namespace user: ::foo is a shorthand for :user/foo #: or # - map-literal syntax for qualifying keys in a map by a namespace Clojure spec is a new specification/contracts library for clojure available as of version 1.9.
Specs are leveraged in a number of ways including being included in documentation, data validation, generating data for testing and more.</description>
    </item>
    
    <item>
      <title>Collections and Sequences</title>
      <link>https://www.wikiod.com/clojure/collections-and-sequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/collections-and-sequences/</guid>
      <description>Syntax # &#39;() → () &#39;(1 2 3 4 5) → (1 2 3 4 5) &#39;(1 foo 2 bar 3) → (1 &#39;foo 2 &#39;bar 3) (list 1 2 3 4 5) → (1 2 3 4 5) (list* [1 2 3 4 5]) → (1 2 3 4 5) [] → [] [1 2 3 4 5] → [1 2 3 4 5] (vector 1 2 3 4 5) → [1 2 3 4 5] (vec &#39;(1 2 3 4 5)) → [1 2 3 4 5] {} =&amp;gt; {} {:keyA 1 :keyB 2} → {:keyA 1 :keyB 2} {:keyA 1, :keyB 2} → {:keyA 1 :keyB 2} (hash-map :keyA 1 :keyB 2) → {:keyA 1 :keyB 2} (sorted-map 5 &amp;quot;five&amp;quot; 1 &amp;quot;one&amp;quot;) → {1 &amp;quot;one&amp;quot; 5 &amp;quot;five&amp;quot;} (entries are sorted by key when used as a sequence) #{} → #{} #{1 2 3 4 5} → #{4 3 2 5 1} (unordered) (hash-set 1 2 3 4 5) → #{2 5 4 1 3} (unordered) (sorted-set 2 5 4 3 1) → #{1 2 3 4 5} Lists # A list is denoted by parentheses:</description>
    </item>
    
    <item>
      <title>Getting started with web development</title>
      <link>https://www.wikiod.com/clojure/getting-started-with-web-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/getting-started-with-web-development/</guid>
      <description>Create new Ring application with http-kit # Ring is de-facto standard API for clojure HTTP applications, similar to Ruby&amp;rsquo;s Rack and Python&amp;rsquo;s WSGI.
We&amp;rsquo;re going to use it with http-kit webserver.
Create new Leiningen project:
lein new app myapp Add http-kit dependency to project.clj:
:dependencies [[org.clojure/clojure &amp;quot;1.8.0&amp;quot;] [http-kit &amp;quot;2.1.18&amp;quot;]] Add :require for http-kit to core.clj:
(ns test.core (:gen-class) (:require [org.httpkit.server :refer [run-server]])) Define ring request handler. Request handlers are just functions from request to response and response is just a map:</description>
    </item>
    
    <item>
      <title>clojure.test</title>
      <link>https://www.wikiod.com/clojure/clojuretest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/clojuretest/</guid>
      <description>is # The is macro is the core of the clojure.test library. It returns the value of its body expression, printing an error message if the expression returns a falsey value.
(defn square [x] (+ x x)) (require &#39;[clojure.test :as t]) (t/is (= 0 (square 0))) ;;=&amp;gt; true (t/is (= 1 (square 1))) ;; ;; FAIL in () (foo.clj:1) ;; expected: (= 1 (square 1)) ;; actual: (not (= 1 2)) ;;=&amp;gt; false Wrap each test or all tests with use-fixtures # use-fixtures allows to wrap each deftest in namespace with code that runs before and after test.</description>
    </item>
    
    <item>
      <title>Macros</title>
      <link>https://www.wikiod.com/clojure/macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/macros/</guid>
      <description>Syntax # The &#39; symbol used in the macroexpand example is just syntactic sugar for the quote operator. You could have written (macroexpand (quote (infix 1 + 2))) instead. Macros are just functions that run at compile time, i.e. during the eval step in a read-eval-print-loop.
Reader macros are another form of macro that gets expanded at read time, rather than compile time.
Best practice when defining macro.
alpha-renaming, Since macro is expand binding name conflict could arise.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/clojure/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/functions/</guid>
      <description>Defining Functions # Functions are defined with five components: # The header, which includes the defn keyword, the name of the function.
(defn welcome ....) An optional Docstring that explains and document what the function does.
(defn welcome &amp;quot;Return a welcome message to the world&amp;quot; ...) Parameters listed in brackets.
(defn welcome &amp;quot;Return a welcome message&amp;quot; [name] ...) The body, which describes the procedures the function carries out.
(defn welcome &amp;quot;Return a welcome message&amp;quot; [name] (str &amp;quot;Hello, &amp;quot; name &amp;quot;!</description>
    </item>
    
    <item>
      <title>Pattern Matching with core.match</title>
      <link>https://www.wikiod.com/clojure/pattern-matching-with-corematch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/clojure/pattern-matching-with-corematch/</guid>
      <description>The core.match library implements a pattern match compilation algorithm that uses the notion of &amp;ldquo;necessity&amp;rdquo; from lazy pattern matching.
Matching Literals # (let [x true y true z true] (match [x y z] [_ false true] 1 [false true _ ] 2 [_ _ false] 3 [_ _ true] 4)) ;=&amp;gt; 4 Matching a Vector # (let [v [1 2 3]] (match [v] [[1 1 1]] :a0 [[1 _ 1]] :a1 [[1 2 _]] :a2)) ;; _ is used for wildcard matching ;=&amp;gt; :a2 Matching a Map # (let [x {:a 1 :b 1}] (match [x] [{:a _ :b 2}] :a0 [{:a 1 :b _}] :a1 [{:x 3 :y _ :z 4}] :a2)) ;=&amp;gt; :a1 Matching a literal symbol # (match [[&#39;asymbol]] [[&#39;asymbol]] :success) ;=&amp;gt; :success </description>
    </item>
    
  </channel>
</rss>

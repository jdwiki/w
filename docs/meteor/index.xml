<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>meteor Tutorial on </title>
    <link>https://www.wikiod.com/docs/meteor/</link>
    <description>Recent content in meteor Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/meteor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with meteor</title>
      <link>https://www.wikiod.com/meteor/getting-started-with-meteor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/getting-started-with-meteor/</guid>
      <description>Getting Started # Install Meteor # On OS X and Linux # Install the latest official Meteor release from your terminal:
$ curl https://install.meteor.com/ | sh On Windows # Download the official Meteor installer here.
Create your app # Once you&amp;rsquo;ve installed Meteor, create a project:
$ meteor create myapp Run it # Run it locally:
$ cd myapp $ meteor npm install $ meteor Note: Meteor server running on: http://localhost:3000/</description>
    </item>
    
    <item>
      <title>Publishing Data</title>
      <link>https://www.wikiod.com/meteor/publishing-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/publishing-data/</guid>
      <description>Within Meteor&amp;rsquo;s data subsystem, a server publication and its corresponding client subscriptions are the main mechanisms of reactive, live data transport where the underlying data is constantly synchronized between the server and the client.
Global publications # A global publication does not possess a name and does not require a subscription from the connected client and therefore it is available to the connected client as soon as the client connects to the server.</description>
    </item>
    
    <item>
      <title>Directory Structure</title>
      <link>https://www.wikiod.com/meteor/directory-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/directory-structure/</guid>
      <description>Before the release of Meteor 1.3, Meteor developers were frustrated with Meteor.js&amp;rsquo; handling of file dependencies and global variables. In response, Meteor set new standards for project structures in order to make the project dependency system more streamlined. This topic explains the standardized project structure and the principles behind it.
client
All code in the client directory is run only in the client-side, or web browser.
client/compatibility
The compatibility directory contains legacy or 3rd party code, such as jQuery libraries, etc.</description>
    </item>
    
    <item>
      <title>Beginner guide to Installing Meteor 1.4 on AWS EC2</title>
      <link>https://www.wikiod.com/meteor/beginner-guide-to-installing-meteor-14-on-aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/beginner-guide-to-installing-meteor-14-on-aws-ec2/</guid>
      <description>Signup for AWS Service # Since lots of beginners are confused about cloud hosting.I am writing this guide to walk through setting meteor on aws with ubuntu os. If you already have your instance running feel free to skip this step and go straight to installing meteor on aws.
Login into AWS Console.Select EC2. Go to EC2 Dashboard. Under Create Instance click launch instance. Select ubuntu instance in next step Create key pair &amp;amp; download private key to your local machine.</description>
    </item>
    
    <item>
      <title>Meteor &#43; React</title>
      <link>https://www.wikiod.com/meteor/meteor--react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/meteor--react/</guid>
      <description>React is a JavaScript library for building user interfaces. It&amp;rsquo;s open source, developed and maintained by Facebook. Meteor has production-ready support for React.
Resources:
React tutorial Meteor + React tutorial Setup and &amp;ldquo;Hello World&amp;rdquo; # Add React to your project:
meteor npm install --save react react-dom react-mounter Create the client/helloworld.jsx file to display a simple React component:
import React, { Component } from &#39;react&#39;; import { mount } from &#39;react-mounter&#39;; // This component only renders a paragraph containing &amp;quot;Hello World!</description>
    </item>
    
    <item>
      <title>Using Meteor with a Proxy Server</title>
      <link>https://www.wikiod.com/meteor/using-meteor-with-a-proxy-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/using-meteor-with-a-proxy-server/</guid>
      <description>Using the HTTP[S]_PROXY env var # This page describes how to use the Meteor command-line tool (for example, when downloading packages, deploying your app, etc) behind a proxy server.
Like a lot of other command-line software, the Meteor tool reads the proxy configuration from the HTTP_PROXY and HTTPS_PROXY environment variables (the lower case variants work, too). Examples of running Meteor behind a proxy:
on Linux or Mac OS X export HTTP_PROXY=http://user:password@1.</description>
    </item>
    
    <item>
      <title>Electrify - Compiling Meteor as a Locally Installable App</title>
      <link>https://www.wikiod.com/meteor/electrify---compiling-meteor-as-a-locally-installable-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/electrify---compiling-meteor-as-a-locally-installable-app/</guid>
      <description>Installing Electrify for a Meteor application # Electron ports HTML web applications to native applications for a range of devices, including creating native desktop applications. It&amp;rsquo;s also very easy to get started!
To begin, we must have electron, nodejs, npm, git and meteor installed. Familiarity with these tools is vital for working with Meteor, so make sure you know about these things first.
Electron
npm install -g electrify electron is what we&amp;rsquo;re using!</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.wikiod.com/meteor/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/mongodb/</guid>
      <description>MongoDB is a free and open-source cross-platform document orient database program. Unlike classic SQL databases, MongoDB uses BSON (like JSON) to store data. Meteor was designed to use MongoDB for database storage and this topic explains how to implement MongoDB storage into Meteor applications.
Export a Remote Mongo DB, Import Into a Local Meteor Mongo DB # Helpful when you want to grab a copy of a production database to play around with locally.</description>
    </item>
    
    <item>
      <title>Blaze Templating</title>
      <link>https://www.wikiod.com/meteor/blaze-templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/blaze-templating/</guid>
      <description>Blaze is a powerful library for creating user interfaces by writing dynamic, reactive HTML templates. Blaze templating allows for loops and conditional logic to be used directly in HTML markup. This section explains and demonstrates the proper usage of templating in Meteor.js with Blaze.
Populate a template from a method call # &amp;lt;template name=&amp;quot;myTemplate&amp;quot;&amp;gt; {{#each results}} &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;{{name}}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;{{age}}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; {{/each}} &amp;lt;/template&amp;gt; Template.myTemplate.onCreated(function() { this.results = new ReactiveVar(); Meteor.call(&#39;myMethod&#39;, (error, result) =&amp;gt; { if (error) { // do something with the error } else { // results is an array of {name, age} objects this.</description>
    </item>
    
    <item>
      <title>Retrieving data from a Meteor.call</title>
      <link>https://www.wikiod.com/meteor/retrieving-data-from-a-meteorcall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/meteor/retrieving-data-from-a-meteorcall/</guid>
      <description>The basics of Meteor.call # Meteor.call(name, [arg1, arg2...], [asyncCallback]) (1) name String (2) Name of method to invoke (3) arg1, arg2&amp;hellip; EJSON-able Object [Optional]
(4) asyncCallback Function [Optional]
On one hand, you can do : (via Session variable, or via ReactiveVar)
var syncCall = Meteor.call(&amp;quot;mymethod&amp;quot;) // Sync call It mean if you do something like this, server side you will do :
Meteor.methods({ mymethod: function() { let asyncToSync = Meteor.wrapAsync(asynchronousCall); // do something with the result; return asyncToSync; } }); On the other hand, sometimes you will want to keep it via the result of the callback ?</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>couchdb Tutorial on </title>
    <link>https://www.wikiod.com/docs/couchdb/</link>
    <description>Recent content in couchdb Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/couchdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with couchdb</title>
      <link>https://www.wikiod.com/couchdb/getting-started-with-couchdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/couchdb/getting-started-with-couchdb/</guid>
      <description>Installation and Setup # Ubuntu # On recent Ubuntu versions, you can install an up-to-date version of CouchDB with sudo apt-get install couchdb. For older versions, such as Ubuntu 14.04, you should run:
sudo add-apt-repository ppa:couchdb/stable -y sudo apt-get update sudo apt-get install couchdb -y Fedora # To install couchdb in fedora ryou can do sudo dnf install couchdb
Mac OS X # To install CouchDB on Mac OS X, you can install the Mac app from the CouchDB downloads section.</description>
    </item>
    
    <item>
      <title>Ektorp java client</title>
      <link>https://www.wikiod.com/couchdb/ektorp-java-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/couchdb/ektorp-java-client/</guid>
      <description>Test
Opening a connection to CouchDB # HttpClient httpClient = new StdHttpClient.Builder(). url(&amp;quot;http://yourcouchdbhost:5984&amp;quot;). username(&amp;quot;admin&amp;quot;). password(&amp;quot;password&amp;quot;). build(); CouchDbInstance dbInstance = new StdCouchDbInstance(httpClient); Simple CRUD with POJOs # One of the great things about Ektorp, is that it provides ORM like functionality, straight out of the box. This example will walk you through creating a simple POJO and doing standard CRUD operation on it
Creating a simple POJO # First off, we define a POJO as follows</description>
    </item>
    
    <item>
      <title>Design Documents</title>
      <link>https://www.wikiod.com/couchdb/design-documents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/couchdb/design-documents/</guid>
      <description>Design documents behave like all documents in terms of revisions, replication, and conflicts. You can also add attachments to design documents.
_design/example # Design documents contain application logic. Any document in a database that has an _id starting with &amp;ldquo;_design/&amp;rdquo; can be used as design document. Usually there is one design document for each application.
{ &amp;quot;_id&amp;quot;: &amp;quot;_design/example&amp;quot;, &amp;quot;view&amp;quot;: { &amp;quot;foo&amp;quot;: { &amp;quot;map&amp;quot;: &amp;quot;function(doc){...};&amp;quot;, &amp;quot;reduce&amp;quot;: &amp;quot;function(keys, values, rereduce){...};&amp;quot; } } } The example above defines a view named foo, which can be requested from the following path, assuming the database is named db:</description>
    </item>
    
    <item>
      <title>Views</title>
      <link>https://www.wikiod.com/couchdb/views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/couchdb/views/</guid>
      <description>Views for people # To show you how work the views, we will assume that we want to query the document of type people. To do so, we will first need a design document that will hold our views.
Note: for the purpose of the example, we will use many views inside of 1 design document. Therefore, in a production environment, you may prefer to have 1 view per design document.</description>
    </item>
    
  </channel>
</rss>

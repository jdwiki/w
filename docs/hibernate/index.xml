<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hibernate Tutorial on </title>
    <link>https://www.wikiod.com/docs/hibernate/</link>
    <description>Recent content in hibernate Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/hibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with hibernate</title>
      <link>https://www.wikiod.com/hibernate/getting-started-with-hibernate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/getting-started-with-hibernate/</guid>
      <description>Using XML Configuration to set up Hibernate # I create a file called database-servlet.xml somewhere on the classpath.
Initially your config file will look like this:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:jdbc=&amp;quot;http://www.springframework.org/schema/jdbc&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&amp;quot;&amp;gt; &amp;lt;/beans&amp;gt; You&amp;rsquo;ll notice I imported the tx and jdbc Spring namespaces. This is because we are going to use them quite heavily in this config file.
First thing you want to do is enable annotation based transaction management (@Transactional).</description>
    </item>
    
    <item>
      <title>Custom Naming Strategy</title>
      <link>https://www.wikiod.com/hibernate/custom-naming-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/custom-naming-strategy/</guid>
      <description>Creating and Using a Custom ImplicitNamingStrategy # Creating a custom ImplicitNamingStrategy allows you to tweak how Hibernate will assign names to non-explicitly named Entity attributes, including Foreign Keys, Unique Keys, Identifier Columns, Basic Columns, and more.
For example, by default, Hibernate will generate Foreign Keys which are hashed and look similar to:
FKe6hidh4u0qh8y1ijy59s2ee6m While this is often not an issue, you may wish that the name was more descriptive, such as:</description>
    </item>
    
    <item>
      <title>EnableDisable SQL log</title>
      <link>https://www.wikiod.com/hibernate/enabledisable-sql-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/enabledisable-sql-log/</guid>
      <description>Logging these queries is slow, even slower than Hibernate usually is. It also uses up a massive amount of log space. Do not use logging in scenarios where performance is required. Use this only when testing the queries that Hibernate actually generates.
Using a logging config file # In the logging configuration file of your choice set the logging of the following packages to the levels shown.:
# log the sql statement org.</description>
    </item>
    
    <item>
      <title>Hibernate Entity Relationships using Annotations</title>
      <link>https://www.wikiod.com/hibernate/hibernate-entity-relationships-using-annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/hibernate-entity-relationships-using-annotations/</guid>
      <description>Parameters # Annotation Details @OneToOne Specifies a one to one relationship with a corresponding object. @OneToMany Specifies a single object that maps to many objects. @ManyToOne Specifies a collection of objects that map to a single object. @Entity Specifies an object that maps to a database table. @Table Specifies which database table this object maps too. @JoinColumn Specifies which column a foregin key is stored in. @JoinTable Specifies an intermediate table that stores foreign keys.</description>
    </item>
    
    <item>
      <title>Performance tuning</title>
      <link>https://www.wikiod.com/hibernate/performance-tuning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/performance-tuning/</guid>
      <description>Use composition instead of inheritance # Hibernate has some strategies of inheritance. The JOINED inheritance type do a JOIN between the child entity and parent entity.
The problem with this approach is that Hibernate always bring the data of all involved tables in the inheritance.
Per example, if you have the entities Bicycle and MountainBike using the JOINED inheritance type:
@Entity @Inheritance(strategy = InheritanceType.JOINED) public abstract class Bicycle { } And:</description>
    </item>
    
    <item>
      <title>Lazy Loading vs Eager Loading</title>
      <link>https://www.wikiod.com/hibernate/lazy-loading-vs-eager-loading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/lazy-loading-vs-eager-loading/</guid>
      <description>Lazy Loading vs Eager Loading # Fetching or loading data can be primarily classified into two types: eager and lazy.
In order to use Hibernate make sure you add the latest version of it to the dependencies section of your pom.xml file:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.1.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 1. Eager Loading And Lazy Loading
The first thing that we should discuss here is what lazy loading and eager loading are:
Eager Loading is a design pattern in which data initialization occurs on the spot.</description>
    </item>
    
    <item>
      <title>Caching</title>
      <link>https://www.wikiod.com/hibernate/caching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/caching/</guid>
      <description>Enabling Hibernate Caching in WildFly # To enable Second Level Caching for Hibernate in WildFly, add this property to your persistence.xml file:
&amp;lt;property name=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; You may also enable Query Caching with this property:
&amp;lt;property name=&amp;quot;hibernate.cache.use_query_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; WildFly does not require you to define a Cache Provider when enabling Hibernate&amp;rsquo;s Second-Level Cache, as Infinispan is used by default. If you would like to use an alternative Cache Provider, however, you may do so with the hibernate.</description>
    </item>
    
    <item>
      <title>Criterias and Projections</title>
      <link>https://www.wikiod.com/hibernate/criterias-and-projections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/criterias-and-projections/</guid>
      <description>Use Filters # @Filter is used as a WHERE camp, here some examples
Student Entity
@Entity @Table(name = &amp;quot;Student&amp;quot;) public class Student { /*...*/ @OneToMany @Filter(name = &amp;quot;active&amp;quot;, condition = &amp;quot;EXISTS(SELECT * FROM Study s WHERE state = true and s.id = study_id)&amp;quot;) Set&amp;lt;StudentStudy&amp;gt; studies; /* getters and setters methods */ } Study Entity
@Entity @Table(name = &amp;quot;Study&amp;quot;) @FilterDef(name = &amp;quot;active&amp;quot;) @Filter(name = &amp;quot;active&amp;quot;, condition=&amp;quot;state = true&amp;quot;) public class Study { /*.</description>
    </item>
    
    <item>
      <title>Hibernate and JPA</title>
      <link>https://www.wikiod.com/hibernate/hibernate-and-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/hibernate-and-jpa/</guid>
      <description>Relationship between Hibernate and JPA # Hibernate is an implementation of the [JPA][1] standard. As such, everything said there is also true for Hibernate.
Hibernate has some extensions to JPA. Also, the way to set up a JPA provider is provider-specific. This documentation section should only contain what is specific to Hibernate.
[1]: https://www.wikiod.com/jpa/getting-started-with-jpa#Installation or Setup</description>
    </item>
    
    <item>
      <title>Native SQL Queries</title>
      <link>https://www.wikiod.com/hibernate/native-sql-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/hibernate/native-sql-queries/</guid>
      <description>Simple Query # Assuming you have a handle on the Hibernate Session object, in this case named session:
List&amp;lt;Object[]&amp;gt; result = session.createNativeQuery(&amp;quot;SELECT * FROM some_table&amp;quot;).list(); for (Object[] row : result) { for (Object col : row) { System.out.print(col); } } This will retrieve all rows in some_table and place them into the result variable and print every value.
Example to get a unique result # Object pollAnswered = getCurrentSession().createSQLQuery( &amp;quot;select * from TJ_ANSWERED_ASW where pol_id = &amp;quot;+pollId+&amp;quot; and prf_log = &#39;&amp;quot;+logid+&amp;quot;&#39;&amp;quot;).</description>
    </item>
    
  </channel>
</rss>

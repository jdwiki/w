<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes Tutorial on </title>
    <link>https://www.wikiod.com/docs/kubernetes/</link>
    <description>Recent content in kubernetes Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with kubernetes</title>
      <link>https://www.wikiod.com/kubernetes/getting-started-with-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kubernetes/getting-started-with-kubernetes/</guid>
      <description>Install on Google Cloud # Kubernetes was originally developed by Google to power their Container Engine. As such, Kubernetes clusters are a first class citizen at Google.
Creating a Kubernetes cluster in the container engine requires gcloud command from the Google Cloud SDK. To install this command locally, use one of the following options:
use the interactive installer (the easiest way for the newcomers): curl https://sdk.cloud.google.com | bash exec -l $SHELL gcloud init download the SDK from https://cloud.</description>
    </item>
    
    <item>
      <title>Calling Kubernetes API</title>
      <link>https://www.wikiod.com/kubernetes/calling-kubernetes-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kubernetes/calling-kubernetes-api/</guid>
      <description>Using Kubernetes Go Client - Outside of Cluster # package main import ( &amp;quot;fmt&amp;quot; &amp;quot;k8s.io/client-go/1.5/kubernetes&amp;quot; &amp;quot;k8s.io/client-go/1.5/pkg/api/v1&amp;quot; &amp;quot;k8s.io/client-go/1.5/tools/clientcmd&amp;quot; ) func main() { config, err := clientcmd.BuildConfigFromFlags(&amp;quot;&amp;quot;, &amp;lt;kube-config-path&amp;gt;) if err != nil { return nil, err } c, err := kubernetes.NewForConfig(config) if err != nil { return nil, err } // Get Pod by name pod, err := c.Pods(v1.NamespaceDefault).Get(&amp;quot;my-pod&amp;quot;) if err != nil { fmt.Println(err) return } // Print its creation time fmt.</description>
    </item>
    
    <item>
      <title>Kubernetes in production</title>
      <link>https://www.wikiod.com/kubernetes/kubernetes-in-production/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/kubernetes/kubernetes-in-production/</guid>
      <description>Introduce how to use kubernetes in production environment
Deploy zookeeper cluster in production using kubernetes and ceph # Dockerize zookeeper-3.4.6 # Create a Dockerfile:
####################################################### # Image: img.reg.3g:15000/zookeeper:3.4.6 ####################################################### FROM img.reg.3g:15000/jdk:1.7.0_67 MAINTAINER lth9739@gmail.com USER root ENV ZOOKEEPER_VERSION 3.4.6 ADD Dockerfile / ADD zookeeper/ /opt/ COPY zoo.cfg /opt/zookeeper/conf/zoo.cfg RUN mkdir -p /opt/zookeeper/{data,log} WORKDIR /opt/zookeeper VOLUME [&amp;quot;/opt/zookeeper/conf&amp;quot;, &amp;quot;/opt/zookeeper/data&amp;quot;, &amp;quot;/opt/zookeeper/log&amp;quot;] COPY config-and-run.sh /opt/zookeeper/bin/ EXPOSE 2181 2888 3888 CMD [&amp;quot;/opt/zookeeper/bin/config-and-run.sh&amp;quot;] See more details
Deploy zookeeper replica controller into kubernetes cluster # You can use this command to deploy the replica-controller of zookeeper:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis Tutorial on </title>
    <link>https://www.wikiod.com/docs/redis/</link>
    <description>Recent content in redis Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with redis</title>
      <link>https://www.wikiod.com/redis/getting-started-with-redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/getting-started-with-redis/</guid>
      <description>Redis command line interface # redis-cli is the Redis command line interface program that allows to send commands to Redis and read the replies sent by the server, directly from the terminal. Basic command line usage is below:
Access to redis:
$ redis-cli 127.0.0.1:6379&amp;gt; Access to redis with authentication:
$ redis-cli -a myPassword 127.0.0.1:6379&amp;gt; Select database and show database size (default database number is 0):
127.0.0.1:6379&amp;gt; dbsize (integer) 2 127.0.0.1:6379&amp;gt; select 1 OK 127.</description>
    </item>
    
    <item>
      <title>How to Connect to Redis in Java using Jedis</title>
      <link>https://www.wikiod.com/redis/how-to-connect-to-redis-in-java-using-jedis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/how-to-connect-to-redis-in-java-using-jedis/</guid>
      <description>There are more than ten different client libraries to use with Redis in Java. One of the most popular clients is Jedis.
Further information:
Java Redis Clients Jedis Github Repository Jedis Documentation/Wiki Connecting to Redis # Using a Pool
Most code will want to connect to Redis using a pool of shared connection objects. Connecting to Redis using a pool involves two different code block. At initialization time, your application needs to create the connection pool:</description>
    </item>
    
    <item>
      <title>Connecting to redis using Python</title>
      <link>https://www.wikiod.com/redis/connecting-to-redis-using-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/connecting-to-redis-using-python/</guid>
      <description>Connecting to Redis in Python requires the use of a client library. Many different client libraries exist for Python, but redis-py is one of the most popular clients in use.
Once you install your client library, you can then access Redis in your application by importing the appropriate module, establishing a connection, then executing a command.
To connect on redis with python you need to install a client. You can install with pip using:</description>
    </item>
    
    <item>
      <title>Redis Keys</title>
      <link>https://www.wikiod.com/redis/redis-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/redis-keys/</guid>
      <description>The Redis keyspace can be thought of as a hash table or dictionary mapping keys to data structures in the database.
Redis provides a wide range of commands that work with keys to manage the keyspace, including the ability to remove keys, inspect key metadata, search for keys, and modify certain properties of keys.
Syntax # KEYS pattern PERSIST key EXPIRE key seconds EXPIREAT key timestamp TTL key PEXPIRE key milliseconds PEXPIREAT key milliseconds-timestamp PTTL key UNLINK key [key &amp;hellip;] DEL key [key &amp;hellip;] SCAN cursor [MATCH pattern] [COUNT count] For valid characters in Redis keys, the manual explains this completely:</description>
    </item>
    
    <item>
      <title>Installation and Setup</title>
      <link>https://www.wikiod.com/redis/installation-and-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/installation-and-setup/</guid>
      <description>Check if Redis is working # redis-cli ping This should return PONG
Access Redis Cli # Assuming that you are running redis server on localhost you can type command
redis-cli After this command appear redis command line prompt
127.0.0.1:6379&amp;gt; Redis data types # The following is the list of all the data structures supported by Redis:
Binary-safe strings Lists: collections of string elements sorted according to the order of insertion. Sets: collections of unique, unsorted string elements.</description>
    </item>
    
    <item>
      <title>PubSub</title>
      <link>https://www.wikiod.com/redis/pubsub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/pubsub/</guid>
      <description>Redis provides an implementation of the Publish/Subscribe (Pub/Sub) messaging pattern. Instead of sending messages to specific receivers, Publishers send messages to interested receivers via some indirection mechanism. Receivers specify interest in particular messages. In Redis this functionality is accessed using the PUBLISH and SUBSCRIBE commands on channels.
Syntax # SUBSCRIBE channel [channel &amp;hellip;] UNSUBSCRIBE [channel [channel &amp;hellip;]] PUBLISH channel message PSUBSCRIBE pattern [pattern &amp;hellip;] PUNSUBSCRIBE [pattern [pattern &amp;hellip;]] To handle the pub/sub in redis, need to have one client for subscribe &amp;amp; different client for publish.</description>
    </item>
    
    <item>
      <title>Redis Persistence Storage</title>
      <link>https://www.wikiod.com/redis/redis-persistence-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/redis-persistence-storage/</guid>
      <description>Redis supports two main modes of persistence: RDB and AOF. The RDB mode of persistence takes a snapshot of your database at a point in time. In the RDB mode, Redis forks off a process to persist the database to disk. AOF logs every operation executed against the server into a replay log that can be processed at startup to restore the state of the database.
Disable all persistence storage in Redis # There are two kinds of persistent storage modes in Redis: AOF and RDB.</description>
    </item>
    
    <item>
      <title>Lua Scripting</title>
      <link>https://www.wikiod.com/redis/lua-scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/lua-scripting/</guid>
      <description>Redis provides a couple of mechanisms for extending the functionality of the database. One mechanism is through the use of server-side LUA scripts that can be executed to manipulate data. Lua scripts can be useful to perform expensive operations or to implement atomic operations that require logic.
Commands For Scripting # Redis provides seven different operations for working with scripts:
Eval operations (EVAL, EVALSHA) SCRIPT operations (DEBUG, EXISTS, FLUSH, KILL, LOAD) The EVAL command evaluates a script provided as a string argument to the server.</description>
    </item>
    
    <item>
      <title>Redis List Datatype</title>
      <link>https://www.wikiod.com/redis/redis-list-datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/redis-list-datatype/</guid>
      <description>The List datatype in Redis is an ordered collection of items referenced by a Redis key. Redis allows you to access and modify a list by index or push/pop operations. In Redis, the two ends of a list are referred to as the left and the right. The left corresponds to the first element or head of a list and the right coresponds to the last element or tail of a list.</description>
    </item>
    
    <item>
      <title>Geo</title>
      <link>https://www.wikiod.com/redis/geo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/redis/geo/</guid>
      <description>Redis provides the GEO datatype to work with geospatial indexed data.
Syntax # GEOADD key longitude latitude member [longitude latitude member &amp;hellip;] GEODIST key member1 member2 [unit] GEOADD # The GEOADD command allows a user to add geospatial information (item name, longitude, latitude) to a particular key.
The GEOADD command can be used to add a single item to a key:
GEOADD meetup_cities -122.43 37.77 &amp;quot;San Francisco&amp;quot; or multiple items to a key:</description>
    </item>
    
  </channel>
</rss>

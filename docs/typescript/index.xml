<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript Tutorial on </title>
    <link>https://www.wikiod.com/docs/typescript/</link>
    <description>Recent content in TypeScript Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with TypeScript</title>
      <link>https://www.wikiod.com/typescript/getting-started-with-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/getting-started-with-typescript/</guid>
      <description>Installation and setup # Background # TypeScript is a typed superset of JavaScript that compiles directly to JavaScript code. TypeScript files commonly use the .ts extension. Many IDEs support TypeScript without any other setup required, but TypeScript can also be compiled with the TypeScript Node.JS package from the command line.
IDEs # Visual Studio # Visual Studio 2015 includes TypeScript. Visual Studio 2013 Update 2 or later includes TypeScript, or you can download TypeScript for earlier versions.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://www.wikiod.com/typescript/unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/unit-testing/</guid>
      <description>tape # tape is minimalistic JavaScript testing framework, it outputs TAP-compliant markup.
To install tape using npm run command
npm install --save-dev tape @types/tape To use tape with Typescript you need to install ts-node as global package, to do this run command
npm install -g ts-node Now you are ready to write your first test
//math.test.ts import * as test from &amp;quot;tape&amp;quot;; test(&amp;quot;Math test&amp;quot;, (t) =&amp;gt; { t.equal(4, 2 + 2); t.</description>
    </item>
    
    <item>
      <title>Importing external libraries</title>
      <link>https://www.wikiod.com/typescript/importing-external-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/importing-external-libraries/</guid>
      <description>Syntax # import {component} from &#39;libName&#39;; // Will import the class &amp;quot;component&amp;quot; import {component as c} from &#39;libName&#39;; // Will import the class &amp;quot;component&amp;quot; into a &amp;quot;c&amp;quot; object import component from &#39;libname&#39;; // Will import the default export from libName import * as lib from &#39;libName&#39;; // Will import everything from libName into a &amp;quot;lib&amp;quot; object import lib = require(&#39;libName&#39;); // Will import everything from libName into a &amp;quot;lib&amp;quot; object const lib: any = require(&#39;libName&#39;); // Will import everything from libName into a &amp;quot;lib&amp;quot; object import &#39;libName&#39;; // Will import libName module for its side effects only It might seem that the syntax</description>
    </item>
    
    <item>
      <title>tsconfig.json</title>
      <link>https://www.wikiod.com/typescript/tsconfigjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/tsconfigjson/</guid>
      <description>Syntax # Uses JSON file format Can also accept JavaScript style comments Overview # The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options required to compile the project.
Using tsconfig.json # By invoking tsc with no input files, in which case the compiler searches for the tsconfig.json file starting in the current directory and continuing up the parent directory chain.</description>
    </item>
    
    <item>
      <title>TypeScript with SystemJS</title>
      <link>https://www.wikiod.com/typescript/typescript-with-systemjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/typescript-with-systemjs/</guid>
      <description>Hello World in the browser with SystemJS # Install systemjs and plugin-typescript
npm install systemjs npm install plugin-typescript NOTE: this will install typescript 2.0.0 compiler which is not released yet.
For TypeScript 1.8 you have to use plugin-typescript 4.0.16
Create hello.ts file
export function greeter(person: String) { return &#39;Hello, &#39; + person; } Create hello.html file
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello World in TypeScript&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;node_modules/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;config.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.addEventListener(&#39;load&#39;, function() { System.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://www.wikiod.com/typescript/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/debugging/</guid>
      <description>There are two ways of running and debugging TypeScript:
Transpile to JavaScript, run in node and use mappings to link back to the TypeScript source files
or
Run TypeScript directly using ts-node
This article describes both ways using Visual Studio Code and WebStorm. All examples presume that your main file is index.ts.
TypeScript with ts-node in WebStorm # Add this script to your package.json:
&amp;quot;start:idea&amp;quot;: &amp;quot;ts-node %NODE_DEBUG_OPTION% --ignore false index.ts&amp;quot;, Right click on the script and select Create &amp;rsquo;test:idea&amp;rsquo;&amp;hellip; and confirm with &amp;lsquo;OK&amp;rsquo; to create the debug configuration:</description>
    </item>
    
    <item>
      <title>Strict null checks</title>
      <link>https://www.wikiod.com/typescript/strict-null-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/strict-null-checks/</guid>
      <description>Strict null checks in action # By default, all types in TypeScript allow null:
function getId(x: Element) { return x.id; } getId(null); // TypeScript does not complain, but this is a runtime error. TypeScript 2.0 adds support for strict null checks. If you set --strictNullChecks when running tsc (or set this flag in your tsconfig.json), then types no longer permit null:
function getId(x: Element) { return x.id; } getId(null); // error: Argument of type &#39;null&#39; is not assignable to parameter of type &#39;Element&#39;.</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://www.wikiod.com/typescript/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/classes/</guid>
      <description>TypeScript, like ECMA Script 6, support object-oriented programming using classes. This contrasts with older JavaScript versions, which only supported prototype-based inheritance chain.
The class support in TypeScript is similar to that of languages like Java and C#, in that classes may inherit from other classes, while objects are instantiated as class instances.
Also similar to those languages, TypeScript classes may implement interfaces or make use of generics.
Abstract Classes # abstract class Machine { constructor(public manufacturer: string) { } // An abstract class can define methods of it&#39;s own, or.</description>
    </item>
    
    <item>
      <title>How to use a javascript library without a type definition file</title>
      <link>https://www.wikiod.com/typescript/how-to-use-a-javascript-library-without-a-type-definition-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/how-to-use-a-javascript-library-without-a-type-definition-file/</guid>
      <description>While some existing JavaScript libraries have type definition files, there are many that don&amp;rsquo;t.
TypeScript offers a couple patterns to handle missing declarations.
Make a module that exports a default any # For more complicated projects, or in cases where you intend to gradually type a dependency, it may be cleaner to create a module.
Using JQuery (although it does have typings available) as an example:
// place in jquery.d.ts declare let $: any; export default $; And then in any file in your project, you can import this definition with:</description>
    </item>
    
    <item>
      <title>TypeScript with AngularJS</title>
      <link>https://www.wikiod.com/typescript/typescript-with-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/typescript/typescript-with-angularjs/</guid>
      <description>Parameters # Name Description controllerAs is an alias name, to which variables or functions can be assigned to. @see: https://docs.angularjs.org/guide/directive $inject Dependency Injection list, it is resolved by angular and passing as an argument to constuctor functions. While doing the directive in TypeScript, keep in mind, that power of this language of custom type and interfaces that you can create. This is extremely helpfull when developing huge applications. Code completion supported by many IDE will show you the possible value by corresponding type you are working with, so there is far more less that should be kept in mind (comparing to VanillaJS).</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rubygems Tutorial on </title>
    <link>https://www.wikiod.com/docs/rubygems/</link>
    <description>Recent content in rubygems Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/rubygems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with rubygems</title>
      <link>https://www.wikiod.com/rubygems/getting-started-with-rubygems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rubygems/getting-started-with-rubygems/</guid>
      <description>Installation or Setup # If you don&amp;rsquo;t have any RubyGems installed, there is still the pre-gem approach to getting software, doing it manually:
Download from RubyGems
Unpack into a directory and cd there
Install with: ruby setup.rb (you may need admin/root privilege)
sudo ruby setup.rb For more details and other options, see:
ruby setup.rb --help Installation on Linux # Make sure you have ruby installed before installing rubygems, and then:</description>
    </item>
    
    <item>
      <title>Anemone</title>
      <link>https://www.wikiod.com/rubygems/anemone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rubygems/anemone/</guid>
      <description>Syntax # Use Anemone::Core.new(url, options) to initialize the crawler Use on_every_page block to run code on every page visited Use .run method to start the crawl. No code beforehand will actually start any GET calls. Parameters # Parameter Details url URL (including protocol to be crawled) options optional hash, see all options here The crawler will by only visit links that are on the same domain as the starting URL. This is important to know when dealing with content subdomains such as media.</description>
    </item>
    
    <item>
      <title>Change gem source in Gemfile</title>
      <link>https://www.wikiod.com/rubygems/change-gem-source-in-gemfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rubygems/change-gem-source-in-gemfile/</guid>
      <description>Use github repo for specific gem in Gemfile # Instead of
gem &#39;rails&#39;
You can specify a github user/repo combination with
gem &#39;rails&#39;, github: &#39;rails/rails&#39;
Make use of ref, branch, git for specific gem in gemfile # gem &#39;any gem&#39;,git: &#39;any repo&#39;,branch: &#39;specific branch of that repo&#39;,ref: &#39;reference no.&#39; ref specifies individual commit. branch specifies the git branch to pull from.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/rubygems/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rubygems/json/</guid>
      <description>The json gem for Ruby allows for the parsing and creation of JSON.
Syntax # JSON.parse(json_document_string) =&amp;gt; returns a Hash of the JSON document JSON.generate(ruby_hash) =&amp;gt; returns a JSON document in the form of a String Parameters # Parameter Details json_document_string A JSON document in the form of a String ruby_hash Any Hash object Hash to JSON # require &#39;json&#39; data = {&amp;quot;test&amp;quot; =&amp;gt; 123} puts JSON.generate(data) JSON to Hash # require &#39;json&#39; document = &amp;quot;{\&amp;quot;test\&amp;quot;:123}&amp;quot; puts JSON.</description>
    </item>
    
    <item>
      <title>Maruku</title>
      <link>https://www.wikiod.com/rubygems/maruku/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/rubygems/maruku/</guid>
      <description>Maruku is a Markdown interpreter for Ruby. It allows for exporting Markdown to HTML and PDF.
Syntax # Maruku.new(str) =&amp;gt; parses Markdown into a Maruku object Maruku#to_html_document =&amp;gt; returns the Maruku object as a full HTML document (as a string) Parameters # Parameter Usage str Markdown string to be parsed Reading Markdown into Maruku # require &#39;maruku&#39; str = &amp;quot; # Title * List 1 * List 2 * List 3 &amp;quot; markdown = Maruku.</description>
    </item>
    
  </channel>
</rss>

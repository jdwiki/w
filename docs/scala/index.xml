<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala Language Tutorial on </title>
    <link>https://www.wikiod.com/docs/scala/</link>
    <description>Recent content in Scala Language Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Scala Language</title>
      <link>https://www.wikiod.com/scala/getting-started-with-scala-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/getting-started-with-scala-language/</guid>
      <description>Hello World by extending App # object HelloWorld extends App { println(&amp;quot;Hello, world!&amp;quot;) } Live demo
By extending the App trait, you can avoid defining an explicit main method. The entire body of the HelloWorld object is treated as &amp;ldquo;the main method&amp;rdquo;.
Delayed Initialization # Per the official documentation, App makes use of a feature called Delayed Initialization. This means that the object fields are initialized after the main method is called.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>https://www.wikiod.com/scala/pattern-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/pattern-matching/</guid>
      <description>Syntax # selector match partialFunction selector match {list of case alternatives) // This is most common form of the above Parameters # Parameter Details selector The expression whose value is being pattern-matched. alternatives a list of case-delimited alternatives. Simple Pattern Match # This example shows how to match an input against several values:
def f(x: Int): String = x match { case 1 =&amp;gt; &amp;quot;One&amp;quot; case 2 =&amp;gt; &amp;quot;Two&amp;quot; case _ =&amp;gt; &amp;quot;Unknown!</description>
    </item>
    
    <item>
      <title>Implicits</title>
      <link>https://www.wikiod.com/scala/implicits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/implicits/</guid>
      <description>Syntax # implicit val x: T = ??? Implicit classes allow custom methods to be added to existing types, without having to modify their code, thereby enriching types without needing control of the code.
Using implicit types to enrich an existing class is often referred to as an &amp;rsquo;enrich my library&amp;rsquo; pattern.
Restrictions on Implicit Classes
Implicit classes may only exist within another class, object, or trait. Implicit classes may only have one non-implicit primary constructor parameter.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/scala/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/json/</guid>
      <description>JSON with Circe # Circe provides compile-time derived codecs for en/decode json into case classes. A simple example looks like this:
import io.circe._ import io.circe.generic.auto._ import io.circe.parser._ import io.circe.syntax._ case class User(id: Long, name: String) val user = User(1, &amp;quot;John Doe&amp;quot;) // {&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;John Doe&amp;quot;} val json = user.asJson.noSpaces // Right(User(1L, &amp;quot;John Doe&amp;quot;)) val res: Either[Error, User] = decode[User](json) JSON with spray-json # spray-json provides an easy way to work with JSON.</description>
    </item>
    
    <item>
      <title>Extractors</title>
      <link>https://www.wikiod.com/scala/extractors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/extractors/</guid>
      <description>Syntax # val extractor(extractedValue1, _ /* ignored second extracted value */) = valueToBeExtracted valueToBeExtracted match { case extractor(extractedValue1, _) =&amp;gt; ???} val (tuple1, tuple2, tuple3) = tupleWith3Elements object Foo { def unapply(foo: Foo): Option[String] = Some(foo.x); } Case Class Extractors # A case class is a class with a lot of standard boilerplate code automatically included. One benefit of this is that Scala makes it easy to use extractors with case classes.</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/scala/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/collections/</guid>
      <description>List and Vector Cheatsheet # It is now a best-practice to use Vector instead of List because the implementations have better performance Performance characteristics can be found here. Vector can be used wherever List is used.
List creation
List[Int]() // Declares an empty list of type Int List.empty[Int] // Uses `empty` method to declare empty list of type Int Nil // A list of type Nothing that explicitly has nothing in it List(1, 2, 3) // Declare a list with some elements 1 :: 2 :: 3 :: Nil // Chaining element prepending to an empty list, in a LISP-style Take element</description>
    </item>
    
    <item>
      <title>Monads</title>
      <link>https://www.wikiod.com/scala/monads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/monads/</guid>
      <description>Monad Definition # Informally, a monad is a container of elements, notated as F[_], packed with 2 functions: flatMap (to transform this container) and unit (to create this container).
Common library examples include List[T], Set[T] and Option[T].
Formal definition
Monad M is a parametric type M[T] with two operations flatMap and unit, such as:
trait M[T] { def flatMap[U](f: T =&amp;gt; M[U]): M[U] } def unit[T](x: T): M[T] These functions must satisfy three laws:</description>
    </item>
    
    <item>
      <title>Case Classes</title>
      <link>https://www.wikiod.com/scala/case-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/case-classes/</guid>
      <description>Syntax # case class Foo() // Case classes with no parameters must have an empty list case class Foo(a1: A1, &amp;hellip;, aN: AN) // Create a case class with fields a1 &amp;hellip; aN case object Bar // Create a singleton case class Generated Code Artifacts # The case modifier causes the Scala compiler to automatically generate common boilerplate code for the class. Implementing this code manually is tedious and a source of errors.</description>
    </item>
    
    <item>
      <title>Enumerations</title>
      <link>https://www.wikiod.com/scala/enumerations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/enumerations/</guid>
      <description>Approach with sealed trait and case objects is preferred because Scala enumeration has a few problems:
Enumerations have the same type after erasure.
Compiler doesn&amp;rsquo;t complain about â€œMatch is not exhaustive&amp;quot;, if case is missed it will fail in runtime scala.MatchError:
def isWeekendWithBug(day: WeekDays.Value): Boolean = day match { case WeekDays.Sun | WeekDays.Sat =&amp;gt; true }
isWeekendWithBug(WeekDays.Fri) scala.MatchError: Fri (of class scala.Enumeration$Val)
Compare with:
def isWeekendWithBug(day: WeekDay): Boolean = day match { case WeekDay.</description>
    </item>
    
    <item>
      <title>Currying</title>
      <link>https://www.wikiod.com/scala/currying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/scala/currying/</guid>
      <description>Syntax # aFunction(10)_ //Using &amp;lsquo;_&amp;rsquo; Tells the compiler that all the parameters in the rest of the parameter groups will be curried. nArityFunction.curried //Converts an n-arity Function to an equivalent curried version anotherFunction(x)(_: String)(z) // Currying an arbitrary parameter. It needs its type explicitly stated. When to use Currying # Currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.</description>
    </item>
    
  </channel>
</rss>

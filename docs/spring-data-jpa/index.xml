<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-data-jpa Tutorial on </title>
    <link>https://www.wikiod.com/docs/spring-data-jpa/</link>
    <description>Recent content in spring-data-jpa Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/spring-data-jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with spring-data-jpa</title>
      <link>https://www.wikiod.com/spring-data-jpa/getting-started-with-spring-data-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-data-jpa/getting-started-with-spring-data-jpa/</guid>
      <description>Installation or Setup # To start using Spring data JPA, you must include the dependency in your project with the one of Spring core, all together. If you&amp;rsquo;re using Maven as dependency management system (replace version-number for the version you want to use):
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-data-jpa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;version-number&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; And if you&amp;rsquo;re using Gradle:
dependencies { compile &#39;org.springframework.data:spring-data-jpa:version-number&#39; } You can also set it up when using Spring Boot, just include the starter dependency and get rid of the version number:</description>
    </item>
    
    <item>
      <title>Repositories</title>
      <link>https://www.wikiod.com/spring-data-jpa/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/spring-data-jpa/repositories/</guid>
      <description>The Spring Data project allows application programmers to work with data stores using a consistent interface that makes use of an abstraction called Repository. A Spring Data Repository is modeled after the Repository pattern made popular by domain-driven design. Spring Data provides a central Java interface named Repository that subprojects can extend to provide features specific to data stores.
In addition to the Repository interface, Spring Data also provides two more core interfaces - CrudRepository that defines the contract for basic CRUD (create, read, update and delete) functionality; and PagingAndSortingRepository that extends CrudRepository by defining a contract for pagination and sorting.</description>
    </item>
    
  </channel>
</rss>

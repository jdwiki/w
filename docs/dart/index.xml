<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dart Tutorial on </title>
    <link>https://www.wikiod.com/docs/dart/</link>
    <description>Recent content in dart Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with dart</title>
      <link>https://www.wikiod.com/dart/getting-started-with-dart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/getting-started-with-dart/</guid>
      <description>Installation or Setup # The Dart SDK includes everything you need to write and run Dart code: VM, libraries, analyzer, package manager, doc generator, formatter, debugger, and more. If you are doing web development, you will also need Dartium.
Automated installation and updates # Installing Dart on Windows Installing Dart on Mac Installing Dart on Linux Manual install # You can also manually install any version of the SDK.
Hello, World!</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://www.wikiod.com/dart/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/collections/</guid>
      <description>Creating a new List # Lists can be created in multiple ways.
The recommended way is to use a List literal:
var vegetables = [&#39;broccoli&#39;, &#39;cabbage&#39;]; The List constructor can be used as well:
var fruits = new List(); If you prefer stronger typing, you can also supply a type parameter in one of the following ways:
var fruits = &amp;lt;String&amp;gt;[&#39;apples&#39;, &#39;oranges&#39;]; var fruits = new List&amp;lt;String&amp;gt;(); For creating a small growable list, either empty or containing some known initial values, the literal form is preferred.</description>
    </item>
    
    <item>
      <title>Asynchronous Programming</title>
      <link>https://www.wikiod.com/dart/asynchronous-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/asynchronous-programming/</guid>
      <description>Converting callbacks to Futures # Dart has a robust async library, with Future, Stream, and more. However, sometimes you might run into an asynchronous API that uses callbacks instead of Futures. To bridge the gap between callbacks and Futures, Dart offers the Completer class. You can use a Completer to convert a callback into a Future.
Completers are great for bridging a callback-based API with a Future-based API. For example, suppose your database driver doesn&amp;rsquo;t use Futures, but you need to return a Future.</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://www.wikiod.com/dart/control-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/control-flow/</guid>
      <description>If Else # Dart has If Else:
if (year &amp;gt;= 2001) { print(&#39;21st century&#39;); } else if (year &amp;gt;= 1901) { print(&#39;20th century&#39;); } else { print(&#39;We Must Go Back!&#39;); } Dart also has a ternary if operator:
var foo = true; print(foo ? &#39;Foo&#39; : &#39;Bar&#39;); // Displays &amp;quot;Foo&amp;quot;. While Loop # While loops and do while loops are allowed in Dart:
while(peopleAreClapping()) { playSongs(); } and:
do { processRequest(); } while(stillRunning()); Loops can be terminated using a break:</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://www.wikiod.com/dart/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/classes/</guid>
      <description>Members # A class can have members.
Instance variables can be declared with/without type annotations, and optionally initialized. Uninitialised members have the value of null, unless set to another value by the constructor.
class Foo { var member1; int member2; String member3 = &amp;quot;Hello world!&amp;quot;; } Class variables are declared using the static keyword.
class Bar { static var member4; static String member5; static int member6 = 42; } If a method takes no arguments, is fast, returns a value, and doesn&amp;rsquo;t have visible side-effects, then a getter method can be used:</description>
    </item>
    
    <item>
      <title>Converting Data</title>
      <link>https://www.wikiod.com/dart/converting-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/converting-data/</guid>
      <description>JSON # import &#39;dart:convert&#39;; void main() { var jsonString = &amp;quot;&amp;quot;&amp;quot; { &amp;quot;cats&amp;quot;: { &amp;quot;abysinnian&amp;quot;: { &amp;quot;origin&amp;quot;: &amp;quot;Burma&amp;quot;, &amp;quot;behavior&amp;quot;: &amp;quot;playful&amp;quot; } } } &amp;quot;&amp;quot;&amp;quot;; var obj = JSON.decode(jsonString); print(obj[&#39;cats&#39;][&#39;abysinnian&#39;][&#39;behavior&#39;]); // playful } See example on dartpad: https://dartpad.dartlang.org/7d5958cf10e611b36326f27b062108fe</description>
    </item>
    
    <item>
      <title>Dart-JavaScript interoperability</title>
      <link>https://www.wikiod.com/dart/dart-javascript-interoperability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/dart-javascript-interoperability/</guid>
      <description>Dart-JavaScript interoperability lets us run JavaScript code from our Dart programs.
The interoperability is achieved by using the js library to create Dart stubs. These stubs describe the interface we&amp;rsquo;d like to have with the underlying JavaScript code. At runtime calling the Dart stub will invoke the JavaScript code.
Wrapping JavaScript classes/namespaces # Suppose we&amp;rsquo;d like to wrap the Google Maps JavaScript API google.maps:
@JS(&#39;google.maps&#39;) library maps; import &amp;quot;package:js/js.dart&amp;quot;; @JS() class Map { external Map(Location location); external Location getLocation(); } We now have the Map Dart class which corresponds to the JavaScript google.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.wikiod.com/dart/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/functions/</guid>
      <description>Dart is a true object-oriented language, so even functions are objects and have a type, Function. This means that functions can be assigned to variables or passed as arguments to other functions. You can also call an instance of a Dart class as if it were a function.
Functions with named parameters # When defining a function, use {param1, param2, …} to specify named parameters:
void enableFlags({bool bold, bool hidden}) { // .</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://www.wikiod.com/dart/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/exceptions/</guid>
      <description>Dart code can throw and catch exceptions. Exceptions are errors indicating that something unexpected happened. If the exception isn’t caught, the isolate that raised the exception is suspended, and typically the isolate and its program are terminated.
In contrast to Java, all of Dart’s exceptions are unchecked exceptions. Methods do not declare which exceptions they might throw, and you are not required to catch any exceptions.
Dart provides Exception and Error types, as well as numerous predefined subtypes.</description>
    </item>
    
    <item>
      <title>Pub</title>
      <link>https://www.wikiod.com/dart/pub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dart/pub/</guid>
      <description>When you install the Dart SDK, one of the tools that you get is pub. The pub tool provides commands for a variety of purposes. One command installs packages, another starts up an HTTP server for testing, another prepares your app for deployment, and another publishes your package to pub.dartlang.org. You can access the pub commands either through an IDE, such as WebStorm, or at the command line.
For an overview of these commands, see Pub Commands.</description>
    </item>
    
  </channel>
</rss>

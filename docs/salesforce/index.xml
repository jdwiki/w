<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Salesforce Tutorial on </title>
    <link>https://www.wikiod.com/docs/salesforce/</link>
    <description>Recent content in Salesforce Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/salesforce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Salesforce</title>
      <link>https://www.wikiod.com/salesforce/getting-started-with-salesforce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/getting-started-with-salesforce/</guid>
      <description>Installation or Setup # The best way to get started with Salesforce is to get your own Developer Edition.
Developer Edition (often referred to as a &amp;ldquo;DE org&amp;rdquo;) is a fully-featured development environment with limits on data and users. Developer Edition is where you can get familiar with the environment, try out stuff and mess around in Salesforce.com. Developer edition is an environment lets you instantly start developing, testing and deploying your app in the cloud.</description>
    </item>
    
    <item>
      <title>Tools for Development</title>
      <link>https://www.wikiod.com/salesforce/tools-for-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/tools-for-development/</guid>
      <description>IDEs # A list of available IDEs to create classes, triggers, Visualforce/Lightning pages/components.
Force.com IDE – plugin for Eclipse JedIDE – plugin for IntelliJ IDEA &amp;amp; standalone Force.com IDE MavensMate – plugin for Sublime Text and Atom and VS Code FuseIT SFDC Explorer - This is a standalone tool Welkin Suite – This is a standalone tool; Illuminated Cloud - plugin for IntelliJ IDE Aside.io - Web-based IDE Cloud 9 - Web-based IDE VimAwesome - VIM plugin for Force.</description>
    </item>
    
    <item>
      <title>Custom Settings</title>
      <link>https://www.wikiod.com/salesforce/custom-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/custom-settings/</guid>
      <description>Introduction # Unlike custom objects which have records based on them, custom settings let you utilize custom data sets across your org, or distinguish particular users or profiles based on custom criteria. This means, for example, that admins can edit hierarchy custom settings to deactivate Workflow / Validation Rules for single users or profiles, without having to switch them off for the whole org (see the Using Hierarchy Custom Settings To Disable Workflow / Validation Rules example above).</description>
    </item>
    
    <item>
      <title>Salesforce Object Query Language (SOQL)</title>
      <link>https://www.wikiod.com/salesforce/salesforce-object-query-language-soql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/salesforce-object-query-language-soql/</guid>
      <description>Syntax # SELECT Id FROM Account SELECT Id, Name FROM Account SELECT Id FROM Account WHERE Name = &amp;lsquo;SomeAccountName&amp;rsquo; SELECT Id, Name, (SELECT Id, Name FROM Contacts) FROM Account SELECT Id, Name FROM Account WHERE Id = :apexVariableName Basic SOQL Query # SELECT Id, Name FROM Account This will return the Id and Name fields from the Account table. No filtering or sorting will be applied.
SOQL Query to Reference Parent Object&amp;rsquo;s Fields # When object&amp;rsquo;s are linked by a lookup or master-detail relationship, the parent records field&amp;rsquo;s can be referenced from the child record or &amp;lsquo;base object&amp;rsquo; in a query.</description>
    </item>
    
    <item>
      <title>Apex Testing</title>
      <link>https://www.wikiod.com/salesforce/apex-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/apex-testing/</guid>
      <description>Using testSetup # You can use a method annotated with @testSetup to write code that will have been executed before each test run:
public class AccountService { public static Account fetchAccount() { return [ SELECT Id, Name FROM Account LIMIT 1 ]; } } @isTest public class AccountServiceTest { private static final String TEST_ACCOUNT_NAME = &#39;My Test Account&#39;; @testSetup public static void setUpAccountData() { Account a = new Account(Name = TEST_ACCOUNT_NAME); } @isTest public static void testFetchAccount() { Account a = AccountService.</description>
    </item>
    
    <item>
      <title>Apex Triggers</title>
      <link>https://www.wikiod.com/salesforce/apex-triggers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/apex-triggers/</guid>
      <description>Syntax # trigger &amp;lt;name&amp;gt; on &amp;lt;object-api-name&amp;gt; (&amp;lt;events&amp;gt;) { // your trigger logic } Parameters # parameter description name Name of the trigger object-api-name Object on which the trigger will fire. Can be any standard or custom object. events Events which will fire the trigger. Are a combination of either before/after with any of insert/update/delete. There&amp;rsquo;s also after undelete without before counterpart. Basic trigger # trigger AccountTrigger on Account (before insert) { System.</description>
    </item>
    
    <item>
      <title>Salesforce REST API</title>
      <link>https://www.wikiod.com/salesforce/salesforce-rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/salesforce-rest-api/</guid>
      <description>Force.com REST API Documentation. Full list of API&amp;rsquo;s is here
OAuth2 access_token and list of services # To get OAuth2 access token simply do curl https://login.salesforce.com/services/oauth2/token -d &amp;quot;grant_type=password&amp;quot; -d &amp;quot;client_id=myclientid&amp;quot; -d &amp;quot;client_secret=myclientsecret&amp;quot; -d &amp;quot;username=mylogin@salesforce.com&amp;quot; -d &amp;quot;password=mypassword123456&amp;quot;
You should get response something like { &amp;quot;access_token&amp;quot;: &amp;quot;00D6F0xxx001g1qs!ARsAQL7BRiQQ0lgTW7zXu3kILJBxxxxxHvDnChF2ETBFJpX0T2LsBsm8MVABhAvINAyZqgDIAHhJDp6QjuF6ZAYFE&amp;quot;, &amp;quot;instance_url&amp;quot;: &amp;quot;https://ap4.salesforce.com&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;https://login.salesforce.com/id/00D6F000001xxxxAA/0056F000006DMcxxxx&amp;quot;, &amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;, &amp;quot;issued_at&amp;quot;: &amp;quot;14878401xxxxx&amp;quot;, &amp;quot;signature&amp;quot;: &amp;quot;Ra5Sdm6gq4xxxeZYk3H2yBIVpZ6hBUDgkQ4Tjp9Q=&amp;quot; } Then do
{ &amp;quot;tooling&amp;quot;: &amp;quot;/services/data/v20.0/tooling&amp;quot;, &amp;quot;eclair&amp;quot;: &amp;quot;/services/data/v20.0/eclair&amp;quot;, &amp;quot;prechatForms&amp;quot;: &amp;quot;/services/data/v20.0/prechatForms&amp;quot;, &amp;quot;async-queries&amp;quot;: &amp;quot;/services/data/v20.0/async-queries&amp;quot;, &amp;quot;query&amp;quot;: &amp;quot;/services/data/v20.0/query&amp;quot;, &amp;quot;chatter&amp;quot;: &amp;quot;/services/data/v20.</description>
    </item>
    
    <item>
      <title>Trigger Bulkification</title>
      <link>https://www.wikiod.com/salesforce/trigger-bulkification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/trigger-bulkification/</guid>
      <description>Bulkification # If you do row-by-row processing in Salesforce, you&amp;rsquo;ll probably reach the governor limit quickly. This is especially true with triggers and things that fire when you don&amp;rsquo;t expect them. One documented method of escaping the governor limit is bulkification.
Note: The following information is based on the official Salesforce docs.
Bulkifying Apex code means making sure that the code properly handles more than one record at a time. When a batch of records initiate Apex, a single instance of that Apex code is executed, but that instance needs to handle all of the records in that given batch.</description>
    </item>
    
    <item>
      <title>Global Variables on Visualforce pages</title>
      <link>https://www.wikiod.com/salesforce/global-variables-on-visualforce-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/global-variables-on-visualforce-pages/</guid>
      <description>$Resource # Use the $Resource variable to reference static resources.
&amp;lt;img src=&amp;quot;{!$Resource.myImage}&amp;quot; /&amp;gt; Can be used in conjunction with the URLFOR function to reference files inside of a zipped static resource:
&amp;lt;apex:includeScript value=&amp;quot;{!URLFOR($Resource.myResources, &#39;js/app.js&#39;)}&amp;quot; /&amp;gt; $Label # The $Label variable can be used to display text defined in your custom labels.
&amp;lt;apex:outputText value=&amp;quot;{!$Label.Welcome_Message}&amp;quot; /&amp;gt; You can do formatting with labels as well. Suppose you have a custom label named Welcome_Message defined as</description>
    </item>
    
    <item>
      <title>Working with External Systems</title>
      <link>https://www.wikiod.com/salesforce/working-with-external-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/salesforce/working-with-external-systems/</guid>
      <description>Making an outbound callout # This is an example on how to call a web service from salesforce. The code below is calling a REST based service hosted on data.gov to find farmers markets close to the zipcode.
Please remember in order to invoke a HTTP callout from your org, you need to tweak the remote settings for the org.
string url= &#39;http://search.ams.usda.gov/farmersmarkets/v1/data.svc/zipSearch?zip=10017&#39;; Http h = new Http(); HttpRequest req = new HttpRequest(); HttpResponse res = new HttpResponse(); req.</description>
    </item>
    
  </channel>
</rss>

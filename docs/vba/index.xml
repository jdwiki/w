<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VBA Tutorial on </title>
    <link>https://www.wikiod.com/docs/vba/</link>
    <description>Recent content in VBA Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with VBA</title>
      <link>https://www.wikiod.com/vba/getting-started-with-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/getting-started-with-vba/</guid>
      <description>Accessing the Visual Basic Editor in Microsoft Office # You can open the VB editor in any of the Microsoft Office applications by pressing Alt+F11 or going to the Developer tab and clicking on the &amp;ldquo;Visual Basic&amp;rdquo; button. If you don&amp;rsquo;t see the Developer tab in the Ribbon, check if this is enabled.
By default the Developer tab is disabled. To enable the Developer tab go to File -&amp;gt; Options, select Customize Ribbon in the list on the left.</description>
    </item>
    
    <item>
      <title>Scripting.Dictionary object</title>
      <link>https://www.wikiod.com/vba/scriptingdictionary-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/scriptingdictionary-object/</guid>
      <description>You must add Microsoft Scripting Runtime to the VBA project through the VBE&amp;rsquo;s Tools â†’ References command in order to implement early binding of the Scripting Dictionary object. This library reference is carried with the project; it does not have to be re-referenced when the VBA project is distributed and run on another computer.
Properties and Methods # A Scripting Dictionary object stores information in Key/Item pairs. The Keys must be unique and not an array but the associated Items can be repeated (their uniqueness is held by the companion Key) and can be of any type of variant or object.</description>
    </item>
    
    <item>
      <title>Declaring Variables</title>
      <link>https://www.wikiod.com/vba/declaring-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/declaring-variables/</guid>
      <description>Type Hints # Type Hints are heavily discouraged. They exist and are documented here for historical and backward-compatibility reasons. You should use the As [DataType] syntax instead.
Public Sub ExampleDeclaration() Dim someInteger% &#39;% Equivalent to &amp;quot;As Integer&amp;quot; Dim someLong&amp;amp; &#39;&amp;amp; Equivalent to &amp;quot;As Long&amp;quot; Dim someDecimal@ &#39;@ Equivalent to &amp;quot;As Currency&amp;quot; Dim someSingle! &#39;! Equivalent to &amp;quot;As Single&amp;quot; Dim someDouble# &#39;# Equivalent to &amp;quot;As Double&amp;quot; Dim someString$ &#39;$ Equivalent to &amp;quot;As String&amp;quot; Dim someLongLong^ &#39;^ Equivalent to &amp;quot;As LongLong&amp;quot; in 64-bit VBA hosts End Sub Type hints significantly decrease code readability and encourage a legacy Hungarian Notation which also hinders readability:</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>https://www.wikiod.com/vba/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/attributes/</guid>
      <description>Syntax # Attribute VB_Name = &amp;ldquo;ClassOrModuleName&amp;rdquo; Attribute VB_GlobalNameSpace = False &amp;rsquo; Ignored Attribute VB_Creatable = False &amp;rsquo; Ignored Attribute VB_PredeclaredId = {True | False} Attribute VB_Exposed = {True | False} Attribute variableName.VB_VarUserMemId = 0 &amp;rsquo; Zero indicates that this is the default member of the class. Attribute variableName.VB_VarDescription = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Adds the text to the Object Browser information for this variable. Attribute procName.VB_Description = &amp;ldquo;some string&amp;rdquo; &amp;rsquo; Adds the text to the Object Browser information for the procedure.</description>
    </item>
    
    <item>
      <title>CreateObject vs. GetObject</title>
      <link>https://www.wikiod.com/vba/createobject-vs-getobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/createobject-vs-getobject/</guid>
      <description>At its simplest, CreateObject creates an instance of an object whereas GetObject gets an existing instance of an object. Determining whether an object can be created or gotten will depend on it&amp;rsquo;s Instancing property. Some objects are SingleUse (eg, WMI) and cannot be created if they already exist. Other objects (eg, Excel) are MultiUse and allow multiple instances to run at once. If an instance of an object does not already exist and you attempt GetObject, you will receive the following trappable message: Run-time error &#39;429&#39;: ActiveX component can&#39;t create object.</description>
    </item>
    
    <item>
      <title>Naming Conventions</title>
      <link>https://www.wikiod.com/vba/naming-conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/naming-conventions/</guid>
      <description>Variable Names # Variables hold data. Name them after what they&amp;rsquo;re used for, not after their data type or scope, using a noun. If you feel compelled to number your variables (e.g. thing1, thing2, thing3), then consider using an appropriate data structure instead (e.g. an array, a Collection, or a Dictionary).
Names of variables that represent an iteratable set of values - e.g. an array, a Collection, a Dictionary, or a Range of cells, should be plural.</description>
    </item>
    
    <item>
      <title>Data Types and Limits</title>
      <link>https://www.wikiod.com/vba/data-types-and-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/data-types-and-limits/</guid>
      <description>Variant # Dim Value As Variant &#39;Explicit Dim Value &#39;Implicit A Variant is a COM data type that is used for storing and exchanging values of arbitrary types, and any other type in VBA can be assigned to a Variant. Variables declared without an explicit type specified by As [Type] default to Variant.
Variants are stored in memory as a VARIANT structure that consists of a byte type descriptor (VARTYPE) followed by 6 reserved bytes then an 8 byte data area.</description>
    </item>
    
    <item>
      <title>Scripting.FileSystemObject</title>
      <link>https://www.wikiod.com/vba/scriptingfilesystemobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/scriptingfilesystemobject/</guid>
      <description>Retrieve only the path from a file path # The GetParentFolderName method returns the parent folder for any path. While this can also be used with folders, it is arguably more useful for extracting the path from an absolute file path:
Dim fso As New Scripting.FileSystemObject Debug.Print fso.GetParentFolderName(&amp;quot;C:\Users\Me\My Documents\SomeFile.txt&amp;quot;) Prints C:\Users\Me\My Documents
Note that the trailing path separator is not included in the returned string.
Retrieve just the extension from a file name # Dim fso As New Scripting.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://www.wikiod.com/vba/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/error-handling/</guid>
      <description>Avoiding error conditions # When a runtime error occurs, good code should handle it. The best error handling strategy is to write code that checks for error conditions and simply avoids executing code that results in a runtime error.
One key element in reducing runtime errors, is writing small procedures that do one thing. The fewer reasons procedures have to fail, the easier the code as a whole is to debug.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.wikiod.com/vba/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/vba/arrays/</guid>
      <description>Multidimensional Arrays # Multidimensional Arrays # As the name indicates, multi dimensional arrays are arrays that contain more than one dimension, usually two or three but it can have up to 32 dimensions.
A multi array works like a matrix with various levels, take in example a comparison between one, two, and three Dimensions.
One Dimension is your typical array, it looks like a list of elements.
Dim 1D(3) as Variant *1D - Visually* (0) (1) (2) Two Dimensions would look like a Sudoku Grid or an Excel sheet, when initializing the array you would define how many rows and columns the array would have.</description>
    </item>
    
  </channel>
</rss>

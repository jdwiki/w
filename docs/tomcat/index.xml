<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tomcat Tutorial on </title>
    <link>https://www.wikiod.com/docs/tomcat/</link>
    <description>Recent content in tomcat Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/tomcat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with tomcat</title>
      <link>https://www.wikiod.com/tomcat/getting-started-with-tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/getting-started-with-tomcat/</guid>
      <description>Installation or Setup # Detailed instructions on getting tomcat set up or installed.
Installing Tomcat as a service on Ubuntu # This example demonstrates how to install Tomcat as a service on Ubuntu using the *.tar.gz releases of both Tomcat as well as Java.
1. Install the Java Runtime Environment (JRE) # Download the desired jre .tar.gz release Extract to /opt/ This will create a directory /opt/jre1.Xxxx/ Create a symbolic link to the java home directory: cd /opt; sudo ln -s jre1.</description>
    </item>
    
    <item>
      <title>Configuring a JNDI datasource</title>
      <link>https://www.wikiod.com/tomcat/configuring-a-jndi-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/configuring-a-jndi-datasource/</guid>
      <description>Parameters # Attribute Details auth (String) Specify whether the web Application code signs on to the corresponding resource manager programmatically, or whether the Container will sign on to the resource manager on behalf of the application. The value of this attribute must be Application or Container. This attribute is required if the web application will use a resource-ref element in the web application deployment descriptor, but is optional if the application uses a resource-env-ref instead.</description>
    </item>
    
    <item>
      <title>Tomcat Virtual Hosts</title>
      <link>https://www.wikiod.com/tomcat/tomcat-virtual-hosts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/tomcat-virtual-hosts/</guid>
      <description>Host Manager is a web application inside of Tomcat that creates/removes Virtual Hosts within Tomcat.
A Virtual Host allows you to define multiple hostnames on a single server, so you can use the same server to handles requests to, for example, ren.myserver.com and stimpy.myserver.com.
Unfortunately documentation on the GUI side of the Host Manager doesn&amp;rsquo;t appear to exist, but documentation on configuring the virtual hosts manually in context.xml is here:</description>
    </item>
    
    <item>
      <title>Https configuration</title>
      <link>https://www.wikiod.com/tomcat/https-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/https-configuration/</guid>
      <description>SSL/TLS Configuration # HTTPS
HTTPS (also called HTTP over TLS,[1][2] HTTP over SSL,[3] and HTTP Secure[4][5]) is a protocol for secure communication over a computer network which is widely used on the Internet. HTTPS consists of communication over Hypertext Transfer Protocol (HTTP) within a connection encrypted by Transport Layer Security or its predecessor, Secure Sockets Layer. The main motivation for HTTPS is authentication of the visited website and protection of the privacy and integrity of the exchanged data.</description>
    </item>
    
    <item>
      <title>Configuring a JDBC Datasource</title>
      <link>https://www.wikiod.com/tomcat/configuring-a-jdbc-datasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/configuring-a-jdbc-datasource/</guid>
      <description>In order to utilize a JDBC datasource, we must first set up a JNDI reference in Tomcat. After the JNDI reference is made, JDBC datasources can be used within our Tomcat server and applications using shared or independent references (Great for dev/staging/prod setup, or removing connection strings/credentials from committed code).
Utilizing JNDI and JDBC also affords you to use ORMs like Hibernate or platforms like JPA to define &amp;ldquo;persistence units&amp;rdquo; for object and table mapp</description>
    </item>
    
    <item>
      <title>Embedding into an application</title>
      <link>https://www.wikiod.com/tomcat/embedding-into-an-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/embedding-into-an-application/</guid>
      <description>Embed tomcat using maven # &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.maven&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat7-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;tomcat-run&amp;lt;/id&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;exec-war-only&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;!--This phase is for creating jar file.You can customize configuration --&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;path&amp;gt;/WebAppName&amp;lt;/path&amp;gt; &amp;lt;enableNaming&amp;gt;false&amp;lt;/enableNaming&amp;gt; &amp;lt;finalName&amp;gt;WebAppName.jar&amp;lt;/finalName&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;!--This configuration is for running application in your ide--&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;port&amp;gt;8020&amp;lt;/port&amp;gt; &amp;lt;path&amp;gt;/webappName&amp;lt;/path&amp;gt; &amp;lt;!--These properties are optional--&amp;gt; &amp;lt;systemProperties&amp;gt; &amp;lt;CATALINA_OPTS&amp;gt;-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=512m -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:CMSIncrementalDutyCycleMin=0 -XX:-TraceClassUnloading &amp;lt;/CATALINA_OPTS&amp;gt; &amp;lt;/systemProperties&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; You can run the above tomcat in your ide using goal tomcat:run.</description>
    </item>
    
    <item>
      <title>Tomcat(x) Directories Structures</title>
      <link>https://www.wikiod.com/tomcat/tomcatx-directories-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/tomcatx-directories-structures/</guid>
      <description>Directory Structure in Ubuntu (Linux) # After installing Tomcat with apt-get on Ubuntu xx.xx, Tomcat creates and uses these directories:
$cd /etc/tomcat6/
├── Catalina │ └── localhost │ ├── ROOT.xml │ └── solr.xml -&amp;gt; ../../../solr/solr-tomcat.xml ├── catalina.properties ├── context.xml ├── logging.properties ├── policy.d │ ├── 01system.policy │ ├── 02debian.policy │ ├── 03catalina.policy │ ├── 04webapps.policy │ ├── 05solr.policy -&amp;gt; /etc/solr/tomcat.policy │ └── 50local.policy ├── server.xml ├── tomcat-users.xml └── web.xml $cd /usr/share/tomcat6</description>
    </item>
    
    <item>
      <title>CAC enabling Tomcat for Development Purposes</title>
      <link>https://www.wikiod.com/tomcat/cac-enabling-tomcat-for-development-purposes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tomcat/cac-enabling-tomcat-for-development-purposes/</guid>
      <description>Creating the Keystores and configuring Tomcat # This writeup walks though steps to configure Tomcat to request CAC certificates from the client. It is focused on setting up a development environment, so some features that should be considered for production are not here. (For example it shows using a self-signed certificate for https and it doesn’t consider checking for revoked certificates.)
Create Keystore for enabling HTTPS connections
The first step is to set up SSL on tomcat.</description>
    </item>
    
  </channel>
</rss>

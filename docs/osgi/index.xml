<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osgi Tutorial on </title>
    <link>https://www.wikiod.com/docs/osgi/</link>
    <description>Recent content in osgi Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/osgi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with osgi</title>
      <link>https://www.wikiod.com/osgi/getting-started-with-osgi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/osgi/getting-started-with-osgi/</guid>
      <description>Downloading and Using Equinox # Download and extract the OSGi starter kit for your platform from Equinox download page for Neon release.
Start the framework from the rt/plugins folder with the following command (or your platform&amp;rsquo;s rt executable from the rt folder):
rt/plugins$ java -jar org.eclipse.equinox.launcher_1.3.200.v20160318-1642.jar -console osgi&amp;gt; In the OSGi console prompt, you can manage the bundles, for example:
osgi&amp;gt;ss &amp;quot;Framework is launched.&amp;quot; id State Bundle 0 ACTIVE org.eclipse.osgi_3.11.0.v20160603-1336 Fragments=1 1 RESOLVED org.</description>
    </item>
    
    <item>
      <title>Using Pax Exam for integration testing OSGi applications</title>
      <link>https://www.wikiod.com/osgi/using-pax-exam-for-integration-testing-osgi-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/osgi/using-pax-exam-for-integration-testing-osgi-applications/</guid>
      <description>Pax Exam allows testing of bundles within an OSGi container (e.g. AEM, Apache Karaf). Pax Exam is usually used in conjunction with JUnit.
Getting Started # Here is an example of a test using Pax Exam.
package com.example.project.test; import static org.junit.Assert.*; import static org.ops4j.pax.exam.CoreOptions.*; import javax.inject.Inject; import org.junit.Test; import org.junit.runner.RunWith; import org.ops4j.pax.exam.Configuration; import org.ops4j.pax.exam.Option; import org.ops4j.pax.exam.junit.PaxExam; import org.ops4j.pax.exam.regression.pde.HelloService; import org.ops4j.pax.exam.spi.reactors.*; @RunWith(PaxExam.class) @ExamReactorStrategy(PerMethod.class) public class SampleTest { @Inject private HelloService helloService; @Configuration public Option[] config() { return options( mavenBundle(&amp;quot;com.</description>
    </item>
    
  </channel>
</rss>

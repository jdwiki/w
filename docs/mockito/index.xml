<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mockito Tutorial on </title>
    <link>https://www.wikiod.com/docs/mockito/</link>
    <description>Recent content in mockito Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/mockito/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with mockito</title>
      <link>https://www.wikiod.com/mockito/getting-started-with-mockito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/getting-started-with-mockito/</guid>
      <description>Add behaviour to mocked object # Mockito.when(mock.returnSomething()).thenReturn(&amp;quot;my val&amp;quot;); mock.returnSomething(); // returns &amp;quot;my val&amp;quot; mock.returnSomething(); // returns &amp;quot;my val&amp;quot; again mock.returnSomething(); // returns &amp;quot;my val&amp;quot; again and again and again... If you want different value on second call you can add wanted return argument to thenReturn method:
Mockito.when(mock.returnSomething()).thenReturn(&amp;quot;my val&amp;quot;, &amp;quot;other val&amp;quot;); mock.returnSomething(); // returns &amp;quot;my val&amp;quot; mock.returnSomething(); // returns &amp;quot;other val&amp;quot; mock.returnSomething(); // returns &amp;quot;other val&amp;quot; again If you will call method without adding behaviour to mock it will return null:</description>
    </item>
    
    <item>
      <title>Mockito Best Practices</title>
      <link>https://www.wikiod.com/mockito/mockito-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/mockito-best-practices/</guid>
      <description>BDDMockito style # Behavior Driven Development (BDD) testing style revolves around &amp;ldquo;given&amp;rdquo;, &amp;ldquo;when&amp;rdquo; and &amp;ldquo;then&amp;rdquo; stages in tests. However, classical Mockito uses &amp;ldquo;when&amp;rdquo; word for &amp;ldquo;given&amp;rdquo; phase, and does not include other natural language constructions that can encompass BDD. Thus, BDDMockito aliases were introduced in version 1.8.0 in order to facilitate behavior driven tests.
The most common situation is to stub returns of a method. In the following example, getStudent(String) method of the mocked StudentRepository will return new Student(givenName, givenScore) if invoked with an argument that is equal to givenName.</description>
    </item>
    
    <item>
      <title>Verify method calls</title>
      <link>https://www.wikiod.com/mockito/verify-method-calls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/verify-method-calls/</guid>
      <description>Verify call arguments using ArgumentCaptor # ArgumentCaptor will to receive the actual invocation arguments that has been passed to method.
ArgumentCaptor&amp;lt;Foo&amp;gt; captor = ArgumentCaptor.forClass(Foo.class); verify(mockObj).doSomethind(captor.capture()); Foo invocationArg = captor.getValue(); //do any assertions on invocationArg For cases of multiple invocations of mocked method to receive all invocation arguments
List&amp;lt;Foo&amp;gt; invocationArgs = captor.getAllValues(); The same approach is used for capturing varargs.
Also there is possibility to create ArgumentCaptor using @Captor annotation:
@Captor private ArgumentCaptor&amp;lt;Foo&amp;gt; captor; Simple method call verification # One can verify whether a method was called on a mock by using Mockito.</description>
    </item>
    
    <item>
      <title>Mock</title>
      <link>https://www.wikiod.com/mockito/mock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/mock/</guid>
      <description>Mocking a class using annotations # &amp;ldquo;Spy&amp;rdquo; for partial mocking # Set private fields in mocked objects # In your class that is under test, you may have some private fields that are not accessible even through constructor. In such cases you can use reflection to set such properties. This is a snippet from such JUnit test.
@InjectMocks private GreetingsService greetingsService = new GreetingsService(); // mocking this class @Before public void setUp() { MockitoAnnotations.</description>
    </item>
    
    <item>
      <title>Mocking consecutive calls to a void return method</title>
      <link>https://www.wikiod.com/mockito/mocking-consecutive-calls-to-a-void-return-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/mocking-consecutive-calls-to-a-void-return-method/</guid>
      <description>The Mockito docs have an excellent example of how to provide a sequence of answers for multiple calls to a mock. However, they don&amp;rsquo;t cover how to do that for a method that returns void, other than noting that stubbing void methods require using the do family of methods.
Remember, for non-void methods, the when(mock.method()).thenThrow().thenReturn() version (see docs) is preferred because it is argument type-safe and more readable.
Faking a transient error # Imagine you&amp;rsquo;re testing code that makes a call to this interface, and you want to make sure your retry code is working.</description>
    </item>
    
    <item>
      <title>Mock final classes and methods</title>
      <link>https://www.wikiod.com/mockito/mock-final-classes-and-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/mockito/mock-final-classes-and-methods/</guid>
      <description>Since Mockito 2.x we have the ability to mock final classes and methods.
How to make it # Steps:
Add dependency to Mockito version 2.x in your gradle (at the time of writing this text the latest version is 2.7.22):
testCompile &amp;quot;org.mockito:mockito-core:$versions.mockito&amp;quot; Create a file in test resources with name org.mockito.plugins.MockMaker: Add next line in this file:
mock-maker-inline </description>
    </item>
    
  </channel>
</rss>

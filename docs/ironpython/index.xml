<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ironpython Tutorial on </title>
    <link>https://www.wikiod.com/docs/ironpython/</link>
    <description>Recent content in ironpython Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ironpython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with ironpython</title>
      <link>https://www.wikiod.com/ironpython/getting-started-with-ironpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ironpython/getting-started-with-ironpython/</guid>
      <description>Installation or Setup # Detailed instructions on getting ironpython set up or installed.
Install IronPython # Just download the newest version from http://ironpython.net and follow the instructions from the msi package. This package will setup everything you need to start working with ironpython.
Using the IronPython command line # To use the IronPython command line, open ipy.exe or ipy64.exe. Both files are located in the path that was selected during installation.</description>
    </item>
    
    <item>
      <title>Difference between Python and IronPython</title>
      <link>https://www.wikiod.com/ironpython/difference-between-python-and-ironpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ironpython/difference-between-python-and-ironpython/</guid>
      <description>Using .Net assemblies from Python code # With IronPython you can access any .net assembly which is compiled using the same or a lower version than the IronPython core.
Example: Importing a a .net assembly and class
from System import Math
Example: Using an imported class:
from System import Math print Math.Abs(-123) You can also load additional assemblies by using the builtin clr module.
import clr clr.AddReference(&#39;Sample&#39;) # Sample.dll inside of the working directory.</description>
    </item>
    
    <item>
      <title>Creating Windows Forms with IronPython</title>
      <link>https://www.wikiod.com/ironpython/creating-windows-forms-with-ironpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ironpython/creating-windows-forms-with-ironpython/</guid>
      <description>Hello Word example using Windows Forms # First, references will be added to the CLR assemblies that will be used.
import clr clr.AddReference(&#39;System.Windows.Forms&#39;) Next the names we will use are imported.
from System.Windows.Forms import Application, Form A class will be created for the Hello World form using Form as its subclass.
class HelloWorldForm(System.Windows.Forms.Form): def __init__(self): self.Text = &#39;Hello World&#39; self.Name = &#39;Hello World&#39; The text attribute of the form sets the title bar&amp;rsquo;s text.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://www.wikiod.com/ironpython/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ironpython/overview/</guid>
      <description>What is IronPython? # IronPython is an open-source implementation of the Python programming language which is tightly integrated with the .NET Framework. IronPython can use the .NET Framework and Python libraries, and other .NET languages can use Python code just as easily.</description>
    </item>
    
  </channel>
</rss>

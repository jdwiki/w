<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ionic2 Tutorial on </title>
    <link>https://www.wikiod.com/docs/ionic2/</link>
    <description>Recent content in ionic2 Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/ionic2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with ionic2</title>
      <link>https://www.wikiod.com/ionic2/getting-started-with-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/getting-started-with-ionic2/</guid>
      <description>Installation or Setup # Since Ionic 2 is getting better and better every day, please always check the official documentation to keep track of the latest changes and improvements.
Prerequisites: You will need NodeJS in order to build Ionic 2 projects. You can download and install node here and learn more about npm and the packages Ionic 2 uses here. # 1. Installing Ionic 2 # Like Ionic 1, you can use the Ionic CLI or GUI to quickly build and test apps right in the browser.</description>
    </item>
    
    <item>
      <title>Ionic2 CSS components</title>
      <link>https://www.wikiod.com/ionic2/ionic2-css-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/ionic2-css-components/</guid>
      <description>Grid # Ionicâ€™s grid system is based on flexbox, a CSS feature supported by all devices that Ionic supports. The grid is composed of three units-grid, rows and columns. Columns will expand to fill their row, and will resize to fit additional columns.
Class Width width-10 10% width-20 20% width-25 25% width-33 33.3333% width-50 50% width-67 66.6666% width-75 75% width-80 80% width-90 90% Example.
&amp;lt;ion-grid&amp;gt; &amp;lt;ion-row&amp;gt; &amp;lt;ion-col width-10&amp;gt;This column will take 10% of space&amp;lt;/ion-col&amp;gt; &amp;lt;/ion-row&amp;gt; &amp;lt;/ion-grid&amp;gt; Cards # Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for apps.</description>
    </item>
    
    <item>
      <title>Using Services</title>
      <link>https://www.wikiod.com/ionic2/using-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/using-services/</guid>
      <description>One very important thing about using shared services, is that they must be included in the providers array of the top-most component where they must be shared.
Why is that? Well, Let&amp;rsquo;s suppose that we include the MyService reference in the providers array from each Component. Something like:
@Component({ templateUrl:&amp;quot;page1.html&amp;quot;, providers: [MyService] }) And
@Component({ templateUrl:&amp;quot;page2.html&amp;quot;, providers: [MyService] }) That way a new instance of the service will be created for each component so the instance where one page will save the data, will be different from the instance used to get the data.</description>
    </item>
    
    <item>
      <title>Using Tabs</title>
      <link>https://www.wikiod.com/ionic2/using-tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/using-tabs/</guid>
      <description>Always remember to check out Ionic 2 Tab docs to be aware of the latest changes and updates.
Change selected tab programatically from child Page # You can take a look at the full code in this working Plunker.
In this example I use a shared service to handle the communication between the pages inside the tab (child pages) and the tab container (the component that holds the tabs). Even though you probably could do it with Events I like the shared service approach because is easier to understand and also to mantain when the application starts growing.</description>
    </item>
    
    <item>
      <title>Modals</title>
      <link>https://www.wikiod.com/ionic2/modals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/modals/</guid>
      <description>Modal with parameters on create: # Passing parameters to a modal is similar to how we pass values to a NavController. To do so, we are altering our list in home.html to open a modal when clicking a list item and passing the required parameters as a second argument to the create method.
Home.html
&amp;lt;ion-list&amp;gt; &amp;lt;ion-item *ngFor=&amp;quot;let datum of data&amp;quot; (click)=&amp;quot;openModalwithNavParams(datum)&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{datum.name}}&amp;lt;/h1&amp;gt; &amp;lt;/ion-item&amp;gt; &amp;lt;/ion-list&amp;gt; Home.ts
import {EditProfilePage} from &#39;../edit-profile/edit-profile&#39;; openModalwithNavParams(data){ let modalWithNavParams = this.</description>
    </item>
    
    <item>
      <title>Social Login with Angularfire2Firebase</title>
      <link>https://www.wikiod.com/ionic2/social-login-with-angularfire2firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/social-login-with-angularfire2firebase/</guid>
      <description>Native Facebook Login with Angularfire2/Firebase # app.ts
import {Component} from &#39;@angular/core&#39;; import {Platform, ionicBootstrap} from &#39;ionic-angular&#39;; import {StatusBar} from &#39;ionic-native&#39;; import {LoginPage} from &#39;./pages/login/login&#39;; import {FIREBASE_PROVIDERS, defaultFirebase, AuthMethods, AuthProviders, firebaseAuthConfig} from &#39;angularfire2&#39;; @Component({ template: &#39;&amp;lt;ion-nav [root]=&amp;quot;rootPage&amp;quot;&amp;gt;&amp;lt;/ion-nav&amp;gt;&#39; }) export class MyApp { private rootPage: any; constructor(private platform: Platform) { this.rootPage = LoginPage; platform.ready().then(() =&amp;gt; { // Okay, so the platform is ready and our plugins are available. // Here you can do any higher level native things you might need.</description>
    </item>
    
    <item>
      <title>Push notification sent &amp; receive</title>
      <link>https://www.wikiod.com/ionic2/push-notification-sent--receive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/push-notification-sent--receive/</guid>
      <description>The SenderID that is present in the initialization example is a gcm sender id that is given to you by google. It should also be present when you install the plugin
ionic plugin add phonegap-plugin-push --variable SENDER_ID=&amp;quot;XXXXXXX&amp;quot; If you wish to add additional data to your push notifications look in to this link explaining how to add more typings https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md
Initialization # The push notification plugin requires an init an initialization which tells the plugin to start running using the sender id provided.</description>
    </item>
    
    <item>
      <title>Geolocation</title>
      <link>https://www.wikiod.com/ionic2/geolocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/geolocation/</guid>
      <description>Simple usage # In your package.json make sure to include the dependencies:
{ ... &amp;quot;dependencies&amp;quot;: { ... &amp;quot;ionic-native&amp;quot;: &amp;quot;^1.3.10&amp;quot;, ... }, ... } To use geolocation:
// custom-component.ts import {Geolocation} from &#39;ionic-native&#39;; import template from &#39;./custom-component.html&#39;; @Component({ selector: &#39;custom-component&#39;, template: template }) export class CustomComponent { constructor() { // get the geolocation through a promise Geolocation.getCurrentPosition().then((position:Geoposition)=&amp;gt; { console.log( position.coords.latitude, position.coords.longitude); }); } } Watching the position # For a more real time solution you can use watchPosition function in Geolocation that notifies whenever an error or a position change occurs.</description>
    </item>
    
    <item>
      <title>Workaround for &#39;show-delete&#39; in &lt;ion-list&gt; deprecation</title>
      <link>https://www.wikiod.com/ionic2/workaround-for-show-delete-in-ion-list-deprecation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/workaround-for-show-delete-in-ion-list-deprecation/</guid>
      <description>Solution # I am developing a mobile app using ionic 2 with Angular 2.
I have an ion-list filled ion-items. I want those ion-item to have the ability to be deleted if needed as presented here on the ionic website.
However, a lot have changed in ionic 2 since the first version and the above style of one button opening all the ion-item at one is not possible anymore since the show-delete and show-reorder are no longer supported.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://www.wikiod.com/ionic2/unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/ionic2/unit-testing/</guid>
      <description>Unit Testing in general gives additional safety to a product to prevent issues when modifying/adding features. A safety net that says &amp;ldquo;EVERYTHING STILL WORKS&amp;rdquo;. Unit Tests do not replace in any way the actual user tests that a proper QA can do.
In this document we will base the examples on this repository: https://github.com/driftyco/ionic-unit-testing-example
Unit Tests with Karma/Jasmine # Unit testing in ionic is the same as in any angular app.</description>
    </item>
    
  </channel>
</rss>

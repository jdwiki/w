<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode Tutorial on </title>
    <link>https://www.wikiod.com/docs/xcode/</link>
    <description>Recent content in Xcode Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Xcode</title>
      <link>https://www.wikiod.com/xcode/getting-started-with-xcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/getting-started-with-xcode/</guid>
      <description>Use multiple versions of Xcode # You can have multiple versions of Xcode installed at the same time (including beta versions). Simply rename the application in Finder to avoid conflicts.
Note: Installing Xcode from the App Store will tend to overwrite an existing version on your machine. You can also install Xcode from a direct download to get more control over which versions you have.
Each copy of Xcode includes command line tools (clang, xcodebuild, etc.</description>
    </item>
    
    <item>
      <title>Command Line Tools</title>
      <link>https://www.wikiod.com/xcode/command-line-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/command-line-tools/</guid>
      <description>List available targets, schemes and build configurations # To list all available schemes for the project in your current directory
xcodebuild -list Optionally you can pass a path to a project or workspace file
xcodebuild -list -workspace ./MyApp.xcworkspace xcodebuild -list -project ./MyApp.xcodeproj Example output
Information about project &amp;quot;Themoji&amp;quot;: Targets: Themoji ThemojiUITests Unit Build Configurations: Debug Release If no build configuration is specified and -scheme is not passed then &amp;quot;Release&amp;quot; is used.</description>
    </item>
    
    <item>
      <title>Projects &amp; Workspaces</title>
      <link>https://www.wikiod.com/xcode/projects--workspaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/projects--workspaces/</guid>
      <description>Build, Run, Profile, Test, and Analyze your project # Click the Run button in the toolbar (or press ⌘R) to build &amp;amp; run your project. Click Stop (or press ⌘.) to stop execution.
Click &amp;amp; hold to see the other actions, Test (⌘U), Profile (⌘I), and Analyze (⇧⌘B). Hold down modifier keys ⌥ option, ⇧ shift, and ⌃ control for more variants.
The same actions are available in the Product menu:</description>
    </item>
    
    <item>
      <title>Creating Custom Controls in Interface Builder with @IBDesignable</title>
      <link>https://www.wikiod.com/xcode/creating-custom-controls-in-interface-builder-with-ibdesignable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/creating-custom-controls-in-interface-builder-with-ibdesignable/</guid>
      <description>It became much easier to create custom controls in Interface Builder with the introduction of the @IBDesignable and @IBInspectable directives in Swift. Developers can now build rich, complex, fully animated controls using just a few extra lines of code. I&amp;rsquo;m surprised by how many developers have yet to fully embrace this feature, and I frequently find that adding just a few of lines of code to existing classes can make them so much easier to work with.</description>
    </item>
    
    <item>
      <title>Xcode Tips</title>
      <link>https://www.wikiod.com/xcode/xcode-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/xcode-tips/</guid>
      <description>Reuse code snippets in Xcode # You can save your code snippets for use later simply by drag and drop. For eg: if you have an NSLog statement that used for so many places somewhere else in the project, then you can save the NSLog statements to code snippets library.
Drag the NSLog statement to code snippet library.
Now you can simply reuse the code snippet anywhere else on project. Also you can customise the code snippet and can add placeholder texts by give statements bw &amp;lt;# and #&amp;gt;.</description>
    </item>
    
    <item>
      <title>Certificates, Provisioning Profiles, &amp; Code Signing</title>
      <link>https://www.wikiod.com/xcode/certificates-provisioning-profiles--code-signing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/certificates-provisioning-profiles--code-signing/</guid>
      <description>Choose the right code signing approach # If you are just starting a new project, it&amp;rsquo;s important to think about how you want to handle code signing.
If you are new to code signing, check out the WWDC session that describes the fundamentals of code signing in Xcode.
To properly code-sign your app, you have to have the following resources on your local machine:
The private key (.p12 file) The certificate (.</description>
    </item>
    
    <item>
      <title>Cross-Platform Development</title>
      <link>https://www.wikiod.com/xcode/cross-platform-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/cross-platform-development/</guid>
      <description>TargetConditionals # The system header TargetConditionals.h defines several macros which you can use from C and Objective-C to determine which platform you&amp;rsquo;re using.
#import &amp;lt;TargetConditionals.h&amp;gt; // imported automatically with Foundation - (void)doSomethingPlatformSpecific { #if TARGET_OS_IOS // code that is compiled for iPhone / iPhone Simulator #elif TARGET_OS_MAC &amp;amp;&amp;amp; !TARGET_OS_IPHONE // code that is compiled for OS X only #else // code that is compiled for other platforms #endif } The values of the macros are:</description>
    </item>
    
    <item>
      <title>Customizing Xcode IDE</title>
      <link>https://www.wikiod.com/xcode/customizing-xcode-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/customizing-xcode-ide/</guid>
      <description>This is collection of different tips and tricks, to customize and improve your Xcode IDE
Open Terminal in current Xcode project folder # Xcode have ability to run any script with hotkey.
Here is example how to assign hotkey ⌘+⌥+⌃+⇧+T to open Terminal app in current project folder.
Create bash script and save it in some folder
#!/bin/bash
Project Name: $XcodeProject # Project Dir: $XcodeProjectPath # Workspace Dir: $XcodeWorkspacePath # open -a Terminal &amp;ldquo;$(dirname $XcodeProjectPath)&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Playgrounds</title>
      <link>https://www.wikiod.com/xcode/playgrounds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/playgrounds/</guid>
      <description>Getting Started with Playground # Create a new playground file:
First option: From Xcode welcome screen, select the first option (Get started with a playground). Second option: From menu select File → New → Playground (⌥⇧⌘N). Name your playground and select the platform (iOS/macOS/tvOS), then click Next.
On the next screen, choose where you want to save your playground, then click Create. Latest Value, Value History and Graph # Using Playground it is easy to see that happens inside loops or objects while the change is happening.</description>
    </item>
    
    <item>
      <title>Xcode 8 features</title>
      <link>https://www.wikiod.com/xcode/xcode-8-features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xcode/xcode-8-features/</guid>
      <description>This only works with projects using Swift 3+
Color and image literals # Xcode 8 will automatically recognize any images you’ve got in an Asset Catalog and offer them up as a suggestion inside of a UIImage initializer.
So you could basically declare a new variable and then add an asset name that you have added to your asset catalog. For example let img = dog. img does now contain the image of dog that´s in the asset catalog.</description>
    </item>
    
  </channel>
</rss>

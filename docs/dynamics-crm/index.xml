<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamics-crm Tutorial on </title>
    <link>https://www.wikiod.com/docs/dynamics-crm/</link>
    <description>Recent content in dynamics-crm Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/dynamics-crm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with dynamics-crm</title>
      <link>https://www.wikiod.com/dynamics-crm/getting-started-with-dynamics-crm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/getting-started-with-dynamics-crm/</guid>
      <description>Download Microsoft CRM SDK # The latest SDK can be downloaded here
The latest SDK libraries are also available on NuGet under Microsoft&amp;rsquo;s official crmsdk account</description>
    </item>
    
    <item>
      <title>Using Web API with jQuery</title>
      <link>https://www.wikiod.com/dynamics-crm/using-web-api-with-jquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/using-web-api-with-jquery/</guid>
      <description>Using expand to get lookup properties # If you fetch a single record and when that record has a lookup, you can also fetch values of the lookup value using the expand option. This reduces the number of calls you need to make to the API.
The sample gets all accounts and the last name of the primary contact:
$.ajax({ url: Xrm.Page.context.getClientUrl() + &#39;/api/data/v8.0/accounts?$select=name,primarycontactid&amp;amp;$expand=primarycontactid($select=lastname)&#39;, headers: { &#39;Accept&#39;: &#39;Application/json&#39; } }).done(function (result) { $.</description>
    </item>
    
    <item>
      <title>Web API posts JSON examples</title>
      <link>https://www.wikiod.com/dynamics-crm/web-api-posts-json-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/web-api-posts-json-examples/</guid>
      <description>Be sure to add the following header to the post request. Otherwise the request will fail:
Content-Type: application/json Creating a note / annotation with attachment # url: /api/data/v8.0/annotations
json:
{ &amp;quot;isdocument&amp;quot;: true, &amp;quot;mimetype&amp;quot;: &amp;quot;text/plain&amp;quot;, &amp;quot;documentbody&amp;quot;: &amp;quot;dGVzdA==&amp;quot;, &amp;quot;objectid_account@odata.bind&amp;quot; : &amp;quot;/accounts(c6da77b6-d53e-e611-80b9-0050568a6c2d)&amp;quot;, &amp;quot;filename&amp;quot;: &amp;quot;test.txt&amp;quot; } As the objectid can be almost every entity in CRM you need to define the entity with _entity name after objectid.
Creating an account # url: /api/data/v8.0/accounts
json:</description>
    </item>
    
    <item>
      <title>CRM 2013 How to hide unwanted Activity Types from the sub grid</title>
      <link>https://www.wikiod.com/dynamics-crm/crm-2013-how-to-hide-unwanted-activity-types-from-the-sub-grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/crm-2013-how-to-hide-unwanted-activity-types-from-the-sub-grid/</guid>
      <description>I recently had to modify the Activity sub-grid to remove certain activity types from the add activity menu.
Note, this may not be a supported method on how to do this, but there is no documented supported way to so it, so I had to come up with a solution &amp;amp; this worked, in CRM 2013 anyway.
Add this function to a javascript web resource # var _activitiesGridName = &#39;&#39;; function SetupActivityGridOnload(gridName) { var btnsToHide = [ &#39;AddserviceappointmentButton&#39;, &#39;AddcampaignresponseButton&#39;, &#39;AddappointmentButton&#39; ]; _activitiesGridName = gridName; setTimeout(function () { //setting timeout beacuse subgid take some time to load after the form is loaded if (Xrm.</description>
    </item>
    
    <item>
      <title>Bug - TurboForms Xrm.Page.data.save().then() Errors With ErrorCode Null, Message Undefined</title>
      <link>https://www.wikiod.com/dynamics-crm/bug---turboforms-xrmpagedatasavethen-errors-with-errorcode-null-message-undefined/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/bug---turboforms-xrmpagedatasavethen-errors-with-errorcode-null-message-undefined/</guid>
      <description>onChange() Calls save(), From Field That Is Invalid # Steps to Reproduce (Turbo Forms, CRM 2015.1, &amp;ndash;&amp;gt; CRM 2016.2) # Form (with or without other required fields) has one field that is empty and required. Lose focus on the empty field (&amp;ldquo;title&amp;rdquo; in this example), this triggers the Field Notification Icon: Wire up onChange Handler for empty field to call save: function forceSaveOnChangeOfTitle(){ Xrm.Page.data.save().then( function () {}, function (error, message) {console.</description>
    </item>
    
    <item>
      <title>Call Actions using Web API</title>
      <link>https://www.wikiod.com/dynamics-crm/call-actions-using-web-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/call-actions-using-web-api/</guid>
      <description>Examples how to call bound and unbound actions.
Note that in a bound function the full function name includes the namespace Microsoft.Dynamics.CRM. Functions that aren&amp;rsquo;t bound must not use the full name.
Call actions using Web API # function exampleCloseIncident(id, status){ var parameters = {}; var incidentresolution = {}; incidentresolution[&amp;quot;incidentid@odata.bind&amp;quot;] = &amp;quot;/incidents(&amp;quot; + id + &amp;quot;)&amp;quot;; incidentresolution[&amp;quot;@odata.type&amp;quot;] = &amp;quot;Microsoft.Dynamics.CRM.incidentresolution&amp;quot;; parameters.IncidentResolution = incidentresolution; parameters.Status = status; callUnboundAction(&amp;quot;CloseIncident&amp;quot;, parameters, true, function(result){ Xrm.Utility.alertDialog(&amp;quot;Incident closed&amp;quot;); }); } function exampleQualifyLead(id){ var payload = { &amp;quot;CreateAccount&amp;quot;: createAccount, &amp;quot;CreateContact&amp;quot;: createContact, &amp;quot;CreateOpportunity&amp;quot;: false, &amp;quot;Status&amp;quot;:3 }; callBoundAction(&amp;quot;leads&amp;quot;, id, &amp;quot;Microsoft.</description>
    </item>
    
    <item>
      <title>What Not to do when upgrading your Microsoft Dynamics CRM 2016</title>
      <link>https://www.wikiod.com/dynamics-crm/what-not-to-do-when-upgrading-your-microsoft-dynamics-crm-2016/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/dynamics-crm/what-not-to-do-when-upgrading-your-microsoft-dynamics-crm-2016/</guid>
      <description>Microsoft Dynamics CRM has evolved drastically over the past few years. There have been many updates and versions released, with a range of new features and improvements at each stage along the path. During the upgrade of a Dynamics CRM environment, there are a few points to bear in mind to ensure a hassle- free upgrade process.
Letâ€™s look at some mandatory items to check off before diving into a full-scale upgrade process # DB backup</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xmpp Tutorial on </title>
    <link>https://www.wikiod.com/docs/xmpp/</link>
    <description>Recent content in xmpp Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/xmpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with xmpp</title>
      <link>https://www.wikiod.com/xmpp/getting-started-with-xmpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xmpp/getting-started-with-xmpp/</guid>
      <description>Connecting and sending a message # SleekXMPP (Python) # import sleekxmpp client = sleekxmpp.Client(&amp;quot;address@example.net&amp;quot;, &amp;quot;password&amp;quot;) client.connect() client.process(blocking=False) client.send_message(mto=&amp;quot;remote@example.net&amp;quot;, mbody=self.msg) Smack (Java / Android) # XMPPTCPConnection connection = new XMPPTCPConnection(&amp;quot;user&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;example.org&amp;quot;) connection.connect().login(); Message message = new Message(&amp;quot;otheruser@example.net&amp;quot;, &amp;quot;Hi, how are you?&amp;quot;); connection.sendStanza(message); connection.disconnect(); Creating a Chat Session and sending a message # Smack (Java)
Using Smack 4.1 It is recommended to include Smack as Maven dependency in your project (e.g. by using gradle or Maven).</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://www.wikiod.com/xmpp/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xmpp/architecture/</guid>
      <description>XMPP allows for the full-duplex exchange of structured data and concurrent processing of requests between globally addressable clients and servers on the network. Unlike HTTP and the &amp;ldquo;Representational State Transfer&amp;rdquo; (REST) architecture widely deployed on the web, XMPP connections are stateful and concurrent, and an unlimited number of transactions may occur in the context of a single session. This architecture is sometimes refered too as &amp;ldquo;Availability for Concurrent Transactions&amp;rdquo; (ACT).</description>
    </item>
    
    <item>
      <title>Stream Negotiation</title>
      <link>https://www.wikiod.com/xmpp/stream-negotiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xmpp/stream-negotiation/</guid>
      <description>XMPP connections comprise two XML streams: one for ingress and one for egress. These streams are generally sent over the same TCP connection (although sometimes multiple connections may be used, especially for server-to-server connections) and share certain features for which negotiation is required (eg. authentication with SASL).
Closing a stream # A stream is closed by sending a closing &amp;lt;/stream&amp;gt; tag. After the closing stream tag is sent, no more data should be sent on the stream (even in response to data received from the other party).</description>
    </item>
    
    <item>
      <title>XMPP Addresses aka. JIDs (Jabber Identifiers)</title>
      <link>https://www.wikiod.com/xmpp/xmpp-addresses-aka-jids-jabber-identifiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/xmpp/xmpp-addresses-aka-jids-jabber-identifiers/</guid>
      <description>Syntax # [ localpart &amp;ldquo;@&amp;rdquo; ] domainpart [ &amp;ldquo;/&amp;rdquo; resourcepart ] Parameters # Part Common Usage Localpart Identifies an XMPP entity (optional) Domainpart Identifies the XMPP service Resourcepart Identifies a session of an XMPP entity (optional) XMPP addresses, more commonly known as JIDs (Jabber Identifiers) are defined in RFC 7622 and act as addresses on the XMPP network. They look like an email address, but sometimes have an optional &amp;ldquo;resourcepart&amp;rdquo; at the end that identifies a particular client logged in as the account represented by the rest of the address (since XMPP may have multiple clients connected per account).</description>
    </item>
    
  </channel>
</rss>

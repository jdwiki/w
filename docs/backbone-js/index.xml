<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>backbone.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/backbone-js/</link>
    <description>Recent content in backbone.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/backbone-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with backbone.js</title>
      <link>https://www.wikiod.com/backbone-js/getting-started-with-backbonejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/getting-started-with-backbonejs/</guid>
      <description>Basic Setup # Backbone requires Underscore and (optionally) jQuery - for DOM manipulation (using Backbone.View) and RESTful persistence.
The quickest way to get up and running with Backbone is to create an index.html file with simple script tags in the HTML &amp;lt;head&amp;gt;:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Backbone is now available for use in the page.
Example of Using Backbone (Primarily Backbone.Model) # Backbone.</description>
    </item>
    
    <item>
      <title>View</title>
      <link>https://www.wikiod.com/backbone-js/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/view/</guid>
      <description>Syntax # Create: var View = Backbone.View.extend( { /* properties */ } ); Construct: var myView = new View( /* options */ ); initialize: method automatically called after construction render: method used to update this.el with new content A View Bound to Existing HTML # Assuming this HTML in the page:
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;myPage&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; A view can be bound to it with:
var MyPageView = Backbone.View.extend( { &amp;quot;el&amp;quot;: &amp;quot;#myPage&amp;quot;, &amp;quot;template&amp;quot;: _.</description>
    </item>
    
    <item>
      <title>Model</title>
      <link>https://www.wikiod.com/backbone-js/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/model/</guid>
      <description>Syntax # var MyModel = Backbone.Model.extend(properties, [classProperties]); // Create a custom model var model = new Backbone.Model([attributes], [options]); // Instanciate a model object Parameters # Parameter Details properties Instance properties. classProperties Optional. Properties that exist and are shared with every model instance of this type. attributes Optional. Initial values of the model&amp;rsquo;s attributes. If this parameter is left out, the model will be initialized with the values specified by the model&amp;rsquo;s defaults property.</description>
    </item>
    
    <item>
      <title>Router</title>
      <link>https://www.wikiod.com/backbone-js/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/router/</guid>
      <description>Creating a router # The web server serves the user based on the request sent by the browser but how the user will tell the browser what he/she is looking for, that&amp;rsquo;s when we need URL. Every web page on the internet has got a URL that can be bookmarked, copied, shared, and saved for future reference. In single page Backbone app, everything we see is a view, views are formed and rendered to show specific page but what if the user want&amp;rsquo;s to see the same information again.</description>
    </item>
    
    <item>
      <title>Collection</title>
      <link>https://www.wikiod.com/backbone-js/collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/collection/</guid>
      <description>Syntax # // New custom collection
var MyCollection = Backbone.Collection.extend(properties, [classProperties]); // New collection instance
var collection = new Backbone.Collection([models], [options]); Parameters # Parameter Details properties Instance properties. classProperties Optional. Properties that exist and are shared with every collection instance of this type. models Optional. The initial array of models (or objects). If this parameter is left out, the collection will be empty. options Optional. Object which serves to configure the collection and is then passed to the initialize function.</description>
    </item>
    
    <item>
      <title>Sync</title>
      <link>https://www.wikiod.com/backbone-js/sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/sync/</guid>
      <description>sync is a function that Backbone uses to handle all sending or receiving of data to/from a remote server. The default implementation uses jQuery (or Zepto) to perform AJAX operations when data is synced. However, this method can be overriden to apply different syncing behavior, such as:
Using setTimeout to batch multiple updates into a single request Sending model data as XML instead of JSON Using WebSockets instead of Ajax Syntax # sync(method, model, options) Parameters # parameter details method create , read , update , delete model the model to be saved (or collection to be read) options success and error callbacks, and all other jQuery request options Basic Example # The sync() method reads and fetched the model data</description>
    </item>
    
    <item>
      <title>url and urlRoot</title>
      <link>https://www.wikiod.com/backbone-js/url-and-urlroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/backbone-js/url-and-urlroot/</guid>
      <description>Modifying Model.url() # Model.url and Collection.url are only used internally by the default Backbone.sync method. The default method assumes you are tying into a RESTful API. If you are using a different endpoint design, you will want to override the sync method and may want utilize the url method.
var Model = Backbone.Model.extend({ urlRoot: &#39;/path-to-model&#39;, url: function (path) { var url = this.urlRoot + &#39;/&#39; + path; if (this.isNew()) { return url; } return url + &#39;/&#39; + this.</description>
    </item>
    
  </channel>
</rss>

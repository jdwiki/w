<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js Tutorial on </title>
    <link>https://www.wikiod.com/docs/node-js/</link>
    <description>Recent content in Node.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/node-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Node.js</title>
      <link>https://www.wikiod.com/node-js/getting-started-with-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/getting-started-with-nodejs/</guid>
      <description>Hello World HTTP server # First, install Node.js for your platform.
In this example we&amp;rsquo;ll create an HTTP server listening on port 1337, which sends Hello, World! to the browser. Note that, instead of using port 1337, you can use any port number of your choice which is currently not in use by any other service.
The http module is a Node.js [core module](https://www.wikiod.com/node-js/getting-started-with-nodejs#Core modules) (a module included in Node.js&amp;rsquo;s source, that does not require installing additional resources).</description>
    </item>
    
    <item>
      <title>Installing Node.js</title>
      <link>https://www.wikiod.com/node-js/installing-nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/installing-nodejs/</guid>
      <description>Using Node Version Manager (nvm) # Node Version Manager, otherwise known as nvm, is a bash script that simplifies the management of multiple Node.js versions.
To install nvm, use the provided install script:
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash For windows there is a nvm-windows package with an installer. This GithHub page has the details for installing and using the nvm-windows package.
After installing nvm, run &amp;ldquo;nvm on&amp;rdquo; from command line.</description>
    </item>
    
    <item>
      <title>Web Apps With Express</title>
      <link>https://www.wikiod.com/node-js/web-apps-with-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/web-apps-with-express/</guid>
      <description>Express is a minimal and flexible Node.js web application framework, providing a robust set of features for building web applications.
The official website of Express is expressjs.com. The source can be found on GitHub.
Syntax # app.get(path [, middleware], callback[, callback&amp;hellip;]) app.put(path [, middleware], callback[, callback&amp;hellip;]) app.post(path [, middleware], callback[, callback&amp;hellip;]) app[&amp;lsquo;delete&amp;rsquo;](path [, middleware], callback[, callback&amp;hellip;]) app.use(path [, middleware], callback[, callback&amp;hellip;]) app.use(callback) Parameters # Parameter Details path Specifies the path portion or the URL that the given callback will handle.</description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://www.wikiod.com/node-js/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/npm/</guid>
      <description>Node Package Manager (npm) provides following two main functionalities: Online repositories for node.js packages/modules which are searchable on search.nodejs.org. Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.
Syntax # npm &amp;lt;command&amp;gt; where &amp;lt;command&amp;gt; is one of:
add-user adduser apihelp author bin bugs c [cache] completion [config] [ddp][dedupe] [dedupe] deprecate docs edit explore faq find find-dupes [get][config] [help] [help-search] home [i][17] [install][17] info [init][init] isntall issues la [link][11] [list] ll ln login ls outdated [owner] pack prefix [prune] publish r [rb][rebuild] [rebuild] remove [repo] [restart] [rm] root [run-script][runscript] [s][search] [se][search] [search] [set][config] show shrinkwrap [star][9] [stars][16] [start][15] [stop][14] [submodule][13] [tag][4] [test][3] [tst][3] [un][12] [uninstall][12] [unlink][11] [unpublish][10] [unstar][9] [up][8] [update][8] [v][7] [version][7] [view][6] [whoami][5] 2: https://www.</description>
    </item>
    
    <item>
      <title>MySQL integration</title>
      <link>https://www.wikiod.com/node-js/mysql-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/mysql-integration/</guid>
      <description>In this topic you will learn how to integrate with Node.js using MYSQL database management tool. You will learn various ways to connect and interact with data residing in mysql using a nodejs program and script.
Connect to MySQL # One of the easiest ways to connect to MySQL is by using mysql module. This module handles the connection between Node.js app and MySQL server. You can install it like any other module:</description>
    </item>
    
    <item>
      <title>Securing Node.js applications</title>
      <link>https://www.wikiod.com/node-js/securing-nodejs-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/securing-nodejs-applications/</guid>
      <description>SSL/TLS in Node.js # If you choose to handle SSL/TLS in your Node.js application, consider that you are also responsible for maintaining SSL/TLS attack prevention at this point. In many server-client architectures, SSL/TLS terminates on a reverse proxy, both to reduce application complexity and reduce the scope of security configuration.
If your Node.js application should handle SSL/TLS, it can be secured by loading the key and cert files.
If your certificate provider requires a certificate authority (CA) chain, it can be added in the ca option as an array.</description>
    </item>
    
    <item>
      <title>package.json</title>
      <link>https://www.wikiod.com/node-js/packagejson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/packagejson/</guid>
      <description>You can create package.json with
npm init which will ask you about basic facts about your projects, including license identifier.
Scripts # You can define scripts that can be executed or are triggered before or after another script.
{ &amp;quot;scripts&amp;quot;: { &amp;quot;pretest&amp;quot;: &amp;quot;scripts/pretest.js&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;scripts/test.js&amp;quot;, &amp;quot;posttest&amp;quot;: &amp;quot;scripts/posttest.js&amp;quot; } } In this case, you can execute the script by running either of these commands:
$ npm run-script test $ npm run test $ npm test $ npm t Pre-defined scripts # Script Name Description prepublish Run before the package is published.</description>
    </item>
    
    <item>
      <title>Filesystem IO</title>
      <link>https://www.wikiod.com/node-js/filesystem-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/filesystem-io/</guid>
      <description>In Node.js, resource intensive operations such as I/O are performed asynchronously, but have a synchronous counterpart (e.g. there exists a fs.readFile and its counterpart is fs.readFileSync). Since Node is single-threaded, you should be careful when using synchronous operations, because they will block the entire process.
If a process is blocked by a synchronous operation, the entire execution cycle (including the event loop) is halted. That means other asynchronous code, including events and event handlers, will not run and your program will continue to wait until the single blocking operation has completed.</description>
    </item>
    
    <item>
      <title>Deploying Node.js applications in production</title>
      <link>https://www.wikiod.com/node-js/deploying-nodejs-applications-in-production/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/deploying-nodejs-applications-in-production/</guid>
      <description>Setting NODE_ENV=&amp;ldquo;production&amp;rdquo; # Production deployments will vary in many ways, but a standard convention when deploying in production is to define an environment variable called NODE_ENV and set its value to &amp;ldquo;production&amp;rdquo;.
Runtime flags # Any code running in your application (including external modules) can check the value of NODE_ENV:
if(process.env.NODE_ENV === &#39;production&#39;) { // We are running in production mode } else { // We are running in development mode } Dependencies # When the NODE_ENV environment variable is set to &amp;lsquo;production&amp;rsquo; all devDependencies in your package.</description>
    </item>
    
    <item>
      <title>Event Emitters</title>
      <link>https://www.wikiod.com/node-js/event-emitters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/node-js/event-emitters/</guid>
      <description>When an event &amp;ldquo;fires&amp;rdquo; (which means the same as &amp;ldquo;publishing an event&amp;rdquo; or &amp;ldquo;emitting an event&amp;rdquo;), each listener will be called synchronously (source), along with any accompanying data that was passed in to emit(), no matter how many arguments you pass in:
myDog.on(&#39;bark&#39;, (howLoud, howLong, howIntense) =&amp;gt; { // handle the event }) myDog.emit(&#39;bark&#39;, &#39;loudly&#39;, &#39;5 seconds long&#39;, &#39;fiercely&#39;) The listeners will be called in the order they were registered:</description>
    </item>
    
  </channel>
</rss>

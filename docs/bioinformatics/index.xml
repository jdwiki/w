<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bioinformatics Tutorial on </title>
    <link>https://www.wikiod.com/docs/bioinformatics/</link>
    <description>Recent content in bioinformatics Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with bioinformatics</title>
      <link>https://www.wikiod.com/bioinformatics/getting-started-with-bioinformatics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/getting-started-with-bioinformatics/</guid>
      <description>Using mapping of DNA sequences to answer biological questions # Many biological questions can be translated into a DNA sequencing problem. For instance, if you want to know the expression level of a gene you can: copy its mRNAs into complementary DNA molecules, sequence each of the resulting DNA molecules, map those sequences back to the reference genome, and then use the count of alignments overlapping the gene as a proxy of its expression (see RNA-seq).</description>
    </item>
    
    <item>
      <title>Linearizing a FASTA sequence.</title>
      <link>https://www.wikiod.com/bioinformatics/linearizing-a-fasta-sequence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/linearizing-a-fasta-sequence/</guid>
      <description>Linearize a FASTA sequence with AWK # Reading line by line # awk &#39;/^&amp;gt;/ {printf(&amp;quot;%s%s\t&amp;quot;,(N&amp;gt;0?&amp;quot;\n&amp;quot;:&amp;quot;&amp;quot;),$0);N++;next;} {printf(&amp;quot;%s&amp;quot;,$0);} END {printf(&amp;quot;\n&amp;quot;);}&#39; &amp;lt; input.fa one can read this awk script as:
if the current line ($0) starts like a fasta header (^&amp;gt;). Then we print a carriage return if this is not the first sequence. (N&amp;gt;0?&amp;quot;\n&amp;quot;:&amp;quot;&amp;quot;) followed with the line itself ($0), followed with a tabulation (\t). And we look for the next line (next;) if the current line ($0) does not start like a fasta header, this is the default awk pattern.</description>
    </item>
    
    <item>
      <title>Common File Formats</title>
      <link>https://www.wikiod.com/bioinformatics/common-file-formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/common-file-formats/</guid>
      <description>FASTA # The FASTA file format is used for representing one or more nucleotide or amino acid sequences as a continuous string of characters. Sequences are annotated with a comment line, which starts with the &amp;gt; character, that precedes each sequence. The comment line is typically formatted in a uniform way, dictated by the sequence&amp;rsquo;s source database or generating software. For example:
&amp;gt;gi|62241013|ref|NP_001014431.1| RAC-alpha serine/threonine-protein kinase [Homo sapiens] MSDVAIVKEGWLHKRGEYIKTWRPRYFLLKNDGTFIGYKERPQDVDQREAPLNNFSVAQCQLMKTERPRP NTFIIRCLQWTTVIERTFHVETPEEREEWTTAIQTVADGLKKQEEEEMDFRSGSPSDNSGAEEMEVSLAK PKHRVTMNEFEYLKLLGKGTFGKVILVKEKATGRYYAMKILKKEVIVAKDEVAHTLTENRVLQNSRHPFL TALKYSFQTHDRLCFVMEYANGGELFFHLSRERVFSEDRARFYGAEIVSALDYLHSEKNVVYRDLKLENL MLDKDGHIKITDFGLCKEGIKDGATMKTFCGTPEYLAPEVLEDNDYGRAVDWWGLGVVMYEMMCGRLPFY NQDHEKLFELILMEEIRFPRTLGPEAKSLLSGLLKKDPKQRLGGGSEDAKEIMQHRFFAGIVWQHVYEKK LSPPFKPQVTSETDTRYFDEEFTAQMITITPPDQDDSMECVDSERRPHFPQFSYSASGTA The above example illustrates the amino acid sequence of an isoform of the human AKT1 genes, as fetched from the NCBI protein database.</description>
    </item>
    
    <item>
      <title>BLAST</title>
      <link>https://www.wikiod.com/bioinformatics/blast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/blast/</guid>
      <description>Create a DNA blastdb # In order to compare query sequences against reference sequences, you must create a blastdb of your reference(s). This is done using makeblastdb which is included when you install blast.
makeblastdb -in &amp;lt;input fasta&amp;gt; -dbtype nucl -out &amp;lt;label for database&amp;gt; So if you had a file reference.fasta containing the following records:
&amp;gt;reference_1 ATCGATAAA &amp;gt;reference_2 ATCGATCCC You would run the following:
makeblastdb -in reference.fasta -dbtype nucl -out my_database This would create the following files:</description>
    </item>
    
    <item>
      <title>Sequence analysis</title>
      <link>https://www.wikiod.com/bioinformatics/sequence-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/sequence-analysis/</guid>
      <description>Calculate the GC% of a sequence # In molecular biology and genetics, GC-content (or guanine-cytosine content, GC% in short) is the percentage of nitrogenous bases on a DNA molecule that are either guanine or cytosine (from a possibility of four different ones, also including adenine and thymine).
Using BioPython:
&amp;gt;&amp;gt;&amp;gt; from Bio.Seq import Seq &amp;gt;&amp;gt;&amp;gt; from Bio.Alphabet import IUPAC &amp;gt;&amp;gt;&amp;gt; from Bio.SeqUtils import GC &amp;gt;&amp;gt;&amp;gt; my_seq = Seq(&#39;GATCGATGGGCCTATATAGGATCGAAAATCGC&#39;, IUPAC.unambiguous_dna) &amp;gt;&amp;gt;&amp;gt; GC(my_seq) 46.</description>
    </item>
    
    <item>
      <title>Basic Samtools</title>
      <link>https://www.wikiod.com/bioinformatics/basic-samtools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/basic-samtools/</guid>
      <description>Count number of records per reference in bamfile # samtools idxstats thing.bam Convert sam into bam (and back again) # Samtools can be used to convert between sam and bam:
-b indicates that the input file will be in BAM format -S indicates that the stdout should be in SAM format samtools view -sB thing.bam &amp;gt; thing.sam And to convert between sam and bam:
samtools view thing.sam &amp;gt; thing.bam samtools sort thing.</description>
    </item>
    
    <item>
      <title>Linearizing a fastq file</title>
      <link>https://www.wikiod.com/bioinformatics/linearizing-a-fastq-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/bioinformatics/linearizing-a-fastq-file/</guid>
      <description>Using Paste # $ gunzip -c input.fastq.gz | paste - - - - | head @IL31_4368:1:1:996:8507/2 TCCCTTACCCCCAAGCTCCATACCCTCCTAATGCCCACACCTCTTACCTTAGGA + FFCEFFFEEFFFFFFFEFFEFFFEFCFC&amp;lt;EEFEFFFCEFF&amp;lt;;EEFF=FEE?FCE @IL31_4368:1:1:996:21421/2 CAAAAACTTTCACTTTACCTGCCGGGTTTCCCAGTTTACATTCCACTGTTTGAC + &amp;gt;DBDDB,B9BAA4AAB7BB?7BBB=91;+*@;5&amp;lt;87+*=/*@@?9=73=.7)7* @IL31_4368:1:1:997:10572/2 GATCTTCTGTGACTGGAAGAAAATGTGTTACATATTACATTTCTGTCCCCATTG + E?=EECE&amp;lt;EEEE98EEEEAEEBD??BE@AEAB&amp;gt;&amp;lt;EEABCEEDEC&amp;lt;&amp;lt;EBDA=DEE @IL31_4368:1:1:997:15684/2 CAGCCTCAGATTCAGCATTCTCAAATTCAGCTGCGGCTGAAACAGCAGCAGGAC + EEEEDEEE9EAEEDEEEEEEEEEECEEAAEEDEE&amp;lt;CD=D=*BCAC?;CB,&amp;lt;D@, @IL31_4368:1:1:997:15249/2 AATGTTCTGAAACCTCTGAGAAAGCAAATATTTATTTTAATGAAAAATCCTTAT + EDEEC;EEE;EEE?EECE;7AEEEEEE07EECEA;D6D&amp;gt;+EE4E7EEE4;E=EA @IL31_4368:1:1:997:6273/2 ACATTTACCAAGACCAAAGGAAACTTACCTTGCAAGAATTAGACAGTTCATTTG + EEAAFFFEEFEFCFAFFAFCCFFEFEF&amp;gt;EFFFFB?ABA@ECEE=&amp;lt;F@DE@DDF; @IL31_4368:1:1:997:1657/2 CCCACCTCTCTCAATGTTTTCCATATGGCAGGGACTCAGCACAGGTGGATTAAT + A;0A?AA+@A&amp;lt;7A7019/&amp;lt;65,3A;&#39;&#39;&#39;07&amp;lt;A=&amp;lt;=&amp;gt;?7=?6&amp;amp;)&#39;9(&#39;*%,&amp;gt;/(&amp;lt; @IL31_4368:1:1:997:5609/2 TCACTATCAGAAACAGAATGTATAACTTCCAAATCAGTAGGAAACACAAGGAAA + AEECECBEC@A;AC=&amp;lt;AEEEEAEEEE&amp;gt;AC,CE?ECCE9EAEC4E:&amp;lt;C&amp;gt;AC@EE) @IL31_4368:1:1:997:14262/2 TGTTTTTTCTTTTTCTTTTTTTTTTGACAGTGCAGAGATTTTTTATCTTTTTAA + 97&#39;&amp;lt;2&amp;lt;.64.?7/3(891?=(6??6+&amp;lt;6&amp;lt;++/*..3(:&#39;/&#39;9::&#39;&#39;&amp;amp;(1&amp;lt;&amp;gt;.(, @IL31_4368:1:1:998:19914/2 GAATGAAAGCAGAGACCCTGATCGAGCCCCAGAAAGATACACCTCCAGATTTTA + C?=CECE4CD&amp;lt;?8@==;EBE&amp;lt;=0@:@@92@???6&amp;lt;991&amp;gt;.&amp;lt;?A=@5?@99;971 Using Awk # $ gunzip -c input.fastq.gz | awk &#39;{printf(&amp;quot;%s%s&amp;quot;,$0,((NR+1)%4==1?&amp;quot;\n&amp;quot;:&amp;quot;\t&amp;quot;));}&#39; | head @IL31_4368:1:1:996:8507/2 TCCCTTACCCCCAAGCTCCATACCCTCCTAATGCCCACACCTCTTACCTTAGGA + FFCEFFFEEFFFFFFFEFFEFFFEFCFC&amp;lt;EEFEFFFCEFF&amp;lt;;EEFF=FEE?</description>
    </item>
    
  </channel>
</rss>

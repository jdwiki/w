<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgresql Tutorial on </title>
    <link>https://www.wikiod.com/docs/postgresql/</link>
    <description>Recent content in postgresql Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/docs/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with postgresql</title>
      <link>https://www.wikiod.com/postgresql/getting-started-with-postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/getting-started-with-postgresql/</guid>
      <description>Installing PostgreSQL on Windows # While it&amp;rsquo;s good practice to use a Unix based operating system (ex. Linux or BSD) as a production server you can easily install PostgreSQL on Windows (hopefully only as a development server).
Download the Windows installation binaries from EnterpriseDB: http://www.enterprisedb.com/products-services-training/pgdownload This is a third-party company started by core contributors to the PostgreSQL project who have optimized the binaries for Windows.
Select the latest stable (non-Beta) version (9.</description>
    </item>
    
    <item>
      <title>EXTENSION dblink and postgres_fdw</title>
      <link>https://www.wikiod.com/postgresql/extension-dblink-and-postgres_fdw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/extension-dblink-and-postgres_fdw/</guid>
      <description>Syntax # dblink (&amp;lsquo;dbname = name_db_distance port = PortOfDB host = HostOfDB user = usernameDB password = passwordDB&amp;rsquo;, &amp;lsquo;MY QUESRY&amp;rsquo;)
dbname = name of the database
port = Port Of the database
host = Host Of the database
user = username of the database
password = password of the database&amp;rsquo;,
MY QUESRY = this can be any operation i want to do SELECT, INSERT, &amp;hellip;
Extention FDW # FDW is an implimentation of dblink it is more helpful, so to use it:</description>
    </item>
    
    <item>
      <title>JSON Support</title>
      <link>https://www.wikiod.com/postgresql/json-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/json-support/</guid>
      <description>JSON - Java Script Object Notation , Postgresql support JSON Data type since 9.2 version. There are some predefined function and operators to access the JSON data.
The -&amp;gt; operator returns the key of JSON column. The -&amp;gt;&amp;gt; operator returns the value of JSON Column.
Using JSONb operators # Creating a DB and a Table # DROP DATABASE IF EXISTS books_db; CREATE DATABASE books_db WITH ENCODING=&#39;UTF8&#39; TEMPLATE template0; DROP TABLE IF EXISTS books; CREATE TABLE books ( id SERIAL PRIMARY KEY, client TEXT NOT NULL, data JSONb NOT NULL ); Populating the DB # INSERT INTO books(client, data) values ( &#39;Joe&#39;, &#39;{ &amp;quot;title&amp;quot;: &amp;quot;Siddhartha&amp;quot;, &amp;quot;author&amp;quot;: { &amp;quot;first_name&amp;quot;: &amp;quot;Herman&amp;quot;, &amp;quot;last_name&amp;quot;: &amp;quot;Hesse&amp;quot; } }&#39; ),( &#39;Jenny&#39;, &#39;{ &amp;quot;title&amp;quot;: &amp;quot;Dharma Bums&amp;quot;, &amp;quot;author&amp;quot;: { &amp;quot;first_name&amp;quot;: &amp;quot;Jack&amp;quot;, &amp;quot;last_name&amp;quot;: &amp;quot;Kerouac&amp;quot; } }&#39; ),( &#39;Jenny&#39;, &#39;{ &amp;quot;title&amp;quot;: &amp;quot;100 años de soledad&amp;quot;, &amp;quot;author&amp;quot;: { &amp;quot;first_name&amp;quot;: &amp;quot;Gabo&amp;quot;, &amp;quot;last_name&amp;quot;: &amp;quot;Marquéz&amp;quot; } }&#39; ); Lets see everything inside the table books:</description>
    </item>
    
    <item>
      <title>Connect to PostgreSQL from Java</title>
      <link>https://www.wikiod.com/postgresql/connect-to-postgresql-from-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/connect-to-postgresql-from-java/</guid>
      <description>The API to use a relational database from Java is JDBC.
This API is implemented by a JDBC driver.
To use it, put the JAR-file with the driver on the JAVA class path.
This documentation shows samples how to use the JDBC driver to connect to a database.
JDBC URL
The JDBC URL can take one of these forms:
jdbc:postgresql://host[:port]/[database][parameters]
host defaults to localhost, port to 5432.
If host is an IPv6 address, it must be enclosed in square brackets.</description>
    </item>
    
    <item>
      <title>Backup and Restore</title>
      <link>https://www.wikiod.com/postgresql/backup-and-restore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/backup-and-restore/</guid>
      <description>Backing up the filesystem instead of using pg_dumpall and pg_dump # It&amp;rsquo;s very important that if you use this, you call the pg_start_backup() function before and pg_stop_backup() function after. Doing filesystem backups is not safe otherwise; even a ZFS or FreeBSD snapshot of the filesystem backed up without those function calls will place the database in recovery mode and may lose transactions.
I would avoid doing filesystem backups instead of regular Postgres backups, both for this reason, and because Postgres backup files (especially in the custom format) are extremely versatile in supporting alternate restores.</description>
    </item>
    
    <item>
      <title>Role Management</title>
      <link>https://www.wikiod.com/postgresql/role-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/role-management/</guid>
      <description>Syntax # CREATE ROLE name [ [ WITH ] option [ ... ] ]
CREATE USER name [ [ WITH ] option [ ... ] ]
where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | CREATEUSER | NOCREATEUSER | INHERIT | NOINHERIT | LOGIN | NOLOGIN | CONNECTION LIMIT connlimit | [ ENCRYPTED | UNENCRYPTED ] PASSWORD &#39;password&#39; | VALID UNTIL &#39;timestamp&#39; | IN ROLE role_name [, .</description>
    </item>
    
    <item>
      <title>PostgreSQL High Availability</title>
      <link>https://www.wikiod.com/postgresql/postgresql-high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/postgresql-high-availability/</guid>
      <description>Replication in PostgreSQL # Configuring the Primary Server
Requirements:
Replication User for replication activities Directory to store the WAL archives Create Replication user
createuser -U postgres replication -P -c 5 --replication
+ option -P will prompt you for new password + option -c is for maximum connections. 5 connections are enough for replication + -replication will grant replication privileges to the user Create a archive directory in data directory
mkdir $PGDATA/archive</description>
    </item>
    
    <item>
      <title>Postgres Tip and Tricks</title>
      <link>https://www.wikiod.com/postgresql/postgres-tip-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/postgres-tip-and-tricks/</guid>
      <description>DATEADD alternative in Postgres # SELECT CURRENT_DATE + &#39;1 day&#39;::INTERVAL SELECT &#39;1999-12-11&#39;::TIMESTAMP + &#39;19 days&#39;::INTERVAL SELECT &#39;1 month&#39;::INTERVAL + &#39;1 month 3 days&#39;::INTERVAL Comma seperated values of a column # SELECT string_agg(&amp;lt;TABLE_NAME&amp;gt;.&amp;lt;COLUMN_NAME&amp;gt;, &#39;,&#39;) FROM &amp;lt;SCHEMA_NAME&amp;gt;.&amp;lt;TABLE_NAME&amp;gt; T Delete duplicate records from postgres table # DELETE FROM &amp;lt;SCHEMA_NAME&amp;gt;.&amp;lt;Table_NAME&amp;gt; WHERE ctid NOT IN ( SELECT MAX(ctid) FROM &amp;lt;SCHEMA_NAME&amp;gt;.&amp;lt;TABLE_NAME&amp;gt; GROUP BY &amp;lt;SCHEMA_NAME&amp;gt;.&amp;lt;TABLE_NAME&amp;gt;.* ) ; Update query with join between two tables alternative since Postresql does not support join in update query.</description>
    </item>
    
    <item>
      <title>Programming with PLpgSQL</title>
      <link>https://www.wikiod.com/postgresql/programming-with-plpgsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/programming-with-plpgsql/</guid>
      <description>PL/pgSQL is PostgreSQL&amp;rsquo;s built-in programming language for writing functions which run within the database itself, known as stored procedures in other databases. It extends SQL with loops, conditionals, and return types. Though its syntax may be strange to many developers it is much faster than anything running on the application server because the overhead of connecting to the database is eliminated, which is particularly useful when you would otherwise need to execute a query, wait for the result, and submit another query.</description>
    </item>
    
    <item>
      <title>Accessing Data Programmatically</title>
      <link>https://www.wikiod.com/postgresql/accessing-data-programmatically/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/postgresql/accessing-data-programmatically/</guid>
      <description>Accessing PostgreSQL with the C-API # The C-API is the most powerful way to access PostgreSQL and it is surprisingly comfortable.
Compilation and linking # During compilation, you have to add the PostgreSQL include directory, which can be found with pg_config --includedir, to the include path.
You must link with the PostgreSQL client shared library (libpq.so on UNIX, libpq.dll on Windows). This library is in the PostgreSQL library directory, which can be found with pg_config --libdir.</description>
    </item>
    
  </channel>
</rss>

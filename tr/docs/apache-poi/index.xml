<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache-poi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/apache-poi/</link>
    <description>Recent content in apache-poi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/apache-poi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>apache-poi&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/apache-poi/apache-poiye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/apache-poi/apache-poiye-baslarken/</guid>
      <description>Kurulum veya Kurulum # Apache-poi&amp;rsquo;nin kurulması veya kurulması hakkında ayrıntılı talimatlar.</description>
    </item>
    
    <item>
      <title>Basit Excel (XLSX) oluşturma</title>
      <link>https://www.wikiod.com/tr/apache-poi/basit-excel-xlsx-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/apache-poi/basit-excel-xlsx-olusturma/</guid>
      <description>Temel excel # String fileName = &amp;quot;Fruit.xlsx&amp;quot;; String sheetName = &amp;quot;Apples&amp;quot;; XSSFWorkbook wb = new XSSFWorkbook(); XSSFSheet sheet = wb.createSheet(sheetName) ; for (int r=0;r &amp;lt; 3; r++ ) { XSSFRow row = sheet.createRow(r); //iterating c number of columns for (int c=0;c &amp;lt; 3; c++ ) { XSSFCell cell = row.createCell(c); cell.setCellValue(&amp;quot;Nice apple, in row: &amp;quot;+r+&amp;quot; and col: &amp;quot;+c); } } try(FileOutputStream fos = new FileOutputStream(fileName)) { wb.write(fos); } </description>
    </item>
    
    <item>
      <title>NPOI&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/apache-poi/npoiyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/apache-poi/npoiyi-kullanmaya-baslama/</guid>
      <description>POI Java projesinin .NET versiyonudur. Microsoft Office yüklü olmadan xls, doc, ppt dosyalarının okunmasına/yazılmasına izin verir. Belgelerle ilgili ayrıntılar burada mevcuttur: https://github.com/tonyqus/npoi
NPOI&amp;rsquo;yi yükleme # NPOI ile ilgili tüm kitaplıkları dahil etmenin en iyi yolu NUGet Paket Yöneticisidir. NUGet paket yöneticisi penceresinde NPOI arayın.
Başarılı bir şekilde kurulduktan sonra, gerekli tüm kütüphane mevcut projenizin referans bölümünde görünecektir. Ardından NPOI&amp;rsquo;yi dosyanıza bu şekilde ekleyin
using NPOI.SS.UserModel; using NPOI.SS.Util; using NPOI.XSSF.UserModel Excel dosyası oluşturun # MemoryStream excelMS = GetExcelFile(); //Using Resposne Stream to Make File Available for User to Download; Response.</description>
    </item>
    
    <item>
      <title>C# kullanarak XSSF(.xslx) excel dosyası için NPOI Veri doğrulama yaklaşımı</title>
      <link>https://www.wikiod.com/tr/apache-poi/c-kullanarak-xssfxslx-excel-dosyas-icin-npoi-veri-dogrulama-yaklasm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/apache-poi/c-kullanarak-xssfxslx-excel-dosyas-icin-npoi-veri-dogrulama-yaklasm/</guid>
      <description>Veri doğrulama, kullanıcının bir açılır liste oluşturmasına ve hücredeki değerleri bu girişlerle sınırlandırmasına olanak tanır. Sınırlama nedeniyle, Excel programlı olarak 256 karakterden fazlasını bağlayamaz. 256&amp;rsquo;dan fazla karakter bağlamak için açıklanan yaklaşım izlenebilir.
Tüm liste öğesinin toplam karakter sayısı 256&amp;rsquo;dan az olduğunda # Tüm öğeleri herhangi bir yapılandırma dosyasından okuyabilir veya satır içinde yazabilirsiniz.
Yapılandırma Dosyasına kaydedilip kaydedilmediği göz önüne alındığında
// Read all list items from config file string[] countryDV = ConfigurationManager.</description>
    </item>
    
    <item>
      <title>C# kullanarak XSSF(.xslx) excel dosyası için Tarih, Saat, Liste Öğesi, e-posta vb. için NPOI Veri doğrulama kısıtlaması yaklaşımı</title>
      <link>https://www.wikiod.com/tr/apache-poi/c-kullanarak-xssfxslx-excel-dosyas-icin-tarih-saat-liste-ogesi-e-posta-vb-icin-npoi-veri-dogrulama-kstlamas-yaklasm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/apache-poi/c-kullanarak-xssfxslx-excel-dosyas-icin-tarih-saat-liste-ogesi-e-posta-vb-icin-npoi-veri-dogrulama-kstlamas-yaklasm/</guid>
      <description>NPOI&amp;rsquo;de veri doğrulama kısıtlamasını oluşturmak zor olabilir ve zaman alabilir. Uygulanabilir yaklaşımımın bir kısmını paylaştım. Bu yaklaşım, kendi kısıtlama türlerinizi özelleştirmek için iyi bir fikir verecektir.
Tarih Biçimi aa/gg//yyyyy ile 01/01/1900 - 12/31/2119 Arasındaki Tarih Alanı Değerleri için Tarih Kısıtlamalarını Ayarlayın; # int DVRowLimit = (Int16.MaxValue); CellRangeAddressList cellRangeFieldsType1 = new CellRangeAddressList(1, DVRowLimit, targetFirstCol, targetLastCol); XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint)validationHelper.CreateDateConstraint(OperatorType.BETWEEN, &amp;quot;=DATE(1900,1,1)&amp;quot;, &amp;quot;=DATE(2119,12,31)&amp;quot;, &amp;quot;mm/dd/yyyyy&amp;quot;); //dvConstraint = (XSSFDataValidationConstraint)validationHelper.CreateDateConstraint(OperatorType.IGNORED, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;m/d/yy h:mm&amp;quot;); XSSFDataValidation dataValidation = (XSSFDataValidation)validationHelper.</description>
    </item>
    
  </channel>
</rss>

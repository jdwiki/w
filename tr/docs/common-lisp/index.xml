<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ortak lisp Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/common-lisp/</link>
    <description>Recent content in ortak lisp Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common-lisp&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/common-lisp/common-lispi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/common-lispi-kullanmaya-baslama/</guid>
      <description>Common Lisp Öğrenme Kaynakları # Çevrimiçi Kitaplar
Bunlar, çevrimiçi olarak ücretsiz olarak erişilebilen kitaplardır.
Peter Seibel&amp;rsquo;den Practical Common Lisp deneyimli programcılar için CL&amp;rsquo;ye iyi bir giriş niteliğindedir ve en başından CL&amp;rsquo;yi diğer dillerden farklı kılan şeyin altını çizmeye çalışır. Common Lisp: Sembolik Hesaplamaya Nazik Bir Giriş, David S. Touretzky programlamaya yeni başlayanlar için iyi bir giriştir. Common Lisp: Stuart C. Shapiro&amp;rsquo;nun interaktif bir yaklaşımı ders kitabı olarak kullanıldı ve ders notları web sitesinde kitaba eşlik ediyor.</description>
    </item>
    
    <item>
      <title>ASDF - Başka Bir Sistem Tanımlama Tesisi</title>
      <link>https://www.wikiod.com/tr/common-lisp/asdf---baska-bir-sistem-tanmlama-tesisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/asdf---baska-bir-sistem-tanmlama-tesisi/</guid>
      <description>ASDF - Başka Bir Sistem Tanımlama Tesisi
ASDF, Common Lisp yazılımı sistemlerinin bileşenlerden (alt sistemler ve dosyalar) nasıl oluştuğunu ve bu bileşenler üzerinde derlenebilmeleri, yüklenebilmeleri, test edilebilmeleri vb. için doğru sırada nasıl çalışılacağını belirten bir araçtır.
Düz dizin yapısına sahip basit ASDF sistemi # Düz bir dizin yapısına sahip bu basit projeyi düşünün:
example |-- example.asd |-- functions.lisp |-- main.lisp |-- packages.lisp `-- tools.lisp &amp;rsquo;example.asd&amp;rsquo; dosyası, ASDF&amp;rsquo;ye özgü bir işlev çağrısından biraz daha fazlasını içeren başka bir Lisp dosyasıdır.</description>
    </item>
    
    <item>
      <title>ANSI Common Lisp, dil standardı ve belgeleri</title>
      <link>https://www.wikiod.com/tr/common-lisp/ansi-common-lisp-dil-standard-ve-belgeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/ansi-common-lisp-dil-standard-ve-belgeleri/</guid>
      <description>Common Lisp HyperSpec # Common Lisp, ilk olarak 1994 yılında bir ANSI standardı olarak yayınlanan bir standarda sahiptir.
LispWorks tarafından sağlanan Common Lisp HyperSpec, kısa CLHS, standart belgeden türetilen, sıklıkla kullanılan bir HTML belgesidir. HyperSpec ayrıca indirilebilir ve yerel olarak kullanılabilir.
Ortak Lisp geliştirme ortamları genellikle Lisp sembolleri için HyperSpec belgelerinin aranmasına izin verir.
GNU Emacs için clhs.el var. GNU Emacs için SLIME, hyperspec.el&amp;rsquo;nin bir sürümünü sağlar. Ayrıca bakınız: CLHS&amp;rsquo;de cliki</description>
    </item>
    
    <item>
      <title>makrolar</title>
      <link>https://www.wikiod.com/tr/common-lisp/makrolar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/makrolar/</guid>
      <description>Makroların Amacı # Makrolar, kod oluşturmak, kodu dönüştürmek ve yeni notasyonlar sağlamak için tasarlanmıştır. Bu yeni gösterimler, örneğin etki alanı düzeyinde yapılar veya tamamen yeni gömülü diller sağlayarak programı daha iyi ifade etmek için daha uygun olabilir.
Makrolar, kaynak kodunu daha açıklayıcı hale getirebilir, ancak hata ayıklama daha zor hale getirilebilir. Genel bir kural olarak, normal bir işlev yapılacaksa makrolar kullanılmamalıdır. Bunları kullandığınızda, olağan tuzaklardan kaçının, yaygın olarak kullanılan kalıplara ve adlandırma kurallarına bağlı kalmaya çalışın.</description>
    </item>
    
    <item>
      <title>CLOS - Ortak Lisp Nesne Sistemi</title>
      <link>https://www.wikiod.com/tr/common-lisp/clos---ortak-lisp-nesne-sistemi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/clos---ortak-lisp-nesne-sistemi/</guid>
      <description>Karışımlar ve Arayüzler # Common Lisp, bazı dillerin (örn. Java) sahip olduğu anlamda arabirimlere sahip değildir ve Common Lisp&amp;rsquo;in çoklu kalıtım ve genel işlevleri desteklediği göz önüne alındığında, bu tür arabirime daha az ihtiyaç vardır. Ancak aynı tip desenler mixin sınıfları kullanılarak kolaylıkla gerçekleştirilebilir. Bu örnek, karşılık gelen birkaç genel işleve sahip bir koleksiyon arabiriminin belirtimini gösterir.
;; Specification of the COLLECTION &amp;quot;interface&amp;quot; (defclass collection () () (:documentation &amp;quot;A collection mixin.</description>
    </item>
    
    <item>
      <title>SLIME ile çalışmak</title>
      <link>https://www.wikiod.com/tr/common-lisp/slime-ile-calsmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/slime-ile-calsmak/</guid>
      <description>REPL&amp;rsquo;yi kullanma # CL-USER&amp;gt; (+ 2 3) 5 CL-USER&amp;gt; (sin 1.5) 0.997495 CL-USER&amp;gt; (mapcar (lambda (x) (+ x 2)) &#39;(1 2 3)) (3 4 5) Değerlendirmeden sonra yazdırılan sonuç sadece bir dizge değildir: arkasında tam dolu Lisp nesnesi vardır, bu nesne üzerine sağ tıklanarak ve İncele seçilerek incelenebilir.
Çok satırlı giriş de mümkündür: yeni satır koymak için &amp;lsquo;C-j&amp;rsquo; kullanın. Enter tuşu girilen formun değerlendirilmesine neden olacak ve form tamamlanmadıysa muhtemelen bir hataya neden olacaktır:</description>
    </item>
    
    <item>
      <title>biçim</title>
      <link>https://www.wikiod.com/tr/common-lisp/bicim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/bicim/</guid>
      <description>Parametreler # Lambda-Listesi (Biçim HEDEF KONTROL-DİZESİ &amp;amp;DİNLENME BİÇİM-ARGUMENTS) &amp;lsquo;HEDEF&amp;rsquo; yazılacak şey. Bu bir çıktı akımı, t (*standart-çıktı*nın kısaltması) veya nil (yazılacak bir dize oluşturan) olabilir &amp;lsquo;KONTROL-STRING&amp;rsquo; şablon dizesi. İlkel bir dize olabilir veya ek argümanları belirleyen ve bir şekilde dönüştüren yaklaşık önekli komut yönergeleri içerebilir. &amp;lsquo;FORMAT-ARGUMENTS&amp;rsquo; verilen CONTROL-STRING tarafından gerekli olası ek argümanlar. &amp;lsquo;FORMAT&amp;rsquo; direktifleri için CLHS belgeleri Bölüm 22.3&amp;lsquo;de bulunabilir. SLIME ile, belirli bir format yönergesi için CLHS belgelerine bakmak için C-c C-d ~ yazabilirsiniz.</description>
    </item>
    
    <item>
      <title>LOOP, yineleme için bir Common Lisp makrosu</title>
      <link>https://www.wikiod.com/tr/common-lisp/loop-yineleme-icin-bir-common-lisp-makrosu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/loop-yineleme-icin-bir-common-lisp-makrosu/</guid>
      <description>Paralel Yineleme # Bir &amp;ldquo;LOOP&amp;rdquo; içinde birden fazla &amp;ldquo;FOR&amp;rdquo; tümcesine izin verilir. Bu maddelerden ilki bittiğinde döngü biter:
(loop for a in &#39;(1 2 3 4 5) for b in &#39;(a b c) collect (list a b)) ;; Evaluates to: ((1 a) (2 b) (3 c)) Döngünün devam edip etmeyeceğini belirleyen diğer maddeler birleştirilebilir:
(loop for a in &#39;(1 2 3 4 5 6 7) while (&amp;lt; a 4) collect a) ;; Evaluates to: (1 2 3) (loop for a in &#39;(1 2 3 4 5 6 7) while (&amp;lt; a 4) repeat 1 collect a) ;; Evaluates to: (1) Hangi listenin daha uzun olduğunu belirleyin, cevap bilinir bilinmez yinelemeyi kesin:</description>
    </item>
    
    <item>
      <title>Eksileri hücreler ve listeler</title>
      <link>https://www.wikiod.com/tr/common-lisp/eksileri-hucreler-ve-listeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/eksileri-hucreler-ve-listeler/</guid>
      <description>Eksiler hücresi nedir? # Noktalı çift olarak da bilinen bir eksi hücre (basılı gösterimi nedeniyle), yalnızca iki nesneden oluşan bir çifttir. &amp;ldquo;cons&amp;rdquo; işlevi tarafından bir eksiler hücresi oluşturulur ve çiftteki öğeler &amp;ldquo;car&amp;rdquo; ve &amp;ldquo;cdr&amp;rdquo; işlevleri kullanılarak çıkarılır.
(cons &amp;quot;a&amp;quot; 4) Örneğin, bu, ilk öğesi (&amp;lsquo;car&amp;rsquo; ile çıkarılabilir) &amp;lsquo;a&amp;rsquo;&amp;rsquo; ve ikinci öğesi (&amp;lsquo;cdr&amp;rsquo; ile çıkarılabilir) &amp;lsquo;4&amp;rsquo; olan bir çift döndürür.
(car (cons &amp;quot;a&amp;quot; 4)) ;;=&amp;gt; &amp;quot;a&amp;quot; (cdr (cons &amp;quot;a&amp;quot; 4)) ;;=&amp;gt; 3 Eksi hücreleri * noktalı çift * gösterimde yazdırılabilir:</description>
    </item>
    
    <item>
      <title>dizi - bir dizi nasıl bölünür</title>
      <link>https://www.wikiod.com/tr/common-lisp/dizi---bir-dizi-nasl-bolunur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/common-lisp/dizi---bir-dizi-nasl-bolunur/</guid>
      <description>Sözdizimi # normal ifade hedef-dizesini böl ve anahtar başlangıç ​​bitiş limiti ile-registers-p omit-unmatched-p paylaşılanp =&amp;gt; liste lispworks:bölünmüş-sıralı ayırıcı-torba dizisi &amp;amp;anahtar başlangıç ​​bitiş testi anahtar birleştirme-ayırıcıları =&amp;gt; diziler bölünmüş dizi sınırlayıcı dizisi &amp;amp;anahtar başlangıç ​​sondan sayım kaldır-boş-alt diziler testi test değil anahtar =&amp;gt; alt dizilerin listesi Normal ifadeler kullanarak dizeleri bölme # CL-PPCRE kitaplığı, dizeleri normal bir ifadeyle eşleşen alt dizelere bölmemize izin veren &amp;ldquo;split&amp;rdquo; işlevini sağlar ve dizenin eşleşmeyen kısımlarını atar.</description>
    </item>
    
  </channel>
</rss>

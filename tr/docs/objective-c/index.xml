<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective-C Dil Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/objective-c/</link>
    <description>Recent content in Objective-C Dil Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objective-C Dilini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/objective-c/objective-c-dilini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/objective-c-dilini-kullanmaya-baslama/</guid>
      <description>Selam Dünya # Bu program çıktı olarak &amp;ldquo;Merhaba Dünya!&amp;rdquo;
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, char * argv[]) { NSLog(@&amp;quot;Hello World!&amp;quot;); } #import, o dosyadaki bilgileri programa içe aktarmak veya dahil etmek istediğimizi belirten bir ön işlemci yönergesidir. Bu durumda derleyici, &amp;lsquo;Foundation&amp;rsquo; çerçevesindeki &amp;lsquo;Foundation.h&amp;rsquo;nin içeriğini dosyanın en üstüne kopyalayacaktır. #import ve #include arasındaki temel fark, #import&amp;rsquo;un diğer #include&amp;rsquo;lara dahil edilmiş dosyaları yeniden işlemeyecek kadar &amp;ldquo;akıllı&amp;rdquo; olmasıdır.
[C Dili belgeleri](https://www.wikiod.com/tr/c/c-dili-ile-baslarken#Selam Dünya) &amp;ldquo;ana&amp;rdquo; işlevi açıklar.</description>
    </item>
    
    <item>
      <title>Kerestecilik</title>
      <link>https://www.wikiod.com/tr/objective-c/kerestecilik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/kerestecilik/</guid>
      <description>Sözdizimi # NSLog(@&amp;ldquo;günlüğe yazılacak metin&amp;rdquo;); // Temel metin günlüğü NSLog(@&amp;ldquo;data: %f - %.2f&amp;rdquo;, myFloat, otherFloat); // Float sayılar dahil günlük kaydı metni. NSLog(@&amp;ldquo;data: %i&amp;rdquo;, myInteger); // Tamsayı dahil metin günlüğü. NSLog(@&amp;ldquo;veri: %@&amp;rdquo;, myStringOrObject); // Başka bir String&amp;rsquo;e veya herhangi bir NSObject türetilmiş nesneye başvuran günlük metni. Çeşitli nesne ve veri türlerini günlüğe kaydetmek için şuraya bakın: Amaç-C, Format Belirticileri
Kerestecilik # NSLog(@&amp;quot;Log Message!&amp;quot;); NSLog(@&amp;quot;NSString value: %@&amp;quot;, stringValue); NSLog(@&amp;quot;Integer value: %d&amp;quot;, intValue); &amp;ldquo;NSLog&amp;quot;un ilk argümanı, günlük mesajı formatını içeren bir &amp;ldquo;NSString&amp;quot;dir.</description>
    </item>
    
    <item>
      <title>NSString</title>
      <link>https://www.wikiod.com/tr/objective-c/nsstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/nsstring/</guid>
      <description>NSString sınıfı, dizelerle (karakter dizileri) çalışmak için Foundation çerçevesinin bir parçasıdır. Ayrıca dizeleri karşılaştırma, arama ve değiştirme yöntemlerini de içerir.
Çeşitli nesne türlerini ve veri türlerini NSString&amp;rsquo;lere yerleştirmek için şuraya bakın: Objective-C, Format Specifiers
Kodlama ve Kod Çözme # // decode NSString *string = [[NSString alloc] initWithData:utf8Data encoding:NSUTF8StringEncoding]; // encode NSData *utf8Data = [string dataUsingEncoding:NSUTF8StringEncoding]; Desteklenen bazı kodlamalar şunlardır:
NSASCIIStringEncoding NSUTF8StringEncoding NSUTF16StringEncoding (== NSUnicodeStringEncoding) &amp;ldquo;utf8Data.bytes&amp;rdquo; öğesinin C dizeleri için gerekli olan bir sonlandırıcı boş karakter içermediğini unutmayın.</description>
    </item>
    
    <item>
      <title>Bloklar</title>
      <link>https://www.wikiod.com/tr/objective-c/bloklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/bloklar/</guid>
      <description>Sözdizimi # // Declare as a local variable:
returnType (^blockName)(parameterType1, parameterType2, &amp;hellip;) = ^returnType(argument1, argument2, &amp;hellip;) {&amp;hellip;};
// Declare as a property:
@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);
// Declare as a method parameter:
- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;
// Declare as an argument to a method call:
[someObject someMethodThatTakesABlock:^returnType (parameters) {&amp;hellip;}];
// Declare as a typedef:
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&amp;hellip;};
// Declare a C function return a block object:</description>
    </item>
    
    <item>
      <title>Tektonlar</title>
      <link>https://www.wikiod.com/tr/objective-c/tektonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/tektonlar/</guid>
      <description>Kullanmadan önce bu konuyu ( http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons ) okuduğunuzdan emin olun.
Grand Central Dispatch&amp;rsquo;i (GCD) Kullanma # GCD, birden çok iş parçacığından çağrılsa bile, singleton&amp;rsquo;unuzun yalnızca bir kez başlatılmasını garanti eder. Bunu, &amp;ldquo;paylaşılan&amp;rdquo; adlı tek bir örnek için herhangi bir sınıfa ekleyin.
+ (instancetype)shared { // Variable that will point to the singleton instance. The `static` // modifier makes it behave like a global variable: the value assigned // to it will &amp;quot;survive&amp;quot; the method call.</description>
    </item>
    
    <item>
      <title>Düşük Seviyeli Çalışma Zamanı Ortamı</title>
      <link>https://www.wikiod.com/tr/objective-c/dusuk-seviyeli-calsma-zaman-ortam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/dusuk-seviyeli-calsma-zaman-ortam/</guid>
      <description>Objective-C çalışma zamanını kullanmak için içe aktarmanız gerekir.
#import &amp;lt;objc/objc.h&amp;gt; Yöntem Swizzling kullanarak büyütme yöntemleri # Objective-C çalışma zamanı, çalışma zamanında bir yöntemin uygulamasını değiştirmenize olanak tanır. Buna method swizzling adı verilir ve genellikle iki yöntemin uygulamalarını değiştirmek için kullanılır. Örneğin, &amp;lsquo;foo&amp;rsquo; ve &amp;lsquo;bar&amp;rsquo; yöntemleri değiştirilirse, &amp;lsquo;foo&amp;rsquo; mesajının gönderilmesi şimdi &amp;lsquo;bar&amp;rsquo; uygulamasını yürütecektir ve bunun tersi de geçerlidir.
Bu teknik, sistem tarafından sağlanan sınıfların yöntemleri gibi doğrudan düzenleyemeyeceğiniz mevcut yöntemleri genişletmek veya &amp;ldquo;yamalamak&amp;rdquo; için kullanılabilir.</description>
    </item>
    
    <item>
      <title>protokoller</title>
      <link>https://www.wikiod.com/tr/objective-c/protokoller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/protokoller/</guid>
      <description>İsteğe bağlı ve gerekli yöntemler # Varsayılan olarak, bir protokolde bildirilen tüm yöntemler gereklidir. Bu, bu protokole uyan herhangi bir sınıfın bu yöntemleri uygulaması gerektiği anlamına gelir.
Ayrıca isteğe bağlı yöntemler bildirmek de mümkündür. Bu yöntemler ancak ihtiyaç duyulduğunda uygulanabilir.
İsteğe bağlı yöntemleri @opsiyonel yönergesi ile işaretlersiniz.
@protocol NewProtocol - (void)protocolMethod:(id)argument; @optional - (id)anotherMethod; @end Bu durumda, yalnızca &amp;ldquo;anotherMethod&amp;rdquo; isteğe bağlı olarak işaretlenir; @opsiyonel yönergesi olmayan yöntemlerin gerekli olduğu varsayılır.</description>
    </item>
    
    <item>
      <title>Anahtar Değer Kodlama  Anahtar Değer Gözlemleme</title>
      <link>https://www.wikiod.com/tr/objective-c/anahtar-deger-kodlama--anahtar-deger-gozlemleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/anahtar-deger-kodlama--anahtar-deger-gozlemleme/</guid>
      <description>En Yaygın Gerçek Hayat Anahtar Değer Kodlama Örneği # Anahtar Değer Kodlaması, NSKeyValueCoding protokolü kullanılarak NSObject&amp;rsquo;e entegre edilmiştir.
Bu ne anlama geliyor?
Bu, herhangi bir id nesnesinin valueForKey yöntemini ve bunun valueForKeyPath vb. gibi çeşitli türevlerini çağırabileceği anlamına gelir. &#39;
Ayrıca, herhangi bir id nesnesinin setValue yöntemini ve onun çeşitli türevlerini de çağırabileceği anlamına gelir.
Örnek:
id obj = [[MyClass alloc] init]; id value = [obj valueForKey:@&amp;quot;myNumber&amp;quot;]; int myNumberAsInt = [value intValue]; myNumberAsInt = 53; [obj setValue:@(myNumberAsInt) forKey:@&amp;quot;myNumber&amp;quot;]; İstisnalar:</description>
    </item>
    
    <item>
      <title>Sınıflar ve Nesneler</title>
      <link>https://www.wikiod.com/tr/objective-c/snflar-ve-nesneler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/snflar-ve-nesneler/</guid>
      <description>Sözdizimi # Cat *cat = [[Cat alloc] init]; // Cat türünde cat nesnesi oluştur Köpek *köpek = [[Köpek tahsisi] init]; // Dog türünde köpek nesnesi oluştur NSObject *someObject = [NSObject tahsisi]; [someObject init]; // bunu yapma XYZObject *nesne = [XYZObject yeni]; // Başlatma için HİÇBİR argüman gerekmiyorsa, nesneler oluşturmak için new kullanın NSString *someString = @&amp;ldquo;Merhaba, Dünya!&amp;rdquo;; // literal sözdizimi ile bir NSString oluşturma NSNumber *myFloat = @3.14f; // Değişmez sözdizimi kullanarak bir NSNumber oluşturmak için başka bir örnek NSNumber *myInt = @(84 / 2); // Kutulu bir ifade kullanarak bir nesne oluşturun Tahsis ve başlatma arasındaki fark # Çoğu nesne yönelimli dilde, bir nesne için bellek ayırmak ve onu başlatmak atomik bir işlemdir:</description>
    </item>
    
    <item>
      <title>NSURL</title>
      <link>https://www.wikiod.com/tr/objective-c/nsurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/objective-c/nsurl/</guid>
      <description>Oluşturmak # NSString&amp;rsquo;den:
NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; Ayrıca aşağıdaki yöntemleri de kullanabilirsiniz:
- initWithString: + URLWithString:relativeToURL: - initWithString:relativeToURL: + fileURLWithPath:isDirectory: - initFileURLWithPath:isDirectory: + fileURLWithPath: - initFileURLWithPath: Designated Initializer + fileURLWithPathComponents: + URLByResolvingAliasFileAtURL:options:error: + URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: - initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: + fileURLWithFileSystemRepresentation:isDirectory:relativeToURL: - getFileSystemRepresentation:maxLength: - initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL: NSURL&amp;rsquo;yi karşılaştırın # NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; NSURL *myUrl2 = [NSURL URLWithString: urlString]; if ([myUrl isEqual:myUrl2]) return YES; Yolu kaldırarak ve ekleyerek Dosya URL&amp;rsquo;sini Değiştirme ve Dönüştürme # 1.</description>
    </item>
    
  </channel>
</rss>

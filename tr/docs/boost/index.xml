<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boost Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/boost/</link>
    <description>Recent content in Boost Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/boost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boost ile başlarken</title>
      <link>https://www.wikiod.com/tr/boost/boost-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/boost-ile-baslarken/</guid>
      <description>Kurulum veya Kurulum # Bkz. Başlarken Hızlandırma.
Boost kitaplıklarının çoğu yalnızca üstbilgidir, yani derlemeniz veya bağlantı kurmanız gereken hiçbir şey yoktur.
Boost&amp;rsquo;un en son sürümünü aldığınızdan emin olun:
www.boost.org adresini ziyaret edin Güncel Sürüm indirmesini arayın. Şu anda, bu bağlantılar burada. İşletim sisteminiz için uygun arşiv dosyasını seçin ve indirin. Yalnızca başlık kitaplıkları daha sonra ilgili başlık dosyalarının eklenmesiyle kullanılabilir.
Birkaç Boost kitaplığı derleme gerektirir:
Boost.Krono Boost.Context Boost.Dosya sistemi Boost.GraphParalel Boost.</description>
    </item>
    
    <item>
      <title>boost.python&#39;u kullanma</title>
      <link>https://www.wikiod.com/tr/boost/boostpythonu-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/boostpythonu-kullanma/</guid>
      <description>Boost.Python&amp;rsquo;a Giriş Örneği # Python projesinde bir C++ kitaplığı kullanmanız gerektiğinde işler kolaydır. Sadece Boost&amp;rsquo;u kullanabilirsiniz.
Her şeyden önce, ihtiyacınız olan bileşenlerin bir listesi:
Bir CMakeList.txt dosyası, çünkü CMake kullanacaksınız. C++ projesinin C++ dosyaları. python dosyası - bu sizin python projenizdir. Küçük bir C++ dosyasıyla başlayalım. C++ projemiz, &amp;ldquo;Bu ilk denemedir&amp;rdquo; bazı dizelerini döndüren yalnızca bir yönteme sahiptir. CppProject.cpp olarak adlandırın
char const *firstMethod() { return &amp;quot;This is the first try.</description>
    </item>
    
    <item>
      <title>Boost Program Seçenekleri</title>
      <link>https://www.wikiod.com/tr/boost/boost-program-secenekleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/boost-program-secenekleri/</guid>
      <description>Temel Kullanım # Boost program seçenekleri, komut satırı bağımsız değişkenlerini ayrıştırmak ve işlemek için basit ve güvenli bir yol sağlar.
#include &amp;lt;boost/program_options.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; int main(int argc, char** argv) { namespace po = boost::program_options; po::variables_map vm; po::options_description desc(&amp;quot;Allowed Options&amp;quot;); // declare arguments desc.add_options() (&amp;quot;name&amp;quot;, po::value&amp;lt;std::string&amp;gt;()-&amp;gt;required(), &amp;quot;Type your name to be greeted!&amp;quot;); // parse arguments and save them in the variable map (vm) po::store(po::parse_command_line(argc, argv, desc), vm); std::cout &amp;lt;&amp;lt; &amp;quot;Hello &amp;quot; &amp;lt;&amp;lt; vm[&amp;quot;name&amp;quot;].</description>
    </item>
    
    <item>
      <title>String Algoritmaları Kitaplığını artır</title>
      <link>https://www.wikiod.com/tr/boost/string-algoritmalar-kitaplgn-artr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/string-algoritmalar-kitaplgn-artr/</guid>
      <description>Dize Algroritmlerinde Belgelendirmeyi Artırın
boost::split() # #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/algorithm/string.hpp&amp;gt; using namespace std; int main() { // String to split string str = &amp;quot;You&#39;re supposed to see this!|NOT THIS!!!!!!&amp;quot;; // Line container vector&amp;lt;string&amp;gt; lines; // Splits string boost::split(lines, str, boost::is_any_of(&amp;quot;|&amp;quot;), boost::token_compress_on); // Outputs 1 half of the split string cout &amp;lt;&amp;lt; lines.at(0).c_str() &amp;lt;&amp;lt; endl; // Waits for input before program exits cin.get(); return 0; } psuedocode: içindeki program aşağıdadır:</description>
    </item>
    
    <item>
      <title>Boost Akümülatörleri Çerçevesi</title>
      <link>https://www.wikiod.com/tr/boost/boost-akumulatorleri-cercevesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/boost-akumulatorleri-cercevesi/</guid>
      <description>Ortalama ve varyansı hesaplama # #include &amp;lt;iostream&amp;gt; #include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/stats.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/mean.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/variance.hpp&amp;gt; int main() { using namespace boost::accumulators; accumulator_set&amp;lt;int, stats&amp;lt;tag::mean, tag::variance&amp;gt;&amp;gt; acc; for(int i = 1; i &amp;lt;= 6; i++) acc(i); std::cout &amp;lt;&amp;lt; &amp;quot;mean=&amp;quot; &amp;lt;&amp;lt; mean(acc) &amp;lt;&amp;lt; &amp;quot;, variance=&amp;quot; &amp;lt;&amp;lt; variance(acc) &amp;lt;&amp;lt; &#39;\n&#39;; // prints &amp;quot;mean=3.5, variance=2.91667&amp;quot; return 0; } </description>
    </item>
    
    <item>
      <title>zaman uyumsuz yükseltme işlemi</title>
      <link>https://www.wikiod.com/tr/boost/zaman-uyumsuz-yukseltme-islemi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/zaman-uyumsuz-yukseltme-islemi/</guid>
      <description>Bir alt işlemin 3 borusunun tümünü eşzamansız olarak kullanma. # #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/process.hpp&amp;gt; #include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;boost/process/windows.hpp&amp;gt; int Run( const std::string&amp;amp; exeName, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; args, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; input, ///&amp;lt; [in] data for stdin std::string&amp;amp; output, ///&amp;lt; [out] data from stdout std::string&amp;amp; error ///&amp;lt; [out] data from stderr ) { using namespace boost; asio::io_service ios; // stdout setup // std::vector&amp;lt;char&amp;gt; vOut(128 &amp;lt;&amp;lt; 10); // that worked well for my decoding app.</description>
    </item>
    
    <item>
      <title>BOOST- OpevCV Kullanarak Görüntüleri Karşılaştırın</title>
      <link>https://www.wikiod.com/tr/boost/boost--opevcv-kullanarak-goruntuleri-karslastrn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/boost/boost--opevcv-kullanarak-goruntuleri-karslastrn/</guid>
      <description>Bu belge, harici bir Görüntünün nasıl test edilebileceğini ve OpenCV&amp;rsquo;nin çıktı görüntüsüyle nasıl karşılaştırılabileceğini açıklar. Örneğin, iki bulanık görüntüyü karşılaştırmak ve her ikisinin de aynı olup olmadığını test etmek için, orijinal bir görüntüyü harici bir yazılımda (WiT Görüntü İşleme yazılımını kullandım) bulanıklaştırırız veya herhangi bir bulanık görüntüyü çevrimiçi olarak indiririz1. Visual Studio&amp;rsquo;da bir Win32 OpenCV projesi oluşturun. Orijinal görüntüyü OpenCV&amp;rsquo;ye giriş olarak okuyun. Orijinal görüntüyü OpenCV&amp;rsquo;de bulanıklaştırın ve çıktı1 ile karşılaştırın.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bahar Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/spring/</link>
    <description>Recent content in bahar Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Baharla başlarken</title>
      <link>https://www.wikiod.com/tr/spring/baharla-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/baharla-baslarken/</guid>
      <description>Kurulum (XML Yapılandırması) # Merhaba Bahar oluşturma adımları:
İhtiyaçlarınızı daha iyi karşılayıp karşılamayacağını görmek için Spring Boot&amp;lsquo;i araştırın. Doğru bağımlılıklarla kurulmuş bir projeye sahip olun. Maven veya Gradle kullanmanız önerilir. Bir POJO sınıfı oluşturun, örn. Çalışan.java Sınıfınızı ve değişkenlerinizi tanımlayabileceğiniz bir XML dosyası oluşturun. ör. &amp;ldquo;beans.xml&amp;rdquo; ana sınıfınızı oluşturun, ör. &amp;lsquo;Müşteri.java&amp;rsquo; spring-beans (ve geçişli bağımlılıklarını!) bağımlılık olarak ekleyin. &amp;ldquo;Çalışan.java&amp;rdquo;:
package com.test; public class Employee { private String name; public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>Fasulye kapsamları</title>
      <link>https://www.wikiod.com/tr/spring/fasulye-kapsamlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/fasulye-kapsamlar/</guid>
      <description>Web uyumlu bağlamlarda ek kapsamlar # Yalnızca web&amp;rsquo;i tanıyan bir uygulama bağlamında kullanılabilen birkaç kapsam vardır:
istek - HTTP isteği başına yeni fasulye örneği oluşturulur oturum - HTTP oturumu başına yeni fasulye örneği oluşturulur application - &amp;lsquo;ServletContext&amp;rsquo; başına yeni fasulye örneği oluşturulur globalSession - Portlet ortamında global oturum başına yeni bean örneği oluşturulur (Servlet ortamında global oturum kapsamı, oturum kapsamına eşittir) websocket - WebSocket oturumu başına yeni fasulye örneği oluşturulur Spring Web MVC ortamında web kapsamlı fasulyeleri bildirmek ve bunlara erişmek için ek kurulum gerekmez.</description>
    </item>
    
    <item>
      <title>Fasulye oluşturma ve kullanma</title>
      <link>https://www.wikiod.com/tr/spring/fasulye-olusturma-ve-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/fasulye-olusturma-ve-kullanma/</guid>
      <description>Belirli bir türdeki tüm çekirdeklerin otomatik olarak bağlanması # Aynı arabirimin birden çok uygulamanız varsa, Spring hepsini bir koleksiyon nesnesine otomatik olarak bağlayabilir. Doğrulayıcı kalıbı kullanan bir örnek kullanacağım1
Foo Sınıfı:
public class Foo { private String name; private String emailAddress; private String errorMessage; /** Getters &amp;amp; Setters omitted **/ } Arayüz:
public interface FooValidator { public Foo validate(Foo foo); } Ad Doğrulayıcı Sınıfı:
@Component(value=&amp;quot;FooNameValidator&amp;quot;) public class FooNameValidator implements FooValidator { @Override public Foo validate(Foo foo) { //Validation logic goes here.</description>
    </item>
    
    <item>
      <title>Uygulama Bağlam Yapılandırması</title>
      <link>https://www.wikiod.com/tr/spring/uygulama-baglam-yaplandrmas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/uygulama-baglam-yaplandrmas/</guid>
      <description>Spring, bir &amp;ldquo;ApplicationContext&amp;rdquo; yapılandırmasının son derece esnek olmasını sağlamıştır. Her bir konfigürasyon tipini uygulamanın sayısız yolu vardır ve hepsi güzel bir şekilde karıştırılabilir ve eşleştirilebilir.
Java yapılandırması bir açık yapılandırma biçimidir. &amp;lsquo;ApplicationContext&amp;rsquo;in bir parçası olacak çekirdekleri belirtmek ve ayrıca her bir çekirdeğin bağımlılıklarını tanımlamak ve kablolamak için bir &amp;lsquo;@Configuration&amp;rsquo; açıklamalı sınıfı kullanılır.
Xml yapılandırması bir açık yapılandırma biçimidir. &amp;lsquo;ApplicationContext&amp;rsquo;in bir parçası olacak çekirdekleri tanımlamak için belirli bir xml şeması kullanılır. Bu aynı şema, her bir çekirdeğin bağımlılıklarını tanımlamak ve kablolamak için kullanılır.</description>
    </item>
    
    <item>
      <title>Yay Çekirdeği</title>
      <link>https://www.wikiod.com/tr/spring/yay-cekirdegi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/yay-cekirdegi/</guid>
      <description>Spring Core&amp;rsquo;a Giriş # Spring geniş bir çerçevedir, bu nedenle Spring çerçevesi, yayı hafif yapan birkaç modüle bölünmüştür. Bazı önemli modüller şunlardır:
Yay Çekirdeği Yay AOP&amp;rsquo;si Bahar JDBC Bahar İşlemi Yay ORM&amp;rsquo;si Yay MVC&amp;rsquo;si Spring&amp;rsquo;in tüm modülleri Spring Core dışında birbirinden bağımsızdır. Spring core temel modül olduğundan, tüm modüllerde Spring Core kullanmalıyız.
Bahar Çekirdeği
Spring Core, bağımlılık yönetimi hakkında her şeyi konuşuyor. Bu, bahara sağlanan herhangi bir keyfi sınıf varsa, Spring&amp;rsquo;in bağımlılığı yönetebileceği anlamına gelir.</description>
    </item>
    
    <item>
      <title>Görev Yürütme ve Zamanlama</title>
      <link>https://www.wikiod.com/tr/spring/gorev-yurutme-ve-zamanlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/gorev-yurutme-ve-zamanlama/</guid>
      <description>Cron ifadesi # Bir Cron ifadesi altı ardışık alandan oluşur -
second, minute, hour, day of month, month, day(s) of week ve aşağıdaki gibi ilan edilir
@Scheduled(cron = &amp;quot;* * * * * *&amp;quot;) timezone değerini de - olarak ayarlayabiliriz.
@Scheduled(cron=&amp;quot;* * * * * *&amp;quot;, zone=&amp;quot;Europe/Istanbul&amp;quot;) Notlar: -
syntax means example explanation ------------------------------------------------------------------------------------ * match any &amp;quot;* * * * * *&amp;quot; do always */x every x &amp;quot;*/5 * * * * *&amp;quot; do every five seconds ?</description>
    </item>
    
    <item>
      <title>İlkbaharda şartlı fasulye kaydı</title>
      <link>https://www.wikiod.com/tr/spring/ilkbaharda-sartl-fasulye-kayd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/ilkbaharda-sartl-fasulye-kayd/</guid>
      <description>Koşulu kullanırken dikkat edilmesi gereken önemli nokta
Koşul sınıfı doğrudan sınıf olarak adlandırılır (bahar fasulyesi olarak değil), bu nedenle @Value özelliği enjeksiyonunu kullanamaz, yani içine başka hiçbir bahar fasulyesi enjekte edilemez. Java docs&amp;rsquo;tan - Koşullar, &amp;lsquo;BeanFactoryPostProcessor&amp;rsquo; ile aynı kısıtlamalara uymalı ve bean örnekleriyle asla etkileşime girmemeye özen göstermelidir. Burada atıfta bulunulan kısıtlamalar şunlardır: Bir &amp;ldquo;BeanFactoryPostProcessor&amp;rdquo;, bean tanımlarıyla etkileşime girebilir ve bunları değiştirebilir, ancak hiçbir zaman bean örnekleriyle etkileşime girmez. Bunu yapmak, erken çekirdek oluşumuna, kabın ihlaline ve istenmeyen yan etkilere neden olabilir.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu (DI) ve Kontrolün Tersine Çevirilmesi (IoC)</title>
      <link>https://www.wikiod.com/tr/spring/bagmllk-enjeksiyonu-di-ve-kontrolun-tersine-cevirilmesi-ioc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/bagmllk-enjeksiyonu-di-ve-kontrolun-tersine-cevirilmesi-ioc/</guid>
      <description>Büyük yazılım uygulamalarının kaynak kodu tipik olarak birden çok birim halinde düzenlenir. Bir birimin tanımı normalde kullanılan programlama diline göre değişir. Örneğin, prosedürel bir programlama dilinde (C gibi) yazılan kod, &amp;ldquo;fonksiyonlar&amp;rdquo; veya &amp;ldquo;prosedürler&amp;rdquo; olarak düzenlenir. Benzer şekilde, nesne yönelimli bir programlama dilinde (Java, Scala ve C# gibi) kodlar &amp;ldquo;sınıflar&amp;rdquo;, &amp;ldquo;arayüzler&amp;rdquo; vb. şeklinde düzenlenir. Bu kod organizasyonu birimleri, genel yazılım uygulamasını oluşturan ayrı birimler olarak düşünülebilir.
Uygulamaların birden fazla birimi olduğunda, bir birimin işlevselliğini tamamlamak için diğerlerini kullanması gerektiğinde bu birimler arasındaki karşılıklı bağımlılıklar ortaya çıkar.</description>
    </item>
    
    <item>
      <title>RestŞablon</title>
      <link>https://www.wikiod.com/tr/spring/restsablon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/restsablon/</guid>
      <description>Büyük Bir Dosyayı İndirme # &amp;lsquo;RestTemplate&amp;rsquo;in &amp;lsquo;getForObject&amp;rsquo; ve &amp;lsquo;getForEntity&amp;rsquo; yöntemleri, tüm yanıtı belleğe yükler. Bu, yetersiz bellek istisnalarına neden olabileceğinden büyük dosyaları indirmek için uygun değildir. Bu örnek, bir GET isteğinin yanıtının nasıl akışa alınacağını gösterir.
RestTemplate restTemplate // = ...; // Optional Accept header RequestCallback requestCallback = request -&amp;gt; request.getHeaders() .setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL)); // Streams the response instead of loading it all in memory ResponseExtractor&amp;lt;Void&amp;gt; responseExtractor = response -&amp;gt; { // Here I write the response to a file but do what you like Path path = Paths.</description>
    </item>
    
    <item>
      <title>JdbcŞablon</title>
      <link>https://www.wikiod.com/tr/spring/jdbcsablon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring/jdbcsablon/</guid>
      <description>JdbcTemplate sınıfı, SQL sorguları yürütür, deyimleri ve saklı yordam çağrılarını günceller, ResultSets üzerinde yineleme ve döndürülen parametre değerlerinin çıkarılmasını gerçekleştirir. Ayrıca JDBC istisnalarını yakalar ve bunları org.springframework.dao paketinde tanımlanan genel, daha bilgilendirici, istisna hiyerarşisine çevirir.
JdbcTemplate sınıfının örnekleri, yapılandırıldıktan sonra iş parçacığı güvenlidir, böylece bu paylaşılan referansı birden çok DAO&amp;rsquo;ya güvenle enjekte edebilir.
Temel Sorgu yöntemleri # JdbcTemplate&amp;rsquo;de bulunan bazı queryFor* yöntemleri, CRUD işlemlerini gerçekleştiren basit sql ifadeleri için kullanışlıdır.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue.js Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/vue-js/</link>
    <description>Recent content in Vue.js Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/vue-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue.js&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/vue-js/vuejsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/vuejsyi-kullanmaya-baslama/</guid>
      <description>&amp;ldquo;Selam Dünya!&amp;rdquo; programı # Vue.js kullanmaya başlamak için, HTML&amp;rsquo;nizde komut dosyasının bulunduğundan emin olun. Örneğin, aşağıdakini HTML&amp;rsquo;nize ekleyin.
&amp;lt;script src=&amp;quot;https://npmcdn.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Basit Örnek # HTML şablonu # &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; JavaScript # new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue.js!&#39; } }) Bu örneğin canlı demosunu görün.
Ayrıca Vue.js tarafından yapılan &amp;ldquo;Merhaba Dünya&amp;rdquo; örneğine göz atmak isteyebilirsiniz.
Vue 2&amp;rsquo;de Merhaba Dünya (JSX yolu) # JSX&amp;rsquo;in tarayıcı tarafından yorumlanması amaçlanmamıştır.</description>
    </item>
    
    <item>
      <title>Koşullu Oluşturma</title>
      <link>https://www.wikiod.com/tr/vue-js/kosullu-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/kosullu-olusturma/</guid>
      <description>Sözdizimi # &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if &amp;lt;element v-if=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt;&amp;lt;element v-else=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-if | v-başka &amp;lt;template v-if=&amp;quot;condition&amp;quot;&amp;gt;...&amp;lt;/template&amp;gt; // şablonlu v-if &amp;lt;element v-show=&amp;quot;condition&amp;quot;&amp;gt;&amp;lt;/element&amp;gt; //v-show &amp;ldquo;v-if&amp;rdquo; ve &amp;ldquo;v-show&amp;rdquo; arasındaki farkı hatırlamak çok önemlidir. Kullanımları hemen hemen aynı olsa da, &amp;ldquo;v-if&amp;rdquo; * ile bağlantılı bir öğe, yalnızca durumu ilk kez için &amp;ldquo;true&amp;rdquo; olduğunda DOM*&amp;lsquo;a işlenir. &amp;lsquo;v-show&amp;rsquo; yönergesini kullanırken, *tüm öğeler *DOM&amp;rsquo;a dönüştürülür, ancak koşul &amp;lsquo;yanlış&amp;rsquo; ise &amp;lsquo;görüntüleme&amp;rsquo; stili kullanılarak gizlenir!
Genel Bakış # Vue.js&amp;rsquo;de koşullu oluşturma, şablondaki öğeler üzerinde bir dizi yönerge kullanılarak elde edilir.</description>
    </item>
    
    <item>
      <title>Yaşam Döngüsü Kancaları</title>
      <link>https://www.wikiod.com/tr/vue-js/yasam-dongusu-kancalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/yasam-dongusu-kancalar/</guid>
      <description>Sık Karşılaşılan Tuzaklar: ready() kancasından DOM&amp;rsquo;a erişme # &amp;lsquo;ready()&amp;rsquo; kancası için yaygın bir kullanım durumu, DOM&amp;rsquo;a erişmektir, ör. bir Javascript eklentisi başlatmak için bir öğenin boyutlarını vb. alın.
Sorun
Vue&amp;rsquo;nin eşzamansız DOM güncelleme mekanizması nedeniyle, ready() kancası çağrıldığında DOM&amp;rsquo;nin tamamen güncellendiği garanti edilmez. Öğe tanımsız olduğu için bu genellikle bir hatayla sonuçlanır.
Çözüm
Bu durumda, $nextTick() örnek yöntemi yardımcı olabilir. Bu yöntem, sağlanan geri arama işlevinin yürütülmesini bir sonraki onay işaretine kadar erteler; bu, tüm DOM güncellemelerinin biteceği garanti edildiğinde tetiklendiği anlamına gelir.</description>
    </item>
    
    <item>
      <title>Özel Direktifler</title>
      <link>https://www.wikiod.com/tr/vue-js/ozel-direktifler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/ozel-direktifler/</guid>
      <description>Sözdizimi # Vue.directive(id, tanım); Vue.directive(id, update); //yalnızca güncelleme işlevine ihtiyacınız olduğunda. Parametreler # parametre Ayrıntılar &amp;ldquo;kimlik&amp;rdquo; String - &amp;ldquo;v-&amp;rdquo; öneki olmadan kullanılacak yönerge kimliği. (Kullanırken v- önekini ekleyin) &amp;rsquo;tanım&#39; Nesne - Bir tanım nesnesi birkaç kanca işlevi sağlayabilir (tümü isteğe bağlıdır): &amp;lsquo;bağlama&amp;rsquo;, &amp;lsquo;güncelleme&amp;rsquo; ve &amp;lsquo;unbind&amp;rsquo; Temel Bilgiler # Çekirdekte gönderilen varsayılan direktif setine ek olarak, Vue.js ayrıca özel direktifleri kaydetmenize izin verir. Özel yönergeler, veri değişikliklerini rastgele DOM davranışına eşlemek için bir mekanizma sağlar.</description>
    </item>
    
    <item>
      <title>sahne</title>
      <link>https://www.wikiod.com/tr/vue-js/sahne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/sahne/</guid>
      <description>camelCase &amp;lt;=&amp;gt; kebap çantası # &amp;ldquo;props&amp;quot;larınızın adlarını tanımlarken, HTML öznitelik adlarının büyük/küçük harfe duyarlı olmadığını her zaman unutmayın. Bunun anlamı, bileşen tanımınızda deve durumunda bir &amp;lsquo;prop&amp;rsquo; tanımlarsanız&amp;hellip;
Vue.component(&#39;child&#39;, { props: [&#39;myProp&#39;], ... }); &amp;hellip;HTML bileşeninizde onu benim-prop olarak çağırmalısınız.
Sahne ile ebeveynden çocuğa Veri Aktarma # Vue.js&amp;rsquo;de her bileşen örneğinin kendi yalıtılmış kapsamı vardır; bu, bir üst bileşenin bir alt bileşeni varsa, alt bileşenin kendi yalıtılmış kapsamı ve üst bileşenin kendi yalıtılmış kapsamı olduğu anlamına gelir.</description>
    </item>
    
    <item>
      <title>Bunu Vue&#39;da kullanmak</title>
      <link>https://www.wikiod.com/tr/vue-js/bunu-vueda-kullanmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/bunu-vueda-kullanmak/</guid>
      <description>StackOverflow&amp;rsquo;ta Vue kodunda bulduğumuz en yaygın hatalardan biri &amp;ldquo;bu&amp;quot;nun yanlış kullanılmasıdır. En yaygın hatalar genellikle iki alana ayrılır: vaatler veya diğer eşzamansız işlevler için geri aramalarda &amp;rsquo;this&amp;rsquo; kullanmak ve yöntemleri, hesaplanan özellikleri vb. tanımlamak için ok işlevlerini kullanmak.
YANLIŞ! &amp;ldquo;Buna&amp;rdquo; atıfta bulunan bir yöntemi tanımlamak için bir ok işlevi kullanma # new Vue({ el:&amp;quot;#app&amp;quot;, data:{ foo: &amp;quot;bar&amp;quot; }, methods:{ // This is wrong! Arrow functions capture &amp;quot;this&amp;quot; lexically // and &amp;quot;this&amp;quot; will refer to the window.</description>
    </item>
    
    <item>
      <title>yuvalar</title>
      <link>https://www.wikiod.com/tr/vue-js/yuvalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/yuvalar/</guid>
      <description>Önemli! Oluşturulduktan sonra slotlar, slotlar için pozisyon sırasını garanti etmez. İlk olan slot, render sonrası farklı bir konuma sahip olabilir.
Adlandırılmış Yuvaları Kullanma # Adlandırılmış alanlar, tek yuvalara benzer şekilde çalışır, ancak bunun yerine alt bileşen şablonunuzdaki farklı bölgelere içerik dağıtmanıza olanak tanır.
Önceki örnekten &amp;ldquo;page&amp;rdquo; bileşenini alın, ancak şablonunu aşağıdaki gibi olacak şekilde değiştirin:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;slot name=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;main&amp;gt; &amp;lt;slot name=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;ldquo;Sayfa&amp;rdquo; bileşenini kullanırken, &amp;ldquo;slot&amp;rdquo; özniteliği aracılığıyla artık içeriğin nereye yerleştirileceğini belirleyebiliriz:</description>
    </item>
    
    <item>
      <title>VueJS &#43; Redux ile Vua-Redux (En İyi Çözüm)</title>
      <link>https://www.wikiod.com/tr/vue-js/vuejs--redux-ile-vua-redux-en-iyi-cozum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/vuejs--redux-ile-vua-redux-en-iyi-cozum/</guid>
      <description>Vua-Redux nasıl kullanılır # NPM&amp;rsquo;den Vua Redux yükleme:
Şunlardan yükleyin:
npm i vua-redux --save Başlat: # ===============
// ana.js
import Vue from &#39;vue&#39;; import { reduxStorePlugin } from &#39;vua-redux&#39;; import AppStore from &#39;./AppStore&#39;; import App from &#39;./Component/App&#39;; // install vua-redux Vue.use(reduxStorePlugin); new Vue({ store: AppStore, render(h) { return &amp;lt;App /&amp;gt; } }); // AppStore.js
import { createStore } from &#39;redux&#39;; const initialState = { todos: [] }; const reducer = (state = initialState, action) =&amp;gt; { switch(action.</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://www.wikiod.com/tr/vue-js/vuex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/vuex/</guid>
      <description>Vuex, Vue.js uygulamaları için bir durum yönetimi modeli + kitaplığıdır. Durumun yalnızca öngörülebilir bir şekilde mutasyona uğramasını sağlayan kurallarla, bir uygulamadaki tüm bileşenler için merkezi bir depo görevi görür. Ayrıca, sıfır yapılandırmalı zaman yolculuğu hata ayıklama ve durum anlık görüntüsünü dışa/içe aktarma gibi gelişmiş özellikler sağlamak için Vue&amp;rsquo;nun resmi geliştirme araçları uzantısıyla bütünleşir.
Vuex nedir? # Vuex, uygulamanızda kullanım için merkezi bir veri deposu sunan Vue.js için resmi bir eklentidir. Daha basit uygulama tasarımı ve muhakemesine yol açan tek yönlü bir veri akışına sahip Flux uygulama mimarisinden büyük ölçüde etkilenir.</description>
    </item>
    
    <item>
      <title>Özel Filtreler</title>
      <link>https://www.wikiod.com/tr/vue-js/ozel-filtreler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vue-js/ozel-filtreler/</guid>
      <description>Sözdizimi # Vue.filter(ad, fonksiyon(değer){}); //Temel Vue.filter(name, function(value, start, end){}); //Sarma değerleriyle temel Vue.filter(ad, fonksiyon(değer, giriş){}); //Dinamik Vue.filter(ad, { okuma: işlev(değer){}, yazma: işlev(değer){} }); //İki yönlü Parametreler # parametre Ayrıntılar isim String - filtrenin istenen çağrılabilir adı değer [Geri arama] Herhangi bir - filtreye geçen verilerin değeri başla [Geri arama] Herhangi bir - geçirilen veriden önce gelen değer son [Geri arama] Herhangi bir - geçirilen veriden sonra gelen değer giriş [Geri arama] Herhangi bir - dinamik sonuçlar için Vue örneğine bağlı kullanıcı girişi Temel # &amp;ldquo;Vue.</description>
    </item>
    
  </channel>
</rss>

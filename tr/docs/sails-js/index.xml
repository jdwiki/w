<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yelkens.js Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/sails-js/</link>
    <description>Recent content in yelkens.js Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/sails-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>yelkens.js&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/sails-js/yelkensjsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/yelkensjsyi-kullanmaya-baslama/</guid>
      <description>Yeni bir proje oluşturma # Yelkenleri yükledikten sonra, sadece yazın
$ sails new &amp;lt;project_name&amp;gt; Bu, &amp;lt;project_name&amp;gt; adlı yeni bir klasörde bir iskelet Sails projesi oluşturacaktır.
Boş bir klasöre yazarak da yeni bir proje oluşturabilirsiniz.
$ sails new Uygulamayı başlat # Projeniz oluşturulduktan sonra yazarak uygulamayı başlatabilirsiniz.
$ sails lift Varsayılan olarak, uygulamaya tarayıcıda 1337 numaralı bağlantı noktasından erişebilirsiniz. Bağlantı noktasının bulunduğu URL, terminalde gösterilir.
Sails uygulamasını başlatmanın başka bir yolu da &amp;ldquo;node&amp;rdquo; komutudur:</description>
    </item>
    
    <item>
      <title>Sails ile JSON web belirteci kimlik doğrulaması</title>
      <link>https://www.wikiod.com/tr/sails-js/sails-ile-json-web-belirteci-kimlik-dogrulamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/sails-ile-json-web-belirteci-kimlik-dogrulamas/</guid>
      <description>Yapılandırma # Adım bir # jwToken adında bir servis oluşturmamız gerekiyor. &amp;ldquo;api/services&amp;rdquo; dizinine gidin ve &amp;ldquo;jwToken.js&amp;rdquo; dosyasını oluşturun.
&#39;use strict&#39;; const jwt = require(&#39;jsonwebtoken&#39;), tokenSecret = &amp;quot;secretissecret&amp;quot;; module.exports = { // Generates a token from supplied payload issue(payload) { return jwt.sign( payload, tokenSecret, // Token Secret that we sign it with { expiresIn: &amp;quot;30 days&amp;quot; // Token Expire time }); }, // Verifies token on a request verify(token, callback) { return jwt.</description>
    </item>
    
    <item>
      <title>Plan API&#39;sı</title>
      <link>https://www.wikiod.com/tr/sails-js/plan-apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/plan-apis/</guid>
      <description>Blueprint API nasıl çalışır? # Yelkenler başlangıçta &amp;lsquo;yelken kaldırma&amp;rsquo;yı kullanmaya başladığında, yelkenler, yelkenleriniz olup olmadığına bakar. tanımlanmış herhangi bir kontrolör. Örneğimizde, bir denetleyicimiz var, Kullanıcı kontrolör. Yelkenler daha sonra bu kullanıcı için plan eylemlerine erişim sağlar onları kontrolörün içine kendimiz inşa etmişiz gibi. Yelkenler de sunucuyu kaldırırken otomatik olarak plan rotaları oluşturur. Hatta /config/routes.js içinde hiçbir rota tanımlanmadıysa ve içinde hiçbir eylem tanımlanmadıysa /api/controllers/UserController.js sunucuyu kaldırdıktan sonra açıkça bu rotalar ve eylemler kullanılabilir.</description>
    </item>
    
    <item>
      <title>mysql&#39;i yelkens.js ile yapılandırma</title>
      <link>https://www.wikiod.com/tr/sails-js/mysqli-yelkensjs-ile-yaplandrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/mysqli-yelkensjs-ile-yaplandrma/</guid>
      <description>yelkens.js&amp;rsquo;de mysql veritabanı bağlantısı nasıl yapılandırılır # Bunu yapmak için önce kökünüzdeki config klasörünü bulun. Ardından &amp;lsquo;connections.js&amp;rsquo; dosyasını açın
bul
// someMysqlServer: { // adapter: &#39;sails-mysql&#39;, // host: &#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;, // user: &#39;YOUR_MYSQL_USER&#39;, //optional // password: &#39;YOUR_MYSQL_PASSWORD&#39;, //optional // database: &#39;YOUR_MYSQL_DB&#39; //optional // }, Bu satırları yorumdan çıkarın.
Bağlayıcıya bu şekilde someMysqlServer&amp;rsquo;dan mysql_connection&amp;rsquo;a veya istediğiniz herhangi bir ad için uygun bir ad verin
mysql_connection: { adapter: &#39;sails-mysql&#39;, host: &#39;127.0.0.1&#39;, // can user localhost or mysql connection either user: &#39;root&#39;, // your mysql username password: &#39;xxxxxxxxx&#39;, // your mysql password database: &#39;your database name here&#39; // database name }, Dosyayı kaydet</description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/sails-js/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/yonlendirme/</guid>
      <description>Rotalar, gelen bir istekle karşı karşıya kaldıklarında Sails&amp;rsquo;e ne yapmaları gerektiğini söyleyen kurallardır.
Rotalar config/routes.js içinde tanımlanır. Rotalar yukarıdan aşağıya eşleştirildiği için rotaların sırası önemlidir. Bu, bir joker karakter rotasıyla da eşleştirilebilecek belirli bir rotanız varsa, belirli rotanın joker karakterli rotanın üzerinde tanımlanması gerektiği anlamına gelir.
Bir istek uygulamanıza girdiğinde, yelkens.js, beraberinde gelen tüm parametreleri alır ve bunları sizin için istek nesnesi üzerinde &amp;lsquo;params&amp;rsquo; olarak kullanıma sunar.
Rota hedef nesnesindeki özellikler, req.</description>
    </item>
    
    <item>
      <title>Kontrolörler</title>
      <link>https://www.wikiod.com/tr/sails-js/kontrolorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/kontrolorler/</guid>
      <description>Denetleyiciler (MVC içindeki C), bir web tarayıcısından, mobil uygulamadan veya bir sunucuyla iletişim kurabilen başka herhangi bir sistemden gelen isteklere yanıt vermekten sorumlu olan Sails uygulamanızdaki ana nesnelerdir. Genellikle modelleriniz ve görüşleriniz arasında aracı görevi görürler. Birçok uygulama için, kontrolörler projenizin iş mantığının büyük kısmını içerecektir.
ES2015 Sözdizimi # &#39;use strict&#39;; // This is an example of a /api/controllers/HomeController.js module.exports = { // This is the index action and the route is mapped via /config/routes.</description>
    </item>
    
    <item>
      <title>Modeller</title>
      <link>https://www.wikiod.com/tr/sails-js/modeller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/modeller/</guid>
      <description>Sails, bir veya daha fazla veritabanıyla etkileşimi önemli ölçüde basitleştiren, veri deposundan bağımsız bir araç olan Waterline adlı güçlü bir ORM/ODM ile kurulu olarak gelir. Temel veritabanının üzerinde bir soyutlama katmanı sağlayarak, satıcıya özel entegrasyon kodu yazmadan verilerinizi kolayca sorgulamanıza ve değiştirmenize olanak tanır.
Temel Model # Bu örnek, Sails.js&amp;rsquo;de basit bir modelin nasıl tanımlanacağını gösterir.
yazarak boş bir model dosyası oluşturabilirsiniz.
sails generate model car Yeni &amp;lsquo;Car.js&amp;rsquo; dosyasını &amp;lsquo;api/models/&amp;rsquo; içinde bulacaksınız.</description>
    </item>
    
    <item>
      <title>Yelkenler için MongoDB Adaptörü</title>
      <link>https://www.wikiod.com/tr/sails-js/yelkenler-icin-mongodb-adaptoru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/yelkenler-icin-mongodb-adaptoru/</guid>
      <description>Yapılandırma # Veritabanı ayarlarını config/connections.js içinde yapılandırabilirsiniz.
Örnek:
someMongoDb: { adapter: &#39;sails-mongo&#39;, host: &#39;localhost&#39;, // defaults to `localhost` if omitted port: 27017, // defaults to 27017 if omitted user: &#39;username_here&#39;, // or omit if not relevant password: &#39;password_here&#39;, // or omit if not relevant database: &#39;database_name_here&#39; // or omit if not relevant } Alternatif olarak, Mongo yapılandırmanızı bir URL olarak belirtebilirsiniz.
someMongoDb: { adapter: &#39;sails-mongo&#39;, url: mongodb://username:password@hostname:port/database } Kurulum # NPM&amp;rsquo;den yükleyin.</description>
    </item>
    
    <item>
      <title>Yelkenler için PostgreSQL Veritabanı Adaptörü</title>
      <link>https://www.wikiod.com/tr/sails-js/yelkenler-icin-postgresql-veritaban-adaptoru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sails-js/yelkenler-icin-postgresql-veritaban-adaptoru/</guid>
      <description>Düzenlemek # PostgreSQL bağdaştırıcısını NPM aracılığıyla kurabilirsiniz.
npm install sails-postgresql Yapılandırma # Veritabanı ayarlarını config/connections.js içinde yapılandırabilirsiniz.
İşte bir örnek:
postgresql: { database: &#39;databaseName&#39;, host: &#39;localhost&#39;, user: &#39;root&#39;, password: &#39;&#39;, port: 5432, poolSize: 10, ssl: false }; Alternatif olarak, bağlantı bilgilerini URL formatında da sağlayabilirsiniz:
postgresql: { url: &#39;postgres://username:password@hostname:port/database&#39;, ssl: false }; </description>
    </item>
    
  </channel>
</rss>

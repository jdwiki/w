<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scipy Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/scipy/</link>
    <description>Recent content in scipy Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>scipy&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/scipy/scipyye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/scipy/scipyye-baslarken/</guid>
      <description>SciPy kullanarak seyrek matrisi yoğun matrise dönüştürün # from scipy.sparse import csr_matrix A = csr_matrix([[1,0,2],[0,3,0]]) &amp;gt;&amp;gt;&amp;gt;A &amp;lt;2x3 sparse matrix of type &#39;&amp;lt;type &#39;numpy.int64&#39;&amp;gt;&#39; with 3 stored elements in Compressed Sparse Row format&amp;gt; &amp;gt;&amp;gt;&amp;gt; A.todense() matrix([[1, 0, 2], [0, 3, 0]]) &amp;gt;&amp;gt;&amp;gt; A.toarray() array([[1, 0, 2], [0, 3, 0]]) Scipy Kullanarak Görüntü Manipülasyonu (Temel Görüntü yeniden boyutlandırma) # SciPy, temel görüntü işleme işlevleri sağlar. Bunlar, görüntüleri diskten numpy dizilerine okumak, numpy dizilerini görüntü olarak diske yazmak ve görüntüleri yeniden boyutlandırmak için işlevleri içerir.</description>
    </item>
    
    <item>
      <title>Bir sinyali yumuşatma</title>
      <link>https://www.wikiod.com/tr/scipy/bir-sinyali-yumusatma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/scipy/bir-sinyali-yumusatma/</guid>
      <description>Savitzky–Golay filtresi kullanma # Gürültülü bir sinyal verildiğinde:
import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 plt.plot(x,y) plt.show() Savitzky–Golay filtresi /scipy.github.io/devdocs/generated/scipy.signal.saving_filter kullanılarak düzeltilebilir. html#scipy.signal.saving_filter) yöntemi:
import scipy.signal import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 yhat = scipy.signal.savgol_filter(y, 51, 3) # window size 51, polynomial order 3 plt.plot(x,y) plt.</description>
    </item>
    
    <item>
      <title>scipy.optimize eğri_fit ile fonksiyonları uydurma</title>
      <link>https://www.wikiod.com/tr/scipy/scipyoptimize-egri_fit-ile-fonksiyonlar-uydurma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/scipy/scipyoptimize-egri_fit-ile-fonksiyonlar-uydurma/</guid>
      <description>Bilimsel uygulamalarda, veri noktalarının beklenen oluşumunu gerçek verilere açıklayan bir işlevin takılması genellikle gereklidir. Bu görev için olası bir optimize edici, scipy.optimize&amp;rsquo;dan eğri_fit&amp;rsquo;tir. Aşağıda, eğri_fit uygulamasının bir örneği verilmiştir.
Histogramdan veriye fonksiyon sığdırma # Üstel olarak azalan bir arka planda normal (gauss) dağıtılmış verilerin (ortalama: 3.0, standart sapma: 0.3) bir tepe noktası olduğunu varsayalım. Bu dağılım, birkaç adımda eğri_fit ile donatılabilir:
1.) Gerekli kitaplıkları içe aktarın.
2.) Verilere uydurulacak fit fonksiyonunu tanımlayın.</description>
    </item>
    
    <item>
      <title>optimize.minimize için bir Jacobian işlevi nasıl yazılır</title>
      <link>https://www.wikiod.com/tr/scipy/optimizeminimize-icin-bir-jacobian-islevi-nasl-yazlr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/scipy/optimizeminimize-icin-bir-jacobian-islevi-nasl-yazlr/</guid>
      <description>Sözdizimi # numpy&amp;rsquo;yi np olarak içe aktarın scipy.optimize&amp;rsquo;dan import _minimize scipy ithalat özelinden matplotlib.pyplot&amp;rsquo;u plt olarak içe aktarın scipy.optimize&amp;rsquo;dan içe aktarırken &amp;lsquo;küçült&amp;rsquo; işleminden önce alt çizgiye dikkat edin; &amp;lsquo;_küçültmek&amp;rsquo; Ayrıca, bu bölümü yapmadan önce bu bağlantı&amp;lsquo;deki işlevleri test ettim ve daha az sorun yaşadığımı/özel&amp;rsquo;i ayrı olarak içe aktarırsam daha hızlı çalıştığını gördüm. Bağlantılı sayfadaki Rosenbrock işlevi yanlıştı - önce renk çubuğunu yapılandırmanız gerekir; Alternatif kod gönderdim ama daha iyi olabileceğini düşünüyorum.</description>
    </item>
    
    <item>
      <title>Parametrelerle Dağıtım için rv_continuous</title>
      <link>https://www.wikiod.com/tr/scipy/parametrelerle-dagtm-icin-rv_continuous/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/scipy/parametrelerle-dagtm-icin-rv_continuous/</guid>
      <description>Pozitif gerçekler üzerinde negatif binom # from scipy.stats import rv_continuous import numpy class Neg_exp(rv_continuous): def _cdf(self, x, lamda): return 1-numpy.exp(-lamda*x) neg_exp = Neg_exp(name=&amp;quot;Negative exponential&amp;quot;, a=0) print (neg_exp.pdf(0,.5)) print (neg_exp.pdf(5,.5)) print (neg_exp.cdf(5,.5)) print (neg_exp.stats(0.5)) print (neg_exp.rvs(0.5)) _pdf veya _cdf&amp;rsquo;yi tanımlamak önemlidir, çünkü scipy diğer işlevin (sizin tanımlamadığınız) parametrelerini ve yaptığınız herhangi bir işlev çağrısındaki bu parametrelerin sırasını tanımınızdan çıkarır. Bu durumda sadece bir dağıtım parametresi vardır, lambda. Rastgele değişken değerini temsil eden değişken, ilk olarak _pdf veya _cdf tanımında görünür.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hazırda bekletme Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/hibernate/</link>
    <description>Recent content in hazırda bekletme Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/hibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hazırda bekletme modunu kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/hibernate/hazrda-bekletme-modunu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/hazrda-bekletme-modunu-kullanmaya-baslama/</guid>
      <description>Hazırda Beklet&amp;rsquo;i ayarlamak için XML Yapılandırmasını Kullanma # Sınıf yolunda bir yerde &amp;ldquo;database-servlet.xml&amp;rdquo; adında bir dosya oluşturuyorum.
Başlangıçta yapılandırma dosyanız şöyle görünecektir:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:jdbc=&amp;quot;http://www.springframework.org/schema/jdbc&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&amp;quot;&amp;gt; &amp;lt;/beans&amp;gt; &amp;ldquo;tx&amp;rdquo; ve &amp;ldquo;jdbc&amp;rdquo; Spring ad alanlarını içe aktardığımı fark edeceksiniz. Bunun nedeni, onları bu yapılandırma dosyasında oldukça yoğun bir şekilde kullanacağımızdır.
Yapmak istediğiniz ilk şey, açıklama tabanlı işlem yönetimini (@Transactional) etkinleştirmektir. İnsanların Bahar&amp;rsquo;da Hazırda Bekletme modunu kullanmasının ana nedeni, Spring&amp;rsquo;in tüm işlemlerinizi sizin için yönetmesidir.</description>
    </item>
    
    <item>
      <title>Özel Adlandırma Stratejisi</title>
      <link>https://www.wikiod.com/tr/hibernate/ozel-adlandrma-stratejisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/ozel-adlandrma-stratejisi/</guid>
      <description>Özel Bir ImplicitNamingStrategy Oluşturma ve Kullanma # Özel bir ImplicitNamingStrategy oluşturmak, Hazırda Bekletme&amp;rsquo;nin Yabancı Anahtarlar, Benzersiz Anahtarlar, Tanımlayıcı Sütunlar, Temel Sütunlar ve daha fazlası dahil olmak üzere açıkça adlandırılmamış &amp;ldquo;Varlık&amp;rdquo; niteliklerine nasıl ad atayacağını ayarlamanıza olanak tanır.
Örneğin, Hazırda Bekletme, varsayılan olarak, karma hale getirilmiş ve şuna benzeyen Yabancı Anahtarlar oluşturacaktır:
FKe6hidh4u0qh8y1ijy59s2ee6m Bu genellikle bir sorun olmasa da, adın daha açıklayıcı olmasını isteyebilirsiniz, örneğin:
FK_asset_tenant Bu, özel bir &amp;ldquo;ImplicitNamingStrategy&amp;rdquo; ile kolayca yapılabilir.</description>
    </item>
    
    <item>
      <title>SQL günlüğünü EtkinleştirDevre Dışı Bırak</title>
      <link>https://www.wikiod.com/tr/hibernate/sql-gunlugunu-etkinlestirdevre-ds-brak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/sql-gunlugunu-etkinlestirdevre-ds-brak/</guid>
      <description>Bu sorguları günlüğe kaydetmek yavaştır, genellikle Hazırda Bekletme modundan bile daha yavaştır. Ayrıca büyük miktarda günlük alanı kullanır. Performansın gerekli olduğu senaryolarda günlüğe kaydetmeyi kullanmayın. Bunu yalnızca Hazırda Bekletme&amp;rsquo;nin gerçekten oluşturduğu sorguları test ederken kullanın.
Bir günlük yapılandırma dosyası kullanma # Seçtiğiniz günlük yapılandırma dosyasında, aşağıdaki paketlerin günlüğünü gösterilen düzeylere ayarlayın.:
# log the sql statement org.hibernate.SQL=DEBUG # log the parameters org.hibernate.type=TRACE Muhtemelen gerekli olan bazı kaydediciye özgü önekler olacaktır.</description>
    </item>
    
    <item>
      <title>Ek Açıklamaları Kullanarak Varlık İlişkilerini Hazırda Beklet</title>
      <link>https://www.wikiod.com/tr/hibernate/ek-acklamalar-kullanarak-varlk-iliskilerini-hazrda-beklet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/ek-acklamalar-kullanarak-varlk-iliskilerini-hazrda-beklet/</guid>
      <description>Parametreler # Açıklama Ayrıntılar @OneToOne Karşılık gelen bir nesneyle bire bir ilişki belirtir. @OneToMany Birçok nesneyle eşleşen tek bir nesneyi belirtir. @ManyToOne Tek bir nesneyle eşleşen nesneler koleksiyonunu belirtir. @Entity Bir veritabanı tablosuyla eşleşen bir nesneyi belirtir. @Tablo Bu nesnenin de hangi veritabanı tablosuyla eşleştiğini belirtir. @JoinColumn Bir foregin anahtarının hangi sütunda depolandığını belirtir. @JoinTable Yabancı anahtarları depolayan bir ara tablo belirtir. Çift Yönlü Çoktan Çoka, kullanıcı tarafından yönetilen birleştirme tablosu nesnesini kullanma # @Entity @Table(name=&amp;quot;FOO&amp;quot;) public class Foo { private UUID fooId; @OneToMany(mappedBy = &amp;quot;bar&amp;quot;) private List&amp;lt;FooBar&amp;gt; bars; } @Entity @Table(name=&amp;quot;BAR&amp;quot;) public class Bar { private UUID barId; @OneToMany(mappedBy = &amp;quot;foo&amp;quot;) private List&amp;lt;FooBar&amp;gt; foos; } @Entity @Table(name=&amp;quot;FOO_BAR&amp;quot;) public class FooBar { private UUID fooBarId; @ManyToOne @JoinColumn(name = &amp;quot;fooId&amp;quot;) private Foo foo; @ManyToOne @JoinColumn(name = &amp;quot;barId&amp;quot;) private Bar bar; //You can store other objects/fields on this table here.</description>
    </item>
    
    <item>
      <title>Performans ayarı</title>
      <link>https://www.wikiod.com/tr/hibernate/performans-ayar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/performans-ayar/</guid>
      <description>Kalıtım yerine kompozisyon kullanın # Hibernate&amp;rsquo;in bazı kalıtım stratejileri vardır. &amp;ldquo;JOINED&amp;rdquo; devralma türü, alt varlık ile ana varlık arasında bir JOIN yapar.
Bu yaklaşımla ilgili sorun, Hazırda Bekletme her zaman kalıtımdaki tüm ilgili tabloların verilerini getirmesidir.
Örneğin, &amp;ldquo;JOINED&amp;rdquo; miras türünü kullanan &amp;ldquo;Bicycle&amp;rdquo; ve &amp;ldquo;MountainBike&amp;rdquo; varlıklarına sahipseniz:
@Entity @Inheritance(strategy = InheritanceType.JOINED) public abstract class Bicycle { } Ve:
@Entity @Inheritance(strategy = InheritanceType.JOINED) public class MountainBike extends Bicycle { } &amp;ldquo;MountainBike&amp;quot;a ulaşan herhangi bir JPQL sorgusu &amp;ldquo;Bicycle&amp;rdquo; verilerini getirerek aşağıdaki gibi bir SQL sorgusu oluşturur:</description>
    </item>
    
    <item>
      <title>Tembel Yükleme vs İstekli Yükleme</title>
      <link>https://www.wikiod.com/tr/hibernate/tembel-yukleme-vs-istekli-yukleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/tembel-yukleme-vs-istekli-yukleme/</guid>
      <description>Tembel Yükleme ve İstekli Yükleme Karşılaştırması # Veri alma veya yükleme, temel olarak iki türe ayrılabilir: istekli ve tembel.
Hazırda Beklet&amp;rsquo;i kullanmak için, en son sürümünü pom.xml dosyanızın bağımlılıklar bölümüne eklediğinizden emin olun:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.1.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 1. İstekli Yükleme Ve Tembel Yükleme
Burada tartışmamız gereken ilk şey tembel yükleme ve istekli yüklemenin ne olduğudur:
İstekli Yükleme, veri başlatmanın anında gerçekleştiği bir tasarım modelidir. Bu, koleksiyonların, üst öğeleri getirildiğinde tam olarak getirildiği anlamına gelir (hemen getir)</description>
    </item>
    
    <item>
      <title>Önbelleğe almak</title>
      <link>https://www.wikiod.com/tr/hibernate/onbellege-almak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/onbellege-almak/</guid>
      <description>WildFly&amp;rsquo;da Hazırda Bekletme Önbelleğini Etkinleştirme # WildFly&amp;rsquo;de Hazırda Bekletme için İkinci Düzey Önbelleğe Alma özelliğini etkinleştirmek için, bu özelliği &amp;lsquo;persistence.xml&amp;rsquo; dosyanıza ekleyin:
&amp;lt;property name=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; Bu özellik ile Sorgu Önbelleğe Alma özelliğini de etkinleştirebilirsiniz:
&amp;lt;property name=&amp;quot;hibernate.cache.use_query_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; WildFly, Hazırda Bekletme&amp;rsquo;nin İkinci Düzey Önbelleğini etkinleştirirken bir Önbellek Sağlayıcı tanımlamanızı gerektirmez, çünkü Infinispan varsayılan olarak kullanılır. Ancak, alternatif bir Önbellek Sağlayıcı kullanmak isterseniz, bunu &amp;ldquo;hibernate.cache.provider_class&amp;rdquo; özelliğiyle yapabilirsiniz.</description>
    </item>
    
    <item>
      <title>Hazırda bekletme ve JPA</title>
      <link>https://www.wikiod.com/tr/hibernate/hazrda-bekletme-ve-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/hazrda-bekletme-ve-jpa/</guid>
      <description>Hazırda Bekletme ve JPA arasındaki ilişki # Hazırda Bekletme, [JPA][1] standardının bir uygulamasıdır. Bu nedenle, orada söylenen her şey Hibernate için de geçerlidir.
Hazırda Bekletme, JPA için bazı uzantılara sahiptir. Ayrıca, bir JPA sağlayıcısı kurmanın yolu sağlayıcıya özeldir. Bu belge bölümü yalnızca Hazırda Beklet&amp;rsquo;e özgü olanları içermelidir.
[1]: https://www.wikiod.com/tr/jpa/jpay-kullanmaya-baslama#Kurulum veya Kurulum</description>
    </item>
    
    <item>
      <title>Kriterler ve Öngörüler</title>
      <link>https://www.wikiod.com/tr/hibernate/kriterler-ve-ongoruler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/kriterler-ve-ongoruler/</guid>
      <description>Filtreleri Kullan # @Filter, WHERE kampı olarak kullanılır, işte bazı örnekler
Öğrenci Kuruluşu
@Entity @Table(name = &amp;quot;Student&amp;quot;) public class Student { /*...*/ @OneToMany @Filter(name = &amp;quot;active&amp;quot;, condition = &amp;quot;EXISTS(SELECT * FROM Study s WHERE state = true and s.id = study_id)&amp;quot;) Set&amp;lt;StudentStudy&amp;gt; studies; /* getters and setters methods */ } Çalışma Varlığı
@Entity @Table(name = &amp;quot;Study&amp;quot;) @FilterDef(name = &amp;quot;active&amp;quot;) @Filter(name = &amp;quot;active&amp;quot;, condition=&amp;quot;state = true&amp;quot;) public class Study { /*...*/ @OneToMany Set&amp;lt;StudentStudy&amp;gt; students; @Field boolean state; /* getters and setters methods */ } ÖğrenciÇalışma Varlığı</description>
    </item>
    
    <item>
      <title>Yerel SQL Sorguları</title>
      <link>https://www.wikiod.com/tr/hibernate/yerel-sql-sorgular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/hibernate/yerel-sql-sorgular/</guid>
      <description>Basit Sorgu # Hazırda Bekletme &amp;lsquo;Oturum&amp;rsquo; nesnesi üzerinde, bu durumda &amp;lsquo;oturum&amp;rsquo; adlı bir tanıtıcınız olduğunu varsayarsak:
List&amp;lt;Object[]&amp;gt; result = session.createNativeQuery(&amp;quot;SELECT * FROM some_table&amp;quot;).list(); for (Object[] row : result) { for (Object col : row) { System.out.print(col); } } Bu, &amp;ldquo;some_table&amp;rdquo; içindeki tüm satırları alacak ve bunları &amp;ldquo;result&amp;rdquo; değişkenine yerleştirecek ve her değeri yazdıracaktır.
Benzersiz bir sonuç elde etmek için örnek # Object pollAnswered = getCurrentSession().createSQLQuery( &amp;quot;select * from TJ_ANSWERED_ASW where pol_id = &amp;quot;+pollId+&amp;quot; and prf_log = &#39;&amp;quot;+logid+&amp;quot;&#39;&amp;quot;).</description>
    </item>
    
  </channel>
</rss>

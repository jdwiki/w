<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yay-veri-jpa Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/spring-data-jpa/</link>
    <description>Recent content in yay-veri-jpa Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/spring-data-jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring-data-jpa&#39;yı kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/spring-data-jpa/spring-data-jpay-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-data-jpa/spring-data-jpay-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # Spring data JPA&amp;rsquo;sını kullanmaya başlamak için, projenizdeki bağımlılığı Spring core&amp;rsquo;dan biriyle birlikte dahil etmelisiniz. Maven&amp;rsquo;i bağımlılık yönetim sistemi olarak kullanıyorsanız (kullanmak istediğiniz sürüm için sürüm-numarasını değiştirin):
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-data-jpa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;version-number&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; Ve Gradle kullanıyorsanız:
dependencies { compile &#39;org.springframework.data:spring-data-jpa:version-number&#39; } Spring Boot&amp;rsquo;u kullanırken de ayarlayabilirsiniz, sadece başlangıç ​​bağımlılığını ekleyin ve sürüm numarasından kurtulun:
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; Entity özelliğine göre arama ve Entity özelliğine göre arama # WarehosueEntity findWarehouseById(@Param(&amp;quot;id&amp;quot;) Long id); List&amp;lt;WarehouseEntity&amp;gt; findWarehouseByIdIn(@Param(&amp;quot;idList&amp;quot;) List&amp;lt;Long&amp;gt; warehouseIdList); </description>
    </item>
    
    <item>
      <title>Depolar</title>
      <link>https://www.wikiod.com/tr/spring-data-jpa/depolar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-data-jpa/depolar/</guid>
      <description>Spring Data projesi, uygulama programcılarının &amp;ldquo;Depo&amp;rdquo; adlı bir soyutlamayı kullanan tutarlı bir arabirim kullanarak veri depolarıyla çalışmasına olanak tanır. Bir Spring Data &amp;ldquo;Repository&amp;rdquo;, domain-driven design tarafından popüler hale getirilen Depo kalıbından sonra modellenmiştir. /Etki alanına dayalı_tasarım). Spring Data, alt projelerin veri depolarına özgü özellikler sağlamak için genişletebileceği &amp;lsquo;Depo&amp;rsquo; adlı merkezi bir Java arabirimi sağlar.
&amp;lsquo;Depo&amp;rsquo; arayüzüne ek olarak, Spring Data ayrıca iki çekirdek arayüz daha sağlar - temel CRUD (create, read, update ve delete) işlevselliği için sözleşmeyi tanımlayan &amp;lsquo;CrudRepository&amp;rsquo;; ve sayfalandırma ve sıralama için bir sözleşme tanımlayarak &amp;lsquo;CrudRepository&amp;rsquo;yi genişleten &amp;lsquo;PagingAndSortingRepository&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>firavun faresi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/mongoose/</link>
    <description>Recent content in firavun faresi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/mongoose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mongoose&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/mongoose/mongoosea-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/mongoosea-baslarken/</guid>
      <description>Kurulum # mongoose&amp;lsquo;u yüklemek, &amp;rsquo;npm&amp;rsquo; komutunu çalıştırmak kadar kolaydır
npm mongoose yükleyin --save
Ancak işletim sisteminiz için &amp;ldquo;MongoDB&amp;quot;yi de yüklediğinizden veya bir MongoDB veritabanına erişiminiz olduğundan emin olun.
MongoDB veritabanına bağlanma: # 1. Firavun faresini uygulamaya aktarın:
import mongoose from &#39;mongoose&#39;; 2. Bir Promise kitaplığı belirtin:
mongoose.Promise = global.Promise; 3. MongoDB&amp;rsquo;ye bağlanın:
mongoose.connect(&#39;mongodb://127.0.0.1:27017/database&#39;); /* Mongoose connection format looks something like this */ mongoose.connect(&#39;mongodb://USERNAME:PASSWORD@HOST::PORT/DATABASE_NAME&#39;); Not:
Varsayılan olarak mongoose, MongoDB tarafından kullanılan varsayılan bağlantı noktası olan &amp;lsquo;27017&amp;rsquo; bağlantı noktasından MongoDB&amp;rsquo;ye bağlanır.</description>
    </item>
    
    <item>
      <title>firavun faresi öncesi ve sonrası ara katman yazılımı (kancalar)</title>
      <link>https://www.wikiod.com/tr/mongoose/firavun-faresi-oncesi-ve-sonras-ara-katman-yazlm-kancalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/firavun-faresi-oncesi-ve-sonras-ara-katman-yazlm-kancalar/</guid>
      <description>Ara katman yazılımı # Ara yazılım (ön ve son kancalar olarak da adlandırılır), eşzamansız işlevlerin yürütülmesi sırasında denetimden geçirilen işlevlerdir. Ara yazılım, şema düzeyinde belirtilir ve eklenti yazmak için kullanışlıdır. Mongoose 4.0, 2 tür ara katman yazılımına sahiptir: belge ara yazılımı ve sorgu ara yazılımı. Belge ara yazılımı, aşağıdaki belge işlevleri için desteklenir.
içinde doğrulamak kaydetmek kaldırmak Sorgu ara yazılımı, aşağıdaki Model ve Sorgu işlevleri için desteklenir.
saymak bulmak birini bul bulOneAndRemove bulOneAndUpdate Güncelleme Hem belge ara yazılımı hem de sorgu ara yazılımı, kancaları öncesi ve sonrası destekler.</description>
    </item>
    
    <item>
      <title>Firavun Faresi Nüfusu</title>
      <link>https://www.wikiod.com/tr/mongoose/firavun-faresi-nufusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/firavun-faresi-nufusu/</guid>
      <description>Sözdizimi # Query.populate(yol, [seç], [model], [eşleşme], [seçenekler]) Parametreler # parametre Açıklama yol &amp;lt;Nesne, Dize&amp;gt; ya doldurulacak yol ya da tüm parametreleri belirten bir nesne [seç] &amp;lt;Object, String&amp;gt; Popülasyon sorgusu için alan seçimi (&amp;lsquo;id&amp;rsquo; alanı dışındaki her şeyi dahil etmek için &amp;lsquo;-id&amp;rsquo;&amp;rsquo; kullanılabilir) [model] &amp;lt;Model&amp;gt; Popülasyon için kullanmak istediğiniz model. Belirtilmezse, doldurmak modeli Şema&amp;rsquo;nın ref alanında isme göre arar. [maç] &amp;lt;Nesne&amp;gt; Nüfus için koşullar [seçenekler] &amp;lt;Nesne&amp;gt; Popülasyon sorgusu için seçenekler (sıralama, vb.</description>
    </item>
    
    <item>
      <title>Firavun faresi</title>
      <link>https://www.wikiod.com/tr/mongoose/firavun-faresi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/firavun-faresi/</guid>
      <description>Firavun faresinde, Middlewares aynı zamanda &amp;ldquo;ön&amp;rdquo; ve &amp;ldquo;post&amp;rdquo; kancaları olarak da adlandırılır.
İki tür ara katman yazılımı vardır # Bu ara katman yazılımının her ikisi de ön ve post kancalarını destekler.
Belge ara yazılımı
Its supported for document functions init, validate, save and remove
Sorgu ara yazılımı
Its supported for query functions count, find, findOne, findOneAndRemove, findOneAndUpdate, insertMany and update.
Ön ve Son kancalar # İki tür Ön kanca vardır</description>
    </item>
    
    <item>
      <title>Firavun Faresi Sorguları</title>
      <link>https://www.wikiod.com/tr/mongoose/firavun-faresi-sorgular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/firavun-faresi-sorgular/</guid>
      <description>Mongoose, MongoDB için bir Node.JS sürücüsüdür. Şemalara tür ekleme gibi varsayılan MongoDB sürücüsüne göre belirli avantajlar sağlar. Bir fark, bazı Mongoose sorgularının MongoDB eşdeğerlerinden farklı olabilmesidir.
Bir Sorgu Bul # Bir Mongoose Modelini İçe Aktar (&amp;ldquo;Firavun Faresi Şemaları&amp;rdquo; konusuna bakın)
var User = require(&amp;quot;../models/user-schema.js&amp;quot;)
findOne yöntemi, veritabanındaki ilk parametreyle eşleşen ilk girişi döndürür. Parametre, anahtarın aranacak alan olduğu ve değerin eşleştirilecek değer olduğu bir nesne olmalıdır. Bu, alt alanları aramak için nokta (.</description>
    </item>
    
    <item>
      <title>Firavun Faresi Şemaları</title>
      <link>https://www.wikiod.com/tr/mongoose/firavun-faresi-semalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/mongoose/firavun-faresi-semalar/</guid>
      <description>Şema Oluşturma # var mongoose = require(&#39;mongoose&#39;); //assume Player and Board schemas are already made var Player = mongoose.model(&#39;Player&#39;); var Board = mongoose.model(&#39;Board&#39;); //Each key in the schema is associated with schema type (ie. String, Number, Date, etc) var gameSchema = new mongoose.Schema({ name: String, players: [{ type: mongoose.Schema.Types.ObjectId, ref: &#39;Player&#39; }], host: { type: mongoose.Schema.Types.ObjectId, ref: &#39;Player&#39; }, board: { type: mongoose.Schema.Types.ObjectId, ref: &#39;Board&#39; }, active: { type: Boolean, default: true }, state: { type: String, enum: [&#39;decision&#39;, &#39;run&#39;, &#39;waiting&#39;], default: &#39;waiting&#39; }, numFlags: { type: Number, enum: [1,2,3,4] }, isWon: { type: Boolean, default: false } }); mongoose.</description>
    </item>
    
  </channel>
</rss>

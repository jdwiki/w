<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-web-api Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/asp-dotnet-web-api/</link>
    <description>Recent content in asp.net-web-api Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/asp-dotnet-web-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asp.net-web-api&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-apiyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-apiyi-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # asp.net-web-api kurulumu veya kurulumu hakkında ayrıntılı talimatlar.
Ne ve Neden ASP.NET Web API? # Ne? : HTTP tabanlı uç noktalar oluşturmak için tam olarak desteklenen ve genişletilebilir bir çerçeve. HTML5 dünyasında, mobil cihazlar ve modern geliştirme teknikleri HTTP, zengin, ölçeklenebilir hizmetler oluşturmak için varsayılan seçenek haline geldi. ASP.NET Web API, kullanımı kolay bir dizi varsayılan seçenek sağlar, ancak HTTP kullanan herhangi bir senaryonun taleplerini karşılamak için derin bir genişletilebilirlik altyapısı sağlar.</description>
    </item>
    
    <item>
      <title>ASP.NET Web API İçerik Müzakere</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-icerik-muzakere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-icerik-muzakere/</guid>
      <description>ASP.NET Web API İçerik Müzakere Temel Bilgileri # İçerik Pazarlığı, belirli bir kaynak için en iyi temsili seçme süreci olarak tanımlanabilir. Dolayısıyla İçerik anlaşması, istemcinin ve sunucunun, istemcinin gerekli formata göre veri alabilmesi için aralarında pazarlık yapabileceği anlamına gelir.
İnternetin bağlı olduğu üç nokta vardır,
Kaynak Kaynağa bir İşaretçi (URL) Kaynağın temsili Üçüncü nokta diğer ikisinden daha önemlidir, çünkü her şey kaynağı nasıl gördüğümüze göre çalışır. Bir kaynağı iki biçimde temsil edebiliriz.</description>
    </item>
    
    <item>
      <title>Web API URL Yönlendirme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/web-api-url-yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/web-api-url-yonlendirme/</guid>
      <description>Yönlendirme asp.net webapi&amp;rsquo;de nasıl çalışır? # ASP.NET Web API&amp;rsquo;sinde denetleyici, HTTP isteklerini işleyen bir sınıftır. Denetleyicinin genel yöntemlerine eylem yöntemleri veya basitçe eylemler denir.
Web API çerçevesi bir istek aldığında, isteği bir eyleme yönlendirir. Hangi eylemin çağrılacağını belirlemek için çerçeve bir yönlendirme tablosu kullanır. Web API için Visual Studio proje şablonu, varsayılan bir rota oluşturur:
routes.MapHttpRoute( name: &amp;quot;API Default&amp;quot;, routeTemplate: &amp;quot;**api/{controller}/{id}**&amp;quot;, defaults: new { id = RouteParameter.Optional } ); Bu rota, App_Start dizinine yerleştirilen WebApiConfig.</description>
    </item>
    
    <item>
      <title>ASP.NET Web API MediaTypeFormatter</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</guid>
      <description>MediaTypeFormatter Temel Bilgiler # &amp;lsquo;MediaTypeFormatter&amp;rsquo;, &amp;lsquo;JsonMediaTypeFormatter&amp;rsquo; ve &amp;lsquo;XmlMediaTypeFormatter&amp;rsquo; sınıflarının miras aldığı soyut bir sınıftır. Burada, &amp;ldquo;JsonMediaTypeFormatter&amp;rdquo; sınıfı JSON nesnelerini, &amp;ldquo;XmlMediaTypeFormatter&amp;rdquo; sınıfı ise XML nesnelerini işler.
Kabul Edilen Başlık değerinden bağımsız olarak yalnızca JSON döndür:
Hava durumu isteğinin yanıtında yalnızca JSON nesnelerini döndürmek için &amp;ldquo;application/json&amp;rdquo; veya &amp;ldquo;application/xml&amp;rdquo; ise isteğin Başlık değerini kabul edin, &amp;ldquo;WebApiConfig&amp;rdquo; sınıfının &amp;ldquo;Register&amp;rdquo; yöntemine aşağıdaki satırı yazın.
config.Formatters.Remove(config.Formatters.XmlFormatter); Burada &amp;ldquo;config&amp;rdquo;, &amp;ldquo;HttpConfiguration&amp;rdquo; sınıfının bir nesnesidir. Bu kod satırı, istemci isteğindeki Kabul başlık değerinden bağımsız olarak ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET WEB API CORS Etkinleştirme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-cors-etkinlestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-cors-etkinlestirme/</guid>
      <description>Windows Kimlik Doğrulaması ile WebAPI 2 için CORS&amp;rsquo;u Yapılandırın # Aşağıdaki sunucu tarafı yapılandırması, CORS isteğinin Windows Kimlik Doğrulaması ile birlikte çalışmasına izin verir (IIS&amp;rsquo;de anonim etkinleştirilmemelidir).
web.config - kimliği doğrulanmamış (anonim) ön kontrol isteklerine izin ver (SEÇENEKLER)
&amp;lt;system.web&amp;gt; &amp;lt;authentication mode=&amp;quot;Windows&amp;quot; /&amp;gt; &amp;lt;authorization&amp;gt; &amp;lt;allow verbs=&amp;quot;OPTIONS&amp;quot; users=&amp;quot;*&amp;quot;/&amp;gt; &amp;lt;deny users=&amp;quot;?&amp;quot; /&amp;gt; &amp;lt;/authorization&amp;gt; &amp;lt;/system.web&amp;gt; global.asax.cs - başka bir etki alanından arayanın veri almasına izin veren başlıklarla doğru şekilde yanıtlayın
protected void Application_AuthenticateRequest(object sender, EventArgs e) { if (Context.</description>
    </item>
    
    <item>
      <title>JSON ile Çalışmaya Hızlı Başlangıç</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/json-ile-calsmaya-hzl-baslangc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/json-ile-calsmaya-hzl-baslangc/</guid>
      <description>ASP.NET WebAPI ile hızlı (ve doğru bir şekilde) çalışmaya başlamanızı sağlayacak örnekler
Nitelikleri kullanarak JSON&amp;rsquo;u GET&amp;rsquo;den döndür # 1. Biçimlendiricinizi ve yönlendirmenizi (App_Start/WebApiConfig) Register bölümünde ayarlayın # public static class WebApiConfig { public static void Register(HttpConfiguration config) { GlobalConfiguration.Configuration.Formatters.Clear(); GlobalConfiguration.Configuration.Formatters.Add(new JsonMediaTypeFormatter()); config.MapHttpAttributeRoutes(); } } 2. Bir &amp;lsquo;ApiController&amp;rsquo; içinde yöntemler oluşturun # public class HelloWorldController : ApiController { [HttpGet] [Route(&amp;quot;echo/{message}&amp;quot;)] public IHttpActionResult Echo(string message) { return Ok(new{ hello: message }); } [HttpGet] [Route(&amp;quot;echo/{digits:int}&amp;quot;)] public IHttpActionResult Echo(int digits) { return Ok(new{ hello: digits }); } &amp;lsquo;GET /echo/foo&amp;rsquo; yürütülüyor</description>
    </item>
    
    <item>
      <title>Asp.net Web API ile OData</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-ile-odata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/aspnet-web-api-ile-odata/</guid>
      <description>OData Paketlerini Kurun # Araçlar menüsünden NuGet Paket Yöneticisi &amp;gt; Paket Yöneticisi Konsolu&amp;rsquo;nu seçin. Paket Yöneticisi Konsolu penceresinde şunu yazın:
Install-Package Microsoft.AspNet.Odata Bu komut, en son OData NuGet paketlerini yükler.
Varlık Çerçevesini Etkinleştir # Bu eğitimde, arka uç veritabanını oluşturmak için Entity Framework (EF) Code First&amp;rsquo;ü kullanacağız.
Web API OData, EF gerektirmez. olabilecek herhangi bir veri erişim katmanını kullanın. veritabanı varlıklarını modellere çevirin.
İlk olarak, EF için NuGet paketini kurun. Araçlar menüsünden NuGet Paket Yöneticisi &amp;gt; Paket Yöneticisi Konsolu&amp;rsquo;nu seçin.</description>
    </item>
    
    <item>
      <title>Varsayılan olarak güzelbiçimlendirilmiş JSON verileriyle yanıt vermek için bir Web API uygulamasını yapılandırın</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/varsaylan-olarak-guzelbicimlendirilmis-json-verileriyle-yant-vermek-icin-bir-web-api-uygulamasn-yaplandrn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/varsaylan-olarak-guzelbicimlendirilmis-json-verileriyle-yant-vermek-icin-bir-web-api-uygulamasn-yaplandrn/</guid>
      <description>Varsayılan JSON biçimlendirmesi: Okunabilirlik pahasına verimlilik # Diyelim ki bunun gibi basit bir ApiController&amp;rsquo;ınız var:
[HttpGet] [Route(&amp;quot;test&amp;quot;)] public dynamic Test() { dynamic obj = new ExpandoObject(); obj.prop1 = &amp;quot;some string&amp;quot;; obj.prop2 = 11; obj.prop3 = &amp;quot;another string&amp;quot;; return obj; } Bu nesnenin ortaya çıkan JSON temsili şöyle görünecektir:
{&amp;quot;prop1&amp;quot;:&amp;quot;some string&amp;quot;,&amp;quot;prop2&amp;quot;:11,&amp;quot;prop3&amp;quot;:&amp;quot;another string&amp;quot;} Bu muhtemelen bunun gibi basit yanıtlar için iyidir, ancak yanıt olarak gönderilen büyük/karmaşık bir nesneniz olup olmadığını hayal edin:</description>
    </item>
    
    <item>
      <title>Önbelleğe almak</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/onbellege-almak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/onbellege-almak/</guid>
      <description>Önbelleğe alma, gelecekteki istekler için verileri bir yerde saklama işlemidir, bizim durumumuzda verileri bir yerde önbelleğe alırsak, verileri almak için veritabanına istenmeyen isabetlerden kaçınabiliriz, bu şekilde verilerin daha hızlı bir şekilde sunulmasını sağlayabiliriz. .
System.Runtime.Caching (MemoryCache) # System.Runtime.Caching ad alanını içe aktarın(Proje referansınıza System.Runtime.Caching DLL&amp;rsquo;sini eklediğinizden emin olun).
MemoryCache sınıfının bir örneğini oluşturun.
MemoryCache memCache = MemoryCache.Default; MemoryCache&amp;rsquo;e değerler ekleyin
public IQueryable&amp;lt;tblTag&amp;gt; GettblTags() { var ca = db.tblTags; memCache.Add(&amp;quot;tag&amp;quot;, ca, DateTimeOffset.</description>
    </item>
    
    <item>
      <title>Özel ActionFilterAttribute Oluşturma</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-web-api/ozel-actionfilterattribute-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-web-api/ozel-actionfilterattribute-olusturma/</guid>
      <description>Eylem Filtreleri Nitelikleri, ASP .NET Framework&amp;rsquo;ün, DRY ilkesini izlemeye yardımcı olmak için yararlı bulduğum bir parçasıdır. Birkaç ortak mantık satırını basit bir bildirim etiketiyle değiştirebilirsiniz. Çerçeve, varsayılan olarak, Yetkilendir ve Hata Öznitelikleri İşle gibi birkaç yararlı Eylem Filtresi Özniteliği sağlar. Bu kılavuz, size kendi özel özniteliğinizi nasıl oluşturacağınızı göstermeyi amaçlamaktadır.
EminPresenseOfAttribute # Bu, bir POST yolunda alınan istek nesnesine gerekli parametrelerin atandığını doğrulamak için oluşturduğum bir öznitelik örneğidir. Standart ModelState.IsValid yaklaşımı geçerli olmadığı için bu yaklaşıma karar verdim.</description>
    </item>
    
  </channel>
</rss>

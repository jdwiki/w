<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cdi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/cdi/</link>
    <description>Recent content in cdi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/cdi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cdi&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/cdi/cdiyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cdi/cdiyi-kullanmaya-baslama/</guid>
      <description>Java SE ortamında hızlı kurulum # Bir Java EE 6+ uygulama sunucusuyla çalışıyorsanız, CDI kapsayıcının bir parçasıdır ve kullanmaya başlamak için herhangi bir şey yapmanız gerekmez. Ancak CDI, Java EE uygulama sunucularıyla sınırlı değildir. Java SE uygulamalarında veya basit sunucu uygulaması kaplarında da aynı şekilde kullanılabilir. Basit bir komut satırı uygulamasında CDI kullanımına bir göz atalım.
Adım 1. POM&amp;rsquo;unuza bağımlılıklar ekleyin. # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.weld.se&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;weld-se-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0.Alpha15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Adım 2. fasulye.xml ekleyin # CDI, sınıflar için JAR&amp;rsquo;ı tarayabilmesi için boş bir bean.</description>
    </item>
    
    <item>
      <title>Kapsamlar</title>
      <link>https://www.wikiod.com/tr/cdi/kapsamlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cdi/kapsamlar/</guid>
      <description>Neden bu tartışmasız kuruculara ihtiyacım var???
Bir oturum kapsamlı fasulye, uygulama kapsamlı bir fasulyeye enjekte edilirse ne olur? Uygulama kapsamındaki fasulye, her istek için doğru oturum kapsamındaki fasulye örneğini nasıl alır? Oturum kapsamındaki fasulye diğer isteklere sızmaz mı? Bu nasıl çalışır? Kapsam belirlemeyi kolaylaştırmak için CDI, proxy olarak bilinen şeyi kullanır. CDI, bağımlı olmayan kapsamlı bir fasulyeyi başka bir nesneye enjekte ettiğinde, çekirdeği doğrudan enjekte etmez. Bunun yerine, proxy olarak bilinen şeyi oluşturmak için o fasulyeyi alt sınıflar.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/cdi/bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cdi/bagmllk-enjeksiyonu/</guid>
      <description>CDI&amp;rsquo;nin amiral gemisi özelliği, bağımlılık ekleme için bildirimsel bir API&amp;rsquo;dir. Sınıflar, CDI yöneticisine sınıfın bir örneğini oluştururken bu bağımlılıkları sağlaması gerektiğini belirten &amp;ldquo;@Inject&amp;rdquo; notuyla işaretlenmiş bağımlılıklara sahip olabilir.
Yapıcı Enjeksiyonu # Bağımlılıkları bir sınıfa enjekte etmenin yaygın durumu, yapıcı enjeksiyonudur. Bu, @Inject ile sınıfta bir kurucuya açıklama eklemeyi içerir. CDI yöneticisi, sınıfın bir örneğini oluştururken @Inject ek açıklamasına sahip bir kurucu arayacaktır. @Inject açıklamalı bir kurucu bulduğunda, kurucu tarafından hangi parametrelerin gerekli olduğunu bulmak, bu bağımlılıkların örneklerini oluşturmak veya elde etmek için yansıma kullanır, ardından bu bağımlılıklarla kurucuyu çağırır.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>harika öğretici on </title>
    <link>https://www.wikiod.com/tr/docs/groovy/</link>
    <description>Recent content in harika öğretici on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harika bir başlangıç</title>
      <link>https://www.wikiod.com/tr/groovy/harika-bir-baslangc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/harika-bir-baslangc/</guid>
      <description>Kurulum veya Kurulum # Groovy&amp;rsquo;yi kurmanın iki yaygın yolu vardır.
İndirmek
Groovy ikili dosyası, Groovy web sitesinin download sayfasından indirilebilir. Arşivi açabilir ve PATH sistem ortam değişkenine %GROOVY_HOME%/bin/groovy.bat yolunu ekleyebilirsiniz; burada %GROOVY_HOME%, Groovy&amp;rsquo;nin paketinin açıldığı dizindir.
SDKMAN
Diğer seçenek SDKMAN kullanmaktır. Bu seçeneğin popülaritesi hızla arttı ve Groovy&amp;rsquo;nin birden çok sürümünü yönetmeyi çok basit hale getirdi. Ayrıca &amp;ldquo;GR8&amp;rdquo; ekosferindeki diğer uygulamaları da destekler. Bu seçenek yerel olarak Linux ve Mac&amp;rsquo;te çok iyi çalışır, ancak Windows&amp;rsquo;ta Cygwin gerektirir.</description>
    </item>
    
    <item>
      <title>Harika Gerçek (gerçeklik)</title>
      <link>https://www.wikiod.com/tr/groovy/harika-gercek-gerceklik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/harika-gercek-gerceklik/</guid>
      <description>Groovy, if, while ve for ifadelerindeki koşulları Java&amp;rsquo;nın standart Java koşulları için yaptığı şekilde değerlendirir: Java&amp;rsquo;da bir boole ifadesi (bir boole olarak değerlendirilen bir ifade) sağlamanız gerekir ve sonuç değerlendirmenin sonucu.
Groovy&amp;rsquo;de sonuç, bu koşullar için Java&amp;rsquo;daki ile aynıdır. (örnek verilmemiştir, bu standart Java&amp;rsquo;dır).
Örneklerle gösterilen diğer doğruluk değerlendirme mekanizması şu şekilde özetlenebilir:
sayılar: sıfır değeri yanlış, sıfır olmayan değer doğru olarak değerlendirilir. nesneler: boş bir nesne başvurusu yanlış olarak değerlendirilir, boş olmayan bir başvuru doğru olarak değerlendirilir.</description>
    </item>
    
    <item>
      <title>Dize Enterpolasyonu</title>
      <link>https://www.wikiod.com/tr/groovy/dize-enterpolasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/dize-enterpolasyonu/</guid>
      <description>Sözdizimi # $ ${} ${-&amp;gt;} Temel # def str = &#39;nice&#39; assert &amp;quot;Groovy is $str&amp;quot; == &#39;Groovy is nice&#39; Noktalı İfade # def arg = [phrase: &#39;interpolated&#39;] assert &amp;quot;This is $arg.phrase&amp;quot; == &#39;This is interpolated&#39; İstekli ifade # def str = &#39;old&#39; def interpolated = &amp;quot;I am the ${str} value&amp;quot; assert interpolated == &#39;I am the old value&#39; str = &#39;new&#39; assert interpolated == &#39;I am the old value&#39; Tembel ifade # Dizelerde tembel enterpolasyon yapabiliriz.</description>
    </item>
    
    <item>
      <title>Dizeler ve GString değişmezleri</title>
      <link>https://www.wikiod.com/tr/groovy/dizeler-ve-gstring-degismezleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/dizeler-ve-gstring-degismezleri/</guid>
      <description>Sözdizimi # &amp;lsquo;Tek tırnaklı dize&amp;rsquo; &amp;ldquo;Çift tırnaklı dize&amp;rdquo; &amp;lsquo;&amp;lsquo;&amp;lsquo;Çok satırlı dize&amp;rsquo;&amp;rsquo;&amp;rsquo; &amp;ldquo;&amp;ldquo;&amp;ldquo;Üç çift tırnaklı dize&amp;rdquo;&amp;rdquo;&amp;rdquo; /Slashy dize/ $/Dolar eğik çizgi dizisi/$ Groovy, java &amp;ldquo;java.lang.String&amp;rdquo; ve &amp;ldquo;groovy.lang.GString&amp;rdquo; olmak üzere iki dize türüne ve ayrıca birden çok dize değişmezi biçimine sahiptir (sözdizimine ve örneklere bakın).
İki tür dize arasındaki temel fark, GString&amp;rsquo;in dize enterpolasyonunu desteklemesidir.
Dolar eğik çizgi dizisi # def param = &#39;string&#39; def str = $/ multiline $param no need to escape slash \n $ $$ /$ assert str instanceof GString assert str.</description>
    </item>
    
    <item>
      <title>Kapanışlar</title>
      <link>https://www.wikiod.com/tr/groovy/kapanslar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/kapanslar/</guid>
      <description>Örtük parametrelerle kapatma # [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { it.length() } Tek bir parametreniz varsa ve parametreyi açıkça adlandırmıyorsanız, &amp;ldquo;it&amp;rdquo; parametrenin varsayılan adıdır. İsteğe bağlı olarak parametreyi de bildirebilirsiniz.
[&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { animal -&amp;gt; animal.length() } Açık parametrelerle kapatma # def addNumbers = { a, b -&amp;gt; a + b } addNumbers(-7, 15) // returns 8 Örtük alıcılı yöntem çağrıları için özel hedefle kapatma # class MyHello { def sayHello() { &amp;quot;Hello, world&amp;quot; } } def cl = { sayHello() } cl() // groovy.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/tr/groovy/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/json/</guid>
      <description>Bir json dizesini ayrıştırın # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() def obj = jsonSlurper.parseText(&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [1] }&#39;) assert obj.foo == &#39;bar&#39; assert obj.baz == [1] Bir json dizesini güzelce yazdırın # import groovy.json.JsonOutput; def json = JsonOutput.toJson([foo: &#39;bar&#39;, baz: [1]]) assert json == &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;,&amp;quot;baz&amp;quot;:[1]}&#39; def pretty = JsonOutput.prettyPrint(json) assert pretty == &#39;&#39;&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [ 1 ] }&#39;&#39;&#39; Bir json dosyasını ayrıştırın # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() File fl = new File(&#39;/path/to/fils.</description>
    </item>
    
    <item>
      <title>Yayılma Operatörü</title>
      <link>https://www.wikiod.com/tr/groovy/yaylma-operatoru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/yaylma-operatoru/</guid>
      <description>Çoğu durumda, yayılma operatörü *., .collect { it.________ } çağırmakla aynıdır.
def animals = [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;] assert animals*.length() == animals.collect { it.length() } Ancak özne boşsa, farklı davranırlar:
def animals = null assert animals*.length() == null assert animals.collect { it.length() } == [] Bir mülke erişme # class Vector { double x double y } def points = [ new Vector(x: 10, y: -5), new Vector(x: -17.5, y: 3), new Vector(x: -3.</description>
    </item>
    
    <item>
      <title>Koleksiyon Operatörleri</title>
      <link>https://www.wikiod.com/tr/groovy/koleksiyon-operatorleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/koleksiyon-operatorleri/</guid>
      <description>Bir koleksiyon üzerinde yineleme # Listeler # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // using implicit argument lst.each { println it } // using explicit argument lst.each { val -&amp;gt; println val } // both print: // foo // bar // baz Dizinle yinele # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // explicit arguments are required lst.eachWithIndex { val, idx -&amp;gt; println &amp;quot;$val in position $idx&amp;quot; }​​​​​​​​​​​​​​ // prints: // foo in position 0 // bar in position 1 // baz in position 2 Haritalar # def map = [foo: &#39;FOO&#39;, bar: &#39;BAR&#39;, baz: &#39;BAZ&#39;] // using implicit argument map.</description>
    </item>
    
    <item>
      <title>uzay gemisi operatörü</title>
      <link>https://www.wikiod.com/tr/groovy/uzay-gemisi-operatoru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/uzay-gemisi-operatoru/</guid>
      <description>Özel sıralamalar için uzay gemisi operatörü # class User { String name int age } def users = [ new User(name: &amp;quot;Bob&amp;quot;, age: 20), new User(name: &amp;quot;Tom&amp;quot;, age: 50), new User(name: &amp;quot;Bill&amp;quot;, age: 45) ] // sort by age users.sort { a, b -&amp;gt; a.age &amp;lt;=&amp;gt; b.age } Temel kullanım # uzay gemisi operatörü, soldaki operatör daha küçük olduğunda &amp;ldquo;-1&amp;rdquo;, operatörler eşit olduğunda &amp;ldquo;0&amp;rdquo; ve aksi takdirde &amp;ldquo;1&amp;rdquo; döndürür:
assert 10 &amp;lt;=&amp;gt; 20 == -1 assert 10 &amp;lt;=&amp;gt; 10 ​== 0 assert 30 &amp;lt;=&amp;gt; 10 == 1 assert &#39;a&#39; &amp;lt;=&amp;gt; &#39;b&#39; == -1 assert &#39;a&#39; &amp;lt;=&amp;gt; &#39;a&#39;​== 0 assert &#39;b&#39; &amp;lt;=&amp;gt; &#39;a&#39; == 1​​ Comparable.</description>
    </item>
    
    <item>
      <title>RESTC istemcisi</title>
      <link>https://www.wikiod.com/tr/groovy/restc-istemcisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/groovy/restc-istemcisi/</guid>
      <description>Groovy&amp;rsquo;nin HTTP İstemcisi kullanımı, örnekler ve tuzaklar.
TALEP AL # @Grab(group=&#39;org.codehaus.groovy.modules.http-builder&#39;, module=&#39;http-builder&#39;, version=&#39;0.7&#39; ) import groovyx.net.http.RESTClient try { def restClient = new RESTClient(&amp;quot;http://weathers.co&amp;quot;) def response = restClient.get(path: &#39;/api.php&#39;, query: [&#39;city&#39;: &#39;Prague&#39;]) println &amp;quot;Status : ${response.status}&amp;quot; println &amp;quot;Body : ${response.data.text}&amp;quot; } catch (Exception e) { println &amp;quot;Error : ${e.statusCode}&amp;quot; println &amp;quot;Message : ${e.response.data}&amp;quot; } </description>
    </item>
    
  </channel>
</rss>

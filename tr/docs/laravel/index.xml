<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/laravel/</link>
    <description>Recent content in Laravel Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/laravel/laraveli-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/laraveli-kullanmaya-baslama/</guid>
      <description>Laravel etiket belgelerine hoş geldiniz! # Laravel iyi bilinen bir PHP Çerçevesidir. Burada, Laravel hakkında her şeyi öğreneceksiniz. Nesneye Dayalı Programlamanın ne olduğunu bilmek kadar basitten başlayarak, gelişmiş Laravel paket geliştirme konusuna kadar.
Bu, diğer tüm Stackoverflow belge etiketleri gibi, topluluk odaklı belgelerdir, bu nedenle zaten Laravel&amp;rsquo;de deneyiminiz varsa, kendi konularınızı veya örneklerinizi ekleyerek bilginizi paylaşın! Nasıl katkıda bulunacağınız hakkında daha fazla bilgi edinmek için bu konudaki Katkı stil kılavuzumuza ve hakkında daha fazla bilgi edinmek isteyen kişilere en iyi deneyimi sunabilmemiz için yaptığımız stil kılavuzuna başvurmayı unutmayın.</description>
    </item>
    
    <item>
      <title>anlamlı</title>
      <link>https://www.wikiod.com/tr/laravel/anlaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/anlaml/</guid>
      <description>Eloquent, Laravel&amp;rsquo;de bulunan bir ORM&amp;rsquo;dir (Nesne İlişkisel Model). Etkin kayıt modelini uygular ve ilişkisel veritabanlarıyla etkileşim kurmak için kullanılır.
Tablo adlandırma
Kural, tablo adları için çoğul &amp;ldquo;snake_case&amp;rdquo; ve model adları için tekil &amp;ldquo;StudlyCase&amp;rdquo; kullanmaktır. Örneğin:
Bir &amp;ldquo;kediler&amp;rdquo; tablosunun bir &amp;ldquo;Kedi&amp;rdquo; modeli olur Bir &amp;ldquo;jungle_cats&amp;rdquo; tablosunun &amp;ldquo;JungleCat&amp;rdquo; modeli olacaktır Bir &amp;ldquo;kullanıcı&amp;rdquo; tablosunun bir &amp;ldquo;Kullanıcı&amp;rdquo; modeli olacaktır Bir &amp;lsquo;insanlar&amp;rsquo; tablosu &amp;lsquo;Kişi&amp;rsquo; modeline sahip olacaktır Eloquent, modelinizi, yukarıda belirtildiği gibi, model adının çoğulu olan bir tabloyla otomatik olarak bağlamaya çalışacaktır.</description>
    </item>
    
    <item>
      <title>Linux Sunucusunda Paylaşımlı Barındırmada Laravel 5 Uygulamasını Dağıtın</title>
      <link>https://www.wikiod.com/tr/laravel/linux-sunucusunda-paylasml-barndrmada-laravel-5-uygulamasn-dagtn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/linux-sunucusunda-paylasml-barndrmada-laravel-5-uygulamasn-dagtn/</guid>
      <description>Laravel projesini paylaşılan barındırmada dağıtma hakkında daha fazla bilgi almak için bu Github deposunu ziyaret edin.
Linux Sunucusunda Paylaşımlı Barındırmada Laravel 5 Uygulaması # Varsayılan olarak Laravel projesinin &amp;lsquo;public&amp;rsquo; klasörü, herhangi biri tarafından herhangi bir yerden istenebilecek uygulamanın içeriğini gösterir, uygulama kodunun geri kalanı görünmez veya uygun izinler olmadan hiç kimse tarafından erişilemez.
Uygulamayı geliştirme makinenizde geliştirdikten sonra, internet üzerinden her yerden erişilebilmesi için bir üretim sunucusuna itilmesi gerekiyor - değil mi?</description>
    </item>
    
    <item>
      <title>doğrulama</title>
      <link>https://www.wikiod.com/tr/laravel/dogrulama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/dogrulama/</guid>
      <description>Parametreler # parametre Ayrıntılar gerekli Alan gereklidir bazen Yalnızca giriş dizisinde o alan varsa, bir alana karşı doğrulama kontrolleri çalıştırın e-posta Giriş geçerli bir e-posta maks:değer Girilen değer maksimum değerin altında olmalıdır benzersiz:db_table_name Girdi değeri, sağlanan veritabanı tablosu adında benzersiz olmalıdır kabul edildi Evet / Açık / 1 doğru, TOS&amp;rsquo;u kontrol etmek için kullanışlı aktif_url checkdnsrr&amp;rsquo;e göre geçerli bir URL olmalıdır :date&amp;lsquo;den sonra Doğrulama altındaki alan, belirtilen tarihten sonra bir değer sağlamalıdır alfa Doğrulama altındaki alan tamamen alfabetik karakterlerden oluşmalıdır.</description>
    </item>
    
    <item>
      <title>tohumlama</title>
      <link>https://www.wikiod.com/tr/laravel/tohumlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/tohumlama/</guid>
      <description>Veritabanı tohumlama, veri, genel test verilerini veritabanınıza eklemenizi sağlar. Varsayılan olarak, &amp;ldquo;database/seeds&amp;rdquo; altında bir &amp;ldquo;DatabaseSeeder&amp;rdquo; sınıfı vardır.
Çalışan ekim makineleri ile yapılabilir
php artisan db:seed Veya yalnızca tek bir sınıfı işlemek istiyorsanız
php artisan db:seed --class=TestSeederClass Tüm artisan komutlarında olduğu gibi, api belgelerinde bulunabilecek çok çeşitli yöntemlere erişebilirsiniz.
Bir Ekme Makinesi Oluşturma # Ekme makineleri oluşturmak için make:seder Artisan komutunu kullanabilirsiniz. Üretilen tüm ekiciler &amp;ldquo;veritabanı/tohumlar&amp;rdquo; dizinine yerleştirilecektir.
$ php artisan make:seeder MoviesTableSeeder Oluşturulan ekme makineleri bir yöntem içerecektir: &amp;lsquo;run&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Kurulum</title>
      <link>https://www.wikiod.com/tr/laravel/kurulum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/kurulum/</guid>
      <description>Kurulum # Laravel uygulamaları, popüler bir PHP bağımlılık yöneticisi olan Composer ile kurulur ve yönetilir. Yeni bir Laravel uygulaması oluşturmanın iki yolu vardır.
Besteci aracılığıyla # $ composer create-project laravel/laravel [foldername] Veya
$ composer create-project --prefer-dist laravel/laravel [foldername] [klasör adı] yerine yeni Laravel uygulamanızın yüklenmesini istediğiniz dizinin adını yazın. Kurulumdan önce mevcut olmamalıdır. Composer yürütülebilir dosyasını sistem yolunuza eklemeniz de gerekebilir.
Çerçevenin belirli bir sürümünü kullanarak bir Laravel projesi oluşturmak istiyorsanız, bir sürüm kalıbı sağlayabilirsiniz, aksi takdirde projeniz mevcut en son sürümü kullanacaktır.</description>
    </item>
    
    <item>
      <title>Koleksiyonlar</title>
      <link>https://www.wikiod.com/tr/laravel/koleksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/koleksiyonlar/</guid>
      <description>Sözdizimi # $koleksiyon = toplama([&amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;Değer2&amp;rsquo;, &amp;lsquo;Değer3&amp;rsquo;]); // Tuşlar varsayılan olarak 0, 1, 2, &amp;hellip;, Illuminate\Support\Collection veri dizileriyle başa çıkmak için akıcı ve kullanışlı bir arayüz sağlar. Bunları bilmeden de kullanmış olabilirsiniz, örneğin, birden fazla kayıt getiren Model sorguları, bir &amp;lsquo;Illuminate\Support\Collection&amp;rsquo; örneğini döndürür.
Koleksiyonlarla ilgili güncel belgeler için resmi belgeleri burada bulabilirsiniz.
Koleksiyon Oluşturma # &amp;lsquo;collect()&amp;rsquo; yardımcısını kullanarak, aşağıdaki gibi bir diziyi ileterek kolayca yeni koleksiyon örnekleri oluşturabilirsiniz:
$fruits = collect([&#39;oranges&#39;, &#39;peaches&#39;, &#39;pears&#39;]); Yardımcı işlevleri kullanmak istemiyorsanız, doğrudan sınıfı kullanarak yeni bir Koleksiyon oluşturabilirsiniz:</description>
    </item>
    
    <item>
      <title>Bıçak Şablonları</title>
      <link>https://www.wikiod.com/tr/laravel/bcak-sablonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/bcak-sablonlar/</guid>
      <description>Laravel, Blade şablonlama motorunu kutudan çıktığı gibi destekler. Blade şablonlama motoru, ana şablonlar oluşturmamıza ve ana şablonlardan alt şablon yükleme içeriği oluşturmamıza olanak tanır, blade dosyası içinde değişkenler, döngüler ve koşullu ifadeler olabilir.
Görünümler: Giriş # Bir MVC modelindeki görünümler, verileri kullanıcıya sunmak için how mantığını içerir. Bir web uygulamasında, tipik olarak, her yanıtta kullanıcılara geri gönderilen HTML çıktısını oluşturmak için kullanılırlar. Varsayılan olarak, Laravel&amp;rsquo;deki görünümler &amp;lsquo;resources/views&amp;rsquo; dizininde depolanır.
&amp;lsquo;view&amp;rsquo; yardımcı işlevi kullanılarak bir görünüm çağrılabilir:</description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/laravel/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/yonlendirme/</guid>
      <description>Temel Yönlendirme # Yönlendirme, bir tarafta HTTP yöntemleri ve URI&amp;rsquo;ler ve diğer tarafta eylemler arasında bir harita tanımlar. Rotalar normalde app/Http/routes.php dosyasına yazılır.
En basit biçiminde, bir rota, Route cephesinde karşılık gelen HTTP yöntemi çağrılarak, parametre olarak URI ile eşleşen bir dize (uygulama köküne göre) ve bir geri arama geçirilerek tanımlanır.
Örneğin: &amp;ldquo;ev&amp;rdquo; görünümünü döndüren sitenin kök URI&amp;rsquo;sine giden bir yol şöyle görünür:
Route::get(&#39;/&#39;, function() { return view(&#39;home&#39;); }); Gönderi değişkenlerini basitçe yansıtan bir gönderi isteği için bir yol:</description>
    </item>
    
    <item>
      <title>Veritabanı Taşımaları</title>
      <link>https://www.wikiod.com/tr/laravel/veritaban-tasmalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/laravel/veritaban-tasmalar/</guid>
      <description>Veritabanı geçişi içinde # Her taşıma bir &amp;ldquo;up()&amp;rdquo; yöntemine ve bir &amp;ldquo;down()&amp;rdquo; yöntemine sahip olmalıdır. &amp;lsquo;up()&amp;rsquo; yönteminin amacı, veritabanı şemasını yeni durumuna getirmek için gerekli işlemleri gerçekleştirmektir ve &amp;lsquo;down()&amp;rsquo; yönteminin amacı, &amp;lsquo;up()&amp;rsquo; tarafından gerçekleştirilen tüm işlemleri tersine çevirmektir. yöntem. &amp;lsquo;down()&amp;rsquo; yönteminin işlemlerinizi doğru şekilde tersine çevirmesini sağlamak, veritabanı şeması değişikliklerini geri alabilmek için çok önemlidir.
Örnek bir taşıma dosyası şöyle görünebilir:
&amp;lt;?php use Illuminate\Database\Schema\Blueprint; use Illuminate\Database\Migrations\Migration; class AddLastLoggedInToUsersTable extends Migration { /** * Run the migrations.</description>
    </item>
    
  </channel>
</rss>

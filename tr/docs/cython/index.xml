<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cython Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/cython/</link>
    <description>Recent content in Cython Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/cython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cython&#39;a Başlarken</title>
      <link>https://www.wikiod.com/tr/cython/cythona-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cython/cythona-baslarken/</guid>
      <description>Selam Dünya # Bir Cython pyx dosyasının Python&amp;rsquo;dan kullanılmadan önce C koduna (cythonized) çevrilmesi ve derlenmesi gerekir. Yaygın bir yaklaşım, daha sonra bir Python programına aktarılan bir uzantı modülü oluşturmaktır.
Kod # Bu örnek için üç dosya oluşturuyoruz:
hello.pyx Cython kodunu içerir. test.py merhaba uzantısını kullanan bir Python betiğidir. setup.py Cython kodunu derlemek için kullanılır. merhaba.pyx # from libc.math cimport pow cdef double square_and_add (double x): &amp;quot;&amp;quot;&amp;quot;Compute x^2 + x as double.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; sarma</title>
      <link>https://www.wikiod.com/tr/cython/c-sarma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cython/c-sarma/</guid>
      <description>Bir DLL&amp;rsquo;yi Sarma: C++&amp;lsquo;dan Cython&amp;rsquo;dan Python&amp;rsquo;a # Bu, bir C++ dll&amp;rsquo;yi Cython ile sarmanın önemsiz bir örneğini gösterir. Aşağıdaki ana adımları kapsayacaktır:
Visual Studio kullanarak C++ ile örnek bir DLL oluşturun. Python&amp;rsquo;da çağrılabilmesi için DLL&amp;rsquo;yi Cython ile sarın. Cython&amp;rsquo;un kurulu olduğu ve Python&amp;rsquo;a başarıyla aktarabileceğiniz varsayılmaktadır.
DLL adımı için, Visual Studio&amp;rsquo;da bir DLL oluşturmaya aşina olduğunuz da varsayılır.
Tam örnek, aşağıdaki dosyaların oluşturulmasını içerir:
complexFunLib.h: C++ DLL kaynağı için başlık dosyası complexFunLib.</description>
    </item>
    
    <item>
      <title>Cython paketleme</title>
      <link>https://www.wikiod.com/tr/cython/cython-paketleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cython/cython-paketleme/</guid>
      <description>Bir Cython programını pyinstaller kullanarak paketleme # Giriş noktası olan bir Cython programından başlayın:
def do_stuff(): cdef int a,b,c a = 1 b = 2 c = 3 print(&amp;quot;Hello World!&amp;quot;) print([a,b,c]) input(&amp;quot;Press Enter to continue.&amp;quot;) Aynı klasörde bir setup.py dosyası oluşturun:
from distutils.core import setup from Cython.Build import cythonize setup( name = &amp;quot;Hello World&amp;quot;, ext_modules = cythonize(&#39;program.pyx&#39;), ) &amp;ldquo;python setup.py build_ext &amp;ndash;inplace&amp;rdquo; ile çalıştırmak, bir alt klasörde bir &amp;ldquo;.pyd&amp;rdquo; kitaplığı üretecektir.</description>
    </item>
    
    <item>
      <title>C Kodunu Sarma</title>
      <link>https://www.wikiod.com/tr/cython/c-kodunu-sarma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cython/c-kodunu-sarma/</guid>
      <description>Özel bir C kitaplığındaki işlevleri kullanma # Özel bir dağıtımdan rastgele sayılar üreten &amp;ldquo;my_random&amp;rdquo; adında bir C kitaplığımız var. Kullanmak istediğimiz iki işlev sağlar: set_seed(uzun tohum) ve rand() (ve daha pek çoğuna ihtiyacımız yok). Bunları Cython&amp;rsquo;da kullanmak için
.pxd dosyasında bir arayüz tanımlayın ve .pyx dosyasındaki işlevi çağırın. Kod # test_extern.pxd # # extern blocks define interfaces for Cython to C code cdef extern from &amp;quot;my_random.h&amp;quot;: double rand() void c_set_seed &amp;quot;set_seed&amp;quot; (long seed) # rename C version of set_seed to c_set_seed to avoid naming conflict test_extern.</description>
    </item>
    
  </channel>
</rss>

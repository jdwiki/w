<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-core Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/asp-dotnet-core/</link>
    <description>Recent content in asp.net-core Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/asp-dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asp.net-core&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/aspnet-coreu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/aspnet-coreu-kullanmaya-baslama/</guid>
      <description>Kurulum ve Kurulum # Visual Studio&amp;rsquo;yu Yükleme # Visual Studio yüklü değilse, ücretsiz Visual Studio Community Edition&amp;rsquo;ı buradan indirebilirsiniz. Zaten yüklediyseniz, bir sonraki adıma geçebilirsiniz.
ASP.NET Core MVC Uygulaması Oluşturma. # Visual Studio&amp;rsquo;yu açın. Dosya &amp;gt; Yeni Proje&amp;rsquo;yi seçin. Soldaki Şablonlar bölümünde Seçtiğiniz dilin altında Web&amp;rsquo;i seçin. İletişim kutusunda tercih edilen bir Proje türü seçin. İsteğe bağlı: Hedeflemek istediğiniz bir .NET Framework seçin Projenize bir ad verin ve proje için bir Çözüm oluşturmak isteyip istemediğinizi belirtin.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/bagmllk-enjeksiyonu/</guid>
      <description>Aspnet çekirdeği, temel temel kavramlarından biri olarak Dependency Injection ile oluşturulmuştur. Yerleşik olanı seçtiğiniz bir üçüncü taraf kapsayıcı ile değiştirebilmeniz için uygun bir kapsayıcı soyutlaması sunar.
Sözdizimi # IServiceCollection.Add(ServiceDescriptor öğesi); IServiceCollection.AddScoped(ServiceType yazın); IServiceCollection.AddScoped(Type serviceType, Type applicationType); IServiceCollection.AddScoped(Type serviceType, Func&amp;lt;IServiceProvider, nesne&amp;gt; uygulamaFactory); IServiceCollection.AddScoped&amp;lt;TService&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; uygulamaFactory) IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;(Func&amp;lt;IServiceProvider, TImplementation&amp;gt; applicationFactory) IServiceCollection.AddSingleton(ServiceType yazın); IServiceCollection.AddSingleton(Type serviceType, Func&amp;lt;IServiceProvider, nesne&amp;gt; uygulamaFactory); IServiceCollection.AddSingleton(Type serviceType, Type applicationType); IServiceCollection.AddSingleton(Type serviceType, nesne uygulamaÖrneği); IServiceCollection.AddSingleton&amp;lt;TService&amp;gt;() IServiceCollection.AddSingleton&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; uygulamaFactory) IServiceCollection.</description>
    </item>
    
    <item>
      <title>Hız sınırlaması</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/hz-snrlamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/hz-snrlamas/</guid>
      <description>AspNetCoreRateLimit, istemcilerin IP adresine veya istemci kimliğine dayalı olarak bir Web API&amp;rsquo;sine veya MVC uygulamasına yapabileceği isteklerin oranını kontrol etmek için tasarlanmış açık kaynaklı bir ASP.NET Core hız sınırlama çözümüdür.
Müşteri kimliğine göre hız sınırlaması # ClientRateLimit ara yazılımı ile, bir İstemcinin saniye, 15 dakika vb. gibi bir zaman aralığında maksimum sayıda çağrı yapmasına izin vermek gibi farklı senaryolar için birden fazla sınır belirleyebilirsiniz. Bu sınırları, bir API&amp;rsquo;ye veya size yapılan tüm istekleri karşılamak için tanımlayabilirsiniz.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Ara Yazılım kullanarak hem İstek hem de Yanıtı günlüğe kaydedin</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/aspnet-core---ara-yazlm-kullanarak-hem-istek-hem-de-yant-gunluge-kaydedin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/aspnet-core---ara-yazlm-kullanarak-hem-istek-hem-de-yant-gunluge-kaydedin/</guid>
      <description>Bir süredir bir ASP.Net Çekirdeğinde istekleri ve yanıtı kaydetmenin en iyi yolunu aradım. Hizmetler geliştiriyordum ve gereksinimlerden biri, talebi, yanıtıyla birlikte veritabanına tek bir kayıtta kaydetmekti. Çok fazla konu var ama hiçbiri benim için işe yaramadı. ya yalnızca istek içindir, yalnızca yanıt içindir ya da işe yaramadı. Sonunda yapabildiğimde ve projem sırasında daha iyi hata işleme ve istisnaları günlüğe kaydetme konusunda gelişti, bu yüzden paylaşmayı düşündüm.
bana yardımcı olan bazı konular:</description>
    </item>
    
    <item>
      <title>Paketleme ve Küçültme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/paketleme-ve-kucultme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/paketleme-ve-kucultme/</guid>
      <description>Paketleyici ve Minifier Uzantısı # Visual Studio ayrıca, bu işlemi sizin için gerçekleştirebilecek bir Bundler and Minifier Extension içerir. Uzantı, bir satır kod yazmadan ihtiyacınız olan dosyaları kolayca seçmenize ve paketlemenize olanak tanır.
Paketlerinizi Oluşturma # Uzantıyı yükledikten sonra, bir pakete dahil etmek istediğiniz tüm belirli dosyaları seçin ve uzantıdan Dosyaları Paketle ve Küçült seçeneğini kullanın:
Bu, paketinize bir ad vermenizi ve onu kaydetmek için bir konum seçmenizi isteyecektir. Daha sonra projenizde aşağıdaki gibi görünen &amp;ldquo;bundleconfig.</description>
    </item>
    
    <item>
      <title>Angular2 ve .Net Core</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/angular2-ve-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/angular2-ve-net-core/</guid>
      <description>Angular 2 Hello World için hızlı eğitim! Visual Studio 2015&amp;rsquo;te .Net Core ile Uygulama # Adımlar:
Boş .Net Core Web Uygulaması Oluşturun: wwwroot&amp;rsquo;a gidin ve Index.html adında normal bir html sayfası oluşturun: Startup.cs&amp;rsquo;i statik dosyaları kabul edecek şekilde yapılandırın (bunun için &amp;ldquo;project.json&amp;rdquo; dosyasına &amp;ldquo;Microsoft.AspNetCore.StaticFiles&amp;rdquo;: &amp;ldquo;1.0.0&amp;rdquo; kitaplığının eklenmesi gerekir): NPN Dosyası Ekle:
Right click the WebUi project and add NPN Configuration File (package.json): Verify the last versions of the packages: Note: If visual studio does not detect the versions of the packages (Check all packages, because some of them does show the version, and some others don&amp;rsquo;t), it might be because the Node version coming in visual studio is not working correctly, so it will probably require to install node js externally and then link that installation with visual studio.</description>
    </item>
    
    <item>
      <title>Birden çok Ortamı Yapılandırma</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/birden-cok-ortam-yaplandrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/birden-cok-ortam-yaplandrma/</guid>
      <description>Ortam başına uygulama ayarlarına sahip olmak # Her ortam için ayrı bir uygulama ayarları oluşturmanız gerekir.{EnvironmentName}.json dosyaları:
appsettings.Development.json appsettings.Staging.json appsettings.Production.json Ardından project.json dosyasını açın ve bunları &amp;ldquo;publishOptions&amp;rdquo; bölümündeki &amp;ldquo;include&amp;rdquo; içine ekleyin. Bu, yayınladığınızda dahil edilecek tüm dosya ve klasörleri listeler:
&amp;quot;publishOptions&amp;quot;: { &amp;quot;include&amp;quot;: [ &amp;quot;appsettings.Development.json&amp;quot;, &amp;quot;appsettings.Staging.json&amp;quot;, &amp;quot;appsettings.Production.json&amp;quot; ... ] } Son adım. Başlangıç ​​sınıfınıza şunu ekleyin:
.AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true); yapılandırma kaynaklarını kurduğunuz yapıcıda:
var builder = new ConfigurationBuilder() .SetBasePath(env.ContentRootPath) .AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true) .</description>
    </item>
    
    <item>
      <title>yerelleştirme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/yerellestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/yerellestirme/</guid>
      <description>JSON dil kaynaklarını kullanarak yerelleştirme # ASP.NET Core&amp;rsquo;da uygulamamızı yerelleştirmenin/küreselleştirmenin birkaç farklı yolu vardır. İhtiyaçlarınıza uygun bir yol seçmek önemlidir. Bu örnekte, .json dosyalarından dile özgü dizeleri okuyan ve uygulamanın tüm bölümlerinde yerelleştirme sağlamak ve yüksek performansı korumak için bunları bellekte saklayan çok dilli bir ASP.NET Core uygulamasını nasıl yapabileceğimizi göreceksiniz. .
Bunu yapma şeklimiz Microsoft.EntityFrameworkCore.InMemory paketini kullanmaktır.
Notlar:
Bu projenin ad alanı, projelerinizin kendi ad alanıyla değiştirebileceğiniz &amp;lsquo;DigitalShop&amp;rsquo;tur. Garip hatalarla karşılaşmamak için yeni bir proje oluşturmayı düşünün Bu örnek hiçbir şekilde en iyi uygulamaları göstermez, Bu nedenle geliştirilebileceğini düşünüyorsanız lütfen düzenleyin Başlamak için, &amp;lsquo;project.</description>
    </item>
    
    <item>
      <title>Kerestecilik</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/kerestecilik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/kerestecilik/</guid>
      <description>Kontrolöre Kaydedici Ekle # Bir ILoggerFactory istemek ve açıkça bir ILogger örneği oluşturmak yerine, bir ILogger isteyebilirsiniz (burada T, kaydediciyi isteyen sınıftır).
public class TodoController : Controller { private readonly ILogger _logger; public TodoController(ILogger&amp;lt;TodoController&amp;gt; logger) { _logger = logger; } } NLog Logger&amp;rsquo;ı Kullanma # NLog.Extensions.Logging, Microsoft&amp;rsquo;un .NET Core ve ASP.NET Core&amp;rsquo;daki resmi NLog sağlayıcısıdır. Burada ve burada sırasıyla talimat ve örnektir.
ASP.NET core 1.0 uygulamasında Serilog&amp;rsquo;u kullanma # project.json&amp;rsquo;da aşağıdaki bağımlılıkları ekleyin-</description>
    </item>
    
    <item>
      <title>MailKit kullanarak .Net Core uygulamalarında E-posta Gönderme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-core/mailkit-kullanarak-net-core-uygulamalarnda-e-posta-gonderme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-core/mailkit-kullanarak-net-core-uygulamalarnda-e-posta-gonderme/</guid>
      <description>Şu anda .Net Core, .Net&amp;rsquo;ten `System.Net.Mail&amp;rsquo; gibi e-postalar gönderme desteği içermemektedir. MailKit projesi (nuget adresinde mevcuttur) bu amaç için güzel bir kütüphanedir.
E-posta göndermek için basit uygulama # using MailKit.Net.Smtp; using MimeKit; using MimeKit.Text; using System.Threading.Tasks; namespace Project.Services { /// Using a static class to store sensitive credentials /// for simplicity. Ideally these should be stored in /// configuration files public static class Constants { public static string SenderName =&amp;gt; &amp;quot;&amp;lt;sender_name&amp;gt;&amp;quot;; public static string SenderEmail =&amp;gt; &amp;quot;&amp;lt;sender_email&amp;gt;&amp;quot;; public static string EmailPassword =&amp;gt; &amp;quot;email_password&amp;quot;; public static string SmtpHost =&amp;gt; &amp;quot;&amp;lt;smtp_host&amp;gt;&amp;quot;; public static int SmtpPort =&amp;gt; &amp;quot;smtp_port&amp;quot;; } public class EmailService : IEmailSender { public Task SendEmailAsync(string recipientEmail, string subject, string message) { MimeMessage mimeMessage = new MimeMessage(); mimeMessage.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sass Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/sass/</link>
    <description>Recent content in sass Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/sass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sass&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/sass/sassa-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/sassa-baslarken/</guid>
      <description>Değişkenler # Sık kullandığınız bir değer varsa onu bir değişkende saklayabilirsiniz. Örneğin, bunu renk şemalarını tanımlamak için kullanabilirsiniz. Şemanızı yalnızca bir kez tanımlamanız gerekir ve ardından bunu stil sayfalarınızda kullanabilirsiniz.
Bir değişkeni tanımlamak için adının önüne $ sembolü eklemelisiniz. (PHP&amp;rsquo;de yaptığınız gibi.)
Herhangi bir geçerli CSS özelliği değerini bir değişken içinde saklayabilirsiniz. Renkler, yazı tipleri veya URL&amp;rsquo;ler gibi.
Örnek 1:
$foreground: #FAFAFA; $background: rgb(0, 0, 0); body { color: $foreground; background-color: $background; } p { color: rgb(25, 25, 20); background-color: $background; } İçe aktarılıyor # Aşağıdaki senaryoyu varsayalım: İki stil sayfanız var: _variables.</description>
    </item>
    
    <item>
      <title>SCSS ve Sass</title>
      <link>https://www.wikiod.com/tr/sass/scss-ve-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/scss-ve-sass/</guid>
      <description>Ana Farklılıklar # İnsanlar genellikle bu CSS önişlemcisinin adı olarak &amp;lsquo;Sass&amp;rsquo; deseler de, genellikle &amp;lsquo;SCSS&amp;rsquo; sözdizimini ifade ederler. &amp;ldquo;Sass&amp;rdquo;, &amp;ldquo;.sass&amp;rdquo; dosya uzantısını kullanırken &amp;ldquo;SCSS&amp;rdquo;-&amp;ldquo;Sass&amp;rdquo;, &amp;ldquo;.scss&amp;rdquo; uzantısını kullanır. Her ikisi de &amp;ldquo;Sass&amp;rdquo; olarak anılır.
Genel olarak konuşursak, &amp;lsquo;SCSS&amp;rsquo; sözdizimi daha yaygın olarak kullanılır. &amp;ldquo;SCSS&amp;rdquo;, daha fazla yeteneğe sahip normal CSS&amp;rsquo;ye benzerken &amp;ldquo;Sass&amp;rdquo;, normal CSS&amp;rsquo;den oldukça farklı görünür. Her iki sözdizimi de aynı yeteneklere sahiptir.
Sözdizimi # Temel farklar, &amp;ldquo;Sass&amp;quot;ın, &amp;ldquo;SCSS&amp;quot;nin yaptığı yerde, küme parantezleri veya noktalı virgül kullanmamasıdır.</description>
    </item>
    
    <item>
      <title>Değişkenler</title>
      <link>https://www.wikiod.com/tr/sass/degiskenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/degiskenler/</guid>
      <description>Sözdizimi # $değişken_adı: değer; SCSS # Tıpkı Sass&amp;rsquo;ta olduğu gibi, SCSS değişkenleri, bir SCSS belgesi boyunca birden çok kez kullanılacak bir değeri depolamak için kullanılır.
Değişkenler çoğunlukla sık kullanılan özellik değerlerini (yazı tipleri ve renkler gibi) depolamak için kullanılır, ancak herhangi bir özelliğin herhangi bir değeri için kullanılabilir.
SCSS, bir değişken bildirmek için $ sembolünü kullanır.
$font-stack: Helvetica, sans-serif; $primary-color: #000000; body { font-family: $font-stack; color: $primary-color; } Bu değişkene henüz atanmamışsa yeni bir değer atamak istiyorsanız, bir değişken bildirirken !</description>
    </item>
    
    <item>
      <title>yuvalama</title>
      <link>https://www.wikiod.com/tr/sass/yuvalama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/yuvalama/</guid>
      <description>Temel yuvalama # Başka bir kuralın içinde yeni bir kural bildirdiğinizde buna yuvalama denir. Aşağıda gösterildiği gibi, temel yuvalama ile yuvalanmış seçici, tüm üst öğeleri başa eklenmiş ve bir boşlukla ayrılmış yeni bir CSS seçicisi olarak derlenecektir.
// SCSS .parent { margin: 1rem; .child { float: left; } } // CSS output .parent { margin: 1rem; } .parent .child { float: left; } Yuvalama derinliği # Yuvalama çok güçlü bir özelliktir, ancak dikkatli kullanılmalıdır.</description>
    </item>
    
    <item>
      <title>Döngüler ve Koşullar</title>
      <link>https://www.wikiod.com/tr/sass/donguler-ve-kosullar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/donguler-ve-kosullar/</guid>
      <description>Döngü sırasında # @while yönergesi, belirtilen koşul yanlış olana kadar bir kod bloğu üzerinde döngü yapacaktır. Aşağıdaki örnekte, bu döngü &amp;ldquo;$font-size&amp;rdquo; değerini 2 artırarak &amp;ldquo;$font-size &amp;lt;= 18&amp;rdquo; değerine kadar çalışacaktır.
$font-size: 12; @while $font-size &amp;lt;= 18 { .font-size-#{$font-size} { font-size: ($font-size * 1px); } $font-size: $font-size + 2; } Yukarıdaki kodun çıktısı
.font-size-12 { font-size: 12px; } .font-size-14 { font-size: 14px; } .font-size-16 { font-size: 16px; } .font-size-18 { font-size: 18px; } döngü için # @for yönergesi, belirli bir sayıda yineleme için bazı kodlar arasında geçiş yapmanızı sağlar ve iki biçimi vardır:</description>
    </item>
    
    <item>
      <title>Parçalar ve İthalat</title>
      <link>https://www.wikiod.com/tr/sass/parcalar-ve-ithalat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/parcalar-ve-ithalat/</guid>
      <description>İçe aktarılıyor # @import kullanmak, dosyalarınızı birden çok küçük dosyaya bölmenize olanak tanır. Stil sayfalarınız için daha iyi bir yapı tutabildiğiniz ve çok büyük dosyalardan kaçınabileceğiniz için bu mantıklıdır.
Örnek # Diyelim ki birkaç dosyanız var.
- application.scss - header.scss - content |-- article.scss &#39;-- list.scss - footer.scss Ana stil sayfanız application.scss tüm dosyaları içe aktarabilir ve kendi stillerini tanımlayabilir.
// application.scss // Import files: @import &#39;header.scss&#39;; @import &#39;content/article.scss&#39;; @import &#39;content/list.</description>
    </item>
    
    <item>
      <title>operatörler</title>
      <link>https://www.wikiod.com/tr/sass/operatorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/operatorler/</guid>
      <description>Aritmetik operatörler # Sass, aşağıdaki standart aritmetik operatörleri destekler:
Operatör Açıklama + Ekleme – çıkarma * çarpma / Bölüm % Kalan Örnekler
p { font-size: 16px + 4px; // 20px } h3 { width: 2px * 5 + 12px; // 22px } h2 { width: 8px + (12px / 2) * 3; // 26px } Normal işlem sırası her zamanki gibi geçerlidir.
Atama operatörü # Sass, değişkenlere değer atamak için iki nokta üst üste (:) operatörünü kullanır.</description>
    </item>
    
    <item>
      <title>karışımlar</title>
      <link>https://www.wikiod.com/tr/sass/karsmlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/karsmlar/</guid>
      <description>Sözdizimi # @mixin mixin-name ($argument1, $argument, ...){ ... } Değişken argümanla karıştırma # Karışımlarda, kullanırken tekli veya çoklu argümanların olabileceği bazı durumlar vardır. &amp;ldquo;border-radius:4px;&amp;rdquo; gibi tek bir argümanın veya &amp;ldquo;border-radius:4px 3px 2px 1px;&amp;rdquo; gibi birden fazla argümanın olabileceği bir &amp;ldquo;border-radius&amp;rdquo; örneğini ele alalım.
Anahtar Kelime Bağımsız Değişkenleri ile Geleneksel karıştırma aşağıdaki gibi olacaktır:-
@mixin radius($rad1, $rad2, $rad3, $rad4){ -webkit-border-radius: $rad1 $rad2 $rad3 $rad4; -moz-border-radius: $rad1 $rad2 $rad3 $rad4; -ms-border-radius: $rad1 $rad2 $rad3 $rad4; -o-border-radius: $rad1 $rad2 $rad3 $rad4; border-radius: $rad1 $rad2 $rad3 $rad4; } ve olarak kullanılır</description>
    </item>
    
    <item>
      <title>Kurulum</title>
      <link>https://www.wikiod.com/tr/sass/kurulum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/kurulum/</guid>
      <description>Bu, yalnızca birçok sistem için ana SASS derleyicisi olan Ruby&amp;rsquo;yi kapsar, ancak başka seçenekler de mevcuttur. Herhangi bir düğüm geliştiricisi için çok yaygın bir tanesi node-sass olacaktır ki bu, birçok kullanıcı için daha kolay ve büyüklük sıraları daha hızlı olabilir.
Mac # Ruby, bir Mac bilgisayarda önceden yüklenmiş olarak gelir.
Sass&amp;rsquo;ı yüklemek için aşağıdaki talimatları izleyin:
CMD&amp;rsquo;yi açın gem install sass komutunu çalıştırın Bir hata mesajı alırsanız, sudo gem install sass deneyin sass -v kullanarak çalışıp çalışmadığını kontrol edin Linux # Kurulumdan önce Ruby&amp;rsquo;nin yüklenmesi gerekir.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/sass/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sass/fonksiyonlar/</guid>
      <description>Sözdizimi # @function function-name(parameter) { /* Function body */ } Temel fonksiyonlar # Bir işlev, bir mixin görünümüne benzer, ancak herhangi bir stil eklemez, yalnızca bir değer döndürür. Stillerinizde mantık tekrarını önlemek için fonksiyonlar kullanılmalıdır.
Sass, standart CSS işlevi sözdizimi kullanılarak çağrılan bazı yerleşik işlevlere sahiptir.
h1 { background: hsl(0, 25%, 50%); } İşlevler aşağıdaki sözdizimi kullanılarak bildirilir,
@function multiply(x, y) { @return x * y; } // example use below h1 { margin-top: multiply(10px, 2); } Yukarıdaki kodda, @function bir fonksiyon bildirir ve @return dönüş değerini belirtir.</description>
    </item>
    
  </channel>
</rss>

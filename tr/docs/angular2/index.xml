<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Açısal 2 Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/angular2/</link>
    <description>Recent content in Açısal 2 Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/angular2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angular 2&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/angular2/angular-2yi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/angular-2yi-kullanmaya-baslama/</guid>
      <description>angular2&amp;rsquo;yi angular-cli ile kurun # Bu örnek, Angular 2&amp;rsquo;nin hızlı kurulumu ve hızlı bir örnek projenin nasıl oluşturulacağıdır.
Önkoşullar: # Node.js v4 veya üstü. npm v3 veya üstü veya iplik. Bir terminal açın ve komutları tek tek çalıştırın:
npm install -g @angular/cli veya
yarn global add @angular/cli paket yöneticisi seçiminize bağlı olarak.
Önceki komut, PATH&amp;rsquo;e yürütülebilir ng ekleyerek global olarak @angular/cli yükler.
Yeni bir proje kurmak için # Terminal ile yeni projeyi kurmak istediğiniz klasöre gidin.</description>
    </item>
    
    <item>
      <title>Açısal 2 Form Güncellemesi</title>
      <link>https://www.wikiod.com/tr/angular2/acsal-2-form-guncellemesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/acsal-2-form-guncellemesi/</guid>
      <description>Angular 2, yerel bir şablon değişkeni oluşturarak ngForm örneğine erişmeye izin verir. Angular 2, yönerge meta verilerinin exportAs özelliğini belirterek ngForm gibi yönerge örneklerini ortaya çıkarır. Şimdi, buradaki avantaj, fazla kodlama olmadan, ngForm örneğine erişebilir ve gönderilen değerlere erişmek veya özellikleri kullanarak tüm alanların geçerli olup olmadığını kontrol etmek için kullanabilirsiniz (geçerli, gönderildi, değer vb.).
#f = ngForm (creates local template instance &amp;quot;f&amp;quot;) ngForm, gönderildiğinde &amp;ldquo;ngSubmit&amp;rdquo; olayını yayar (olay yayıcı hakkında daha fazla ayrıntı için @Output belgelerini kontrol edin)</description>
    </item>
    
    <item>
      <title>borular</title>
      <link>https://www.wikiod.com/tr/angular2/borular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/borular/</guid>
      <description>Boru | karakteri, Angular 2&amp;rsquo;de boruları uygulamak için kullanılır. Borular, AngularJS&amp;rsquo;deki filtrelere çok benzer, çünkü her ikisi de verileri belirli bir biçime dönüştürmeye yardımcı olur.
Parametreler # Fonksiyon/Parametre Açıklama @Pipe({ad, saf}) boru için meta veriler, boru sınıfından hemen önce gelmelidir isim: dize şablonun içinde ne kullanacaksınız saf: boolean varsayılan değer doğru ise, borunuzun daha sık yeniden değerlendirilmesi için bunu yanlış olarak işaretleyin dönüştür(değer, argümanlar[]? ) şablondaki değerleri dönüştürmek için çağrılan işlev değer: herhangi bir dönüştürmek istediğiniz değer argümanlar: herhangi bir[] dönüşümünüze dahil etmeniz gerekebilecek argümanlar.</description>
    </item>
    
    <item>
      <title>ViewContainerRef.createComponent kullanarak dinamik olarak bileşenler ekleyin</title>
      <link>https://www.wikiod.com/tr/angular2/viewcontainerrefcreatecomponent-kullanarak-dinamik-olarak-bilesenler-ekleyin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/viewcontainerrefcreatecomponent-kullanarak-dinamik-olarak-bilesenler-ekleyin/</guid>
      <description>Dinamik bileşenleri bildirimsel olarak ekleyen bir sarmalayıcı bileşen # Bir bileşenin türünü girdi olarak alan ve kendi içinde o bileşen türünün bir örneğini oluşturan özel bir bileşen. Giriş güncellendiğinde, önceden eklenen dinamik bileşen kaldırılır ve yerine yenisi eklenir.
@Component({ selector: &#39;dcl-wrapper&#39;, template: `&amp;lt;div #target&amp;gt;&amp;lt;/div&amp;gt;` }) export class DclWrapper { @ViewChild(&#39;target&#39;, { read: ViewContainerRef }) target; @Input() type; cmpRef: ComponentRef; private isViewInitialized: boolean = false; constructor(private resolver: ComponentResolver) {} updateComponent() { if (!</description>
    </item>
    
    <item>
      <title>Alaycı @ngrxStore</title>
      <link>https://www.wikiod.com/tr/angular2/alayc-ngrxstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/alayc-ngrxstore/</guid>
      <description>@ngrx/Store, Angular 2 projelerinde daha yaygın olarak kullanılıyor. Bu nedenle, Mağazanın, onu kullanmak isteyen herhangi bir Bileşen veya Hizmetin yapıcısına enjekte edilmesi gerekir. Birim testi Mağaza, basit bir hizmeti test etmek kadar kolay değildir. Birçok problemde olduğu gibi, çözümleri uygulamanın sayısız yolu vardır. Ancak temel tarif, Observer arayüzü için bir sahte sınıf yazmak ve Store için bir sahte sınıf yazmaktır. Ardından Store&amp;rsquo;u TestBed&amp;rsquo;inize sağlayıcı olarak enjekte edebilirsiniz.
Parametreler # isim açıklama değer gözlemlenecek sonraki değer hata açıklama hata atılacak hata süper açıklama eylem$ sahte sınıfta tanımlanmadıkça hiçbir şey yapmayan sahte Gözlemci actionReducer$ sahte sınıfta tanımlanmadıkça hiçbir şey yapmayan sahte Gözlemci gözlem$ sahte Gözlemlenebilir Gözlemci geneldir, ancak birim testi karmaşıklığından kaçınmak için &amp;ldquo;any&amp;rdquo; türünde olmalıdır.</description>
    </item>
    
    <item>
      <title>API istekleri ile Angular RXJS Konuları ve Gözlenebilirleri</title>
      <link>https://www.wikiod.com/tr/angular2/api-istekleri-ile-angular-rxjs-konular-ve-gozlenebilirleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/api-istekleri-ile-angular-rxjs-konular-ve-gozlenebilirleri/</guid>
      <description>Angular 2 Http hizmeti ve RxJS ile API istekleri yapmak, Angular 1.x&amp;rsquo;teki vaatlerle çalışmaya çok benzer.
İstek yapmak için Http sınıfını kullanın. Http sınıfı, ilgili yöntemlerle &amp;lsquo;GET&amp;rsquo;, &amp;lsquo;POST&amp;rsquo;, &amp;lsquo;PUT&amp;rsquo;, &amp;lsquo;DELETE&amp;rsquo;, &amp;lsquo;PATCH&amp;rsquo;, &amp;lsquo;HEAD&amp;rsquo; HTTP isteklerini yayınlama yöntemlerini gösterir. Ayrıca, her türlü HTTP isteğini yayınlamak için genel bir &amp;ldquo;istek&amp;rdquo; yöntemini ortaya çıkarır.
&amp;lsquo;Http&amp;rsquo; sınıfının tüm yöntemleri, RxJS işlemlerini uygulayabileceğiniz bir &amp;lsquo;Gözlenebilir&amp;lt;Yanıt&amp;gt;&amp;rsquo; döndürür. .subscribe() yöntemini çağırırsınız ve Gözlemlenebilir akışta veri döndürüldüğünde çağrılacak bir işlevi iletirsiniz.</description>
    </item>
    
    <item>
      <title>Yönlendirme (3.0.0&#43;)</title>
      <link>https://www.wikiod.com/tr/angular2/yonlendirme-300-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/yonlendirme-300-/</guid>
      <description>Yönlendirici ile yapabileceğimiz birkaç püf noktası daha var (erişim kısıtlaması gibi), ancak bunlar ayrı bir eğitimde ele alınabilir.
Yeni bir rotaya ihtiyacınız varsa, sadece app.routes.ts dosyasını değiştirin ve aşağıdaki adımları izleyin:
Bileşeni İçe Aktarın &amp;ldquo;routes&amp;rdquo; dizisine ekleyin. Yeni bir &amp;ldquo;yol&amp;rdquo; ve &amp;ldquo;bileşen&amp;rdquo; eklediğinizden emin olun. Bir Rotaya veya Rotadan Erişimi Kontrol Etme # Varsayılan Açısal yönlendirici, koşulsuz olarak herhangi bir rotaya ve rotadan navigasyona izin verir. Bu her zaman istenen davranış değildir.</description>
    </item>
    
    <item>
      <title>açısal 2&#39;de Bootstrap Boş modülü</title>
      <link>https://www.wikiod.com/tr/angular2/acsal-2de-bootstrap-bos-modulu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/acsal-2de-bootstrap-bos-modulu/</guid>
      <description>Boş bir modül # import { NgModule } from &#39;@angular/core&#39;; @NgModule({ declarations: [], // components your module owns. imports: [], // other modules your module needs. providers: [], // providers available to your module. bootstrap: [] // bootstrap this root component. }) export class MyModule {} Bu, önyükleme için hiçbir bildirim, içe aktarma, sağlayıcı veya bileşen içermeyen boş bir modüldür. Bunu bir referans olarak kullanın.
Uygulama Kök Modülü # import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { AppComponent } from &#39;.</description>
    </item>
    
    <item>
      <title>Angular 2 Uygulamasını Test Etme</title>
      <link>https://www.wikiod.com/tr/angular2/angular-2-uygulamasn-test-etme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/angular-2-uygulamasn-test-etme/</guid>
      <description>Jasmine test çerçevesini yükleme # Angular 2 uygulamalarını test etmenin en yaygın yolu Jasmine test çerçevesidir. Jasmine, kodunuzu tarayıcıda test etmenizi sağlar.
Düzenlemek # Başlamak için tek ihtiyacınız olan &amp;ldquo;yasemin çekirdeği&amp;rdquo; paketidir (&amp;ldquo;yasemin&amp;rdquo; değil).
npm install jasmine-core --save-dev --save-exact Doğrulayın # Jasmine&amp;rsquo;in düzgün kurulduğunu doğrulamak için aşağıdaki içerikle ./src/unit-tests.html dosyasını oluşturun ve tarayıcıda açın.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Ng App Unit Tests&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;../node_modules/jasmine-core/lib/jasmine-core/jasmine.css&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;../node_modules/jasmine-core/lib/jasmine-core/jasmine.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;.</description>
    </item>
    
    <item>
      <title>Yeniden boyutlandırma olaylarını algılama</title>
      <link>https://www.wikiod.com/tr/angular2/yeniden-boyutlandrma-olaylarn-alglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular2/yeniden-boyutlandrma-olaylarn-alglama/</guid>
      <description>Pencere yeniden boyutlandırma olayını dinleyen bir bileşen. # Belirli bir pencere genişliğinde gizlenecek bir bileşenimiz olduğunu varsayalım.
import { Component } from &#39;@angular/core&#39;; @Component({ ... template: ` &amp;lt;div&amp;gt; &amp;lt;p [hidden]=&amp;quot;!visible&amp;quot; (window:resize)=&amp;quot;onResize($event)&amp;quot; &amp;gt;Now you see me...&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;now you dont!&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ` ... }) export class MyComponent { visible: boolean = false; breakpoint: number = 768; constructor() { } onResize(event) { const w = event.target.innerWidth; if (w &amp;gt;= this.breakpoint) { this.visible = true; } else { // whenever the window is less than 768, hide this component.</description>
    </item>
    
  </channel>
</rss>

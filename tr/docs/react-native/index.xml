<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tepki-yerel Eğitim on </title>
    <link>https://www.wikiod.com/tr/docs/react-native/</link>
    <description>Recent content in tepki-yerel Eğitim on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/react-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React-native ile çalışmaya başlama</title>
      <link>https://www.wikiod.com/tr/react-native/react-native-ile-calsmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/react-native-ile-calsmaya-baslama/</guid>
      <description>Mac için Kurulum # Paket yöneticisi Homebrew &amp;lsquo;brew&amp;rsquo; kurulumu
Bunu bir Terminal istemine yapıştırın.
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Xcode IDE&amp;rsquo;yi yükleme
Aşağıdaki bağlantıyı kullanarak indirin veya Mac App Store&amp;rsquo;da bulun
https://developer.apple.com/download/
NOT: Xcode.app üretim sürümüyle birlikte Xcode-beta.app yüklüyse, &amp;ldquo;xcodebuild&amp;rdquo; aracının üretim sürümünü kullandığınızdan emin olun. Şunlarla ayarlayabilirsiniz:
sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/
Android ortamını yükleme
Git git *XCode&amp;rsquo;u kurduysanız, Git zaten kuruludur, aksi takdirde aşağıdakileri çalıştırın
brew install git En son JDK</description>
    </item>
    
    <item>
      <title>Android - Donanım Geri Düğmesi</title>
      <link>https://www.wikiod.com/tr/react-native/android---donanm-geri-dugmesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/android---donanm-geri-dugmesi/</guid>
      <description>Android&amp;rsquo;de Donanım geri düğmesine basıldığında Algıla # BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() { if (!this.onMainScreen()) { this.goBack(); return true; } return false; }); Not: this.onMainScreen() ve this.goBack() işlevleri yerleşik değildir, bunları da uygulamanız gerekir. (https://github.com/immidi/react-native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712)
Navigator ile birlikte BackAndroid örneği # Bu, React Native&amp;rsquo;in &amp;lsquo;BackAndroid&amp;rsquo;inin &amp;lsquo;Navigator&amp;rsquo; ile birlikte nasıl kullanılacağına dair bir örnektir.
&amp;lsquo;componentWillMount&amp;rsquo;, geri düğmesindeki dokunuşları işlemek için bir olay dinleyicisi kaydeder. Geçmiş yığınında başka bir görünüm olup olmadığını kontrol eder ve varsa geri döner, aksi takdirde varsayılan davranışı korur.</description>
    </item>
    
    <item>
      <title>Özel yazı tipleri</title>
      <link>https://www.wikiod.com/tr/react-native/ozel-yaz-tipleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/ozel-yaz-tipleri/</guid>
      <description>Hem Android hem de IOS için özel yazı tipleri # Proje klasörünüzde bir klasör oluşturun ve yazı tiplerinizi buna ekleyin. Örnek:
Örnek: Burada &amp;ldquo;mystuff&amp;rdquo;, ardından &amp;ldquo;fonts&amp;rdquo; adında bir kök klasörü ekledik ve içine yazı tiplerimizi yerleştirdik:
package.json içine aşağıdaki kodu ekleyin.
{ ... &amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;path/to/fontfolder&amp;quot; ] }, ... } Yukarıdaki örnek için, package.json dosyamız artık &amp;ldquo;mystuff/fonts&amp;rdquo; yoluna sahip olacaktır:
&amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;mystuff/fonts&amp;quot; ] } react-native link komutunu çalıştırın.</description>
    </item>
    
    <item>
      <title>sahne</title>
      <link>https://www.wikiod.com/tr/react-native/sahne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/sahne/</guid>
      <description>Proplar veya özellikler, bir React uygulamasında alt bileşenlere iletilen verilerdir. Tepki bileşenleri, donanımlarına ve iç durumlarına göre UI öğelerini oluşturur. Bir bileşenin aldığı (ve kullandığı) aksesuarlar, dışarıdan nasıl kontrol edilebileceğini tanımlar.
PropTypes # &amp;lsquo;prop-types&amp;rsquo; paketi, bileşene geçirilen props türlerinin doğru olmasını sağlayan çalışma zamanı türü denetimi eklemenize olanak tanır. Örneğin, aşağıdaki bileşene bir &amp;ldquo;name&amp;rdquo; veya &amp;ldquo;isYummy&amp;rdquo; prop göndermezseniz, geliştirme modunda bir hata verir. Üretim modunda pervane tipi kontrolleri yapılmaz. &amp;lsquo;propTypes&amp;rsquo; tanımlamak, bileşeninizi daha okunabilir ve bakımı yapılabilir hale getirebilir.</description>
    </item>
    
    <item>
      <title>HTTP İstekleri</title>
      <link>https://www.wikiod.com/tr/react-native/http-istekleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/http-istekleri/</guid>
      <description>Sözdizimi # getir(url, seçenekler)[.then(&amp;hellip;)[.catch(&amp;hellip;)]]
Getirme API&amp;rsquo;si, HTTP istekleri için en yaygın kullanılan API&amp;rsquo;dir. Moderndir, esnektir ve vaatleri kullanır.
XMLHttpRequest API, HTTP istekleri için de kullanılır ve geliştiricilerin ApiSauce gibi mevcut favori kitaplıklarını kullanabilmeleri için temel olarak dahil edilmiştir.
Websocket API, sohbet uygulamaları gibi gerçek zamanlı senaryolarda &amp;ldquo;canlı&amp;rdquo; veriler için kullanılabilir.
Vaatleri getirme API&amp;rsquo;si ve Redux ile kullanma # Redux, React-Native ile kullanılan en yaygın durum yönetimi kitaplığıdır. Aşağıdaki örnek, getirme API&amp;rsquo;sinin nasıl kullanılacağını ve redux-thunk kullanarak uygulamanızın durum düşürücüsünde değişiklikleri nasıl göndereceğinizi gösterir.</description>
    </item>
    
    <item>
      <title>ListView ile RefreshControl</title>
      <link>https://www.wikiod.com/tr/react-native/listview-ile-refreshcontrol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/listview-ile-refreshcontrol/</guid>
      <description>Referanslar:
RefreshControl: https://facebook.github.io/react-native/docs/refreshcontrol.html
ListView: https://facebook.github.io/react-native/docs/listview.html
ListView Full Örneği ile Kontrolü Yenile # Yenileme Kontrolü yenileme işlevine çekme eklemek için bir ScrollView veya ListView içinde kullanılır. bu örnekte onu ListView ile kullanacağız
&#39;use strict&#39; import React, { Component } from &#39;react&#39;; import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39; class RefreshControlExample extends Component { constructor () { super() this.state = { refreshing: false, dataSource: new ListView.DataSource({ rowHasChanged: (row1, row2) =&amp;gt; row1 !</description>
    </item>
    
    <item>
      <title>Komut Satırı Talimatları</title>
      <link>https://www.wikiod.com/tr/react-native/komut-satr-talimatlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/komut-satr-talimatlar/</guid>
      <description>Yüklü sürümü kontrol edin # $ react-native -v Örnek Çıktı
react-native-cli: 0.2.0 react-native: n/a - not inside a React Native project directory //Output from different folder react-native: react-native: 0.30.0 // Output from the react native project directory React Native projesini başlatma ve başlatma # Başlatmak için
react-native init MyAwesomeProject Belirli bir React Native sürümüyle başlatmak için
react-native init --version=&amp;quot;0.36.0&amp;quot; MyAwesomeProject Android için Çalıştırmak
cd MyAwesomeProject react-native run-android iOS için Çalıştırmak</description>
    </item>
    
    <item>
      <title>Gezgin En İyi Uygulamaları</title>
      <link>https://www.wikiod.com/tr/react-native/gezgin-en-iyi-uygulamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/gezgin-en-iyi-uygulamalar/</guid>
      <description>Gezgin # &amp;ldquo;Navigator&amp;rdquo;, React Native&amp;rsquo;in varsayılan yönlendiricisidir. Bir &amp;ldquo;Gezgin&amp;rdquo; bileşeni, bir yığını rota nesneleri yönetir ve bu yığını yönetmek için yöntemler sağlar.
&amp;lt;Navigator ref={(navigator) =&amp;gt; { this.navigator = navigator }} initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }} renderScene={this.renderScene.bind(this)} configureScene={(route) =&amp;gt; Navigator.SceneConfigs.FloatFromRight} style={{ flex: 1 }} navigationBar={ // see &amp;quot;Managing the Navigation Bar&amp;quot; below &amp;lt;Navigator.NavigationBar routeMapper={this.routeMapper} /&amp;gt; } /&amp;gt; Rota Yığınını Yönetme
Her şeyden önce, &amp;lsquo;initialRoute&amp;rsquo; desteğine dikkat edin. Bir rota basitçe bir javascript nesnesidir ve istediğiniz şekli alabilir ve istediğiniz değerlere sahip olabilir.</description>
    </item>
    
    <item>
      <title>Animasyon API&#39;si</title>
      <link>https://www.wikiod.com/tr/react-native/animasyon-apisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/animasyon-apisi/</guid>
      <description>Bir Resmi Canlandırın # class AnimatedImage extends Component { constructor(props){ super(props) this.state = { logoMarginTop: new Animated.Value(200) } } componentDidMount(){ Animated.timing( this.state.logoMarginTop, { toValue: 100 } ).start() } render () { return ( &amp;lt;View&amp;gt; &amp;lt;Animated.Image source={require(&#39;../images/Logo.png&#39;)} style={[baseStyles.logo, { marginTop: this.state.logoMarginTop }]} /&amp;gt; &amp;lt;/View&amp;gt; ) } } Bu örnek, kenar boşluğunu değiştirerek görüntü konumunu canlandırıyor.</description>
    </item>
    
    <item>
      <title>Düzen</title>
      <link>https://www.wikiod.com/tr/react-native/duzen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/react-native/duzen/</guid>
      <description>Esnek kutu # Flexbox, sayfa düzeninin farklı ekran boyutlarını ve farklı görüntüleme aygıtlarını barındırması gerektiğinde öğelerin tahmin edilebilir şekilde davranacağı şekilde bir sayfadaki öğelerin düzenlenmesini sağlayan bir düzen modudur. Varsayılan olarak flexbox, çocukları bir sütunda düzenler. Ancak bunu flexDirection: &#39;row&#39; kullanarak satır olarak değiştirebilirsiniz.
esnekYön # const Direction = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.container}&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;View style={{flexDirection:&#39;row&#39;}}&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;Box/&amp;gt; &amp;lt;/View&amp;gt; &amp;lt;/View&amp;gt; ) } const styles = StyleSheet.create({ container: { flex:1, backgroundColor: &#39;#AED581&#39;, } }); Hizalama ekseni # const AlignmentAxis = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.</description>
    </item>
    
  </channel>
</rss>

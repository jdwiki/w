<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tepki Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/reactjs/</link>
    <description>Recent content in Tepki Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/reactjs/reacti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/reacti-kullanmaya-baslama/</guid>
      <description>ReactJS nedir? # ReactJS, uygulamanın yalnızca görünüm katmanından sorumlu, açık kaynaklı, bileşen tabanlı bir ön uç kitaplığıdır. Facebook tarafından bakımı yapılmaktadır.
ReactJS, HTML DOM&amp;rsquo;deki verileri (görünümleri) doldurmak için sanal DOM tabanlı mekanizma kullanır. Sanal DOM, her seferinde tam DOM&amp;rsquo;yi yeniden yüklemek yerine yalnızca tek tek DOM öğelerini değiştirdiği gerçeğine sahip olarak hızlı çalışır.
Bir React uygulaması, her biri küçük, yeniden kullanılabilir bir HTML parçasının çıktısını almaktan sorumlu olan birden çok bileşenden oluşur.</description>
    </item>
    
    <item>
      <title>React.createClass ve React.Component&#39;i genişletiyor</title>
      <link>https://www.wikiod.com/tr/reactjs/reactcreateclass-ve-reactcomponenti-genisletiyor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/reactcreateclass-ve-reactcomponenti-genisletiyor/</guid>
      <description>Sözdizimi # Durum 1: React.createClass({ }) Durum 2: MyComponent sınıfı React.Component&amp;rsquo;i genişletir { } &amp;ldquo;React.createClass&amp;rdquo; [v15.5&amp;rsquo;te kullanımdan kaldırıldı1 ve v16&amp;rsquo;da kaldırıldı bekleniyordu. Hâlâ buna ihtiyaç duyanlar için bir drop-in değiştirme paketi var. Bunu kullanan örnekler güncellenmelidir.
React Bileşeni Oluştur # İki kod örneğini karşılaştırarak sözdizimi farklılıklarını inceleyelim.
React.createClass (kullanımdan kaldırıldı) # Burada, tipik bir temel bileşen tanımını tamamlamak için takip eden &amp;ldquo;render&amp;rdquo; işleviyle, atanmış bir React sınıfına sahip bir &amp;ldquo;const&amp;rdquo; var.</description>
    </item>
    
    <item>
      <title>TypeScript ile ReactJS kullanma</title>
      <link>https://www.wikiod.com/tr/reactjs/typescript-ile-reactjs-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/typescript-ile-reactjs-kullanma/</guid>
      <description>TypeScript ile yazılmış ReactJS bileşeni # Aslında TypeScript&amp;rsquo;te ReactJS&amp;rsquo;nin bileşenlerini facebook örneğinde olduğu gibi kullanabilirsiniz. Sadece &amp;lsquo;jsx&amp;rsquo; dosyasının uzantısını &amp;rsquo;tsx&amp;rsquo; olarak değiştirin:
//helloMessage.tsx: var HelloMessage = React.createClass({ render: function() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } }); ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode); Ancak Typescript&amp;rsquo;in ana özelliğinden (statik tip kontrolü) tam olarak yararlanmak için birkaç şey yapılmalıdır:
1) React.createClass örneğini ES6 Class&amp;rsquo;a dönüştürün:
//helloMessage.tsx: class HelloMessage extends React.Component { render() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } } ReactDOM.</description>
    </item>
    
    <item>
      <title>Bileşenler</title>
      <link>https://www.wikiod.com/tr/reactjs/bilesenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/bilesenler/</guid>
      <description>&amp;ldquo;React.createClass&amp;rdquo; [v15.5&amp;rsquo;te kullanımdan kaldırıldı1 ve v16&amp;rsquo;da kaldırıldı bekleniyordu. Hâlâ buna ihtiyaç duyanlar için bir drop-in değiştirme paketi var. Bunu kullanan örnekler güncellenmelidir.
Bileşenler Oluşturma # Bu, Temel Örneğin bir uzantısıdır:
Basit yapı # import React, { Component } from &#39;react&#39;; import { render } from &#39;react-dom&#39;; class FirstComponent extends Component { render() { return ( &amp;lt;div&amp;gt; Hello, {this.props.name}! I am a FirstComponent. &amp;lt;/div&amp;gt; ); } } render( &amp;lt;FirstComponent name={ &#39;User&#39; } /&amp;gt;, document.</description>
    </item>
    
    <item>
      <title>React Bileşen Yaşam Döngüsü</title>
      <link>https://www.wikiod.com/tr/reactjs/react-bilesen-yasam-dongusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/react-bilesen-yasam-dongusu/</guid>
      <description>Yaşam döngüsü yöntemleri, kodu çalıştırmak ve bileşen ömrünün farklı noktalarında bileşeninizle etkileşim kurmak için kullanılmalıdır. Bu yöntemler, bir bileşenin Takılması, Güncellenmesi ve Bağlantısının Kaldırılmasına dayalıdır.
Bileşen Oluşturma # Bir React bileşeni oluşturulduğunda bir dizi fonksiyon çağrılır:
React.createClass (ES5) kullanıyorsanız, 5 adet kullanıcı tanımlı fonksiyon çağrılır. Eğer class Component, React.Component&#39;i genişletir (ES6) kullanıyorsanız, 3 adet kullanıcı tanımlı fonksiyon çağrılır. getDefaultProps() (yalnızca ES5) # Bu, çağrılan ilk yöntemdir.
Bileşen başlatıldığında tanımlanmazlarsa, bu işlev tarafından döndürülen prop değerleri varsayılan olarak kullanılacaktır.</description>
    </item>
    
    <item>
      <title>Bileşenler Arası İletişim</title>
      <link>https://www.wikiod.com/tr/reactjs/bilesenler-aras-iletisim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/bilesenler-aras-iletisim/</guid>
      <description>React bileşenleri arasında toplam 3 iletişim durumu vardır:
Durum 1: Ebeveynden Çocuğa iletişim Durum 2: Çocuktan Ebeveyne iletişim Durum 3: İlişkili olmayan bileşenler (herhangi bir bileşenden herhangi bir bileşene) iletişimi Çocuktan Ebeveyne Bileşenler # Verileri üst öğeye geri gönderirken, bunu yapmak için bir işlevi üst bileşenden alt bileşene prop olarak iletiriz ve alt bileşen bu işlevi çağırır.
Bu örnekte, bir işlevi Child bileşenine geçirerek ve bu işlevi Child bileşeninin içinde çağırarak Parent durumunu değiştireceğiz.</description>
    </item>
    
    <item>
      <title>React&#39;teki aksesuarlar</title>
      <link>https://www.wikiod.com/tr/reactjs/reactteki-aksesuarlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/reactteki-aksesuarlar/</guid>
      <description>NOT: React 15.5 ve sonrasında PropTypes bileşeni kendi npm paketinde, yani &amp;lsquo;prop-types&amp;rsquo; içinde yaşar ve PropTypes kullanılırken kendi import deyimine ihtiyaç duyar. Son değişiklik için resmi tepki belgelerine bakın: https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html
Giriiş # &amp;ldquo;props&amp;rdquo;, verileri ve yöntemleri bir ana bileşenden bir alt bileşene aktarmak için kullanılır.
&amp;lsquo;sahneler&amp;rsquo; hakkında ilginç şeyler
Değişmezler. Yeniden kullanılabilir bileşenler oluşturmamıza izin veriyorlar. Temel örnek
class Parent extends React.Component{ doSomething(){ console.log(&amp;quot;Parent component&amp;quot;); } render() { return &amp;lt;div&amp;gt; &amp;lt;Child text=&amp;quot;This is the child number 1&amp;quot; title=&amp;quot;Title 1&amp;quot; onClick={this.</description>
    </item>
    
    <item>
      <title>AJAX çağrısına tepki ver</title>
      <link>https://www.wikiod.com/tr/reactjs/ajax-cagrsna-tepki-ver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/ajax-cagrsna-tepki-ver/</guid>
      <description>HTTP GET isteği # Bazen bir bileşenin uzak bir uç noktadan (örneğin, bir REST API) bazı verileri işlemesi gerekir. Bir standart uygulama bu tür çağrıları &amp;ldquo;componentDidMount&amp;rdquo; yöntemiyle yapmaktır.
AJAX yardımcısı olarak superagent kullanan bir örnek:
import React from &#39;react&#39; import request from &#39;superagent&#39; class App extends React.Component { constructor () { super() this.state = {} } componentDidMount () { request .get(&#39;/search&#39;) .query({ query: &#39;Manny&#39; }) .query({ range: &#39;1..5&#39; }) .query({ order: &#39;desc&#39; }) .</description>
    </item>
    
    <item>
      <title>Tepkideki Durum</title>
      <link>https://www.wikiod.com/tr/reactjs/tepkideki-durum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/tepkideki-durum/</guid>
      <description>Temel Durum # State in React bileşenlerinde, uygulamanızdaki verileri yönetmek ve iletmek için gereklidir. Bir JavaScript nesnesi olarak temsil edilir ve bileşen düzeyi kapsamına sahiptir, bileşeninizin özel verileri olarak düşünülebilir.
Aşağıdaki örnekte, bileşenimizin &amp;lsquo;constructor&amp;rsquo; işlevinde bir başlangıç ​​durumu tanımlıyoruz ve bunu &amp;lsquo;render&amp;rsquo; işlevinde kullanıyoruz.
class ExampleComponent extends React.Component { constructor(props){ super(props); // Set-up our initial state this.state = { greeting: &#39;Hiya Buddy!&#39; }; } render() { // We can access the greeting property through this.</description>
    </item>
    
    <item>
      <title>Durum Bilgisi Olmayan İşlevsel Bileşenler</title>
      <link>https://www.wikiod.com/tr/reactjs/durum-bilgisi-olmayan-islevsel-bilesenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/reactjs/durum-bilgisi-olmayan-islevsel-bilesenler/</guid>
      <description>React&amp;rsquo;teki durumsuz işlevsel bileşenler, &amp;lsquo;props&amp;rsquo; içinde geçirilenlerin saf işlevleridir. Bu bileşenler duruma bağlı değildir ve bileşen yaşam döngüsü yöntemlerinin kullanımını göz ardı eder. Ancak yine de &amp;ldquo;propTypes&amp;rdquo; ve &amp;ldquo;defaultPropts&amp;rdquo; tanımlayabilirsiniz.
Durum bilgisi olmayan işlevsel bileşenler hakkında daha fazla bilgi için https://facebook.github.io/react/docs/reusable-components.html#stateless-functions adresine bakın.
Durumsuz İşlevsel Bileşen # Bileşenler, kullanıcı arayüzünü bağımsız, tekrar kullanılabilir parçalara bölmenize izin verir. Bu, React&amp;rsquo;in güzelliğidir; bir sayfayı birçok küçük yeniden kullanılabilir bileşene ayırabiliriz.
React v14&amp;rsquo;ten önce, verileri yönetmek için herhangi bir durum gerektirip gerektirmediğine bakılmaksızın &amp;ldquo;React.</description>
    </item>
    
  </channel>
</rss>

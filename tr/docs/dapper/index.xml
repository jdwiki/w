<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dapper.NET Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/dapper/</link>
    <description>Recent content in Dapper.NET Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/dapper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dapper.NET&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/dapper/dapperneti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/dapperneti-kullanmaya-baslama/</guid>
      <description>Nuget&amp;rsquo;ten Dapper&amp;rsquo;ı yükleyin # Ya Visual Studio GUI&amp;rsquo;de arama yapın:
Araçlar &amp;gt; NuGet Paket Yöneticisi &amp;gt; Çözüm için Paketleri Yönet&amp;hellip; (Visual Studio 2015)
Veya en son kararlı sürümü yüklemek için bu komutu bir Nuget Power Shell örneğinde çalıştırın.
Install-Package Dapper Veya belirli bir sürüm için
Install-Package Dapper -Version 1.42.0 Dapper&amp;rsquo;ı C#&amp;rsquo;ta Kullanmak # using System.Data; using System.Linq; using Dapper; class Program { static void Main() { using (IDbConnection db = new SqlConnection(&amp;quot;Server=myServer;Trusted_Connection=true&amp;quot;)) { db.</description>
    </item>
    
    <item>
      <title>Dinamik Parametreler</title>
      <link>https://www.wikiod.com/tr/dapper/dinamik-parametreler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/dinamik-parametreler/</guid>
      <description>Temel Kullanım # Tüm parametreleri tek bir nesnede/çağrıda düzgün bir şekilde paketlemek her zaman mümkün değildir. Daha karmaşık senaryolara yardımcı olmak için zarif, &amp;ldquo;param&amp;rdquo; parametresinin bir &amp;ldquo;IDynamicParameters&amp;rdquo; örneği olmasına izin verir. Bunu yaparsanız, özel AddParameters yönteminiz uygun zamanda çağrılır ve eklenecek komutu verir. Ancak çoğu durumda önceden var olan &amp;lsquo;DynamicParameters&amp;rsquo; türünü kullanmak yeterlidir:
var p = new DynamicParameters(new { a = 1, b = 2 }); p.Add(&amp;quot;c&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.</description>
    </item>
    
    <item>
      <title>işlemler</title>
      <link>https://www.wikiod.com/tr/dapper/islemler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/islemler/</guid>
      <description>Sözdizimi # conn.Execute(sql, işlem: tran); // parametreyi ada göre belirtin conn.Execute(sql, parametreler, tran); conn.Query(sql, işlem: tran); conn.Query(sql, parametreler, tran); bekle conn.ExecuteAsync(sql, işlem: tran); // zaman uyumsuz bekle conn.ExecuteAsync(sql, parametreler, tran); bekle conn.QueryAsync(sql, işlem: tran); bekle conn.QueryAsync(sql, parametreler, tran); Ekleri hızlandırın # Bir işlemde bir grup eki sarmak, bu StackOverflow Sorusu/Cevabına göre onları hızlandıracaktır. .
Bu tekniği kullanabilir veya gerçekleştirilecek bir dizi ilgili işlemi hızlandırmak için Toplu Kopyalamayı kullanabilirsiniz.
// Widget has WidgetId, Name, and Quantity properties public void InsertWidgets(IEnumerable&amp;lt;Widget&amp;gt; widgets) { using(var conn = new SqlConnection(&amp;quot;{connection string}&amp;quot;)) { conn.</description>
    </item>
    
    <item>
      <title>Temel Sorgulama</title>
      <link>https://www.wikiod.com/tr/dapper/temel-sorgulama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/temel-sorgulama/</guid>
      <description>Sözdizimi # genel statik IEnumerable&amp;lt;T&amp;gt; Sorgu&amp;lt;T&amp;gt;(bu IDbConnection cnn, string sql, nesne param = null, SqlTransaction işlem = null, bool arabelleğe alınmış = true) genel statik IEnumerable&amp;lt;dinamik&amp;gt; Sorgu (bu IDbConnection cnn, string sql, nesne param = null, SqlTransaction işlemi = null, bool arabelleğe alınmış = true) Parametreler # parametre Ayrıntılar cnn Zaten açık olması gereken veritabanı bağlantınız. sql Yürütülecek komut. param Parametrelerin çıkarılacağı nesne. işlem Varsa, bu sorgunun bir parçası olduğu işlem.</description>
    </item>
    
    <item>
      <title>Parametre Sözdizimi Referansı</title>
      <link>https://www.wikiod.com/tr/dapper/parametre-sozdizimi-referans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/parametre-sozdizimi-referans/</guid>
      <description>Parametreler # parametre Ayrıntılar bu cnn Temel veritabanı bağlantısı - &amp;ldquo;bu&amp;rdquo;, bir uzantı yöntemini belirtir; bağlantının açık olması gerekmez - açık değilse otomatik olarak açılır ve kapanır. &amp;lt;T&amp;gt; / Tür (isteğe bağlı) Döndürülecek nesnenin türü; genel olmayan / &amp;ldquo;Tür&amp;rdquo; olmayan API kullanılırsa, sorgudan döndürülen sütun adı başına adlandırılan bir özelliği simüle ederek satır başına bir &amp;ldquo;dinamik&amp;rdquo; nesne döndürülür (bu &amp;ldquo;dinamik&amp;rdquo; nesne ayrıca &amp;ldquo;Kimlik&amp;lt;dize, nesne &amp;gt;`). sql Çalıştırılacak SQL &amp;ldquo;param&amp;rdquo; (isteğe bağlı) Dahil edilecek parametreler.</description>
    </item>
    
    <item>
      <title>Çoklu Sonuçlar</title>
      <link>https://www.wikiod.com/tr/dapper/coklu-sonuclar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/coklu-sonuclar/</guid>
      <description>Sözdizimi # genel statik SqlMapper.GridReader QueryMultiple(bu IDbConnection cnn, string sql, nesne param = null, IDbTransaction işlem = null, int? commandTimeout = null, CommandType? commandType = null) genel statik SqlMapper.GridReader QueryMultiple(bu IDbConnection cnn, CommandDefinition komutu) Parametreler # parametre Ayrıntılar cnn Veritabanı bağlantınız zaten açık olmalıdır sql İşlenecek sql dizesi, birden çok sorgu içeriyor param Parametrelerin çıkarılacağı nesne SqlMapper.GridReader Bir Dapper sorgusundan birden çok sonuç kümesini okumak için arabirimler sağlar Temel Çoklu Sonuç Örneği # Tek bir sorguda birden çok ızgarayı getirmek için &amp;lsquo;QueryMultiple&amp;rsquo; yöntemi kullanılır.</description>
    </item>
    
    <item>
      <title>çoklu eşleme</title>
      <link>https://www.wikiod.com/tr/dapper/coklu-esleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/coklu-esleme/</guid>
      <description>Sözdizimi # public static IEnumerable&amp;lt;TReturn&amp;gt; Query&amp;lt;TFirst, TSecond, TReturn&amp;gt;( this IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TReturn&amp;gt; map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int? commandTimeout = null, CommandType? commandType = null) public static IEnumerable&amp;lt;TReturn&amp;gt; Sorgu&amp;lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&amp;gt;(bu IDbConnection cnn, string sql, Func&amp;lt;TFirst, TSecond, TThird, TFourth, TSixth,TFifth, TReturn&amp;gt; map, nesne param = null, IDbTransaction işlem = null, bool buffered = true, string splitOn = &amp;quot;Id&amp;quot;, int?</description>
    </item>
    
    <item>
      <title>Tip İşleyiciler</title>
      <link>https://www.wikiod.com/tr/dapper/tip-isleyiciler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/tip-isleyiciler/</guid>
      <description>Tür İşleyicileri, veritabanı türlerinin .Net özel türlerine dönüştürülmesine izin verir.
TypeHandler Yükleme # Yukarıdaki tip işleyici, &amp;lsquo;AddTypeHandler&amp;rsquo; yöntemi kullanılarak &amp;lsquo;SqlMapper&amp;rsquo; içine kurulabilir.
SqlMapper.AddTypeHandler&amp;lt;IHtmlString&amp;gt;(new IHtmlStringTypeHandler()); Tür çıkarımı, genel tür parametresini atlamanıza olanak tanır:
SqlMapper.AddTypeHandler(new IHtmlStringTypeHandler()); Ayrıca, açık bir &amp;ldquo;Type&amp;rdquo; argümanı alan iki argümanlı bir aşırı yükleme var:
SqlMapper.AddTypeHandler(typeof(IHtmlString), new IHtmlStringTypeHandler()); varchar&amp;rsquo;ı IHtmlString&amp;rsquo;e dönüştürme # public class IHtmlStringTypeHandler : SqlMapper.TypeHandler&amp;lt;IHtmlString&amp;gt; { public override void SetValue( IDbDataParameter parameter, IHtmlString value) { parameter.DbType = DbType.</description>
    </item>
    
    <item>
      <title>Komutları Yürütme</title>
      <link>https://www.wikiod.com/tr/dapper/komutlar-yurutme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/komutlar-yurutme/</guid>
      <description>Saklı Yordamlar # Basit kullanım # Dapper, depolanan işlemleri tamamen destekler:
var user = conn.Query&amp;lt;User&amp;gt;(&amp;quot;spGetUser&amp;quot;, new { Id = 1 }, commandType: CommandType.StoredProcedure) .SingleOrDefault(); Giriş, Çıkış ve Dönüş parametreleri # Daha süslü bir şey istiyorsanız, şunları yapabilirsiniz:
var p = new DynamicParameters(); p.Add(&amp;quot;@a&amp;quot;, 11); p.Add(&amp;quot;@b&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.Output); p.Add(&amp;quot;@c&amp;quot;, dbType: DbType.Int32, direction: ParameterDirection.ReturnValue); conn.Execute(&amp;quot;spMagicProc&amp;quot;, p, commandType: CommandType.StoredProcedure); var b = p.Get&amp;lt;int&amp;gt;(&amp;quot;@b&amp;quot;); var c = p.Get&amp;lt;int&amp;gt;(&amp;quot;@c&amp;quot;); Tablo Değerli Parametreler # Tablo Değerli Parametresini kabul eden bir saklı yordamınız varsa, SQL Server&amp;rsquo;daki tablo türüyle aynı yapıya sahip bir DataTable geçirmeniz gerekir.</description>
    </item>
    
    <item>
      <title>Sıcaklık Tabloları</title>
      <link>https://www.wikiod.com/tr/dapper/scaklk-tablolar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dapper/scaklk-tablolar/</guid>
      <description>Bağlantı açıkken var olan Temp Tablosu # Temp tablosu kendi kendine oluşturulduğunda bağlantı açıkken kalacaktır.
// Widget has WidgetId, Name, and Quantity properties public async Task PurchaseWidgets(IEnumerable&amp;lt;Widget&amp;gt; widgets) { using(var conn = new SqlConnection(&amp;quot;{connection string}&amp;quot;)) { await conn.OpenAsync(); await conn.ExecuteAsync(&amp;quot;CREATE TABLE #tmpWidget(WidgetId int, Quantity int)&amp;quot;); // populate the temp table using(var bulkCopy = new SqlBulkCopy(conn)) { bulkCopy.BulkCopyTimeout = SqlTimeoutSeconds; bulkCopy.BatchSize = 500; bulkCopy.DestinationTableName = &amp;quot;#tmpWidget&amp;quot;; bulkCopy.EnableStreaming = true; using(var dataReader = widgets.</description>
    </item>
    
  </channel>
</rss>

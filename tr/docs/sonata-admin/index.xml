<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sonata-admin Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/sonata-admin/</link>
    <description>Recent content in sonata-admin Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/sonata-admin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sonata-admin&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/sonata-admin/sonata-admini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sonata-admin/sonata-admini-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # sonata-admin kurulumu veya kurulumu hakkında ayrıntılı talimatlar.</description>
    </item>
    
    <item>
      <title>Güvenlik seçmenlerinizi sonata-admin ile entegre edin.</title>
      <link>https://www.wikiod.com/tr/sonata-admin/guvenlik-secmenlerinizi-sonata-admin-ile-entegre-edin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sonata-admin/guvenlik-secmenlerinizi-sonata-admin-ile-entegre-edin/</guid>
      <description>Seçmenleri sonata-admin ile kullanmak üzere ayarlarken, birkaç tuzak vardır, burada gösterilen adımlar sizi hazır ve çalışır duruma getirmelidir, böylece sonat, oluşturma sırasında düzenleme, gösterme ve silme düğmelerini işlerken seçmenleri uygun şekilde hesaba katar. kenar çubuğu, toplu işlemleri çalıştırırken, temel olarak, ilk başta çalışmasını beklediğiniz şekilde çalışacaktır ..
Her şeyi ayarlamak # İlk olarak, bir seçmen oluşturduk:
namespace BBIT\CoreBundle\Security\Authorization\Voter; use Symfony\Component\Security\Core\Authentication\Token\TokenInterface; use Symfony\Component\Security\Core\Authorization\Voter\VoterInterface; class EventVoter implements VoterInterface { const VIEW = &#39;VIEW&#39;; const EDIT = &#39;EDIT&#39;; const DELETE = &#39;DELETE&#39;; const CREATE = &#39;CREATE&#39;; const LLIST = &#39;LIST&#39;; public function supportsAttribute($attribute) { return in_array($attribute, array( self::VIEW, self::EDIT, self::DELETE, self::CREATE, self::LLIST, )); } public function supportsClass($class) { $supportedClass = &#39;BBIT\CoreBundle\Entity\SomeEntity&#39;; if (is_string($class)) { if ($class === $supportedClass) { return true; } else { return false; } } return $supportedClass === get_class($class) || is_subclass_of(get_class($class), $supportedClass); } public function vote(TokenInterface $token, $entity, array $attributes) { $user = $token-&amp;gt;getUser(); if (!</description>
    </item>
    
  </channel>
</rss>

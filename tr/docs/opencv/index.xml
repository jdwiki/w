<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opencv Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/opencv/</link>
    <description>Recent content in opencv Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/opencv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>opencv&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/opencv/opencvye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/opencvye-baslarken/</guid>
      <description>OpenCV ile bir resim yükleyin ve görüntüleyin # Bu örnekle, diskten renkli bir görüntünün nasıl yükleneceğini ve OpenCV&amp;rsquo;nin yerleşik işlevlerini kullanarak nasıl görüntüleneceğini göreceğiz. Bunu başarmak için C/C++, Python veya Java bağlamalarını kullanabiliriz.
C++&amp;lsquo;da:
#include &amp;lt;opencv2/core.hpp&amp;gt; #include &amp;lt;opencv2/highgui.hpp&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace cv; int main(int argc, char** argv) { // We&#39;ll start by loading an image from the drive Mat image = imread(&amp;quot;image.jpg&amp;quot;, CV_LOAD_IMAGE_COLOR); // We check that our image has been correctly loaded if(image.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;&#39;da Kontrast ve Parlaklık</title>
      <link>https://www.wikiod.com/tr/opencv/c-da-kontrast-ve-parlaklk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/c-da-kontrast-ve-parlaklk/</guid>
      <description>Sözdizimi # void cv::Mat::convertTo(OutputArray m, int rtype,double alpha = 1,double beta = 0)const Parametreler # parametre Ayrıntılar m çıktı matrisi; işlemden önce uygun bir boyut veya tipe sahip değilse, yeniden tahsis edilir yeniden yazı istenen çıktı matrisi tipi veya daha doğrusu, kanal sayısı girişin sahip olduğu ile aynı olduğundan derinlik; rtype negatifse, çıktı matrisi giriş ile aynı türe sahip olacaktır alfa isteğe bağlı ölçek faktörü. Bu, görüntünün kontrastını değiştirir. 1&amp;rsquo;in altındaki değerler kontrastı azaltır ve birin üzerindeki değerler kontrastı artırır beta Ölçeklenen değerlere isteğe bağlı delta eklenir.</description>
    </item>
    
    <item>
      <title>Piksel Erişimi</title>
      <link>https://www.wikiod.com/tr/opencv/piksel-erisimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/piksel-erisimi/</guid>
      <description>Karşılaştığınız &amp;ldquo;cv::Mat&amp;rdquo; türünün farkında olmaya dikkat edin. Örneğin, &amp;lsquo;CV_8UC3&amp;rsquo; türünde bir &amp;lsquo;cv::Mat&amp;rsquo; dosyanız varsa ve buna &amp;lsquo;image.at(r,c)&amp;rsquo; ile erişirseniz, hata oluşmaz, ancak programınız bazı beklenmeyen davranışlara sahip olacaktır.
cv::Mat::ptr işaretçisini kullanarak verimli piksel erişimi # Verimlilik önemliyse, bir &amp;ldquo;cv::Mat&amp;rdquo; nesnesindeki pikselleri yinelemenin hızlı bir yolu, &amp;ldquo;r&amp;rdquo; (0 tabanlı dizin).
Matris tipine göre işaretçi farklı bir şablona sahip olacaktır.
&amp;ldquo;CV_8UC1&amp;rdquo; için: &amp;ldquo;char* ptr = image.ptr(r);&amp;rsquo; &amp;ldquo;CV_8UC3&amp;rdquo; için: &amp;ldquo;cv::Vec3b* ptr = image.ptrcv::Vec3b(r);` &amp;ldquo;CV_32FC1&amp;rdquo; için: &amp;ldquo;float* ptr = image.</description>
    </item>
    
    <item>
      <title>Kenar algılama</title>
      <link>https://www.wikiod.com/tr/opencv/kenar-alglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/kenar-alglama/</guid>
      <description>Sözdizimi # kenarlar = cv2.Tekin(görüntü, eşik1, eşik2[, kenarlar[, diyaframSize[, L2gradient]]]) void Canny(InputArray görüntüsü, OutputArray kenarları, çift eşik1, çift eşik2, int diyaframSize=3, bool L2gradient=yanlış Parametreler # parametre Ayrıntılar image Giriş resmi kenarlar Çıktı resmi eşik1 Histerezis prosedürü için ilk eşik eşik2 Histerezis prosedürü için ikinci eşik apertureSize Sobel operatörü için diyafram boyutu L2gradient Görüntü gradyanı için daha doğru bir algoritmanın kullanılması gerekip gerekmediğini belirten işaret Canny algoritması # Canny algoritması, bir sinyal işleme problemi olarak tasarlanmış daha yeni bir kenar detektörüdür.</description>
    </item>
    
    <item>
      <title>Görüntü işleme</title>
      <link>https://www.wikiod.com/tr/opencv/goruntu-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/goruntu-isleme/</guid>
      <description>Sözdizimi # Gauss Bulanıklığı Sözdizimi C++: void GaussianBlur(InputArray kaynağı, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT ) Parametreler # Gauss Bulanıklığının Parametreleri Ayrıntılar kaynak Girdi görüntüsü, görüntünün bağımsız olarak işlenen herhangi bir sayıda kanalı olabilir, ancak derinlik &amp;ldquo;CV_8U&amp;rdquo;, &amp;ldquo;CV_16U&amp;rdquo;, &amp;ldquo;CV_16S&amp;rdquo;, &amp;ldquo;CV_32F&amp;rdquo; veya &amp;ldquo;CV_64F&amp;rdquo; olmalıdır. dst src ile aynı boyut ve tipte çıktı görüntüsü beden Gauss çekirdek boyutu. &amp;ldquo;ksize.width&amp;rdquo; ve &amp;ldquo;ksize.height&amp;rdquo; farklı olabilir ancak her ikisi de pozitif ve tek olmalıdır.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; ile Şekiller (Çizgi, Daire, ..., vb.) Çizimi</title>
      <link>https://www.wikiod.com/tr/opencv/c-ile-sekiller-cizgi-daire--vb-cizimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/c-ile-sekiller-cizgi-daire--vb-cizimi/</guid>
      <description>OpenCV&amp;rsquo;de nokta, çizgi, daire, &amp;hellip; vb. gibi çok sayıda şekil çizilebilir. Bir şekli doldurmak için isteğe bağlı bir seçenek vardır. Aşağıdaki kod, şekillerin nasıl çizildiğini gösteren açıklayıcıdır.
Çizim Şekilleri Örneği # #include &amp;lt;opencv2/core/core.hpp&amp;gt; #include &amp;lt;opencv2/highgui/highgui.hpp&amp;gt; #include &amp;lt;opencv2/imgproc.hpp&amp;gt; // drawing shapes #include &amp;lt;iostream&amp;gt; int main( int argc, char** argv ) { // First create a black image. cv::Mat image(500,500, CV_8UC3, cv::Scalar(0,0,0)); // Check if the image is created successfully. if( !image.data ){ std::cout &amp;lt;&amp;lt; &amp;quot;Could not open or find the image&amp;quot; &amp;lt;&amp;lt; std::endl ; exit(EXIT_FAILURE); } //####################( Draw Line )########################## cv::Point p1(100,100), p2(200,100); cv::Scalar colorLine(0,255,0); // Green int thicknessLine = 2; cv::line(image, p1, p2, colorLine, thicknessLine); //####################( Draw Circle )######################### // unfilled circle cv::Point centerCircle1(250,250); int radiusCircle = 30; cv::Scalar colorCircle1(0,0,255); int thicknessCircle1 = 2; cv::circle(image, centerCircle1, radiusCircle, colorCircle1, thicknessCircle1); // filled circle cv::Point centerCircle2(400,100); cv::Scalar colorCircle2(0,100,0); cv::circle(image, centerCircle2, radiusCircle, colorCircle2, CV_FILLED); //####################( Draw Rectangle )####################### // unfilled cv::Point p3(400,400), p4(450,450); cv::Scalar colorRectangle1(0,0,255); int thicknessRectangle1 = 3; cv::rectangle(image, p3, p4, colorRectangle1,thicknessRectangle1); // filled cv::Point p5(100,400), p6(150,450); cv::Scalar colorRectangle2(255,0,255); cv::rectangle(image, p5, p6, colorRectangle2, CV_FILLED); //#################( Draw Shapes on Image )###################### cv::namedWindow( &amp;quot;Display window&amp;quot;, cv::WINDOW_AUTOSIZE ); cv::imshow( &amp;quot;Display window&amp;quot;, image ); cv::waitKey(0); return 0; } çıktı</description>
    </item>
    
    <item>
      <title>Video Oluşturma</title>
      <link>https://www.wikiod.com/tr/opencv/video-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/video-olusturma/</guid>
      <description>Video beslemeleri ile her çalıştığınızda, sonunda görüntü işleme sonucunuzu yeni bir video dosyası biçiminde kaydetmek isteyebilirsiniz. Basit video çıkışları için bunun için tasarlanmış OpenCV yerleşik VideoWriter sınıfını kullanabilirsiniz. Kullanmadan önce bazı kavramlara bakmakta fayda var. Bu kavramlar codec yani kod çözücü ve FourCC&amp;rsquo;dir (Dört karakterli kod).
OpenCV (Java) ile video oluşturma # VideoWriter videoWriter; videoWriter = new VideoWriter(outputFile, VideoWriter.fourcc(&#39;x&#39;, &#39;2&#39;,&#39;6&#39;,&#39;4&#39;), fps, frameSize, isRGB); //We have stated that we will use x264 as codec with FourCC //For writing, we add the following method and it will write the image we give as parameter in this call.</description>
    </item>
    
    <item>
      <title>Kademeli Sınıflandırıcılar</title>
      <link>https://www.wikiod.com/tr/opencv/kademeli-snflandrclar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/kademeli-snflandrclar/</guid>
      <description>Yüzü algılamak için Basamaklı Sınıflandırıcıları kullanma # Python # Kod # import numpy as np import cv2 #loading haarcascade classifiers for face and eye #You can find these cascade classifiers here #https://github.com/opencv/opencv/tree/master/data/haarcascades #or where you download opencv inside data/haarcascades face_cascade = cv2.CascadeClassifier(&#39;haarcascade_frontalface_default.xml&#39;) eye_cascade = cv2.CascadeClassifier(&#39;haarcascade_eye.xml&#39;) #loading the image img = cv2.imread(&#39;civil_war.jpg&#39;) #converting the image to gray scale gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #detecting face in the grayscale image faces = face_cascade.detectMultiScale(gray, 1.</description>
    </item>
    
    <item>
      <title>Görüntü OpenCV&#39;yi Görüntüle</title>
      <link>https://www.wikiod.com/tr/opencv/goruntu-opencvyi-goruntule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/goruntu-opencvyi-goruntule/</guid>
      <description>Bir görüntünün temel okuma ve gösterimi # import cv2 image_path= #put your image path here #use imread() function to read image data to variable img. img = cv2.imread(image_path) #display image data in a new window with title &#39;I am an image display window&#39; cv2.imshow(&#39;I am an image display window&#39;,img) #wait until user hits any key on keyboard cv2.waitKey(0) #close any windows opened by opencv cv2.destroyAllWindows() Ekrandaki görüntüleme penceresinin boyutunu kontrol etmek için cv2.</description>
    </item>
    
    <item>
      <title>Java&#39;da Basamaklı Sınıflandırıcıları Kullanma</title>
      <link>https://www.wikiod.com/tr/opencv/javada-basamakl-snflandrclar-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/opencv/javada-basamakl-snflandrclar-kullanma/</guid>
      <description>Sözdizimi # CascadeClassifier kademeli = new CascadeClassifier(&amp;ldquo;cascade.xml&amp;rdquo;); // cascade.xml&amp;rsquo;den bir kademeli sınıflandırıcı oluşturur Mat görüntü = Imgcodecs.imread(&amp;ldquo;image.png&amp;rdquo;); // image.png&amp;rsquo;yi bir Mat (Matrix) nesnesine dönüştürür MatOfRect algılamaları = yeni MatOfRect(); // Algılama sınıflarımız için çıktı olarak kullanılan boş bir MatOfRect (Dikdörtgenlerin Matrisi) dosyası oluşturur algılamalar.toArray(); // Üzerinde yinelenebilen bir Rect nesneleri dizisini döndürür Imgproc.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(0, 255, 0)); // İlk Point&amp;rsquo;in x ve y konumlarından ikinci Point&amp;rsquo;in x ve y konumuna Mat nesnesi &amp;ldquo;image&amp;rdquo; üzerine yeşil çerçeveli bir dikdörtgen çizer.</description>
    </item>
    
  </channel>
</rss>

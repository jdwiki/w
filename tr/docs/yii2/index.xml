<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yii2 Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/yii2/</link>
    <description>Recent content in yii2 Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/yii2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>yii2&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/yii2/yii2yi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/yii2yi-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # Yii2 iki şekilde kurulabilir. Bunlar
Composer aracılığıyla yükleme Bir Arşiv Dosyasından Kurulum Composer ile Kurulum # Composer&amp;rsquo;ı Yükleme # Eğer Composer kurulu değilse, bunu getcomposer.org adresindeki talimatları izleyerek yapabilirsiniz. Linux ve Mac OS X&amp;rsquo;te aşağıdaki komutları çalıştıracaksınız:
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer Windows için composer-setup.exe dosyasını indirip yüklemeniz yeterlidir. Github API hız sınırını aşmak için github API erişim belirtecini yapılandırmanız gerekebilir.
Yii&amp;rsquo;yi yükleme # Composer yüklendiğinde, Web&amp;rsquo;den erişilebilen bir klasör altında aşağıdaki komutları çalıştırarak Yii&amp;rsquo;yi yükleyebilirsiniz:</description>
    </item>
    
    <item>
      <title>Aktif Kayıt</title>
      <link>https://www.wikiod.com/tr/yii2/aktif-kayt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/aktif-kayt/</guid>
      <description>AR, bir veya daha fazla kaydı sırayla silmeniz, güncellemeniz veya oluşturmanız gerektiğinde mükemmeldir. Kirli öznitelikleri (yalnızca gerçekten değiştirilenleri kaydederek) desteği, veritabanından yükü önemli ölçüde kaldıran ve aynı kaydın aynı anda birden fazla kişi tarafından düzenlenmesiyle bağlantılı çeşitli çakışma olasılığını azaltan optimize edilmiş UPDATE ifadeleriyle sonuçlanır.
Uygulamanızda gerçekten karmaşık bir mantığınız yoksa ve bu nedenle soyutlama varlıkları gerektirmiyorsa, AR, silme, güncelleme ve oluşturma işlemleri için en uygun olanıdır.
AR, sayfa başına 100&amp;rsquo;den az kayıtla sonuçlanan basit sorgular için de uygundur.</description>
    </item>
    
    <item>
      <title>doğrulama</title>
      <link>https://www.wikiod.com/tr/yii2/dogrulama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/dogrulama/</guid>
      <description>Odaklanma / Anahtar Açmada Doğrulama Hata Mesajını Devre Dışı Bırak # Varsayılan olarak hata mesajı keyUp üzerindeki &amp;lt;div class=&amp;quot;help-block&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; içindeki `metin kutusunun&amp;rsquo; altında veya herhangi bir doğrulama kısıtlaması karşılanmıyorsa gönder düğmesine bastıktan sonra görünür.
Bazen yalnızca gönderildiğinde bir mesaj istiyoruz, yani &amp;lsquo;onKeyup&amp;rsquo; etkinliğinde doğrulama yok.
yii2/widgets/ActiveForm.php dosyasını kontrol edelim:
&amp;lt;?php namespace yii\widgets; use Yii; use yii\base\InvalidCallException; use yii\base\Widget; use yii\base\Model; use yii\helpers\ArrayHelper; use yii\helpers\Url; use yii\helpers\Html; use yii\helpers\Json; class ActiveForm extends Widget { public $action = &#39;&#39;; public $method = &#39;post&#39;; public $options = []; .</description>
    </item>
    
    <item>
      <title>Kurabiye</title>
      <link>https://www.wikiod.com/tr/yii2/kurabiye/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/kurabiye/</guid>
      <description>Çerezler, HTTP isteğinin bir parçasıdır, bu nedenle, hangi sorumluluğun istek ve yanıtla tam olarak ilgilendiğini her iki denetleyicide de yapmak iyi bir fikirdir.
Etki alanları arası kimlik doğrulama ve kimlik tanımlama bilgileri # Otomatik oturum açma veya &amp;ldquo;beni hatırla&amp;rdquo; çerezi durumunda, alt alan çerezlerinde olduğu gibi aynı tuhaflıklar uygulanır. Ancak bu sefer, identityCookie dizisini istenen çerez yapılandırmasına ayarlayarak kullanıcı bileşenini yapılandırmanız gerekiyor.
Uygulama yapılandırma dosyanızı açın ve kullanıcı bileşeni yapılandırmasına &amp;ldquo;identityCookie&amp;rdquo; parametrelerini ekleyin:</description>
    </item>
    
    <item>
      <title>Test yapmak</title>
      <link>https://www.wikiod.com/tr/yii2/test-yapmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/test-yapmak/</guid>
      <description>ActiveRecord ile nasıl alay edilir # Veritabanına bağlanmaya çalışmayan AR ile alay etmek istiyorsanız, bunu aşağıdaki şekilde yapabilirsiniz (PHPUnit kullanıyorsanız):
$post = $this-&amp;gt;getMockBuilder(&#39;\app\model\Post&#39;) -&amp;gt;setMethods([&#39;save&#39;, &#39;attributes&#39;]) -&amp;gt;getMock(); $post-&amp;gt;method(&#39;save&#39;)-&amp;gt;willReturn(true); $post-&amp;gt;method(&#39;attributes&#39;)-&amp;gt;willReturn([ &#39;id&#39;, &#39;status&#39;, &#39;title&#39;, &#39;description&#39;, &#39;text&#39; ]); Buradaki sorun, ActiveRecord varsayılan olarak öznitelik listesini kaçınmaya çalıştığımız veritabanı şeması.
Test ortamını kurun # Codeception&amp;rsquo;ı yükleyin:
composer global status composer global require &amp;quot;codeception/codeception=~2.0.0&amp;quot; &amp;quot;codeception/specify=*&amp;quot; &amp;quot;codeception/verify=*&amp;quot; Faker&amp;rsquo;ı yükleyin:
cd /var/www/yii // Path to your application composer require --dev yiisoft/yii2-faker:* Yalnızca testler için kullanılacak bir veritabanı oluşturun.</description>
    </item>
    
    <item>
      <title>Dosya Yüklemeleri</title>
      <link>https://www.wikiod.com/tr/yii2/dosya-yuklemeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/dosya-yuklemeleri/</guid>
      <description>Nasıl yapılır # Dosya Yükleme # Yii&amp;rsquo;de dosya yükleme, genellikle yüklenen her birini içine alan [[yii\web\UploadedFile]] yardımıyla yapılır. Dosyayı bir &amp;lsquo;UploadedFile&amp;rsquo; nesnesi olarak. [[yii\widgets\ActiveForm]] ve models ile birlikte, güvenli bir dosya yükleme mekanizmasını kolayca uygulayabilirsiniz.
Model Oluşturma # Düz metin girişleriyle çalışmak gibi, tek bir dosya yüklemek için bir model sınıfı oluşturacak ve bir öznitelik kullanacaksınız. yüklenen dosya örneğini tutmak için modelin. Dosya yüklemesini doğrulamak için bir doğrulama kuralı da bildirmelisiniz.</description>
    </item>
    
    <item>
      <title>Yii2 AktifForm</title>
      <link>https://www.wikiod.com/tr/yii2/yii2-aktifform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/yii2-aktifform/</guid>
      <description>Yii2&amp;rsquo;de Form Alanları # Yeni Öğrenciler İçin Yii2&amp;rsquo;de Görünüm Sayfasının Temel Örneği gösteriliyor
Bunlar, yii2 ActiveForm kullanarak form oluşturmak için eklemeniz gereken temel sınıflardır.
&amp;lt;?php Use yii\helpers\Html; Use yii\widgets\ActiveForm; Aşağıdaki satır, aşağıdaki formumuz için form etiketini başlatacak, örnek gösteren örnek, form için kimliğin nasıl belirleneceğini ve form için herhangi bir sınıfın nasıl uygulanacağını gösterir.
$form =ActiveForm::begin([ &#39;id&#39;=&amp;gt; &#39;login-form&#39;, &#39;options&#39;=&amp;gt; [&#39;class&#39; =&amp;gt; &#39;form-horizontal&#39;],]) ?&amp;gt; Burada $model Burada saklanan model nesnesinin hangi veritabanı tablosu alanını, ilgili denetleyiciden geçirilen bu değişkende bağlamak istediğimizi belirtin.</description>
    </item>
    
    <item>
      <title>Ajax İsteği</title>
      <link>https://www.wikiod.com/tr/yii2/ajax-istegi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/ajax-istegi/</guid>
      <description>Ajax formunu gönderme # Dosyayı görüntüle: # &amp;lt;?php use yii; use yii\bootstrap\ActiveForm; use yii\helpers\Html; ?&amp;gt; &amp;lt;?php $form = ActiveForm::begin([ &#39;action&#39; =&amp;gt; [&#39;comments/ajax-comment&#39;], &#39;options&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;comment-form&#39; ] ]); ?&amp;gt; &amp;lt;?= $form-&amp;gt;field($model, &#39;comment&#39;); ?&amp;gt; &amp;lt;?= Html::submitButton(&amp;quot;Submit&amp;quot;, [&#39;class&#39; =&amp;gt; &amp;quot;btn&amp;quot;]); ?&amp;gt; &amp;lt;?php ActiveForm::end(); ?&amp;gt; Javascript: # jQuery(document).ready(function($) { $(&amp;quot;.comment-form&amp;quot;).submit(function(event) { event.preventDefault(); // stopping submitting var data = $(this).serializeArray(); var url = $(this).attr(&#39;action&#39;); $.ajax({ url: url, type: &#39;post&#39;, dataType: &#39;json&#39;, data: data }) .</description>
    </item>
    
    <item>
      <title>Pjax</title>
      <link>https://www.wikiod.com/tr/yii2/pjax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/pjax/</guid>
      <description>1. Adım Yapı Ekle # görünümlerde\site\form-submission.php
&amp;lt;?php Pjax::begin([&#39;id&#39;=&amp;gt;&#39;id-pjax&#39;]); ?&amp;gt; &amp;lt;?= Html::beginForm([&#39;site/form-submission&#39;], &#39;post&#39;, [&#39;data-pjax&#39; =&amp;gt; &#39;&#39;, &#39;class&#39; =&amp;gt; &#39;form-inline&#39;]); ?&amp;gt; &amp;lt;?= Html::input(&#39;text&#39;, &#39;string&#39;, Yii::$app-&amp;gt;request-&amp;gt;post(&#39;string&#39;), [&#39;class&#39; =&amp;gt; &#39;form-control&#39;]) ?&amp;gt; &amp;lt;?= Html::submitButton(&#39;Hash String&#39;, [&#39;class&#39; =&amp;gt; &#39;btn btn-lg btn-primary&#39;, &#39;name&#39; =&amp;gt; &#39;hash-button&#39;]) ?&amp;gt; &amp;lt;?= Html::endForm() ?&amp;gt; &amp;lt;h3&amp;gt;&amp;lt;?= $stringHash ?&amp;gt;&amp;lt;/h3&amp;gt; &amp;lt;?php Pjax::end(); ?&amp;gt; pjax nasıl kullanılır # Bu satırı görünümünüzün başına ekleyin.
&amp;lt;?php use yii\widgets\Pjax; ?&amp;gt; Kısmi güncelleme gerektiren içeriğin etrafına aşağıdaki iki satırı ekleyin.</description>
    </item>
    
    <item>
      <title>Veritabanlarıyla Çalışmak</title>
      <link>https://www.wikiod.com/tr/yii2/veritabanlaryla-calsmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/yii2/veritabanlaryla-calsmak/</guid>
      <description>Yii2 sorgu oluşturucuyu kullanma # Yii2, veri tabanından veri almak için verimli yollar sağlar. emp_id, emp_name ve emp_salary alanlarına sahip basit bir çalışan tablosu örneğini düşünün. Çalışan isimlerini ve maaşlarını almak için sorguyu kullanıyoruz.
select emp_name,emp_salary from employee Yukarıdaki sorguyu Yii2&amp;rsquo;de oluşturmak için birçok yöntem vardır. Yöntemlerden biri bir yii\db\Query nesnesi kullanmaktır.
//creates a new \yii\db\Query() object $query=new \yii\db\Query(); $rows=$query-&amp;gt;select([&#39;emp_name&#39;,&#39;emp_salary&#39;]) //specify required columns in an array -&amp;gt;from(&#39;employee&#39;) //specify table name -&amp;gt;all(); //returns an array of rows with each row being an associative array of name-value pairs.</description>
    </item>
    
  </channel>
</rss>

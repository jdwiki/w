<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/cmake/</link>
    <description>Recent content in cmake Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cmake&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/cmake/cmakei-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/cmakei-kullanmaya-baslama/</guid>
      <description>Kurulumu Yap # CMake indirme sayfasına gidin ve işletim sisteminiz için bir ikili dosya edinin, ör. Windows, Linux veya Mac OS X. Windows&amp;rsquo;ta kurmak için ikili dosyaya çift tıklayın. Linux&amp;rsquo;ta ikili dosyayı bir terminalden çalıştırın.
Linux&amp;rsquo;ta paketleri dağıtımın paket yöneticisinden de yükleyebilirsiniz. Ubuntu 16.04&amp;rsquo;te komut satırını ve grafik uygulamasını aşağıdakilerle yükleyebilirsiniz:
sudo apt-get install cmake sudo apt-get install cmake-gui FreeBSD&amp;rsquo;de komut satırını ve Qt tabanlı grafik uygulamasını aşağıdakilerle kurabilirsiniz:
pkg install cmake pkg install cmake-gui Mac OSX&amp;rsquo;te, yazılımınızı kurmak için mevcut olan paket yöneticilerinden birini kullanırsanız, en dikkat çekici olanı MacPorts (MacPorts) ve Homebrew (Homebrew), CMake&amp;rsquo;i aşağıdakilerden biri aracılığıyla da kurabilirsiniz.</description>
    </item>
    
    <item>
      <title>Dosyayı yapılandır</title>
      <link>https://www.wikiod.com/tr/cmake/dosyay-yaplandr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/dosyay-yaplandr/</guid>
      <description>configure_file, bir dosyayı başka bir konuma kopyalamak ve içeriğini değiştirmek için kullanılan bir CMake işlevidir.
Bu işlev, genel bir şablon kullanarak yollar, özel değişkenler içeren yapılandırma dosyaları oluşturmak için çok kullanışlıdır.
Bir dosyayı başka bir konuma kopyalayın ve içeriğini değiştirin.
configure_file(&amp;lt;input&amp;gt; &amp;lt;output&amp;gt; [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ]) dosyasını dosyasına kopyalar ve dosya içeriğinde başvurulan değişken değerleri değiştirir. göreli bir yolsa, geçerli kaynak dizine göre değerlendirilir. bir dizin değil, bir dosya olmalıdır.</description>
    </item>
    
    <item>
      <title>Değişkenler ve Özellikler</title>
      <link>https://www.wikiod.com/tr/cmake/degiskenler-ve-ozellikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/degiskenler-ve-ozellikler/</guid>
      <description>Temel CMake değişkenlerinin basitliği, tam değişken sözdiziminin karmaşıklığını gizler. Bu sayfa çeşitli değişken durumları örneklerle belgeliyor ve kaçınılması gereken tuzaklara işaret ediyor.
Sözdizimi # set(değişken_adı değeri [CACHE türü açıklaması [Kuvvet]]) Değişken isimleri büyük/küçük harf duyarlıdır. Değerleri string türündedir. Bir değişkenin değerine şu şekilde başvurulur:
${variable_name} ve alıntılanan bir argüman içinde değerlendirilir
&amp;quot;${variable_name}/directory&amp;quot; Değişkenler ve Global Değişkenler Önbelleği # Çoğunlukla &amp;ldquo;normal değişkenler&amp;rdquo; kullanacaksınız:
set(VAR TRUE) set(VAR &amp;quot;main.cpp&amp;quot;) set(VAR1 ${VAR2}) Ancak CMake, global &amp;ldquo;önbelleğe alınmış değişkenler&amp;rdquo; da biliyor (&amp;ldquo;CMakeCache.</description>
    </item>
    
    <item>
      <title>Test Et ve Hata Ayıkla</title>
      <link>https://www.wikiod.com/tr/cmake/test-et-ve-hata-aykla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/test-et-ve-hata-aykla/</guid>
      <description>Make ile oluştururken hata ayıklamaya genel yaklaşım # &amp;ldquo;make&amp;rdquo; işleminin başarısız olduğunu varsayalım:
$ make Çalıştırılan komutları görmek için make VERBOSE=1 ile çalıştırın. Ardından, göreceğiniz bağlayıcı veya derleyici komutunu doğrudan çalıştırın. Gerekli bayrakları veya kitaplıkları ekleyerek çalışmasını sağlamaya çalışın.
Ardından, neyin değiştirileceğini anlayın, böylece CMake, derleyici/bağlayıcı komutuna doğru argümanları iletebilir:
sistemde nelerin değiştirileceği (hangi kitaplıkların kurulacağı, hangi sürümlerin, CMake&amp;rsquo;in kendisinin sürümleri) önceki başarısız olursa, hangi ortam değişkenlerinin ayarlanacağı veya CMake&amp;rsquo;e geçirilecek parametreler aksi takdirde, projenin &amp;ldquo;CMakeLists.</description>
    </item>
    
    <item>
      <title>hiyerarşik proje</title>
      <link>https://www.wikiod.com/tr/cmake/hiyerarsik-proje/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/hiyerarsik-proje/</guid>
      <description>Paketler olmadan basit yaklaşım # Bir yürütülebilir dosya (düzenleyici) oluşturan ve bir kitaplığı (vurgulama) ona bağlayan örnek. Proje yapısı basittir, her bir alt proje için bir ana CMakeLists ve bir dizine ihtiyaç duyar:
CMakeLists.txt editor/ CMakeLists.txt src/ editor.cpp highlight/ CMakeLists.txt include/ highlight.h src/ highlight.cpp Ana CMakeLists.txt dosyası, her bir alt proje için genel tanımları ve &amp;ldquo;add_subdirectory&amp;rdquo; çağrısını içerir:
cmake_minimum_required(VERSION 3.0) project(Example) add_subdirectory(highlight) add_subdirectory(editor) Kitaplık için CMakeLists.txt, kaynakları atar ve buna dizinler içerir.</description>
    </item>
    
    <item>
      <title>Derleme özellikleri ve CC&#43;&#43; standart seçimi</title>
      <link>https://www.wikiod.com/tr/cmake/derleme-ozellikleri-ve-cc-standart-secimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/derleme-ozellikleri-ve-cc-standart-secimi/</guid>
      <description>Sözdizimi # target_compile_features(hedef ÖZEL|KAMU|ARAYÜZ özellik1 [özellik2 &amp;hellip;]) Derleme Özellik Gereksinimleri # Gerekli derleyici özellikleri, target_compile_features komutu kullanılarak bir hedef üzerinde belirtilebilir:
add_library(foo foo.cpp ) target_compile_features(foo PRIVATE # scope of the feature cxx_constexpr # list of features ) Özellikler, CMAKE_C_COMPILE_FEATURES veya CMAKE_CXX_COMPILE_FEATURES öğesinin parçası olmalıdır; cmak aksi takdirde bir hata bildirir. Cmake, hedefin derleme seçeneklerine -std=gnu++11 gibi gerekli bayrakları ekleyecektir.
Örnekte, özellikler &amp;ldquo;ÖZEL&amp;rdquo; olarak bildirilir: gereksinimler hedefe eklenir, ancak tüketicilere eklenmez. Gereksinimleri foo&amp;rsquo;ya karşı bir hedef binaya otomatik olarak eklemek için, &amp;ldquo;ÖZEL&amp;rdquo; yerine &amp;ldquo;KAMU&amp;rdquo; veya &amp;ldquo;ARAYÜZÜ&amp;rdquo; kullanılmalıdır:</description>
    </item>
    
    <item>
      <title>CTest ile test takımları oluşturun</title>
      <link>https://www.wikiod.com/tr/cmake/ctest-ile-test-takmlar-olusturun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/ctest-ile-test-takmlar-olusturun/</guid>
      <description>Temel Test Paketi # # the usual boilerplate setup cmake_minimum_required(2.8) project(my_test_project LANGUAGES CXX) # tell CMake to use CTest extension enable_testing() # create an executable, which instantiates a runner from # GoogleTest, Boost.Test, QtTest or whatever framework you use add_executable(my_test test_main.cpp) # depending on the framework, you need to link to it target_link_libraries(my_test gtest_main) # now register the executable with CTest add_test(NAME my_test COMMAND my_test) &amp;ldquo;enable_testing()&amp;rdquo; makrosu çok fazla sihir yapar.</description>
    </item>
    
    <item>
      <title>Paketleme ve Dağıtım Projeleri</title>
      <link>https://www.wikiod.com/tr/cmake/paketleme-ve-dagtm-projeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/paketleme-ve-dagtm-projeleri/</guid>
      <description>Sözdizimi # # Bir derleme dizini paketleyin paket [YOL] # Belirli bir oluşturucu kullanın cpack -G [JENERATÖR] [YOL] # İsteğe bağlı geçersiz kılmalar sağlayın cpack -G [JENERATÖR] -C [KONFIGÜRASYON] -P [PAKET ADI] -R [PAKET VERSİYONU] -B [PAKET DİZİNİ] &amp;ndash;vendor [PAKET SATICI] CPack, gerekli tüm verileri doğrudan &amp;ldquo;CMakeLists.txt&amp;rdquo; dosyalarından ve &amp;ldquo;install_targets()&amp;rdquo; gibi kullanılan yükleme komutlarından toplayarak, oluşturulmuş CMake projelerinin hızlı bir şekilde paketlenmesini sağlayan harici bir araçtır.
CPack&amp;rsquo;in düzgün çalışması için, &amp;ldquo;CMakeLists.</description>
    </item>
    
    <item>
      <title>Hedef Oluştur</title>
      <link>https://www.wikiod.com/tr/cmake/hedef-olustur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/hedef-olustur/</guid>
      <description>Sözdizimi # add_executable(target_name [EXCLUDE_FROM_ALL] kaynak1 [kaynak2&amp;hellip;]) add_library(lib_name [STATIC|SHARED|MODULE] [EXCLUDE_FROM_ALL] kaynak1 [kaynak2 &amp;hellip;]) Yürütülebilir dosyalar # Yürütülebilir dosya üreten bir yapı hedefi oluşturmak için &amp;lsquo;add_executable&amp;rsquo; komutu kullanılmalıdır:
add_executable(my_exe main.cpp utilities.cpp) Bu, bir yapı hedefi oluşturur, ör. GNU make için &amp;ldquo;make my_exe&amp;rdquo;, iki &amp;ldquo;main.cpp&amp;rdquo; ve &amp;ldquo;utilities.cpp&amp;rdquo; kaynak dosyasından yürütülebilir bir &amp;ldquo;my_exe&amp;rdquo; oluşturmak üzere yapılandırılmış derleyicinin uygun çağrıları ile.
Varsayılan olarak, tüm yürütülebilir hedefler yerleşik &amp;ldquo;all&amp;rdquo; hedefine eklenir (GNU make için &amp;ldquo;all&amp;rdquo;, MSVC için &amp;ldquo;BUILD_ALL&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>GitHub CI araçlarında CMake entegrasyonu</title>
      <link>https://www.wikiod.com/tr/cmake/github-ci-araclarnda-cmake-entegrasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cmake/github-ci-araclarnda-cmake-entegrasyonu/</guid>
      <description>Travis CI&amp;rsquo;yi stok CMake ile yapılandırın # Travis CI, önceden yüklenmiş CMake 2.8.7&amp;rsquo;ye sahiptir.
Kaynak dışı bir yapı için minimal bir &amp;ldquo;.travis.yml&amp;rdquo; betiği
language: cpp compiler: - gcc before_script: # create a build folder for the out-of-source build - mkdir build # switch to build directory - cd build # run cmake; here we assume that the project&#39;s # top-level CMakeLists.txt is located at &#39;..&#39; - cmake .. script: # once CMake has done its job we just build using make as usual - make # if the project uses ctest we can run the tests like this - make test Travis CI&amp;rsquo;yi en yeni CMake ile yapılandırın # Travis&amp;rsquo;e önceden yüklenmiş olan CMake sürümü çok eskidir.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Three.js Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/three-js/</link>
    <description>Recent content in Three.js Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/three-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Three.js&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/three-js/threejsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/threejsyi-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # [Üç.js](https:// threejs.org/) dosyasını npm yoluyla yükleyebilirsiniz:
npm install three
Bir CDN&amp;rsquo;den HTML&amp;rsquo;nize ekleyebilirsiniz:
Denemek ve projeyi bir örnek veya başlangıç ​​noktası olarak indirmek için [üç.js düzenleyicisini](https:// threejs.org/editor/) kullanabilirsiniz.
Basit Kazan plakası: sönümlemeli dönen küp ve yörünge kontrolleri # Bu, bir projeye başlarken standart olarak kullanılabilecek temel HTML dosyasıdır. Bu standart, sönümlemeli yörünge kontrollerini (yavaşlama etkisiyle bir nesnenin etrafında hareket edebilen kamera) kullanır ve dönen bir küp oluşturur.</description>
    </item>
    
    <item>
      <title>Three.js&#39;de Kamera Kontrolleri</title>
      <link>https://www.wikiod.com/tr/three-js/threejsde-kamera-kontrolleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/threejsde-kamera-kontrolleri/</guid>
      <description>Bu belge, mevcut bazı Kamera Kontrollerini sahnenize nasıl kolayca ekleyebileceğinizi ve ayrıca özel kontroller oluşturma konusunda rehberlik sağlar.
Önceden hazırlanmış kontrol komut dosyalarının kütüphanenin /examples/js/controls klasöründe bulunabileceğini unutmayın.
Yörünge Kontrolleri # Bir Yörünge Kamerası, kullanıcının belirli bir ekseni kilitli tutarken merkezi bir nokta etrafında dönmesine izin veren bir kameradır. Bu son derece popülerdir çünkü sahnenin eksen dışına &amp;ldquo;eğilmesini&amp;rdquo; önler. Bu sürüm Y (dikey) eksenini kilitler ve kullanıcıların sol, orta ve sağ fare düğmeleriyle (veya belirli dokunma olaylarıyla) Yörünge, Yakınlaştırma ve Kaydırma yapmasına olanak tanır.</description>
    </item>
    
    <item>
      <title>Nesne Toplama</title>
      <link>https://www.wikiod.com/tr/three-js/nesne-toplama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/nesne-toplama/</guid>
      <description>Nesne toplama / Raycasting # Raycasting, farenin ekrandaki konumundan sahneye bir ışını fırlatmak anlamına gelir, bu şekilde Threejs, uyguladıysanız hangi nesneye tıklamak istediğinizi belirler. Threejs bu bilgiyi bir octree kullanarak alır, ancak hala üretimde, sonucu her karede veya &amp;ldquo;mousemove&amp;rdquo; olayında değil, daha erişilebilir bir uygulama için &amp;ldquo;click&amp;rdquo; olayında hesaplamak isteyebilirsiniz. düşük gereksinimler.
var raycaster, mouse = { x : 0, y : 0 }; init(); function init () { //Usual setup code here.</description>
    </item>
    
    <item>
      <title>geometriler</title>
      <link>https://www.wikiod.com/tr/three-js/geometriler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/geometriler/</guid>
      <description>Örnekler üç.js R79 (revizyon 79) itibariyle çalışır.
ÜÇ.KutuGeometri # THREE.BoxGeometry, küboidler ve küpler gibi kutular oluşturur.
Küpler # THREE.BoxGeometry kullanılarak oluşturulan küpler, tüm taraflar için aynı uzunluğu kullanır.
JavaScript
//Creates scene and camera var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); //Creates renderer and adds it to the DOM var renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); //The Box!</description>
    </item>
    
    <item>
      <title>Animasyon için Render Loops Nesneleri dinamik olarak güncelleme</title>
      <link>https://www.wikiod.com/tr/three-js/animasyon-icin-render-loops-nesneleri-dinamik-olarak-guncelleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/animasyon-icin-render-loops-nesneleri-dinamik-olarak-guncelleme/</guid>
      <description>Bu belge, doğrudan Three.js sahnelerinize animasyon eklemenin bazı yaygın yollarını açıklar. Sahnenize dinamik hareket ekleyebilecek kütüphaneler ve çerçeveler (aralar, fizik vb.) olsa da, bunu birkaç satır kodla kendi başınıza nasıl yapabileceğinizi anlamak faydalı olacaktır.
Temel animasyon kavramı, bir nesnenin özelliklerini (genellikle döndürme ve çevirme) belirli bir süre boyunca küçük miktarlarda güncellemektir. Örneğin, bir nesneyi X konumunu saniyenin onda birinde 0,1 artırarak çevirirseniz, 1 saniyede X ekseninde 1 birim daha ileride olacaktır, ancak izleyici onu o konuma sorunsuzca hareket etmiş olarak algılayacaktır.</description>
    </item>
    
    <item>
      <title>Dokular ve Malzemeler</title>
      <link>https://www.wikiod.com/tr/three-js/dokular-ve-malzemeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/dokular-ve-malzemeler/</guid>
      <description>Malzeme ve dokulara güzel bir giriş.
Dağınık, Kabarık, Aynasal ve Şeffaf Dokular.
Parametreler # parametre Ayrıntılar renk Rengin RGB bileşeninin sayısal değeri. yoğunluk Işığın gücünün/yoğunluğunun sayısal değeri. bakış Kamera frustum dikey görüş alanı. Görünüş Bir parça kamera sisteme bakıyor. yakın Uçağa yakın kamera frustum. uzak Bir kamera parçası açıkça uzakta. yarıçap küre yarıçapı. Varsayılan 50&amp;rsquo;dir. genişlikSegmentler yatay segment sayısı. Minimum değer 3 ve varsayılan değer 8&amp;rsquo;dir. yükseklikSegmentler dikey segment sayısı. Minimum değer 2 ve varsayılan değer 6&amp;rsquo;dır.</description>
    </item>
    
    <item>
      <title>ağlar</title>
      <link>https://www.wikiod.com/tr/three-js/aglar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/three-js/aglar/</guid>
      <description>Three.js [Mesh](https:// threejs.org/docs/?q=mesh#Reference/Objects/Mesh), Object3d öğesinden miras alınan bir temel sınıftır. ?q=geomet#Reference/Core/Object3D) ve bir [Geometry](https:// threejs.org/docs/?q=geomet#Reference/Core/Geometry) ile bir [Material] birleştirerek çokgen nesneleri başlatmak için kullanılır. ](https:// threejs.org/docs/?q=mater#Reference/Materials/Material). &amp;ldquo;Mesh&amp;rdquo; ayrıca daha gelişmiş &amp;ldquo;MorphAnimMesh&amp;rdquo; ve &amp;ldquo;SkinnedMesh&amp;rdquo; sınıfları için temel sınıftır.
Sözdizimi # yeni ÜÇ.Mesh(geometri, malzeme); Hem geometri hem de malzeme isteğe bağlıdır ve yapıcıda sağlanmadıysa varsayılan olarak sırasıyla &amp;ldquo;BufferGeometry&amp;rdquo; ve &amp;ldquo;MeshBasicMaterial&amp;rdquo; olacaktır.
Bir kutu geometrisi ve temel bir malzeme ile bir küp ağı oluşturun # var scene = new THREE.</description>
    </item>
    
  </channel>
</rss>

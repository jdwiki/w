<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>birim testi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/unit-testing/</link>
    <description>Recent content in birim testi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Birim testine başlarken</title>
      <link>https://www.wikiod.com/tr/unit-testing/birim-testine-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/birim-testine-baslarken/</guid>
      <description>Temel birim testi # En basit haliyle, bir birim testi üç aşamadan oluşur:
Test için ortamı hazırlayın Test edilecek kodu yürütün Beklenen davranışın gözlemlenen davranışla eşleştiğini doğrulayın Bu üç aşamaya genellikle &amp;lsquo;Düzenle-Yap-Ona-Talep&amp;rsquo; veya &amp;lsquo;Ne Zaman-Verilir&amp;rsquo; denir.
Aşağıda NUnit çerçevesini kullanan C# örneği verilmiştir.
[TestFixture] public CalculatorTest { [Test] public void Add_PassSevenAndThree_ExpectTen() { // Arrange - setup environment var systemUnderTest = new Calculator(); // Act - Call system under test var calculatedSum = systemUnderTest.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/unit-testing/bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/bagmllk-enjeksiyonu/</guid>
      <description>Yazılım yazmak için alınabilecek bir yaklaşım, gerektiğinde bağımlılıklar oluşturmaktır. Bu, bir program yazmanın oldukça sezgisel bir yoludur ve kısmen takip edilmesi kolay olduğu için çoğu insanın öğretilme eğiliminde olduğu yoldur. Bu yaklaşımla ilgili sorunlardan biri, test etmenin zor olabileceğidir. Geçerli tarihe göre bazı işlemler yapan bir yöntem düşünün. Yöntem, aşağıdaki gibi bazı kodlar içerebilir:
if (DateTime.Now.Date &amp;gt; processDate) { // Do some processing } Kodun geçerli tarihe doğrudan bağımlılığı vardır. Bu yöntemi test etmek zor olabilir çünkü mevcut tarih kolayca değiştirilemez.</description>
    </item>
    
    <item>
      <title>Test Çiftleri</title>
      <link>https://www.wikiod.com/tr/unit-testing/test-ciftleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/test-ciftleri/</guid>
      <description>Test ederken, test edilen sistemin davranışını değiştirmek veya doğrulamak için bazen bir test dublörü kullanmak yararlıdır. Çiftler, üretim kodu örnekleri yerine test edilen sınıfa veya yönteme geçirilir veya enjekte edilir.
Hazır yanıtlar sağlamak için bir saplama kullanma # Saplama, yöntemler çağrıldığında hazır yanıtlar sağlayan hafif ağırlık testi ikilisidir. Test edilen bir sınıfın bir arayüze veya temel sınıfa dayandığı durumlarda, arayüze uyan test için alternatif bir &amp;lsquo;saplama&amp;rsquo; sınıfı uygulanabilir.
Yani, aşağıdaki arayüzü varsayarsak,</description>
    </item>
    
    <item>
      <title>Birim Testi En İyi Uygulamaları</title>
      <link>https://www.wikiod.com/tr/unit-testing/birim-testi-en-iyi-uygulamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/birim-testi-en-iyi-uygulamalar/</guid>
      <description>Birim testi, bir uygulamanın işlevler, sınıflar, prosedürler, arayüzler gibi test edilebilir en küçük parçasıdır. Birim testi, kullanıma uygun olup olmadıklarını belirlemek için kaynak kodun ayrı birimlerinin test edildiği bir yöntemdir. Birim testleri, kodun tasarımını ve gereksinimlerini karşıladığından ve beklendiği gibi davrandığından emin olmak için temel olarak yazılım geliştiricileri tarafından yazılır ve yürütülür.
MakeSut konsepti # Testcode, üretim koduyla aynı kalite taleplerine sahiptir. makeSuit()
okunabilirliği artırır kolayca yeniden düzenlenebilir bağımlılık enjeksiyonunu mükemmel şekilde destekler.</description>
    </item>
    
    <item>
      <title>Tüm diller için birim testi için genel kurallar</title>
      <link>https://www.wikiod.com/tr/unit-testing/tum-diller-icin-birim-testi-icin-genel-kurallar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/tum-diller-icin-birim-testi-icin-genel-kurallar/</guid>
      <description>Birim testine başlarken her türlü soru ortaya çıkar:
Birim testi nedir? Kurulum ve TearDown nedir? Bağımlılıklarla nasıl başa çıkabilirim? Neden birim testi yapılır? İyi birim testleri nasıl yapabilirim?
Bu makale tüm bu soruları yanıtlayacaktır, böylece istediğiniz herhangi bir dilde birim testine başlayabilirsiniz.
Birim testi nedir? # Birim testi, gerçekleştirmesi amaçlanan görevi yerine getirdiğinden emin olmak için kodun test edilmesidir. Kodu mümkün olan en düşük düzeyde test eder - sınıflarınızın bireysel yöntemleri.</description>
    </item>
    
    <item>
      <title>C# için Visual Studio&#39;da kılavuz birim testi</title>
      <link>https://www.wikiod.com/tr/unit-testing/c-icin-visual-studioda-klavuz-birim-testi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/c-icin-visual-studioda-klavuz-birim-testi/</guid>
      <description>Birim test projesi ve birim testleri nasıl oluşturulur ve birim testleri ve kod kapsamı aracı nasıl çalıştırılır.
Bu kılavuzda standart MSTest çerçevesi ve Visual Studio&amp;rsquo;da bulunan standart Kod Kapsamı Analizleri aracı kullanılacaktır.
Kılavuz Visual Studio 2015 için yazılmıştır, bu nedenle diğer sürümlerde bazı şeyler farklı olabilir.
Birim test projesi oluşturma # C# projesini açın Çözüme sağ tıklayın -&amp;gt; Ekle -&amp;gt; Yeni Proje… (Şekil 1) Yüklü -&amp;gt; Visual C# -&amp;gt; Test&amp;rsquo;e gidin Birim Test Projesi&amp;rsquo;ne tıklayın Bir isim verin ve Tamam&amp;rsquo;a tıklayın (Şekil 2) Çözüme birim test projesi eklendi (Figür 3) Test etmek istediğiniz uygulamaya referans ekleme</description>
    </item>
    
    <item>
      <title>Döngülerin birim testi (Java)</title>
      <link>https://www.wikiod.com/tr/unit-testing/dongulerin-birim-testi-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/dongulerin-birim-testi-java/</guid>
      <description>Döngüler, herhangi bir programlama dilinde önemli kontrol yapılarından biri olarak kabul edilir. Döngü kapsamını elde etmenin farklı yolları vardır.
Bu yöntemler döngü tipine göre farklılık gösterir.
Tek döngüler
İç içe geçmiş döngüler
Birleştirilmiş döngüler
Tek döngü testi # Bunlar, ilmek gövdesinin başka ilmek içermediği ilmeklerdir (iç içe olması durumunda en içteki ilmek).
Döngü kapsamına sahip olmak için, testçiler aşağıda verilen testleri yapmalıdır.
Test 1: Döngü gövdesinin hiç çalışmaması gereken bir test tasarlayın (yani sıfır yineleme)</description>
    </item>
    
    <item>
      <title>Onay Türleri</title>
      <link>https://www.wikiod.com/tr/unit-testing/onay-turleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/unit-testing/onay-turleri/</guid>
      <description>Döndürülen Değeri Doğrulama # [Test] public void Calculator_Add_ReturnsSumOfTwoNumbers() { Calculator calculatorUnderTest = new Calculator(); double result = calculatorUnderTest.Add(2, 3); Assert.AreEqual(5, result); } Durum Bazlı Test # Bu basit sınıf göz önüne alındığında, &amp;lsquo;ShaveHead&amp;rsquo; yöntemi çağrıldıktan sonra &amp;lsquo;HairLength&amp;rsquo; değişkeninin durumunun sıfıra ayarlandığını ileri sürerek &amp;lsquo;ShaveHead&amp;rsquo; yönteminin doğru çalıştığını test edebiliriz.
public class Person { public string Name; public int HairLength; public Person(string name, int hairLength) { this.Name = name; this.HairLength = hairLength; } public void ShaveHead() { this.</description>
    </item>
    
  </channel>
</rss>

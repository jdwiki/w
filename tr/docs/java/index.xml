<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Dili Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/java/</link>
    <description>Recent content in Java Dili Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Dilini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/java/java-dilini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/java-dilini-kullanmaya-baslama/</guid>
      <description>İlk Java Programınızı Oluşturma # Metin düzenleyicinizde veya IDE&amp;lsquo;de HelloWorld.java adında yeni bir dosya oluşturun. Ardından bu kod bloğunu dosyaya yapıştırın ve kaydedin:
public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;quot;Hello, World!&amp;quot;); } } Ideone&amp;rsquo;da canlı çalıştırın
Not: Java&amp;rsquo;nın bunu bir &amp;ldquo;genel sınıf&amp;rdquo; olarak tanıması (ve bir [derleme zamanı hatası][3] atmaması), dosya adının sınıf adıyla aynı olması gerekir (burada &amp;ldquo;MerhabaDünya&amp;rdquo;) örnek) .java uzantısıyla. Ayrıca ondan önce bir &amp;lsquo;public&amp;rsquo; erişim değiştiricisi olmalıdır.</description>
    </item>
    
    <item>
      <title>diziler</title>
      <link>https://www.wikiod.com/tr/java/diziler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/diziler/</guid>
      <description>Diziler, isteğe bağlı miktarda değerin depolanmasına ve alınmasına izin verir. Matematikteki vektörlere benzerler. Dizi dizileri matrislere benzer ve çok boyutlu diziler gibi davranır. Diziler her türden veriyi depolayabilir: &amp;ldquo;int&amp;rdquo; gibi temel öğeler veya &amp;ldquo;Nesne&amp;rdquo; gibi başvuru türleri.
Sözdizimi # ArrayType[] myArray; // Dizileri bildirme ArrayType myArray[]; // Başka bir geçerli sözdizimi (daha az kullanılan ve önerilmeyen) ArrayType[][][] myArray; // Çok boyutlu pürüzlü dizileri bildirme (tekrar []s) ArrayType myVar = myArray[index]; // Dizindeki öğeye erişme (okuma) myArray[index] = value; // Dizinin `index&amp;rsquo; konumuna değer ata ArrayType[] myArray = new ArrayType[arrayLength]; // Dizi başlatma sözdizimi int[] ints = {1, 2, 3}; // Sağlanan değerlerle dizi başlatma sözdizimi, uzunluk sağlanan değerlerin sayısından çıkarılır: {[değer1[, değer2]*]} `new int[]{4, -5, 6} // Yerel değişken olmadan bağımsız değişken olarak kullanılabilir&#39; int[] ints = yeni int[3]; // {0, 0, 0} ile aynı int[][] ints = {{1, 2}, {3}, null}; // Çok boyutlu dizi başlatma.</description>
    </item>
    
    <item>
      <title>Canlı Yayınlar</title>
      <link>https://www.wikiod.com/tr/java/canl-yaynlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/canl-yaynlar/</guid>
      <description>Bir &amp;ldquo;Akış&amp;rdquo;, bir dizi öğeyi temsil eder ve bu öğeler üzerinde hesaplamalar yapmak için farklı türde işlemleri destekler. Java 8 ile, &amp;ldquo;Collection&amp;rdquo; arabiriminin bir &amp;ldquo;Stream&amp;rdquo; oluşturmak için iki yöntemi vardır: &amp;ldquo;stream()&amp;rdquo; ve &amp;ldquo;parallelStream()&amp;rdquo;. &amp;lsquo;Akış&amp;rsquo; işlemleri ya ara ya da uçbirimdir. Ara işlemler bir &amp;ldquo;Akış&amp;rdquo; döndürür, böylece &amp;ldquo;Akış&amp;rdquo; kapatılmadan önce birden çok ara işlem zincirlenebilir. Terminal işlemleri ya geçersizdir ya da akış dışı bir sonuç döndürür.
Sözdizimi # koleksiyon.stream() Arrays.stream(dizi) Stream.iterate(firstValue, currentValue -&amp;gt; nextValue) Stream.</description>
    </item>
    
    <item>
      <title>Lambda İfadeleri</title>
      <link>https://www.wikiod.com/tr/java/lambda-ifadeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/lambda-ifadeleri/</guid>
      <description>Lambda ifadeleri, bir ifade kullanarak tek yöntemli bir arabirim uygulamanın açık ve özlü bir yolunu sağlar. Oluşturmanız ve sürdürmeniz gereken kod miktarını azaltmanıza izin verirler. Anonim sınıflara benzer olmakla birlikte, kendi başlarına hiçbir tür bilgisi yoktur. Tür çıkarımının gerçekleşmesi gerekir.
Yöntem referansları, ifadeler yerine mevcut yöntemleri kullanarak işlevsel arayüzleri uygular. Onlar da lambda ailesine aittir.
Sözdizimi # () -&amp;gt; { dönüş ifadesi; } // Bir değer döndürmek için fonksiyon gövdesi ile sıfır-arity.</description>
    </item>
    
    <item>
      <title>Yaygın Java Tuzakları</title>
      <link>https://www.wikiod.com/tr/java/yaygn-java-tuzaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/yaygn-java-tuzaklar/</guid>
      <description>Bu konu, Java&amp;rsquo;ya yeni başlayanlar tarafından yapılan bazı yaygın hataları özetlemektedir.
Bu, Java dilinin kullanımındaki veya çalışma zamanı ortamının anlaşılmasındaki yaygın hataları içerir.
Belirli API&amp;rsquo;lerle ilişkili hatalar, bu API&amp;rsquo;lere özel konularda açıklanabilir. Dizeler özel bir durumdur; Java Dil Belirtimi kapsamındadırlar. Yaygın hatalar dışındaki ayrıntılar Dizelerle ilgili bu konuda açıklanabilir.
Tuzak: Tamsayı gibi ilkel sarmalayıcı nesnelerini karşılaştırmak için == kullanma # (Bu tuzak, tüm ilkel sarmalayıcı türleri için eşit olarak geçerlidir, ancak bunu &amp;lsquo;Tamsayı&amp;rsquo; ve &amp;lsquo;int&amp;rsquo; için göstereceğiz.</description>
    </item>
    
    <item>
      <title>Teller</title>
      <link>https://www.wikiod.com/tr/java/teller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/teller/</guid>
      <description>Dizeler (java.lang.String), programınızda depolanan metin parçalarıdır. Dizeler Java&amp;rsquo;da bir [ilkel veri türü] değildir, ancak bunlar Java programlarında çok yaygındır.
Java&amp;rsquo;da Dizeler değişmezdir, yani değiştirilemezler. (Değişmezliğin daha kapsamlı bir açıklaması için buraya tıklayın.)
Java dizeleri değişmez olduğundan, bir &amp;ldquo;Dize&amp;quot;yi işleyen tüm yöntemler yeni bir &amp;ldquo;Dize&amp;rdquo; nesnesi döndürür. Orijinal &amp;lsquo;Dize&amp;rsquo;yi değiştirmezler. Bu, C ve C++ programcılarının hedef &amp;lsquo;String&amp;rsquo; nesnesini mutasyona uğratmayı umduğu alt dizgi ve değiştirme yöntemlerini içerir.
Birden fazlasını birleştirmek istiyorsanız &amp;ldquo;String&amp;rdquo; yerine bir StringBuilder kullanın.</description>
    </item>
    
    <item>
      <title>jenerik</title>
      <link>https://www.wikiod.com/tr/java/jenerik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/jenerik/</guid>
      <description>Generics, Java&amp;rsquo;nın tür sistemini, bir türün veya yöntemin derleme zamanı tür güvenliği sağlarken çeşitli türlerdeki nesneler üzerinde çalışmasına izin verecek şekilde genişleten bir genel programlama tesisidir. Özellikle, Java koleksiyonları çerçevesi, bir koleksiyon örneğinde depolanan nesnelerin türünü belirtmek için jenerikleri destekler.
Sözdizimi # sınıf ArrayList&amp;lt;E&amp;gt; {} // E tipi parametreli genel bir sınıf sınıf HashMap&amp;lt;K, V&amp;gt; {} // K ve V olmak üzere iki tip parametreye sahip genel bir sınıf &amp;lt;E&amp;gt; void print(E element) {} // E tipi parametreli genel bir metot ArrayList&amp;lt;String&amp;gt; isimler; // genel bir sınıfın bildirimi ArrayList&amp;lt;?</description>
    </item>
    
    <item>
      <title>Numaralandırmalar</title>
      <link>https://www.wikiod.com/tr/java/numaralandrmalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/numaralandrmalar/</guid>
      <description>Java numaralandırmaları (&amp;rsquo;enum&amp;rsquo; anahtar sözcüğü kullanılarak bildirilir), tek bir sınıfın büyük miktardaki sabitleri için kestirme sözdizimidir.
Sözdizimi # [genel/korumalı/özel] enum Numaralandırma_adı { // Yeni bir numaralandırma bildir. ENUM_CONSTANT_1[, ENUM_CONSTANT_2&amp;hellip;]; // Enum sabitlerini bildir. Bu, numaralandırmanın içindeki ilk satır olmalı ve sonunda noktalı virgülle virgülle ayrılmalıdır. ENUM_CONSTANT_1(param)[, ENUM_CONSTANT_2(param)&amp;hellip;]; // Enum sabitlerini parametrelerle bildirin. Parametre türleri yapıcıyla eşleşmelidir. ENUM_CONSTANT_1 {&amp;hellip;}[, ENUM_CONSTANT_2 {&amp;hellip;}&amp;hellip;]; // Geçersiz kılınan yöntemlerle enum sabitlerini bildirin. Bu, numaralandırma soyut yöntemler içeriyorsa yapılmalıdır; tüm bu yöntemler uygulanmalıdır.</description>
    </item>
    
    <item>
      <title>İstisnalar ve istisna işleme</title>
      <link>https://www.wikiod.com/tr/java/istisnalar-ve-istisna-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/istisnalar-ve-istisna-isleme/</guid>
      <description>&amp;lsquo;Throwable&amp;rsquo; türündeki nesneler ve alt türleri, &amp;rsquo;throw&amp;rsquo; anahtar sözcüğü ile yığına gönderilebilir ve &amp;rsquo;try…catch&amp;rsquo; ifadeleriyle yakalanabilir.
Sözdizimi # void someMethod(), SomeException { } //yöntem bildirimini atar, yöntemi zorlar SomeException işaretli bir istisna türü olup olmadığını yakalamak için arayanlar
denemek {
someMethod(); //code that might throw an exception }
yakalama (SomeException e) {
System.out.println(&amp;quot;SomeException was thrown!&amp;quot;); //code that will run if certain exception (SomeException) is thrown }
en sonunda {
//code that will always run, whether try block finishes or not }</description>
    </item>
    
    <item>
      <title>Koleksiyonlar</title>
      <link>https://www.wikiod.com/tr/java/koleksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/java/koleksiyonlar/</guid>
      <description>&amp;lsquo;java.util&amp;rsquo; içindeki koleksiyon çerçevesi, normal diziler tarafından sağlanamayan işlevselliğe sahip veri kümeleri için bir dizi genel sınıf sağlar.
Koleksiyonlar çerçevesi, &amp;lsquo;Liste&amp;rsquo; ve &amp;lsquo;Set&amp;rsquo; ana alt arabirimleri ve eşleme koleksiyonu &amp;lsquo;Harita&amp;lt;K,V&amp;gt;&amp;rsquo; ile &amp;lsquo;Koleksiyon&amp;rsquo; için arabirimler içerir. Koleksiyonlar, kök arabirimdir ve diğer birçok koleksiyon çerçevesi tarafından uygulanmaktadır.
Koleksiyonlar, içinde başka nesnelerin koleksiyonlarını depolayabilen nesnelerdir. Generics kullanarak bir koleksiyonda depolanan verilerin türünü belirtebilirsiniz.
Koleksiyonlar genellikle &amp;ldquo;java.util&amp;rdquo; veya &amp;ldquo;java.util.concurrent&amp;rdquo; ad alanlarını kullanır.
Java 1.4.2 ve altı, jenerikleri desteklemez.</description>
    </item>
    
  </channel>
</rss>

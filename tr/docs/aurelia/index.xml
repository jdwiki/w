<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aurelia Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/aurelia/</link>
    <description>Recent content in aurelia Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/aurelia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>aurelia&#39;ya başlarken</title>
      <link>https://www.wikiod.com/tr/aurelia/aureliaya-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/aureliaya-baslarken/</guid>
      <description>Merhaba Dünya: aurelia-cli&amp;rsquo;ye başlarken # Bu örnek, Aurelia CLI kullanarak merhaba dünya Aurelia uygulamasını nasıl hızlı bir şekilde çalıştırabileceğinizi gösterecektir.
Önkoşullar # Aurelia CLI, Node.js tabanlı bir uygulamadır, bu yüzden devam etmeden önce onu kurduğunuzdan emin olun. Node.js 4.4.7 veya daha yenisine ihtiyacınız olacak.
Ayrıca yüklü bir Git istemcisine ihtiyacınız olacak. Bazı harika seçenekler şunlardır: Github Desktop, Sourcetree ve Git SCM.
CLI&amp;rsquo;yi yükleme # Node.js ve Npm&amp;rsquo;yi doğru yüklediyseniz, bir Komut İstemi/PowerShell veya Bash terminali açın ve aşağıdaki komutu kullanarak CLI&amp;rsquo;yi global olarak kurun:</description>
    </item>
    
    <item>
      <title>Değer Dönüştürücüler</title>
      <link>https://www.wikiod.com/tr/aurelia/deger-donusturuculer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/deger-donusturuculer/</guid>
      <description>Bu bölüm, Aurelia&amp;rsquo;daki Değer Dönüştürücülerine genel bir bakış sağlar. Yalnızca bir değer dönüştürücünün nasıl oluşturulacağını değil, aynı zamanda bunları neden kullanmak isteyebileceğinizi ve bir Değer Dönüştürücüsü kullanılarak gerçekleştirilen birçok temel görev örneğini de detaylandırmalıdır.
Değer dönüştürücüler zincirlenebilir ve Aurelia&amp;rsquo;daki Bağlama Davranışları gibi diğer bağlama özellikleriyle birlikte kullanılabilir.
Temel Değer Dönüştürücüsü Oluşturma # Değer Dönüştürücüler bir &amp;ldquo;toView&amp;rdquo; veya &amp;ldquo;fromView&amp;rdquo; yönteminden oluşabilirken, aşağıdaki örnekte, görünüme gönderilen değeri ilk olarak kabul eden &amp;ldquo;toView&amp;rdquo; yöntemini kullanan temel bir Değer Dönüştürücü oluşturacağız.</description>
    </item>
    
    <item>
      <title>Aurelia CLI</title>
      <link>https://www.wikiod.com/tr/aurelia/aurelia-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/aurelia-cli/</guid>
      <description>Bir CLI Uygulamasına Önyükleme Ekleme # Yaygın olarak kullanılan bir CSS/Javascript kitaplığı Bootstrap. Aurelia CLI tabanlı uygulamanıza kurmak için önce Npm kullanarak kurmanız gerekir.
npm install bootstrap --save Bootstrap, jQuery&amp;rsquo;ye sıkı bir bağımlılığa sahip olduğundan, jQuery&amp;rsquo;nin de kurulu olduğundan emin olmamız gerekir:
npm install jquery --save Şimdi tercih ettiğiniz IDE/kod düzenleyicide proje dizininizde şu dosyayı açın: aurelia_project/aurelia.json ve dosyanın sonuna doğru build.bundles bölümüne gidin. Paketlerden birine Bootstrap eklemek isteyeceğiz. Bu örnekte, satıcı paketine hem jQuery hem de Bootstrap ekleyeceğiz.</description>
    </item>
    
    <item>
      <title>Özel Öğeler</title>
      <link>https://www.wikiod.com/tr/aurelia/ozel-ogeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/ozel-ogeler/</guid>
      <description>Aurelia&amp;rsquo;daki Özel Öğe, temel HTML öğeleri kümesini, özelliklerle zenginleştirilmiş, yeniden kullanılabilir bileşenlerle genişletmek için kullanılır. Bir Özel Öğe normalde iki dosyadan oluşur, Javasciprt&amp;rsquo;e dayalı bir Görünüm Modeli ve HTML ile yazılmış ilgili bir görünüm. Her iki dosya da, diğer tüm HTML öğeleri gibi uygulama boyunca kullanılabilen HTML öğesini oluşturur.
Adlandırma Kurallarına Dayalı Özel Bir Öğe Oluşturma # Aurelia&amp;rsquo;da, bir sınıfın adına basitçe &amp;ldquo;CustomElement&amp;rdquo; son eki eklenerek, adlandırma kurallarına dayalı olarak temel bir özel öğe oluşturulur.</description>
    </item>
    
    <item>
      <title>Aurelia CLI Açıklaması</title>
      <link>https://www.wikiod.com/tr/aurelia/aurelia-cli-acklamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/aurelia-cli-acklamas/</guid>
      <description>Aurelia-cli için Ortam Kurulumu Açıklaması # İS: Mac OS X 10.11 (Vagrant kullandığımız için Windows/Linux üzerinde çalışmalı) Vagrant 1.8.4 Installed Ana İşletim Sisteminde (Mac OS) Dizin Yapısı: /yol/hedef/proje /provision /packages Note: If you use different vesions, be sure to update Variables at top of provision.sh script below. atom.x86_64.rpm (Download: Atom) node-v6.4.0-linux-x64.tar.xz (Download: Node) /vagrant Vagrantfile (File contents below) provision.sh (File contents below) Sanal Makineyi Başlatma ($ == Terminal istemi) In Mac OS Terminal $cd /path/to/project/vagrant $vagrant up Downloads CentOS 7 vagrant box, runs provision script Launches VM window outside of your Mac OS terminal When all done, log into VM using gui User: vagrant PW: vagrant Launch X Windows: $startx (Starts a Gnome UI) VM&amp;rsquo;yi kurma Launch a Terminal window (Applications Drop Down Menu / Utilities) Set up sudo to run &amp;ldquo;npm&amp;rdquo; Get path to npm: $which npm (/opt/node-v6.</description>
    </item>
    
    <item>
      <title>bağlama</title>
      <link>https://www.wikiod.com/tr/aurelia/baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/baglama/</guid>
      <description>Onay Kutularına Bağlama # Temel Onay Kutuları
export class MyViewModel { favoriteColors = []; colors = [&#39;Red&#39;, &#39;Yellow&#39;, &#39;Pink&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Blue&#39;]; } &amp;lt;template&amp;gt; &amp;lt;label repeat.for=&amp;quot;color of colors&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; value.bind=&amp;quot;color&amp;quot; checked.bind=&amp;quot;favoriteColors&amp;quot; /&amp;gt; ${color} &amp;lt;/label&amp;gt; &amp;lt;p&amp;gt;Favourite colors:&amp;lt;/p&amp;gt; &amp;lt;ul if.bind=&amp;quot;favoriteColors&amp;quot;&amp;gt; &amp;lt;li repeat.for=&amp;quot;color of favoriteColors&amp;quot;&amp;gt;${color}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt; Nesne Dizili Onay Kutuları
export class MyViewModel { people = []; selectedPeople = []; constructor() { this.people = [ {name: &#39;John Michaels&#39;}, {name: &#39;Gary Stevens&#39;}, {name: &#39;Carrie Smitch&#39;}, {name: &#39;Jesus Wohau&#39;} ]; } } &amp;lt;template&amp;gt; &amp;lt;label repeat.</description>
    </item>
    
    <item>
      <title>&lt;compose&gt; ile çalışma</title>
      <link>https://www.wikiod.com/tr/aurelia/compose-ile-calsma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/compose-ile-calsma/</guid>
      <description>Yalnızca Görünümle Oluştur # Muhtemelen &amp;lsquo;compose&amp;rsquo; kullanmanın en basit yolu sadece View iledir. Bu, her biri için bağlanabilir özelliklere sahip bir ViewModel bildirmeye gerek kalmadan HTML şablonlarını dahil etmenize olanak tanır ve daha küçük HTML parçalarını yeniden kullanmayı kolaylaştırır.
Görünümün BindingContext&amp;rsquo;i (ViewModel), üst ViewModel&amp;rsquo;inkine ayarlanacaktır.
Kullanım:
kaynak/app.html
&amp;lt;template&amp;gt; &amp;lt;compose view=&amp;quot;./greeter.html&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt; &amp;lt;/template&amp;gt; kaynak/karşılama.html
&amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;Hello, ${name}!&amp;lt;/h1&amp;gt; &amp;lt;/template&amp;gt; kaynak/app.ts
export class App { /* This property is directly available to the child view because it does not have its own ViewModel */ name = &amp;quot;Rob&amp;quot;; } View, ViewModel ve Model ile Oluşturun # Bir Görünüm, ViewModel ve Model ile &amp;lsquo;compose&amp;rsquo; kullanmak, farklı Görünümleri ve ViewModel&amp;rsquo;leri yeniden kullanmanın ve birleştirmenin kolay bir yoludur.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/aurelia/bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/bagmllk-enjeksiyonu/</guid>
      <description>Birden fazla sınıf enjekte ediliyorsa, bunları @inject() ifadesine koyduğunuz sıranın önemi yoktur. Ancak, @inject() ifadesinde göründükleri sıra, yapıcıdaki parametrelerin sırası ile eşleşmelidir.
Kimliğe Göre Kullanıcı Adı Al ve Görüntüle # import {User} from &#39;backend/user&#39;; // import custom class import {inject} from &#39;aurelia-framework&#39;; // allows us to inject @inject(User) // inject custom class export class ProfileView { constructor(user) { // use instance of custom class as a parameter to the constructor this.</description>
    </item>
    
    <item>
      <title>şablonlama</title>
      <link>https://www.wikiod.com/tr/aurelia/sablonlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/aurelia/sablonlama/</guid>
      <description>Temel Bir Şablon Oluşturma # Aurelia&amp;rsquo;da tüm HTML şablonları, &amp;lt;template&amp;gt;&amp;lt;/template&amp;gt; etiketlerini açma ve kapama içinde tanımlanır. Tüm HTML ve Aurelia&amp;rsquo;ya özgü mantığınız bu şablon etiketlerinin içine girer ve bunların dışında var olamaz.
&amp;lt;template&amp;gt; &amp;lt;/template&amp;gt; &amp;ldquo;repeat.for&amp;rdquo; Kullanarak Döngülerle Çalışma # Görünüm modelinizin içinde tanımlanan veya bir bağlanabilir olarak geçirilen yinelenebilir bir döngü üzerinde (Bir Özel Nitelik veya Özel Öğe ise) bu şekilde yapılabilir.
Bir dizi dize değeri
export class MyViewModel { myIterable = [&#39;String 1&#39;, &#39;String 2&#39;, &#39;String 3&#39;, &#39;String 4&#39;]; } &amp;lt;template&amp;gt; &amp;lt;div repeat.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Dili Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/c/</link>
    <description>Recent content in C Dili Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C Dili ile Başlarken</title>
      <link>https://www.wikiod.com/tr/c/c-dili-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/c-dili-ile-baslarken/</guid>
      <description>Selam Dünya # Ekrana &amp;ldquo;Merhaba, Dünya&amp;rdquo; yazdıran basit bir C programı oluşturmak için, yeni bir dosya oluşturmak üzere bir metin düzenleyici kullanın (ör. c— dosya uzantısı.c` olmalıdır) aşağıdaki kaynak kodunu içeren:
Merhaba C # #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;quot;Hello, World&amp;quot;); return 0; } Coliru&amp;rsquo;da canlı demo
Bu basit programa satır satır bakalım # #include &amp;lt;stdio.h&amp;gt; Bu satır, derleyiciye standart kitaplık başlık dosyasının stdio.h içeriğini programa dahil etmesini söyler. Başlıklar genellikle işlev bildirimlerini, makroları ve veri türlerini içeren dosyalardır ve bunları kullanmadan önce başlık dosyasını eklemeniz gerekir.</description>
    </item>
    
    <item>
      <title>işaretçiler</title>
      <link>https://www.wikiod.com/tr/c/isaretciler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/isaretciler/</guid>
      <description>İşaretçi, başka bir nesnenin veya işlevin adresini depolayabilen bir değişken türüdür.
Sözdizimi # &amp;lt;Veri türü&amp;gt; *&amp;lt;Değişken adı&amp;gt;; int *ptrToInt; geçersiz *ptrToVoid; /* C89+ */ bazıStruct yapısı *ptrToStruct; int **ptrToPtrToInt; int dizi[uzunluk]; int *ptrToFirstElem = dizi; /* &amp;lt;C99 için &amp;lsquo;uzunluk&amp;rsquo; bir derleme zaman sabiti olması gerekir, &amp;gt;=C11 için bir olması gerekebilir. */ int *arrayOfPtrsToInt[uzunluk]; /* &amp;lt;C99 için &amp;lsquo;uzunluk&amp;rsquo; bir derleme zaman sabiti olması gerekir, &amp;gt;=C11 için bir olması gerekebilir. */ Yıldız işaretinin konumu, tanımın anlamını etkilemez:</description>
    </item>
    
    <item>
      <title>tanımsız davranış</title>
      <link>https://www.wikiod.com/tr/c/tanmsz-davrans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/tanmsz-davrans/</guid>
      <description>C&amp;rsquo;de bazı ifadeler tanımsız davranış verir. Standart, bir derleyicinin böyle bir ifadeyle karşılaştığında nasıl davranması gerektiğini açıkça tanımlamamayı seçer. Sonuç olarak, bir derleyici uygun gördüğü her şeyi yapmakta özgürdür ve yararlı sonuçlar, beklenmeyen sonuçlar ve hatta çökebilir.
UB&amp;rsquo;yi çağıran kod, belirli bir derleyici ile belirli bir sistemde amaçlandığı gibi çalışabilir, ancak büyük olasılıkla başka bir sistemde veya farklı bir derleyici, derleyici sürümü veya derleyici ayarlarıyla çalışmayacaktır.
Tanımsız Davranış (UB) nedir?</description>
    </item>
    
    <item>
      <title>Hafıza yönetimi</title>
      <link>https://www.wikiod.com/tr/c/hafza-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/hafza-yonetimi/</guid>
      <description>Dinamik olarak ayrılmış belleği yönetmek için, standart C kitaplığı &amp;lsquo;malloc()&amp;rsquo;, &amp;lsquo;calloc()&amp;rsquo;, &amp;lsquo;realloc()&amp;rsquo; ve &amp;lsquo;free()&amp;rsquo; işlevlerini sağlar. C99 ve sonraki sürümlerde ayrıca &amp;lsquo;aligned_alloc()&amp;rsquo; vardır. Bazı sistemler ayrıca &amp;lsquo;alloca()&amp;rsquo; sağlar.
Sözdizimi # void *aligned_alloc(size_t hizalaması, size_t boyut); /* Sadece C11&amp;rsquo;den beri */ void *calloc(size_t öğeleri, size_t boyut); void free(void *ptr); void *malloc(size_t boyut); void *realloc(void *ptr, size_t boyut); void *alloca(size_t size); /* alloca.h&amp;rsquo;den, standart değil, taşınabilir değil, tehlikeli. */ Parametreler # isim açıklama boyut (malloc, realloc ve aligned_alloc) bayt cinsinden belleğin toplam boyutu.</description>
    </item>
    
    <item>
      <title>Ortak tuzaklar</title>
      <link>https://www.wikiod.com/tr/c/ortak-tuzaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/ortak-tuzaklar/</guid>
      <description>Bu bölüm, bir C programcısının bilmesi ve yapmaktan kaçınması gereken bazı yaygın hataları tartışmaktadır. Beklenmeyen bazı sorunlar ve nedenleri hakkında daha fazla bilgi için lütfen https://www.wikiod.com/tr/c/tanmsz-davrans adresine bakın.
Aritmetik işlemlerde işaretli ve işaretsiz tam sayıları karıştırma # Aritmetik işlemlerde &amp;ldquo;imzalı&amp;rdquo; ve &amp;ldquo;imzasız&amp;rdquo; tam sayıları karıştırmak genellikle iyi bir fikir değildir. Örneğin, aşağıdaki örneğin çıktısı ne olacak?
#include &amp;lt;stdio.h&amp;gt; int main(void) { unsigned int a = 1000; signed int b = -1; if (a &amp;gt; b) puts(&amp;quot;a is more than b&amp;quot;); else puts(&amp;quot;a is less or equal than b&amp;quot;); return 0; } 1000 -1&amp;rsquo;den büyük olduğu için çıktının &amp;lsquo;a is büyüktür b&amp;rsquo; olmasını beklersiniz, ancak durum böyle olmayacaktır.</description>
    </item>
    
    <item>
      <title>Teller</title>
      <link>https://www.wikiod.com/tr/c/teller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/teller/</guid>
      <description>C&amp;rsquo;de bir dize içsel bir tür değildir. Bir C-dizesi, bir boş karakterle, bir &amp;ldquo;\0&amp;rdquo; ile sonlandırılan tek boyutlu bir karakter dizisine sahip olma kuralıdır.
Bu, &amp;ldquo;abc&amp;rdquo;&amp;rsquo; içeriğine sahip bir C-string&amp;rsquo;in &amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;c&amp;rdquo; ve &amp;ldquo;\0&amp;rdquo; olmak üzere dört karaktere sahip olacağı anlamına gelir.
dizelere temel giriş örneğine bakın.
1: https://www.wikiod.com/tr/c/teller#Dizelere temel giriş
Sözdizimi # char str1[] = &amp;ldquo;Merhaba dünya!&amp;rdquo;; /* Değiştirilebilir */ char str2[14] = &amp;ldquo;Merhaba dünya!&amp;rdquo;; /* Değiştirilebilir */ char* str3 = &amp;ldquo;Merhaba dünya!</description>
    </item>
    
    <item>
      <title>diziler</title>
      <link>https://www.wikiod.com/tr/c/diziler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/diziler/</guid>
      <description>Diziler, başka bir türden sıralı bir değerler koleksiyonunu (&amp;ldquo;öğeler&amp;rdquo;) temsil eden türetilmiş veri türleridir. C&amp;rsquo;deki çoğu dizi, herhangi bir türden sabit sayıda öğeye sahiptir ve gösterimi, öğeleri boşluk veya dolgu olmadan bitişik olarak bellekte depolar. C, öğeleri başka diziler olan çok boyutlu dizilere ve ayrıca işaretçi dizilerine izin verir.
C, boyutu çalışma zamanında belirlenen dinamik olarak ayrılmış dizileri destekler. C99 ve sonraki sürümleri, değişken uzunluklu dizileri veya VLA&amp;rsquo;ları destekler.
Sözdizimi # isim[uzunluk] yazın; /* Adı &amp;rsquo;name&amp;rsquo; ve uzunluğu &amp;lsquo;uzunluk&amp;rsquo; olan &amp;rsquo;type&amp;rsquo; dizisini tanımlayın.</description>
    </item>
    
    <item>
      <title>operatörler</title>
      <link>https://www.wikiod.com/tr/c/operatorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/operatorler/</guid>
      <description>Bir programlama dilindeki operatör, derleyiciye veya yorumlayıcıya belirli bir matematiksel, ilişkisel veya mantıksal işlemi gerçekleştirmesini ve nihai bir sonuç üretmesini söyleyen bir semboldür.
C&amp;rsquo;nin birçok güçlü operatörü vardır. Birçok C operatörü ikili operatörlerdir, yani iki işlenenleri vardır. Örneğin, &amp;ldquo;a / b&amp;quot;de &amp;ldquo;/&amp;rdquo; iki işleneni (&amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;) kabul eden bir ikili operatördür. Bir işlenen alan bazı tekli operatörler vardır (örneğin: ~, ++), ve yalnızca bir üçlü operatör ? :.
Sözdizimi # ifade1 operatörü operatör ifadesi2 ifade1 operatörü ifade2 ifade1 ?</description>
    </item>
    
    <item>
      <title>iddia</title>
      <link>https://www.wikiod.com/tr/c/iddia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/iddia/</guid>
      <description>Bir iddia, yazılım tarafından iddiayla karşılaşıldığı anda sunulan koşulun doğru olması gerektiğine dair bir yüklemdir. En yaygın olanı, yürütme zamanında doğrulanan basit iddialardır. Ancak, statik iddialar derleme zamanında kontrol edilir.
Sözdizimi # iddia (ifade) static_assert(ifade, mesaj) _Static_assert(ifade, mesaj) Parametreler # parametre Ayrıntılar ifade skaler tip ifadesi. mesaj tanılama mesajına dahil edilecek dize değişmezi. Hem &amp;ldquo;asset&amp;rdquo; hem de &amp;ldquo;static_assert&amp;rdquo;, &amp;ldquo;assert.h&amp;rdquo; içinde tanımlanan makrolardır.
&amp;ldquo;Assert&amp;rdquo; tanımı, standart kitaplık tarafından tanımlanmayan &amp;ldquo;NDEBUG&amp;rdquo; makrosuna bağlıdır.</description>
    </item>
    
    <item>
      <title>Önişlemci ve Makrolar</title>
      <link>https://www.wikiod.com/tr/c/onislemci-ve-makrolar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/c/onislemci-ve-makrolar/</guid>
      <description>Tüm önişlemci komutları, kare (pound) sembolü &amp;ldquo;#&amp;rdquo; ile başlar. Bir C makrosu, yalnızca &amp;ldquo;#define&amp;rdquo; önişlemci yönergesi kullanılarak tanımlanan bir önişlemci komutudur. Önişleme aşaması sırasında, C önişlemcisi (C derleyicisinin bir parçası), makronun gövdesini adının göründüğü her yerde değiştirir.
Bir derleyici kodda bir makro ile karşılaştığında, basit bir dize değişimi gerçekleştirir, ek bir işlem yapılmaz. Bu nedenle, önişlemci tarafından yapılan değişiklikler C programlarının kapsamına uymaz - örneğin, bir makro tanımı bir blok içinde olmakla sınırlı değildir, bu nedenle bir blok ifadesini sona erdiren bir &amp;ldquo;}&amp;rdquo; tarafından etkilenmez.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/typescript/</link>
    <description>Recent content in TypeScript Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/typescript/typescripti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/typescripti-kullanmaya-baslama/</guid>
      <description>Kurulum ve kurulum # Arka fon # TypeScript, doğrudan JavaScript koduna derlenen JavaScript&amp;rsquo;in yazılı bir üst kümesidir. TypeScript dosyaları genellikle &amp;ldquo;.ts&amp;rdquo; uzantısını kullanır. Birçok IDE, başka bir kurulum gerektirmeden TypeScript&amp;rsquo;i destekler, ancak TypeScript, komut satırından TypeScript Node.JS paketiyle de derlenebilir.
IDE # Görsel stüdyo # &amp;lsquo;Visual Studio 2015&amp;rsquo; TypeScript&amp;rsquo;i içerir. &amp;lsquo;Visual Studio 2013 Güncelleme 2&amp;rsquo; veya üzeri TypeScript&amp;rsquo;i içerir veya önceki sürümler için TypeScript&amp;rsquo;i indirebilirsiniz. Visual Studio Kodu # Visual Studio Code (vscode), TypeScript için bağlamsal otomatik tamamlamanın yanı sıra yeniden düzenleme ve hata ayıklama araçları sağlar.</description>
    </item>
    
    <item>
      <title>Birim Testi</title>
      <link>https://www.wikiod.com/tr/typescript/birim-testi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/birim-testi/</guid>
      <description>kaset # tape minimalist JavaScript test çerçevesidir, TAP-uyumlu işaretlemesi verir.
&amp;rsquo;npm&amp;rsquo; run komutunu kullanarak &amp;rsquo;tape&amp;rsquo; yüklemek için
npm install --save-dev tape @types/tape TypeScript ile &amp;rsquo;tape&amp;rsquo; kullanmak için, bu çalıştırma komutunu yapmak için &amp;rsquo;ts-node&amp;rsquo;u global paket olarak kurmanız gerekir.
npm install -g ts-node Artık ilk testinizi yazmaya hazırsınız.
//math.test.ts import * as test from &amp;quot;tape&amp;quot;; test(&amp;quot;Math test&amp;quot;, (t) =&amp;gt; { t.equal(4, 2 + 2); t.true(5 &amp;gt; 2 + 2); t.end(); }); Test çalıştırma komutunu yürütmek için</description>
    </item>
    
    <item>
      <title>Dış kitaplıkları içe aktarma</title>
      <link>https://www.wikiod.com/tr/typescript/ds-kitaplklar-ice-aktarma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/ds-kitaplklar-ice-aktarma/</guid>
      <description>Sözdizimi # libName&#39;den {bileşeni} içe aktar; // &amp;quot;bileşen&amp;quot; sınıfını içe aktaracak libName&#39;den {bileşeni c} olarak içe aktar; // &amp;quot;bileşen&amp;quot; sınıfını bir &amp;quot;c&amp;quot; nesnesine aktarır &amp;rsquo;libname&amp;rsquo;den bileşeni içe aktar; // libNameden varsayılan dışa aktarmayı içe aktaracak &amp;rsquo;libName&amp;rsquo;den lib olarak içe aktar *; // libName&amp;rsquo;den her şeyi bir &amp;ldquo;lib&amp;rdquo; nesnesine aktaracak` import lib = gerekli(&#39;libName&#39;); // libName&#39;den her şeyi bir &amp;quot;lib&amp;quot; nesnesine aktaracak const lib: any = require(&#39;libName&#39;); // libName&#39;den her şeyi bir &amp;quot;lib&amp;quot; nesnesine aktaracak libName&#39;i içe aktar; // libName modülünü yalnızca yan etkileri için içe aktaracak Görünüşe göre sözdizimi</description>
    </item>
    
    <item>
      <title>tsconfig.json</title>
      <link>https://www.wikiod.com/tr/typescript/tsconfigjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/tsconfigjson/</guid>
      <description>Sözdizimi # JSON dosya biçimini kullanır JavaScript stili yorumları da kabul edebilir Genel Bakış # Bir dizinde bir tsconfig.json dosyasının bulunması, dizinin bir TypeScript projesinin kökü olduğunu gösterir. tsconfig.json dosyası, projeyi derlemek için gereken kök dosyaları ve derleyici seçeneklerini belirtir.
tsconfig.json&amp;rsquo;u kullanma # Girdi dosyaları olmadan tsc&amp;rsquo;yi çağırarak, bu durumda derleyici geçerli dizinden başlayarak ve üst dizin zincirine devam ederek tsconfig.json dosyasını arar. Girdi dosyaları olmadan tsc&amp;rsquo;yi ve bir tsconfig.json dosyasını içeren bir dizinin yolunu belirten &amp;ndash;project (veya sadece -p) komut satırı seçeneğini kullanarak.</description>
    </item>
    
    <item>
      <title>SystemJS ile TypeScript</title>
      <link>https://www.wikiod.com/tr/typescript/systemjs-ile-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/systemjs-ile-typescript/</guid>
      <description>Tarayıcıda SystemJS ile Merhaba Dünya # systemjs ve plugin-typescript&amp;rsquo;i kurun
npm install systemjs npm install plugin-typescript NOT: Bu, henüz piyasaya sürülmemiş typescript 2.0.0 derleyicisini yükleyecektir.
TypeScript 1.8 için eklenti-typescript 4.0.16 kullanmanız gerekir.
merhaba.ts dosyası oluşturun
export function greeter(person: String) { return &#39;Hello, &#39; + person; } merhaba.html dosyası oluşturun
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello World in TypeScript&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;node_modules/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;config.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.addEventListener(&#39;load&#39;, function() { System.import(&#39;./hello.ts&#39;).then(function(hello) { document.body.innerHTML = hello.greeter(&#39;World&#39;); }); }); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; config.</description>
    </item>
    
    <item>
      <title>hata ayıklama</title>
      <link>https://www.wikiod.com/tr/typescript/hata-ayklama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/hata-ayklama/</guid>
      <description>TypeScript&amp;rsquo;i çalıştırmanın ve hata ayıklamanın iki yolu vardır:
JavaScript&amp;rsquo;e aktar, düğümde çalıştır ve TypeScript kaynak dosyalarına geri bağlanmak için eşlemeleri kullan
veya
ts-node kullanarak TypeScript&amp;rsquo;i doğrudan çalıştırın
Bu makalede, Visual Studio Code ve WebStorm kullanımının her iki yolu da açıklanmaktadır. Tüm örnekler, ana dosyanızın index.ts olduğunu varsaymaktadır.
WebStorm&amp;rsquo;da ts-düğümlü TypeScript # Bu komut dosyasını package.json dosyanıza ekleyin:
&amp;quot;start:idea&amp;quot;: &amp;quot;ts-node %NODE_DEBUG_OPTION% --ignore false index.ts&amp;quot;, Komut dosyasına sağ tıklayın ve Create &amp;rsquo;test:idea&amp;rsquo;&amp;hellip; öğesini seçin ve hata ayıklama yapılandırmasını oluşturmak için &amp;lsquo;OK&amp;rsquo; ile onaylayın:</description>
    </item>
    
    <item>
      <title>Sıkı boş kontroller</title>
      <link>https://www.wikiod.com/tr/typescript/sk-bos-kontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/sk-bos-kontroller/</guid>
      <description>Sıkı boş kontroller iş başında # Varsayılan olarak, TypeScript&amp;rsquo;teki tüm türler &amp;ldquo;null&amp;quot;a izin verir:
function getId(x: Element) { return x.id; } getId(null); // TypeScript does not complain, but this is a runtime error. TypeScript 2.0, katı boş denetimler için destek ekler. &amp;ldquo;tsc&amp;quot;yi çalıştırırken &amp;ldquo;&amp;ndash;strictNullChecks&amp;quot;i ayarlarsanız (veya bu bayrağı &amp;ldquo;tsconfig.json&amp;rdquo; dosyanızda ayarlarsanız), o zaman türler artık &amp;ldquo;null&amp;quot;a izin vermez:
function getId(x: Element) { return x.id; } getId(null); // error: Argument of type &#39;null&#39; is not assignable to parameter of type &#39;Element&#39;.</description>
    </item>
    
    <item>
      <title>Bir tür tanımlama dosyası olmadan bir javascript kitaplığı nasıl kullanılır</title>
      <link>https://www.wikiod.com/tr/typescript/bir-tur-tanmlama-dosyas-olmadan-bir-javascript-kitaplg-nasl-kullanlr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/bir-tur-tanmlama-dosyas-olmadan-bir-javascript-kitaplg-nasl-kullanlr/</guid>
      <description>Bazı mevcut JavaScript kitaplıklarında tür tanımlama dosyaları bulunurken, pek çoğu yoktur.
TypeScript, eksik bildirimleri işlemek için birkaç desen sunar.
Herhangi bir varsayılanı dışa aktaran bir modül yapın # Daha karmaşık projeler için veya kademeli olarak bir bağımlılık yazmayı düşündüğünüz durumlarda, bir modül oluşturmak daha temiz olabilir.
Örnek olarak JQuery&amp;rsquo;yi kullanma (kullanılabilir yazıları olmasına rağmen):
// place in jquery.d.ts declare let $: any; export default $; Ardından projenizdeki herhangi bir dosyada bu tanımı şu şekilde içe aktarabilirsiniz:</description>
    </item>
    
    <item>
      <title>sınıflar</title>
      <link>https://www.wikiod.com/tr/typescript/snflar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/snflar/</guid>
      <description>TypeScript, ECMA Script 6 gibi, sınıfları kullanarak nesne yönelimli programlamayı destekler. Bu, yalnızca prototip tabanlı miras zincirini destekleyen eski JavaScript sürümleriyle çelişir.
TypeScript&amp;rsquo;teki sınıf desteği, Java ve C# gibi dillerinkine benzer; bu, sınıflar diğer sınıflardan miras alabilirken nesneler sınıf örnekleri olarak başlatılır.
Yine bu dillere benzer şekilde TypeScript sınıfları, arayüzleri uygulayabilir veya jeneriklerden faydalanabilir.
Soyut Sınıflar # abstract class Machine { constructor(public manufacturer: string) { } // An abstract class can define methods of it&#39;s own, or.</description>
    </item>
    
    <item>
      <title>AngularJS ile TypeScript</title>
      <link>https://www.wikiod.com/tr/typescript/angularjs-ile-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/typescript/angularjs-ile-typescript/</guid>
      <description>Parametreler # İsim Açıklama controllerAs değişkenlerin veya işlevlerin atanabileceği bir takma addır. @see: https://docs.angularjs.org/guide/directive $enjekte Bağımlılık Enjeksiyonu listesi, açısal olarak çözülür ve yapıcı fonksiyonlara argüman olarak iletilir. TypeScript&amp;rsquo;te yönergeyi yaparken, bu dilin özel tip ve oluşturabileceğiniz arayüzlerin gücünü unutmayın. Bu, büyük uygulamalar geliştirirken son derece yararlıdır. Birçok IDE tarafından desteklenen kod tamamlama, birlikte çalıştığınız türe göre olası değeri size gösterecektir, bu nedenle akılda tutulması gereken çok daha az şey vardır (VanillaJS ile karşılaştırıldığında).</description>
    </item>
    
  </channel>
</rss>

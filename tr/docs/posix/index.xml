<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>POSIX Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/posix/</link>
    <description>Recent content in POSIX Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/posix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>POSIX&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/posix/posixi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/posixi-kullanmaya-baslama/</guid>
      <description>POSIX nedir? # POSIX, &amp;ldquo;Taşınabilir İşletim Sistemi Arayüzü&amp;rdquo; anlamına gelir ve farklı bilgi işlem platformları arasında uyumluluk sağlamak için bir dizi standart tanımlar. Standardın güncel sürümü IEEE 1003.1 2016&amp;rsquo;dır ve OpenGroup POSIX spesifikasyonundan erişilebilir. Önceki sürümler arasında POSIX 2004 ve POSIX 1997 bulunur. POSIX 2016 sürümü, esasen POSIX 2008 artı hatadır (bir POSIX 2013 sürümü de vardı).
POSIX, UNIX benzeri işletim sistemleri ve diğerleri için çeşitli araç arabirimlerini, komutları ve API&amp;rsquo;leri tanımlar.</description>
    </item>
    
    <item>
      <title>zamanlayıcılar</title>
      <link>https://www.wikiod.com/tr/posix/zamanlayclar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/zamanlayclar/</guid>
      <description>SIGEV_THREAD bildirimli POSIX Zamanlayıcı # Bu örnek, &amp;ldquo;CLOCK_REALTIME&amp;rdquo; saati ve &amp;ldquo;SIGEV_THREAD&amp;rdquo; bildirim yöntemiyle POSIX Zamanlayıcı kullanımını gösterir.
#include &amp;lt;stdio.h&amp;gt; /* for puts() */ #include &amp;lt;string.h&amp;gt; /* for memset() */ #include &amp;lt;unistd.h&amp;gt; /* for sleep() */ #include &amp;lt;stdlib.h&amp;gt; /* for EXIT_SUCCESS */ #include &amp;lt;signal.h&amp;gt; /* for `struct sigevent` and SIGEV_THREAD */ #include &amp;lt;time.h&amp;gt; /* for timer_create(), `struct itimerspec`, * timer_t and CLOCK_REALTIME */ void thread_handler(union sigval sv) { char *s = sv.</description>
    </item>
    
    <item>
      <title>Soketler</title>
      <link>https://www.wikiod.com/tr/posix/soketler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/soketler/</guid>
      <description>TCP Eşzamanlı Yankı Sunucusu # Bu örnekte, belirtilen bağlantı noktasını dinleyecek ve yeni bağlantıları işleyebilecek basit bir yankı sunucusu oluşturacağız:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;time.h&amp;gt; /** Connection handler - this will be executed in the new process, after forking, and it will read all the data from the socket, while available and to echo it on the local terminal. Params: sd = socket to the client */ #define BUF_SIZE (1024) int echo_client(int sd) { int result = 0; char buf[BUF_SIZE + 1] = {0}; ssize_t n_read; while (0 &amp;lt; (n_read = read(sd, buf, BUF_SIZE))) { buf[n_read] = &#39;\0&#39;; printf(&amp;quot;%s\n&amp;quot;, buf); } if (0 &amp;gt; n_read) { perror(&amp;quot;read() failed&amp;quot;); result = -1; } else { fprintf(stderr, &amp;quot;The other side orderly shut down the connection.</description>
    </item>
    
    <item>
      <title>İş Parçacığı</title>
      <link>https://www.wikiod.com/tr/posix/is-parcacg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/is-parcacg/</guid>
      <description>Basit Mutex Kullanımı # POSIX iş parçacığı kitaplığı, karşılıklı dışlama için kullanılan muteks ilkelinin uygulanmasını sağlar. Mutex, pthread_mutex_init kullanılarak oluşturulur ve pthread_mutex_destroy kullanılarak yok edilir. Bir muteks elde etmek pthread_mutex_lock veya pthread_mutex_trylock kullanılarak yapılabilir, (zaman aşımı istenip istenmediğine bağlı olarak) ve bir muteks serbest bırakılması pthread_mutex_unlock ile yapılır.
Kritik bölüme erişimi seri hale getirmek için bir muteks kullanan basit bir örnek aşağıdadır. İlk olarak, bir muteks kullanmadan örnek. Bu programın, iki iş parçacığı tarafından &amp;lsquo;global_resource&amp;rsquo;a eşitlenmemiş erişim nedeniyle veri yarışı olduğunu unutmayın.</description>
    </item>
    
    <item>
      <title>sinyaller</title>
      <link>https://www.wikiod.com/tr/posix/sinyaller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/sinyaller/</guid>
      <description>Sözdizimi # imzasız alarm (imzasız saniye); int kill(pid_t pid, int sig); Parametreler # Fonksiyon, Parametre(ler), Dönüş Değeri Açıklama alarm() işlev adı imzasız saniye Bir alarmı yükseltmek için saniye veya bekleyen herhangi bir alarmı iptal etmek için 0 &amp;gt;= 0 0 bekleyen başka bir alarm yoksa, bekleyen alarmın hala açık olduğu saniye sayısı. Bu işlev başarısız olmaz. - - öldür() işlev adı pid_t pid . int işareti 0 veya sinyal kimliği 0, -1 Başarı durumunda 0, &amp;ldquo;errno&amp;rdquo;, &amp;ldquo;EINVAL&amp;rdquo;, &amp;ldquo;EPERM&amp;rdquo; veya &amp;ldquo;ESRCH&amp;rdquo; olarak ayarlanmadığında -1 döndürülür.</description>
    </item>
    
    <item>
      <title>süreçler</title>
      <link>https://www.wikiod.com/tr/posix/surecler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/surecler/</guid>
      <description>Sözdizimi # pid_t getpid(boş); pid_t getppid(void); pid_t çatalı(void); pid_t waitpid(pid_t pid, int *wstatus, int seçenekleri); int execv(const char *yol, char *const argv[]); Parametreler # Fonksiyon, Parametre(ler), Dönüş Değeri Açıklama çatal() işlev adı hiçbiri yok PID, 0 veya -1 Çağıran işlem, yeni oluşturulan işlemin PID&amp;rsquo;sini veya başarısızlık durumunda -1&amp;rsquo;i alır. Alt öğe (yeni oluşturulan süreç) 0 alır. Başarısızlık durumunda &amp;rsquo;errno&amp;rsquo;yu &amp;lsquo;EAGAIN&amp;rsquo; veya &amp;lsquo;ENOMEM&amp;rsquo; olarak ayarlayın - - execv() işlev adı const char *yol Yürütülebilir dosyanın adını içeren dize (yolu içerebilir) char *const argv[] Bağımsız değişken olarak dize işaretçisi dizisi Başarısızlık durumunda -1 döndürür Başarı durumunda bu işlev geri dönmez.</description>
    </item>
    
    <item>
      <title>borular</title>
      <link>https://www.wikiod.com/tr/posix/borular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/borular/</guid>
      <description>Borular, tek bir makine kapsamında tek yönlü süreçler arası veya iş parçacıkları arası iletişim için bir mekanizmadır. Mantıksal olarak, bir boru, birine verilerin yazılabileceği ve diğerinden bu verilerin daha sonra okunabileceği iki bağlantılı terminalden oluşur; yazma ve okumaların eşzamanlı olması gerekmeyen bir veri arabelleği ile. Borular, boruların bir uygulaması olan kabuk boru hatlarından ayırt edilmelidir.
Temel oluşturma ve kullanım # Anonim borular veya basitçe borular, biri okuma terminali ve diğeri yazma terminali için olmak üzere bir çift dosya tanımlayıcısı olarak işlemlere maruz kalan çekirdek tarafından yönetilen nesnelerdir.</description>
    </item>
    
    <item>
      <title>Dosya sistemi</title>
      <link>https://www.wikiod.com/tr/posix/dosya-sistemi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/dosya-sistemi/</guid>
      <description>Dosyaları yinelemeli olarak kaldırın (nftw, iş parçacığı için güvenli değil) # #define _XOPEN_SOURCE 500 #include &amp;lt;stdlib.h&amp;gt; /* for exit() */ #include &amp;lt;stdio.h&amp;gt; /* for remove() */ #include &amp;lt;ftw.h&amp;gt; /* for nftw() */ int unlink_cb( const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf) { return remove(fpath); } int rm_rf(const char *path) { return nftw(path, unlink_cb, 64 /* number of simultaneously opened fds, up to OPEN_MAX */, FTW_DEPTH | FTW_PHYS); } &amp;lsquo;FTW_PHYS&amp;rsquo; bayrağı, sembolik bağları takip etme anlamına gelir</description>
    </item>
    
    <item>
      <title>Dosya kilitleri</title>
      <link>https://www.wikiod.com/tr/posix/dosya-kilitleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/dosya-kilitleri/</guid>
      <description>Sözdizimi # int fcntl(int fd, int cmd, yapı sürüsü*); int kilit(int fd, int cmd, off_t len); POSIX kayıt kilitleri (fcntl) # Bu örnek, fcntl işlevi (POSIX temel standardı) tarafından sağlanan POSIX kayıt kilitlerinin (a.k.a. işlemle ilişkili kilitler) kullanımını gösterir.
Notlar:
Özel ve paylaşılan kilitler desteklenir. Bir bayt aralığına uygulanabilir, isteğe bağlı olarak gelecekte veri eklendiğinde otomatik olarak genişler (struct flock tarafından kontrol edilir). Kilitler, dosya için herhangi bir dosya tanımlayıcısının kilitleme işlemi ile ilk kapanışta veya işlem sona erdiğinde serbest bırakılır.</description>
    </item>
    
    <item>
      <title>GirişÇıkış çoğullama</title>
      <link>https://www.wikiod.com/tr/posix/giriscks-cogullama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/posix/giriscks-cogullama/</guid>
      <description>IO, bloke eden/engellemeyen ve senkron/asenkron olabilir. POSIX API, eşzamanlı engelleme API&amp;rsquo;si (örn. klasik okuma, yazma, gönderme, geri alma çağrıları), eşzamanlı engellemesiz API (aynı işlevler, &amp;lsquo;O_NONBLOCK&amp;rsquo; işaretiyle açılan dosya tanımlayıcıları ve IO-çoğullama çağrıları) ve eşzamansız API (&amp;lsquo;ile başlayan işlevler) sağlar. aio_`).
Senkronize API genellikle &amp;ldquo;fd başına bir iş parçacığı/işlem&amp;rdquo; stiliyle kullanılır. Bu, kaynaklar için korkunç. Engellemeyen API, bir dizi fds ile tek bir iş parçacığında çalışmasına izin verir.
Anket # Bu örnekte bir çift bağlı soket oluşturuyoruz ve birinden diğerine 4 dize gönderiyoruz ve alınan dizeleri konsola yazdırıyoruz.</description>
    </item>
    
  </channel>
</rss>

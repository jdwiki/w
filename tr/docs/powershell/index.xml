<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/powershell/</link>
    <description>Recent content in PowerShell Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/powershell/powershelli-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/powershelli-kullanmaya-baslama/</guid>
      <description>Makinenizde depolanan komut dosyalarının imzasız çalışmasına izin verin # Güvenlik nedeniyle, PowerShell varsayılan olarak yalnızca imzalı komut dosyalarının yürütülmesine izin verecek şekilde ayarlanmıştır. Aşağıdaki komutu yürütmek, imzasız komut dosyalarını çalıştırmanıza izin verecektir (bunu yapmak için PowerShell&amp;rsquo;i Yönetici olarak çalıştırmalısınız).
Set-ExecutionPolicy RemoteSigned PowerShell betiklerini çalıştırmanın başka bir yolu, &amp;ldquo;Bypass&amp;quot;ı &amp;ldquo;ExecutionPolicy&amp;rdquo; olarak kullanmaktır:
powershell.exe -ExecutionPolicy Bypass -File &amp;quot;c:\MyScript.ps1&amp;quot; Veya mevcut PowerShell konsolunuzdan veya ISE oturumunuzdan aşağıdakileri çalıştırarak:
Set-ExecutionPolicy Bypass Process Yürütme ilkesi için geçici bir çözüm, Powershell yürütülebilir dosyasını çalıştırarak ve geçerli herhangi bir ilkeyi &amp;ldquo;-ExecutionPolicy&amp;rdquo; parametresi olarak ileterek de elde edilebilir.</description>
    </item>
    
    <item>
      <title>ifadeyi değiştir</title>
      <link>https://www.wikiod.com/tr/powershell/ifadeyi-degistir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/ifadeyi-degistir/</guid>
      <description>Switch ifadesi, bir değişkenin bir değerler listesine göre eşitlik açısından test edilmesini sağlar. Her değer bir durum olarak adlandırılır ve açılan değişken her bir anahtar durumu için kontrol edilir. Bir dizi seçenek arasından seçim yapabileceğiniz, ancak uzun bir if ifadesi dizisi yazmanıza gerek kalmadan bir komut dosyası yazmanıza olanak tanır.
Bu konu, komut dosyasının akışını dallandırmak için kullanılan switch deyimini belgeliyor. Boolean bayrakları olarak işlevlerde kullanılan switch parametreleri ile karıştırmayın.</description>
    </item>
    
    <item>
      <title>URL KodlamaKod Çözme</title>
      <link>https://www.wikiod.com/tr/powershell/url-kodlamakod-cozme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/url-kodlamakod-cozme/</guid>
      <description>URL kodunu çöz örneklerinde kullanılan normal ifade, RFC 2396, Ek B: Bir URI Referansını Normal İfadeyle Ayrıştırma; gelecek nesiller için, işte bir alıntı:
Aşağıdaki satır, bir URI&amp;rsquo;yi parçalamak için kullanılan normal ifadedir. bileşenlerine referans.
^(([^:/?#]+):)?(//([^/?#]))?([^?#])(?([^#]))? (#(.))? 12 3 4 5 6 7 8 9
Yukarıdaki ikinci satırdaki sayılar yalnızca okunabilirliği kolaylaştırmak içindir; her bir alt ifade için referans noktalarını belirtirler (yani, her biri eşleştirilmiş parantez). Alt ifade için eşleşen değere atıfta bulunuyoruz $ olarak.</description>
    </item>
    
    <item>
      <title>döngüler</title>
      <link>https://www.wikiod.com/tr/powershell/donguler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/donguler/</guid>
      <description>Döngü, belirli bir koşula ulaşılana kadar sürekli olarak tekrarlanan bir talimat(lar) dizisidir. Programınızın bir kod bloğunu tekrar tekrar yürütmesini sağlamak, programlamadaki en temel ancak faydalı görevlerden biridir. Bir döngü, yalnızca tekrar ederek önemli ölçüde daha büyük bir sonuç üretmek için çok basit bir ifade yazmanıza izin verir. Eğer koşula ulaşılırsa, bir sonraki talimat sonraki sıralı talimata &amp;ldquo;düşer&amp;rdquo; veya döngünün dışında dallanır.
Sözdizimi # için ( &amp;lt;Başlatma&amp;gt;; &amp;lt;Koşul&amp;gt;; &amp;lt;Tekrar&amp;gt; ) { &amp;lt;Script_Block&amp;gt; }</description>
    </item>
    
    <item>
      <title>XML Dosyalarıyla Çalışmak</title>
      <link>https://www.wikiod.com/tr/powershell/xml-dosyalaryla-calsmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/xml-dosyalaryla-calsmak/</guid>
      <description>Bir XML Dosyasına Erişme # &amp;lt;!-- file.xml --&amp;gt; &amp;lt;people&amp;gt; &amp;lt;person id=&amp;quot;101&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Jon Lajoie&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;22&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;102&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Lord Gaben&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;65&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;103&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Gordon Freeman&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;29&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;/people&amp;gt; XML Dosyası Yükleme
Bir XML dosyası yüklemek için bunlardan herhangi birini kullanabilirsiniz:
# First Method $xdoc = New-Object System.Xml.XmlDocument $file = Resolve-Path(&amp;quot;.\file.xml&amp;quot;) $xdoc.load($file) # Second Method [xml] $xdoc = Get-Content &amp;quot;.\file.xml&amp;quot; # Third Method $xdoc = [xml] (Get-Content &amp;quot;.\file.xml&amp;quot;) XML&amp;rsquo;ye Nesne Olarak Erişme</description>
    </item>
    
    <item>
      <title>ShouldProcess&#39;i Kullanma</title>
      <link>https://www.wikiod.com/tr/powershell/shouldprocessi-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/shouldprocessi-kullanma/</guid>
      <description>Sözdizimi # $PSCmdlet.ShouldProcess(&amp;ldquo;Hedef&amp;rdquo;) $PSCmdlet.ShouldProcess(&amp;ldquo;Hedef&amp;rdquo;, &amp;ldquo;Eylem&amp;rdquo;) Parametreler # parametre Ayrıntılar Hedef Kaynak değiştiriliyor. Eylem Gerçekleştirilen işlem. Varsayılan olarak cmdlet&amp;rsquo;in adıdır. $PSCmdlet.ShouldProcess() ayrıca ayrıntılı çıktıya otomatik olarak bir mesaj yazacaktır.
PS&amp;gt; Invoke-MyCmdlet -Verbose VERBOSE: Performing the operation &amp;quot;Invoke-MyCmdlet&amp;quot; on target &amp;quot;Target of action&amp;quot; Tam Kullanım Örneği # Diğer örnekler bana koşullu mantığın nasıl tetikleneceğini net bir şekilde açıklayamadı.
Bu örnek ayrıca, temel alınan komutların -Onayla bayrağını da dinleyeceğini gösterir!
&amp;lt;# Restart-Win32Computer #&amp;gt; function Restart-Win32Computer { [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact=&amp;quot;High&amp;quot;)] param ( [parameter(Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)] [string[]]$computerName, [parameter(Mandatory=$true)] [string][ValidateSet(&amp;quot;Restart&amp;quot;,&amp;quot;LogOff&amp;quot;,&amp;quot;Shutdown&amp;quot;,&amp;quot;PowerOff&amp;quot;)] $action, [boolean]$force = $false ) BEGIN { # translate action to numeric value required by the method switch($action) { &amp;quot;Restart&amp;quot; { $_action = 2 break } &amp;quot;LogOff&amp;quot; { $_action = 0 break } &amp;quot;Shutdown&amp;quot; { $_action = 2 break } &amp;quot;PowerOff&amp;quot; { $_action = 8 break } } # to force, add 4 to the value if($force) { $_action += 4 } write-verbose &amp;quot;Action set to $action&amp;quot; } PROCESS { write-verbose &amp;quot;Attempting to connect to $computername&amp;quot; # this is how we support -whatif and -confirm # which are enabled by the SupportsShouldProcess # parameter in the cmdlet bindnig if($pscmdlet.</description>
    </item>
    
    <item>
      <title>PowerShell İşlevleri</title>
      <link>https://www.wikiod.com/tr/powershell/powershell-islevleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/powershell-islevleri/</guid>
      <description>Bir işlev temelde adlandırılmış bir kod bloğudur. İşlev adını çağırdığınızda, o işlev içindeki komut dosyası bloğu çalışır. Atadığınız bir ada sahip PowerShell deyimlerinin bir listesidir. Bir işlevi çalıştırdığınızda, işlevin adını yazarsınız. Bu, tekrarlayan görevlerle uğraşırken zaman kazanma yöntemidir. PowerShell biçimleri üç bölümden oluşur: &amp;lsquo;Function&amp;rsquo; anahtar sözcüğü, ardından bir Ad, son olarak, küme/parantez stili ayracı içine alınmış komut dosyası bloğunu içeren yük.
Temel parametreler # Param bloğu kullanılarak parametrelerle bir fonksiyon tanımlanabilir:</description>
    </item>
    
    <item>
      <title>PowerShell ile TCP İletişimi</title>
      <link>https://www.wikiod.com/tr/powershell/powershell-ile-tcp-iletisimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/powershell-ile-tcp-iletisimi/</guid>
      <description>TCP dinleyicisi # Function Receive-TCPMessage { Param ( [Parameter(Mandatory=$true, Position=0)] [ValidateNotNullOrEmpty()] [int] $Port ) Process { Try { # Set up endpoint and start listening $endpoint = new-object System.Net.IPEndPoint([ipaddress]::any,$port) $listener = new-object System.Net.Sockets.TcpListener $EndPoint $listener.start() # Wait for an incoming connection $data = $listener.AcceptTcpClient() # Stream setup $stream = $data.GetStream() $bytes = New-Object System.Byte[] 1024 # Read data from stream and write it to host while (($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){ $EncodedText = New-Object System.</description>
    </item>
    
    <item>
      <title>Sırları ve Kimlik Bilgilerini Kullanma</title>
      <link>https://www.wikiod.com/tr/powershell/srlar-ve-kimlik-bilgilerini-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/srlar-ve-kimlik-bilgilerini-kullanma/</guid>
      <description>Powershell&amp;rsquo;de, parolayı açık metin biçiminde saklamaktan kaçınmak için farklı şifreleme yöntemleri kullanır ve parolayı güvenli dize olarak saklarız. Bir anahtar veya güvenli anahtar belirtmediğinizde, bu yalnızca aynı bilgisayardaki aynı kullanıcı için çalışır, Anahtarlar/Güvenli Anahtarlar kullanmıyorsanız şifreli dizenin şifresini çözebilir. Aynı kullanıcı hesabı altında çalışan herhangi bir işlem, aynı makinede bu şifreli dizenin şifresini çözebilir.
Düz Metin Parolasına Erişim # Bir kimlik bilgisi nesnesindeki parola, şifrelenmiş bir &amp;ldquo;[SecureString]&amp;ldquo;dir. En basit yol, şifrelenmiş parolayı saklamayan bir &amp;ldquo;[NetworkCredential]&amp;rdquo; elde etmektir:</description>
    </item>
    
    <item>
      <title>PowerShell.exe Komut Satırı</title>
      <link>https://www.wikiod.com/tr/powershell/powershellexe-komut-satr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/powershell/powershellexe-komut-satr/</guid>
      <description>Parametreler # Parametre Açıklama -Yardım | -? | /? Yardımı gösterir -Dosya &amp;lt;DosyaYolu&amp;gt; [&amp;lt;Args&amp;gt;] Yürütülmesi gereken komut dosyası yolu ve bağımsız değişkenler (isteğe bağlı) -Komut { - | &amp;lt;script-block&amp;gt; [-args &amp;lt;arg-dizi&amp;gt;] | &amp;lt;string&amp;gt; [&amp;lt;CommandParameters&amp;gt;] } Argümanlar tarafından takip edilecek komutlar -EncodedCommand &amp;lt;Base64EncodedCommand&amp;gt; Base64 ile kodlanmış komutlar -ExecutionPolicy &amp;lt;ExecutionPolicy&amp;gt; Yalnızca bu işlem için yürütme politikasını ayarlar -InputFormat { Metin | XML} İşleme gönderilen veriler için giriş biçimini ayarlar. Metin (dizeler) veya XML (serileştirilmiş CLIXML) -Mta PowerShell 3.</description>
    </item>
    
  </channel>
</rss>

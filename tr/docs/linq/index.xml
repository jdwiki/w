<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linq Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/linq/</link>
    <description>Recent content in linq Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/linq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linq&#39;e başlarken</title>
      <link>https://www.wikiod.com/tr/linq/linqe-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/linq/linqe-baslarken/</guid>
      <description>Kurmak # LINQ, .NET 3.5 veya sonraki bir sürümünü (veya LINQBridge kullanan .NET 2.0) gerektirir.
Henüz eklenmemişse System.Core&amp;lsquo;a bir başvuru ekleyin.
Dosyanın en üstünde ad alanını içe aktarın:
C# using System; using System.Linq; VB.NET Imports System.Linq LINQ&amp;rsquo;daki farklı birleşimler # Aşağıdaki örneklerde, aşağıdaki örnekleri kullanacağız:
List&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;() { new Product() { ProductId = 1, Name = &amp;quot;Book nr 1&amp;quot;, Price = 25 }, new Product() { ProductId = 2, Name = &amp;quot;Book nr 2&amp;quot;, Price = 15 }, new Product() { ProductId = 3, Name = &amp;quot;Book nr 3&amp;quot;, Price = 20 }, }; List&amp;lt;Order&amp;gt; Orders = new List&amp;lt;Order&amp;gt;() { new Order() { OrderId = 1, ProductId = 1, }, new Order() { OrderId = 2, ProductId = 1, }, new Order() { OrderId = 3, ProductId = 2, }, new Order() { OrderId = 4, ProductId = NULL, }, }; İÇ BİRLEŞİM Sorgu Sözdizimi</description>
    </item>
    
    <item>
      <title>Standart Sorgu Operatörleri</title>
      <link>https://www.wikiod.com/tr/linq/standart-sorgu-operatorleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/linq/standart-sorgu-operatorleri/</guid>
      <description>Linq sorguları, Standart Sorgu Operatörleri (esas olarak &amp;lsquo;IEnumerable&amp;rsquo; ve &amp;lsquo;IQueryable&amp;rsquo; türündeki nesneler üzerinde çalışan bir dizi uzatma yöntemidir) veya Sorgu İfadeleri kullanılarak yazılır. 2] (derleme zamanında Standart Sorgu Operatörü yöntem çağrılarına dönüştürülür).
Sorgu operatörleri, filtreleme, projeksiyon, toplama, sıralama ve daha fazlasını içeren sorgu yetenekleri sağlar.
Toplama İşlemleri # Toplama işlemleri, bir değerler koleksiyonundan tek bir değer hesaplar.
Toplu
Bir koleksiyonun değerleri üzerinde özel bir toplama işlemi gerçekleştirir.
Yöntem Sözdizimi
// Aggregate var numbers = new int[] { 1, 2, 3, 4, 5 }; var product = numbers.</description>
    </item>
    
    <item>
      <title>Yöntem yürütme modları - anında, ertelenmiş akış, ertelenmiş akış olmayan</title>
      <link>https://www.wikiod.com/tr/linq/yontem-yurutme-modlar---annda-ertelenmis-aks-ertelenmis-aks-olmayan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/linq/yontem-yurutme-modlar---annda-ertelenmis-aks-ertelenmis-aks-olmayan/</guid>
      <description>Ertelenmiş yürütme vs anında yürütme # Bazı LINQ yöntemleri bir sorgu nesnesi döndürür. Bu nesne, sorgunun sonuçlarını tutmaz; bunun yerine, bu sonuçları oluşturmak için gereken tüm bilgilere sahiptir:
var list = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5}; var query = list.Select(x =&amp;gt; { Console.Write($&amp;quot;{x} &amp;quot;); return x; }); Sorgu, &amp;lsquo;Console.Write&amp;rsquo; çağrısı içeriyor, ancak konsola hiçbir şey gönderilmedi. Bunun nedeni, sorgunun henüz yürütülmemiş olması ve bu nedenle &amp;lsquo;Seç&amp;rsquo;e aktarılan işlevin hiç değerlendirilmemiş olmasıdır.</description>
    </item>
    
    <item>
      <title>Linq Take while ve Skip while Kullanarak</title>
      <link>https://www.wikiod.com/tr/linq/linq-take-while-ve-skip-while-kullanarak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/linq/linq-take-while-ve-skip-while-kullanarak/</guid>
      <description>Take, Skip, TakeWhile ve SkipWhile, belirli bir koşul tarafından belirlenen bir giriş dizisinin bir bölümünü aldıkları için Bölümleme Operatörleri olarak adlandırılır. Bu operatörleri tartışalım
Yöntemi al # Take Yöntemi Bir dizideki ilk öğeden başlayarak öğeleri belirtilen bir konuma kadar alır. Alın İmzası:
Public static IEnumerable&amp;lt;TSource&amp;gt; Take&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source,int count); Örnek:
int[] numbers = { 1, 5, 8, 4, 9, 3, 6, 7, 2, 0 }; var TakeFirstFiveElement = numbers.Take(5); Çıktı:</description>
    </item>
    
  </channel>
</rss>

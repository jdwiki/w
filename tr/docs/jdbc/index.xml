<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdbc Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/jdbc/</link>
    <description>Recent content in jdbc Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jdbc&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/jdbc/jdbcye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/jdbcye-baslarken/</guid>
      <description>Bağlantı oluşturma # JDBC&amp;rsquo;yi kullanabilmek için, uygulamanızın sınıf yolunda veritabanınızın JDBC sürücüsünün olması gerekir.
Bir veritabanına bağlanmanın birden çok yolu vardır, ancak yaygın yollar ya java.sql.DriverManager kullanmak ya da javax.sql.DataSource veritabanına özel bir uygulamasını yapılandırmak ve kullanmaktır. .
jdbc:somedb://localhost/foobar url&amp;rsquo;si ile bir veritabanına bağlantı oluşturmak ve tüm çalışanlara %5 zam vermek için bir güncelleme ifadesi yürütmek için basit bir örnek:
try (Connection connection = DriverManager.getConnection( &amp;quot;jdbc:somedb://localhost/foobar&amp;quot;, &amp;quot;anna&amp;quot;, &amp;quot;supersecretpassword&amp;quot;); Statement updateStatement = connection.</description>
    </item>
    
    <item>
      <title>Veritabanı bağlantısı oluşturma</title>
      <link>https://www.wikiod.com/tr/jdbc/veritaban-baglants-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/veritaban-baglants-olusturma/</guid>
      <description>Sözdizimi # DB_URL = &amp;ldquo;jdbc:DBMS://DB_HOST:DB_PORT/DB_NAME&amp;rdquo;
DBMS: Veri Tabanı Sürücü Yöneticisi, bu herhangi bir DBMS olabilir (mysql, oracle, postgresql, sqlite, &amp;hellip;), mysql örneği: &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo;
DB_HOST: veritabanı ana sunucunuz, veritabanı örneğinizin IP adresi: 10.6.0.1, varsayılan değer localhost veya 127.0.0.1&amp;rsquo;dir.
DB_PORT: Veritabanı bağlantı noktası, her DBMS&amp;rsquo;nin bir varsayılan bağlantı noktası örneği vardır mysql=3306, postegesql=5432
DB_NAME: Veritabanınızın adı
Bağlanmak için sınıf nesnesine bir referans almalısınız,
Class.forName(SÜRÜCÜ);
Ve veritabanına bağlanmak için bir bağlantı oluşturmanız gerekir.</description>
    </item>
    
    <item>
      <title>Hazır Beyanı</title>
      <link>https://www.wikiod.com/tr/jdbc/hazr-beyan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/hazr-beyan/</guid>
      <description>Bir &amp;lsquo;PreparedStatement&amp;rsquo;, yürütülmeden önce ifadeyi bildirir ve parametreler için yer tutuculara izin verir. Bu, ifadenin sunucuda bir kez hazırlanmasına (ve optimize edilmesine) ve ardından farklı parametre setleriyle yeniden kullanılmasına olanak tanır.
Parametre yer tutucularının ek yararı, SQL enjeksiyonuna karşı koruma sağlamasıdır. Bu, ya parametre değerleri ayrı ayrı gönderilerek ya da sürücü gerektiğinde değerleri doğru şekilde çıkardığı için elde edilir.
Hazırlanmış bir ifadenin temel kullanımı # Bu örnek, parametreler içeren bir insert deyimi ile hazırlanmış bir deyimin nasıl oluşturulacağını, bu parametrelere değerlerin nasıl ayarlanacağını ve ardından deyimin nasıl yürütüleceğini gösterir.</description>
    </item>
    
    <item>
      <title>Ekstre toplulaştırma</title>
      <link>https://www.wikiod.com/tr/jdbc/ekstre-toplulastrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/ekstre-toplulastrma/</guid>
      <description>Deyim gruplandırması, ya birden çok deyimi tek bir birim olarak (normal bir &amp;ldquo;java.sql.Statement&amp;rdquo; ile) ya da birden çok parametre değerine sahip tek bir ifadeyi (&amp;ldquo;java.sql.PreparedStatement&amp;rdquo; ile) yürütür.
Deyim toplulaştırma, bir programın ilgili ifadeyi toplamasına veya hazırlanmış ifadeler durumunda parametre değer setleriyle ilgili olarak toplamasına ve bunları tek bir yürütme olarak veritabanı sunucusuna göndermesine izin verir.
Ekstre gruplamanın faydaları, geliştirilmiş performansı içerebilir. Bu performans avantajlarının elde edilip edilmeyeceği ve nasıl sağlanacağı sürücü ve veritabanı desteğine bağlıdır, ancak bunlar şunları içerir:</description>
    </item>
    
    <item>
      <title>Sonuç kümesi</title>
      <link>https://www.wikiod.com/tr/jdbc/sonuc-kumesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/sonuc-kumesi/</guid>
      <description>Bir ResultSet nesnesi, geçerli veri satırını gösteren bir imleç tutar. Başlangıçta imleç ilk satırın önüne yerleştirilir. Sonraki yöntem, imleci bir sonraki satıra taşır ve ResultSet nesnesinde daha fazla satır olmadığında false döndürdüğünden, sonucu yinelemek için bir while döngüsünde kullanılabilir.
Sonuç kümesi # Bir &amp;ldquo;ResultSet&amp;rdquo; oluşturmak için bir &amp;ldquo;Statement&amp;rdquo; veya &amp;ldquo;PrepapredStatement&amp;rdquo; oluşturmalısınız:
Statement ile ResultSet Oluşturun # try { Class.forName(driver); Connection connection = DriverManager.getConnection( &amp;quot;jdbc:somedb://localhost/databasename&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;); Statement statement = connection.createStatement(); ResultSet result = statement.</description>
    </item>
    
    <item>
      <title>JDBC - İfade Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/jdbc/jdbc---ifade-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/jdbc---ifade-enjeksiyonu/</guid>
      <description>SQL enjeksiyonu, veriye dayalı uygulamalara saldırmak için kullanılan bir kod enjeksiyon tekniğidir; bu teknikte, yürütülmek üzere (örneğin, veritabanı içeriğini saldırgana dökmek için) bir giriş alanına kötü SQL ifadelerinin eklendiği yer.
Bu bölümde bundan ve JDBC Beyanı ile olan ilişkisinden bahsedeceğiz.
İfade ve SQL Enjeksiyon kötülük # Not bu örnekte PostgreSQL DBMS kullanacağız, ancak herhangi bir DBMS kullanabilirsiniz.
Bir &amp;lsquo;bd_test&amp;rsquo; veritabanını kullanacağız, cadı bir &amp;lsquo;Schema: sch_test&amp;rsquo; ve iki tablo &amp;lsquo;users&amp;rsquo; ve &amp;rsquo;test&amp;rsquo; içerir:</description>
    </item>
    
    <item>
      <title>Sonuç KümesiMetaVerileri</title>
      <link>https://www.wikiod.com/tr/jdbc/sonuc-kumesimetaverileri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jdbc/sonuc-kumesimetaverileri/</guid>
      <description>Hepimizin bildiği gibi Meta veriler, veriler hakkındaki veriler anlamına gelir.
Toplam sütun sayısı, sütun adı, sütun türü vb. gibi bir tablonun meta verilerini almak için, ResultSetMetaData arabirimi, ResultSet nesnesinden meta veri almak için yöntemler sağladığından kullanışlıdır.
Sonuç KümesiMetaVeri # import java.sql.*; class Rsmd { public static void main(String args[]) { try { Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;); Connection con = DriverManager.getConnection( &amp;quot;jdbc:oracle:thin:@localhost:1521:xe&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;oracle&amp;quot;); PreparedStatement ps = con.prepareStatement(&amp;quot;select * from emp&amp;quot;); ResultSet rs = ps.</description>
    </item>
    
  </channel>
</rss>

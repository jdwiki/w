<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zaman uyumsuz bekleyen Eğitim on </title>
    <link>https://www.wikiod.com/tr/docs/async-await/</link>
    <description>Recent content in zaman uyumsuz bekleyen Eğitim on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/async-await/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>async-await&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/async-await/async-awaiti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/async-await/async-awaiti-kullanmaya-baslama/</guid>
      <description>zaman uyumsuz geçersiz # Eşzamansız bir yöntemin dönüş türü olarak &amp;ldquo;void&amp;rdquo; (&amp;ldquo;Görev&amp;rdquo; yerine) kullanabilirsiniz. Bu, bir &amp;ldquo;ateşle ve unut&amp;rdquo; eylemiyle sonuçlanacaktır:
public void DoStuff() { FireAndForgetAsync(); } private async void FireAndForgetAsync() { await Task.Delay(1000); throw new Exception(); //will be swallowed } &amp;lsquo;void&amp;rsquo; döndürürken, &amp;lsquo;FireAndForgetAsync&amp;rsquo;i &amp;lsquo;bekleyemezsiniz&amp;rsquo;. Yöntemin ne zaman biteceğini bilemezsiniz ve &amp;lsquo;async void&amp;rsquo; yönteminde ortaya çıkan istisnalar yutulur.
basit kullanım # &amp;ldquo;async-await&amp;rdquo; kullanmak için üç şeye ihtiyaç vardır:
Görev nesnesi: Bu nesne, eşzamansız olarak yürütülen bir yöntem tarafından döndürülür.</description>
    </item>
    
    <item>
      <title>En iyi uygulamalar</title>
      <link>https://www.wikiod.com/tr/async-await/en-iyi-uygulamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/async-await/en-iyi-uygulamalar/</guid>
      <description>Eşzamansız boşluktan kaçının # &amp;ldquo;async void&amp;quot;i güvenle kullanabileceğiniz tek yer olay işleyicileridir. Aşağıdaki kodu göz önünde bulundurun:
private async Task&amp;lt;bool&amp;gt; SomeFuncAsync() { ... await ... } public void button1_Click(object sender, EventArgs e) { var result = SomeFuncAsync().Result; SomeOtherFunc(); } &amp;ldquo;async&amp;rdquo; çağrısı tamamlandığında, &amp;ldquo;SynchronizationContext&amp;quot;in kullanılabilir hale gelmesini bekler. Ancak olay işleyici, &amp;lsquo;SomeFuncAsync&amp;rsquo; yönteminin tamamlanmasını beklerken &amp;lsquo;SynchronizationContext&amp;rsquo;i tutar; böylece dairesel bir beklemeye (kilitlenmeye) neden olur.
Bunu düzeltmek için olay işleyicisini şu şekilde değiştirmemiz gerekiyor:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bağımlılık enjeksiyon Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/dependency-injection/</link>
    <description>Recent content in bağımlılık enjeksiyon Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bağımlılık enjeksiyonuna başlarken</title>
      <link>https://www.wikiod.com/tr/dependency-injection/bagmllk-enjeksiyonuna-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dependency-injection/bagmllk-enjeksiyonuna-baslarken/</guid>
      <description>Bağımlılık enjeksiyonunun temel bir örneği nedir? # İşte kendi bağımlılığını (Yiyecek) yaratan bir sınıf (Köpek):
class Dog { public Dog() { var food = new Food(); this.eat(food); } } Yapıcı enjeksiyonunu kullanarak bağımlılığı ile enjekte edilen aynı sınıf:
class Dog { public Dog(Food food) { this.eat(food); } } </description>
    </item>
    
    <item>
      <title>.NET - Saf DI örnekleri</title>
      <link>https://www.wikiod.com/tr/dependency-injection/net---saf-di-ornekleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dependency-injection/net---saf-di-ornekleri/</guid>
      <description>Bir kapsayıcı kullanmadan .net&amp;rsquo;te bağımlılık enjeksiyonunun nasıl kullanılacağına bir örnek. Mark Seemann&amp;rsquo;ın örneklerine dayanmaktadır http://blog.ploeh.dk/
Web API&amp;rsquo;si # public interface ISingleton : IDisposable { } public class TransientDependency { } public class Singleton : ISingleton { public void Dispose() { } } public class CompositionRoot : IDisposable, IHttpControllerActivator { private readonly ISingleton _singleton; // pass in any true singletons i.e. cross application instance singletons public CompositionRoot() { // intitialise any application instance singletons _singleton = new Singleton(); } public void Dispose() { _singleton.</description>
    </item>
    
    <item>
      <title>Yapıcı Enjeksiyon</title>
      <link>https://www.wikiod.com/tr/dependency-injection/yapc-enjeksiyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dependency-injection/yapc-enjeksiyon/</guid>
      <description>Yapıcı Enjeksiyonu # Sınıfların, metotları çağırdıkları örnek değişkenleri (bağımlılıklar) vardır.
Referans için http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html adresinden alınan örnek
public class Example { private DatabaseThingie myDatabase; public Example() { myDatabase = new DatabaseThingie(); } public void DoStuff() { ... myDatabase.GetData(); ... } } Bu sınıfın DatabaseThingie adında bir bağımlılığı vardır. İşte bu örnekte sınıf Örnek kendi bağımlılıklarını oluşturmaktan sorumludur, bu nedenle Tek Sorumluluk İlkesi&amp;rsquo;ni ihlal eder. Sınıfın bazı birincil sorumlulukları vardır + kazanılmış bağımlılıklarını yaratıyor.</description>
    </item>
    
    <item>
      <title>Yöntem enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/dependency-injection/yontem-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dependency-injection/yontem-enjeksiyonu/</guid>
      <description>c#&amp;rsquo;ta Basit Bir Yöntem Enjeksiyonu Örneği # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new Dependency(); var bar = new ClassWithDependency(); bar.DoSomething(foo); //Inject dependency as method parameter Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class Dependency: IDependency { public void DoSomething() { Console.WriteLine(&amp;quot;Hello&amp;quot;); } } public class ClassWithDependency { public void DoSomething(IDependency dependency) { dependency.DoSomething(); } } } </description>
    </item>
    
    <item>
      <title>Özellik Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/dependency-injection/ozellik-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dependency-injection/ozellik-enjeksiyonu/</guid>
      <description>Tembel Yüklü Yerel Varsayılanlı C# ile Çok Basit Bir Özellik Enjeksiyonu Örneği # using System; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var foo = new ClassWithDependency(); foo.DoSomething(); var bar = new InjectedDependency(); foo.Dependency = bar; //Injecting the dependency via a property foo.DoSomething(); Console.ReadLine(); } } public interface IDependency { void DoSomething(); } public class DefaultDependency: IDependency { public void DoSomething() { Console.WriteLine(&amp;quot;Default behaviour&amp;quot;); } } public class InjectedDependency: IDependency { public void DoSomething() { Console.</description>
    </item>
    
  </channel>
</rss>

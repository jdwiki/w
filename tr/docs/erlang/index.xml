<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang Dil Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/erlang/</link>
    <description>Recent content in Erlang Dil Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Erlang Dilini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/erlang/erlang-dilini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/erlang-dilini-kullanmaya-baslama/</guid>
      <description>Selam Dünya # Erlang&amp;rsquo;da bir &amp;ldquo;merhaba dünya&amp;rdquo; uygulaması yazarken bilmeniz gereken iki şey var:
Kaynak kodu erlang programlama dilinde, seçtiğiniz metin editörü kullanılarak yazılır. Uygulama daha sonra erlang sanal makinesinde yürütülür. Bu örnekte, erlang kabuğu aracılığıyla erlang VM ile etkileşime gireceğiz. İlk önce uygulama kaynak kodu: # Aşağıdakileri içeren yeni bir &amp;ldquo;hello.erl&amp;rdquo; dosyası oluşturun:
-module(hello). -export([hello_world/0]). hello_world() -&amp;gt; io:format(&amp;quot;Hello, World!~n&amp;quot;, []). Bunun ne anlama geldiğine kısaca bir göz atalım:
-module(merhaba). Tüm erlang işlevleri bir module içinde bulunur.</description>
    </item>
    
    <item>
      <title>Kurulum</title>
      <link>https://www.wikiod.com/tr/erlang/kurulum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/kurulum/</guid>
      <description>FreeBSD&amp;rsquo;de Erlang/OTP Oluşturun ve Yükleyin # Aşağıdaki örnekler, Erlang/OTP&amp;rsquo;yi FreeBSD&amp;rsquo;ye kurmak için 3 ana yöntemi göstermektedir.
Yöntem 1 - Önceden Oluşturulmuş İkili Paket # Önceden oluşturulmuş ikili paketi kurmak için pkg kullanın:
$ pkg install erlang Yeni kurulumunuzu test edin:
$ erl Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false] Eshell V7.3.1 (abort with ^G) Yöntem 2 - Bağlantı noktası koleksiyonunu kullanarak derleyin ve kurun (önerilir) # Bağlantı noktasını her zamanki gibi oluşturun ve kurun:</description>
    </item>
    
    <item>
      <title>Veri tipleri</title>
      <link>https://www.wikiod.com/tr/erlang/veri-tipleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/veri-tipleri/</guid>
      <description>Erlang&amp;rsquo;daki her veri tipine Terim denir. Herhangi bir veri türü anlamına gelen genel bir addır.
Sayılar # Erlang&amp;rsquo;da sayılar ya tam sayılardır ya da yüzer sayılardır. Erlang, tamsayılar (bignumlar) için keyfi kesinlik kullanır, bu nedenle değerleri yalnızca sisteminizin bellek boyutuyla sınırlıdır.
1&amp;gt; 11. 11 2&amp;gt; -44. -44 3&amp;gt; 0.1. 0.1 4&amp;gt; 5.1e-3. 0.0051 5&amp;gt; 5.2e2. 520.0 Sayılar çeşitli temellerde kullanılabilir:
1&amp;gt; 2#101. 5 2&amp;gt; 16#ffff. 65535 $-prefix gösterimi, herhangi bir ASCII/Unicode karakterinin tamsayı değerini verir:</description>
    </item>
    
    <item>
      <title>inşaat demiri3</title>
      <link>https://www.wikiod.com/tr/erlang/insaat-demiri3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/insaat-demiri3/</guid>
      <description>Rebar3&amp;rsquo;ü Yükleme # Rebar3 Erlang&amp;rsquo;da yazılmıştır, bu nedenle çalıştırmak için Erlang&amp;rsquo;a ihtiyacınız vardır. İndirip çalıştırabileceğiniz bir ikili dosya olarak mevcuttur. Sadece gece derlemesini alın ve yürütme izinlerini verin:
$ wget https://s3.amazonaws.com/rebar3/rebar3 &amp;amp;&amp;amp; chmod +x rebar3 Bu ikili dosyayı uygun bir yere yerleştirin ve yolunuza ekleyin. Örneğin, evinizdeki bir bin dizininde:
$ mkdir ~/bin &amp;amp;&amp;amp; mv rebar3 ~/bin $ export PATH=~/bin:$PATH Bu son satır .bashrc dosyanıza yerleştirilmelidir. Alternatif olarak, ikili dosyayı /usr/local/bin dizinine bağlayarak normal bir komut olarak kullanılabilir hale getirebilirsiniz.</description>
    </item>
    
    <item>
      <title>süreçler</title>
      <link>https://www.wikiod.com/tr/erlang/surecler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/surecler/</guid>
      <description>İşlemler Oluşturma # spawn fonksiyonunu çağırarak yeni bir eşzamanlı süreç yaratıyoruz. &amp;lsquo;spawn&amp;rsquo; işlevi, sürecin değerlendireceği bir &amp;lsquo;Eğlence&amp;rsquo; işlevini parametre olarak alacaktır. &amp;lsquo;spawn&amp;rsquo; işlevinin dönüş değeri, oluşturulan süreç tanımlayıcısıdır (pid).
1&amp;gt; Fun = fun() -&amp;gt; 2+2 end. #Fun&amp;lt;erl_eval.20.52032458&amp;gt; 2&amp;gt; Pid = spawn(Fun). &amp;lt;0.60.0&amp;gt; Bir modülden belirli bir işlevi yürütecek bir işlemi başlatmak için &amp;lsquo;spawn/3&amp;rsquo;ü de kullanabilirsiniz: &amp;lsquo;spawn(Module, Function, Args)&amp;rsquo;. Veya farklı bir düğümde bir işlemi başlatmak için benzer şekilde &amp;lsquo;spawn/2&amp;rsquo; veya &amp;lsquo;spawn/4&amp;rsquo; kullanın: &amp;lsquo;spawn(Node, Fun)&amp;rsquo; veya &amp;lsquo;spawn(Node, Module, Function, Args)&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>davranışlar</title>
      <link>https://www.wikiod.com/tr/erlang/davranslar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/davranslar/</guid>
      <description>Bir davranışı tanımlama # Modülünüze -callback yönergelerini ekleyerek kendi davranışlarınızı tanımlayabilirsiniz. Örneğin, davranışınızı uygulayan modüllerin bir tamsayı alan ve bir atom döndüren bir &amp;ldquo;foo&amp;rdquo; işlevine sahip olması gerekiyorsa:
-module(my_behaviour). -callback foo(integer()) -&amp;gt; atom(). Bu davranışı başka bir modülde kullanırsanız, derleyici foo/1 dışa aktarmazsa uyarı verir ve Dialyzer tipler doğru değilse uyarı verir. Bu modül ile:
-module(bar). -behaviour(my_behaviour). -export([foo/1]). foo([]) -&amp;gt; {}. ve dialyzer --src bar.erl my_behaviour.erl komutunu çalıştırdığınızda şu uyarıları alırsınız:</description>
    </item>
    
    <item>
      <title>Dizeleri Biçimlendir</title>
      <link>https://www.wikiod.com/tr/erlang/dizeleri-bicimlendir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/dizeleri-bicimlendir/</guid>
      <description>Sözdizimi # io:format(FormatString, Args) % standart çıktıya yazma io:format(standard_error, FormatString, Args) % standart hataya yazma io:format(F, FormatString, Args) % dosya açmak için yazma io_lib:format(FormatString, Args) % bir iolist döndürür Biçim dizelerinde ortak kontrol dizileri # &amp;ldquo;io:format&amp;rdquo; ve &amp;ldquo;io_lib:format&amp;rdquo; için birçok farklı kontrol dizisi varken, çoğu zaman sadece üç farklı olanı kullanın: ~s, ~p ve ~w.
~s # ~s strings içindir.
Dizeleri, ikili dosyaları ve atomları yazdırır. (Başka bir şey &amp;ldquo;badarg&amp;rdquo; hatasına neden olur.</description>
    </item>
    
    <item>
      <title>iolistler</title>
      <link>https://www.wikiod.com/tr/erlang/iolistler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/iolistler/</guid>
      <description>Erlang dizesi bir tamsayı listesi iken, bir &amp;ldquo;iolist&amp;rdquo;, öğeleri tamsayılar, ikili dosyalar veya diğer iolistler olan bir listedir, örn. [&amp;quot;foo&amp;quot;, $b, $a, $r, &amp;lt;&amp;lt;&amp;quot;baz&amp;quot;&amp;gt;&amp;gt;]. Bu iolist, &amp;quot;foobarbaz&amp;quot; dizesini temsil ediyor.
Bir iolist&amp;rsquo;i &amp;lsquo;iolist_to_binary/1&amp;rsquo; ile bir ikili dosyaya dönüştürebilseniz de, &amp;lsquo;file:write_file/2&amp;rsquo; ve &amp;lsquo;gen_tcp:send/2&amp;rsquo; gibi Erlang kitaplığı işlevleri iolistleri de kabul ettiğinden, genellikle buna ihtiyacınız yoktur. dizeler ve ikili dosyalar.
Sözdizimi # -type iolist() :: belki_improper_list(byte() | ikili() | iolist(), ikili() | []).</description>
    </item>
    
    <item>
      <title>gen_sunucu davranışı</title>
      <link>https://www.wikiod.com/tr/erlang/gen_sunucu-davrans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/gen_sunucu-davrans/</guid>
      <description>&amp;ldquo;gen_server&amp;rdquo;, Erlang&amp;rsquo;ın önemli bir özelliğidir ve bu işlevin her yönünü anlamak için bazı ön koşullar gerektirir:
Döngü, özyineleme ve durum [Yumurtlama süreçleri2 Mesaj geçiyor OTP ilkeleri Erlang&amp;rsquo;daki bir özellik hakkında daha fazla bilgi edinmenin iyi bir yolu, kaynak kodunu doğrudan resmi github deposundan okumaktır. &amp;ldquo;gen_server&amp;rdquo; davranışı, özünde birçok yararlı bilgi ve ilginç yapı barındırır.
gen_server gen_server.erl içinde tanımlanmıştır ve ilgili belgeleri stdlib Erlang belgelerinde bulunabilir. gen_server bir OTP özelliğidir ve daha fazla bilgi OTP Design Principles and User&amp;rsquo;s Guide içinde de bulunabilir.</description>
    </item>
    
    <item>
      <title>NIF&#39;ler</title>
      <link>https://www.wikiod.com/tr/erlang/nifler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/erlang/nifler/</guid>
      <description>Örnek: geçerli UNIX zamanı # İşte bir NIF&amp;rsquo;in nasıl yazılacağını göstermek için çok basit bir örnek.
Dizin yapısı:
nif_test ├── c_src │ ├── Makefile │ └── nif_test.c ├── rebar.config └── src ├── nif_test.app.src └── nif_test.erl Bu yapı, Rebar3 kullanılarak kolayca başlatılabilir:
$ rebar3 new lib nif_test &amp;amp;&amp;amp; cd nif_test &amp;amp;&amp;amp; rebar3 new cmake nif_test.c içeriği:
#include &amp;quot;erl_nif.h&amp;quot; #include &amp;quot;time.h&amp;quot; static ERL_NIF_TERM now(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_int(env, time(0)); } static ErlNifFunc nif_funcs[] = { {&amp;quot;now&amp;quot;, 0, now} }; ERL_NIF_INIT(nif_test,nif_funcs,NULL,NULL,NULL,NULL); nif_test.</description>
    </item>
    
  </channel>
</rss>

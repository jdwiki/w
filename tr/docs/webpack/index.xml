<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web paketi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/webpack/</link>
    <description>Recent content in web paketi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/webpack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web paketini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/webpack/web-paketini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/web-paketini-kullanmaya-baslama/</guid>
      <description>Javascript + CSS + Yazı Tipleri + Görseller Örneği # Gerekli modüller
npm install --save-dev webpack extract-text-webpack-plugin file-loader css-loader style-loader klasör yapısı
. └── assets ├── css ├── images └── js webpack.config.js
const webpack = require(&#39;webpack&#39;); const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;); const path = require(&#39;path&#39;); const glob = require(&#39;glob&#39;); module.exports = { entry: { script: path.resolve(__dirname, &#39;./assets/js/app.js&#39;), style: path.resolve(__dirname, &#39;./assets/css/app.css&#39;), images: glob.sync(path.resolve(__dirname, &#39;./assets/images/**/*.*&#39;)), }, context: __dirname, output: { path: path.resolve(&#39;./dist/assets&#39;), publicPath: &#39;/dist/assets&#39;, filename: &#39;[name].</description>
    </item>
    
    <item>
      <title>DllPlugin ve DllReferencePlugin</title>
      <link>https://www.wikiod.com/tr/webpack/dllplugin-ve-dllreferenceplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/dllplugin-ve-dllreferenceplugin/</guid>
      <description>Dll ve DllReference eklentileri, paketin bağımsız olarak derlenebileceği şekilde kodun birden çok pakete bölünmesine izin verir.
Sık sık derlenmesi gerekmeyen bir kitaplıkta &amp;ldquo;satıcı&amp;rdquo; komut dosyaları oluşturmak (ör: React, jQuery, Bootstrap, Fontawesome&amp;hellip;) ve bu komut dosyalarına ihtiyaç duyacak uygulama paketinizde referans vermek mümkündür.
Sürekli olarak değiştirilecek olan uygulama paketi, önceden oluşturulmuş bir &amp;ldquo;satıcı&amp;rdquo; paketine atıfta bulunan ayrı bir konfigürasyonda olacaktır.
Sözdizimi # yeni webpack.DllPlugin({ yol: &amp;lsquo;[ad]-manifest.json&amp;rsquo;, ad: &amp;lsquo;[ad]_[karma]&amp;rsquo; }) yeni webpack.DllReferencePlugin({ bağlam: __dirname, manifest: require(&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Sıcak Modül Değişimi</title>
      <link>https://www.wikiod.com/tr/webpack/scak-modul-degisimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/scak-modul-degisimi/</guid>
      <description>webpack-sıcak-ara katman yazılımı # Girişe &amp;ldquo;webpack-hot-middleware/client&amp;rdquo; ekleyerek &amp;ldquo;webpack-dev-middleware&amp;rdquo; ile kullanın.
yapılandırma # Yola sorgu dizesi olarak yapılandırmalar ekleyin. Örnek:
webpack-hot-middleware/client?path=/__what&amp;amp;timeout=2000&amp;amp;overlay=false Seçenek Tanım yol Ara yazılımın olay akışına hizmet ettiği yol zaman aşımı Bağlantı kesildikten sonra yeniden bağlanmayı denemeden önce beklenecek süre kaplama DOM tabanlı istemci tarafı kaplamasını devre dışı bırakmak için false olarak ayarlayın. yeniden yükle Web paketi takıldığında sayfayı otomatik olarak yeniden yüklemek için true olarak ayarlayın. noBilgi Bilgilendirici konsol günlüğünü devre dışı bırakmak için true olarak ayarlayın.</description>
    </item>
    
    <item>
      <title>yükleyiciler</title>
      <link>https://www.wikiod.com/tr/webpack/yukleyiciler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/yukleyiciler/</guid>
      <description>Web paketi yükleyicileri &amp;ldquo;preLoaders&amp;rdquo;, &amp;ldquo;loaders&amp;rdquo; ve &amp;ldquo;postLoaders&amp;rdquo; olarak yapılandırılabilir. Olmaları gerekmese de, linting veya diğer zorunlu veya seri işlemleri kullanan yapılandırmalar, işlem hattındaki bu oluşturma aşamalarından yararlanabilir.
Yükleyicileri ve bunların kullanımını anlamanın anahtarı, Webpack&amp;rsquo;in gerekli grafikteki her modülü yükleyici sistemi aracılığıyla çalıştırmasıdır. Yukarıdaki örneğe göre, bu, Webpack uygulamanızın içe aktarmaları arasında gezinmeye başladığında, gereken dosyaları belirleyeceği ve basit bir normal ifade kullanarak hangi dosya veya dosya türünün hangi yükleyici veya yükleyici dizisini gerektirdiğini belirleyeceği anlamına gelir.</description>
    </item>
    
    <item>
      <title>Yükleyiciler ve Eklentiler</title>
      <link>https://www.wikiod.com/tr/webpack/yukleyiciler-ve-eklentiler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/yukleyiciler-ve-eklentiler/</guid>
      <description>Yükleyiciler ve eklentiler, Webpack&amp;rsquo;in yapı taşlarını oluşturur.
Yükleyiciler genellikle tek bir göreve ve dosya türüne atanır. Kurulumları daha kolaydır ve genellikle daha az ortak kod gerektirir.
Diğer yandan eklentiler, Webpack&amp;rsquo;in dahili yapı sistemine kancalar aracılığıyla erişebilir ve bu nedenle daha güçlüdür. Eklentiler, tam olarak yapılandırılmış Web paketi ortamını değiştirebilir ve derleme süreci boyunca özel eylemler gerçekleştirebilir.
Örneğin, CSS dosyalarımızla uğraşırken, özelliklere satıcı öneklerini otomatik olarak eklemek için bir yükleyici kullanılabilirken, paketleyici oluşturma sürecinde küçültülmüş bir stil sayfası oluşturmak için bir eklenti kullanılabilir.</description>
    </item>
    
    <item>
      <title>Web Paketi Kullanımı</title>
      <link>https://www.wikiod.com/tr/webpack/web-paketi-kullanm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/web-paketi-kullanm/</guid>
      <description>CommonJS modüllerinin kullanımı örneği # Klasör oluşturun. Komut satırında açın. npm install webpack -g komutunu çalıştırın. 2 dosya oluşturun:
cat.js:
var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; app.js
cats = require(&#39;./cats.js&#39;); console.log(cats); Komut satırında çalıştırın: webpack ./app.js app.bundle.js
Şimdi klasörde app.bundle.js dosyası olacak. İndex.html sayfasına ekleyebilir, tarayıcıda açabilir ve sonucu konsolda görebilirsiniz.
Ancak daha hızlı bir yol komut satırında çalıştırılır: node app.bundle.js ve sonucu hemen konsolda görün:
[ &amp;lsquo;dave&amp;rsquo;, &amp;lsquo;henry&amp;rsquo;, &amp;lsquo;martha&amp;rsquo;]</description>
    </item>
    
    <item>
      <title>ağaç sallama</title>
      <link>https://www.wikiod.com/tr/webpack/agac-sallama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/agac-sallama/</guid>
      <description>ES2015 ağaç sallıyor # webpack 2, kodu içe ve dışa aktarmak için ES2015 modülleri kullanıldığında kullanılmayan kodu kaldırabilen ağaç sallama özelliğini sunar.
Düzenlemek # npm install babel-preset-es2015-webpack --save-dev Kullanım # .babelrc&amp;rsquo;de:
{ &amp;quot;presets&amp;quot;: [ &amp;quot;es2015-webpack&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>Geliştirme sunucusu web paketi-dev-server</title>
      <link>https://www.wikiod.com/tr/webpack/gelistirme-sunucusu-web-paketi-dev-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/webpack/gelistirme-sunucusu-web-paketi-dev-server/</guid>
      <description>Kurulum # &amp;ldquo;webpack-dev-server&amp;rdquo;, &amp;ldquo;npm&amp;rdquo; ile kurulabilir
npm --save-dev webpack-dev-server şimdi sunucuyu başlatabilirsiniz
./node_modules/.bin/webpack-dev-server Kullanımı basitleştirmek için package.json dosyasına komut dosyası ekleyebilirsiniz.
// package.json { ... &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }, ... } şimdi sunucuyu çalıştırmak için kullanabilirsiniz
npm run start &amp;ldquo;webpack-dev-server&amp;rdquo;, &amp;ldquo;devServer&amp;rdquo; bölümündeki &amp;ldquo;webpack.config.js&amp;rdquo; dosyasında yapılandırılmıştır.
Sunucu içerik temel dizinini değiştirmek için contentBase seçeneğini kullanabilirsiniz. Kök dizini &amp;ldquo;public_html&amp;rdquo; olarak ayarlayan örnek yapılandırma şöyle görünebilir:
let path = require(&amp;quot;path&amp;quot;); module.exports = { .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojurescript Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/clojurescript/</link>
    <description>Recent content in clojurescript Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/clojurescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojurescript&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/clojurescript/clojurescripti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/clojurescripti-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # Leiningen # Not: Leiningen&amp;rsquo;i kullanacaksanız, önce JDK 6 veya daha yenisini indirip yüklemeniz gerekir.
Clojure&amp;rsquo;u kullanmaya başlamanın en kolay yolu, Clojure projelerini yönetmek için fiili standart araç olan Leiningen&amp;rsquo;i indirip kurmaktır.
Linux: # curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &amp;gt; ~/bin/lein export PATH=$PATH:~/bin chmod 755 ~/bin/lein lein OS X: # Yukarıdaki Linux adımlarını izleyin veya
[Homebrew] ile yükleyin:
brew install leiningen Pencereler: # https://github.com/technomancy/leiningen#installation adresine bakın.
REPL&amp;rsquo;ye bağlanma # &amp;rsquo;lein&amp;rsquo; yükledikten sonra, yürütün</description>
    </item>
    
    <item>
      <title>Reaktife Başlarken</title>
      <link>https://www.wikiod.com/tr/clojurescript/reaktife-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/reaktife-baslarken/</guid>
      <description>Reagent, Reagent&amp;rsquo;ta işlevler aracılığıyla uygulanan özel &amp;ldquo;etiketlerin&amp;rdquo; oluşturulması gibi, React.js öğelerini ClojureScript&amp;rsquo;e uygulayan bir kitaplıktır.
Reaktif ve Hıçkırık kullanan kullanıcı arayüzü # Reaktif, ClojureScript ile tepki arasında bir arayüzdür. Hiccup benzeri bir sözdizimi kullanarak kullanıcı arayüzünüzü tanımlayan sade ClojureScript işlevleri ve verileri dışında hiçbir şey kullanmadan verimli React bileşenlerini tanımlamanıza olanak tanır.
Örnek:-
(defn sample-component [] [:div [:p &amp;quot;I am a component!&amp;quot;] [:p.someclass &amp;quot;I have &amp;quot; [:strong &amp;quot;bold&amp;quot;] &amp;quot;text.&amp;quot;]]) Çıktı:</description>
    </item>
    
    <item>
      <title>figür çarkı</title>
      <link>https://www.wikiod.com/tr/clojurescript/figur-cark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/figur-cark/</guid>
      <description>Figwheel, kaynak dosyalar değiştiğinde ve tarayıcıda kodu yeniden yüklediğinde clojurescript kodunuzu otomatik olarak yeniden oluşturur. Yeniden yükleme, sayfayı yenilemeden çalışır ve yeniden yüklemeler arasında &amp;ldquo;defence&amp;rdquo; kullanarak uygulamanın bazı durumlarını koruyabilirsiniz.
REPL tabanlı geliştirmeye alternatiftir (REPL&amp;rsquo;yi de içermesine rağmen). REPL&amp;rsquo;de değiştirilen işlevleri yeniden değerlendirmek yerine, tüm kodu yeniden yükler ve tarayıcının js konsolunda ifade değerlendirmesinin sonucunu görmek için `println&amp;rsquo; kullanabilirsiniz.
Yeni Proje Oluşturma # Leiningen &amp;ldquo;figwheel&amp;rdquo; şablonuyla yeni bir proje oluşturun:</description>
    </item>
    
    <item>
      <title>lein-cljsbuild</title>
      <link>https://www.wikiod.com/tr/clojurescript/lein-cljsbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/lein-cljsbuild/</guid>
      <description>lein-clsjbuild için parametreler hakkında daha fazla ayrıntı onların example project içinde bulunabilir.
ClojureScript geliştirme ve üretim oluşturma # Project.clj dosyanıza aşağıdaki gibi bir :cljsbuild düğümü ekleyin.
:cljsbuild { :builds { ;;Different target goals should have different names. ;;We have the dev build here :dev { ;;The ClojureScript code should reside in these directories :source-paths [&amp;quot;src-cljs&amp;quot;] :compiler { ;;This is the target output file ;;This will include none of the goog code.</description>
    </item>
    
    <item>
      <title>JavaScript Olayları</title>
      <link>https://www.wikiod.com/tr/clojurescript/javascript-olaylar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/javascript-olaylar/</guid>
      <description>Sözdizimi # (goog.events dom-element olay tipi olay işleyici-işlevi) ;;Bir Google Kapatma olay dinleyicisi oluşturur (.addEventListener dom-element load-event) ;;Normal JavaScript olay dinleyicisi oluşturur. Tarayıcıya özel olabilir. Tüm Kapatma olay adları, [EventType numaralandırmasındaki1 belgelerinde bulunabilir.
Kapatma Kitaplığını Kullanarak Düğmeye Etkinlik Ekleme # (ns so-doc.events (:require [goog.dom :as dom] [goog.events :as events])) (defn handle-click [event] ;an event object is passed to all events (js/alert &amp;quot;button pressed&amp;quot;)) (events/listen (dom/getElement &amp;quot;button&amp;quot;); This is the dom element the event comes from (.</description>
    </item>
    
    <item>
      <title>Yeniden çerçeveli Durum Yönetimi (httpsgithub.comDay8re-frame)</title>
      <link>https://www.wikiod.com/tr/clojurescript/yeniden-cerceveli-durum-yonetimi-httpsgithubcomday8re-frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojurescript/yeniden-cerceveli-durum-yonetimi-httpsgithubcomday8re-frame/</guid>
      <description>Clojurescript&amp;rsquo;i UI bileşenleri için durumu tutan işlevsel olarak saf bir dil olarak düşündüğümüzde zorlaşmaya başlar. Basitçe, mümkün değil.
Bununla birlikte, tek tek bileşenleri ve durumlarını ayırmak mümkündür. Reaktif/atom içinde veri/durum depolayarak yapabiliriz. Ancak çok sayıda eyalet ve çok sayıda bağımlılık olduğunda, işler hızla kafa karıştırıcı hale gelir ve eyalet yönetimimiz için hazır bir çözüm dilemeye başlarız. Yeniden çerçevenin devreye girdiği yer burasıdır.
1. Basit Gönderim olayı # Örnek kullanım ile basit bir sevk olayına bakacağız.</description>
    </item>
    
  </channel>
</rss>

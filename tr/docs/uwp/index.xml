<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uwp Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/uwp/</link>
    <description>Recent content in uwp Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>uwp&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/uwp/uwpye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/uwpye-baslarken/</guid>
      <description>İlk UWP Uygulamanızı Oluşturma # Bu örnek, basit bir UWP uygulamasının nasıl geliştirileceğini gösterir.
Bir &amp;ldquo;Boş Uygulama (Evrensel Windows)&amp;rdquo; projesinin oluşturulmasında, çözümünüzde oluşturulan birçok temel dosya vardır.
Projenizdeki tüm dosyalar Çözüm Gezgini&amp;rsquo;nde görülebilir.
Projenizdeki önemli dosyalardan bazıları şunlardır:
App.xaml ve App.xaml.cs - App.xaml, uygulama genelinde kullanılabilen kaynakları bildirmek için kullanılır ve App.xaml.cs bunun arka uç kodudur. App.xaml.cs, uygulamanın varsayılan giriş noktasıdır MainPage.xaml - Bu, uygulamanız için varsayılan başlangıç ​​kullanıcı arayüzü sayfasıdır (uygulama başlangıç ​​sayfanızı App.</description>
    </item>
    
    <item>
      <title>Cihaz Aileleri</title>
      <link>https://www.wikiod.com/tr/uwp/cihaz-aileleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/cihaz-aileleri/</guid>
      <description>DeviceAilesine özel kod # Genel olarak, UWP, Windows 10&amp;rsquo;da birçok farklı cihazda çalışan tek bir uygulama yapmak için kullanılır. Ancak, belirli cihazlara uyarlanmış kod yapmak da mümkündür. Bunu birkaç farklı yolla başarabilirsiniz.
Farklı XAML Düzeni
Belirli bir &amp;ldquo;aygıt ailesi&amp;rdquo; için belirli bir düzen kullanmak istiyorsanız, bunu, hedeflediğiniz aygıt ailesini belirtmek için bir sonekle, varsayılan XAML dosyasıyla aynı ada sahip yeni bir XAML Sayfası öğesi oluşturarak yapabilirsiniz. Ardından, tüm cihazlar için MainPage.</description>
    </item>
    
    <item>
      <title>UWP için Birim Testi</title>
      <link>https://www.wikiod.com/tr/uwp/uwp-icin-birim-testi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/uwp-icin-birim-testi/</guid>
      <description>Evrensel Windows 10 Uygulaması için Birim Testlerinin nasıl oluşturulacağını göstermek istiyorum. UWP uygulamalarını test etmek için, açıklamalar bölümünde verdiğim bağlantıdan daha fazlasını okuyabileceğiniz xUnit.net Framework kullanacağız.
xUnit Framework hakkında daha fazla bilgi edinebilirsiniz: https://xunit.github.io/docs/getting-started-uwp.html
Test Uygulamasını Yapılandır # UWP uygulamanızı testlere hazır hale getirdikten sonra, çözümünüze test uygulamasını eklemelisiniz. Bunu yapmak için &amp;ldquo;sağ&amp;rdquo; çözüme tıklayın ve &amp;ldquo;Birim Test Uygulaması (Evrensel Windows)&amp;rdquo; seçeneğini seçin:
Çözüme ekledikten sonra, yapılandırmak için gereken birkaç adım daha vardır.</description>
    </item>
    
    <item>
      <title>Ayarlar ve uygulama verileri</title>
      <link>https://www.wikiod.com/tr/uwp/ayarlar-ve-uygulama-verileri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/ayarlar-ve-uygulama-verileri/</guid>
      <description>Ayarları saklayın ve alın # UWP uygulamaları, basit ayarları bir anahtar/değer deposunda yerel olarak veya hatta bulutta kolayca depolayabilir, böylece uygulamanız veya oyun, ayarları farklı kullanıcıların cihazları arasında paylaşabilir.
Ayarlar için aşağıdaki veri türleri kullanılabilir:
UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Tek, Çift Boole Karakter16, Dize DateTime, TimeSpan GUID, Nokta, Boyut, Rect Yerel ve/veya gezici veri kapsayıcısını alarak başlayın.
Windows.Storage.ApplicationDataContainer localSettings = Windows.Storage.ApplicationData.Current.LocalSettings; Windows.Storage.ApplicationDataContainer roamingSettings = Windows.Storage.ApplicationData.Current.RoamingSettings; Bir ayar oluşturmak veya yazmak için, veri kapsayıcısındaki ayarlara erişmek için ApplicationDataContainer.</description>
    </item>
    
    <item>
      <title>UWP arka plan görevleri</title>
      <link>https://www.wikiod.com/tr/uwp/uwp-arka-plan-gorevleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/uwp-arka-plan-gorevleri/</guid>
      <description>Ayrı bir süreçte çalışan bir arka plan görevi kaydetmek için, Package.appxmanifest&amp;rsquo;teki &amp;ldquo;Declarations&amp;rdquo; Sekmesine gitmeli ve yeni bir &amp;ldquo;Arka Plan Görevi&amp;rdquo; eklemeli ve giriş noktasını ayarlamalısınız. Tek işlemli bir arka plan görevinin kaydedilmesi &amp;lsquo;BackgroundTaskBuilder&amp;rsquo; aracılığıyla yapılabilir, ancak bir görevi iki kez kaydederseniz uygulama bir istisna atar, bu nedenle zaten bir görev kaydettirmiş olup olmadığınızı kontrol etmelisiniz. Uygulama, yeni bir görevi kaydetmek için yetki kazanmalıdır, bu, BackgroundExecutionManager.RequestAccessAsync() çağırılarak yapılabilir, ancak gerçekten izne sahip olduğunuzdan emin olun.</description>
    </item>
    
    <item>
      <title>Tema Kaynakları</title>
      <link>https://www.wikiod.com/tr/uwp/tema-kaynaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/tema-kaynaklar/</guid>
      <description>Sözdizimi # C# : Application.Current.Resources[&amp;ldquo;yourColorKey&amp;rdquo;] Xaml : {ThemeResource yourColorKey} Parametreler # parametre Amaç yourColorKey Bir &amp;ldquo;Color&amp;rdquo; nesnesini geri almak için verdiğiniz anahtar. C# ve Xaml UWP, Windows 10&amp;rsquo;un avantajlarını tam olarak kontrol etmenizi sağlar. Bu avantajlardan bazıları Vurgu rengi veya Koyu/Açık temalar gibi grafikseldir.
Uygulamanızı bu özellikle uyumlu olacak şekilde hazırlamak için, programın çalıştığı işletim sisteminin Accent rengiyle veya kullanıcının tema seçimiyle değiştirmek üzere UWP&amp;rsquo;de bir dizi hazır renk uygulanmıştır.</description>
    </item>
    
    <item>
      <title>Web Görünümü gezinme</title>
      <link>https://www.wikiod.com/tr/uwp/web-gorunumu-gezinme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/web-gorunumu-gezinme/</guid>
      <description>Uzak bir URL&amp;rsquo;den veri getiren tüm örnekler, Package.appxmanifest&amp;rsquo;te &amp;ldquo;İnternet (istemci)&amp;rdquo; özelliğinin işaretli olması gerekir. Yalnızca yerel verileri işleyen örnekler için bu gerekli değildir.
HTML dosyasını uygulama paketinden aç # Uygulama paketinizden kolayca bir dosya açabilirsiniz, ancak Uri şeması &amp;ldquo;ms-appx&amp;rdquo; yerine &amp;ldquo;ms-appx-web&amp;rdquo; olmalıdır:
var uri = new Uri(&amp;quot;ms-appx-web:///Assets/Html/html-sample.html&amp;quot;); this.webView.Navigate(uri); Uri&amp;rsquo;ye git # Bu kod, WebView&amp;rsquo;da bazı Uri&amp;rsquo;ye gider:
this.webView.Navigate(new Uri(&amp;quot;http://stackoverflow.com/&amp;quot;)); veya
this.webView.Source = new Uri(&amp;quot;http://stackoverflow.com/&amp;quot;); HttpRequestMessage ile gezinin # Özel kullanıcı aracısını ayarlayın ve Uri&amp;rsquo;ye gidin:</description>
    </item>
    
    <item>
      <title>UWP Merhaba Dünya</title>
      <link>https://www.wikiod.com/tr/uwp/uwp-merhaba-dunya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/uwp-merhaba-dunya/</guid>
      <description>Sözdizimi # Bu, popüler &amp;ldquo;Merhaba Dünya!&amp;ldquo;nın basit bir örneğidir. Evrensel için Windows 10&amp;rsquo;da Windows Platformu. Merhaba Dünya - Evrensel Windows Platformu # Visual Studio 2015&amp;rsquo;i başlattıktan sonra Dosya → Yeni → Proje&amp;rsquo;ye gidin. Yeni Proje iletişim kutusunda, şablonlar ağacında Visual C# → Windows → Universal seçeneğine gidin ve Boş Uygulama (Evrensel Windows) öğesini seçin. Ardından, Uygulamayı tanımlamak için formu doldurmamız gerekiyor:
Ad: Bu, kullanıcıya gösterilecek uygulamanın adıdır. &amp;lsquo;HelloWorld&amp;rsquo; olarak ayarlayın veya özel bir başlık kullanın.</description>
    </item>
    
    <item>
      <title>Uygulama Yaşam Döngüsü</title>
      <link>https://www.wikiod.com/tr/uwp/uygulama-yasam-dongusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/uygulama-yasam-dongusu/</guid>
      <description>Evrensel Windows 10 Uygulama yaşam döngüsü üç farklı durumdan oluşur:
Çalışıyor - uygulama şu anda kullanımda Çalışmıyor - uygulama kapatılır ve bellekten silinir Askıya alındı ​​- uygulama durumu dondu ancak hala bellekte Yukarıdaki resimde de görebileceğiniz gibi, bir durumdan diğerine geçişle bağlantılı farklı olaylar var. Örnekler bölümünde bunların nasıl ele alınacağını gösteriyorum.
MSDN Blog&amp;rsquo;daki iki iyi makaleye atıfta bulunmak iyidir:
https://msdn.microsoft.com/en-us/windows/uwp/launch-resume/app-lifecycle https://blogs.windows.com/buildingapps/2016/04/28/the-lifecycle-of-a-uwp-app/#RqKAKkevsAPIvBUT.97 &amp;ldquo;Çalışıyor&amp;rdquo; durumu işleme # &amp;ldquo;Çalışıyor&amp;rdquo; durumuna geçerken, bu olayla bağlantılı özel bir işleyici vardır: &amp;ldquo;App.</description>
    </item>
    
    <item>
      <title>Windows Universal uygulamasında görüntü boyutunu dönüştürün ve görüntü dosyasını kırpın</title>
      <link>https://www.wikiod.com/tr/uwp/windows-universal-uygulamasnda-goruntu-boyutunu-donusturun-ve-goruntu-dosyasn-krpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/uwp/windows-universal-uygulamasnda-goruntu-boyutunu-donusturun-ve-goruntu-dosyasn-krpn/</guid>
      <description>Bitmap aracını kullanarak görüntüyü kırpın ve yeniden boyutlandırın # public class BitmapTools { /// &amp;lt;summary&amp;gt; /// Gets the cropped bitmap asynchronously. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;originalImage&amp;quot;&amp;gt;The original image.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;startPoint&amp;quot;&amp;gt;The start point.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;cropSize&amp;quot;&amp;gt;Size of the corp.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;scale&amp;quot;&amp;gt;The scale.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;The cropped image.&amp;lt;/returns&amp;gt; public static async Task&amp;lt;WriteableBitmap&amp;gt; GetCroppedBitmapAsync(IRandomAccessStream originalImage, Point startPoint, Size cropSize, double scale) { if (double.IsNaN(scale) || double.IsInfinity(scale)) { scale = 1; } // Convert start point and size to integer.</description>
    </item>
    
  </channel>
</rss>

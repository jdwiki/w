<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sqlite Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/sqlite/</link>
    <description>Recent content in sqlite Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sqlite&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/sqlite/sqlitea-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sqlite/sqlitea-baslarken/</guid>
      <description>Kurulum # SQLite, tipik olarak indirilerek doğrudan uygulamaya derlenen bir C kitaplığıdır. download.html) son sürümün kaynak kodunu ve sqlite3.c dosyasını projeye ekleme.
Birçok komut dosyası dili (örneğin, Perl, Python, Ruby, vb.) ve çerçeveler (örneğin, Android) SQLite desteğine sahiptir; bu, ayrı olarak kurulması gerekmeyen SQLite kitaplığının yerleşik bir kopyasıyla yapılır.
SQL&amp;rsquo;i test etmek için komut satırı kabuğunu (&amp;ldquo;sqlite3&amp;rdquo; veya &amp;ldquo;sqlite3.exe&amp;rdquo;) kullanmak faydalı olabilir. Çoğu Linux dağıtımıyla birlikte gönderilir; Windows&amp;rsquo;ta, sqlite-tools paketindeki önceden derlenmiş ikili dosyaları indirin ve bunları bir yere çıkarın.</description>
    </item>
    
    <item>
      <title>sqlite3_stmt Hazırlanan Bildirim (C API)</title>
      <link>https://www.wikiod.com/tr/sqlite/sqlite3_stmt-hazrlanan-bildirim-c-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sqlite/sqlite3_stmt-hazrlanan-bildirim-c-api/</guid>
      <description>resmi belgeler: Prepared Statement Object
Bir Deyim Yürütme # sqlite3_prepare_v2() gibi bir işlevle bir ifade oluşturulur.
Hazırlanmış bir deyim nesnesi *sqlite3_finalize() ile temizlenmelidir. Bir hata durumunda bunu unutmayınız.
parametreler kullanılıyorsa, değerlerini [sqlite3_bind_xxx() işlevleriyle](http://www.sqlite.org/c3ref/bind_blob. html).
Gerçek yürütme, sqlite3_step() çağrıldığında gerçekleşir.
const char *sql = &amp;quot;INSERT INTO MyTable(ID, Name) VALUES (?, ?)&amp;quot;; sqlite3_stmt *stmt; int err; err = sqlite3_prepare_v2(db, sql, -1, &amp;amp;stmt, NULL); if (err != SQLITE_OK) { printf(&amp;quot;prepare failed: %s\n&amp;quot;, sqlite3_errmsg(db)); return /* failure */; } sqlite3_bind_int (stmt, 1, 42); /* ID */ sqlite3_bind_text(stmt, 2, &amp;quot;Bob&amp;quot;, -1, SQLITE_TRANSIENT); /* name */ err = sqlite3_step(stmt); if (err !</description>
    </item>
    
    <item>
      <title>PRAGMA Açıklamaları</title>
      <link>https://www.wikiod.com/tr/sqlite/pragma-acklamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sqlite/pragma-acklamalar/</guid>
      <description>SQLite belgelerinde tüm PRAGMA ifadelerinin referansı bulunur.
Kalıcı efektlere sahip PRAGMA&amp;rsquo;lar # Çoğu PRAGMA ifadesi yalnızca mevcut veritabanı bağlantısını etkiler, bu da veritabanı her açıldığında yeniden uygulanmaları gerektiği anlamına gelir.
Ancak, aşağıdaki PRAGMA&amp;rsquo;lar veritabanı dosyasına yazılır ve herhangi bir zamanda çalıştırılabilir (ancak bazı durumlarda, bir işlemin içinde değil):
application_id [WAL modunu] etkinleştirirken veya devre dışı bırakırken journal_mode(http://www.sqlite.org/wal.html) schema_version user_version wal_checkpoint Aşağıdaki PRAGMA ayarları, oluşturulduktan sonra değiştirilemeyen veritabanı dosyasının özelliklerini ayarlar, bu nedenle veritabanına ilk gerçek yazma işleminden önce yürütülmeleri gerekir:</description>
    </item>
    
    <item>
      <title>Veri tipleri</title>
      <link>https://www.wikiod.com/tr/sqlite/veri-tipleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sqlite/veri-tipleri/</guid>
      <description>resmi belgeler: SQLite Sürüm 3&amp;rsquo;teki Veri Tipleri
Tarih/saat türleri # SQLite, tarih veya saat değerleri için ayrı bir veri türüne sahip değildir.
ISO8601 dizileri # &amp;ldquo;CURRENT_DATE&amp;rdquo;, &amp;ldquo;CURRENT_TIME&amp;rdquo; ve &amp;ldquo;CURRENT_TIMESTAMP&amp;rdquo; yerleşik anahtar sözcükleri, dizeleri ISO8601 biçiminde döndürür:
&amp;gt; SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP; CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP ------------ ------------ ------------------- 2016-07-08 12:34:56 2016-07-08 12:34:56 Bu tür değerler, tüm yerleşik tarih/saat işlevleri tarafından da anlaşılır:
&amp;gt; SELECT strftime(&#39;%Y&#39;, &#39;2016-07-08&#39;); 2016 Julian gün numaraları # Yerleşik tarih/saat işlevleri, sayıları Julian günleri olarak yorumlar:</description>
    </item>
    
    <item>
      <title>Komut satırı nokta komutları</title>
      <link>https://www.wikiod.com/tr/sqlite/komut-satr-nokta-komutlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sqlite/komut-satr-nokta-komutlar/</guid>
      <description>sqlite3 komut satırı kabuğu ek bir dizi komut uygular (bunlar SQLite kitaplığını kullanan programlarda bulunmaz).
Resmi belgeler: sqlite3 için özel komutlar
Bir tabloyu SQL komut dosyası olarak dışa ve içe aktarma # Bir veritabanını dışa aktarmak, iki adımlı basit bir işlemdir:
sqlite&amp;gt; .output mydatabase_dump.sql sqlite&amp;gt; .dump Bir tabloyu dışa aktarmak oldukça benzer:
sqlite&amp;gt; .output mytable_dump.sql sqlite&amp;gt; .dump mytable Çıktı dosyasının &amp;lsquo;.dump&amp;rsquo; kullanılmadan önce &amp;lsquo;.output&amp;rsquo; ile tanımlanması gerekir; aksi takdirde, metin ekrana sadece çıktı olarak verilir.</description>
    </item>
    
  </channel>
</rss>

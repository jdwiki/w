<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ayy Öğretici on </title>
    <link>https://www.wikiod.com/tr/docs/oop/</link>
    <description>Recent content in ayy Öğretici on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>oop&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/oop/oopu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/oopu-kullanmaya-baslama/</guid>
      <description>OOP Giriş # Giriş # Nesne Yönelimli Programlama (çoğunlukla OOP olarak anılır), sorunları çözmek için bir programlama paradigmasıdır.
Bir OO (nesne yönelimli) programın güzelliği, programı belirli siparişleri izleyen sıralı bir komut dosyası yerine birbiriyle iletişim kuran bir grup nesne olarak düşünmemizdir.
OOP&amp;rsquo;yi destekleyen birçok programlama dili vardır, bunlardan bazıları şunlardır:
Java C++ c# Python&amp;rsquo;un ayrıca OOP&amp;rsquo;yi desteklediği bilinmektedir, ancak birkaç özelliği yoktur.
OOP Terminolojisi # OOP&amp;rsquo;deki en temel terim bir sınıf&amp;lsquo;dir.</description>
    </item>
    
    <item>
      <title>kapsülleme</title>
      <link>https://www.wikiod.com/tr/oop/kapsulleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/kapsulleme/</guid>
      <description>Bilgi gizleme # Bir nesnenin belirli bir andaki durumu, o noktada tuttuğu bilgilerle temsil edilir. Bir OO dilinde durum, üye değişkenler olarak uygulanır.
Düzgün tasarlanmış bir nesnede durum, üye değişkenlerinin doğrudan değiştirilmesiyle değil, yalnızca yöntemlerine yapılan çağrılar yoluyla değiştirilebilir. Bu, özel üye değişkenlerinin değerleri üzerinde çalışan genel yöntemler sağlayarak elde edilir. Bilgilerin bu şekilde gizlenmesi kapsülleme olarak bilinir.
Bu nedenle, kapsülleme, özel bilgilerin ifşa edilmemesini ve sırasıyla erişimcilere ve yöntemlere yapılan çağrılar dışında değiştirilememesini sağlar.</description>
    </item>
    
    <item>
      <title>Elmas sorunu</title>
      <link>https://www.wikiod.com/tr/oop/elmas-sorunu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/elmas-sorunu/</guid>
      <description>Elmas Problemi - Örnek # Elmas sorunu, Nesne Yönelimli Programlama&amp;rsquo;da &amp;lsquo;çoklu kalıtım&amp;rsquo; kullanılırken ortaya çıkan yaygın bir sorundur.
&amp;ldquo;C sınıfı&amp;quot;nın &amp;ldquo;sınıf A&amp;rdquo; ve &amp;ldquo;sınıf B&amp;quot;den miras alındığı durumu düşünün. Hem &amp;ldquo;sınıf A&amp;rdquo; hem de &amp;ldquo;sınıf B&amp;quot;nin &amp;ldquo;foo()&amp;rdquo; adında bir yöntemi olduğunu varsayalım.
Sonra foo() yöntemini çağırdığımızda, derleyici kullanmaya çalıştığımız yöntemi tam olarak tanımlayamaz.
&amp;lsquo;sınıf A&amp;rsquo;dan &amp;lsquo;foo()&amp;rsquo; &amp;ldquo;sınıf B&amp;quot;den &amp;ldquo;foo()&amp;rdquo; Buna temel olarak elmas problemi denir. Bu sorunun bazı varyantları vardır. Bunu önlemek için birden fazla yaklaşım vardır.</description>
    </item>
    
    <item>
      <title>Miras</title>
      <link>https://www.wikiod.com/tr/oop/miras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/miras/</guid>
      <description>Not: Java&amp;rsquo;da çok düzeyli devralmaya izin verilir, ancak çoklu devralmaya izin verilmez. http://beginnersbook.com/2013/04/oops-concepts/ adresinde daha fazla bilgi edinin.
Kalıtım - Tanım # Kalıtım, Nesneye Yönelik Programlama (OOP) içindeki ana kavramlardan biridir. Kalıtımı kullanarak bir problemi düzgün bir şekilde modelleyebilir ve yazmamız gereken satır sayısını azaltabiliriz. Popüler bir örnek kullanarak kalıtımı görelim.
OOP kullanarak hayvanlar alemini (elbette basitleştirilmiş hayvanlar alemi. Biyologlar, affedin) modellemeniz gerektiğini düşünün. Pek çok hayvan türü vardır, bazıları benzersiz özelliklere sahipken bazıları aynı özelliklere sahiptir.</description>
    </item>
    
    <item>
      <title>polimorfizm</title>
      <link>https://www.wikiod.com/tr/oop/polimorfizm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/polimorfizm/</guid>
      <description>Yöntemi Geçersiz Kılma # Yöntem geçersiz kılma, sınıflar arasında polimorfizm kullanmanın yoludur. bir sınıf diğerinden miras alınırsa, önceki (alt sınıf) sonrakinin (süper sınıfın) yöntemlerini geçersiz kılabilir ve uygulamayı değiştirebilir.
bu, üst sınıfın yöntemin daha genel uygulamasını tanımladığı, alt sınıfın ise daha spesifik bir uygulama kullandığı durumlarda kullanılır.
Aşağıdaki örneği düşünün:
Memeliler için bir sınıfımız var:
class Mammal { void whoIam () { System.out.println(&amp;quot;I am a Mammal&amp;quot;); } } Sonra bir Memeli olan Köpek için bir sınıfımız var:</description>
    </item>
    
    <item>
      <title>Soyutlama</title>
      <link>https://www.wikiod.com/tr/oop/soyutlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/soyutlama/</guid>
      <description>Erişim Değiştiricileri # Erişim değiştiricileri, bir nesneye veya bir işleve/yönteme erişimi kontrol etmek için kullanılır. Bu, Soyutlama kavramının ana parçasıdır.
Farklı programlama dilleri farklı erişim değiştiricileri kullanır. İşte bazı örnekler:
Java
Java has 4 access modifiers.
private - These attributes can be accessed only inside the class. protected - These attributes can be accessed by sub classes and classes from the same package. package - These attributes can be accessed by the classes within the same package only.</description>
    </item>
    
    <item>
      <title>Nesne</title>
      <link>https://www.wikiod.com/tr/oop/nesne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/nesne/</guid>
      <description>Giriiş # Nesne, Nesneye Yönelik Programlama (OOP) içindeki temel modüldür. Bir Nesne, bir değişken, veri yapısı (bir dizi, harita vb. gibi) veya hatta bir işlev veya yöntem olabilir. OOP&amp;rsquo;de hayvanlar, araçlar vb. gibi gerçek dünya nesnelerini modelliyoruz.
Bir nesne, nesnenin planı olarak tanımlanabilen bir sınıfta tanımlanabilir. Sonra o sınıfın nesneler dediğimiz örneklerini oluşturabiliriz. Bu nesneleri, yöntemlerini ve değişkenlerini daha sonra kodumuzda kullanabiliriz.</description>
    </item>
    
    <item>
      <title>Sınıf</title>
      <link>https://www.wikiod.com/tr/oop/snf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/oop/snf/</guid>
      <description>Giriiş # Sınıf, bir nesnenin niteliklerini ve/veya davranışlarını tanımladığımız kod parçasıdır. Sınıf içinde nesneye değişkenler, sabitler, yöntemler ve yapıcılar tanımlayabilirsiniz. Başka bir deyişle, sınıf bir nesnenin planıdır.
Java&amp;rsquo;da (basit) bir Araba tanımlayan örnek bir sınıf görelim:
public class Car { private Engine engine; private Body body; private Tire [] tire; private Interior interior; // Constructor public Car (Engine engine, Body body, Tire[] tires, Interior interior) { } // Another constructor public Car () { } public void drive(Direction d) { // Method to drive } public void start(Key key) { // Start } } Bu sadece bir örnek içindir.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>backbone.js Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/backbone-js/</link>
    <description>Recent content in backbone.js Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/backbone-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backbone.js&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/backbone-js/backbonejsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/backbonejsyi-kullanmaya-baslama/</guid>
      <description>Temel kurulum # Omurga, DOM manipülasyonu (Backbone.View kullanarak) ve RESTful kalıcılık için Alt Çizgi ve (isteğe bağlı olarak) jQuery gerektirir.
Backbone ile çalışmaya başlamanın en hızlı yolu, HTML &amp;lsquo;&amp;rsquo; içinde basit komut dosyası etiketleriyle bir &amp;lsquo;index.html&amp;rsquo; dosyası oluşturmaktır:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Omurga artık sayfada kullanıma hazır.
Omurga Kullanma Örneği (Öncelikle Backbone.Model) # Backbone.js dört ayrı bileşenden oluşur: Koleksiyonlar, Modeller, Yönlendiriciler ve Görünümler.</description>
    </item>
    
    <item>
      <title>görüş</title>
      <link>https://www.wikiod.com/tr/backbone-js/gorus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/gorus/</guid>
      <description>Sözdizimi # Oluştur: var View = Backbone.View.extend( { /* özellikler */ } ); Yapı: var myView = new View( /* options */ ); initialize: inşaattan sonra otomatik olarak çağrılan yöntem &amp;ldquo;render&amp;rdquo;: &amp;ldquo;this.el&amp;rdquo; dosyasını yeni içerikle güncellemek için kullanılan yöntem Mevcut HTML&amp;rsquo;ye Bağlı Bir Görünüm # Sayfada bu HTML&amp;rsquo;yi varsayarsak:
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;myPage&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; Bir görünüm buna aşağıdakilerle bağlanabilir:
var MyPageView = Backbone.View.extend( { &amp;quot;el&amp;quot;: &amp;quot;#myPage&amp;quot;, &amp;quot;template&amp;quot;: _.template( &amp;quot;&amp;lt;p&amp;gt;This is my page.</description>
    </item>
    
    <item>
      <title>modeli</title>
      <link>https://www.wikiod.com/tr/backbone-js/modeli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/modeli/</guid>
      <description>Sözdizimi # var MyModel = Backbone.Model.extend(özellikler, [classProperties]); // Özel bir model oluştur var model = new Backbone.Model([öznitelikler], [seçenekler]); // Bir model nesnesini örnekle Parametreler # parametre Ayrıntılar mülkler Örnek özellikleri. classÖzellikler İsteğe bağlı. Var olan ve bu türün her model örneğiyle paylaşılan özellikler. nitelikler İsteğe bağlı. Modelin &amp;ldquo;niteliklerinin&amp;rdquo; başlangıç ​​değerleri. Bu parametre dışarıda bırakılırsa, model, modelin defaults özelliği tarafından belirtilen değerlerle başlatılacaktır. seçenekler İsteğe bağlı. Modeli yapılandırmaya hizmet eden ve ardından &amp;ldquo;başlatma&amp;rdquo; işlevine geçirilen nesne.</description>
    </item>
    
    <item>
      <title>yönlendirici</title>
      <link>https://www.wikiod.com/tr/backbone-js/yonlendirici/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/yonlendirici/</guid>
      <description>Yönlendirici oluşturma # Web sunucusu, tarayıcı tarafından gönderilen talebe göre kullanıcıya hizmet eder, ancak kullanıcının tarayıcıya ne aradığını nasıl söyleyeceği, işte o zaman URL&amp;rsquo;ye ihtiyacımız var. İnternetteki her web sayfasının yer imi eklenebilen, kopyalanabilen, paylaşılabilen ve ileride başvurmak üzere kaydedilebilen bir URL&amp;rsquo;si vardır. Tek sayfa Omurga uygulamasında gördüğümüz her şey bir görünümdür, belirli bir sayfayı göstermek için görünümler oluşturulur ve oluşturulur, ancak kullanıcı aynı bilgileri tekrar görmek isterse ne olur. Bunu başarmak için, rota adı ve parametrelerine dayalı görünümler oluşturacak olan Omurga yönlendirici tabanlı bir uygulama uygulamamız gerekiyor.</description>
    </item>
    
    <item>
      <title>senkronizasyon</title>
      <link>https://www.wikiod.com/tr/backbone-js/senkronizasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/senkronizasyon/</guid>
      <description>&amp;lsquo;sync&amp;rsquo;, Backbone&amp;rsquo;un uzak bir sunucuya/sunucudan tüm veri gönderme veya alma işlemlerini yürütmek için kullandığı bir işlevdir. Varsayılan uygulama, veriler eşitlendiğinde AJAX işlemlerini gerçekleştirmek için jQuery (veya Zepto) kullanır. Ancak, aşağıdakiler gibi farklı eşitleme davranışlarını uygulamak için bu yöntem geçersiz kılınabilir:
Birden çok güncellemeyi tek bir istekte toplamak için setTimeout kullanma Model verilerini JSON yerine XML olarak gönderme Ajax yerine WebSockets kullanma Sözdizimi # senkronizasyon (yöntem, model, seçenekler) Parametreler # parametre ayrıntılar yöntem oluştur, oku, güncelle, sil modeli kaydedilecek model (veya okunacak koleksiyon) seçenekler başarı ve hata geri aramaları ve diğer tüm jQuery istek seçenekleri Temel Örnek # sync() yöntemi, model verilerini okur ve getirir</description>
    </item>
    
    <item>
      <title>Toplamak</title>
      <link>https://www.wikiod.com/tr/backbone-js/toplamak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/toplamak/</guid>
      <description>Sözdizimi # // Yeni özel koleksiyon var MyCollection = Backbone.Collection.extend(properties, [classProperties]); // Yeni koleksiyon örneği var collection = new Backbone.Collection([modeller], [seçenekler]); Parametreler # parametre Ayrıntılar mülkler Örnek özellikleri. classÖzellikler İsteğe bağlı. Var olan ve bu türdeki her koleksiyon örneğiyle paylaşılan özellikler. modeller İsteğe bağlı. Modellerin (veya nesnelerin) ilk dizisi. Bu parametre atlanırsa, koleksiyon boş olacaktır. seçenekler Optional. Koleksiyonu yapılandırmaya hizmet eden ve ardından &amp;ldquo;initialize&amp;rdquo; işlevine geçirilen nesne. Koleksiyonlar sipariş edilen model setleridir.</description>
    </item>
    
    <item>
      <title>url ve urlRoot</title>
      <link>https://www.wikiod.com/tr/backbone-js/url-ve-urlroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/backbone-js/url-ve-urlroot/</guid>
      <description>Model.url()&amp;lsquo;yi Değiştirme # &amp;ldquo;Model.url&amp;rdquo; ve &amp;ldquo;Collection.url&amp;rdquo;, yalnızca varsayılan &amp;ldquo;Backbone.sync&amp;rdquo; yöntemi tarafından dahili olarak kullanılır. Varsayılan yöntem, bir RESTful API&amp;rsquo;ye bağlandığınızı varsayar. Farklı bir uç nokta tasarımı kullanıyorsanız, &amp;lsquo;sync&amp;rsquo; yöntemini geçersiz kılmak ve &amp;lsquo;url&amp;rsquo; yöntemini kullanmak isteyebilirsiniz.
var Model = Backbone.Model.extend({ urlRoot: &#39;/path-to-model&#39;, url: function (path) { var url = this.urlRoot + &#39;/&#39; + path; if (this.isNew()) { return url; } return url + &#39;/&#39; + this.get(this.idAttribute); } }); var model = new Model(); model.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/django/</link>
    <description>Recent content in Django Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django&#39;yu kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/django/djangoyu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/djangoyu-kullanmaya-baslama/</guid>
      <description>Bir Projeye Başlamak # Django, Python tabanlı bir web geliştirme çerçevesidir. Django 1.11 (en son kararlı sürüm) Python 2.7, 3.4, 3.5 veya 3.6 yüklenmesini gerektirir. &amp;lsquo;pip&amp;rsquo;in mevcut olduğunu varsayarsak, kurulum aşağıdaki komutu çalıştırmak kadar basittir. Aşağıda gösterildiği gibi sürümü çıkarmanın Django&amp;rsquo;nun en son sürümünü yükleyeceğini unutmayın:
$ pip install django Django&amp;rsquo;nun belirli bir sürümünü yüklemek için, sürümün Django 1.10.5 olduğunu varsayalım, aşağıdaki komutu çalıştırın:
$ pip install django==1.10.5 Django kullanılarak oluşturulan web uygulamaları, bir Django projesi içinde bulunmalıdır.</description>
    </item>
    
    <item>
      <title>Yönetim Komutları</title>
      <link>https://www.wikiod.com/tr/django/yonetim-komutlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/yonetim-komutlar/</guid>
      <description>Yönetim komutları, Django projenizde veya temel alınan veritabanında eylemler gerçekleştirebilen güçlü ve esnek komut dosyalarıdır. Çeşitli varsayılan komutlara ek olarak, kendinizinkini de yazmak mümkündür!
Normal Python betikleriyle karşılaştırıldığında, yönetim komut çerçevesini kullanmak, sahne arkasında bazı sıkıcı kurulum işlerinin sizin için otomatik olarak yapıldığı anlamına gelir.
Yönetim komutları şuradan çağrılabilir:
django-admin &amp;lt;komut&amp;gt; [seçenekler] python -m Django &amp;lt;komut&amp;gt; [seçenekler] python manager.py &amp;lt;komut&amp;gt; [seçenekler] &amp;lsquo;./manage.py [seçenekler]&amp;rsquo;, Manage.py&amp;rsquo;nin yürütme izinlerine sahipse (chmod +x Manage.py) Yönetim komutlarını Cron ile kullanmak için:</description>
    </item>
    
    <item>
      <title>Modeller</title>
      <link>https://www.wikiod.com/tr/django/modeller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/modeller/</guid>
      <description>Temel durumda, bir model, tek bir veritabanı tablosuna eşlenen Python sınıfıdır. Sınıfın öznitelikleri tablodaki sütunlarla eşlenir ve sınıfın bir örneği, veritabanı tablosundaki bir satırı temsil eder. Modeller, veritabanından sonuçları eklemek ve filtrelemek için zengin bir API sağlayan &amp;ldquo;django.db.models.Model&amp;quot;den miras alır.
[İlk Modelinizi Oluşturun](https://www.wikiod.com/tr/django/modeller#İlk modelinizi oluşturma)
Bir modelin dize temsilini ekleme # Bir model nesnesinin insan tarafından okunabilir bir sunumunu oluşturmak için &amp;lsquo;Model.str()&amp;rsquo; yöntemini (veya python2&amp;rsquo;de &amp;lsquo;Model.unicode()&amp;rsquo;) uygulamanız gerekir. Bu yöntem, modelinizin bir örneğinde (örneğin, model bir şablonda kullanıldığında dahil) &amp;lsquo;str()&amp;rsquo; öğesini her çağırdığınızda çağrılır.</description>
    </item>
    
    <item>
      <title>ara katman yazılımı</title>
      <link>https://www.wikiod.com/tr/django/ara-katman-yazlm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/ara-katman-yazlm/</guid>
      <description>Django&amp;rsquo;daki ara yazılım, kodun yanıt/istek işlemeye bağlanmasına ve Django&amp;rsquo;nun girdi veya çıktısını değiştirmesine izin veren bir çerçevedir.
Middleware, yürütmeye dahil edilmeden önce settings.py MIDDLEWARE_CLASSES listenize eklenmelidir. Django&amp;rsquo;nun yeni bir proje oluştururken sağladığı varsayılan liste aşağıdaki gibidir:
MIDDLEWARE_CLASSES = [ &#39;django.middleware.security.SecurityMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;django.middleware.common.CommonMiddleware&#39;, &#39;django.middleware.csrf.CsrfViewMiddleware&#39;, &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;, &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;, &#39;django.contrib.messages.middleware.MessageMiddleware&#39;, &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;, ] Bunların tümü, her istekte sırayla çalışacak olan işlevlerdir (bir kez görünüm kodunuza &amp;lsquo;views.py&amp;rsquo; içinde ulaşmadan önce ve bir kez de sürüm 1.10&amp;rsquo;dan önce &amp;lsquo;process_response&amp;rsquo; geri çağrısı için ters sırada).</description>
    </item>
    
    <item>
      <title>Ayarlar</title>
      <link>https://www.wikiod.com/tr/django/ayarlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/ayarlar/</guid>
      <description>JSON dosyası kullanarak gizli verileri gizleme # Git veya SVN gibi bir VCS kullanırken, asla sürümlendirilmemesi gereken bazı gizli veriler vardır (depo genel veya özel olsun).
Bu veriler arasında &amp;lsquo;SECRET_KEY&amp;rsquo; ayarını ve veritabanı şifresini bulacaksınız.
Bu ayarları sürüm kontrolünden gizlemek için yaygın bir uygulama, projenizin kökünde bir &amp;ldquo;secrets.json&amp;rdquo; dosyası oluşturmaktır (fikir için teşekkürler &amp;ldquo;Two Scoops of Django&amp;rdquo;):
{ &amp;quot;SECRET_KEY&amp;quot;: &amp;quot;N4HE:AMk:.Ader5354DR453TH8SHTQr&amp;quot;, &amp;quot;DB_PASSWORD&amp;quot;: &amp;quot;v3ry53cr3t&amp;quot; } Ve onu yoksayma listenize ekleyin (git için .</description>
    </item>
    
    <item>
      <title>URL yönlendirme</title>
      <link>https://www.wikiod.com/tr/django/url-yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/url-yonlendirme/</guid>
      <description>Yeniden kullanılabilir bir uygulama için URL ad alanını ayarlayın (Django 1.9+) # &amp;ldquo;app_name&amp;rdquo; özelliğini ayarlayarak uygulamanızın URLconf&amp;rsquo;unu otomatik olarak bir URL ad alanını kullanacak şekilde yapılandırın:
# In &amp;lt;myapp&amp;gt;/urls.py from django.conf.urls import url from .views import overview app_name = &#39;myapp&#39; urlpatterns = [ url(r&#39;^$&#39;, overview, name=&#39;overview&#39;), ] Bu, uygulama ad alanını kök URLconf&amp;rsquo;a dahil edildiğinde `&amp;lsquo;myapp&amp;rsquo;&amp;rsquo; olarak ayarlar. &amp;gt;. Yeniden kullanılabilir uygulamanızın kullanıcısının, URL&amp;rsquo;lerinizi eklemek dışında herhangi bir yapılandırma yapması gerekmez:</description>
    </item>
    
    <item>
      <title>Kimlik Doğrulama Arka Uçları</title>
      <link>https://www.wikiod.com/tr/django/kimlik-dogrulama-arka-uclar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/kimlik-dogrulama-arka-uclar/</guid>
      <description>E-posta Kimlik Doğrulama Arka Ucu # Django&amp;rsquo;nun varsayılan kimlik doğrulaması, &amp;ldquo;kullanıcı adı&amp;rdquo; ve &amp;ldquo;şifre&amp;rdquo; alanlarında çalışır. E-posta kimlik doğrulama arka ucu, kullanıcıların kimliğini &amp;ldquo;e-posta&amp;rdquo; ve &amp;ldquo;parola&amp;rdquo; temelinde doğrular.
from django.contrib.auth import get_user_model class EmailBackend(object): &amp;quot;&amp;quot;&amp;quot; Custom Email Backend to perform authentication via email &amp;quot;&amp;quot;&amp;quot; def authenticate(self, username=None, password=None): user_model = get_user_model() try: user = user_model.objects.get(email=username) if user.check_password(password): # check valid password return user # return user to be authenticated except user_model.</description>
    </item>
    
    <item>
      <title>ArrayField - PostgreSQL&#39;e özgü bir alan</title>
      <link>https://www.wikiod.com/tr/django/arrayfield---postgresqle-ozgu-bir-alan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/arrayfield---postgresqle-ozgu-bir-alan/</guid>
      <description>Sözdizimi # Django.contrib.postgres.fields&amp;rsquo;den ArrayField&amp;rsquo;i içe aktarın class ArrayField(base_field, size=None, **seçenekler) FooModel.objects.filter(array_field_name__contains=[objects, to, check]) FooModel.objects.filter(array_field_name__contained_by=[objects, to, check]) &amp;ldquo;size&amp;rdquo; parametresi PostgreSQL&amp;rsquo;e aktarılsa da PostgreSQL&amp;rsquo;in bunu zorlamayacağını unutmayın.
ArrayField&amp;rsquo;leri kullanırken, Postgresql dizileri belgelerinde bu uyarı kelimesini akılda tutmalısınız.
İpucu: Diziler küme değildir; belirli dizi öğelerini aramak veritabanı yanlış tasarımının bir işareti. ile ayrı bir tablo kullanmayı düşünün. dizi öğesi olacak her öğe için satır. Bu daha kolay olacak aramak ve çok sayıda kullanıcı için daha iyi ölçeklenmesi muhtemeldir.</description>
    </item>
    
    <item>
      <title>şablonlama</title>
      <link>https://www.wikiod.com/tr/django/sablonlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/sablonlama/</guid>
      <description>Şablonlarda hassas yöntemlerin çağrılmasını önleyin # Bir nesne şablon bağlamına maruz kaldığında, onun bağımsız değişkensiz yöntemleri kullanılabilir. Bu işlevler &amp;ldquo;alıcı&amp;rdquo; olduğunda kullanışlıdır. Ancak bu yöntemlerin bazı verileri değiştirmesi veya bazı yan etkileri olması tehlikeli olabilir. Şablon yazarına büyük olasılıkla güvenseniz bile, bir işlevin yan etkilerinin farkında olmayabilir veya yanlışlıkla yanlış özelliği çağırdığını düşünebilir.
Aşağıdaki model göz önüne alındığında:
class Foobar(models.Model): points_credit = models.IntegerField() def credit_points(self, nb_points=1): &amp;quot;&amp;quot;&amp;quot;Credit points and return the new points credit value.</description>
    </item>
    
    <item>
      <title>sorgu kümeleri</title>
      <link>https://www.wikiod.com/tr/django/sorgu-kumeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/django/sorgu-kumeleri/</guid>
      <description>Bir &amp;ldquo;Sorgu Kümesi&amp;rdquo;, temel olarak, bir veritabanı sorgularının derlenmesiyle bir &amp;ldquo;Model&amp;quot;den türetilen nesnelerin bir listesidir.
ForeignKey alanındaki sorgu sayısını azaltın (n+1 sorunu) # Sorun # Django sorgu kümeleri tembel bir şekilde değerlendirilir. Örneğin:
# models.py: class Author(models.Model): name = models.CharField(max_length=100) class Book(models.Model): author = models.ForeignKey(Author, related_name=&#39;books&#39;) title = models.CharField(max_length=100) # views.py def myview(request): # Query the database books = Book.objects.all() for book in books: # Query the database on each iteration to get author (len(books) times) # if there is 100 books, there will have 100 queries plus the initial query book.</description>
    </item>
    
  </channel>
</rss>

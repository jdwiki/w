<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ANTLR Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/antlr/</link>
    <description>Recent content in ANTLR Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/antlr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ANTLR&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/antlr/antlryi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/antlryi-kullanmaya-baslama/</guid>
      <description>Selam Dünya # </description>
    </item>
    
    <item>
      <title>ANTLR v4&#39;e Giriş</title>
      <link>https://www.wikiod.com/tr/antlr/antlr-v4e-giris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/antlr-v4e-giris/</guid>
      <description>ANTLR v4, yeni programlama dilleri oluşturmak ve yapılandırılmış metin veya ikili dosyaları işlemek/çevirmek için kullanılan güçlü bir araçtır. ANTLR, bir ayrıştırma ağacı (veya soyut sözdizimi ağacı, AST) oluşturabilen ve arasında dolaşabilen bir ayrıştırıcı oluşturmak için oluşturduğunuz bir dilbilgisini kullanır. Ayrıştırıcı, belirttiğiniz bir hedef dildeki çıktı dosyalarından oluşur. ANTLR v4, Java, C#, JavaScript, Python2 ve Python3 dahil olmak üzere çeşitli hedefleri destekler. C++ desteği üzerinde çalışılıyor. GUI IDE&amp;rsquo;lerinde çalışmak için Visual Studio, Intellij, NetBeans ve Eclipse için eklentiler vardır.</description>
    </item>
    
    <item>
      <title>TestRig  grun</title>
      <link>https://www.wikiod.com/tr/antlr/testrig--grun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/testrig--grun/</guid>
      <description>TestRig Kurulumu # ANTLR, çalışma zamanı kitaplığında bir test aracı içerir; bu araç, girdiyi dilbilgisi dosyanızdaki tanımlanmış kurallarla eşleştirmek için ayrıştırmanın nasıl yapıldığını ayrıntılı olarak gösteren bilgileri görüntülemek için kullanılabilir.
ANTLR jar dosyasında bulunan bu aracı kullanmak için, sistem sınıf yolunuzu hem ANTLR aracına hem de çalışma zamanı kitaplığına erişime izin verecek şekilde ayarlamalısınız:
export CLASSPATH=&amp;quot;.:/usr/local/lib/antlr-4.5.3-complete.jar:$CLASSPATH&amp;quot; Not: Java sanalını sağlamak için Nokta&amp;rsquo;nın herhangi bir yoldan önce geldiğinden emin olun. makine mevcut çalışma dizininizdeki sınıfları görmez.</description>
    </item>
    
    <item>
      <title>v4&#39;te Lexer kuralları</title>
      <link>https://www.wikiod.com/tr/antlr/v4te-lexer-kurallar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/v4te-lexer-kurallar/</guid>
      <description>Öncelik kuralları # Birkaç sözlük kuralı aynı giriş metniyle eşleşebilir. Bu durumda, belirteç türü aşağıdaki gibi seçilecektir:
İlk olarak, en uzun girdiyle eşleşen sözcük kuralını seçin Metin örtük olarak tanımlanmış bir belirteçle eşleşiyorsa (&#39;{&#39; gibi), örtük kuralı kullanın Birkaç sözlük kuralı aynı giriş uzunluğuyla eşleşiyorsa, tanım sırasına göre ilkini seçin Aşağıdaki birleşik dilbilgisi:
grammar LexerPriorityRulesExample; // Parser rules randomParserRule: &#39;foo&#39;; // Implicitly declared token type // Lexer rules BAR: &#39;bar&#39;; IDENTIFIER: [A-Za-z]+; BAZ: &#39;baz&#39;; WS: [ \t\r\n]+ -&amp;gt; skip; Aşağıdaki girdi verildiğinde:</description>
    </item>
    
    <item>
      <title>ANTLR HedefleriDil Çalışma Zamanları</title>
      <link>https://www.wikiod.com/tr/antlr/antlr-hedefleridil-calsma-zamanlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/antlr-hedefleridil-calsma-zamanlar/</guid>
      <description>Dil desteği # ANTLR, bir dizi programlama dili için ayrıştırıcılar üretebilir:
C# Hedefi Python Hedefi JavaScript Hedefi Java Hedefi Varsayılan olarak ANTLR, Java programlama dilinde komut satırından bir ayrıştırıcı oluşturur:
Java -jar antlr-4.5.3-complete.jar yourGrammar.g4 //Will output a java parser Hedef dili değiştirmek için işletim sistemi terminalinden/komut satırından aşağıdaki komutu çalıştırabilirsiniz:
antlr4 -Dlanguage=Python3 yourGrammar.g4 //with alias java -jar antlr-4.5.3-complete.jar -Dlanguage=Python3 yourGrammar.g4 //without alias Belirli bir dil için istediğiniz ayrıştırıcıyı oluşturmak için her seferinde komut satırında/terminalde &amp;lsquo;-Dlanguage&amp;rsquo; parametresini kullanmak yerine, hedefi global bölüme ekleyerek hedefi .</description>
    </item>
    
    <item>
      <title>Ziyaretçi</title>
      <link>https://www.wikiod.com/tr/antlr/ziyaretci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/ziyaretci/</guid>
      <description>Dinleyici ve ziyaretçi arasındaki fark nedir? Dinleyici ve ziyaretçi mekanizmaları arasındaki fark, dinleyici yöntemlerinin ANTLR tarafından sağlanan yürüteç nesnesi tarafından çağrılmasıdır, oysa ziyaretçi yöntemlerinin çocuklarına açık ziyaret çağrıları ile yürümesi gerekir. Bir düğümün çocuklarında ziyaret() işlevini çağırmayı unutmak, bu alt ağaçların ziyaret edilmediği anlamına gelir. Ziyaretçide ağaçta yürüme yeteneğine sahibiz, dinleyicide ise sadece ağaç yürüteçlerine tepki veriyorsunuz.
Örnek # Dil Bilgisi Örneği (Expr.g4)
grammar Expr; prog: (expr NEWLINE)* ; expr: expr (&#39;*&#39;|&#39;/&#39;) expr | expr (&#39;+&#39;|&#39;-&#39;) expr | INT | &#39;(&#39; expr &#39;)&#39; ; NEWLINE : [\r\n]+ ; INT : [0-9]+ ; Ziyaretçi oluşturma</description>
    </item>
    
    <item>
      <title>dinleyiciler</title>
      <link>https://www.wikiod.com/tr/antlr/dinleyiciler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/dinleyiciler/</guid>
      <description>Etiketleri Kullanan Dinleyici Etkinlikleri # # operatörü ile başlayan bir kuralın içindeki alternatifleri etiketlemek, ANTLR&amp;rsquo;ye alternatife karşılık gelen her etiket için dinleyici yöntemleri oluşturmasını söyler.
Aşağıdaki kuralda her alternatif için bir etiket belirterek:
// Rule type : int #typeInt | short #typeShort | long #typeLong | string #typeString ; // Tokens int : &#39;int&#39; ; short : &#39;short&#39; ; long : &#39;long&#39; ; string : &#39;string&#39; ; ParseTreeListener öğesini genişleten oluşturulan arabirimde aşağıdaki yöntemleri oluşturur:</description>
    </item>
    
    <item>
      <title>ANTLR v3&#39;e Giriş</title>
      <link>https://www.wikiod.com/tr/antlr/antlr-v3e-giris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/antlr/antlr-v3e-giris/</guid>
      <description>Kurulum ve Kurulum # Eclipse&amp;rsquo;de ANTLR Nasıl Kurulur # (Son olarak Indigo ve ANTLR IDE 2.1.2 üzerinde test edilmiştir)
Eclipse&amp;rsquo;i yükleyin. ANTLR v2&amp;rsquo;yi içeren ANTLR tam ikili dosya kavanozunu indirin. Geçici bir dizine çıkarın. antlr-n.n&amp;rsquo;yi kopyalayın folder to an appropriate permanent location, for example the same folder that Eclipse is installed in. ANTLR IDE güncelleme sitesini şuraya ekleyin: Eclipse. In Eclipse, click on Help and select Install New Software. Click Add… button.</description>
    </item>
    
  </channel>
</rss>

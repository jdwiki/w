<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyMongo Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/pymongo/</link>
    <description>Recent content in PyMongo Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/pymongo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyMongo&#39;yu kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/pymongo/pymongoyu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/pymongo/pymongoyu-kullanmaya-baslama/</guid>
      <description>Selam Dünya # PyMongo, MongoDB için yerel bir Python sürücüsüdür.
PyMongo&amp;rsquo;yu yükleyin # pip install pymongo Bağlantı oluştur # Bağlantı oluşturmak için MongoClient kullanın. MongoClient, belirtilmemişse &amp;ldquo;localhost:27017&amp;rdquo; üzerinde çalışan MongoDB örneğini varsayılan olarak ayarlar.
from pymongo import MongoClient client = MongoClient() Veritabanı Nesnelerine Erişim # PyMongo&amp;rsquo;nun Database sınıfı, MongoDB&amp;rsquo;deki veritabanı yapısını temsil eder. Veritabanları, mantıksal olarak ilişkili koleksiyon gruplarını tutar.
db = client.mydb Koleksiyon Nesnelerine Erişim # PyMongo&amp;rsquo;nun Collection sınıfı, MongoDB&amp;rsquo;deki koleksiyon yapısını temsil eder.</description>
    </item>
    
    <item>
      <title>BSON ve JSON arasında dönüştürme</title>
      <link>https://www.wikiod.com/tr/pymongo/bson-ve-json-arasnda-donusturme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/pymongo/bson-ve-json-arasnda-donusturme/</guid>
      <description>Birçok uygulamada, MongoDB&amp;rsquo;den gelen kayıtların JSON formatında serileştirilmesi gerekir. Kayıtlarınızda tarih, tarih, saat, nesne kimliği, ikili, kod vb. tür alanları varsa, &amp;ldquo;json.dumps&amp;rdquo; kullanırken &amp;ldquo;TypeError: JSON serileştirilemez&amp;rdquo; istisnalarıyla karşılaşırsınız. Bu konu, bunun nasıl üstesinden gelineceğini gösterir.
json_util&amp;rsquo;i kullanma # json_util, yerel json yöntemlerini saran ve açık BSON dönüşümü sağlayan &amp;ldquo;dökümler&amp;rdquo; ve &amp;ldquo;yükler&amp;rdquo; olmak üzere iki yardımcı yöntem sağlar. json&amp;rsquo;a ve json&amp;rsquo;dan.
Basit kullanım # from bson.json_util import loads, dumps record = db.</description>
    </item>
    
    <item>
      <title>Belgeleri ObjectId&#39;de depolanan oluşturma süresine göre filtreleyin</title>
      <link>https://www.wikiod.com/tr/pymongo/belgeleri-objectidde-depolanan-olusturma-suresine-gore-filtreleyin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/pymongo/belgeleri-objectidde-depolanan-olusturma-suresine-gore-filtreleyin/</guid>
      <description>Belgeleri ObjectId&amp;rsquo;de kapsüllenmiş zaman damgasına göre filtrelemek için pymongo sorgu örnekleri içerir
Son 60 saniyede oluşturulan belgeler # 60 saniye önce oluşturulan belgeler nasıl bulunur?
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) dummy_id = ObjectId.from_datetime(gen_time) db.CollectionName.find({&amp;quot;_id&amp;quot;: {&amp;quot;$gte&amp;quot;: dummy_id}}) Farklı bir saat dilimindeyseniz, tarih saatini UTC&amp;rsquo;ye kaydırmanız gerekebilir.
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) # converts datetime to UTC gen_time=datetime.datetime.utcfromtimestamp(gen_time.timestamp()) dummy_id = ObjectId.from_datetime(gen_time) db.Collection.find({&amp;quot;_id&amp;quot;: {&amp;quot;$gte&amp;quot;: dummy_id}}) </description>
    </item>
    
  </channel>
</rss>

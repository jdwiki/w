<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>salıncak Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/swing/</link>
    <description>Recent content in salıncak Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/swing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swing&#39;e başlarken</title>
      <link>https://www.wikiod.com/tr/swing/swinge-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/swinge-baslarken/</guid>
      <description>Bir düğme ile artırma # import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; import javax.swing.WindowConstants; /** * A very simple Swing example. */ public class SwingExample { /** * The number of times the user has clicked the button. */ private long clickCount; /** * The main method: starting point of this application. * * @param arguments the unused command-line arguments. */ public static void main(final String[] arguments) { new SwingExample().</description>
    </item>
    
    <item>
      <title>Grafik Kullanıcı Arayüzleri için Swing&#39;i Kullanma</title>
      <link>https://www.wikiod.com/tr/swing/grafik-kullanc-arayuzleri-icin-swingi-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/grafik-kullanc-arayuzleri-icin-swingi-kullanma/</guid>
      <description>Pencere kapatıldığında uygulamadan çıkılıyor # Pencere kapatıldığında uygulamadan çıkmayı unutmak kolaydır. Aşağıdaki satırı eklemeyi unutmayın.
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //Quit the application when the JFrame is closed Boş Pencere Oluşturma (JFrame) # JFrame&amp;rsquo;i Oluşturma # Bir pencere oluşturmak kolaydır. Sadece bir &amp;lsquo;JFrame&amp;rsquo; oluşturmanız gerekiyor.
JFrame frame = new JFrame(); Pencereye Başlık Verme # Pencerenize bir başlık vermek isteyebilirsiniz. Bunu, &amp;ldquo;JFrame&amp;quot;i oluştururken bir dize ileterek veya &amp;ldquo;frame.setTitle(String title)&amp;rdquo; öğesini çağırarak yapabilirsiniz.
JFrame frame = new JFrame(&amp;quot;Super Awesome Window Title!</description>
    </item>
    
    <item>
      <title>GridBag Düzeni</title>
      <link>https://www.wikiod.com/tr/swing/gridbag-duzeni/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/gridbag-duzeni/</guid>
      <description>Sözdizimi # frame.setLayout(yeni GridBagLayout()); //Çerçeve için GridBagLayout&amp;rsquo;u ayarla pane.setLayout(yeni GridBagLayout()); // Panel için GridBagLayout&amp;rsquo;u ayarla JPanel bölmesi = yeni JPanel(yeni GridBagLayout()); // Panel için GridBagLayout&amp;rsquo;u ayarla GridBagConstraints c = new GridBagConstraints() //GridBagConstraint&amp;rsquo;i başlat GridBagLayout nasıl çalışır? # Düzenler, bileşenlerinizin yalnızca yan yana görüntülenmesini istemediğiniz zaman kullanılır. &amp;ldquo;GridBagLayout&amp;rdquo;, pencerenizi satırlara ve sütunlara böldüğü ve bileşenleri hangi satır ve sütuna yerleştireceğinize ve bileşenin kaç satır ve sütun büyüklüğünde olduğuna siz karar verdiğiniz için kullanışlıdır.</description>
    </item>
    
    <item>
      <title>GridLayout</title>
      <link>https://www.wikiod.com/tr/swing/gridlayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/gridlayout/</guid>
      <description>GridLayout nasıl çalışır? # Bir &amp;ldquo;GridLayout&amp;rdquo;, bileşenleri eşit hücre boyutlarına sahip bir ızgara içine yerleştiren bir yerleşim yöneticisidir. Aşağıdaki yöntemleri kullanarak satır, sütun, yatay boşluk ve dikey boşluk sayısını ayarlayabilirsiniz:
setRows(int satırlar) setColumns(int sütunlar) setHgap(int hgap) setVgap(int vgap) veya bunları aşağıdaki kurucularla ayarlayabilirsiniz:
GridLayout(int satırlar, int sütunlar) `GridLayout(int satırlar, int sütunlar, int hgap, int vgap)&#39; Satır veya sütun sayısı bilinmiyorsa, ilgili değişkeni &amp;lsquo;0&amp;rsquo; olarak ayarlayabilirsiniz. Örneğin:
yeni GridLayout(0, 3)
Bu, &amp;lsquo;GridLayout&amp;rsquo;un 3 sütuna ve gerektiği kadar satıra sahip olmasına neden olur.</description>
    </item>
    
    <item>
      <title>MVP Modeli</title>
      <link>https://www.wikiod.com/tr/swing/mvp-modeli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/mvp-modeli/</guid>
      <description>Basit MVP Örneği # MVP modelinin basit bir örnek kullanımını göstermek için, yalnızca bir düğme ve bir etiketle basit bir kullanıcı arabirimi oluşturan aşağıdaki kodu göz önünde bulundurun. Düğmeye tıklandığında, etiket, düğmenin tıklanma sayısıyla güncellenir.
5 sınıfımız var:
Model - Durumu korumak için POJO (MVP&amp;rsquo;de M) Görünüm - UI kodlu sınıf (MVP&amp;rsquo;de V) ViewListener - Görünümdeki eylemlere yanıt verme yöntemleri sağlayan arabirim Sunucu - Girişe yanıt verir ve görünümü günceller (MVP&amp;rsquo;de P) Uygulama - Her şeyi bir araya getirmek ve uygulamayı başlatmak için &amp;ldquo;ana&amp;rdquo; sınıf Yalnızca tek bir &amp;ldquo;count&amp;rdquo; değişkenini koruyan minimal bir &amp;ldquo;model&amp;rdquo; sınıfı.</description>
    </item>
    
    <item>
      <title>Bak ve Hisset&#39;i Kullanma</title>
      <link>https://www.wikiod.com/tr/swing/bak-ve-hisseti-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/bak-ve-hisseti-kullanma/</guid>
      <description>Sistem L&amp;amp;F&amp;rsquo;yi kullanma # Swing, epeyce yerel L&amp;amp;F&amp;rsquo;yi destekler.
Belirli bir L&amp;amp;F sınıfını aramadan her zaman kolayca bir tane kurabilirsiniz:
public class SystemLookAndFeel { public static void main ( final String[] args ) { // L&amp;amp;F installation should be performed within EDT (Event Dispatch Thread) // This is important to avoid any UI issues, exceptions or even deadlocks SwingUtilities.invokeLater ( new Runnable () { @Override public void run () { // Process of L&amp;amp;F installation might throw multiple exceptions // It is always up to you whether to handle or ignore them // In most common cases you would never encounter any of those try { // Installing native L&amp;amp;F as a current application L&amp;amp;F // We do not know what exactly L&amp;amp;F class is, it is provided by the UIManager UIManager.</description>
    </item>
    
    <item>
      <title>Tarz Belgesi</title>
      <link>https://www.wikiod.com/tr/swing/tarz-belgesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/tarz-belgesi/</guid>
      <description>Sözdizimi # doc.insertString(dizin, metin, nitelikler); // nitelikler bir AttributeSet olmalıdır DefaultStyledDocument Oluşturma # JTextPane&amp;rsquo;e StyledDocument Ekleme # DefaultStyledDocument Kopyalama # Bir DefaultStyledDocument&amp;rsquo;ı RTF&amp;rsquo;ye Serileştirme # </description>
    </item>
    
    <item>
      <title>Salıncak İşçileri ve EDT</title>
      <link>https://www.wikiod.com/tr/swing/salncak-iscileri-ve-edt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/salncak-iscileri-ve-edt/</guid>
      <description>Sözdizimi # genel soyut sınıf SwingWorker&amp;lt;T,V&amp;gt;
T - bu SwingWorker&amp;rsquo;ın doInBackground ve get yöntemleri tarafından döndürülen sonuç türü.
V - bu SwingWorker&amp;rsquo;ın yayınlama ve işleme yöntemleriyle ara sonuçları gerçekleştirmek için kullanılan tür.
T doInBackground() - Geçersiz kılınması gereken soyut işlev. Dönüş türü T&amp;rsquo;dir.
Ana ve olay gönderme iş parçacığı # Diğer tüm java programları gibi, her swing programı bir ana yöntemle başlar. Ana yöntem, ana iş parçacığı tarafından başlatılır. Ancak, olay gönderme iş parçacığında (veya kısa: EDT) Swing bileşenlerinin oluşturulması ve güncellenmesi gerekir.</description>
    </item>
    
    <item>
      <title>Grafikler</title>
      <link>https://www.wikiod.com/tr/swing/grafikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/grafikler/</guid>
      <description>Graphics sınıfını kullanma # Giriş # Graphics sınıfı, Jpanel gibi java bileşenleri üzerine çizim yapmanıza izin verir, diziler, çizgiler, şekiller ve görüntüler çizmek için kullanılabilir. Bu, çizim yapmak için argüman olarak alınan Graphics nesnesini kullanarak çizim yaptığınız JComponent ``paintComponent(Graphics g)` yöntemini geçersiz kılarak yapılır:
sınıf &amp;ldquo;Kurul&amp;rdquo; # import java.awt.*; import javax.swing.*; public class Board extends JPanel{ public Board() { setBackground(Color.WHITE); } @override public Dimension getPreferredSize() { return new Dimension(400, 400); } public void paintComponent(Graphics g) { super.</description>
    </item>
    
    <item>
      <title>MigLayout</title>
      <link>https://www.wikiod.com/tr/swing/miglayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swing/miglayout/</guid>
      <description>Sarma öğeleri # Bu örnek, ilk satırda 2 düğme olmak üzere toplam 3 düğmenin nasıl yerleştirileceğini gösterir. Sonra bir sarma gerçekleşir, böylece son düğme yeni bir satırda olur.
Kısıtlamalar basit dizelerdir, bu durumda bileşeni yerleştirirken &amp;ldquo;sarılır&amp;rdquo;.
public class ShowMigLayout { // Create the elements private final JFrame demo = new JFrame(); private final JPanel panel = new JPanel(); private final JButton button1 = new JButton(&amp;quot;First Button&amp;quot;); private final JButton button2 = new JButton(&amp;quot;Second Button&amp;quot;); private final JButton button3 = new JButton(&amp;quot;Third Button&amp;quot;); public static void main(String[] args) { ShowMigLayout showMigLayout = new ShowMigLayout(); SwingUtilities.</description>
    </item>
    
  </channel>
</rss>

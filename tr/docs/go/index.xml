<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eğitime Git on </title>
    <link>https://www.wikiod.com/tr/docs/go/</link>
    <description>Recent content in Eğitime Git on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go&#39;yu kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/go/goyu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/goyu-kullanmaya-baslama/</guid>
      <description>Selam Dünya! # Aşağıdaki kodu &amp;ldquo;hello.go&amp;rdquo; dosya adına yerleştirin:
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) } Oyun Alanı
Go doğru yüklendiğinde bu program şu şekilde derlenebilir ve çalıştırılabilir:
go run hello.go Çıktı: # Hello, 世界 Koddan memnun kaldığınızda, aşağıdakileri çalıştırarak yürütülebilir bir dosyaya derlenebilir:
go build hello.go Bu, geçerli dizinde işletim sisteminize uygun yürütülebilir bir dosya oluşturacak ve ardından aşağıdaki komutla çalıştırabilirsiniz:
Linux, OSX ve diğer Unix benzeri sistemler</description>
    </item>
    
    <item>
      <title>çapraz derleme</title>
      <link>https://www.wikiod.com/tr/go/capraz-derleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/capraz-derleme/</guid>
      <description>Go derleyicisi, işlemciler ve sistemler gibi birçok platform için ikili dosyalar üretebilir. Diğer derleyicilerin çoğundan farklı olarak, çapraz derleme için özel bir gereklilik yoktur, kullanımı normal derleme kadar kolaydır.
Sözdizimi # GOOS=linux GOARCH=amd64 derlemeye git Desteklenen İşletim Sistemi ve Mimari hedef kombinasyonları (kaynak)
$GOOS $GOARCH android kol darwin 386 darwin amd64 darwin kol darwin kol64 yusufçuk amd64 ücretsiz 386 ücretsiz amd64 ücretsiz kol linux 386 linux amd64 linux kol linux kol64 linux pc64 linux ppc64le linux mips64 linux mips64le netbsd 386 netbsd amd64 netbsd kol openbsd 386 openbsd amd64 openbsd kol plan9 386 plan9 amd64 güneş enerjisi amd64 pencereler 386 pencereler amd64 go build ile basit çapraz derleme # Proje dizininizden &amp;ldquo;go build&amp;rdquo; komutunu çalıştırın ve &amp;ldquo;GOOS&amp;rdquo; ve &amp;ldquo;GOARCH&amp;rdquo; ortam değişkenleriyle işletim sistemi ve mimari hedefini belirtin:</description>
    </item>
    
    <item>
      <title>Haritalar</title>
      <link>https://www.wikiod.com/tr/go/haritalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/haritalar/</guid>
      <description>Haritalar, sıralanmamış anahtar/değer çiftlerini depolamak için kullanılan veri türleridir, böylece belirli bir anahtarla ilişkili değeri aramak çok verimli olur. Anahtarlar benzersizdir. Temel veri yapısı, yeni öğeleri barındırmak için gerektiği gibi büyür, bu nedenle programcının bellek yönetimi konusunda endişelenmesine gerek kalmaz. Diğer dillerin karma tablolar, sözlükler veya ilişkisel diziler dediği şeye benzerler.
Sözdizimi # var mapName map[KeyType]ValueType // bir Harita tanımla var mapName = map[KeyType]ValueType{} // boş bir Harita bildir ve ata var mapName = map[KeyType]ValueType{key1: val1, key2: val2} // bir Harita bildir ve ata mapName := make(map[KeyType]ValueType) // varsayılan boyut haritasını bildir ve başlat mapName := make(map[KeyType]ValueType, length) // uzunluk boyut haritasını bildir ve başlat mapName := map[KeyType]ValueType{} // otomatik olarak bildir ve := ile boş bir Harita ata mapName := map[KeyType]ValueType{key1: value1, key2: value2} // otomatik olarak bildir ve := ile bir Harita atayın değer := haritaAdı[anahtar] // Anahtara göre değer alın değer, hasKey := mapName[key] // Anahtara göre değer alın, haritada anahtar varsa &amp;lsquo;hasKey&amp;rsquo; &amp;rsquo;true&amp;rsquo; olur mapName[anahtar] = değer // Değeri anahtara göre ayarla Go, bir hash tablosu uygulayan yerleşik bir &amp;ldquo;harita&amp;rdquo; türü sağlar.</description>
    </item>
    
    <item>
      <title>HTTP İstemcisi</title>
      <link>https://www.wikiod.com/tr/go/http-istemcisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/http-istemcisi/</guid>
      <description>Sözdizimi # resp, err := http.Get(url) // Varsayılan HTTP istemcisiyle bir HTTP GET isteği yapar. İstek başarısız olursa sıfır olmayan bir hata döndürülür. resp, err := http.Post(url, bodyType, body) // Varsayılan HTTP istemcisiyle bir HTTP POST isteği yapar. İstek başarısız olursa sıfır olmayan bir hata döndürülür. resp, err := http.PostForm(url, değerler) // Varsayılan HTTP istemcisiyle bir HTTP formu POST isteği yapar. İstek başarısız olursa sıfır olmayan bir hata döndürülür. Parametreler # parametre Ayrıntılar soluk Bir HTTP isteğine *http.</description>
    </item>
    
    <item>
      <title>eşzamanlılık</title>
      <link>https://www.wikiod.com/tr/go/eszamanllk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/eszamanllk/</guid>
      <description>Go&amp;rsquo;da eşzamanlılık, goroutinler kullanılarak sağlanır ve goroutinler arasındaki iletişim genellikle kanallarla yapılır. Ancak, muteksler ve bekleme grupları gibi diğer senkronizasyon araçları mevcuttur ve kanallardan daha uygun olduklarında kullanılmalıdır.
Sözdizimi # git doWork() // doWork işlevini bir goroutine olarak çalıştır ch := make(chan int) // int türünde yeni kanal bildir ch &amp;lt;- 1 // bir kanala gönderme değer = &amp;lt;-ch // bir kanaldan alma Go&amp;rsquo;daki goroutines, kullanım açısından diğer dillerdeki threadlere benzer.</description>
    </item>
    
    <item>
      <title>HTTP Sunucusu</title>
      <link>https://www.wikiod.com/tr/go/http-sunucusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/http-sunucusu/</guid>
      <description>http.ServeMux, HTTP istekleri için işleyicileri çağıran bir çoklayıcı sağlar.
Standart kitaplık çoklayıcısına alternatifler şunları içerir:
Gorilla Mux
Selam Dünya # Golang&amp;rsquo;da web sunucuları yazmaya başlamanın tipik yolu, standart kütüphane net/http modülünü kullanmaktır.
Bunun için bir öğretici de var burada.
Aşağıdaki kod da bunu kullanır. İşte mümkün olan en basit HTTP sunucusu uygulaması. Herhangi bir HTTP isteğine &amp;quot;Merhaba Dünya&amp;quot; yanıtını verir.
Aşağıdaki kodu çalışma alanlarınızda bir server.go dosyasına kaydedin.
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { // All URLs will be handled by this function // http.</description>
    </item>
    
    <item>
      <title>yapılar</title>
      <link>https://www.wikiod.com/tr/go/yaplar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/yaplar/</guid>
      <description>Yapılar, birlikte paketlenmiş çeşitli değişkenlerin kümeleridir. Yapının kendisi yalnızca değişkenleri içeren ve onları kolayca erişilebilir kılan bir package&amp;lsquo;dir.
C&amp;rsquo;den farklı olarak, Go&amp;rsquo;nun yapıları kendilerine eklenmiş yöntemlere sahip olabilir. Ayrıca arayüzleri uygulamalarına izin verir. Bu, Go&amp;rsquo;nun yapılarını nesnelere benzer kılar, ancak bunlar (muhtemelen kasıtlı olarak) kalıtım gibi nesne yönelimli dillerde bilinen bazı temel özellikleri kaçırırlar.
Yöntemler # Yapı yöntemleri, işlevlere çok benzer:
type User struct { name string } func (u User) Name() string { return u.</description>
    </item>
    
    <item>
      <title>Iota</title>
      <link>https://www.wikiod.com/tr/go/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/iota/</guid>
      <description>Iota, monoton olarak büyüyen bir başlangıç ​​değerinden sayısal sabitleri bildirmenin bir yolunu sağlar. Iota, sistem ve ağ programlamasında sıklıkla kullanılan bit maskelerini ve ilgili değerlere sahip diğer sabit listelerini bildirmek için kullanılabilir.
&amp;ldquo;iota&amp;rdquo; tanımlayıcısı, sabit listelerine değer atamak için kullanılır. Bir listede iota kullanıldığında, sıfır değeriyle başlar ve sabitler listesindeki her değer için birer birer artar ve her &amp;ldquo;const&amp;rdquo; anahtar sözcüğünde sıfırlanır. Diğer dillerin numaralandırmalarından farklı olarak, iota daha fazla esneklik sağlayan ifadelerde (örn.</description>
    </item>
    
    <item>
      <title>satıcılık</title>
      <link>https://www.wikiod.com/tr/go/satclk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/satclk/</guid>
      <description>Vendoring, Go projenizde kullandığınız tüm 3. parti paketlerinizin uygulamanız için geliştiren herkes için tutarlı olmasını sağlama yöntemidir.
Go paketiniz başka bir paketi içe aktardığında, derleyici normalde içe aktarılan projenin yolu için $GOPATH/src/ öğesini kontrol eder. Ancak paketiniz vendor adlı bir klasör içeriyorsa, derleyici önce bu klasörü kontrol edecektir. Bu, diğer tarafların paketlerini, kodlarını değiştirmek zorunda kalmadan kendi kod deponuza aktarabileceğiniz anlamına gelir.
Satıcılık, Go 1.6 ve sonraki sürümlerde standart bir özelliktir.</description>
    </item>
    
    <item>
      <title>Hata yönetimi</title>
      <link>https://www.wikiod.com/tr/go/hata-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/go/hata-yonetimi/</guid>
      <description>Go&amp;rsquo;da beklenmeyen durumlar istisnalar değil hatalar kullanılarak işlenir. Bu yaklaşım, try/catch bloklarıyla Java veya diğer nesne yönelimli dillerden ziyade errno kullanan C&amp;rsquo;ye benzer. Ancak, bir hata bir tamsayı değil, bir arayüzdür.
Başarısız olabilen bir işlev, genellikle son dönüş değeri olarak bir hata döndürür. Bu hata nil değilse, bir şeyler ters gitti ve işlevi çağıran buna göre işlem yapmalıdır.
Go&amp;rsquo;da bir hatayı nasıl _arttırmadığınıza dikkat edin. Bunun yerine, başarısızlık durumunda bir hata _döndürürsünüz.</description>
    </item>
    
  </channel>
</rss>

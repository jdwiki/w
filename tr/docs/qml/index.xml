<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qml Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/qml/</link>
    <description>Recent content in qml Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qml&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/qml/qmlye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qml/qmlye-baslarken/</guid>
      <description>Selam Dünya # Pencerenin ortasında &amp;ldquo;Merhaba Dünya&amp;rdquo; metnini gösteren basit bir uygulama.
import QtQuick 2.3 import QtQuick.Window 2.0 Window { visible: true width: 640 height: 480 title: qsTr(&amp;quot;Hello World&amp;quot;) //The method qsTr() is used for translations from one language to other. Text { text: qsTr(&amp;quot;Hello World&amp;quot;) anchors.centerIn: parent } } Kurulum # QML, platformlar arası uygulama çerçevesinin Qt daha yeni bir Sürümü ile birlikte gelir. Qt&amp;rsquo;nin en yeni Sürümünü İndirilenler bölümünde bulabilirsiniz.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;&#39;da özel öğeler oluşturma</title>
      <link>https://www.wikiod.com/tr/qml/c-da-ozel-ogeler-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qml/c-da-ozel-ogeler-olusturma/</guid>
      <description>C++&amp;lsquo;da özel öğeler oluşturma # QML, zengin görsel öğeler kümesiyle geldi. Yalnızca QML kullanarak bu öğelerle karmaşık uygulamalar oluşturabiliriz. Ayrıca Dikdörtgen, Düğme, Görüntü vb. gibi standart öğelere dayalı olarak kendi öğenizi oluşturmak çok kolaydır. Ayrıca, özel boyama ile öğe oluşturmak için Canvas gibi öğeleri kullanabiliriz. C++&amp;lsquo;ın yeteneklerine dokunmadan yalnızca QML&amp;rsquo;de çeşitli uygulamalar oluşturabileceğimiz görülüyor. Ve bu aslında doğru ama yine de bazen uygulamamızı daha hızlı hale getirmek istiyoruz veya onu Qt&amp;rsquo;nin gücüyle genişletmek veya QML&amp;rsquo;de bulunmayan bazı fırsatlar eklemek istiyoruz.</description>
    </item>
    
    <item>
      <title>Özellik bağlama</title>
      <link>https://www.wikiod.com/tr/qml/ozellik-baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qml/ozellik-baglama/</guid>
      <description>Bir nesnenin özelliğine, açıkça yeni bir değer atanana kadar sabit kalan statik bir değer atanabilir. Ancak, QML&amp;rsquo;den ve dinamik nesne davranışları için yerleşik desteğinden en iyi şekilde yararlanmak için çoğu QML nesnesi özellik bağlamalarını kullanır.
Özellik bağlamaları, geliştiricilerin farklı nesne özellikleri arasındaki ilişkileri belirlemesine olanak tanıyan temel bir QML özelliğidir. Bir özelliğin bağımlılıklarının değeri değiştiğinde, özellik belirtilen ilişkiye göre otomatik olarak güncellenir.
Daha karmaşık bir örnek # Basit örnekte, dikdörtgenin genişliğini ebeveyninin genişliğine ayarladık.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; ile entegrasyon</title>
      <link>https://www.wikiod.com/tr/qml/c-ile-entegrasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qml/c-ile-entegrasyon/</guid>
      <description>TreeView için basit bir model oluşturma # Qt 5.5&amp;rsquo;ten beri yeni bir harika TreeView var, hepimizin beklediği bir kontrol. TreeView, bir modeldeki öğelerin ağaç temsilini uygular. Genel olarak diğer QML görünümlerine benziyor - ListView veya TableView. Ancak TreeView&amp;rsquo;ın veri yapısı daha karmaşıktır.
ListView veya TableView içindeki bir veri, tek boyutlu düğüm dizisiyle temsil edilir. TreeView&amp;lsquo;de her düğüm kendi düğüm dizisini içerebilir. Bu nedenle, TreeView&amp;lsquo;deki diğer görünümlerden farklı olarak, belirtilen düğümü elde etmek için yalnızca öğenin satırını veya sütununu değil, üst düğümü de bilmeliyiz.</description>
    </item>
    
    <item>
      <title>Animasyon</title>
      <link>https://www.wikiod.com/tr/qml/animasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qml/animasyon/</guid>
      <description>Basit sayı animasyonu # Karşılaşabileceğiniz en temel animasyonlardan biri NumberAnimation. Bu animasyon, bir öğenin özelliğinin sayısal değerini ilk durumdan son duruma değiştirerek çalışır. Aşağıdaki tam örneği göz önünde bulundurun:
import QtQuick 2.7 import QtQuick.Controls 2.0 ApplicationWindow { visible: true width: 400 height: 640 Rectangle{ id: rect anchors.centerIn: parent height: 100 width: 100 color: &amp;quot;blue&amp;quot; MouseArea{ anchors.fill: parent onClicked: na.running = true } NumberAnimation { id: na //ID of the QML Animation type target: rect //The target item on which the animation should run property: &amp;quot;height&amp;quot; //The property of the target item which should be changed by the animator to show effect duration: 200 //The duration for which the animation should run from: rect.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/testng/</link>
    <description>Recent content in Test Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/testng/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testng&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/testng/testngye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/testng/testngye-baslarken/</guid>
      <description>Kurulum veya Kurulum # TestNG, kullanmak için JDK 7 veya üstünü gerektirir.
http://testng.org/doc/download.html&amp;rsquo;ye göre testng&amp;rsquo;yi kurmak için maven pom.xml veya gradle build.gradle dosyanıza testng bağımlılığı eklemeniz gerekir.
Uzman:
&amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;jcenter&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;bintray&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://jcenter.bintray.com&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.testng&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;testng&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.9.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; kepçe:
repositories { jcenter() } dependencies { testCompile &#39;org.testng:testng:6.9.12&#39; } Resmi sayfada daha fazla seçenek bulunabilir.
TestNG kullanarak hızlı program # package example; import org.testng.annotations.*; // using TestNG annotations public class Test { @BeforeClass public void setUp() { // code that will be invoked when this test is instantiated } @Test(groups = { &amp;quot;fast&amp;quot; }) public void aFastTest() { System.</description>
    </item>
    
    <item>
      <title>@Test Açıklaması</title>
      <link>https://www.wikiod.com/tr/testng/test-acklamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/testng/test-acklamas/</guid>
      <description>Sözdizimi # @Ölçek @Test(öznitelik1 = öznitelikDeğeri, öznitelik2 = öznitelikDeğeri, vb.) Parametreler # Parametre Ayrıntılar alwaysRun True olarak ayarlanırsa, bu test yöntemi, başarısız olan bir yönteme bağlı olsa bile her zaman çalıştırılır. dataProvider Bu test yöntemi için veri sağlayıcının adı. dataProviderClass Veri sağlayıcısının aranacağı sınıf. Belirtilmezse, veri sağlayıcı mevcut test yönteminin sınıfına veya temel sınıflarından birine bakılacaktır. Bu öznitelik belirtilirse, veri sağlayıcı yönteminin belirtilen sınıfta statik olması gerekir. dependsOnGroups Bu yöntemin bağlı olduğu grupların listesi.</description>
    </item>
    
    <item>
      <title>TestNG Grupları</title>
      <link>https://www.wikiod.com/tr/testng/testng-gruplar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/testng/testng-gruplar/</guid>
      <description>Sözdizimi # @Test(gruplar = {&amp;ldquo;grup1&amp;rdquo;, &amp;ldquo;grup.gerileme&amp;rdquo; }, bağımlıOnGroups = {&amp;ldquo;grup2&amp;rdquo;, &amp;ldquo;grup3&amp;rdquo;}) TestNG Grupları yapılandırması ve temel örnek # Gruplar, &amp;ldquo;Site&amp;rdquo; ve/veya &amp;ldquo;testng.xml&amp;rdquo; dosyasının &amp;ldquo;Test&amp;rdquo; öğesi altında yapılandırılabilir. &amp;rsquo;tesng.xml&amp;rsquo; içine dahil olarak işaretlenen tüm gruplar yürütme için dikkate alınır, hariç tutulanlar yoksayılır. Bir &amp;ldquo;@Test&amp;rdquo; yönteminin birden fazla grubu varsa ve bu gruplardan herhangi bir tek grup &amp;ldquo;testng.xml&amp;rdquo; içinde hariç tutulursa, o &amp;ldquo;@Test&amp;rdquo; yöntemi çalışmayacaktır.
Çalışan gruplar için &amp;ldquo;Test&amp;rdquo; düzeyindeki tipik &amp;ldquo;testng.xml&amp;rdquo; yapılandırması aşağıdadır:</description>
    </item>
    
    <item>
      <title>parametreli testler</title>
      <link>https://www.wikiod.com/tr/testng/parametreli-testler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/testng/parametreli-testler/</guid>
      <description>Veri sağlayıcılar # Veri sağlayıcılar, bir test içinde çalıştırılmak üzere birden çok test girişi oluşturmaya izin verir. Sayıların doğru bir şekilde iki katına çıktığını doğrulayan bir test düşünelim. Veri sağlayıcı oluşturmak için, &amp;ldquo;Object[][]&amp;rdquo; veya &amp;ldquo;Iterator&amp;lt;Object[]&amp;gt;&amp;rdquo; (ikincisi test girişlerinin tembel hesaplanmasına izin verir) döndüren statik bir yöntem sağlayın, &amp;ldquo;@DataProvider&amp;rdquo; notuyla açıklamalı, &amp;ldquo;özelliği&amp;rdquo; name` sağlayıcıyı tanımlayan benzersiz bir dizedir.
import org.testng.annotations.DataProvider; public class DoublingDataProvider { public final static String DOUBLING_DATA_PROVIDER = &amp;quot;doublingDataProvider&amp;quot;; @DataProvider(name = DOUBLING_DATA_PROVIDER) public static Object[][] doubling() { return new Object[][]{ new Object[]{1, 2}, new Object[]{2, 4}, new Object[]{3, 6} }; } } Yukarıdaki durumda, her bir &amp;ldquo;Nesne[]&amp;rdquo;, tek bir test durumu için bir veri kümesini temsil eder - burada iki katına çıkacak sayı, ardından iki katına çıkarıldıktan sonra beklenen değer.</description>
    </item>
    
    <item>
      <title>TestNG - Yürütme Prosedürü</title>
      <link>https://www.wikiod.com/tr/testng/testng---yurutme-proseduru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/testng/testng---yurutme-proseduru/</guid>
      <description>TestNG test API yöntemlerinin yürütme prosedürü # public class TestngAnnotation { // test case 1 @Test public void testCase1() { System.out.println(&amp;quot;in test case 1&amp;quot;); } // test case 2 @Test public void testCase2() { System.out.println(&amp;quot;in test case 2&amp;quot;); } @BeforeMethod public void beforeMethod() { System.out.println(&amp;quot;in beforeMethod&amp;quot;); } @AfterMethod public void afterMethod() { System.out.println(&amp;quot;in afterMethod&amp;quot;); } @BeforeClass public void beforeClass() { System.out.println(&amp;quot;in beforeClass&amp;quot;); } @AfterClass public void afterClass() { System.out.println(&amp;quot;in afterClass&amp;quot;); } @BeforeTest public void beforeTest() { System.</description>
    </item>
    
  </channel>
</rss>

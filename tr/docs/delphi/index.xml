<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embarcadero Delphi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/delphi/</link>
    <description>Recent content in Embarcadero Delphi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/delphi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Embarcadero Delphi&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/delphi/embarcadero-delphiyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/embarcadero-delphiyi-kullanmaya-baslama/</guid>
      <description>Selam Dünya # HelloWorld.dpr adlı bir dosyaya kaydedilen bu program, konsola &amp;ldquo;Merhaba Dünya&amp;rdquo; yazdıran bir konsol uygulamasını derler:
program HelloWorld; {$APPTYPE CONSOLE} begin WriteLn(&#39;Hello World&#39;); end. VCL&amp;rsquo;yi kullanarak &amp;lsquo;Merhaba Dünya&amp;rsquo;yı göster # Bu program, bir mesaj kutusuna &amp;ldquo;Merhaba Dünya&amp;quot;yı yazdırmak için Delphi&amp;rsquo;nin varsayılan UI bileşenleri kitaplığı olan VCL&amp;rsquo;yi kullanır. VCL, yaygın olarak kullanılan WinAPI bileşenlerinin çoğunu kapsar. Bu şekilde çok daha kolay kullanılabilirler, örn. Pencere Kolları ile çalışmaya gerek kalmadan.</description>
    </item>
    
    <item>
      <title>try, hariç ve nihayet kullanımı</title>
      <link>https://www.wikiod.com/tr/delphi/try-haric-ve-nihayet-kullanm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/try-haric-ve-nihayet-kullanm/</guid>
      <description>Sözdizimi # Try-except: [[[on E:ExceptionType do] dışında [ifadeleri] deneyin statement]] [else statement] | [statements] end;
Try-finally: try [statements] finally [statements] end;
Yeni bir nesnenin istisnasız güvenli dönüşü # Bir işlev bir nesneyi döndürdüğünde (arayan tarafından iletilen bir nesneyi kullanmaktan farklı olarak), bir istisnanın nesnenin sızmasına neden olmamasına dikkat edin.
function MakeStrings: TStrings; begin // Create a new object before entering the try-block. Result := TStringList.Create; try // Execute code that uses the new object and prepares it for the caller.</description>
    </item>
    
    <item>
      <title>GUI&#39;yi duyarlı tutarken bir iş parçacığı çalıştırma</title>
      <link>https://www.wikiod.com/tr/delphi/guiyi-duyarl-tutarken-bir-is-parcacg-calstrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/guiyi-duyarl-tutarken-bir-is-parcacg-calstrma/</guid>
      <description>Arka plan çalışması için dizileri kullanan duyarlı GUI ve dizilerden geri bildirimde bulunmak için PostMessage # Uzun bir süreç çalıştırırken bir GUI&amp;rsquo;yi duyarlı tutmak, GUI&amp;rsquo;nin mesaj kuyruğunu işlemesine izin vermek için bazı çok ayrıntılı &amp;ldquo;geri aramalar&amp;rdquo; veya (arka plan) (işçi) iş parçacıklarının kullanımını gerektirir.
Bazı işler yapmak için herhangi bir sayıda iş parçacığı başlatmak genellikle bir sorun değildir. Eğlence, GUI&amp;rsquo;nin ara ve nihai sonuçları göstermesini veya ilerleme hakkında rapor vermesini istediğinizde başlar.</description>
    </item>
    
    <item>
      <title>Teller</title>
      <link>https://www.wikiod.com/tr/delphi/teller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/teller/</guid>
      <description>Dize türleri # Delphi aşağıdaki dize türlerine sahiptir (popülerlik sırasına göre):
Tip Maksimum uzunluk Minimum boyut Açıklama dize 2GB 16 bayt Yönetilen bir dize. Delphi 2007&amp;rsquo;den itibaren &amp;lsquo;AnsiString&amp;rsquo; için bir takma ad ve Delphi 2009&amp;rsquo;dan itibaren &amp;lsquo;UnicodeString&amp;rsquo; için bir takma ad. UnicodeString 2GB 16 bayt UTF-16 biçiminde yönetilen bir dize. AnsiString 2GB 16 bayt Unicode öncesi ANSI biçiminde yönetilen bir dize. Delphi 2009 itibariyle, açık bir kod sayfası göstergesi taşır. UTF8String 2GB 16 bayt UTF-8 kod sayfasıyla &amp;ldquo;AnsiString&amp;rdquo; olarak uygulanan UTF-8 biçiminde yönetilen bir dize.</description>
    </item>
    
    <item>
      <title>Zaman aralıkları ölçümü</title>
      <link>https://www.wikiod.com/tr/delphi/zaman-aralklar-olcumu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/zaman-aralklar-olcumu/</guid>
      <description>Windows API GetTickCount&amp;rsquo;u Kullanma # Windows API &amp;ldquo;GetTickCount&amp;rdquo; işlevi, sistemin (bilgisayarın) başlatılmasından bu yana geçen milisaniye sayısını döndürür. En basit örnek aşağıdaki gibidir:
var Start, Stop, ElapsedMilliseconds: cardinal; begin Start := GetTickCount; // do something that requires measurement Stop := GetTickCount; ElapsedMillseconds := Stop - Start; end; &amp;ldquo;GetTickCount&amp;quot;un 32-bit &amp;ldquo;DWORD&amp;rdquo; döndürdüğünü ve böylece her 49.7 günde bir tamamlandığını unutmayın. Sarmayı önlemek için, &amp;ldquo;GetTickCount64&amp;rdquo; (Windows Vista&amp;rsquo;dan beri mevcuttur) veya kene farkını hesaplamak için özel rutinler kullanabilirsiniz:</description>
    </item>
    
    <item>
      <title>jenerik</title>
      <link>https://www.wikiod.com/tr/delphi/jenerik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/jenerik/</guid>
      <description>Dinamik bir diziyi genel TArray.Sort aracılığıyla sıralama # uses System.Generics.Collections, { TArray } System.Generics.Defaults; { TComparer&amp;lt;T&amp;gt; } var StringArray: TArray&amp;lt;string&amp;gt;; { Also works with &amp;quot;array of string&amp;quot; } ... { Sorts the array case insensitive } TArray.Sort&amp;lt;string&amp;gt;(StringArray, TComparer&amp;lt;string&amp;gt;.Construct( function (const A, B: string): Integer begin Result := string.CompareText(A, B); end )); TList&amp;lsquo;nin basit kullanımı # var List: TList&amp;lt;Integer&amp;gt;; ... List := TList&amp;lt;Integer&amp;gt;.Create; { Create List } try List.Add(100); { Add Items } List.</description>
    </item>
    
    <item>
      <title>Döngüler için</title>
      <link>https://www.wikiod.com/tr/delphi/donguler-icin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/donguler-icin/</guid>
      <description>Sözdizimi # OrdinalVariable için := LowerOrdinalValue ila UpperOrdinalValue başlangıç ​​{loop-body} end;
OrdinalVariable için := UpperOrdinalValue aşağı LowerOrdinalValue başlangıç ​​{loop-body} end;
Koleksiyondaki EnumerableVariable için {loop-body} bitişiyle başlar;
Delphi&amp;rsquo;nin &amp;lsquo;for&amp;rsquo;-döngüsü sözdizimi, adım miktarını &amp;lsquo;1&amp;rsquo;den başka bir değere değiştirmek için hiçbir şey sağlamaz.
Değişken sıra değerleriyle döngü yaparken, örn. &amp;ldquo;Tamsayı&amp;rdquo; türündeki yerel değişkenler, üst ve alt değerler yalnızca bir kez belirlenecektir. Bu tür değişkenlerde yapılan değişikliklerin döngü yineleme sayısı üzerinde hiçbir etkisi olmayacaktır.</description>
    </item>
    
    <item>
      <title>Arayüzler</title>
      <link>https://www.wikiod.com/tr/delphi/arayuzler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/arayuzler/</guid>
      <description>Arayüzler, açık uygulama bilgisi sağlamadan, gerekli bilgileri ve yöntem ve sınıfların beklenen çıktısını tanımlamak için kullanılır.
Sınıflar arabirimleri uygulayabilir ve arabirimler birbirlerinden devralabilir. Bir sınıf bir arabirimi uyguluyorsa, bu, arabirim tarafından sunulan tüm işlevlerin ve prosedürlerin sınıfta mevcut olduğu anlamına gelir.
Delphi&amp;rsquo;deki arayüzlerin özel bir yönü, arayüz örneklerinin referans sayımına dayalı bir ömür yönetimine sahip olmasıdır. Sınıf örneklerinin ömrü manuel olarak yönetilmelidir.
Tüm bu hususlar göz önüne alındığında, farklı hedeflere ulaşmak için arayüzler kullanılabilir:</description>
    </item>
    
    <item>
      <title>Bir arka plan iş parçacığında güncellenmiş TDataSet verilerini alma</title>
      <link>https://www.wikiod.com/tr/delphi/bir-arka-plan-is-parcacgnda-guncellenmis-tdataset-verilerini-alma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/bir-arka-plan-is-parcacgnda-guncellenmis-tdataset-verilerini-alma/</guid>
      <description>Bu FireDAC örneği ve göndermeyi planladığım diğerleri, veri kümesini eşzamansız olarak açmak için yerel çağrıların kullanılmasını önleyecektir.
FireDAC örneği # Aşağıdaki kod örneği, bir MSSql Sunucusundan kayıtları almanın bir yolunu göstermektedir. FireDAC kullanarak bir arka plan iş parçacığında. Delphi 10 Seattle için test edildi
Yazıldığı gibi:
İş parçacığı, kendi TFDConnection ve TFDQuery&amp;rsquo;sini kullanarak verileri alır ve aktarır Sychronize() çağrısında formun FDQuery&amp;rsquo;sindeki veriler.
Yürütme, verileri yalnızca bir kez alır. çalıştırmak için değiştirilebilir VCL dizisinden gönderilen bir mesaja yanıt olarak tekrar tekrar sorgulayın.</description>
    </item>
    
    <item>
      <title>Diğer programları çalıştırma</title>
      <link>https://www.wikiod.com/tr/delphi/diger-programlar-calstrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/delphi/diger-programlar-calstrma/</guid>
      <description>Süreci oluşturmak # Aşağıdaki işlev, diğer programları başlatmak için &amp;lsquo;CreateProcess&amp;rsquo; Windows API&amp;rsquo;sini kullanma kodunu içerir.
Yapılandırılabilir ve arama işlemi bitene kadar bekleyebilir veya hemen geri dönebilir.
parametreler:
&amp;ldquo;DosyaAdı&amp;rdquo; - yürütülebilir dosyanın tam yolu
Params - komut satırı parametreleri veya boş dize kullanın
&amp;ldquo;Klasör&amp;rdquo; - çağrılan program için çalışma klasörü - &amp;ldquo;DosyaAdı&amp;quot;ndan boş yol çıkarılacaksa
WaitUntilTerminated - eğer gerçek fonksiyon işlemin yürütülmesini bitirmesini bekleyecekse
WaitUntilIdle - true işlevi WaitForInputIdle işlevini çağırırsa ve belirtilen işlem ilk girişini işlemeyi bitirene ve bekleyen kullanıcı girişi kalmayana kadar beklerse</description>
    </item>
    
  </channel>
</rss>

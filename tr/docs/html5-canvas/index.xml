<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>html5-tuval Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/html5-canvas/</link>
    <description>Recent content in html5-tuval Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/html5-canvas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>html5-canvas&#39;ı kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/html5-canvas/html5-canvas-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/html5-canvas-kullanmaya-baslama/</guid>
      <description>Tuval üzerinde fare konumunu algılama # Bu örnek, HTML5 Kanvas&amp;rsquo;ın sol üst köşesi &amp;ldquo;(0,0)&amp;rdquo; olacak şekilde fare konumunun tuvale göre nasıl alınacağını gösterecektir. &amp;ldquo;e.clientX&amp;rdquo; ve &amp;ldquo;e.clientY&amp;rdquo;, fare konumlarını belgenin üst kısmına göre alır, bunu tuvalin üst kısmına göre değiştirmek için, ekranın &amp;ldquo;sol&amp;rdquo; ve &amp;ldquo;sağ&amp;rdquo; konumlarını çıkarırız. X ve Y istemcisinden tuval.
var canvas = document.getElementById(&amp;quot;myCanvas&amp;quot;); var ctx = canvas.getContext(&amp;quot;2d&amp;quot;); ctx.font = &amp;quot;16px Arial&amp;quot;; canvas.addEventListener(&amp;quot;mousemove&amp;quot;, function(e) { var cRect = canvas.getBoundingClientRect(); // Gets CSS pos, and width/height var canvasX = Math.</description>
    </item>
    
    <item>
      <title>Animasyon</title>
      <link>https://www.wikiod.com/tr/html5-canvas/animasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/animasyon/</guid>
      <description>Animasyon döngüleri için requestAnimationFrame() DEĞİL setInterval() kullanın # &amp;ldquo;requestAnimationFrame&amp;rdquo;, setInterval&amp;rsquo;e benzer, ancak şu önemli iyileştirmelere sahiptir:
Animasyon kodu, verimlilik için ekran yenilemeleriyle senkronize edilir Temizle + yeniden çizme kodu programlanır, ancak hemen yürütülmez. Tarayıcı, yalnızca ekran yenilenmeye hazır olduğunda temizle + yeniden çizme kodunu yürütür. Yenileme döngüsüyle bu senkronizasyon, kodunuza tamamlanması için en uygun zamanı vererek animasyon performansınızı artırır.
Her döngü, başka bir döngünün başlamasına izin verilmeden önce tamamlanır. Bu, kullanıcının çizimin eksik bir versiyonunu gördüğü &amp;ldquo;yırtılmayı&amp;rdquo; önler.</description>
    </item>
    
    <item>
      <title>getImageData ve putImageData ile Piksel Manipülasyonu</title>
      <link>https://www.wikiod.com/tr/html5-canvas/getimagedata-ve-putimagedata-ile-piksel-manipulasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/getimagedata-ve-putimagedata-ile-piksel-manipulasyonu/</guid>
      <description>&amp;ldquo;context.getImageData&amp;quot;ya giriş # Html5 Canvas, tuval üzerindeki herhangi bir pikselin rengini alma ve değiştirme yeteneği verir.
** Canvas&amp;rsquo;ın piksel işlemesini şu amaçlarla kullanabilirsiniz:**
Bir görüntü için bir renk seçici oluşturun veya bir renk tekerleğinde bir renk seçin. Bulanıklaştırma ve kenar algılama gibi karmaşık görüntü filtreleri oluşturun. Bir görüntünün herhangi bir bölümünü piksel düzeyinde yeniden renklendirin (HSL kullanıyorsanız, önemli Aydınlatma ve Doygunluğu koruyarak bir görüntüyü yeniden renklendirebilirsiniz, böylece sonuç, görüntüye boyayla boyanmış gibi görünmez).</description>
    </item>
    
    <item>
      <title>Sorumlu tasarım</title>
      <link>https://www.wikiod.com/tr/html5-canvas/sorumlu-tasarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/sorumlu-tasarm/</guid>
      <description>Duyarlı bir tam sayfa tuval oluşturma # Javascript aracılığıyla olayları yeniden boyutlandırmaya yanıt veren tam sayfa bir tuval oluşturmak ve kaldırmak için başlangıç ​​kodu.
var canvas; // Global canvas reference var ctx; // Global 2D context reference // Creates a canvas function createCanvas () { const canvas = document.createElement(&amp;quot;canvas&amp;quot;); canvas.style.position = &amp;quot;absolute&amp;quot;; // Set the style canvas.style.left = &amp;quot;0px&amp;quot;; // Position in top left canvas.style.top = &amp;quot;0px&amp;quot;; canvas.style.zIndex = 1; document.</description>
    </item>
    
    <item>
      <title>Medya türleri ve tuval</title>
      <link>https://www.wikiod.com/tr/html5-canvas/medya-turleri-ve-tuval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/medya-turleri-ve-tuval/</guid>
      <description>Bu konu, çeşitli ortam türlerini ve bunların 2B arabirimde tuvalle nasıl kullanılabileceğini ele almaktır.
Medya türlerinin genel ve biçime özel kategorileri vardır
Medya türleri
Animasyonlar Videolar Görüntüler HD görüntüler Vektör resmi Hareketli görüntüler Medya biçimleri -Jpg/Jpeg
png Gif SVG M-JPEG Webm Webp Görüntüler
Tarayıcılar tarafından desteklenen çok çeşitli görüntü biçimleri vardır, ancak hiçbir tarayıcı hepsini desteklemez. Kullanmak istediğiniz belirli görüntü biçimleriniz varsa Wiki Tarayıcıları ve desteklenen görüntü biçimleri iyi bir genel bakış sağlar.</description>
    </item>
    
    <item>
      <title>Kompozisyon</title>
      <link>https://www.wikiod.com/tr/html5-canvas/kompozisyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/kompozisyon/</guid>
      <description>&amp;ldquo;Destination-over&amp;rdquo; ile mevcut şekillerin arkasına çizin # context.globalCompositeOperation = &amp;quot;destination-over&amp;quot; &amp;ldquo;destination-over&amp;rdquo; kompozisyonu yeni çizimi mevcut çizimlerin altına yerleştirir.
context.drawImage(rainy,0,0); context.globalCompositeOperation=&#39;destination-over&#39;; // sunny UNDER rainy context.drawImage(sunny,0,0); &amp;ldquo;Hedef dışı&amp;rdquo; ile mevcut şekilleri silin # context.globalCompositeOperation = &amp;quot;destination-out&amp;quot; &amp;ldquo;hedef dışı&amp;rdquo; birleştirme, mevcut çizimleri silmek için yeni şekiller kullanır.
Yeni şekil aslında çizilmez - sadece mevcut pikselleri silmek için &amp;ldquo;çerez kesici&amp;rdquo; olarak kullanılır.
context.drawImage(apple,0,0); context.globalCompositeOperation = &#39;destination-out&#39;; // bitemark erases context.drawImage(bitemark,100,40); Varsayılan birleştirme: Mevcut şekiller üzerine yeni şekiller çizilir # context.</description>
    </item>
    
    <item>
      <title>Görüntüler</title>
      <link>https://www.wikiod.com/tr/html5-canvas/goruntuler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/goruntuler/</guid>
      <description>Tuval kullanarak görüntü kırpma # Bu örnek, bir görüntü ve kırpma koordinatlarını alan ve kırpılan görüntüyü döndüren basit bir görüntü kırpma işlevini gösterir.
function cropImage(image, croppingCoords) { var cc = croppingCoords; var workCan = document.createElement(&amp;quot;canvas&amp;quot;); // create a canvas workCan.width = Math.floor(cc.width); // set the canvas resolution to the cropped image size workCan.height = Math.floor(cc.height); var ctx = workCan.getContext(&amp;quot;2d&amp;quot;); // get a 2D rendering interface ctx.drawImage(image, -Math.floor(cc.x), -Math.floor(cc.y)); // draw the image offset to place it correctly on the cropped region image.</description>
    </item>
    
    <item>
      <title>Metin</title>
      <link>https://www.wikiod.com/tr/html5-canvas/metin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/metin/</guid>
      <description>Çizim Metni # Tuval üzerine çizim yapmak yalnızca şekiller ve görüntülerle sınırlı değildir. Ayrıca tuvale metin de çizebilirsiniz.
Tuval üzerine metin çizmek için tuvale bir referans alın ve ardından bağlamda &amp;lsquo;fillText&amp;rsquo; yöntemini çağırın.
var canvas = document.getElementById(&#39;canvas&#39;); var ctx = canvas.getContext(&#39;2d&#39;); ctx.fillText(&amp;quot;My text&amp;quot;, 0, 0); &amp;ldquo;fillText&amp;quot;e iletilen üç gerekli bağımsız değişken şunlardır:
Görüntülemek istediğiniz metin Yatay (x ekseni) konumu Dikey (y ekseni) konumu Ek olarak, metninizin piksel cinsinden maksimum genişliğini belirtmek için kullanabileceğiniz dördüncü bir isteğe bağlı bağımsız değişken vardır.</description>
    </item>
    
    <item>
      <title>Bir Yolda Gezinme</title>
      <link>https://www.wikiod.com/tr/html5-canvas/bir-yolda-gezinme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/bir-yolda-gezinme/</guid>
      <description>Eğrideki noktayı bul # Bu örnek, bir bezier veya kübik eğri üzerinde &amp;lsquo;pozisyon&amp;rsquo;da bir nokta bulur, burada &amp;lsquo;pozisyon&amp;rsquo; eğri üzerindeki birim mesafedir 0 &amp;lt;= &amp;lsquo;konum&amp;rsquo; &amp;lt;= 1. Pozisyon aralığa kenetlenir, böylece değerler &amp;lt; 0 veya &amp;gt; ise 1 geçilirse sırasıyla 0,1 olarak ayarlanırlar.
İkinci dereceden bezier için 6 koordinatını veya kübik için 8 fonksiyonunu iletin.
Son isteğe bağlı argüman, döndürülen vektördür (nokta). Verilmezse oluşturulur.
Örnek kullanım # var p1 = {x : 10 , y : 100}; var p2 = {x : 100, y : 200}; var p3 = {x : 200, y : 0}; var p4 = {x : 300, y : 100}; var point = {x : null, y : null}; // for cubic beziers point = getPointOnCurve(0.</description>
    </item>
    
    <item>
      <title>Çarpışmalar ve Kavşaklar</title>
      <link>https://www.wikiod.com/tr/html5-canvas/carpsmalar-ve-kavsaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/html5-canvas/carpsmalar-ve-kavsaklar/</guid>
      <description>2 daire çarpışıyor mu? # // circle objects: { x:, y:, radius: } // return true if the 2 circles are colliding // c1 and c2 are circles as defined above function CirclesColliding(c1,c2){ var dx=c2.x-c1.x; var dy=c2.y-c1.y; var rSum=c1.radius+c2.radius; return(dx*dx+dy*dy&amp;lt;=rSum*rSum); } 2 dikdörtgen çarpışıyor mu? # // rectangle objects { x:, y:, width:, height: } // return true if the 2 rectangles are colliding // r1 and r2 are rectangles as defined above function RectsColliding(r1,r2){ return !</description>
    </item>
    
  </channel>
</rss>

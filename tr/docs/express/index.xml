<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ekspres Öğretici on </title>
    <link>https://www.wikiod.com/tr/docs/express/</link>
    <description>Recent content in ekspres Öğretici on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ekspres kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/express/ekspres-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/ekspres-kullanmaya-baslama/</guid>
      <description>Merhaba Dünya Uygulaması, ExpressJS 4 ve Node &amp;gt;= 4 kullanarak # Önsöz # Bu proje için &amp;ldquo;düğüm &amp;gt;= 4&amp;rdquo; ve &amp;ldquo;ekspres 4&amp;quot;e ihtiyacınız olacak. En son &amp;ldquo;düğüm&amp;rdquo; dağıtımını indirme sayfalarından alabilirsiniz.
Bu öğreticiden önce, düğüm projenizi çalıştırarak başlatmalısınız.
$ npm init komut satırından ve istediğiniz bilgileri doldurun. package.json dosyasını düzenleyerek bilgileri istediğiniz zaman değiştirebileceğinizi unutmayın.
Kurulum # &amp;rsquo;npm&amp;rsquo; ile &amp;rsquo;express&amp;rsquo;i kurun:
$ npm install --save express Express&amp;rsquo;i düğüm modülü olarak kurduktan sonra giriş noktamızı oluşturabiliriz.</description>
    </item>
    
    <item>
      <title>Hata yönetimi</title>
      <link>https://www.wikiod.com/tr/express/hata-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/hata-yonetimi/</guid>
      <description>Sözdizimi # app.use(function(err, req, res, next) {}) // Temel ara katman yazılımı Parametreler # İsim Açıklama &amp;ldquo;hata&amp;rdquo; Hata bilgisine sahip nesne &amp;ldquo;gerekli&amp;rdquo; HTTP istek nesnesi res HTTP yanıt nesnesi &amp;lsquo;sonraki&amp;rsquo; sonraki ara katman yazılımının yürütülmesini başlatmak için kullanılan işlev Temel örnek # Diğer ara katman işlevlerinin aksine, hata işleme ara katman işlevlerinin üç yerine dört argümanı vardır: (err, req, res, next).
Örneklem:
app.use(function(err, req, res, next) { console.error(err.stack); res.status(500).send(&#39;Error found!&#39;); }); </description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/express/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/yonlendirme/</guid>
      <description>Merhaba Dünyayı Yönlendirme # Ana uygulama dosyası, rotaların tanımlandığı rota dosyasını yükler.
app.js
var express = require(&#39;express&#39;); var app = express(); app.use(&#39;/&#39;, require(&#39;./routes&#39;)); app.listen(&#39;3000&#39;); route.js
var router = require(&#39;express&#39;).Router(); router.get(&#39;/&#39;, function(req, res) { res.send(&#39;Hello World!&#39;); }); module.exports = router; Birden Çok Rota # Ana uygulama dosyası, rotaları tanımlamak istediğiniz tüm rota dosyalarını yükler. Bunu yapmak için aşağıdaki dizin yapısına ihtiyacımız var: app.js rotalar/index.js route/users.js
app.js
var express = require(&#39;express&#39;); var app = express(); app.</description>
    </item>
    
    <item>
      <title>ekspres jeneratör</title>
      <link>https://www.wikiod.com/tr/express/ekspres-jenerator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/ekspres-jenerator/</guid>
      <description>Parametreler # parametre Tanım -h, &amp;ndash;help çıktı kullanım bilgileri -V, &amp;ndash;versiyon sürüm numarasını çıkar -e, &amp;ndash;ejs pjs (Gömülü JavaScript) şablonlama motoru desteği ekleyin (varsayılanı, Pug olarak yeniden adlandırılan yeşim taşıdır) &amp;ndash;hbs motor desteği şablonlama gidon ekle -H, &amp;ndash;hogan hogan.js motor desteği ekle &amp;ndash;git .gitignore ekle -f, &amp;ndash;kuvvet boş olmayan dizine zorla -c &amp;lt;motor&amp;gt;, &amp;ndash;css &amp;lt;motor&amp;gt; stil sayfası &amp;lt;engine&amp;gt; desteği ekle (daha az, ekran kalemi, pusula, sass) (varsayılan css&amp;rsquo;dir) Ekspres oluşturucu, bir projeyi hızla hayata geçirmek ve ilerlemek için harika bir araçtır.</description>
    </item>
    
    <item>
      <title>Motor kurulumunu görüntüle</title>
      <link>https://www.wikiod.com/tr/express/motor-kurulumunu-goruntule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/motor-kurulumunu-goruntule/</guid>
      <description>Genellikle sunucunun sayfaları dinamik olarak sunması gerekir. Örneğin, Bay X kullanıcısı sayfayı ziyaret eder ve &amp;ldquo;Bay X ana sayfama hoş geldiniz&amp;rdquo; gibi bir şey görür. Bu durumda görünümler yardımcı olabilir. Bir tablo görünümünü doldurmak bile olabilir kullanışlı ol. Görünüm motoru kullanılarak değişkenler dinamik olarak HTML&amp;rsquo;ye enjekte edilebilir. Görünüm motoru, görünümleri oluşturan bir şeydir. Görünümleri, istek üzerine görünüm ve sunum adlı bir klasörde sunulmak üzere tutabilir. Klasörün yolu, yol kullanılarak Express&amp;rsquo;e gösterilebilir.</description>
    </item>
    
    <item>
      <title>Statik dosyaları işleme</title>
      <link>https://www.wikiod.com/tr/express/statik-dosyalar-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/statik-dosyalar-isleme/</guid>
      <description>Sözdizimi # Statik dosyaları (Görüntüler, CSS, JS dosyaları vb.) sunmak için express.static ara katman işlevini kullanın. Dosyaları doğrudan sunmak için varlıkları içeren dizinin adını express.static&amp;rsquo;e iletin. (Temel Örneğe bakın) Birden çok dizini kullanabilirsiniz, yalnızca express.static&amp;lsquo;i birden çok kez çağırmanız yeterlidir. Unutmayın, Express, express.static ile dizinleri ayarladığınız sırayla dosyaları arar. (Birden Çok Dizin Örneğine bakın) express.static ile bir sanal yol öneki (yani yolun dosya sisteminde gerçekten bulunmadığı bir yer) oluşturabilirsiniz, sadece bir bağlama yolu belirtin.</description>
    </item>
    
    <item>
      <title>Bağlamak</title>
      <link>https://www.wikiod.com/tr/express/baglamak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/baglamak/</guid>
      <description>Bağlanın ve İfade Edin # Express, Express&amp;rsquo;in ara yazılım işlevselliğini sağlayan Connect&amp;rsquo;i temel alır. Connect&amp;rsquo;in ne olduğunu anlamak için ekspres kullandığınızda kullandığınız temel uygulama yapısını sağladığını görebilirsiniz.
const connect = require(&#39;connect&#39;) const app = connect() app.listen(3000) Bu, tüm isteklere 404 yanıt verecek &amp;ldquo;boş&amp;rdquo; bir http sunucusu açacaktır.
Ara katman yazılımı # Ara yazılım, genellikle listen çağrılmadan önce, uygulama nesnesine eklenir. Basit bir günlük ara yazılımı örneği:
app.use(function (req, res, next) { console.</description>
    </item>
    
    <item>
      <title>Ekspres Veritabanı Entegrasyonu</title>
      <link>https://www.wikiod.com/tr/express/ekspres-veritaban-entegrasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/ekspres-veritaban-entegrasyonu/</guid>
      <description>Düğüm ve Ekspres ile MongoDB&amp;rsquo;ye bağlanın # İlk olarak, mongodb ve express&amp;lsquo;i npm yoluyla yüklediğinizden emin olun. Ardından, geleneksel olarak db.js başlıklı bir dosyada aşağıdaki kodu kullanın:
var MongoClient = require(&#39;mongodb&#39;).MongoClient var state = { db: null, } exports.connect = function(url, done) { if (state.db) return done() MongoClient.connect(url, function(err, db) { if(err) return done(err) state.db = db done() }) } exports.get = function() { return state.db } exports.close = function(done) { if (state.</description>
    </item>
    
    <item>
      <title>Ekspres Ara Yazılım Yazma</title>
      <link>https://www.wikiod.com/tr/express/ekspres-ara-yazlm-yazma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/ekspres-ara-yazlm-yazma/</guid>
      <description>Sözdizimi # Kullanmak istediğiniz ekspres örneğini belirtin. Bu genellikle uygulamadır. İşlevin uygulanacağı HTTP yöntemini tanımlayın. Örnekte bu get şeklindedir. Fonksiyonun uygulanacağı yolu tanımlayın. Örnekte bu &amp;rsquo;/&amp;rsquo; şeklindedir. function anahtar sözcüğüyle bir işlev olarak tanımlayın. Gerekli parametreleri ekleyin: req, res, next. (Açıklamalar bölümündeki nota bakın) İstediğinizi yapmak için fonksiyona biraz kod koyun Parametreler # parametre Ayrıntılar istek İstek nesnesi. yeniden Yanıt nesnesi. sonraki Sonraki() ara katman yazılımı çağrısı. Bir ara katman yazılımı işlevi, uygulamanın istek-yanıt döngüsündeki istek nesnesine (req), yanıt nesnesine (res) ve next() ara katman yazılımı işlevine erişimi olan bir işlevdir.</description>
    </item>
    
    <item>
      <title>Express&#39;te Yönlendirmeyi Açıklayın</title>
      <link>https://www.wikiod.com/tr/express/expresste-yonlendirmeyi-acklayn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/express/expresste-yonlendirmeyi-acklayn/</guid>
      <description>app.route kullanarak bir rota yolu için zincirlenebilir rota işleyicileri # var express = require(&#39;express&#39;); var app = express(); var router = express.Router(); app.route(&#39;/user&#39;) .get(function (req, res) { res.send(&#39;Get a random user&#39;) }) .post(function (req, res) { res.send(&#39;Add a user&#39;) }) .put(function (req, res) { res.send(&#39;Update the user details&#39;) }) .delete(function (req, res) { res.send(&#39;Delete a user&#39;) }); Ekspres Yönlendirici # Ekspres yönlendirici, birden çok &amp;ldquo;mini uygulama&amp;rdquo; oluşturmanıza olanak tanır, böylece api, genel, auth ve diğer rotalarınızı ayrı yönlendirme sistemlerinde adlandırabilirsiniz.</description>
    </item>
    
  </channel>
</rss>

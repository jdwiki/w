<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fonksiyonel programlama Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/functional-programming/</link>
    <description>Recent content in fonksiyonel programlama Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>İşlevsel programlamaya başlarken</title>
      <link>https://www.wikiod.com/tr/functional-programming/islevsel-programlamaya-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/functional-programming/islevsel-programlamaya-baslarken/</guid>
      <description>Saf işlevler # Saf işlevler bağımsızdır ve hiçbir yan etkisi yoktur. Aynı girdi kümesi verildiğinde, saf bir işlev her zaman aynı çıktı değerini döndürür.
Aşağıdaki işlev saftır:
function pure(data) { return data.total + 3; } Ancak bu işlev, harici bir değişkeni değiştirdiği için saf değildir:
function impure(data) { data.total += 3; return data.total; } Örnek:
data = { total: 6 }; pure(data); // outputs: 9 impure(data); // outputs: 9 (but now data.</description>
    </item>
    
    <item>
      <title>Özyinelemeli ve Kuyruk Özyinelemeli İşlevlere Göre Döngüler</title>
      <link>https://www.wikiod.com/tr/functional-programming/ozyinelemeli-ve-kuyruk-ozyinelemeli-islevlere-gore-donguler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/functional-programming/ozyinelemeli-ve-kuyruk-ozyinelemeli-islevlere-gore-donguler/</guid>
      <description>Bildiğiniz gibi, değişmezlik adına for döngülerini ve while döngülerini kullanarak verileri işleyemezsiniz. Yani kurtarmak için özyinelemeli fonksiyonlarımız var.
özyinelemesiz (değişmezliğin bir endişe olmadığı durumlarda) # function sum(numbers) { var total = 0; for (var i = numbers.length - 1; i &amp;gt;= 0; i--) { total += numbers[i]; } return total; } Mutasyonları olan prosedürel bir koddur (&amp;rsquo;toplam&amp;rsquo; üzerinde).
kurtarmak için özyinelemeli # function sum(numbers) { if(numbers.length == 0) { return 0; } return numbers[0] + sum(numbers.</description>
    </item>
    
  </channel>
</rss>

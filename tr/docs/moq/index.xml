<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adedi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/moq/</link>
    <description>Recent content in adedi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/moq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Moq&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/moq/moqu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/moq/moqu-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # Moq&amp;rsquo;a referans eklemek istediğiniz projeyi seçin. Bu proje için Nuget&amp;rsquo;i açın. Arama kutusuna &amp;ldquo;moq&amp;rdquo; yazmak yerine &amp;ldquo;Gözat&amp;quot;ı seçin. &amp;ldquo;Moq&amp;quot;u seçin ve ardından Install&amp;rsquo;a tıklayın. Bu adımların ardından Moq paketi yüklenecek ve seçilen proje referanslarında buna bir referans eklenecektir. Bu adımları tamamladıktan sonra, Moq, test sınıfları dosyalarında basitçe bildirilerek birim test projesinde kullanılabilir:
Using Moq; Moq&amp;rsquo;lar test çiftleridir # Sahteler, sahtelerle etkileşimlerin doğrulanmasına izin veren test çiftleri anlamına gelir, test ettiğiniz sistemin yerini alması amaçlanmamıştır.</description>
    </item>
    
    <item>
      <title>Çağrı sırası doğrulanıyor</title>
      <link>https://www.wikiod.com/tr/moq/cagr-sras-dogrulanyor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/moq/cagr-sras-dogrulanyor/</guid>
      <description>Çağrı sırasını dolaylı olarak doğrulama # Test edilecek bir yöntemin bir çağrıdan gelen bilgileri sonraki çağrılara iletmek için kullandığı durumlarda, yöntemlerin beklenen sırada çağrılmasını sağlamak için kullanılabilecek bir yaklaşım, beklentileri bu veri akışını yansıtacak şekilde ayarlamaktır.
Test edilecek yöntem göz önüne alındığında:
public void MethodToTest() { var str = _utility.GetInitialValue(); str = _utility.PrefixString(str); str = _utility.ReverseString(str); _target.DoStuff(str); } Beklentiler, &amp;ldquo;GetInitialValue&amp;quot;dan &amp;ldquo;PrefixString&amp;rdquo; ve &amp;ldquo;ReverseString&amp;rdquo; yoluyla verilerin doğrulandığı &amp;ldquo;DoStuff&amp;quot;a veri iletecek şekilde ayarlanabilir.</description>
    </item>
    
    <item>
      <title>alaycı davranış</title>
      <link>https://www.wikiod.com/tr/moq/alayc-davrans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/moq/alayc-davrans/</guid>
      <description>Sözdizimi # mock.Setup(expression).Returns(value) //Yöntem her çağrıldığında ifadede değer döndürür Parametreler # parametre Ayrıntılar ifade Yöntem çağırmayı belirten Lambda ifadesi. Argümansız yöntemle alay etme # interface Mockable { bool DoSomething(); } var mock = new Mock&amp;lt;Mockable&amp;gt;(); mock.Setup(x =&amp;gt; x.DoSomething()).Returns(true); var result = mock.Object.DoSomething(); //true Korumalı üyelerle alay etme # Korumalı bir üyeyle alay etmek için önce aşağıdakileri test fikstürünüzün üstüne eklemelisiniz:
using Moq.Protected; Daha sonra sahte üzerinde &amp;lsquo;Korumalı()&amp;lsquo;yı çağırırsınız, ardından yönteminizin dönüş türüyle genel &amp;lsquo;Kurulum&amp;lt;&amp;gt;&amp;lsquo;u kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>alaycı özellikler</title>
      <link>https://www.wikiod.com/tr/moq/alayc-ozellikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/moq/alayc-ozellikler/</guid>
      <description>Otomatik saplama özellikleri # Bazen bir sınıfla veya arayüzle alay etmek ve özelliklerinin basit alıcılar ve ayarlayıcılarmış gibi davranmasını istersiniz. Bu yaygın bir gereksinim olduğundan, Moq, değerleri depolamak ve almak için bir sahtenin tüm özelliklerini ayarlamak için bir kısayol yöntemi sağlar:
// SetupAllProperties tells mock to implement setter/getter funcationality var userMock = new Mock&amp;lt;IUser&amp;gt;().SetupAllProperties(); // Invoke the code to test SetPropertiesOfUser(userMock.Object); // Validate properties have been set Assert.AreEqual(5, userMock.Object.Id); Assert.AreEqual(&amp;quot;SomeName&amp;quot;, userMock.</description>
    </item>
    
    <item>
      <title>Ortak arayüzlerle alay etme</title>
      <link>https://www.wikiod.com/tr/moq/ortak-arayuzlerle-alay-etme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/moq/ortak-arayuzlerle-alay-etme/</guid>
      <description>IEnumerable ile alay etme # Hazır verileri döndürmek için &amp;ldquo;IEnumerable&amp;quot;dan miras alan bir arabirimle alay etmek oldukça basittir. Aşağıdaki sınıfları varsayarsak:
public class DataClass { public int Id { get; set; } } public interface IEnumerableClass : IEnumerable&amp;lt;DataClass&amp;gt; { } Aşağıdaki yaklaşım alınabilir. İlk olarak, sahte tarafından döndürülmesi gereken bilgileri içeren bir liste oluşturun:
IList&amp;lt;DataClass&amp;gt; list = new List&amp;lt;DataClass&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { list.Add(new DataClass { Id = 20 + i }); } Ardından, &amp;ldquo;IEnumerable&amp;rdquo; sınıfının bir alayını oluşturun ve bunun yerine listenin numaralandırıcısını döndürmek için &amp;ldquo;GetEnumerator&amp;rdquo; yöntemini ayarlayın:</description>
    </item>
    
  </channel>
</rss>

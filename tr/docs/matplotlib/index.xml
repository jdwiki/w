<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matplotlib Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/matplotlib/</link>
    <description>Recent content in matplotlib Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>matplotlib&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/matplotlib/matplotlibi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/matplotlibi-kullanmaya-baslama/</guid>
      <description>Zorunlu ve Nesne Yönelimli Sözdizimi # Matplotlib, çizim için hem nesne yönelimli hem de zorunlu sözdizimini destekler. Zorunlu sözdizimi, kasıtlı olarak Matlab sözdizimine çok yakın olacak şekilde tasarlanmıştır.
Zorunlu sözdizimi (bazen &amp;lsquo;durum makinesi&amp;rsquo; sözdizimi olarak adlandırılır), tümü en son şekil veya eksende (Matlab gibi) hareket eden bir dizi komut verir. Nesne yönelimli sözdizimi ise açıkça ilgilenilen nesneler (şekil, eksen vb.) üzerinde etki eder. [Zen of Python] 2&amp;lsquo;deki önemli bir nokta, açık olanın örtük olmaktan daha iyi olduğunu, dolayısıyla nesne yönelimli sözdiziminin daha pitonik olduğunu belirtir.</description>
    </item>
    
    <item>
      <title>Renk haritaları</title>
      <link>https://www.wikiod.com/tr/matplotlib/renk-haritalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/renk-haritalar/</guid>
      <description>Algısal olarak tek tip renk haritaları # MATLAB&amp;rsquo;ın &amp;ldquo;jet&amp;rdquo; olarak adlandırılan orijinal varsayılan renk haritası (R2014b sürümünde değiştirilir), yüksek kontrastı ve aşinalığı nedeniyle her yerde bulunur (ve uyumluluk nedenleriyle matplotlib&amp;rsquo;in varsayılanıydı). Popülerliğine rağmen, geleneksel renk haritaları, verileri doğru bir şekilde temsil etme konusunda genellikle eksikliklere sahiptir. Bu renk haritalarında algılanan değişiklik, verilerdeki değişikliklere karşılık gelmez; ve renk haritasının gri tonlamaya dönüştürülmesi (örneğin, siyah beyaz bir yazıcı kullanarak bir rakam yazdırarak) bilgi kaybına neden olabilir.</description>
    </item>
    
    <item>
      <title>Çoklu Parseller</title>
      <link>https://www.wikiod.com/tr/matplotlib/coklu-parseller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/coklu-parseller/</guid>
      <description>Sözdizimi # Liste öğesi Alt grafiği kullanan Alt Grafikler Izgarası # &amp;quot;&amp;quot;&amp;quot; ================================================================================ CREATE A 2 BY 2 GRID OF SUB-PLOTS WITHIN THE SAME FIGURE. ================================================================================ &amp;quot;&amp;quot;&amp;quot; import matplotlib.pyplot as plt # The data x = [1,2,3,4,5] y1 = [0.59705847, 0.25786401, 0.63213726, 0.63287317, 0.73791151] y2 = [1.19411694, 0.51572803, 1.26427451, 1.26574635, 1.47582302] y3 = [0.86793828, 0.07563408, 0.67670068, 0.78932712, 0.0043694] # 5 more random values y4 = [0.43396914, 0.03781704, 0.33835034, 0.39466356, 0.0021847] # Initialise the figure and a subplot axes.</description>
    </item>
    
    <item>
      <title>Koordinat Sistemleri</title>
      <link>https://www.wikiod.com/tr/matplotlib/koordinat-sistemleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/koordinat-sistemleri/</guid>
      <description>Matplotlib, örneğin metin gibi farklı nesnelerin konumlandırılmasını kolaylaştırmak için kullanılabilecek dört farklı koordinat sistemine sahiptir. Her sistem, koordinatları bu sistemden sözde görüntüleme koordinat sistemine dönüştüren karşılık gelen bir dönüştürme nesnesine sahiptir.
Veri koordinat sistemi, ilgili eksenlerdeki veriler tarafından tanımlanan sistemdir. Bazı nesneleri çizilen verilere göre konumlandırmaya çalışırken kullanışlıdır. Aralık, &amp;lsquo;Axes&amp;rsquo;ın &amp;lsquo;xlim&amp;rsquo; ve &amp;lsquo;ylim&amp;rsquo; özellikleriyle verilir. Karşılık gelen dönüştürme nesnesi &amp;ldquo;ax.transData&amp;quot;dır.
Eksen koordinat sistemi, &amp;lsquo;Axes&amp;rsquo; nesnesine bağlı sistemdir. (0, 0) ve (1, 1) noktaları, eksenlerin sol alt ve sağ üst köşelerini tanımlar.</description>
    </item>
    
    <item>
      <title>Animasyonlar ve etkileşimli çizim</title>
      <link>https://www.wikiod.com/tr/matplotlib/animasyonlar-ve-etkilesimli-cizim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/animasyonlar-ve-etkilesimli-cizim/</guid>
      <description>Python matplotlib ile düzgün şekilde animasyonlu grafikler oluşturabilirsiniz.
FuncAnimation ile temel animasyon # matplotlib.animation paketi, animasyon oluşturmak için bazı sınıflar sunar. FuncAnimation, bir işlevi tekrar tekrar çağırarak animasyonlar oluşturur. Burada bir sinüs fonksiyonunun grafiğindeki bir noktanın koordinatlarını değiştiren bir &amp;lsquo;animate()&amp;rsquo; fonksiyonunu kullanıyoruz.
import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation TWOPI = 2*np.pi fig, ax = plt.subplots() t = np.arange(0.0, TWOPI, 0.001) s = np.sin(t) l = plt.</description>
    </item>
    
    <item>
      <title>TeXLaTeX ile entegrasyon</title>
      <link>https://www.wikiod.com/tr/matplotlib/texlatex-ile-entegrasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/texlatex-ile-entegrasyon/</guid>
      <description>Matplotlib&amp;rsquo;in LaTeX desteği, çalışan bir LaTeX kurulumu, dvipng (LaTeX kurulumunuza dahil edilebilir) ve Ghostscript (GPL Ghostscript 8.60 veya üstü önerilir) gerektirir. Matplotlib&amp;rsquo;in pgf desteği, tercihen XeLaTeX veya LuaLaTeX kurulu olarak TikZ/PGF paketlerini (TeXLive gibi) içeren yeni bir LaTeX kurulumu gerektirir. Grafiklere TeX formülleri ekleme # TeX formülleri &amp;lsquo;rc&amp;rsquo; işlevi kullanılarak çizime eklenebilir
import matplotlib.pyplot as plt plt.rc(usetex = True) veya &amp;lsquo;rcParams&amp;rsquo;a erişim:
import matplotlib.pyplot as plt params = {&#39;tex.usetex&#39;: True} plt.</description>
    </item>
    
    <item>
      <title>efsaneler</title>
      <link>https://www.wikiod.com/tr/matplotlib/efsaneler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/efsaneler/</guid>
      <description>Birden Çok Alt Noktada Paylaşılan Tek Gösterge # Bazen bir alt nokta ızgaranız olur ve tek bir efsaneye sahip olmak istersiniz. aşağıdaki resimde olduğu gibi alt noktaların her biri için tüm satırları açıklar.
Bunu yapabilmek için şekil için küresel bir efsane oluşturmanız gerekecek. eksenler düzeyinde bir gösterge oluşturmak yerine (ayrı bir her alt nokta için efsane). Bu, olabildiğince fig.legend() çağırılarak elde edilir. aşağıdaki kodun kodunda görülüyor.
fig, (ax1, ax2, ax3) = plt.</description>
    </item>
    
    <item>
      <title>Temel Arsalar</title>
      <link>https://www.wikiod.com/tr/matplotlib/temel-arsalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/temel-arsalar/</guid>
      <description>Dağılım Grafikleri # Basit bir dağılım grafiği # import matplotlib.pyplot as plt # Data x = [43,76,34,63,56,82,87,55,64,87,95,23,14,65,67,25,23,85] y = [34,45,34,23,43,76,26,18,24,74,23,56,23,23,34,56,32,23] fig, ax = plt.subplots(1, figsize=(10, 6)) fig.suptitle(&#39;Example Of Scatterplot&#39;) # Create the Scatter Plot ax.scatter(x, y, color=&amp;quot;blue&amp;quot;, # Color of the dots s=100, # Size of the dots alpha=0.5, # Alpha/transparency of the dots (1 is opaque, 0 is transparent) linewidths=1) # Size of edge around the dots # Show the plot plt.</description>
    </item>
    
    <item>
      <title>Üç boyutlu grafikler</title>
      <link>https://www.wikiod.com/tr/matplotlib/uc-boyutlu-grafikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/uc-boyutlu-grafikler/</guid>
      <description>Matplotlib&amp;rsquo;de üç boyutlu çizim, oluşturma motoru doğası gereği 2d olduğundan, tarihsel olarak biraz çamur olmuştur. 3B kurulumların birbiri ardına 2B yığın çizilerek oluşturulduğu gerçeği, nesnelerin görünen derinliğiyle ilgili [çoğunlukla oluşturma sorunlarının 1 olduğu] anlamına gelir. Sorunun özü, birbirine bağlı olmayan iki nesnenin ya tamamen arkada ya da tam olarak birbirinin önünde olabilmesidir, bu da aşağıdaki şekilde birbirine kenetlenmiş iki halka şeklinde gösterildiği gibi eserlere yol açar (hareketli gif için tıklayın):</description>
    </item>
    
    <item>
      <title>Figürler ve Eksenler Nesneler</title>
      <link>https://www.wikiod.com/tr/matplotlib/figurler-ve-eksenler-nesneler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/matplotlib/figurler-ve-eksenler-nesneler/</guid>
      <description>Bir eksen oluşturma # Matplotlib&amp;rsquo;de eksen oluşturmanın iki ana yolu vardır: pyplot kullanmak veya nesne yönelimli API kullanmak.
pyplot&amp;rsquo;u kullanma:
import matplotlib.pyplot as plt ax = plt.subplot(3, 2, 1) # 3 rows, 2 columns, the first subplot Nesne yönelimli API&amp;rsquo;yi kullanma:
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(3, 2, 1) plt.subplots() kolaylık işlevi, tek bir komutta bir şekil ve alt grafik koleksiyonu oluşturmak için kullanılabilir:
import matplotlib.pyplot as plt fig, (ax1, ax2) = plt.</description>
    </item>
    
  </channel>
</rss>

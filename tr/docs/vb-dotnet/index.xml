<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Basic .NET Dil Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/vb-dotnet/</link>
    <description>Recent content in Visual Basic .NET Dil Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/vb-dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visual Basic .NET Dilini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/visual-basic-net-dilini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/visual-basic-net-dilini-kullanmaya-baslama/</guid>
      <description>Selam Dünya # İlk olarak, ücretsiz Topluluk sürümü de dahil olmak üzere Microsoft Visual Studio&amp;rsquo;nun bir sürümünü yükleyin. Ardından, Konsol Uygulaması türünde bir Visual Basic Konsol Uygulaması projesi oluşturun ve aşağıdaki kod &amp;ldquo;Merhaba Dünya&amp;rdquo; dizesini Konsola yazdıracaktır:
Module Module1 Sub Main() Console.WriteLine(&amp;quot;Hello World&amp;quot;) End Sub End Module Ardından, programı derleyip çalıştırmak için kaydedin ve klavyede F5 tuşuna basın (veya Debug menüsüne gidin, ardından Hata Ayıklamasız Çalıştır veya Çalıştır&amp;lsquo;a tıklayın). Konsol penceresinde “Merhaba Dünya” görünmelidir.</description>
    </item>
    
    <item>
      <title>Visual Basic 14.0 Özellikleri</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/visual-basic-140-ozellikleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/visual-basic-140-ozellikleri/</guid>
      <description>Visual Basic 14, Visual Studio 2015&amp;rsquo;in bir parçası olarak gönderilen Visual Basic sürümüdür.
Bu sürüm, yaklaşık 1,3 milyon VB satırında sıfırdan yeniden yazılmıştır. Yaygın rahatsızlıkları gidermek ve yaygın kodlama kalıplarını daha temiz hale getirmek için birçok özellik eklendi.
Visual Basic&amp;rsquo;in sürüm numarası, 13&amp;rsquo;ü atlayarak doğrudan 12&amp;rsquo;den 14&amp;rsquo;e çıktı. Bu, VB&amp;rsquo;yi Visual Studio&amp;rsquo;nun sürüm numaralandırmasıyla uyumlu tutmak için yapıldı.
Boş koşul operatörü # Ayrıntılı boş denetimden kaçınmak için dilde ?. operatörü tanıtıldı.</description>
    </item>
    
    <item>
      <title>Dizi</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/dizi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/dizi/</guid>
      <description>Dim myArray(2) As Integer someFunc(myArray) Dizi, dizin sıralı bir nesne topluluğudur. Nesnenin türü, dizi bildiriminde verilen tür tarafından tanımlanır.
Visual Basic .NET&amp;rsquo;teki diziler en yaygın olarak (ve varsayılan olarak) sıfır (0) tabanlıdır, yani ilk dizin 0&amp;rsquo;dır. 10 öğelik bir dizi, 0-9 dizin aralığına sahip olacaktır. Dizi öğelerine erişirken, erişilebilir maksimum dizin, toplam öğe sayısından bir eksiktir. Bu nedenle, dizi dizinlerine aşamalı olarak erişen döngüler, değerin dizi uzunluğundan küçük olduğu durumlarda her zaman bir aralık denetimi yapmalıdır.</description>
    </item>
    
    <item>
      <title>döngü</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/dongu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/dongu/</guid>
      <description>İçin&amp;hellip;Sonraki # For&amp;hellip;Next döngüsü, aynı eylemi sonlu sayıda tekrarlamak için kullanılır. Aşağıdaki döngü içindeki ifadeler 11 kez yürütülecektir. İlk kez, `i&amp;rsquo; 0 değerine sahip olacak, ikinci kez 1 değerine sahip olacak, son kez 10 değerine sahip olacaktır.
For i As Integer = 0 To 10 &#39;Execute the action Console.Writeline(i.ToString) Next Döngüyü parametreleştirmek için herhangi bir tamsayı ifadesi kullanılabilir. Kontrol değişkeninin (bu durumda &amp;ldquo;i&amp;rdquo;) &amp;ldquo;İleri&amp;quot;den sonra da belirtilmesine izin verilir, ancak zorunlu değildir.</description>
    </item>
    
    <item>
      <title>Sıralama</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/sralama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/sralama/</guid>
      <description>GetNames() # Belirtilen Enum içindeki sabitlerin adlarını bir dize dizisi olarak döndürür:
Module Module1 Enum Size Small Medium Large End Enum Sub Main() Dim sizes = [Enum].GetNames(GetType(Size)) For Each size In sizes Console.WriteLine(size) Next End Sub End Module Çıktı:
Küçük
Orta
Büyük
HasBayrak() # Bir bayrağın ayarlanıp ayarlanmadığını kontrol etmek için HasFlag() yöntemi kullanılabilir.
Module Module1 &amp;lt;Flags&amp;gt; Enum Material Wood = 1 Plastic = 2 Metal = 4 Stone = 8 End Enum Sub Main() Dim houseMaterials As Material = Material.</description>
    </item>
    
    <item>
      <title>Seçenek Katı</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/secenek-kat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/secenek-kat/</guid>
      <description>Sözdizimi # Seçenek Katı { Açık | Kapalı } Option Strict On, Visual Basic .Net ile önerilen iyi bir uygulamadır. Geliştirici olarak daha temiz, daha kararlı, daha hatasız, daha sürdürülebilir kod üretmenize yardımcı olur. Bazı durumlarda, Örtülü Dönüştürme gibi şeylerden kaçınarak daha iyi performansa sahip programlar yazmanıza da yardımcı olabilir.
&amp;ldquo;Açık&amp;rdquo;, yeni bir Visual Studio yüklemesi için varsayılan ayar değildir. VB.NET kullanacaksanız, programlamaya başlamadan önce değiştirilen ilk şeylerden biri olmalıdır. Varsayılan ayar olmamasının nedeni, programcıların projeleri VB6&amp;rsquo;dan taşıması beklenirken Visual Studio&amp;rsquo;nun ilk sürümlerinden gelir.</description>
    </item>
    
    <item>
      <title>OOP Anahtar Kelimeleri</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/oop-anahtar-kelimeleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/oop-anahtar-kelimeleri/</guid>
      <description>Bir sınıf tanımlama # Sınıflar, OOP&amp;rsquo;nin hayati yönleridir. Bir sınıf, bir nesnenin &amp;ldquo;planı&amp;rdquo; gibidir. Bir nesne bir sınıfın özelliklerine sahiptir, ancak özellikler sınıfın kendi içinde tanımlanmamıştır. Her nesne farklı olabileceğinden, kendi özelliklerini tanımlarlar.
Public Class Person End Class Public Class Customer End Class Bir sınıf ayrıca alt sınıflar içerebilir. Bir alt sınıf, üst sınıfıyla aynı özellikleri ve davranışları devralır, ancak kendi benzersiz özelliklerine ve sınıflarına sahip olabilir.
Kalıtım Değiştiricileri (sınıflarda) # miras # Temel (veya ana) sınıfı belirtir</description>
    </item>
    
    <item>
      <title>Sözdizimine Giriş</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/sozdizimine-giris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/sozdizimine-giris/</guid>
      <description>Intellisense Yardımcısı # İlginç bir şey, Visual Studio Intellisense&amp;rsquo;e kendi yorumlarınızı ekleme yeteneğidir. Böylece kendi yazılı fonksiyonlarınızı ve sınıflarınızı açıklayıcı hale getirebilirsiniz. Bunu yapmak için, işlevinizin üstündeki satırın üç katı yorum simgesini yazmalısınız.
Bittiğinde, Visual Studio otomatik olarak bir XML belgesi ekleyecektir:
&#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; This function returns a hello to your name &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;Name&amp;quot;&amp;gt;Your Name&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; &#39;&#39;&#39; &amp;lt;remarks&amp;gt;&amp;lt;/remarks&amp;gt; Public Function Test(Name As String) As String Return &amp;quot;Hello &amp;quot; &amp;amp; Name End Function Bundan sonra, test fonksiyonunuzu kodunuzun bir yerine yazarsanız, bu küçük yardım görünecektir:</description>
    </item>
    
    <item>
      <title>diş açma</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/dis-acma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/dis-acma/</guid>
      <description>Control.Invoke() kullanarak iş parçacığı güvenli çağrılar gerçekleştirme # Control.Invoke() yöntemini kullanarak, bir yöntemin veya işlevin yürütülmesini bir arka plan iş parçacığından, genellikle UI (Kullanıcı Arayüzü) iş parçacığı olan kontrolün oluşturulduğu iş parçacığına taşıyabilirsiniz. Bunu yaptığınızda, kodunuz bunun yerine kontrolün iş parçacığında çalışmak üzere sıraya alınır ve bu da eşzamanlılık olasılığını ortadan kaldırır.
Control.InvokeRequired özelliği de çağırmanız gerekip gerekmediğini veya kodun zaten kontrol ile aynı iş parçacığında çalışıp çalışmadığını belirlemek için kontrol edilmelidir.</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/tr/vb-dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/vb-dotnet/linq/</guid>
      <description>LINQ (Dil Entegre Sorgu), bir veri kaynağından veri alan bir ifadedir. LINQ, çeşitli veri kaynakları ve biçimleri arasında verilerle çalışmak için tutarlı bir model sunarak bu durumu basitleştirir. Bir LINQ sorgusunda her zaman nesnelerle çalışırsınız. XML belgelerinde, SQL veritabanlarında, ADO.NET Veri Kümelerinde, .NET koleksiyonlarında ve bir LINQ sağlayıcısının kullanılabildiği diğer tüm biçimlerde verileri sorgulamak ve dönüştürmek için aynı temel kodlama modellerini kullanırsınız.
Projeksiyon # Basit koşullu diziden seçme # Dim sites() As String = {&amp;quot;Stack Overflow&amp;quot;, &amp;quot;Super User&amp;quot;, &amp;quot;Ask Ubuntu&amp;quot;, &amp;quot;Hardware Recommendations&amp;quot;} Dim query = From x In sites Where x.</description>
    </item>
    
  </channel>
</rss>

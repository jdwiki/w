<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>soketler Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/sockets/</link>
    <description>Recent content in soketler Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Soketleri kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/sockets/soketleri-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sockets/soketleri-kullanmaya-baslama/</guid>
      <description>Bir soket sınıfı nesnesi nasıl başlatılır # Bir soketin başlatılması çeşitli şekillerde yapılabilir.
2 satırlık bildirim ve örnekleme ile:
First we need to define a variable which will hold a Socket class object:
Socket socket; then we can create a Socket class object:
socket = new Socket(); Tek satırlık bir tanım ve örnekleme de yapabiliriz:
Socket socket = new Socket(); her iki yol da bağlantısız bir soket oluşturacaktır.
Bağlı veya bağlantısız soket sınıfı nesnesini başlatmak için diğer parametreli yapıcıları kullanabiliriz:</description>
    </item>
    
    <item>
      <title>Python TCP soketleri; açıklamalı basit sunucu ve istemci örnekleri</title>
      <link>https://www.wikiod.com/tr/sockets/python-tcp-soketleri-acklamal-basit-sunucu-ve-istemci-ornekleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sockets/python-tcp-soketleri-acklamal-basit-sunucu-ve-istemci-ornekleri/</guid>
      <description>Bunlar birlikte çalışan iki örnek programdır. Biri basit bir sunucu, diğeri basit bir istemci. Sunucuyu bir pencerede başlatın:
python tserver.py İsterseniz istemci kaynak dosyasındaki sunucu adresini düzenleyin. O zaman koş
python tclient.py İstemci sunucuya bağlanır, ardından konsoldan girdi ister ve sunucuya gönderir. Alınan her arabellek için sunucu bazı hazır bilgileri hazırlar ve istemciye geri gönderir.
Python2 ve python3 arasında kod taşımada ortaya çıkan bazı tuzaklar üzerinde çalıştım - özellikle baytlar ve dizeler arasındaki farklar.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Yuvaları</title>
      <link>https://www.wikiod.com/tr/sockets/c-yuvalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/sockets/c-yuvalar/</guid>
      <description>Bu konu, modern C++ tarzı Berkeley Soket Programlama hakkında olacaktır (Bu, Linux için koddur, ancak diğer platformlara kolayca taşınabilir)
Örnek sunucu kodu # constexpr const size_t addressSize = sizeof(sockaddr_in); constexpr const uint16_t defaultPort = 80; // The port you want to use int serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); sockaddr_in serverAddress, clientAddress; memset(&amp;amp;serverAddress, 0, addressSize); serverAddress.sin_family = AF_INET; serverAddress.sin_addr.s_addr = htonl(INADDR_ANY); serverAddress.sin_port = htons(defaultPort); bind(serverSocket, (sockaddr*)&amp;amp;serverAddress, addressSize); listen(serverSocket, SOMAXCONN); while (true) { // Infinite running app std::thread{ // Create new thread for every client handleConnection, //Connection handler accept(serverSocket, (sockaddr*)&amp;amp;clientAddress, &amp;amp;addressSize) //Client socket // Any other parameters for the handler here }.</description>
    </item>
    
  </channel>
</rss>

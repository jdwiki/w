<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bahar-mvc Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/spring-mvc/</link>
    <description>Recent content in bahar-mvc Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring-mvc&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/spring-mvc/spring-mvcyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/spring-mvcyi-kullanmaya-baslama/</guid>
      <description>İlk Bahar-MVC Projesi # Dinamik Web projesi oluşturun, aşağıdaki bilgileri aşağıda belirtildiği gibi sağlayın
Proje adı : DemoSpringMVCProject Hedef çalışma zamanı: Apache Tomcat v7.0 sunucusu olarak ayarlayın Bitir&amp;rsquo;e tıklayın, başarılı bir şekilde dinamik web projesi oluşturduk.
Şimdi Spring-MVC çerçevesini kurmamız gerekiyor :
&amp;rsquo; WebContent\WEB-INF\ &amp;lsquo; klasörü altında web.xml oluşturun &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; id=&amp;quot;WebApp_ID&amp;quot; version=&amp;quot;2.5&amp;quot;&amp;gt; &amp;lt;display-name&amp;gt;Demo9&amp;lt;/display-name&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;demo&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; DispatcherServlet sınıfının gelen isteği engellediği ve isteği hangi denetleyicinin işleyeceğini belirlediği yer.</description>
    </item>
    
    <item>
      <title>Yay MVC Doğrulaması</title>
      <link>https://www.wikiod.com/tr/spring-mvc/yay-mvc-dogrulamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/yay-mvc-dogrulamas/</guid>
      <description>Spring MVC&amp;rsquo;de, Bean Vaidation 1.0 ve [JSR 349](https: //jcp.org/en/jsr/detail?id=349) Bean Validation 1.1) için JavaBean nesnesinin doğrulama kısıtlamalarını tanımlamak için kullanılır.
Hibernate Validator, Bean Validation API referans uygulamasıdır. Hibernate Validator, Bean Validation&amp;rsquo;ın gerektirdiği özelliklere ek olarak ek değer sunar. Örneğin, bir programatik kısıtlama yapılandırma API&amp;rsquo;sı ve [açıklama işlemcisi] (http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-annotation-processor) derleme işlemine bağlanır ve kısıtlama ek açıklamaları yanlış kullanıldığında derleme hatalarına neden olur.
Bean Validation API ile Spring MVC Form Validation # Bu örnek, Spring MVC&amp;rsquo;de herhangi bir &amp;ldquo;xml&amp;rdquo; olmadan Java Ek Açıklamaları kullanılarak Bean Validation API kullanılarak formların nasıl doğrulanacağını gösterir.</description>
    </item>
    
    <item>
      <title>Dosya yükleme</title>
      <link>https://www.wikiod.com/tr/spring-mvc/dosya-yukleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/dosya-yukleme/</guid>
      <description>Sözdizimi # @RequestPart(String, String, boolean) Parametreler # parametre Ayrıntılar @RequestPart Bu açıklama, bir parametrenin belirli bir istek parçasına eşlenmesi gerektiğini belirtir. Parça adı, bunu @RequestPart argümanı olarak sağlamayı seçmediğiniz sürece *yöntem parametresinin adıyla eşleşmelidir. Parça adı bir Java adı olarak ifade edilemezse (ör. &amp;ldquo;123&amp;rdquo;), gerçek adı belirtmek için &amp;ldquo;@RequestPart&amp;quot;ın &amp;ldquo;değer&amp;rdquo; niteliğini kullanabilirsiniz. Örneğin. @RequestPart(&amp;quot;123&amp;quot;) Dize _123. Java&amp;rsquo;nın daha eski bir sürümünde (1.7 öncesi) çalışıyorsanız veya hata ayıklama bilgisi olmadan derliyorsanız, Java parametrenin adını &amp;lsquo;arg0&amp;rsquo;, &amp;lsquo;arg1&amp;rsquo; vb.</description>
    </item>
    
    <item>
      <title>Küresel İstisna İşleme</title>
      <link>https://www.wikiod.com/tr/spring-mvc/kuresel-istisna-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/kuresel-istisna-isleme/</guid>
      <description>Gerekirse özel istisnalar oluşturmayı unutmayın. Hem çözümleyici hem de işleyici Spring tarafından keşfedilmiş olmalıdır. Spring 3.2 veya üzeri bir sürümdeyseniz, @ContrllerAdvice kullanabilirsiniz. Kaynak
Küresel İstisna Çözümleyici # @Component public class RestExceptionResolver extends ExceptionHandlerExceptionResolver { @Autowired //If you have multiple handlers make this a list of handlers private RestExceptionHandler restExceptionHandler; /** * This resolver needs to be injected because it is the easiest (maybe only) way of getting the configured MessageConverters */ @Resource private ExceptionHandlerExceptionResolver defaultResolver; @PostConstruct public void afterPropertiesSet() { setMessageConverters(defaultResolver.</description>
    </item>
    
    <item>
      <title>İstisna işleme</title>
      <link>https://www.wikiod.com/tr/spring-mvc/istisna-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/istisna-isleme/</guid>
      <description>Sözdizimi # @ExceptionHandler(ExceptionToBeHandled.class) @ExceptionHandler({ExceptionToBeHandled.class, AnotherExceptionToBeHandled.class}) Denetleyici Tabanlı İstisna İşleme # Bir denetleyicinin bir istisna oluşturduğu senaryoda, belirli yanıtları oluşturmak ve döndürmek için istisna işleyici yöntemleri tanımlayabiliriz. Belirtilen denetleyici içinde tanımlanan özel durum işleyicilerinin yalnızca o denetleyici içinde meydana gelen özel durumlar için geçerli olacağını unutmamak önemlidir.
@Controller public class MyController { @GetMapping(&amp;quot;/&amp;quot;) public String somePage() throws Exception { // some set of code that can throw exceptions } @ExceptionHandler(Exception.class) public String genericErrorPage() { return &amp;quot;genericErrorView&amp;quot;; } @ExceptionHandler(ChildException.</description>
    </item>
    
    <item>
      <title>Açıklamalı Spring-MVC</title>
      <link>https://www.wikiod.com/tr/spring-mvc/acklamal-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-mvc/acklamal-spring-mvc/</guid>
      <description>Bu konuda, esas olarak Spring MVC ile ilgili ek açıklamalar hakkında bilgi edineceksiniz. İlgili ek açıklamalardan bazıları şunlardır: @Controller, @RequestMapping, @RequestParam, @RequestBody, @ResponseBody, @RestController, @ModelAttribute, @ControllerAdvice, @ExceptionHandler, @ResponseStatus.
Tabii ki, son derece önemli olan ancak doğrudan Spring MVC&amp;rsquo;ye ait olmayan daha fazla açıklama var. Örneğin: @Required, @Autowired, @Resource ve daha fazlası.
Parametreler # Açıklama Açıklama @Kontrolör @Controller ek açıklamasıyla, bir Java Sınıfını HTTP işleyicilerini, diğer bir deyişle uygulamanıza yönelik HTTP erişim noktalarını içeren bir Sınıf olarak işaretlersiniz.</description>
    </item>
    
  </channel>
</rss>

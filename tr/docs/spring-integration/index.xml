<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yay entegrasyonu Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/spring-integration/</link>
    <description>Recent content in yay entegrasyonu Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/spring-integration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yay entegrasyonuna başlarken</title>
      <link>https://www.wikiod.com/tr/spring-integration/yay-entegrasyonuna-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-integration/yay-entegrasyonuna-baslarken/</guid>
      <description>Kurulum veya Kurulum # Projenizde Spring-Integration kullanmaya başlamanın en iyi yolu, gradle gibi bir bağımlılık yönetim sistemi kullanmaktır.
dependencies { compile &#39;org.springframework.integration:spring-integration-core:4.3.5.RELEASE&#39; } Aşağıda gateway, service-activator mesaj uç noktaları.
//these annotations will enable Spring integration and scan for components @Configuration @EnableIntegration @IntegrationComponentScan public class Application { //a channel has two ends, this Messaging Gateway is acting as input from one side of inChannel @MessagingGateway interface Greeting { @Gateway(requestChannel = &amp;quot;inChannel&amp;quot;) String greet(String name); } @Component static class HelloMessageProvider { //a service activator act as a handler when message is received from inChannel, in this example, it is acting as the handler on the output side of inChannel @ServiceActivator(inputChannel = &amp;quot;inChannel&amp;quot;) public String sayHello(String name) { return &amp;quot;Hi, &amp;quot; + name; } } @Bean MessageChannel inChannel() { return new DirectChannel(); } public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(Application.</description>
    </item>
    
    <item>
      <title>Jdbc Entegrasyonu</title>
      <link>https://www.wikiod.com/tr/spring-integration/jdbc-entegrasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-integration/jdbc-entegrasyonu/</guid>
      <description>Jdbc Gelen Bağdaştırıcısı - xml yapılandırması # Resmi referans belgesinde şöyle diyor:
Gelen Kanal Bağdaştırıcısının ana işlevi, bir SQL SELECT sorgusu yürütmek ve sonuç kümesini bir mesaj olarak dönüştürmektir. Mesaj yükü, bir Liste olarak ifade edilen tüm sonuç kümesidir ve listedeki öğelerin türleri, kullanılan satır eşleme stratejisine bağlıdır. Varsayılan strateji, sorgu sonucundaki her satır için yalnızca bir Harita döndüren genel bir eşleştiricidir.
Kaynak kodu
public class Application { static class Book { String title; double price; Book(String title, double price) { this.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/qt/</link>
    <description>Recent content in Qt Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/qt/qtyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qtyi-kullanmaya-baslama/</guid>
      <description>Windows ve Linux&amp;rsquo;ta Kurulum ve Kurulum # Linux Açık Kaynak Sürümü için Qt&amp;rsquo;yi İndirin
https://www.qt.io/download-open-source/ adresine gidin ve Şimdi İndir&amp;rsquo;e tıklayın, Linux için Qt yükleyicisini indirdiğinizden emin olun.
qt-unified-linux-x-online.run adlı bir dosya indirilecek, ardından yürütme izni eklenecek
chmod +x qt-unified-linux-x-online.run Yükleyicinin gerçek sürümü için &amp;lsquo;x&amp;rsquo;i değiştirmeyi unutmayın. Ardından yükleyiciyi çalıştırın
./qt-unified-linux-x-online.run Windows Açık Kaynak Sürümü için Qt&amp;rsquo;yi İndirin
https://www.qt.io/download-open-source/ adresine gidin. Aşağıdaki ekran görüntüsü, Windows&amp;rsquo;taki indirme sayfasını göstermektedir:
Şimdi yapmanız gereken, hangi IDE&amp;rsquo;yi kullanacağınıza bağlıdır.</description>
    </item>
    
    <item>
      <title>Sinyaller ve Yuvalar</title>
      <link>https://www.wikiod.com/tr/qt/sinyaller-ve-yuvalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/sinyaller-ve-yuvalar/</guid>
      <description>Nesneler arasındaki iletişim için sinyaller ve yuvalar kullanılır. Sinyaller ve yuvalar mekanizması, Qt&amp;rsquo;nin merkezi bir özelliğidir.
GUI programlamada, bir parçacığı değiştirdiğimizde, genellikle başka bir parçacığın haberdar edilmesini isteriz. Daha genel olarak, her türden nesnenin birbiriyle iletişim kurabilmesini isteriz.
Sinyaller, durumlarını diğer nesneler için ilginç olabilecek bir şekilde değiştirdiklerinde nesneler tarafından yayılır.
Yuvalar, sinyalleri almak için kullanılabilir, ancak bunlar aynı zamanda normal üye işlevleridir.
Bu konuyla ilgili resmi belgeler burada bulunabilir.</description>
    </item>
    
    <item>
      <title>Qt projeniz için CMakeLists.txt</title>
      <link>https://www.wikiod.com/tr/qt/qt-projeniz-icin-cmakeliststxt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qt-projeniz-icin-cmakeliststxt/</guid>
      <description>Qt 5 için CMakeLists.txt # Qt5 kullanan minimal bir CMake proje dosyası şunlar olabilir:
cmake_minimum_required(VERSION 2.8.11) project(myproject) find_package(Qt5 5.7.0 REQUIRED COMPONENTS Core ) set(CMAKE_AUTOMOC ON) add_executable(${PROJECT_NAME} main.cpp ) target_link_libraries(${PROJECT_NAME} Qt5::Core ) CMake için gereken minimum sürümü ayarlamak için &amp;ldquo;cmake_minimum_required&amp;rdquo; çağrılır. Bu örneğin çalışması için gereken minimum sürüm &amp;ldquo;2.8.11&amp;quot;dir &amp;ndash; CMake&amp;rsquo;in önceki sürümleri, bir hedefin Qt&amp;rsquo;yi kullanması için ek koda ihtiyaç duyar.
find_package, belirli bir sürüme sahip bir Qt5 kurulumunu aramak için çağrılır &amp;ndash; örnekte 5.</description>
    </item>
    
    <item>
      <title>qmake</title>
      <link>https://www.wikiod.com/tr/qt/qmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qmake/</guid>
      <description>Varsayılan &amp;ldquo;pro&amp;rdquo; dosyası. # qmake, Qt çerçevesiyle birlikte gönderilen bir yapı otomasyon aracıdır. CMake veya GNU Autotools gibi araçlara benzer işler yapar, ancak özellikle Qt ile kullanılmak üzere tasarlanmıştır. Bu nedenle Qt ekosistemiyle, özellikle de Qt Creator IDE ile iyi bir şekilde entegre edilmiştir.
Qt Creator&amp;lsquo;ı başlatır ve File -&amp;gt; New File or Project -&amp;gt; Application -&amp;gt; Qt Widgets uygulamasını seçerseniz, Qt Creator bir &amp;ldquo;pro&amp;rdquo; dosyasıyla birlikte sizin için bir proje iskeleti oluşturacaktır.</description>
    </item>
    
    <item>
      <title>İş parçacığı oluşturma ve Eşzamanlılık</title>
      <link>https://www.wikiod.com/tr/qt/is-parcacg-olusturma-ve-eszamanllk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/is-parcacg-olusturma-ve-eszamanllk/</guid>
      <description>burada ve [burada](http://doc.qt. io/qt-5/qobject.html#moveToThread):
Bir nesnenin bir ebeveyni varsa, nesne ile aynı iş parçacığında olmalıdır. ebeveyn, yani yeni bir iş parçacığına taşınamaz ve ebeveyn ve nesne farklı iş parçacıklarında yaşıyorsa, bir üst öğeyi bir nesneye ayarlayamazsınız. Bir nesne yeni bir iş parçacığına taşındığında, tüm alt öğeleri de yeni iş parçacığına taşınır Nesneleri yalnızca yeni bir iş parçacığına *itebilirsiniz. Bunları yeni bir iş parçacığına çekemezsiniz, yani yalnızca nesnenin şu anda içinde bulunduğu iş parçacığından &amp;lsquo;moveToThread&amp;rsquo; arayabilirsiniz.</description>
    </item>
    
    <item>
      <title>QObject</title>
      <link>https://www.wikiod.com/tr/qt/qobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qobject/</guid>
      <description>&amp;ldquo;QObject&amp;rdquo; sınıfı, tüm Qt nesneleri için temel sınıftır.
qobject_cast # T qobject_cast(QObject *object) &amp;lsquo;QObject&amp;rsquo;ten türetilerek ve &amp;lsquo;Q_OBJECT&amp;rsquo; makrosu kullanılarak eklenen bir işlev, &amp;lsquo;qobject_cast&amp;rsquo; kullanma yeteneğidir.
Örnek:
class myObject : public QObject { Q_OBJECT //... }; QObject* obj = new myObject(); &amp;lsquo;obj&amp;rsquo; öğesinin bir &amp;lsquo;myObject&amp;rsquo; türü olup olmadığını kontrol etmek ve onu C++&amp;lsquo;da buna dönüştürmek için genellikle bir &amp;lsquo;dynamic_cast&amp;rsquo; kullanabilirsiniz. yayınlar#t=201609131207283939046). Bu, derleme sırasında RTTI&amp;rsquo;nin etkinleştirilmesine bağlıdır.
Öte yandan Q_OBJECT makrosu, qobject_cast&amp;rsquo;te kullanılabilecek dönüştürme kontrollerini ve kodu üretir.</description>
    </item>
    
    <item>
      <title>Qt - Veritabanlarıyla Başa Çıkma</title>
      <link>https://www.wikiod.com/tr/qt/qt---veritabanlaryla-basa-ckma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qt---veritabanlaryla-basa-ckma/</guid>
      <description>QSqlDatabase::addDatabase için verilen tipe karşılık gelen Qt SQL eklentisine ihtiyacınız olacak. Gerekli SQL eklentisine sahip değilseniz, Qt sizi istenen sürücüyü bulamadığı konusunda uyaracaktır. Gerekli SQL eklentisine sahip değilseniz, bunları Qt kaynağından derlemeniz gerekecektir. Qt&amp;rsquo;de Veritabanı Kullanma # Project.pro dosyasına şunu ekliyoruz:
CONFIG += sql MainWindow.h&amp;rsquo;de şunu yazıyoruz:
#include &amp;lt;QMainWindow&amp;gt; #include &amp;lt;QSql&amp;gt; #include &amp;lt;QDebug&amp;gt; namespace Ui { class MainWindow; } class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); private slots: private: Ui::MainWindow *ui; QSqlDatabase db; }; Şimdi MainWindow.</description>
    </item>
    
    <item>
      <title>Qt uygulamalarını dağıtma</title>
      <link>https://www.wikiod.com/tr/qt/qt-uygulamalarn-dagtma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qt-uygulamalarn-dagtma/</guid>
      <description>Windows&amp;rsquo;ta dağıtma # Qt, Windows için bir dağıtım aracı sağlar: &amp;ldquo;windeployqt&amp;rdquo;. Araç, bir Qt uygulamasının yürütülebilir dosyasını Qt modüllerine bağımlılıkları açısından inceler ve denetlenen yürütülebilir dosyayı çalıştırmak için gerekli Qt dosyalarıyla bir dağıtım dizini oluşturur. Olası bir komut dosyası şöyle görünebilir:
set PATH=%PATH%;&amp;lt;qt_install_prefix&amp;gt;/bin windeployqt --dir /path/to/deployment/dir /path/to/qt/application.exe Qt&amp;rsquo;nin &amp;lsquo;bin&amp;rsquo; dizinini &amp;lsquo;PATH&amp;rsquo; ortam değişkenine eklemek için &amp;lsquo;set&amp;rsquo; komutu çağrılır. &amp;lsquo;windeployqt&amp;rsquo; daha sonra çağrılır:
Dağıtım dizinine giden yola, &amp;ldquo;&amp;ndash;dir&amp;rdquo; parametresiyle verilen isteğe bağlı bir argüman verilir (varsayılan, &amp;ldquo;windeployqt&amp;rdquo; öğesinin çağrıldığı yoldur).</description>
    </item>
    
    <item>
      <title>ModelGörünüm</title>
      <link>https://www.wikiod.com/tr/qt/modelgorunum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/modelgorunum/</guid>
      <description>Bir Modelden Verileri Görüntülemek için Basit Bir Salt Okunur Tablo # Bu, Qt&amp;rsquo;nin Model/Görünüm Çerçevesi kullanılarak doğası gereği tablo halinde olan salt okunur verileri görüntülemek için basit bir örnektir. Spesifik olarak, &amp;ldquo;Qt Nesneleri&amp;rdquo; QAbstractTableModel (bu örnekte alt sınıflanmıştır) ve QTableView kullanılır.
rowCount(), columnCount(), data() ve headerData() yöntemlerinin uygulamaları, &amp;ldquo;QTableView&amp;rdquo; nesnesine bir araç vermek için gereklidir. QAbstractTableModel nesnesinde bulunan veriler hakkında bilgi almak için.
&amp;ldquo;QAbstractTableModel&amp;rdquo; nesnesini rastgele bir kaynaktan gelen verilerle doldurmanın bir yolunu sağlamak için bu örneğe &amp;ldquo;populateData()&amp;rdquo; yöntemi eklenmiştir.</description>
    </item>
    
    <item>
      <title>QML ve C&#43;&#43; arasındaki iletişim</title>
      <link>https://www.wikiod.com/tr/qt/qml-ve-c-arasndaki-iletisim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/qt/qml-ve-c-arasndaki-iletisim/</guid>
      <description>C++&amp;lsquo;dan çok daha kolay olduğu için hibrit uygulamalar oluşturmak için QML kullanabiliriz. Bu yüzden birbirleriyle nasıl iletişim kurduklarını bilmeliyiz.
QML&amp;rsquo;de C++ çağırın # C++ sınıflarını QML&amp;rsquo;de kaydedin
C++ tarafında, &amp;ldquo;QmlCppBridge&amp;rdquo; adında bir sınıfımız olduğunu hayal edin, bu sınıfın &amp;ldquo;printHello()&amp;rdquo; adlı bir yöntemi uyguladığını düşünün.
class QmlCppBridge : public QObject { Q_OBJECT public: Q_INVOKABLE static void printHello() { qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, QML!&amp;quot;; } }; QML tarafında kullanmak istiyoruz. qmlRegisterType() çağırarak sınıfı kaydetmeliyiz:</description>
    </item>
    
  </channel>
</rss>

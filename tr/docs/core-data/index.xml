<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>çekirdek veri Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/core-data/</link>
    <description>Recent content in çekirdek veri Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/core-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Çekirdek verileri kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/core-data/cekirdek-verileri-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/cekirdek-verileri-kullanmaya-baslama/</guid>
      <description>İlk Modelinizi Oluşturma # .xcdatamodeld dosyasını seçin. olmadığını fark edeceksin varlıklar. Kendiniz bir tane oluşturmanız gerekecek. Altındaki Xcode, &amp;ldquo;Varlık Ekle&amp;rdquo; yazan bir düğme göreceksiniz, tıklayın ve projede birlikte çalışabileceğiniz yeni bir varlığınız olacak. Bu adımda değinilmesi gereken birkaç nokta var. Birincisi, burada varlık adınızı değiştirdiyseniz, varlığa &amp;lsquo;Kişi&amp;rsquo; adı verilir. Nitelikler bölümünün altında, modelinize nitelikleri eklersiniz. Bu düğme, bölümün altında bulunan bir artıdır. Uygulamanızla alakalı tüm özellikleri ekleyebilirsiniz. Örneğin, bir kişi defteri uygulaması yapıyorsanız, bir Kişi modelinin &amp;ldquo;Boolean&amp;rdquo; türünde bir &amp;ldquo;Silah&amp;rdquo; özniteliği içermesini sağlamanız gerekmez.</description>
    </item>
    
    <item>
      <title>Çekirdek Veri Yığını</title>
      <link>https://www.wikiod.com/tr/core-data/cekirdek-veri-ygn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/cekirdek-veri-ygn/</guid>
      <description>Bu, proje oluşturulduğunda Core Data ile proje oluşturulmuşsa, başlangıçta &amp;lsquo;AppDelegate&amp;rsquo; dosyasına yerleştirilen Core Data Stack&amp;rsquo;in bir uygulamasıdır. Bu işlevler ayrıca CoreDataStack.swift için ayrı bir sınıfta uygulanabilir. Başlıca işlevlerden biri, NSManagedObjectContext&amp;rsquo;i elde etmektir.
Amaç-C # - (NSManagedObjectContext *)managedObjectContext {...} Hızlı 2 # lazy var managedObjectContext: NSManagedObjectContext = {...} Hızlı 3 # lazy var persistentContainer: NSPersistentContainer = {...) let managedObjectContext = persistentContainer.viewContext Uygulamanızdaki nesneler ve harici veri depoları arasında iletişim kuran Çekirdek Veri yığını.</description>
    </item>
    
    <item>
      <title>Çekirdek Veri Modeli Oluşturma</title>
      <link>https://www.wikiod.com/tr/core-data/cekirdek-veri-modeli-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/cekirdek-veri-modeli-olusturma/</guid>
      <description>Özellik türleri şunları içerir: Tanımsız, Tam Sayı 16, Tam Sayı 32, Integer 64, Decimal, Double, Float, String, Boolean, Date, Binary, Data, or Transformable
Bir &amp;ldquo;Varlık&amp;quot;ı soyut olarak tanımlarken, o varlığın herhangi bir örneğini yaratmayacaksınız. Örneğin, bir Kişi soyut olur ve bir Çalışan veya Müşteri somut bir alt varlık olur.
&amp;ldquo;Geçici&amp;rdquo; öznitelikler, modelin bir parçası olarak tanımladığınız ancak bir varlık eşgörünümü verilerinin parçası olarak kalıcı depoya kaydedilmeyen özelliklerdir. Çekirdek Veriler, geçici özelliklerde yaptığınız değişiklikleri izler, böylece geri alma işlemleri için kaydedilirler.</description>
    </item>
    
    <item>
      <title>Tahminleri Kullanma</title>
      <link>https://www.wikiod.com/tr/core-data/tahminleri-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/tahminleri-kullanma/</guid>
      <description>Tam bir dize eşleştirme # let fetchRequest = NSFetchRequest(entityName: &amp;quot;Foo&amp;quot;) var thePredicate: NSPredicate? thePredicate = NSPredicate(format: &amp;quot;message == &#39;example&#39;&amp;quot;) Foo varlığının bir message dize özniteliği var
Değişiklikler # Bir yüklemin ölçütü olarak statik bir dize geçirmek yerine. Biçim belirteçlerini kullanarak değerleri değiştirmek mümkündür. Beş biçim belirteci vardır:
%K, bir anahtar yolu için bir var arg ikamesidir. %@, bir nesne değeri için bir var arg ikamesidir - genellikle bir dize, sayı, tarih veya dizi.</description>
    </item>
    
    <item>
      <title>NSFetchedResultsController</title>
      <link>https://www.wikiod.com/tr/core-data/nsfetchedresultscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/nsfetchedresultscontroller/</guid>
      <description>NSFetchedResultsController, çekirdek veri tablosu (çekirdek verilerdeki varlık, sqlite içindeki tablo) ve UITableView arasındaki bir bağlantıdır. UITableView, NSFetchedResultsController kullanılarak herhangi bir çekirdek veri varlığına eklenebilir ve UITableView, çekirdek veri bu varlığı/tabloyu güncellediğinde ve güncellendiğinde güncellenecektir.
UITableView için NSFetchedResultsController # class ConversationsTableViewController: UITableViewController, NSFetchedResultsControllerDelegate { private var fetchedResultsController: NSFetchedResultsController&amp;lt;Conversation&amp;gt;! override func viewDidLoad() { super.viewDidLoad() initializeFetchedResultsController() } private func initializeFetchedResultsController() { let request = NSFetchRequest&amp;lt;Conversation&amp;gt;(entityName: &amp;quot;Conversation&amp;quot;) let timeSort = NSSortDescriptor(key: &amp;quot;lastMessageTime&amp;quot;, ascending: false) request.</description>
    </item>
    
    <item>
      <title>Sıralama Tanımlayıcıları</title>
      <link>https://www.wikiod.com/tr/core-data/sralama-tanmlayclar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/core-data/sralama-tanmlayclar/</guid>
      <description>Getirme İstekleriyle Döndürülen Sipariş Verileri # Verilerin nasıl döndürüleceğini belirlemek için NSFetchRequest özelliğini sortDescriptors ayarlayın.
let fetchRequest = NSFetchRequest(entityName: &amp;quot;NAME_OF_ENTITY&amp;quot;) let sortDescriptor = NSSortDescriptor(key: &amp;quot;NAME_OF_ATTRIBUTE&amp;quot;, ascending: true) fetchRequest.sortDescriptors = [sortDescriptor] Çoklu Sıralama Tanımlayıcıları # Ayrıca, bir özniteliğe göre diğerinin içinde sıralamak için birden çok sıralama tanımlayıcısı ayarlayabilirsiniz. Örneğin, tarihe göre ve her tarih içinde ada göre sıralanmış tüm girdileri döndürün:
let fetchRequest = NSFetchRequest(entityName: &amp;quot;NAME_OF_ENTITY&amp;quot;) let sortDescriptor1 = NSSortDescriptor(key: &amp;quot;name&amp;quot;, ascending: true) let sortDescriptor2 = NSSortDescriptor(key: &amp;quot;date&amp;quot;, ascending: true) fetchRequest.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dart Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/dart/</link>
    <description>Recent content in dart Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dart&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/dart/darta-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/darta-baslarken/</guid>
      <description>Kurulum veya Kurulum # Dart SDK, Dart kodu yazmak ve çalıştırmak için ihtiyacınız olan her şeyi içerir: VM, kitaplıklar, çözümleyici, paket yöneticisi, belge oluşturucu, biçimlendirici, hata ayıklayıcı ve daha fazlası. Web geliştirme yapıyorsanız, Dartium&amp;rsquo;a da ihtiyacınız olacak.
Otomatik kurulum ve güncellemeler # Dart&amp;rsquo;ı Windows&amp;rsquo;a Yükleme [Dart&amp;rsquo;ı Mac&amp;rsquo;e Yükleme2 Linux&amp;rsquo;ta Dart Kurulumu Manuel kurulum # Ayrıca SDK&amp;rsquo;nın herhangi bir sürümünü manuel olarak da kurabilirsiniz.
Selam Dünya! # Aşağıdaki içeriğe sahip &amp;ldquo;hello_world.dart&amp;rdquo; adlı yeni bir dosya oluşturun:</description>
    </item>
    
    <item>
      <title>Koleksiyonlar</title>
      <link>https://www.wikiod.com/tr/dart/koleksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/koleksiyonlar/</guid>
      <description>Yeni Liste Oluşturma # Listeler birden çok şekilde oluşturulabilir.
Önerilen yol, bir &amp;ldquo;Liste&amp;rdquo; değişmezi kullanmaktır:
var vegetables = [&#39;broccoli&#39;, &#39;cabbage&#39;]; &amp;lsquo;Liste&amp;rsquo; yapıcısı da kullanılabilir:
var fruits = new List(); Daha güçlü yazmayı tercih ediyorsanız, aşağıdaki yollardan biriyle de bir tür parametresi sağlayabilirsiniz:
var fruits = &amp;lt;String&amp;gt;[&#39;apples&#39;, &#39;oranges&#39;]; var fruits = new List&amp;lt;String&amp;gt;(); Küçük, büyütülebilir bir liste oluşturmak için, boş veya bilinen bazı başlangıç ​​değerleri içeren, değişmez form tercih edilir. Diğer liste türleri için özel kurucular vardır:</description>
    </item>
    
    <item>
      <title>Asenkron Programlama</title>
      <link>https://www.wikiod.com/tr/dart/asenkron-programlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/asenkron-programlama/</guid>
      <description>Geri aramaları Vadeli İşlemlere Dönüştürme # Dart, Gelecek, Akış ve daha fazlasıyla sağlam bir zaman uyumsuz kitaplığa sahiptir. Ancak, bazen Futures yerine callbacks kullanan eşzamansız bir API ile karşılaşabilirsiniz. Geri aramalar ve Vadeli İşlemler arasındaki boşluğu kapatmak için Dart, Completer sınıfını sunar. Bir geri aramayı Geleceğe dönüştürmek için bir Tamamlayıcı kullanabilirsiniz.
Tamamlayıcılar, Gelecek tabanlı bir API ile geri arama tabanlı bir API arasında köprü oluşturmak için mükemmeldir. Örneğin, veritabanı sürücünüzün Futures kullanmadığını, ancak bir Future döndürmeniz gerektiğini varsayalım.</description>
    </item>
    
    <item>
      <title>Kontrol akışı</title>
      <link>https://www.wikiod.com/tr/dart/kontrol-aks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/kontrol-aks/</guid>
      <description>Aksi takdirde # Dart, Else&amp;rsquo;ye sahiptir:
if (year &amp;gt;= 2001) { print(&#39;21st century&#39;); } else if (year &amp;gt;= 1901) { print(&#39;20th century&#39;); } else { print(&#39;We Must Go Back!&#39;); } Dart ayrıca üçlü bir &amp;ldquo;if&amp;rdquo; operatörüne sahiptir:
var foo = true; print(foo ? &#39;Foo&#39; : &#39;Bar&#39;); // Displays &amp;quot;Foo&amp;quot;. Döngü sırasında # Dart&amp;rsquo;ta while döngüleri ve do while döngülerine izin verilir:
while(peopleAreClapping()) { playSongs(); } ve:
do { processRequest(); } while(stillRunning()); Döngüler bir ara kullanılarak sonlandırılabilir:</description>
    </item>
    
    <item>
      <title>sınıflar</title>
      <link>https://www.wikiod.com/tr/dart/snflar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/snflar/</guid>
      <description>Üyeler # Bir sınıfın üyeleri olabilir.
Örnek değişkenleri, tür açıklamaları ile/olmadan bildirilebilir ve isteğe bağlı olarak başlatılabilir. Başlatılmamış üyeler, yapıcı tarafından başka bir değere ayarlanmadıkça &amp;ldquo;null&amp;rdquo; değerine sahiptir.
class Foo { var member1; int member2; String member3 = &amp;quot;Hello world!&amp;quot;; } Sınıf değişkenleri &amp;lsquo;static&amp;rsquo; anahtar sözcüğü kullanılarak bildirilir.
class Bar { static var member4; static String member5; static int member6 = 42; } Bir yöntem argüman almıyorsa, hızlıysa, bir değer döndürüyorsa ve görünür yan etkileri yoksa, bir alıcı yöntemi kullanılabilir:</description>
    </item>
    
    <item>
      <title>Verileri Dönüştürme</title>
      <link>https://www.wikiod.com/tr/dart/verileri-donusturme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/verileri-donusturme/</guid>
      <description>JSON # import &#39;dart:convert&#39;; void main() { var jsonString = &amp;quot;&amp;quot;&amp;quot; { &amp;quot;cats&amp;quot;: { &amp;quot;abysinnian&amp;quot;: { &amp;quot;origin&amp;quot;: &amp;quot;Burma&amp;quot;, &amp;quot;behavior&amp;quot;: &amp;quot;playful&amp;quot; } } } &amp;quot;&amp;quot;&amp;quot;; var obj = JSON.decode(jsonString); print(obj[&#39;cats&#39;][&#39;abysinnian&#39;][&#39;behavior&#39;]); // playful } Dartpad&amp;rsquo;deki örneğe bakın: https://dartpad.dartlang.org/7d5958cf10e611b36326f27b062108fe</description>
    </item>
    
    <item>
      <title>Dart-JavaScript birlikte çalışabilirliği</title>
      <link>https://www.wikiod.com/tr/dart/dart-javascript-birlikte-calsabilirligi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/dart-javascript-birlikte-calsabilirligi/</guid>
      <description>Dart-JavaScript birlikte çalışabilirliği, Dart programlarımızdan JavaScript kodunu çalıştırmamızı sağlar.
Birlikte çalışabilirlik, Dart taslakları oluşturmak için js kitaplığı kullanılarak sağlanır. Bu taslaklar, temel alınan JavaScript koduyla sahip olmak istediğimiz arayüzü tanımlar. Çalışma zamanında Dart saplamasını çağırmak JavaScript kodunu çağıracaktır.
JavaScript sınıflarını/ad alanlarını sarmalama # Google Haritalar JavaScript API&amp;rsquo;sini &amp;ldquo;google.maps&amp;rdquo; sarmak istediğimizi varsayalım:
@JS(&#39;google.maps&#39;) library maps; import &amp;quot;package:js/js.dart&amp;quot;; @JS() class Map { external Map(Location location); external Location getLocation(); } Artık JavaScript google.maps.Map sınıfına karşılık gelen Map Dart sınıfına sahibiz.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/dart/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/fonksiyonlar/</guid>
      <description>Dart gerçek bir nesne yönelimli dildir, bu nedenle işlevler bile nesnelerdir ve bir türe sahiptir, İşlev. Bu, işlevlerin değişkenlere atanabileceği veya diğer işlevlere argüman olarak iletilebileceği anlamına gelir. Ayrıca Dart sınıfının bir örneğini bir işlevmiş gibi çağırabilirsiniz.
Adlandırılmış parametrelere sahip fonksiyonlar # Bir işlevi tanımlarken, adlandırılmış parametreleri belirtmek için {param1, param2, …} kullanın:
void enableFlags({bool bold, bool hidden}) { // ... } Bir işlevi çağırırken, paramName: value kullanarak adlandırılmış parametreleri belirtebilirsiniz.</description>
    </item>
    
    <item>
      <title>bar</title>
      <link>https://www.wikiod.com/tr/dart/bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/bar/</guid>
      <description>Dart SDK&amp;rsquo;yı kurduğunuzda, aldığınız araçlardan biri pub. Pub aracı, çeşitli amaçlar için komutlar sağlar. Bir komut paketleri yükler, diğeri test için bir HTTP sunucusu başlatır, bir diğeri uygulamanızı dağıtım için hazırlar ve bir diğeri paketinizi pub.dartlang.org&amp;lsquo;da yayınlar. Pub komutlarına WebStorm gibi bir IDE aracılığıyla veya komut satırından erişebilirsiniz.
Bu komutlara genel bir bakış için bkz. Pub Komutları.
pub yapımı # Web uygulamanızı dağıtmaya hazır olduğunuzda pub derlemesini kullanın. pub derlemesini çalıştırdığınızda, mevcut paket ve tüm bağımlılıkları için varlıklar oluşturur ve bunları build adlı yeni dizine koyar.</description>
    </item>
    
    <item>
      <title>Düzenli ifadeler</title>
      <link>https://www.wikiod.com/tr/dart/duzenli-ifadeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dart/duzenli-ifadeler/</guid>
      <description>Sözdizimi # var regExp = RegExp(r&amp;rsquo;^(.*)$&amp;rsquo;, multiLine: true, caseSensitive: false); Parametreler # parametre Ayrıntılar Dize kaynağı &amp;lsquo;Dize&amp;rsquo; olarak normal ifade {bool multiline} Bunun çok satırlı bir normal ifade olup olmadığı. (her satırın başındaki ve sonundaki ^ ve $ ile tek tek eşleşir, tüm Dize ile eşleşmez) {bool caseSensitive} İfade büyük/küçük harf duyarlıysa Dart normal ifadeleri, JavaScript normal ifadeleriyle aynı sözdizimine ve anlambilime sahiptir. JavaScript düzenli ifadelerinin özellikleri için http://ecma-international.org/ecma-262/5.1/#sec-15.10 adresine bakın.</description>
    </item>
    
  </channel>
</rss>

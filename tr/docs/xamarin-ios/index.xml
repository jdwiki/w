<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xamarin.iOS Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/xamarin-ios/</link>
    <description>Recent content in Xamarin.iOS Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/xamarin-ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Xamarin.iOS&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/xamariniosu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/xamariniosu-kullanmaya-baslama/</guid>
      <description>Visual Studio&amp;rsquo;ya Başlayın # Yeni Proje iletişim kutusunu size getirmek için Dosya &amp;gt; Yeni &amp;gt; Proje&amp;lsquo;ye gidin. Visual C# &amp;gt; iOS &amp;gt; iPhone&amp;rsquo;a gidin ve Single View Uygulaması&amp;rsquo;nı seçin: Uygulamanıza bir Ad verin ve projenizi oluşturmak için Tamam&amp;lsquo;a basın. Aşağıda gösterildiği gibi araç çubuğundan Mac Agent simgesini seçin: Listeden uygulamanızı oluşturacak Mac&amp;rsquo;i seçin (Mac&amp;rsquo;inizin bağlantıyı alacak şekilde ayarlandığından emin olun!) ve Bağlan&amp;lsquo;a basın: Uygulamanızı çalıştırmak için Debug | iPhoneSimulator yapılandırmasını seçin ve Oynat düğmesine basın: Bu, Mac&amp;rsquo;te iOS Simülatörünü başlatacak ve boş uygulamanızı görüntüleyecektir: Xamarin Studio&amp;rsquo;da Başlayın # Size yeni projeyi getirmek için Dosya &amp;gt; Yeni &amp;gt; Çözüm&amp;rsquo;e gidin dialog</description>
    </item>
    
    <item>
      <title>Swift Kitaplıklarını Bağlama</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/swift-kitaplklarn-baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/swift-kitaplklarn-baglama/</guid>
      <description>Bir Xamarin projesinde kullanmak için Swift .framework dosyalarını bağlama sürecinde size yol gösterecek, takip etmesi kolay bir kılavuz.
Xcode&amp;rsquo;da bir kitaplık oluştururken, Swift kitaplıklarını dahil etme seçeneği vardır. yapma! Son uygulamanıza NAME.app/Frameworks/LIBRARY.framework/Frameworks/libswift*.dylib olarak dahil edilecekler ancak NAME.app/Frameworks/libswift*.dylib olarak dahil edilmeleri gerekiyor
Bu bilgiyi başka bir yerde bulabilirsiniz, ancak bahsetmeye değer: Bitcode&amp;rsquo;u kütüphaneye dahil etmeyin. Şu anda Xamarin, iOS için Bitcode&amp;rsquo;u içermiyor ve Apple, tüm kitaplıkların aynı mimarileri desteklemesini gerektiriyor.
Xamarin.iOS&amp;rsquo;ta Swift Kitaplığı Bağlama # Xamarin.</description>
    </item>
    
    <item>
      <title>UIImage için Yeniden Boyutlandırma Yöntemleri</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/uiimage-icin-yeniden-boyutlandrma-yontemleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/uiimage-icin-yeniden-boyutlandrma-yontemleri/</guid>
      <description>Resmi Yeniden Boyutlandır - En Boy Oranlı # // resize the image to be contained within a maximum width and height, keeping aspect ratio public static UIImage MaxResizeImage(this UIImage sourceImage, float maxWidth, float maxHeight) { var sourceSize = sourceImage.Size; var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height); if (maxResizeFactor &amp;gt; 1) return sourceImage; var width = maxResizeFactor * sourceSize.Width; var height = maxResizeFactor * sourceSize.Height; UIGraphics.BeginImageContext(new CGSize(width, height)); sourceImage.Draw(new CGRect(0, 0, width, height)); var resultImage = UIGraphics.</description>
    </item>
    
    <item>
      <title>Dokunmatik kimlik</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/dokunmatik-kimlik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/dokunmatik-kimlik/</guid>
      <description>Parametreler # Sütun Kolon Hücre Hücre İlk olarak, cihazın Touch ID girişini kabul edip edemediğini belirleyin.
if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)) Varsa, Touch ID kullanıcı arayüzünü aşağıdakileri kullanarak görüntüleyebiliriz:
context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler); &amp;lsquo;EvaluatePolicy&amp;rsquo;ye aktarmamız gereken üç parça bilgi vardır - politikanın kendisi, kimlik doğrulamanın neden gerekli olduğunu açıklayan bir dize ve bir yanıt işleyicisi. Yanıt işleyici, başarılı veya başarısız bir kimlik doğrulama durumunda uygulamaya ne yapması gerektiğini söyler.
Yerel Kimlik Doğrulamanın uyarılarından biri, ön planda çalıştırılması gerektiğidir, bu nedenle yanıt işleyicisi için &amp;lsquo;InvokeOnMainThread&amp;rsquo; kullandığınızdan emin olun:</description>
    </item>
    
    <item>
      <title>Xamarin.iOS&#39;ta Eşzamanlı Programlama</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/xamariniosta-eszamanl-programlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/xamariniosta-eszamanl-programlama/</guid>
      <description>Arka plan dizilerinden kullanıcı arayüzünü değiştirme # Arka plan iş parçacıkları kullanıcı arabirimini değiştiremez; hemen hemen tüm UIKit yöntemleri ana iş parçacığında çağrılmalıdır.
&amp;ldquo;NSObject&amp;rdquo; alt sınıfından (herhangi bir &amp;ldquo;UIViewController&amp;rdquo; veya &amp;ldquo;UIView&amp;rdquo; dahil):
InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); Standart bir C# sınıfından:
UIApplication.SharedApplication.InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); InvokeOnMainThread, devam etmeden önce ana iş parçacığında çalışan kodunuzun yürütülmesini bekler. Beklemeniz gerekmiyorsa, BeginInvokeOnMainThread kullanın.
Async&amp;rsquo;i kullanma ve bekleme # Zaman uyumsuz yürütmeleri işlemek için zaman uyumsuz yöntemleri kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>GetHeightForRow&#39;da değişken satır yüksekliğini hesaplama</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/getheightforrowda-degisken-satr-yuksekligini-hesaplama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/getheightforrowda-degisken-satr-yuksekligini-hesaplama/</guid>
      <description>Satır yüksekliklerini hesaplamak pahalı olabilir ve daha büyük miktarda veriye sahipseniz kaydırma performansı düşebilir. Bu senaryoda, hızlı kaydırma için yeterli bir sayıyı hızlı bir şekilde sağlamak için &amp;ldquo;UITableViewSource.EstimatedHeight(UITableView, NSIndexPath)&amp;rdquo; öğesini geçersiz kılın, örneğin:
public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath) { return 44.0f; } GetHeightForRow&amp;rsquo;u Kullanma # Özel bir satır yüksekliği ayarlamak için &amp;ldquo;UITableViewSource.GetHeightForRow(UITableView,NSIndexPath)&amp;rdquo; öğesini geçersiz kılın:
public class ColorTableDataSource : UITableViewSource { List&amp;lt;DomainClass&amp;gt; Model { get; set; } public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath) { var height = Model[indexPath.</description>
    </item>
    
    <item>
      <title>Xamarin.iOS&#39;ta Otomatik Düzen</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/xamariniosta-otomatik-duzen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/xamariniosta-otomatik-duzen/</guid>
      <description>iOS 9+ Düzen Bağlantılarıyla Kısıtlama Ekleme # // Since the anchor system simply returns constraints, you still need to add them somewhere. View.AddConstraints( new[] { someLabel.TopAnchor.ConstraintEqualTo(TopLayoutGuide.GetBottomAnchor()), anotherLabel.TopAnchor.ConstraintEqualTo(someLabel.BottomAnchor, 6), oneMoreLabel.TopAnchor.ConstraintEqualTo(anotherLabel.BottomAnchor, 6), oneMoreLabel.BottomAnchor.ConstraintGreaterThanOrEqualTo(BottomLayoutGuide.GetTopAnchor(), -10), } ); son sürüm Görsel Biçim Dili (VFL) Kullanarak Kısıtlamalar Ekleme # // Using Visual Format Language requires a special look-up dictionary of names&amp;lt;-&amp;gt;views. var views = new NSDictionary( nameof(someLabel), someLabel, nameof(anotherLabel), anotherLabel, nameof(oneMoreLabel), oneMoreLabel ); // It can also take a look-up dictionary for metrics (such as size values).</description>
    </item>
    
    <item>
      <title>uyarılar</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/uyarlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/uyarlar/</guid>
      <description>Bir Uyarı Görüntüle # iOS 8&amp;rsquo;den bu yana Uyarılar için bir &amp;ldquo;UIAlertController&amp;rdquo; kullanırdınız, ancak önceki sürümler için artık kullanımdan kaldırılan bir &amp;ldquo;UIAlertView&amp;rdquo; kullanırdınız.
var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert); alert.AddAction(UIAlertAction.Create(otherTitle, UIAlertActionStyle.Destructive, (action) =&amp;gt; { // otherTitle(); })); alert.AddAction(UIAlertAction.Create(cancelTitle, UIAlertActionStyle.Cancel, null)); this.PresentViewController(alert, true, null); son sürüm var alert = new UIAlertView (title, message, null, cancelTitle, otherTitle); alert.Clicked += (object sender, UIButtonEventArgs e) =&amp;gt; { if(e.ButtonIndex == 1) // otherTitle(); }; alert.Show (); son sürüm Bir giriş uyarısı göster # Aşağıdaki kod, bir oturum açma uyarısı oluşturmak için iOS 8 ve altı içindir.</description>
    </item>
    
    <item>
      <title>Varlık Kataloglarını Kullanma</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/varlk-kataloglarn-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/varlk-kataloglarn-kullanma/</guid>
      <description>Varlık kataloğuna görüntü varlıkları ekleme # Xamarin Studio&amp;rsquo;daki Varlık Kataloğu şu şekilde görünür:
Yukarıdaki resimde görüldüğü gibi katalog içerisinde oluşturabileceğiniz 5 çeşit varlık bulunmaktadır.
En basiti olduğu için sadece görüntü setini ele alacağım.
Yeni bir görüntü seti oluşturduğunuzda. Bunun gibi seçenekler alacaksınız Kataloğa resim eklemek için kesikli karelere tıklayıp belirli bir seçenek için ayarlamak istediğiniz resmi seçebilirsiniz.
XCode&amp;rsquo;da en yeni iOS aygıt ekran boyutlarını kapsayacak şekilde 1x, 2x ve 3x seçenekleriniz vardır.</description>
    </item>
    
    <item>
      <title>Görselleri Yönetmek için iOS Varlık Kataloglarını Kullanma</title>
      <link>https://www.wikiod.com/tr/xamarin-ios/gorselleri-yonetmek-icin-ios-varlk-kataloglarn-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/xamarin-ios/gorselleri-yonetmek-icin-ios-varlk-kataloglarn-kullanma/</guid>
      <description>Varlık katalogları, iOS görüntü varlıklarının birden çok çözünürlüğünü yönetmenin yoludur. Optimum görüntüleri görüntülemek için iOS, cihazın ekran yoğunluğuna göre her görüntünün 1x, 2x ve 3x sürümlerini kullanır. 1x sürümü yalnızca çok eski, retina olmayan cihazlar içindir, bu nedenle yalnızca iOS 9&amp;rsquo;u destekleyen uygulamalar için gerekli değildir.
Varlık katalogları, kullanıcıların App Store&amp;rsquo;dan bir uygulama yüklemek için indirmeleri gereken kaynakları optimize ederek, uygulama inceltmeyi ve dilimlemeyi desteklemeye yardımcı olacaktır.
Bir varlık kataloğu resmi yükleme # UIImage.</description>
    </item>
    
  </channel>
</rss>

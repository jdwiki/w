<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Dili Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/python/</link>
    <description>Recent content in Python Dili Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Dili ile Başlarken</title>
      <link>https://www.wikiod.com/tr/python/python-dili-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/python-dili-ile-baslarken/</guid>
      <description>Başlarken # Python, Guido van Rossum tarafından yaratılan ve ilk olarak 1991&amp;rsquo;de piyasaya sürülen genel amaçlı programlama için yaygın olarak kullanılan üst düzey bir programlama dilidir. Python, dinamik bir tip sistemi ve otomatik bellek yönetimine sahiptir ve nesne yönelimli, zorunlu, zorunlu, fonksiyonel programlama ve prosedürel stiller. Geniş ve kapsamlı bir standart kütüphaneye sahiptir.
Python&amp;rsquo;un iki ana sürümü şu anda aktif olarak kullanılıyor:
Python 3.x güncel sürümdür ve aktif geliştirme aşamasındadır. Python 2.</description>
    </item>
    
    <item>
      <title>Python 2&#39;den Python 3&#39;e taşınan uyumsuzluklar</title>
      <link>https://www.wikiod.com/tr/python/python-2den-python-3e-tasnan-uyumsuzluklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/python-2den-python-3e-tasnan-uyumsuzluklar/</guid>
      <description>Çoğu dilin aksine Python iki ana sürümü destekler. Python 3&amp;rsquo;ün piyasaya sürüldüğü 2008&amp;rsquo;den bu yana, birçoğu geçiş yaptı, çoğu ise yapmadı. Her ikisini de anlamak için bu bölüm Python 2 ve Python 3 arasındaki önemli farkları kapsar.
Şu anda Python&amp;rsquo;un desteklenen iki sürümü vardır: 2.7 (Python 2) ve 3.6 (Python 3). Ek olarak sürüm 3.3 ve 3.4, güvenlik güncellemelerini kaynak biçiminde alır.
Python 2.7, Python&amp;rsquo;un önceki sürümlerinin çoğuyla geriye dönük olarak uyumludur ve Python kodunu, Python&amp;rsquo;un çoğu 1.</description>
    </item>
    
    <item>
      <title>jeneratörler</title>
      <link>https://www.wikiod.com/tr/python/jeneratorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/jeneratorler/</guid>
      <description>Üreteçler, üreteç işlevleri (&amp;ldquo;verim&amp;rdquo; kullanılarak) veya oluşturucu ifadeleri (&amp;quot;(an_iterator&amp;rsquo;da x için an_expression)&amp;quot; kullanılarak oluşturulan tembel yineleyicilerdir.
Sözdizimi # &amp;lt;ifade&amp;gt; verim &amp;ldquo;&amp;ldquo;den elde edilen verim &amp;lt;var&amp;gt; = verim &amp;lt;expr&amp;gt; sonraki(&amp;lt;iter&amp;gt;) Giriiş # Jeneratör ifadeleri liste, sözlük ve küme anlamalarına benzer, ancak parantez içine alınır. Bir işlev çağrısı için tek argüman olarak kullanıldığında parantezlerin bulunması gerekmez.
expression = (x**2 for x in range(10)) Bu örnek, 0 (ki x = 0) dahil olmak üzere ilk 10 tam kareyi oluşturur.</description>
    </item>
    
    <item>
      <title>sınıflar</title>
      <link>https://www.wikiod.com/tr/python/snflar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/snflar/</guid>
      <description>Python kendisini yalnızca popüler bir betik dili olarak sunmakla kalmaz, aynı zamanda nesne yönelimli programlama paradigmasını da destekler. Sınıflar, verileri tanımlar ve bu verileri işlemek için yöntemler sağlar, tümü tek bir nesne altında toplanır. Ayrıca sınıflar, somut uygulama ayrıntılarını verilerin soyut temsillerinden ayırarak soyutlamaya izin verir.
Sınıfları kullanan kodun okunması, anlaşılması ve bakımı genellikle daha kolaydır.
Sınıflara giriş # Bir sınıf, belirli bir nesnenin temel özelliklerini tanımlayan bir şablon işlevi görür.</description>
    </item>
    
    <item>
      <title>Ortak tuzaklar</title>
      <link>https://www.wikiod.com/tr/python/ortak-tuzaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/ortak-tuzaklar/</guid>
      <description>Python, herhangi bir belirsizlik ve beklenmedik davranışlar olmadan açık ve okunabilir olması amaçlanan bir dildir. Ne yazık ki, bu hedefler her durumda elde edilemez ve bu nedenle Python&amp;rsquo;un beklediğinizden farklı bir şey yapabileceği birkaç köşe durumu vardır.
Bu bölüm size Python kodu yazarken karşılaşabileceğiniz bazı sorunları gösterecektir.
Liste çarpma ve ortak referanslar # Aşağıdakileri çarparak iç içe bir liste yapısı oluşturma durumunu düşünün:
li = [[]] * 3 print(li) # Out: [[], [], []] İlk bakışta 3 farklı iç içe liste içeren bir listemiz olduğunu düşünebiliriz.</description>
    </item>
    
    <item>
      <title>Dize Biçimlendirme</title>
      <link>https://www.wikiod.com/tr/python/dize-bicimlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/dize-bicimlendirme/</guid>
      <description>İnsanların görmesi için verileri depolarken ve dönüştürürken, dize biçimlendirme çok önemli hale gelebilir. Python, bu konuda ana hatları verilen çok çeşitli dize biçimlendirme yöntemleri sunar.
Sözdizimi # &amp;ldquo;{}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0:.2f}&amp;quot;.format(42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{0:.0f}&amp;quot;.format(42.1234) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{answer:.2f}&amp;quot;.format(no_answer=41, answer=42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{[anahtar]}&amp;quot;.format({&amp;lsquo;anahtar&amp;rsquo;: &amp;lsquo;değer&amp;rsquo;}) ==&amp;gt; &amp;ldquo;değer&amp;rdquo;
&amp;ldquo;{1}&amp;quot;.format([&amp;lsquo;sıfır&amp;rsquo;, &amp;lsquo;bir&amp;rsquo;, &amp;lsquo;iki&amp;rsquo;]) ==&amp;gt; &amp;ldquo;bir&amp;rdquo;
&amp;ldquo;{answer} = {answer}&amp;quot;.format(answer=42) ==&amp;gt; &amp;ldquo;42 = 42&amp;rdquo;
&amp;rsquo; &amp;lsquo;.join([&amp;lsquo;yığın&amp;rsquo;, &amp;rsquo;taşma&amp;rsquo;]) ==&amp;gt; &amp;ldquo;yığın taşması&amp;rdquo;
Nasıl çalıştığına dair çok kapsamlı ve nazik bir giriş/açıklama için PyFormat.</description>
    </item>
    
    <item>
      <title>dekoratörler</title>
      <link>https://www.wikiod.com/tr/python/dekoratorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/dekoratorler/</guid>
      <description>Dekoratör işlevleri, yazılım tasarım kalıplarıdır. Doğrudan alt sınıfları kullanmak veya dekore edilmiş işlevin kaynak kodunu değiştirmek zorunda kalmadan bir işlevin, yöntemin veya sınıfın işlevselliğini dinamik olarak değiştirirler. Doğru kullanıldığında dekoratörler geliştirme sürecinde güçlü araçlar haline gelebilirler. Bu konu, Python&amp;rsquo;da dekoratör işlevlerinin uygulanmasını ve uygulamalarını kapsar.
Sözdizimi # def decorator_function(f): pass #, decorator_function adında bir dekoratör tanımlar
@dekoratör_fonksiyonu
def decored_function(): pass # fonksiyon şimdi sarılmış (dekorasyonlu) decorator_function
decorator_function = decorator_function(decorated_function) # bu, sözdizimsel şeker @decorator_function kullanımına eşdeğerdir</description>
    </item>
    
    <item>
      <title>Anlamaları Listeleme</title>
      <link>https://www.wikiod.com/tr/python/anlamalar-listeleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/anlamalar-listeleme/</guid>
      <description>Liste kavrama, 1&amp;rsquo;den 10&amp;rsquo;a kadar sayıların karelerinin bir listesini yapmak için aşağıdaki kodda gösterildiği gibi, doğal ve özlü bir şekilde listeler oluşturmak için sözdizimsel bir araçtır:
[i ** 2 için i aralığında(1,11)]
Varolan bir &amp;ldquo;aralık&amp;rdquo; listesindeki kukla &amp;ldquo;i&amp;rdquo;, yeni bir eleman deseni oluşturmak için kullanılır. Daha az anlamlı dillerde bir for döngüsünün gerekli olduğu durumlarda kullanılır.
Sözdizimi # [i for i in range(10)] # temel liste anlama [i for i in xrange(10)] # python 2.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/python/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/fonksiyonlar/</guid>
      <description>Python&amp;rsquo;daki işlevler, bir dizi belirli eylemi gerçekleştirmek için organize, yeniden kullanılabilir ve modüler kod sağlar. Fonksiyonlar kodlama sürecini basitleştirir, gereksiz mantığı önler ve kodun takip edilmesini kolaylaştırır. Bu konu, Python&amp;rsquo;da işlevlerin bildirilmesini ve kullanımını açıklar.
Python&amp;rsquo;da print(), input(), len() gibi birçok yerleşik işlev vardır. Yerleşiklerin yanı sıra daha özel işler yapmak için kendi işlevlerinizi de oluşturabilirsiniz; bunlara kullanıcı tanımlı işlevler denir.
Sözdizimi # def işlev_adı(arg1, &amp;hellip; argN, *args, kw1, kw2=varsayılan, &amp;hellip;, **kwargs): ifadeler lambda arg1, &amp;hellip; argN, *args, kw1, kw2=varsayılan, &amp;hellip;, **kwargs: ifade Parametreler # parametre Ayrıntılar arg1, &amp;hellip;, argN Normal argümanlar *arg Adsız konumsal bağımsız değişkenler kw1, &amp;hellip;, kwN Yalnızca anahtar kelime bağımsız değişkenleri **kwargs Anahtar kelime argümanlarının geri kalanı İşlevlerle yapabileceğiniz 5 temel şey:</description>
    </item>
    
    <item>
      <title>Liste imhası (diğer bir deyişle paketleme ve ambalajın açılması)</title>
      <link>https://www.wikiod.com/tr/python/liste-imhas-diger-bir-deyisle-paketleme-ve-ambalajn-aclmas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/python/liste-imhas-diger-bir-deyisle-paketleme-ve-ambalajn-aclmas/</guid>
      <description>atamayı yok etme # Atamalarda, &amp;ldquo;paket açma&amp;rdquo; sözdizimini kullanarak bir Yinelenebiliri değerlere bölebilirsiniz:
Değer olarak yok etme # a, b = (1, 2) print(a) # Prints: 1 print(b) # Prints: 2 Yinelenebilirin uzunluğundan daha fazlasını açmaya çalışırsanız, bir hata alırsınız:
a, b, c = [1] # Raises: ValueError: not enough values to unpack (expected 3, got 1) Liste olarak yıkım # Aşağıdaki sözdizimini kullanarak bilinmeyen uzunluktaki bir listeyi açabilirsiniz:
head, *tail = [1, 2, 3, 4, 5] Burada, ilk değeri skaler olarak, diğer değerleri bir liste olarak çıkarıyoruz:</description>
    </item>
    
  </channel>
</rss>

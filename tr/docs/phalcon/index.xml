<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>falkon Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/phalcon/</link>
    <description>Recent content in falkon Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/phalcon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>phalcon&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/phalcon/phalcona-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/phalcona-baslarken/</guid>
      <description>Kurulum # Phalcon özel indirme sayfasından kurulum dosyalarını indirin ve Phalcon&amp;rsquo;un popüler platformlarla çalışmasını sağlamaya yönelik kılavuzları bulun.
Pencereler # PHP işlevselliğini genişletmek için gerçek DLL dosyalarını uygun bir dizine koyun. XAMPP için &amp;lsquo;xampp\php\ext&#39; kullanın - ve WAMP için &amp;lsquo;wamp\bin\php\php*\ext&#39; yönlendirmesini kullanın. Ardından, uygun &amp;lsquo;php.ini&amp;rsquo; dosyasına &amp;rsquo;extension=php_phalcon.dll&amp;rsquo; dosyasını ekleyerek Phalcon&amp;rsquo;u etkinleştirin. Web sunucusunu yeniden başlatın ve Phalcon kullanılabilir hale gelmelidir.
Linux platformları # İstenen Phalcon sürümünü derlemek için, önce diğer gerekli araçlarla birlikte PHP kaynaklarını kurun:</description>
    </item>
    
    <item>
      <title>doğrulama</title>
      <link>https://www.wikiod.com/tr/phalcon/dogrulama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/dogrulama/</guid>
      <description>Doğrulama sınıfına ilişkin API referansı burada bulunabilir: https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html \Phalcon\Validation içinde sağlanan bir varlık varsa, \Phalcon\Validation\Validator\Uniqueness içinde model anahtarını iletmenize gerek yoktur. Yerleşik Doğrulayıcılar # PresenceOf - Bir değerin boş veya boş dize olmadığını doğrular
$validator-&amp;gt;add(&#39;name&#39;, new \Phalcon\Validation\Validator\PresenceOf([ &#39;message&#39; =&amp;gt; &#39;The name is required&#39; ])); E-posta - Bir değerin doğru e-posta biçimine sahip olup olmadığını kontrol eder
$validator-&amp;gt;add(&#39;email&#39;, new \Phalcon\Validation\Validator\Email([ &#39;message&#39; =&amp;gt; &#39;The e-mail is not valid&#39; ])); Aynı - Bir değerin diğeriyle aynı olup olmadığını kontrol eder</description>
    </item>
    
    <item>
      <title>ACL ile çalışmak</title>
      <link>https://www.wikiod.com/tr/phalcon/acl-ile-calsmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/acl-ile-calsmak/</guid>
      <description>Sözdizimi # &amp;lsquo;Phalcon\Acl::allow&amp;rsquo; ve &amp;lsquo;Phalcon\Acl::deny&amp;rsquo; yöntemlerinde &amp;lsquo;*&amp;rsquo; ikinci ve üçüncü parametre olarak kullanabilirsiniz. Bu, sırasıyla herhangi bir kaynak ve eylem anlamına gelecektir.
Phalcon\Acl::addRole içindeki ikinci argüman, hangi rol mirasına erişimin olduğunu söyler.
ACL&amp;rsquo;nizi her istekte oluşturmak yerine bir dosya veya önbellek arka ucuna seri hale getirmelisiniz.
Ayrıca acl&amp;rsquo;yi ayrı bir dosyada tutmak iyi bir fikirdir.
Phalcon\Acl olay yöneticisine olay gönderebilir, iki olay vardır - beforeCheckAccess ve afterCheckAccess.
Kendi acl adaptörünüzü uygulamak için Phalcon\Acl\AdapterInterface kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>Yönlendirme ve gönderme</title>
      <link>https://www.wikiod.com/tr/phalcon/yonlendirme-ve-gonderme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/yonlendirme-ve-gonderme/</guid>
      <description>Çoklu Modül Uygulaması için RESTful API Rotaları # // Define new router group $api = new \Phalcon\Mvc\Router\Group([ &#39;module&#39; =&amp;gt; &#39;api&#39;, ]); $api-&amp;gt;setPrefix(&#39;/api/v1&#39;); // API routes (Maps to Cotnroller::Action) $api-&amp;gt;addGet(&#39;/users&#39;, &#39;Users::index&#39;); $api-&amp;gt;addGet(&#39;/users/search/{query}&#39;, &#39;Users::search&#39;); $api-&amp;gt;addGet(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::fetch&#39;); $api-&amp;gt;addPost(&#39;/users&#39;, &#39;Users::add&#39;); $api-&amp;gt;addPut(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::edit&#39;); $api-&amp;gt;addDelete(&#39;/users/{id:[0-9]+}&#39;, &#39;Users::delete&#39;); // Add API routes to main router $router-&amp;gt;mount($api); Kullanıcı oluşturma örneği:
curl -i -X POST -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;John Snow&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;King of the North&amp;quot;}&#39; http://example.com/api/v1/users Modül rotalarını dinamik olarak ayarlayın # $router = new \Phalcon\Mvc\Router(false); $router-&amp;gt;removeExtraSlashes(true); $request = new \Phalcon\Http\Request(); $action = strtolower($request-&amp;gt;getMethod()); // get, post, etc.</description>
    </item>
    
    <item>
      <title>Etkinlik Yöneticisi</title>
      <link>https://www.wikiod.com/tr/phalcon/etkinlik-yoneticisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/etkinlik-yoneticisi/</guid>
      <description>Dinamik ACL kontrolü # ACL mantığınızı çalıştırmak için bir Güvenlik sınıfı oluşturun.
&amp;lt;?php namespace Plugins; use Phalcon\Events\Event; use Phalcon\Mvc\Dispatcher; use Phalcon\Acl; use Phalcon\Acl\Role; use Phalcon\Acl\Resource; use Phalcon\Acl\Adapter\Memory as AclList; class Security extends \Phalcon\Mvc\User\Plugin { public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher) { // your acl logic here } } beforeExecuteRoute üzerinde çalıştırmak için Security sınıfını dağıtım programına bağlayın.
$di = new \Phalcon\DI\FactoryDefault(); $eventsManager = $di[&#39;eventsManager&#39;]; $di-&amp;gt;setShared(&#39;dispatcher&#39;, function() use ($eventsManager) { $eventsManager-&amp;gt;attach(&#39;dispatch:beforeExecuteRoute&#39;, new \Plugins\Security); $dispatcher = new \Phalcon\Mvc\Dispatcher; $dispatcher-&amp;gt;setEventsManager($eventsManager); return $dispatcher; }); </description>
    </item>
    
    <item>
      <title>Veritabanı Yönetimi</title>
      <link>https://www.wikiod.com/tr/phalcon/veritaban-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/veritaban-yonetimi/</guid>
      <description>Phalcon Modeli kullanarak veritabanı yönetimi # Terminal kök konumundan aşağıdaki komut çalıştırılarak yeni bir tablo için bir model oluşturulabilir:
phalcon model &amp;lt;table-name&amp;gt; Model Kullanıcılarını alalım.
SEÇME
Phalcon&amp;rsquo;da seçme işlemi yapmak için iki varsayılan işlev vardır, find() ve findFirst()
findFirst(), geçmekte olduğumuz koşulları sağlayan ilk satırı almak için kullanılır. İlk satırdaki verilerle tek bir nesne döndürür.
Örnek:
$user = Users::findFirst(&amp;quot;active=1 AND verified=1 AND email=&#39;a@a.com&#39;&amp;quot;); Bu, kullanıcıyı verilen e-postayla döndürür ve doğrulanmış ve etkin sütunun değeri 1&amp;rsquo;dir.</description>
    </item>
    
    <item>
      <title>kuluçka makinesi</title>
      <link>https://www.wikiod.com/tr/phalcon/kulucka-makinesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/kulucka-makinesi/</guid>
      <description>Giriiş # Phalcon Incubator topluluk tarafından yeni özellikleri denemek veya mevcut Phalcon adaptörlerini, prototiplerini veya işlevlerini genişletmek için kullanılabilir.
İnkübatördeki herhangi bir şey potansiyel olarak çerçeveye dahil edilebilir.
Github deposu: https://github.com/phalcon/incubator
Kurulum # Besteci ile Kurulum # İnkübatörü kurmanın en kolay yolu Composer kullanmaktır.
Composer&amp;rsquo;ı kurun ve projenizin kökünde yeni bir &amp;lsquo;composer.json&amp;rsquo; dosyası oluşturun.
|-- app |-- public | `-- index.php |-- vendor |-- composer.json Aşağıdaki içeriği composer.json dosyasına ekleyin. Hala Phalcon 2.</description>
    </item>
    
    <item>
      <title>Filtreleme ve Sanitasyon</title>
      <link>https://www.wikiod.com/tr/phalcon/filtreleme-ve-sanitasyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/phalcon/filtreleme-ve-sanitasyon/</guid>
      <description>Kullanışlı model içi sterilizasyon # Temel modelinizde bir kolaylık yöntemi belirleyin
namespace Base; class Model extends \Phalcon\Mvc\Model { public function sanitize($attr, $filterName) { $filter = $this-&amp;gt;getDI()-&amp;gt;get(&#39;filter&#39;); $this-&amp;gt;$attr = $filter-&amp;gt;sanitize($this-&amp;gt;$attr, $filterName); } } O zaman böyle kullan
class User extends \Base\Model { public function beforeValidation() { $this-&amp;gt;sanitize(&#39;id&#39;, &#39;int&#39;); // input $this-&amp;gt;id: 123abc // output: 123 $this-&amp;gt;sanitize(&#39;email&#39;, &#39;email&#39;); // input $this-&amp;gt;email: youre(-)mail@dom/ain.com // output: youremail@domain.com $this-&amp;gt;sanitize(&#39;wage&#39;, &#39;float&#39;); // input $this-&amp;gt;wage: +1234ab.56cd // output: 1234.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gwt Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/gwt/</link>
    <description>Recent content in gwt Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/gwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gwt&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/gwt/gwtye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/gwt/gwtye-baslarken/</guid>
      <description>Kurulum # GWT SDK dosyasını indirin ve sıkıştırmasını açın. Bu, web uygulamaları yazmak için ihtiyaç duyduğunuz çekirdek kitaplıkları, derleyiciyi ve geliştirme sunucusunu içerir.
Windows&amp;rsquo;ta dosyaları sıkıştırılmış gwt-2.7.0.zip klasöründen çıkarın. Mac veya Linux&amp;rsquo;ta paketi aşağıdaki gibi bir komutla açabilirsiniz:
unzip gwt-2.7.0.zip GWT SDK&amp;rsquo;nın bir yükleyici uygulaması yoktur. SDK&amp;rsquo;yı çalıştırmak ve kullanmak için ihtiyacınız olan tüm dosyalar, ayıklanan dizinde bulunur.
Ayrıca, web uygulamasını yerel olarak çalıştırabilmek için Apache ant&amp;rsquo;nin sisteminizde kurulu olması gerekir.</description>
    </item>
    
    <item>
      <title>RestyGwt ile sunucu tarafı iletişimi</title>
      <link>https://www.wikiod.com/tr/gwt/restygwt-ile-sunucu-taraf-iletisimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/gwt/restygwt-ile-sunucu-taraf-iletisimi/</guid>
      <description>RestyGWT bir GWT oluşturucu olduğundan, istemci arabiriminizin uygulamasını otomatik olarak oluşturacaktır. Başlık altında, çağrılarınızı uygulamak için RequestBuilder sınıfını kullanır.
REST istemcinizi tanımlama ve kullanma # Arka uç REST kaynağınız zaten mevcut olmalıdır. Müşteri tarafında (GWT) yapmanız gereken
Maven ile projenize RestyGwt bağımlılığını ekleyin
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.fusesource.restygwt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;restygwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Kalıtımı modül dosyanıza ekleyin
&amp;lt;inherits name=&amp;quot;org.fusesource.restygwt.RestyGWT&amp;quot;/&amp;gt; İstemci arayüzünüzü oluşturun
public interface PizzaService extends RestService { @POST @Path(&amp;quot;pizzaorders&amp;quot;) public void order(PizzaOrder request, MethodCallback&amp;lt;OrderConfirmation&amp;gt; callback); } İstemcinizi uygulamanızda istediğiniz yerde kullanın</description>
    </item>
    
    <item>
      <title>HandlerManager ile olay kullanımı</title>
      <link>https://www.wikiod.com/tr/gwt/handlermanager-ile-olay-kullanm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/gwt/handlermanager-ile-olay-kullanm/</guid>
      <description>Basit Olay ve EventHandler kullanım sözdizimi # HanlderManager şunları sağlar:
public class HandlerManagerProvider { private static HandlerManager handlerManager; private HandlerManagerProvider() { } public static HandlerManager get() { return handlerManager != null ? handlerManager : (handlerManager = new HandlerManager(null)); } } Olay işleyicisi:
import com.google.gwt.event.shared.EventHandler; public interface CustomEventHandler extends EventHandler { void doMyAction(CustomEvent event); } Etkinlik:
import com.google.gwt.event.shared.GwtEvent; public class CustomEvent extends GwtEvent&amp;lt;CustomEventHandler&amp;gt; { public static final Type&amp;lt;CustomEventHandler&amp;gt; TYPE = new Type&amp;lt;&amp;gt;(); @Override public Type&amp;lt;CustomEventHandler&amp;gt; getAssociatedType() { return TYPE; } @Override protected void dispatch(CustomEventHandler) { handler.</description>
    </item>
    
  </channel>
</rss>

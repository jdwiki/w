<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/php/</link>
    <description>Recent content in PHP Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/php/phpyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/phpyi-kullanmaya-baslama/</guid>
      <description>Web sunucusundan HTML çıktısı # PHP, HTML dosyalarına içerik eklemek için kullanılabilir. HTML doğrudan bir web tarayıcısı tarafından işlenirken, PHP komut dosyaları bir web sunucusu tarafından yürütülür ve elde edilen HTML tarayıcıya gönderilir.
Aşağıdaki HTML işaretlemesi, çıktıya Merhaba Dünya! ekleyecek bir PHP ifadesi içerir:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;PHP!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;&amp;lt;?php echo &amp;quot;Hello world!&amp;quot;; ?&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Bu bir PHP betiği olarak kaydedildiğinde ve bir web sunucusu tarafından yürütüldüğünde, kullanıcının tarayıcısına aşağıdaki HTML gönderilir:</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/tr/php/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/json/</guid>
      <description>JSON (JavaScript Object Notation), nesneleri düz metne serileştirmenin platformdan ve dilden bağımsız bir yoludur. Web&amp;rsquo;de ve PHP&amp;rsquo;de sıklıkla kullanıldığı için, PHP&amp;rsquo;de JSON ile çalışmak için bir temel uzantı vardır.
Sözdizimi # string json_encode ( karışık $değer [, int $seçenekler = 0 [, int $derinlik = 512 ]] ) karışık json_decode ( string $json [, bool $assoc = false [, int $derinlik = 512 [, int $options = 0 ]]] ) Parametreler # parametre Ayrıntılar json_encode - değer Kodlanan değer.</description>
    </item>
    
    <item>
      <title>Değişkenler</title>
      <link>https://www.wikiod.com/tr/php/degiskenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/degiskenler/</guid>
      <description>Sözdizimi # $değişken = &amp;lsquo;değer&amp;rsquo;; // Genel değişken ata $nesne-&amp;gt;özellik = &amp;lsquo;değer&amp;rsquo;; // Bir nesne özelliği ata SınıfAdı::$özellik = &amp;lsquo;değer&amp;rsquo;; // Statik bir sınıf özelliği atayın $dizi[0] = &amp;lsquo;değer&amp;rsquo;; // Bir dizinin indeksine bir değer atayın $dizi[] = &amp;lsquo;değer&amp;rsquo;; // Bir dizinin sonundaki bir öğeyi itin $dizi[&amp;lsquo;anahtar&amp;rsquo;] = &amp;lsquo;değer&amp;rsquo;; // Bir dizi değeri ata echo $değişken; // Değişken bir değeri yankı (yazdır) bazı_fonksiyon($değişken); // Değişkeni fonksiyon parametresi olarak kullan unset($değişken); // Bir değişkenin ayarını kaldır $$değişken = &amp;lsquo;değer&amp;rsquo;; // Değişken bir değişkene atama isset($değişken); // Bir değişkenin ayarlanıp ayarlanmadığını kontrol edin boş($değişken); // Bir değişkenin boş olup olmadığını kontrol edin Tip kontrolü # Değişkenler ve türlerle ilgili bazı belgeler PHP&amp;rsquo;nin kullanmadığından bahseder.</description>
    </item>
    
    <item>
      <title>Sınıflar ve Nesneler</title>
      <link>https://www.wikiod.com/tr/php/snflar-ve-nesneler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/snflar-ve-nesneler/</guid>
      <description>Sınıflar ve Nesneler, benzer görevleri gruplayarak kodunuzu daha verimli ve daha az tekrarlı hale getirmek için kullanılır.
Nesneleri oluşturmak için kullanılan eylemleri ve veri yapısını tanımlamak için bir sınıf kullanılır. Nesneler daha sonra bu önceden tanımlanmış yapı kullanılarak oluşturulur.
Sözdizimi # class &amp;lt;ClassName&amp;gt; [ &amp;lt;ParentClassName&amp;gt; öğesini genişletir ] [ &amp;lt;Interface1&amp;gt; [, &amp;lt;Interface2&amp;gt;, ... ] { } uygular // Sınıf bildirimi arayüz &amp;lt;ArayüzAdı&amp;gt; [ &amp;lt;ParentInterface1&amp;gt;&#39;i genişletir [, &amp;lt;ParentInterface2&amp;gt;, ...] ] { } // Arayüz bildirimi `&amp;lt;Özellik1&amp;gt; [, &amp;lt;Özellik2&amp;gt;, &amp;hellip;]&amp;rsquo; kullanın; // özellikleri kullan [ genel | korumalı | özel ] [ statik ] $&amp;lt;varName&amp;gt;; // Nitelik bildirimi const &amp;lt;CONST_NAME&amp;gt;; // Sabit bildirim [ genel | korumalı | özel ] [ statik ] işlev &amp;lt;yöntemAdı&amp;gt;([args.</description>
    </item>
    
    <item>
      <title>PDO</title>
      <link>https://www.wikiod.com/tr/php/pdo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/pdo/</guid>
      <description>PDO (PHP Veri Nesneleri) uzantısı, geliştiricilerin çok sayıda farklı türde veritabanlarına bağlanmasına ve bunlara karşı tek tip, nesne yönelimli sorgular yürütmesine olanak tanır. tavır.
Sözdizimi # PDO::LastInsertId() PDO::LastInsertId($columnName) // bazı sürücülerin sütun adına ihtiyacı var Uyarı lastInsertId() kullanırken istisnaları kontrol etmeyi unutmayın. Aşağıdaki hatayı verebilir:
SQLSTATE IM001 : Sürücü bu işlevi desteklemiyor
Bu yöntemi kullanarak istisnaları nasıl düzgün bir şekilde kontrol etmeniz gerektiği aşağıda açıklanmıştır:
// Retrieving the last inserted id $id = null; try { $id = $pdo-&amp;gt;lastInsertId(); // return value is an integer } catch( PDOException $e ) { echo $e-&amp;gt;getMessage(); } Parametreli Sorgularla SQL Injection&amp;rsquo;ı Önleme # SQL enjeksiyonu, kötü niyetli bir kullanıcının SQL sorgusunu değiştirmesine ve buna istenmeyen komutlar eklemesine izin veren bir saldırı türüdür.</description>
    </item>
    
    <item>
      <title>Bir Değişkenin Değerini Çıkarma</title>
      <link>https://www.wikiod.com/tr/php/bir-degiskenin-degerini-ckarma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/bir-degiskenin-degerini-ckarma/</guid>
      <description>Dinamik ve etkileşimli bir PHP programı oluşturmak için değişkenlerin ve değerlerinin çıktısını almak yararlıdır. PHP dili, birden çok değer çıktısı yöntemine izin verir. Bu konu, PHP&amp;rsquo;de bir değer yazdırmanın standart yöntemlerini ve bu yöntemlerin nerede kullanılabileceğini kapsar.
PHP&amp;rsquo;deki değişkenler çeşitli tiplerde gelir. Kullanım durumuna bağlı olarak, bunları tarayıcıya işlenmiş HTML olarak çıktısını almak, hata ayıklama için çıktısını almak veya terminale çıktısını almak isteyebilirsiniz (bir uygulamayı komut satırı üzerinden çalıştırıyorsanız).
Aşağıda, değişkenleri çıktılamak için en sık kullanılan yöntemlerden ve dil yapılarından bazıları verilmiştir:</description>
    </item>
    
    <item>
      <title>diziler</title>
      <link>https://www.wikiod.com/tr/php/diziler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/diziler/</guid>
      <description>Dizi, rastgele sayıda değeri tek bir değerde saklayan bir veri yapısıdır. PHP&amp;rsquo;deki bir dizi aslında sıralı bir haritadır; burada map, değerleri anahtarlarla ilişkilendiren bir türdür.
Sözdizimi # $dizi = dizi(&amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;Değer2&amp;rsquo;, &amp;lsquo;Değer3&amp;rsquo;); // Tuşlar varsayılan olarak 0, 1, 2, &amp;hellip;, $dizi = dizi(&amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;Değer2&amp;rsquo;, ); // İsteğe bağlı sondaki virgül $dizi = dizi(&amp;lsquo;anahtar1&amp;rsquo; =&amp;gt; &amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;anahtar2&amp;rsquo; =&amp;gt; &amp;lsquo;Değer2&amp;rsquo;, ); // Açık anahtarlar $dizi = dizi(&amp;lsquo;anahtar1&amp;rsquo; =&amp;gt; &amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;Değer2&amp;rsquo;, ); // Dizi ( [&amp;lsquo;key1&amp;rsquo;] =&amp;gt; Değer1 1 =&amp;gt; &amp;lsquo;Değer2&amp;rsquo;) $dizi = [&amp;lsquo;anahtar1&amp;rsquo; =&amp;gt; &amp;lsquo;Değer1&amp;rsquo;, &amp;lsquo;anahtar2&amp;rsquo; =&amp;gt; &amp;lsquo;Değer2&amp;rsquo;, ]; // PHP 5.</description>
    </item>
    
    <item>
      <title>Güvenlik</title>
      <link>https://www.wikiod.com/tr/php/guvenlik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/guvenlik/</guid>
      <description>Web sitelerinin çoğu PHP ile çalıştığından, uygulama güvenliği PHP geliştiricilerinin web sitelerini, verilerini ve istemcilerini korumaları için önemli bir konudur. Bu konu, PHP&amp;rsquo;deki en iyi güvenlik uygulamalarının yanı sıra PHP&amp;rsquo;deki örnek düzeltmelerle birlikte yaygın güvenlik açıkları ve zayıflıkları kapsar.
Ayrıca bakınız
PDO&amp;rsquo;da Parametreli Sorgularla SQL Enjeksiyonunu Önleme mysqli&amp;rsquo;de Hazırlanan İfadeler Açık Web Uygulaması Güvenlik Projesi (OWASP) 1: https://www.wikiod.com/tr/php/pdo#Parametreli Sorgularla SQL Injection&amp;rsquo;ı Önleme 2: https://www.wikiod.com/tr/php/php-mysqli#MySQLi&amp;rsquo;de hazırlanan ifadeler 3: https://www.owasp.org/index.php/Main_Page
PHP Sürüm Sızıntısı # Varsayılan olarak, PHP dünyaya hangi PHP sürümünü kullandığınızı söyler, ör.</description>
    </item>
    
    <item>
      <title>Özellikler</title>
      <link>https://www.wikiod.com/tr/php/ozellikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/ozellikler/</guid>
      <description>Yatay kodun yeniden kullanımını kolaylaştıran özellikler # Diyelim ki günlüğe kaydetme için bir arayüzümüz var:
interface Logger { function log($message); } Şimdi, &amp;ldquo;Logger&amp;rdquo; arabiriminin iki somut uygulamasına sahip olduğumuzu varsayalım: &amp;ldquo;FileLogger&amp;rdquo; ve &amp;ldquo;ConsoleLogger&amp;rdquo;.
class FileLogger implements Logger { public function log($message) { // Append log message to some file } } class ConsoleLogger implements Logger { public function log($message) { // Log message to the console } } Şimdi, günlük tutma görevlerini de gerçekleştirmek istediğiniz başka bir &amp;lsquo;Foo&amp;rsquo; sınıfı tanımlarsanız, şöyle bir şey yapabilirsiniz:</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/php/bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/php/bagmllk-enjeksiyonu/</guid>
      <description>Bağımlılık Enjeksiyonu (DI), _&amp;ldquo;şeyleri iletmek&amp;rdquo; için süslü bir terimdir. Bunun gerçekten anlamı, bir nesnenin bağımlılıklarını, nesne içinde nesne oluşturma üzerine oluşturmak yerine yapıcı ve/veya ayarlayıcılar aracılığıyla iletmektir.
Bağımlılık Enjeksiyonu, inşaat ve enjeksiyonu otomatikleştiren Bağımlılık Enjeksiyon Konteynerlerine de atıfta bulunabilir.
Yapıcı Enjeksiyonu # Nesneler genellikle diğer nesnelere bağlı olacaktır. Bağımlılığı yapıcıda oluşturmak yerine, bağımlılık yapıcıya parametre olarak aktarılmalıdır. Bu, nesneler arasında sıkı bir bağlantı olmamasını sağlar ve sınıf somutlaştırmaya olan bağımlılığın değiştirilmesini sağlar.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hançer-2 Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/dagger-2/</link>
    <description>Recent content in hançer-2 Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/dagger-2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hançer-2&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/dagger-2/hancer-2ye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dagger-2/hancer-2ye-baslarken/</guid>
      <description>Android örneği # Dagger kullanarak bir Android uygulaması yazmanın temel zorluklarından biri, birçok Android çerçeve sınıfının, &amp;ldquo;Activity&amp;rdquo; ve &amp;ldquo;Fragment&amp;rdquo; gibi işletim sisteminin kendisi tarafından başlatılmasıdır, ancak Dagger, enjekte edilen tüm nesneleri oluşturabiliyorsa en iyi sonucu verir. Bunun yerine, bir yaşam döngüsü yönteminde üye enjeksiyonu yapmanız gerekir. 2.10 sürümünden itibaren hançer, android bileşenleriyle hançer kullanımını basitleştiren &amp;lsquo;dagger.android&amp;rsquo; kullanımına izin verir.
Etkinlik nesnelerini enjekte etme
Bu temel türler için gerekli tüm bağlamaların kullanılabilir olduğundan emin olmak için uygulama bileşeninize &amp;lsquo;AndroidInjectionModule&amp;rsquo; yükleyin.</description>
    </item>
    
    <item>
      <title>@Kotlin&#39;de adlandırılmış ek açıklama</title>
      <link>https://www.wikiod.com/tr/dagger-2/kotlinde-adlandrlms-ek-acklama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dagger-2/kotlinde-adlandrlms-ek-acklama/</guid>
      <description>Kotlin v1.1&amp;rsquo;de adlandırılmış ek açıklama nasıl doğru şekilde kullanılır?
Nitelikli bir bağımlılık bildirme # @Module class AppModule(val app: Application) { @Provides @Named(&amp;quot;the_answer&amp;quot;) fun providesTheAnswer(): Int { return 42 } } Setter tabanlı bağımlılık enjeksiyonu # class MyClass{ @field:[Inject Named(&amp;quot;the_answer&amp;quot;)] lateinit var answer: Int } Android Geliştirme&amp;rsquo;de, &amp;ldquo;Etkinlik&amp;rdquo;, &amp;ldquo;Parça&amp;rdquo; veya doğrudan işletim sistemi tarafından oluşturulan diğer herhangi bir nesneye bağımlılıkları enjekte etme yönteminiz budur.
Kotlin&amp;rsquo;deki @field: ek açıklaması hakkında daha fazla bilgi edinmek için belgeleri ziyaret edin.</description>
    </item>
    
  </channel>
</rss>

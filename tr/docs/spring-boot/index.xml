<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bahar-önyükleme Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/spring-boot/</link>
    <description>Recent content in bahar-önyükleme Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yaylı çizmeye başlarken</title>
      <link>https://www.wikiod.com/tr/spring-boot/yayl-cizmeye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/yayl-cizmeye-baslarken/</guid>
      <description>Kurulum veya Kurulum # Spring Community&amp;rsquo;nin sıkı çalışması sayesinde Spring Boot ile ilk kez kurulum yapmak oldukça hızlı.
Önkoşullar:
Java yüklü Java IDE Önerilen gerekli değil (Intellij, Eclipse, Netbeans, vb.) Maven ve/veya Gradle&amp;rsquo;ın kurulu olması gerekmez. Spring Initializr tarafından oluşturulan projeler bir Maven Wrapper (&amp;lsquo;mvnw&amp;rsquo; komutu) veya Gradle Wrapper (&amp;lsquo;gradlew&amp;rsquo; komutu) ile birlikte gelir.
Web tarayıcınızı https://start.spring.io adresine açın Bu, yeni Spring Boot uygulamaları oluşturmak için bir fırlatma panelidir, şimdilik minimum düzeyde gideceğiz.</description>
    </item>
    
    <item>
      <title>Birden çok application.properties dosyasının oluşturulması ve kullanılması</title>
      <link>https://www.wikiod.com/tr/spring-boot/birden-cok-applicationproperties-dosyasnn-olusturulmas-ve-kullanlmas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/birden-cok-applicationproperties-dosyasnn-olusturulmas-ve-kullanlmas/</guid>
      <description>Farklı veri kaynakları kullanan Dev ve Prod ortamı # Spring-Boot uygulamasını başarıyla kurduktan sonra, tüm konfigürasyon bir application.properties dosyasında işlenir. Dosyayı src/main/resources/ konumunda bulacaksınız.
Normalde uygulamanın arkasında bir veritabanına ihtiyaç vardır. Geliştirme için &amp;ldquo;dev&amp;rdquo; ve &amp;ldquo;prod&amp;rdquo; ortamlarının bir kurulumuna sahip olmak iyidir. Birden çok &amp;ldquo;application.properties&amp;rdquo; dosyası kullanarak Spring-Boot&amp;rsquo;a uygulamanın hangi ortamla başlaması gerektiğini söyleyebilirsiniz.
İyi bir örnek, iki veritabanını yapılandırmaktır. Biri &amp;ldquo;geliştirme&amp;rdquo; ve diğeri &amp;ldquo;üretken&amp;rdquo; için.
&amp;ldquo;dev&amp;rdquo; ortamı için &amp;ldquo;H2&amp;rdquo; gibi bir bellek içi veritabanı kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>DİNLENME Hizmetleri</title>
      <link>https://www.wikiod.com/tr/spring-boot/dinlenme-hizmetleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/dinlenme-hizmetleri/</guid>
      <description>Parametreler # Açıklama Sütun @Kontrolör Açıklamalı bir sınıfın &amp;ldquo;Denetleyici&amp;rdquo; (web denetleyicisi) olduğunu gösterir. @RequestMapping Web isteklerini belirli işleyici sınıflarına (sınıfla birlikte kullandıysak) ve/veya işleyici yöntemlerine (yöntemlerle birlikte kullandıysak) eşlemek için açıklama. yöntem = RequestMethod.GET HTTP istek yöntemlerinin türü YanıtBody Bir yöntem dönüş değerini gösteren açıklama, web yanıt gövdesine bağlanmalıdır @RestController @Controller + ResponseBody @ResponseEntity HttpStatus durum kodu ekleyen HttpEntity uzantısı, dönüş http kodunu kontrol edebiliriz REST-Servis Oluşturma # STS (Spring Starter Project) veya Spring Initializr (https://start.</description>
    </item>
    
    <item>
      <title>Paket tarama</title>
      <link>https://www.wikiod.com/tr/spring-boot/paket-tarama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/paket-tarama/</guid>
      <description>Bu konuda yaylı önyükleme paketi taramasını gözden geçireceğim.
İlkbahar açılış belgelerinde bazı temel bilgileri aşağıdaki bağlantıda bulabilirsiniz (using-boot-structuring-your-code -boot-structuring-your-code.html)) ama daha detaylı bilgi vermeye çalışacağım.
Yaylı önyükleme ve genel olarak yay, &amp;ldquo;fasulye&amp;rdquo; ve &amp;ldquo;yapılandırma&amp;rdquo; oluşturmak amacıyla belirli ek açıklamalar için paketleri otomatik olarak tarama özelliği sağlar.
Parametreler # Açıklama Ayrıntılar @SpringBootApplication Ana yaylı önyükleme uygulaması ek açıklaması. uygulamada bir kez kullanılır, bir ana yöntem içerir ve paket tarama için ana paket görevi görür @SpringBootConfiguration Bir sınıfın Spring Boot uygulaması sağladığını gösterir.</description>
    </item>
    
    <item>
      <title>Spring Boot&#39;da Test Etme</title>
      <link>https://www.wikiod.com/tr/spring-boot/spring-bootda-test-etme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/spring-bootda-test-etme/</guid>
      <description>Basit Bir Spring Boot Uygulamasını Test Etme # Kullanıcı verilerini MongoDB&amp;rsquo;de depolayan örnek bir Spring boot uygulamamız var ve veri almak için Rest servislerini kullanıyoruz.
İlk önce bir etki alanı sınıfı var, yani POJO
@Document public class User{ @Id private String id; private String name; } Spring Data MongoDB&amp;rsquo;ye dayalı karşılık gelen bir depo
public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; { } Ardından Kullanıcı Denetleyicimiz
@RestController class UserController { @Autowired private UserRepository repository; @RequestMapping(&amp;quot;/users&amp;quot;) List&amp;lt;User&amp;gt; users() { return repository.</description>
    </item>
    
    <item>
      <title>MongoDB için Spring Boot Kullanarak Redis ile Önbelleğe Alma</title>
      <link>https://www.wikiod.com/tr/spring-boot/mongodb-icin-spring-boot-kullanarak-redis-ile-onbellege-alma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/mongodb-icin-spring-boot-kullanarak-redis-ile-onbellege-alma/</guid>
      <description>Neden Önbelleğe Alma? # Günümüzde performans, bir web hizmeti/Uygulama geliştirirken değerlendirmemiz gereken en önemli metriklerden biridir. Müşterileri bağlı tutmak herhangi bir ürün için kritik öneme sahiptir ve bu nedenle performansları iyileştirmek ve sayfa yükleme sürelerini azaltmak son derece önemlidir.
Bir veritabanıyla etkileşime giren bir web sunucusunu çalıştırırken, işlemleri bir darboğaz haline gelebilir. MongoDB burada bir istisna değildir ve MongoDB veritabanımız büyüdükçe işler gerçekten yavaşlayabilir. Veritabanı sunucusu web sunucusundan ayrılırsa bu sorun daha da kötüleşebilir.</description>
    </item>
    
    <item>
      <title>Yaylı önyükleme &#43; Yay Verileri JPA</title>
      <link>https://www.wikiod.com/tr/spring-boot/yayl-onyukleme--yay-verileri-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/yayl-onyukleme--yay-verileri-jpa/</guid>
      <description>Spring Boot, mutlak minimum karmaşa ile Spring destekli, üretim sınıfı uygulamalar ve hizmetler oluşturmayı kolaylaştırır. Konfigürasyon yerine konvansiyonu tercih eder.
Spring Data ailesinin bir parçası olan Spring Data JPA, JPA tabanlı depoların uygulanmasını kolaylaştırır. Veri erişim teknolojilerini kullanan uygulamalar oluşturmayı kolaylaştırır.
Ek açıklamalar # @Repository: Açıklamalı bir sınıfın bir &amp;ldquo;Depo&amp;rdquo; olduğunu, bir nesne koleksiyonunu taklit eden depolama, alma ve arama davranışını kapsayan bir mekanizma olduğunu gösterir. &amp;ldquo;Veri Erişim Nesnesi&amp;rdquo; gibi geleneksel J2EE modellerini uygulayan ekipler, bu klişeyi DAO sınıflarına da uygulayabilir, ancak bunu yapmadan önce Veri Erişim Nesnesi ile DDD tarzı depolar arasındaki ayrımı anlamaya özen gösterilmelidir.</description>
    </item>
    
    <item>
      <title>JHipster ile Tam Duyarlı Spring Boot Web Uygulaması</title>
      <link>https://www.wikiod.com/tr/spring-boot/jhipster-ile-tam-duyarl-spring-boot-web-uygulamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/jhipster-ile-tam-duyarl-spring-boot-web-uygulamas/</guid>
      <description>Mac OS&amp;rsquo;de jHipster kullanarak Spring Boot Uygulaması oluşturun # jHipster, bir REST API arka ucu ve bir AngularJS ve Twitter Bootstrap ön ucu ile bir Spring Boot web uygulamasını önyüklemenize olanak tanır.
jHipster hakkında daha fazla bilgiyi burada bulabilirsiniz: jHipster Documentation
** Brew yükleyin:**
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Brew&amp;rsquo;in nasıl kurulacağına ilişkin ek bilgileri burada görüntüleyin: Install Brew
Gradle&amp;rsquo;ı kurun
Gradle bir bağımlılık yönetimi ve yapı sistemidir.
brew install gradle Git&amp;rsquo;i yükleyin</description>
    </item>
    
    <item>
      <title>Bahar önyüklemesi &#43; Hazırda Bekletme &#43; Web Kullanıcı Arayüzü (Thymeleaf)</title>
      <link>https://www.wikiod.com/tr/spring-boot/bahar-onyuklemesi--hazrda-bekletme--web-kullanc-arayuzu-thymeleaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/bahar-onyuklemesi--hazrda-bekletme--web-kullanc-arayuzu-thymeleaf/</guid>
      <description>Bu iş parçacığı, hibernate ve thymyleaf şablon motoruyla bir bahar önyükleme uygulamasının nasıl oluşturulacağına odaklanmıştır.
Ayrıca Thymeleaf belgelerine bakın
Hazırda Bekleme Yapılandırması # İlk olarak, Hibernate&amp;rsquo;i doğru bir şekilde kurmak için neye ihtiyacımız olduğunu gözden geçirelim.
@EnableTransactionManagement ve @EnableJpaRepositories - işlem yönetimi ve yay veri havuzlarını kullanmak istiyoruz. &amp;ldquo;DataSource&amp;rdquo; - uygulama için ana veri kaynağı. bu örnek için bellek içi h2 kullanma. &amp;ldquo;LocalContainerEntityManagerFactoryBean&amp;rdquo; - &amp;ldquo;HibernateJpaVendorAdapter&amp;rdquo; kullanan bahar varlık yöneticisi fabrikası. &amp;ldquo;PlatformTransactionManager&amp;rdquo; - &amp;ldquo;@Transactional&amp;rdquo; açıklamalı bileşenleri için ana işlem yöneticisi.</description>
    </item>
    
    <item>
      <title>Yaylı çizme &#43; JPA &#43; mongoDB</title>
      <link>https://www.wikiod.com/tr/spring-boot/yayl-cizme--jpa--mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/spring-boot/yayl-cizme--jpa--mongodb/</guid>
      <description>Müşteri Denetleyicisi # package org.bookmytickets.controller; import java.util.List; import org.bookmytickets.model.Customer; import org.bookmytickets.repository.CustomerRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = &amp;quot;/customer&amp;quot;) public class CustomerController { @Autowired private CustomerRepository repository; @GetMapping(&amp;quot;&amp;quot;) public List&amp;lt;Customer&amp;gt; selectAll(){ List&amp;lt;Customer&amp;gt; customerList = repository.findAll(); return customerList; } @GetMapping(&amp;quot;/{id}&amp;quot;) public List&amp;lt;Customer&amp;gt; getSpecificCustomer(@PathVariable String id){ return repository.findById(id); } @GetMapping(&amp;quot;/search/lastName/{lastName}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByLastName(@PathVariable String lastName){ return repository.findByLasttName(lastName); } @GetMapping(&amp;quot;/search/firstname/{firstname}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByFirstName(@PathVariable String firstName){ return repository.</description>
    </item>
    
  </channel>
</rss>

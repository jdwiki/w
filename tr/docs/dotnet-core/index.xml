<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net-core Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/dotnet-core/</link>
    <description>Recent content in .net-core Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.net-core&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/dotnet-core/net-coreu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/net-coreu-kullanmaya-baslama/</guid>
      <description>Merhaba Dünya Örnek Uygulaması Oluşturma # Bir yerde boş bir dizin oluşturun &amp;hellip;
mkdir HelloWorld cd HelloWorld Ardından, bir Hello World örneği oluşturmak için yerleşik iskele teknolojisini kullanın.
dotnet new console -o Bu komut iki dosya oluşturur:
HelloWorld.csproj proje bağımlılıklarını, ayarlarını ve Hedef Çerçeveyi açıklar &amp;ldquo;Merhaba Dünya&amp;rdquo; yayan ana giriş noktası ve konsol için kaynak kodunu tanımlayan Program.cs. &amp;lsquo;dotnet new&amp;rsquo; komutu başarısız olursa, .NET Core&amp;rsquo;u düzgün yüklediğinizden emin olun. İncelemek için favori düzenleyicinizde Program.</description>
    </item>
    
    <item>
      <title>System.Runtime ile mscorlib karşılaştırmasını anlama</title>
      <link>https://www.wikiod.com/tr/dotnet-core/systemruntime-ile-mscorlib-karslastrmasn-anlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/systemruntime-ile-mscorlib-karslastrmasn-anlama/</guid>
      <description>Her .NET kitaplığı ve programlama dili, &amp;lsquo;System.Int32&amp;rsquo;, &amp;lsquo;System.Object&amp;rsquo;, &amp;lsquo;System.Type&amp;rsquo; veya &amp;lsquo;System.Uri&amp;rsquo; gibi bir dizi temel veri türünü kullanır. Bu veri türleri, tüm özel yazılmış .NET kitaplıkları dahil olmak üzere diğer tüm yapıların temelini oluşturur. Tüm bu türler, &amp;ldquo;mscorlib&amp;rdquo; veya &amp;ldquo;System.Runtime&amp;rdquo; olan bir temel kitaplıkta barındırılır.
.NET Core ile kullanılabilen kitaplıklar &amp;lsquo;System.Runtime&amp;rsquo; çekirdek kitaplığını temel alırken, .NET Framework (Windows bileşeni) için &amp;lsquo;mscorlib&amp;rsquo;i temel alırlar. Bu temel farklılık,&amp;hellip;
bir .NET Core kitaplığı &amp;lsquo;System.</description>
    </item>
    
    <item>
      <title>.NET Core&#39;da Bileşenler ve Sürüm Oluşturma</title>
      <link>https://www.wikiod.com/tr/dotnet-core/net-coreda-bilesenler-ve-surum-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/net-coreda-bilesenler-ve-surum-olusturma/</guid>
      <description>Bu belge, bir .NET Core dağıtımını oluşturan farklı bileşenleri ve bunların nasıl sürümlendirildiğini kapsar. Bu belge şu anda 1.x sürümlerini kapsamaktadır.
.NET Core&amp;rsquo;daki bileşenler nasıl sürümlendirilir.
Bileşenler # .NET Core, her biri sürümlendirilmiş birden çok bileşenden oluşur bağımsız olarak ve sıklıkla karıştırılabilir ve eşleştirilebilir.
Paylaşılan Çerçeve. Bu, API&amp;rsquo;leri ve Sanal Makineyi içerir ve gerekli diğer çalışma zamanı hizmetleri .NET Core uygulamalarını çalıştırmak için.
Mevcut .NET Core Sanal Makinesinin adı CoreCLR. Bu executes the .</description>
    </item>
    
    <item>
      <title>global.json</title>
      <link>https://www.wikiod.com/tr/dotnet-core/globaljson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/globaljson/</guid>
      <description>&amp;lsquo;global.json&amp;rsquo; dosyası, &amp;lsquo;.NET Core&amp;rsquo; ve &amp;lsquo;ASP.NET Core&amp;rsquo; uygulamaları için son derece güçlü ve benzersizdir.
Şema # Şema deposu:
{ &amp;quot;title&amp;quot;: &amp;quot;JSON schema for the ASP.NET global configuration files&amp;quot;, &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;additionalProperties&amp;quot;: true, &amp;quot;required&amp;quot;: [ &amp;quot;projects&amp;quot; ], &amp;quot;properties&amp;quot;: { &amp;quot;projects&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A list of project folders relative to this file.&amp;quot;, &amp;quot;items&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } }, &amp;quot;packages&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;The location to store packages&amp;quot; }, &amp;quot;sdk&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Specify information about the SDK.</description>
    </item>
    
    <item>
      <title>.NET Core ile kitaplıklar oluşturma</title>
      <link>https://www.wikiod.com/tr/dotnet-core/net-core-ile-kitaplklar-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/net-core-ile-kitaplklar-olusturma/</guid>
      <description>Platforma özel bağımlılıklar # Her platform için farklı bağımlılıklar belirleyebilirsiniz:
&amp;quot;net45&amp;quot;: { &amp;quot;frameworkAssemblies&amp;quot;: { &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } }, &amp;quot;netstandard1.3&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0-rc2&amp;quot; } }, &amp;quot;netstandard1.4&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } } Bu proje derlendiğinde ve paketlendiğinde, her çerçeve hedefi farklı bir dizi bağımlılık kullanır:
&amp;ldquo;net45&amp;rdquo; (.NET 4.5+ sürümünü hedefleyen projeler), GAC&amp;rsquo;den &amp;ldquo;System.Linq&amp;rdquo; derlemesini kullanır. &amp;ldquo;netstandard1.3&amp;rdquo; (.NET Standard 1.3&amp;rsquo;ü hedefleyen .NET Core projeleri), &amp;ldquo;NETStandard.Library&amp;rdquo; sürüm 1.</description>
    </item>
    
    <item>
      <title>Docker ile .NET Core</title>
      <link>https://www.wikiod.com/tr/dotnet-core/docker-ile-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/docker-ile-net-core/</guid>
      <description>.NET Core platformunda Docker kullanma örnekleri, .NET Core uygulaması için resmi temel görüntüler ve ayrıca kendi kendine barındırılan .NET Core uygulaması ile doldurun
Docker dosyası örneği # .NET Core uygulaması &amp;ldquo;dotnet yayınla&amp;rdquo; kullanılarak yayınlanmalıdır
FROM microsoft/dotnet:latest COPY bin/Debug/netcoreapp1.0/publish/ /root/ EXPOSE 5000 ENTRYPOINT dotnet /root/sampleapp.dll </description>
    </item>
    
    <item>
      <title>.NET Core komut satırı arabirimi</title>
      <link>https://www.wikiod.com/tr/dotnet-core/net-core-komut-satr-arabirimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/net-core-komut-satr-arabirimi/</guid>
      <description>NuGet paketi oluşturma # Bir projeden NuGet paketi oluşturmak için bu komutu project.json içeren bir dizinden çalıştırın:
dotnet pack Ortaya çıkan .nupkg dosyası, project.json içindeki özelliklere göre adlandırılacak ve sürümlendirilecektir. Proje dosyasında hedeflenen birden fazla çerçeve varsa, paket hepsini destekleyecektir.
Bir .NET Core projesi yayınlayın ve çalıştırın # project.json dizinine gidin ve yayınlayın:
dotnet publish İşlemin çıktı dizinini yazdıracak, dizine girecek ve yayınlanan projeyi çalıştıracaktır:
dotnet &amp;lt;project output&amp;gt;.dll Varsayılan klasör şöyle olacaktır: &amp;lt;project root&amp;gt;/bin/&amp;lt;configuration&amp;gt;/&amp;lt;target framework&amp;gt;/publish</description>
    </item>
    
    <item>
      <title>.NET Core&#39;u Linux&#39;a Yükleme</title>
      <link>https://www.wikiod.com/tr/dotnet-core/net-coreu-linuxa-yukleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/net-coreu-linuxa-yukleme/</guid>
      <description>Linux dağıtımları için genel kurulum # Desteklenen Linux dağıtımlarından birine sahipseniz .NET Core web sitesindeki adımları takip edebilirsiniz: https://www.microsoft.com/net
Desteklenmeyen bir dağıtımınız varsa:
.NET Core SDK&amp;lsquo;yı, kullanılan dağıtıma daha yakın bir dağıtım seçerek bağlantılardan indirin.
https://www.microsoft.com/net/download
deb paketleri için desteğiniz varsa, Ubuntu/Debian paketlerini yükleyebilirsiniz.
yum paketleri için desteğiniz varsa Fedora paketlerini yükleyebilirsiniz.
Sisteminizin en azından şunlara sahip olduğundan emin olun:
llvm-3.7.1-r3 libunwind-1.1-r1 icu-57.1 lttng-ust-2.8.1 openssl-1.0.2h-r2 curl-7.49.0 </description>
    </item>
    
    <item>
      <title>appsetting.json&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/dotnet-core/appsettingjsonu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/dotnet-core/appsettingjsonu-kullanmaya-baslama/</guid>
      <description>Daha fazla bilgiye ihtiyacınız varsa gidip resmi microsoft belgelerine bakabilirsiniz.
Basit yapılandırma # Bu metni appsettings.json&amp;rsquo;a ekleyin
{ &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: 2, &amp;quot;subsectionKey&amp;quot;: { &amp;quot;suboption1&amp;quot;: &amp;quot;subvalue1&amp;quot; } } Artık bu yapılandırmayı uygulamanızda şu şekilde kullanabilirsiniz.
public class Program { static public IConfigurationRoot Configuration { get; set; } public static void Main(string[] args = null) { var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;quot;appsettings.json&amp;quot;); Configuration = builder.Build(); Console.WriteLine($&amp;quot;option1 = {Configuration[&amp;quot;key1&amp;quot;]}&amp;quot;); Console.WriteLine($&amp;quot;option2 = {Configuration[&amp;quot;key2&amp;quot;]}&amp;quot;); Console.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/kotlin/</link>
    <description>Recent content in Kotlin Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/kotlin/kotlini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/kotlini-kullanmaya-baslama/</guid>
      <description>Selam Dünya # Tüm Kotlin programları &amp;ldquo;ana&amp;rdquo; işlevde başlar. İşte basit bir Kotlin &amp;ldquo;Merhaba Dünya&amp;rdquo; programına bir örnek:
package my.program fun main(args: Array&amp;lt;String&amp;gt;) { println(&amp;quot;Hello, world!&amp;quot;) } Yukarıdaki kodu Main.kt adlı bir dosyaya yerleştirin (bu dosya adı tamamen keyfidir)
JVM&amp;rsquo;yi hedeflerken, işlev, dosya adından türetilen bir ada sahip bir sınıfta statik bir yöntem olarak derlenecektir. Yukarıdaki örnekte çalıştırılacak ana sınıf &amp;ldquo;my.program.MainKt&amp;rdquo; olacaktır.
Belirli bir dosya için en üst düzey işlevleri içeren sınıfın adını değiştirmek için, aşağıdaki açıklamayı dosyanın en üstüne paket ifadesinin üzerine yerleştirin:</description>
    </item>
    
    <item>
      <title>Kotlin&#39;de Döngüler</title>
      <link>https://www.wikiod.com/tr/kotlin/kotlinde-donguler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/kotlinde-donguler/</guid>
      <description>Kotlin&amp;rsquo;de döngüler, mümkün olan her yerde optimize edilmiş döngülere derlenir. Örneğin, bir sayı aralığı üzerinde yinelerseniz, nesne oluşturma ek yükünü önlemek için bayt kodu, düz int değerlerine dayalı olarak karşılık gelen bir döngüye derlenir.
Yinelenebilirler üzerinde döngü # Standart for-loop&amp;rsquo;u kullanarak herhangi bir yinelenebilir öğe üzerinde döngü oluşturabilirsiniz:
val list = listOf(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;, &amp;quot;!&amp;quot;) for(str in list) { print(str) } Sayı aralıkları gibi Kotlin&amp;rsquo;deki pek çok şey yinelenebilir:
for(i in 0.</description>
    </item>
    
    <item>
      <title>Java 8 Akış Eşdeğerleri</title>
      <link>https://www.wikiod.com/tr/kotlin/java-8-aks-esdegerleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/java-8-aks-esdegerleri/</guid>
      <description>Kotlin, işlevsel tarzdaki işlemleri uygulamak için koleksiyonlar ve yinelenebilirler üzerinde birçok genişletme yöntemi sağlar. Özel bir &amp;ldquo;Sıralama&amp;rdquo; türü, bu tür birkaç işlemin tembel bileşimine izin verir.
Tembellik hakkında # Bir zinciri tembel olarak işlemek istiyorsanız, zincirden önce &amp;lsquo;asSequence()&amp;rsquo; kullanarak bir &amp;lsquo;Sıra&amp;rsquo;ya dönüştürebilirsiniz. İşlevler zincirinin sonunda, genellikle bir &amp;ldquo;Sıralama&amp;rdquo; da elde edersiniz. Ardından, sonunda &amp;lsquo;Sıralamayı&amp;rsquo; gerçekleştirmek için &amp;rsquo;toList()&amp;rsquo;, &amp;rsquo;toSet()&amp;rsquo;, &amp;rsquo;toMap()&amp;rsquo; veya başka bir işlevi kullanabilirsiniz.
// switch to and from lazy val someList = items.</description>
    </item>
    
    <item>
      <title>Sıralama</title>
      <link>https://www.wikiod.com/tr/kotlin/sralama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/sralama/</guid>
      <description>Tıpkı Java&amp;rsquo;da olduğu gibi, Kotlin&amp;rsquo;deki enum sınıfları, tanımlanmış enum sabitlerini listelemeye ve adıyla bir enum sabiti almaya izin veren sentetik yöntemlere sahiptir. Bu yöntemlerin imzaları aşağıdaki gibidir (enum sınıfının adının `EnumClass&amp;rsquo; olduğu varsayılarak):
EnumClass.valueOf(value: String): EnumClass EnumClass.values(): Array&amp;lt;EnumClass&amp;gt; Belirtilen ad, sınıfta tanımlanan enum sabitlerinden herhangi biriyle eşleşmiyorsa, &amp;ldquo;valueOf()&amp;rdquo; yöntemi bir &amp;ldquo;IllegalArgumentException&amp;rdquo; oluşturur.
Her enum sabiti, enum sınıfı bildiriminde adını ve konumunu elde etmek için özelliklere sahiptir:
val name: String val ordinal: Int Enum sabitleri aynı zamanda, doğal sıra enum sınıfında tanımlandıkları sıra olacak şekilde, Karşılaştırılabilir arabirimini de uygular.</description>
    </item>
    
    <item>
      <title>Fonksiyonlarda Vararg Parametreleri</title>
      <link>https://www.wikiod.com/tr/kotlin/fonksiyonlarda-vararg-parametreleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/fonksiyonlarda-vararg-parametreleri/</guid>
      <description>Sözdizimi # Vararg Anahtar Kelimesi: &amp;lsquo;vararg&amp;rsquo;, değişken sayıda parametrenin kabul edileceğini belirtmek için bir yöntem bildiriminde kullanılır. Spread Operator: İçeriği ayrı parametrelere &amp;ldquo;açmak&amp;rdquo; için işlev çağrılarında kullanılan bir diziden önce bir yıldız işareti (*). Temel Bilgiler: vararg anahtar sözcüğünü kullanma # Vararg anahtar sözcüğünü kullanarak işlevi tanımlayın.
fun printNumbers(vararg numbers: Int) { for (number in numbers) { println(number) } } Artık fonksiyona istediğiniz kadar parametre (doğru tipte) iletebilirsiniz.
printNumbers(0, 1) // Prints &amp;quot;0&amp;quot; &amp;quot;1&amp;quot; printNumbers(10, 20, 30, 500) // Prints &amp;quot;10&amp;quot; &amp;quot;20&amp;quot; &amp;quot;30&amp;quot; &amp;quot;500&amp;quot; Notlar: Vararg parametreleri, parametre listesindeki son parametre olmalıdır.</description>
    </item>
    
    <item>
      <title>Arayüzler</title>
      <link>https://www.wikiod.com/tr/kotlin/arayuzler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/arayuzler/</guid>
      <description>Ayrıca bkz.: Arayüzler için Kotlin referans belgeleri: Arayüzler
Varsayılan uygulamalara sahip arayüz # Kotlin&amp;rsquo;deki bir arabirim, işlevler için varsayılan uygulamalara sahip olabilir:
interface MyInterface { fun withImplementation() { print(&amp;quot;withImplementation() was called&amp;quot;) } } Bu tür arabirimleri uygulayan sınıflar, bu işlevleri yeniden uygulamadan kullanabilecektir.
class MyClass: MyInterface { // No need to reimplement here } val instance = MyClass() instance.withImplementation() Özellikleri # Varsayılan uygulamalar, mülk alıcıları ve ayarlayıcılar için de çalışır:</description>
    </item>
    
    <item>
      <title>Uzatma Yöntemleri</title>
      <link>https://www.wikiod.com/tr/kotlin/uzatma-yontemleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/uzatma-yontemleri/</guid>
      <description>Sözdizimi # fun TypeName.extensionName(params, &amp;hellip;) { /* gövde */ } // Bildirim fun &amp;lt;T: Any&amp;gt; TypeNameWithGenerics&amp;lt;T&amp;gt;.extensionName(params, &amp;hellip;) { /* body */ } // Generics ile Bildirim myObj.extensionName(args, &amp;hellip;) // çağırma Uzantılar statik olarak çözümlenir. Bu, kullanılacak uzantı yönteminin, erişmekte olduğunuz değişkenin referans türüne göre belirlendiği anlamına gelir; çalışma zamanında değişkenin türü ne olursa olsun, her zaman aynı uzantı yöntemi çağrılır. Bunun nedeni, bir uzantı yöntemi bildirmenin, alıcı türüne gerçekte bir üye eklememesidir.</description>
    </item>
    
    <item>
      <title>Kotlin Android Uzantıları</title>
      <link>https://www.wikiod.com/tr/kotlin/kotlin-android-uzantlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/kotlin-android-uzantlar/</guid>
      <description>Kotlin, Android için yerleşik bir görünüm enjeksiyonuna sahiptir ve manuel bağlamayı veya ButterKnife gibi çerçevelere olan ihtiyacı atlamaya olanak tanır. Avantajlardan bazıları, daha iyi bir sözdizimi, daha iyi statik yazma ve dolayısıyla daha az hataya açık olmasıdır.
Görünümleri Kullanma # activity_main.xml adında örnek bir düzene sahip bir etkinliğimiz olduğunu varsayarsak:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt; &amp;lt;Button android:id=&amp;quot;@+id/my_button&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:text=&amp;quot;My button&amp;quot;/&amp;gt; &amp;lt;/LinearLayout&amp;gt; Düğmeyi çağırmak için aşağıdaki gibi herhangi bir ek bağlama olmadan Kotlin uzantılarını kullanabiliriz:</description>
    </item>
    
    <item>
      <title>Koşullu İfadeler</title>
      <link>https://www.wikiod.com/tr/kotlin/kosullu-ifadeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/kosullu-ifadeler/</guid>
      <description>Java&amp;rsquo;nın &amp;lsquo;switch&amp;rsquo;inin aksine, &amp;lsquo;When&amp;rsquo; ifadesinin geçiş davranışı yoktur. Bu, bir dal eşleştirilirse, yürütüldükten sonra kontrol akışının geri döndüğü ve &amp;ldquo;break&amp;rdquo; ifadesinin gerekli olmadığı anlamına gelir. Birden fazla argüman için davranışları birleştirmek istiyorsanız, virgülle ayırarak birden fazla argüman yazabilirsiniz:
when (x) { &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; -&amp;gt; println(&amp;quot;either foo or bar&amp;quot;) else -&amp;gt; println(&amp;quot;didn&#39;t match anything&amp;quot;) } When-ifadesi argüman eşleştirme # Bir argüman verildiğinde, &amp;ldquo;When&amp;rdquo;-ifadesi sırayla dallara karşı argümanla eşleşir. Eşleştirme, boş kontroller yapan ve işlenenleri &amp;ldquo;eşittir&amp;rdquo; işlevini kullanarak karşılaştıran &amp;ldquo;==&amp;rdquo; operatörü kullanılarak yapılır.</description>
    </item>
    
    <item>
      <title>istisnalar</title>
      <link>https://www.wikiod.com/tr/kotlin/istisnalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/kotlin/istisnalar/</guid>
      <description>try-catch-finally ile istisna yakalama # Kotlin&amp;rsquo;de istisnaları yakalamak Java&amp;rsquo;ya çok benziyor
try { doSomething() } catch(e: MyException) { handle(e) } finally { cleanup() } Ayrıca birden fazla istisna yakalayabilirsiniz
try { doSomething() } catch(e: FileSystemException) { handle(e) } catch(e: NetworkException) { handle(e) } catch(e: MemoryException) { handle(e) } finally { cleanup() } &amp;ldquo;try&amp;rdquo; de bir ifadedir ve değer döndürebilir
val s: String? = try { getString() } catch (e: Exception) { null } Kotlin&amp;rsquo;de kontrol edilen istisnalar yoktur, bu nedenle herhangi bir istisna yakalamanız gerekmez.</description>
    </item>
    
  </channel>
</rss>

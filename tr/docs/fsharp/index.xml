<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/fsharp/</link>
    <description>Recent content in F# Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>F# ile başlarken</title>
      <link>https://www.wikiod.com/tr/fsharp/f-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/f-ile-baslarken/</guid>
      <description>Selam Dünya! # Bu, &amp;ldquo;Merhaba, Dünya!&amp;rdquo; yazan basit bir konsol projesinin kodudur. STDOUT&amp;rsquo;a ve &amp;lsquo;0&amp;rsquo; çıkış koduyla çıkar
[&amp;lt;EntryPoint&amp;gt;] let main argv = printfn &amp;quot;Hello, World!&amp;quot; 0 Örnek döküm Satır satır:
`[]&amp;rsquo; - Programınızın (kaynak) &amp;ldquo;giriş noktasını ayarlamak için kullandığınız yöntemi&amp;rdquo; işaretleyen bir .net Özniteliği. &amp;ldquo;let main argv&amp;rdquo; - bu, tek bir &amp;ldquo;argv&amp;rdquo; parametresiyle &amp;ldquo;main&amp;rdquo; adlı bir işlevi tanımlar. Bu program giriş noktası olduğundan, &amp;lsquo;argv&amp;rsquo; bir dizi dizi olacaktır. Dizinin içeriği, yürütüldüğünde programa iletilen argümanlardır.</description>
    </item>
    
    <item>
      <title>Ayrımcı Birlikler</title>
      <link>https://www.wikiod.com/tr/fsharp/ayrmc-birlikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/ayrmc-birlikler/</guid>
      <description>Ayrımcı birlikler içindeki demetlerin öğelerini adlandırma # Ayrımlı birleşimleri tanımlarken, tanımlama grubu türlerinin öğelerini adlandırabilir ve bu adları kalıp eşleştirme sırasında kullanabilirsiniz.
type Shape = | Circle of diameter:int | Rectangle of width:int * height:int let shapeIsTenWide = function | Circle(diameter=10) | Rectangle(width=10) -&amp;gt; true | _ -&amp;gt; false Ek olarak, ayrımcı birleşimlerin öğelerini adlandırmak, kodun okunabilirliğini ve C# ile birlikte çalışabilirliği geliştirir - özelliklerin adları ve kurucuların parametreleri için sağlanan adlar kullanılacaktır.</description>
    </item>
    
    <item>
      <title>Aktif Modeller</title>
      <link>https://www.wikiod.com/tr/fsharp/aktif-modeller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/aktif-modeller/</guid>
      <description>Basit Aktif Modeller # Etkin kalıplar, verilerinizin içine girebileceği adlandırılmış kategoriler belirleyebileceğiniz ve ardından bu kategorileri &amp;ldquo;eşleşme&amp;rdquo; ifadelerinde kullanabileceğiniz özel bir kalıp eşleştirme türüdür.
Sayıları pozitif, negatif veya sıfır olarak sınıflandıran etkin bir kalıp tanımlamak için:
let (|Positive|Negative|Zero|) num = if num &amp;gt; 0 then Positive elif num &amp;lt; 0 then Negative else Zero Bu daha sonra bir kalıp eşleştirme ifadesinde kullanılabilir:
let Sign value = match value with | Positive -&amp;gt; printf &amp;quot;%d is positive&amp;quot; value | Negative -&amp;gt; printf &amp;quot;%d is negative&amp;quot; value | Zero -&amp;gt; printf &amp;quot;The value is zero&amp;quot; Sign -19 // -19 is negative Sign 2 // 2 is positive Sign 0 // The value is zero Aktif Modeller, fonksiyon argümanlarını doğrulamak ve dönüştürmek için kullanılabilir # F# içinde Aktif Modellerin ilginç fakat oldukça bilinmeyen bir kullanımı, fonksiyon argümanlarını doğrulamak ve dönüştürmek için kullanılabilmeleridir.</description>
    </item>
    
    <item>
      <title>F# Performans İpuçları ve Püf Noktaları</title>
      <link>https://www.wikiod.com/tr/fsharp/f-performans-ipuclar-ve-puf-noktalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/f-performans-ipuclar-ve-puf-noktalar/</guid>
      <description>Performans varsayımlarınızı ölçün ve doğrulayın # Bu örnek akılda F# ile yazılmıştır, ancak fikirler hepsi için geçerlidir. ortamlar
Performans için optimizasyon yaparken ilk kural varsayımlara güvenmemektir; her zaman varsayımlarınızı ölçün ve doğrulayın.
Doğrudan makine kodunu yazmadığımız için derleyicinin nasıl çalıştığını tahmin etmek zor. ve JIT:er programınızı makine koduna dönüştürün. Bu yüzden Ölçmemiz Gerekiyor beklediğimiz performans iyileştirmesini aldığımızı görmek için yürütme süresi ve Gerçek programın herhangi bir gizli ek yük içermediğini doğrulayın.</description>
    </item>
    
    <item>
      <title>Monadlar</title>
      <link>https://www.wikiod.com/tr/fsharp/monadlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/monadlar/</guid>
      <description>Monad&amp;rsquo;ları anlamak pratikten gelir # Bu konu, orta ila ileri düzey F# geliştiricileri için hazırlanmıştır
&amp;ldquo;Monadlar nedir?&amp;rdquo; ortak bir sorudur. Bu cevaplaması kolay ama Otostopçunun galaksi rehberi gibi 2C_and_Everything_.2842.29) neyin peşinde olduğumuzu bilmediğimiz için cevabı anlamadığımızı fark ederiz.
Birçoğu Monadları anlamanın yolunun onları uygulamak olduğuna inanıyor. Programcılar olarak genellikle Liskov&amp;rsquo;un Yer Değiştirme İlkesinin, alt tiplerinin veya alt sınıflarının ne olduğuna ilişkin matematiksel temeli önemsemiyoruz. Bu fikirleri kullanarak, temsil ettikleri şey için bir sezgi edindik.</description>
    </item>
    
    <item>
      <title>not alma</title>
      <link>https://www.wikiod.com/tr/fsharp/not-alma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/not-alma/</guid>
      <description>Basit not alma # Not alma, aynı sonucun birden çok kez hesaplanmasını önlemek için işlev sonuçlarının önbelleğe alınmasından oluşur. Bu, maliyetli hesaplamalar gerçekleştiren işlevlerle çalışırken kullanışlıdır.
Örnek olarak basit bir faktöriyel işlevi kullanabiliriz:
let factorial index = let rec innerLoop i acc = match i with | 0 | 1 -&amp;gt; acc | _ -&amp;gt; innerLoop (i - 1) (acc * i) innerLoop index 1 Bu işlevin aynı parametre ile birden çok kez çağrılması, aynı hesaplamanın tekrar tekrar yapılmasına neden olur.</description>
    </item>
    
    <item>
      <title>birim türü</title>
      <link>https://www.wikiod.com/tr/fsharp/birim-turu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/birim-turu/</guid>
      <description>0 demeti ne işe yarar? # 2 demet veya 3 demet, bir grup ilgili öğeyi temsil eder. (2B uzaydaki noktalar, bir rengin RGB değerleri, vb.) Tek bir `int&amp;rsquo; ile kolayca değiştirilebildiği için 1-tuple çok kullanışlı değildir.
Bir 0-tuple, kesinlikle hiçbir şey içermediğinden daha da yararsız görünüyor. Yine de onu F# gibi işlevsel dillerde çok kullanışlı kılan özelliklere sahiptir. Örneğin, 0-tuple türü tam olarak bir değere sahiptir ve genellikle () olarak temsil edilir.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/fsharp/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/fonksiyonlar/</guid>
      <description>İleri ve Geri Boru # Boru operatörleri, parametreleri bir fonksiyona basit ve zarif bir şekilde geçirmek için kullanılır. Ara değerlerin elimine edilmesini ve fonksiyon çağrılarının daha kolay okunmasını sağlar.
F#&amp;lsquo;da iki boru operatörü vardır:
İleri (|&amp;gt;): Parametreleri soldan sağa geçirme
let print message = printf &amp;quot;%s&amp;quot; message // &amp;quot;Hello World&amp;quot; will be passed as a parameter to the print function &amp;quot;Hello World&amp;quot; |&amp;gt; print Geri (&amp;lt;|): Parametreleri sağdan sola geçirme</description>
    </item>
    
    <item>
      <title>Desen Eşleştirme</title>
      <link>https://www.wikiod.com/tr/fsharp/desen-eslestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/desen-eslestirme/</guid>
      <description>Kalıp Eşleştirme, birden çok &amp;ldquo;if&amp;rdquo;/&amp;ldquo;else if&amp;rdquo;/&amp;ldquo;else&amp;rdquo; tarzı deyim kullanmaya kıyasla dallanmanın çok kısa ve öz bir şekilde ele alınmasına izin verdiği için birçok işlevsel dilin güçlü bir özelliğidir. Bununla birlikte, yeterli seçenek ve [&amp;ldquo;ne zaman&amp;rdquo; korumaları1 verilirse, Model Eşleştirme de ayrıntılı olabilir ve bir bakışta anlaşılması zor olabilir.
Bu olduğunda, F#&amp;lsquo;ın Aktif Kalıpları, eşleşen mantığa anlamlı adlar vermenin harika bir yolu olabilir, bu da kodu basitleştirir ve ayrıca yeniden kullanıma olanak tanır.</description>
    </item>
    
    <item>
      <title>FsXaml ile Uygulama Arkasında 1 F# WPF Kodu</title>
      <link>https://www.wikiod.com/tr/fsharp/fsxaml-ile-uygulama-arkasnda-1-f-wpf-kodu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/fsharp/fsxaml-ile-uygulama-arkasnda-1-f-wpf-kodu/</guid>
      <description>F# WPF programlama için bulunan örneklerin çoğu MVVM modeliyle ve birkaçı MVC ile ilgili görünüyor, ancak arkasında &amp;ldquo;eski güzel&amp;rdquo; kodla nasıl kalkıp çalıştırılacağını düzgün şekilde gösteren hiçbir örnek yok.
Modelin arkasındaki kod, öğretim ve deney için kullanımı çok kolaydır. Web&amp;rsquo;deki çok sayıda tanıtım kitabında ve öğrenme materyalinde kullanılır. Bu yüzden.
Bu örnekler, pencereler, kontroller, resimler, simgeler ve daha fazlasıyla uygulamanın arkasında nasıl kod oluşturulacağını gösterecektir.
Uygulamanın Arkasında yeni bir F# WPF Kodu oluşturun.</description>
    </item>
    
  </channel>
</rss>

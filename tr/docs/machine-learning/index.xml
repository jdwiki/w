<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>makine öğrenimi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/machine-learning/</link>
    <description>Recent content in makine öğrenimi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Makine öğrenimini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/machine-learning/makine-ogrenimini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/makine-ogrenimini-kullanmaya-baslama/</guid>
      <description>Python kullanarak Kurulum veya Kurulum # 1) scikit öğrenme
scikit-learn, SciPy üzerine inşa edilmiş ve 3-Clause BSD lisansı altında dağıtılmış, makine öğrenimi için bir Python modülüdür. Destek vektör makineleri, rastgele ormanlar, gradyan artırma, k-means ve DBSCAN dahil olmak üzere çeşitli sınıflandırma, regresyon ve kümeleme algoritmalarına sahiptir ve Python sayısal ve bilimsel kitaplıkları NumPy ve SciPy ile birlikte çalışmak üzere tasarlanmıştır.
scikit-learn&amp;rsquo;in mevcut kararlı sürümü gerektirir:
Python (&amp;gt;= 2.6 veya &amp;gt;= 3.</description>
    </item>
    
    <item>
      <title>Algılayıcı</title>
      <link>https://www.wikiod.com/tr/machine-learning/alglayc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/alglayc/</guid>
      <description>Perceptron modelini C++&amp;lsquo;da uygulama # Bu örnekte, nasıl çalıştığına dair daha iyi bir fikir edinebilmeniz için algılayıcı modelinin C++&amp;lsquo;da uygulanmasını inceleyeceğim.
Öncelikle yapmak istediğimiz şeyin basit bir algoritmasını yazmak iyi bir uygulamadır.
algoritma:
Ağırlıklar için bir vektör yapın ve 0&amp;rsquo;a sıfırlayın (Yarılık terimini eklemeyi unutmayın) 0 hata veya düşük hata sayısı elde edene kadar ağırlıkları ayarlamaya devam edin. Görünmeyen veriler üzerinde tahminler yapın. Süper basit bir algoritma yazdıktan sonra, şimdi ihtiyaç duyacağımız bazı fonksiyonları yazalım.</description>
    </item>
    
    <item>
      <title>Denetimli Öğrenme</title>
      <link>https://www.wikiod.com/tr/machine-learning/denetimli-ogrenme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/denetimli-ogrenme/</guid>
      <description>Doğrusal Regresyon # Denetimli Öğrenme, belirli bir tahmin ediciler kümesinden (bağımsız değişkenler) tahmin edilecek bir hedef veya sonuç değişkeninden (veya bağımlı değişkenden) oluştuğundan. Bu değişken setini kullanarak, girdileri istenen çıktılara eşleyen bir fonksiyon üretiyoruz. Eğitim süreci, model eğitim verilerinde istenen doğruluk düzeyine ulaşana kadar devam eder.
Bu nedenle, Denetimli Öğrenme algoritmalarının birçok örneği vardır, bu nedenle bu Doğrusal Regresyon üzerine odaklanmak istediğim durum
Doğrusal Regresyon Sürekli değişken(ler)e dayalı olarak gerçek değerleri (konutların maliyeti, çağrı sayısı, toplam satışlar vb.</description>
    </item>
    
    <item>
      <title>Nöral ağlar</title>
      <link>https://www.wikiod.com/tr/machine-learning/noral-aglar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/noral-aglar/</guid>
      <description>Aktivasyon Fonksiyonları # Aktarım işlevi olarak da bilinen etkinleştirme işlevleri, giriş düğümlerini belirli bir şekilde çıkış düğümlerine eşlemek için kullanılır.
Bir sinir ağı katmanının çıktısına doğrusal olmayanlık kazandırmak için kullanılırlar.
Yaygın olarak kullanılan bazı fonksiyonlar ve eğrileri aşağıda verilmiştir: Sigmoid İşlevi # Sigmoid, çıktısı &amp;ldquo;[0, 1]&amp;rdquo; aralığında olan bir ezme işlevidir.
&amp;rsquo;numpy&amp;rsquo; ile türevi ile birlikte sigmoid uygulamak için kod aşağıda gösterilmiştir:
def sigmoid(z): return 1.0 / (1.0 + np.exp(-z)) def sigmoid_prime(z): return sigmoid(z) * (1 - sigmoid(z)) Hiperbolik Tanjant Fonksiyonu (tanh) # Tanh ve sigmoid fonksiyonları arasındaki temel fark, tanh&amp;rsquo;ın 0 merkezli olması, girdileri [-1, 1] aralığına sıkıştırması ve hesaplanmasının daha verimli olmasıdır.</description>
    </item>
    
    <item>
      <title>Değerlendirme Metrikleri</title>
      <link>https://www.wikiod.com/tr/machine-learning/degerlendirme-metrikleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/degerlendirme-metrikleri/</guid>
      <description>Alıcı Çalışma Karakteristiğinin Eğrisi Altındaki Alan (AUROC) # AUROC, bir sınıflandırıcının performansını değerlendirmek için en sık kullanılan metriklerden biridir. Bu bölümde bunun nasıl hesaplanacağı açıklanmaktadır.
AUC (Eğrinin Altındaki Alan) çoğu zaman AUROC&amp;rsquo;yi ifade etmek için kullanılır; bu, AUC belirsiz (herhangi bir eğri olabilir) iken AUROC belirsiz olduğundan kötü bir uygulamadır.
Genel Bakış – Kısaltmalar # Kısaltma Anlamı AUROC Alıcı Çalışma Karakteristiğinin Eğrisi Altındaki Alan AUC Curce Altındaki Alan ROC Alıcı Çalışma Karakteristiği TP Gerçek Olumlu TR Gerçek Negatifler FP Yanlış Pozitifler FN Yanlış Negatifler TPR Gerçek Pozitif Oran FPR Yanlış Pozitif Oranı AUROC&amp;rsquo;u yorumlama # AUROC&amp;rsquo;nin birkaç eşdeğer yorumu:</description>
    </item>
    
    <item>
      <title>Derin Öğrenme</title>
      <link>https://www.wikiod.com/tr/machine-learning/derin-ogrenme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/derin-ogrenme/</guid>
      <description>Derin Öğrenme, öğrenme amacıyla çok katmanlı yapay sinir ağlarının kullanıldığı makine öğreniminin bir alt alanıdır. Derin Öğrenme birçok harika uygulama buldu, ör. Konuşma Tanıma, Youtube&amp;rsquo;da Altyazılar, Amazon önerisi vb. Ek bilgi için derin öğrenme konusuna ayrılmış bir konu vardır.
Derin öğrenmenin kısa özeti # Bir sinir ağını eğitmek için öncelikle iyi ve verimli bir fikir tasarlamamız gerekir. Üç tür öğrenme görevi vardır.
Denetimli Öğrenme Pekiştirmeli Öğrenme Denetimsiz Öğrenme Bu zamanda, denetimsiz öğrenme çok popülerdir.</description>
    </item>
    
    <item>
      <title>Java Kullanarak Makine Öğrenimi</title>
      <link>https://www.wikiod.com/tr/machine-learning/java-kullanarak-makine-ogrenimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/java-kullanarak-makine-ogrenimi/</guid>
      <description>araçlar listesi # Cortical.io - Retina: an API performing complex NLP operations (disambiguation, classification, streaming text filtering, etc...) as quickly and intuitively as the brain. CoreNLP - Stanford CoreNLP provides a set of natural language analysis tools which can take raw English language text input and give the base forms of words Stanford Parser - A natural language parser is a program that works out the grammatical structure of sentences Stanford POS Tagger - A Part-Of-Speech Tagger (POS Tagger Stanford Name Entity Recognizer - Stanford NER is a Java implementation of a Named Entity Recognizer.</description>
    </item>
    
    <item>
      <title>Scikit Öğren</title>
      <link>https://www.wikiod.com/tr/machine-learning/scikit-ogren/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/scikit-ogren/</guid>
      <description>k en yakın komşu algoritmasını kullanan Temel Basit Sınıflandırma Problemi(XOR) # XOR popüler problemi için doğru cevabı tahmin etmek istediğinizi düşünün. XOR&amp;rsquo;un ne olduğunu biliyordunuz(ör. [x0 x1] =&amp;gt; y). örneğin [0 0] =&amp;gt; 0, [0 1] =&amp;gt; 1 ve&amp;hellip;
#Load Sickit learn data from sklearn.neighbors import KNeighborsClassifier #X is feature vectors, and y is correct label(To train model) X = [[0, 0],[0 ,1],[1, 0],[1, 1]] y = [0,1,1,0] #Initialize a Kneighbors Classifier with K parameter set to 2 KNC = KNeighborsClassifier(n_neighbors= 2) #Fit the model(the KNC learn y Given X) KNC.</description>
    </item>
    
    <item>
      <title>DVM</title>
      <link>https://www.wikiod.com/tr/machine-learning/dvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/dvm/</guid>
      <description>Lojistik regresyon ve SVM arasındaki fark # Lojistik regresyon kullanarak sınıflandırdığımızda karar sınırı- SVM kullanarak sınıflandırma yaptığımızda karar sınırı-
Görülebileceği gibi, SVM karar sınırının her iki tarafında bir &amp;lsquo;boşluk&amp;rsquo; sağlamaya çalışır. Bu, yeni verilerle karşılaştığımızda yardımcı olur.
Yeni verilerle-
Lojistik regresyon kötü performans gösteriyor (yeni kırmızı daire mavi olarak sınıflandırılıyor) -
SVM onu doğru bir şekilde sınıflandırabilirken (yeni kırmızı daire kırmızı tarafta doğru şekilde sınıflandırılmıştır)-
Scikit-learn kullanarak SVM sınıflandırıcısını uygulama: # from sklearn import svm X = [[1, 2], [3, 4]] #Training Samples y = [1, 2] #Class labels model = svm.</description>
    </item>
    
    <item>
      <title>Makine öğrenimi ve sınıflandırılması</title>
      <link>https://www.wikiod.com/tr/machine-learning/makine-ogrenimi-ve-snflandrlmas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/machine-learning/makine-ogrenimi-ve-snflandrlmas/</guid>
      <description>Makine öğrenimi nedir? # Makine Öğreniminin iki tanımı sunulmaktadır. Arthur Samuel bunu şöyle tanımladı:
bilgisayarlara öğrenme yeteneği kazandıran çalışma alanı açıkça programlanmıştır.
Bu daha eski, gayri resmi bir tanımdır.
Tom Mitchell daha modern bir tanım sağlar:
Bir bilgisayar programının, aşağıdakilerle ilgili olarak E deneyiminden öğrendiği söylenir. bazı görev sınıfları T ve performans ölçüsü P, eğer performansı P ile ölçülen T&amp;rsquo;deki görevler, E deneyimi ile iyileşir.
Örnek: dama oynamak.
E = birçok dama oyunu oynama deneyimi</description>
    </item>
    
  </channel>
</rss>

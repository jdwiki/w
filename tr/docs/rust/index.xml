<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pas Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/rust/</link>
    <description>Recent content in Pas Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust&#39;ı kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/rust/rust-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/rust-kullanmaya-baslama/</guid>
      <description>println&amp;rsquo;in gelişmiş kullanımı! # println! (ve kardeşi [print!](https://doc.rust-lang. org/std/macro.print!.html)) diğer birçok dilde bulunan &amp;ldquo;printf&amp;rdquo; işlev ailesine benzer, dinamik veriler içeren metin üretmek ve yazdırmak için uygun bir mekanizma sağlar. İlk argümanı, diğer argümanların metin olarak nasıl yazdırılacağını belirleyen bir format dizesidir. Biçim dizesi, bir değiştirmenin gerçekleşmesi gerektiğini belirtmek için yer tutucular (&amp;quot;{}&amp;quot; içine alınmış) içerebilir:
// No substitution -- the simplest kind of format string println!(&amp;quot;Hello World&amp;quot;); // Output: Hello World // The first {} is substituted with a textual representation of // the first argument following the format string.</description>
    </item>
    
    <item>
      <title>serde</title>
      <link>https://www.wikiod.com/tr/rust/serde/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/serde/</guid>
      <description>Serde Rust için popüler bir serserileştirme ve deserileştirme çerçevesidir ve seri hale getirilmiş verileri (ör. JSON ve XML) Rust yapılarına ve tersine.
Serde, JSON, YAML, TOML, BSON, Pickle ve XML dahil olmak üzere birçok formatı destekler.
Yapı ↔ JSON # main.rs # extern crate serde; extern crate serde_json; // Import this crate to derive the Serialize and Deserialize traits. #[macro_use] extern crate serde_derive; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point { x: 1, y: 2 }; // Convert the Point to a packed JSON string.</description>
    </item>
    
    <item>
      <title>Özellikler</title>
      <link>https://www.wikiod.com/tr/rust/ozellikler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/ozellikler/</guid>
      <description>Nitelikler, bir &amp;ldquo;yapı&amp;quot;nın uygulaması gereken bir &amp;ldquo;sözleşmeyi&amp;rdquo; tanımlamanın bir yoludur. Özellikler tipik olarak yöntem imzalarını tanımlar, ancak özellik sınırlarının buna izin vermesi koşuluyla, özelliğin diğer yöntemlerine dayalı uygulamalar da sağlayabilir.
Nesne yönelimli programlamaya aşina olanlar için özellikler, bazı ince farkları olan arayüzler olarak düşünülebilir.
Sözdizimi # özellik Özellik { fn yöntemi(&amp;hellip;) -&amp;gt; ReturnType; &amp;hellip; }
özellik Özellik: Bound { fn method(&amp;hellip;) -&amp;gt; ReturnType; &amp;hellip; }
impl Tür için Özellik { fn method(&amp;hellip;) -&amp;gt; ReturnType { &amp;hellip; } &amp;hellip; }</description>
    </item>
    
    <item>
      <title>döngüler</title>
      <link>https://www.wikiod.com/tr/rust/donguler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/donguler/</guid>
      <description>Sözdizimi # döngü { blok } // sonsuz döngü
while durum { blok }
while pattern = expr { block }
for pattern in expr { block } // expr, IntoIterator&amp;rsquo;ı uygulamalıdır
devam // döngü gövdesinin sonuna atla, gerekirse yeni bir yineleme başlat
break // döngüyü durdur
&amp;lsquo;etiket: döngü { blok }
&amp;lsquo;etiket: while durum { blok }
&amp;lsquo;label: while pattern = expr { block }
&amp;lsquo;etiket: ifade içindeki desen için { blok }</description>
    </item>
    
    <item>
      <title>Rust Stil Rehberi</title>
      <link>https://www.wikiod.com/tr/rust/rust-stil-rehberi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/rust-stil-rehberi/</guid>
      <description>Resmi bir Rust stil kılavuzu olmamasına rağmen, aşağıdaki örnekler çoğu Rust projesinde benimsenen kuralları göstermektedir. Bu kuralları takip etmek, projenizin stilini standart kitaplığın stiliyle uyumlu hale getirecek ve insanların kodunuzdaki mantığı görmesini kolaylaştıracaktır.
Resmi Rust stili yönergeleri GitHub&amp;rsquo;daki rust-lang/rust deposunda mevcuttu, ancak rust-lang-nursery/fmt-rfcs deposuna taşınmayı beklediği için kısa süre önce kaldırıldılar. Orada yeni yönergeler yayınlanana kadar, &amp;ldquo;rust-lang&amp;rdquo; deposundaki yönergeleri izlemeye çalışmalısınız.
Stil sorunları için kodunuzu otomatik olarak gözden geçirmek için rustfmt ve clippy kullanabilirsiniz ve doğru şekilde biçimlendirin.</description>
    </item>
    
    <item>
      <title>Desen Eşleştirme</title>
      <link>https://www.wikiod.com/tr/rust/desen-eslestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/desen-eslestirme/</guid>
      <description>Sözdizimi # _ // joker karakter kalıbı, her şeyle eşleşir¹ ident // bağlama kalıbı, herhangi bir şeyle eşleşir ve onu ident¹&amp;rsquo;e bağlar ident @ pat // yukarıdakiyle aynı, ancak bağlı olanla daha fazla eşleşmeye izin ver ref ident // bağlama kalıbı, herhangi bir şeyle eşleşir ve onu bir referansa bağlar ident¹ ref mut ident // bağlama kalıbı, herhangi bir şeyle eşleşir ve onu değişken bir referansa bağlar ident¹ &amp;amp;pat // bir referansla eşleşir (pat bu nedenle referans değil hakemdir)¹ &amp;amp;mut pat // değiştirilebilir bir referansla yukarıdakiyle aynı¹ CONST // adlandırılmış bir sabitle eşleşir Struct { field1, field2 } // bir yapı değeriyle eşleşir ve yapısını bozar, alanlar hakkında aşağıdaki nota bakın¹ EnumVariant // bir numaralandırma değişkeniyle eşleşir EnumVariant(pat1, pat2) // bir numaralandırma değişkeni ve karşılık gelen parametrelerle eşleşir EnumVariant(pat1, pat2, .</description>
    </item>
    
    <item>
      <title>ömürler</title>
      <link>https://www.wikiod.com/tr/rust/omurler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/omurler/</guid>
      <description>Sözdizimi # fn işlevi&amp;lt;&amp;lsquo;a&amp;gt;(x: &amp;amp;&amp;lsquo;a Türü)
struct Struct&amp;lt;&amp;lsquo;a&amp;gt; { x: &amp;amp;&amp;lsquo;a Type }
enum Enum&amp;lt;&amp;lsquo;a&amp;gt; { Varyant(&amp;amp;&amp;lsquo;a Tür) }
impl&amp;lt;&amp;lsquo;a&amp;gt; Struct&amp;lt;&amp;lsquo;a&amp;gt; { fn x&amp;lt;&amp;lsquo;a&amp;gt;(&amp;amp;self) -&amp;gt; &amp;amp;&amp;lsquo;a Type { self.x } }
Tür için impl&amp;lt;&amp;lsquo;a&amp;gt; Özellik&amp;lt;&amp;lsquo;a&amp;gt;
impl&amp;lt;&amp;lsquo;a&amp;gt; Türü için Özellik&amp;lt;&amp;lsquo;a&amp;gt;
fn işlevi&amp;lt;F&amp;gt;(f: F) burada &amp;lt;&#39;a&amp;gt; için F: FnOnce(&amp;amp;&#39;a Type)
struct Struct&amp;lt;F&amp;gt; burada &amp;lt;&#39;a&amp;gt; F: FnOnce(&amp;amp;&#39;a Type) { x: F }
enum Enum&amp;lt;F&amp;gt; burada &amp;lt;&#39;a&amp;gt; için F: FnOnce(&amp;amp;&#39;a Type) { Variant(F) }</description>
    </item>
    
    <item>
      <title>Dosya GÇ</title>
      <link>https://www.wikiod.com/tr/rust/dosya-gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/dosya-gc/</guid>
      <description>Bir dosyayı bir bütün olarak bir Dize olarak okuyun # use std::fs::File; use std::io::Read; fn main() { let filename = &amp;quot;src/main.rs&amp;quot;; // Open the file in read-only mode. match File::open(filename) { // The file is open (no error). Ok(mut file) =&amp;gt; { let mut content = String::new(); // Read all the file content into a variable (ignoring the result of the operation). file.read_to_string(&amp;amp;mut content).unwrap(); println!(&amp;quot;{}&amp;quot;, content); // The file is automatically closed when is goes out of scope.</description>
    </item>
    
    <item>
      <title>paralellik</title>
      <link>https://www.wikiod.com/tr/rust/paralellik/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/paralellik/</guid>
      <description>Paralellik, &amp;ldquo;std::thread&amp;rdquo; modülü, kanallar ve atomlar gibi çeşitli sınıflar aracılığıyla Rust&amp;rsquo;ın standart kitaplığı tarafından iyi bir şekilde desteklenir. Bu bölüm, bu türlerin kullanımı konusunda size rehberlik edecektir.
Kanallarla çapraz iş parçacığı iletişimi # Kanallar, bir iş parçacığından diğerine veri göndermek için kullanılabilir. Aşağıda, ana iş parçacığının 0, 1, &amp;hellip;, 9 değerlerini ürettiği ve oluşturulan iş parçacığının bunları yazdırdığı basit bir üretici-tüketici sistemine bir örnek verilmiştir:
use std::thread; use std::sync::mpsc::channel; fn main() { // Create a channel with a sending end (tx) and a receiving end (rx).</description>
    </item>
    
    <item>
      <title>Teller</title>
      <link>https://www.wikiod.com/tr/rust/teller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/rust/teller/</guid>
      <description>Diğer birçok dilden farklı olarak, Rust&amp;rsquo;ın iki ana dize türü vardır: String (yığına ayrılmış bir dize türü) ve &amp;amp;str (fazladan bellek kullanmayan bir ödünç alınmış dize). Aradaki farkı ve her birinin ne zaman kullanılacağını bilmek, Rust&amp;rsquo;ın nasıl çalıştığını anlamak için çok önemlidir.
Temel Dize manipülasyonu # fn main() { // Statically allocated string slice let hello = &amp;quot;Hello world&amp;quot;; // This is equivalent to the previous one let hello_again: &amp;amp;&#39;static str = &amp;quot;Hello world&amp;quot;; // An empty String let mut string = String::new(); // An empty String with a pre-allocated initial buffer let mut capacity = String::with_capacity(10); // Add a string slice to a String string.</description>
    </item>
    
  </channel>
</rss>

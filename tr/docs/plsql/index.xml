<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plsql Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/plsql/</link>
    <description>Recent content in plsql Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/plsql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>plsql&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/plsql/plsqlyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/plsqlyi-kullanmaya-baslama/</guid>
      <description>Selam Dünya # set serveroutput on DECLARE message constant varchar2(32767):= &#39;Hello, World!&#39;; BEGIN dbms_output.put_line(message); END; / SQL*Plus ve SQL Developer istemcilerinde &amp;lsquo;dbms_output&amp;rsquo; çıktısını etkinleştirmek için &amp;lsquo;set serveroutput on&amp;rsquo; komutu gereklidir. Komut olmadan hiçbir şey görüntülenmez.
&amp;rsquo;end;&amp;rsquo; satırı, anonim PL/SQL bloğunun sonunu bildirir. Kodu SQL komut satırından çalıştırmak için, kodun son satırından sonraki ilk boş satırın başına / yazmanız gerekebilir. Yukarıdaki kod SQL isteminde çalıştırıldığında aşağıdaki sonucu verir:
Hello, World! PL/SQL procedure successfully completed.</description>
    </item>
    
    <item>
      <title>PLSQL prosedürü</title>
      <link>https://www.wikiod.com/tr/plsql/plsql-proseduru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/plsql-proseduru/</guid>
      <description>PLSQL prosedürü, yeniden kullanım için sunucuda depolanan bir grup SQL ifadesidir. SQL deyimlerinin her çalıştırıldığında yeniden derlenmesi gerekmediğinden performansı artırır.
Saklı yordamlar, birden çok uygulama tarafından aynı kod gerektiğinde kullanışlıdır. Saklı yordamlara sahip olmak, fazlalığı ortadan kaldırır ve koda basitlik getirir. İstemci ve sunucu arasında veri aktarımı gerektiğinde, prosedürler belirli durumlarda iletişim maliyetini azaltabilir.
Sözdizimi # CREATE [OR REPLACE] PROCEDURE procedure_name [(parameter_name [IN | OUT | IN OUT] type [, .</description>
    </item>
    
    <item>
      <title>imleçler</title>
      <link>https://www.wikiod.com/tr/plsql/imlecler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/imlecler/</guid>
      <description>Sözdizimi # İmleç cursor_name your_select_statement İmleç cursor_name(param TYPE) your_select_statement_using_param (your_select_statement) DÖNGÜSÜNDE x İÇİN &amp;hellip; Bildirilen İmleçlerin kullanımı zordur ve çoğu durumda &amp;lsquo;FOR&amp;rsquo; döngülerini tercih etmelisiniz. Basit &amp;lsquo;FOR&amp;rsquo; döngülerine kıyasla imleçlerde çok ilginç olan şey, onları parametreleştirebilmenizdir.
Yine de Oracle SQL kullanmak yerine PL/SQL ve imleçlerle döngü yapmaktan kaçınmak daha iyidir. Ancak, prosedürel dile alışmış insanlar için anlaşılması çok daha kolay olabilir.
Bir kaydın var olup olmadığını kontrol etmek ve ardından kaydın var olup olmadığına bağlı olarak farklı şeyler yapmak istiyorsanız, `MERGE&amp;rsquo; ifadelerini kullanmak mantıklıdır.</description>
    </item>
    
    <item>
      <title>Toplu toplama</title>
      <link>https://www.wikiod.com/tr/plsql/toplu-toplama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/toplu-toplama/</guid>
      <description>Toplu veri İşleme # seçili ifadelerde yerel koleksiyonlara izin verilmez. Bu nedenle ilk adım, şema düzeyinde bir koleksiyon oluşturmaktır. Koleksiyon şema düzeyinde değilse ve SELECT ifadelerinde kullanılıyorsa, &amp;ldquo;PLS-00642: SQL ifadelerinde yerel koleksiyon türlerine izin verilmiyor&amp;rdquo; hatasına neden olur.
CREATE OR REPLACE TYPE table1_t IS OBJECT ( a_1 INTEGER, a_2 VARCHAR2(10) ); &amp;ndash;Veritabanında herkese açık olarak kullanılabilmesi için koleksiyona izinler verin
GRANT EXECUTE ON table1_t TO PUBLIC; CREATE OR REPLACE TYPE table1_tbl_typ IS TABLE OF table1_t; GRANT EXECUTE ON table1_tbl_typ TO PUBLIC; &amp;ndash; tablodan koleksiyona veri alma ve ardından koleksiyonda döngü yapma ve verileri yazdırma.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/plsql/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/fonksiyonlar/</guid>
      <description>Sözdizimi # CREATE [OR REPLACE] FUNCTION işlev_adı [ (parametre [,parametre]) ]
RETURN return_datatype IS | OLARAK
[declaration_section] BAŞLANGIÇ çalıştırılabilir_bölümü
[İSTİSNA istisna_bölümü]
END [işlev_adı];
Çağrı Fonksiyonları # İşlevleri kullanmanın birkaç yolu vardır.
Atama ifadesi ile bir işlevi çağırmak
DECLARE x NUMBER := functionName(); --functions can be called in declaration section BEGIN x := functionName(); END; EĞER deyiminde bir işlevi çağırmak
IF functionName() = 100 THEN Null; END IF; SELECT deyiminde bir işlevi çağırmak</description>
    </item>
    
    <item>
      <title>Paketler</title>
      <link>https://www.wikiod.com/tr/plsql/paketler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/paketler/</guid>
      <description>Sözdizimi # OLUŞTUR [VEYA DEĞİŞTİR] PAKETİ paket_adı [AUTHID {CURRENT_USER | TANIMLAMAK}]
{IS | AS} [PRAGMA SERIALLY_REUSABLE;]
[collection_type_definition &amp;hellip;]
[record_type_definition &amp;hellip;]
[alttür_tanımı &amp;hellip;]
[koleksiyon_bildirimi &amp;hellip;]
[sabit_bildirim &amp;hellip;]
[istisna_bildirimi &amp;hellip;]
[object_declaration &amp;hellip;]
[kayıt_bildirimi &amp;hellip;]
[değişken_bildirim &amp;hellip;]
[imleç_özelliği &amp;hellip;]
[işlev_özelliği &amp;hellip;]
[prosedür_özelliği &amp;hellip;]
[call_spec &amp;hellip;]
[PRAGMA RESTRICT_REFERENCES(iddialar) &amp;hellip;]
END [paket_adı];
PAKET OLUŞTUR VEYA DEĞİŞTİR PaketAdı IS FONKSİYON İşlevAdı(parametre1 VARCHAR2&amp;rsquo;DE, parametre2 SAYIDA) RETURN VARCHAR2;
SON PaketAdı;
CREATE [OR REPLACE] PACKAGE BODY paket_adı {IS | OLARAK}</description>
    </item>
    
    <item>
      <title>IF-THEN-ELSE İfadesi</title>
      <link>https://www.wikiod.com/tr/plsql/if-then-else-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/if-then-else-ifadesi/</guid>
      <description>Sözdizimi # EĞER [koşul 1] SONRA
[koşul 1 DOĞRU olduğunda yürütülecek ifadeler];
ELSIF [koşul 2] SONRA
[durum 2 DOĞRU olduğunda yürütülecek ifadeler];
BAŞKA
[hem koşul 1 hem de koşul 2 YANLIŞ olduğunda yürütülecek ifadeler];
EĞER SON;
IF-THEN # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 1; IF v_num1 &amp;gt; v_num2 THEN dbms_output.put_line(&#39;v_num1 is bigger than v_num2&#39;); END IF; END; IF-THEN-ELSE # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 10; IF v_num1 &amp;gt; v_num2 THEN dbms_output.</description>
    </item>
    
    <item>
      <title>tetikleyiciler</title>
      <link>https://www.wikiod.com/tr/plsql/tetikleyiciler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/tetikleyiciler/</guid>
      <description>Giriiş:
Tetikleyiciler, PL/SQL&amp;rsquo;de kullanışlı bir kavramdır. Tetikleyici, kullanıcı tarafından açıkça çağrılmasını gerektirmeyen özel bir saklı yordam türüdür. Belirli bir tablo veya ilişki üzerindeki belirli bir veri değiştirme eylemine yanıt olarak veya belirli belirli koşullar yerine getirildiğinde otomatik olarak tetiklenen bir talimat grubudur. Tetikleyiciler, verilerin bütünlüğünü ve güvenliğini korumaya yardımcı olur. Gerekli aksiyonu otomatik olarak alarak işi kolaylaştırırlar.
Sözdizimi # OLUŞTUR [ VEYA DEĞİŞTİR ] TRIGGER tetikleyici_adı GÜNCELLEMEDEN ÖNCE [veya EKLE] [veya SİL] AÇIK tablo_adı [ HER SIRA İÇİN ] BİLDİRMEK &amp;ndash; değişken bildirimleri BAŞLAMAK &amp;ndash; tetikleme kodu İSTİSNA NE ZAMAN &amp;hellip; &amp;ndash; istisna işleme SON; INSERT veya UPDATE tetikleyicisinden önce # CREATE OR REPLACE TRIGGER CORE_MANUAL_BIUR BEFORE INSERT OR UPDATE ON CORE_MANUAL FOR EACH ROW BEGIN if inserting then -- only set the current date if it is not specified if :new.</description>
    </item>
    
    <item>
      <title>Döngü</title>
      <link>https://www.wikiod.com/tr/plsql/dongu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/dongu/</guid>
      <description>Sözdizimi # DÖNGÜ [ifadeler]; EXIT WHEN [çıkış döngüsü için koşul]; SON DÖNGÜ; Basit Döngü # DECLARE v_counter NUMBER(2); BEGIN v_counter := 0; LOOP v_counter := v_counter + 1; dbms_output.put_line(&#39;Line number&#39; || v_counter); EXIT WHEN v_counter = 10; END LOOP; END; Döngü sırasında # WHILE döngüsü, bitiş koşulu sağlanana kadar yürütülür. Basit örnek:
DECLARE v_counter NUMBER(2); --declaration of counter variable BEGIN v_counter := 0; --point of start, first value of our iteration WHILE v_counter &amp;lt; 10 LOOP --exit condition dbms_output.</description>
    </item>
    
    <item>
      <title>Koleksiyonlar ve Kayıtlar</title>
      <link>https://www.wikiod.com/tr/plsql/koleksiyonlar-ve-kaytlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/plsql/koleksiyonlar-ve-kaytlar/</guid>
      <description>Bir toplama işlevi için dönüş türü olarak bir koleksiyon kullanın # Türü bildirmek gereklidir; burada t_my_list; bir koleksiyon bir TABLE OF bir şey
CREATE OR REPLACE TYPE t_my_list AS TABLE OF VARCHAR2(100); İşte fonksiyon. Bir tür kurucu olarak kullanılan &amp;ldquo;()&amp;rdquo; ve koleksiyonunuzu oluşturmanıza ve büyütmenize yardımcı olan &amp;ldquo;COUNT&amp;rdquo; ve &amp;ldquo;EXTEND&amp;rdquo; anahtar kelimelerine dikkat edin;
CREATE OR REPLACE FUNCTION cto_table(p_sep in Varchar2, p_list IN VARCHAR2) RETURN t_my_list AS --- this function takes a string list, element being separated by p_sep -- as separator l_string VARCHAR2(4000) := p_list || p_sep; l_sep_index PLS_INTEGER; l_index PLS_INTEGER := 1; l_tab t_my_list := t_my_list(); BEGIN LOOP l_sep_index := INSTR(l_string, p_sep, l_index); EXIT WHEN l_sep_index = 0; l_tab.</description>
    </item>
    
  </channel>
</rss>

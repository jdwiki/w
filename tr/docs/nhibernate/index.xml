<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nhibernate Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/nhibernate/</link>
    <description>Recent content in nhibernate Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/nhibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nhibernate&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/nhibernate/nhibernatei-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nhibernate/nhibernatei-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # Hazırda bekletme modunu kurma veya yükleme hakkında ayrıntılı talimatlar.</description>
    </item>
    
    <item>
      <title>Eşlemeler</title>
      <link>https://www.wikiod.com/tr/nhibernate/eslemeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nhibernate/eslemeler/</guid>
      <description>XML Eşlemeleri # xml eşleme, hazırda bekleme eşleme dosyası olan bir &amp;ldquo;hbm.xml&amp;rdquo; dosyası kullanır. Nesne/ilişkisel eşleme için gerekli meta verileri içeren bir sözdizimi xml dosyasıdır. Meta veriler, kalıcı sınıfların bildirimini ve özelliklerin (sütunlara ve diğer varlıklarla yabancı anahtar ilişkilerine) veritabanı tablolarına eşlenmesini içerir.
Projeye Entity.hbm.xml adlı bir dosya ekleyin ve bunu özellikler sekmesinde &amp;lsquo;gömülü kaynak&amp;rsquo; olarak ayarlayın. Örnek için Customer.hbm.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt; &amp;lt;hibernate-mapping xmlns=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot; namespace=&amp;quot;Project&amp;quot; assembly=&amp;quot;Project&amp;quot;&amp;gt; &amp;lt;class name=&amp;quot;Customer&amp;quot; table=&amp;quot;CUSTOMERS&amp;quot;&amp;gt; &amp;lt;id name=&amp;quot;Id&amp;quot;&amp;gt; &amp;lt;column name=&amp;quot;Customer_Id&amp;quot; sql-type=&amp;quot;int&amp;quot; not-null=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;generator class=&amp;quot;native&amp;quot; /&amp;gt; &amp;lt;/id&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>QueryOver Sorguları</title>
      <link>https://www.wikiod.com/tr/nhibernate/queryover-sorgular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nhibernate/queryover-sorgular/</guid>
      <description>NHibernate 3.0, ICriteria API çevresinde statik olarak güvenli bir sarmalayıcı sağlamak için uzantı yöntemlerinin ve lambda ifadelerinin kullanımını birleştiren QueryOver API&amp;rsquo;sini tanıttı. ICriteria API, NHibernate&amp;rsquo;in Query Object modelinin uygulamasıdır.
Temel sorgu # Temel bir &amp;ldquo;QueryOver&amp;rdquo; sorgusu, &amp;ldquo;QueryOver&amp;rdquo; yöntemi kullanılarak bir &amp;ldquo;ISession&amp;quot;a karşı gerçekleştirilir; burada &amp;ldquo;T&amp;rdquo;, eşlenen bir varlığın türüdür.
IList&amp;lt;Customer&amp;gt; customers = session.QueryOver&amp;lt;Customer&amp;gt;() .Where(c =&amp;gt; c.LastName == &amp;quot;Simpson&amp;quot;) .List(); JoinQueryOver kullanarak birleştirme ile sorgulama # Katılmak ve örneğin birleştirilmiş tabloda filtrelemek için JoinQueryOver kullanın.</description>
    </item>
    
    <item>
      <title>LINQ to NHibernate Sorguları</title>
      <link>https://www.wikiod.com/tr/nhibernate/linq-to-nhibernate-sorgular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nhibernate/linq-to-nhibernate-sorgular/</guid>
      <description>LINQ to NHibernate sürücüsü, &amp;lsquo;IQueryable&amp;rsquo; arabiriminde ortalanır.
NHibernate LINQ sağlayıcısını kullanmak için using NHibernate.Linq; eklediğinizden emin olun.
Temel sorgu # IQueryable&amp;lt;Cat&amp;gt; cats = session.Query&amp;lt;Cat&amp;gt;() .Where(c =&amp;gt; c.Name == &amp;quot;Max&amp;quot;); </description>
    </item>
    
    <item>
      <title>Kaskadlar</title>
      <link>https://www.wikiod.com/tr/nhibernate/kaskadlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nhibernate/kaskadlar/</guid>
      <description>Sözdizimi # cascade=&amp;ldquo;tümü-silme-yetim&amp;rdquo; Varlıkların başka nesnelerle ilişkileri vardır, bu tek bir öğeyle (çoktan bire) bir ilişki veya bir koleksiyonla (birden çoğa, çoktan çoğa) bir ilişki olabilir.
Her halükarda, NHibernate&amp;rsquo;e bir varlığın ilişkilendirmelerini otomatik olarak geçmesini ve kademeli seçeneğine göre hareket etmesini söyleyebilirsiniz. Örneğin, kaydetme-güncelleme basamaklı bir koleksiyona kaydedilmemiş bir varlık eklemek, bizim tarafımızda açık talimatlara gerek kalmadan üst nesnesiyle birlikte kaydedilmesine neden olur.
https://ayende.com/blog/1890/nhibernate-cascades-the- Different-between-all-all-delete-orphans-and-save-update
kaydet-güncelleme # nesne kaydedildiğinde/güncellendiğinde, ilişkilendirmeleri kontrol edin ve bunu gerektiren herhangi bir nesneyi kaydedin/güncelleyin (çoktan çoğa senaryoda ilişkilendirmeleri kaydetme/güncelleme dahil).</description>
    </item>
    
  </channel>
</rss>

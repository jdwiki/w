<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kobol Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/cobol/</link>
    <description>Recent content in kobol Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/cobol/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cobol&#39;u kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/cobol/cobolu-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/cobolu-kullanmaya-baslama/</guid>
      <description>Selam Dünya # HELLO * HISTORIC EXAMPLE OF HELLO WORLD IN COBOL IDENTIFICATION DIVISION. PROGRAM-ID. HELLO. PROCEDURE DIVISION. DISPLAY &amp;quot;HELLO, WORLD&amp;quot;. STOP RUN. Delikli kart düzeni ve yalnızca büyük harf girişleri günleri çok geride kaldı. Yine de çoğu COBOL uygulaması hala aynı kod düzenini yönetiyor. Mevcut uygulamalar bile derlenmiş ve üretimde aynı (genellikle büyük harfle bile) izler.
İyi biçimlendirilmiş bir modern uygulama şöyle görünebilir:
*&amp;gt; Hello, world identification division. program-id. hello.</description>
    </item>
    
    <item>
      <title>ÇAĞRI ifadesi</title>
      <link>https://www.wikiod.com/tr/cobol/cagri-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/cagri-ifadesi/</guid>
      <description>COBOL CALL ifadesi, derlenmiş kitaplık rutinlerine erişim sağlar.
ÇAĞRI ifadesi # COBOL, aşağıdaki ifade için statik bağlantı kullanabilir. GnuCOBOL, sembol bir hazır bilgi olsa bile, derleme zamanında bilinen tüm harici semboller için varsayılan olarak dinamik bağlantı kullanır:
CALL &amp;quot;subprogram&amp;quot; USING a b c *&amp;gt; run a (possibly static linked) sub program *&amp;gt; passing three fields CALL some-prog USING a b c *&amp;gt; some-prog is a PIC X item and can be changed *&amp;gt; at run-time to do a dynamic lookup Bu ifade, derleme zamanı bağlantı düzenleme çözümünü zorlar.</description>
    </item>
    
    <item>
      <title>GNULinux ile GnuCOBOL kurulumu</title>
      <link>https://www.wikiod.com/tr/cobol/gnulinux-ile-gnucobol-kurulumu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/gnulinux-ile-gnucobol-kurulumu/</guid>
      <description>GNU/Linux kurulumu # Çoğu GNU/Linux dağıtımı için, depolarda bir &amp;ldquo;GnuCOBOL&amp;rdquo; sürümü mevcuttur. GnuCOBOL orijinal olarak OpenCOBOL idi, proje resmi bir GNU projesi haline geldiğinde yeniden markalandı. Birçok depo hala paket adı olarak &amp;ldquo;open-cobol&amp;rdquo; kullanıyor (Ağustos 2016 itibariyle).
Fedora ve diğer RPM tabanlı paket yöneticileri için
sudo yum install open-cobol Debian, Ubuntu ve APT tabanlı paketler için
sudo apt install open-cobol Bu genellikle derleyici paketinin 1.1 sürümüdür ve GnuCOBOL kullanılırken gereken derleme zamanı ve çalışma zamanı bağımlılıklarıyla ilgilenir.</description>
    </item>
    
    <item>
      <title>ALTER ifadesi</title>
      <link>https://www.wikiod.com/tr/cobol/alter-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/alter-ifadesi/</guid>
      <description>Çok sevilen ALTER ifadesi. GO TO paragrafının hedefini değiştirir.
Artık COBOL standardının bir parçası değil, geriye dönük uyumluluk nedeniyle birçok derleyici tarafından hala destekleniyor. (Sözdizimi şeması, bunun artık standart COBOL olmadığını göstermek için soluktur).
ALTER kullanan yapmacık bir örnek # identification division. program-id. altering. date-written. 2015-10-28/06:36-0400. remarks. Demonstrate ALTER. procedure division. main section. *&amp;gt; And now for some altering. contrived. ALTER story TO PROCEED TO beginning GO TO story . *&amp;gt; Jump to a part of the story story.</description>
    </item>
    
    <item>
      <title>BAŞLANGIÇ ifadesi</title>
      <link>https://www.wikiod.com/tr/cobol/baslangic-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/baslangic-ifadesi/</guid>
      <description>&amp;lsquo;BAŞLAT&amp;rsquo; ifadesi, sonraki sıralı alma (anahtarla) için bir dosyadaki okumayı konumlandırmanın bir yolunu sağlar.
Anahtar ilişkisel şunları içerebilir (ancak bunlarla sınırlı değildir):
ANAHTAR BÜYÜK
ANAHTAR &amp;gt;
ANAHTAR DAHA AZ
ANAHTAR &amp;lt;
ANAHTAR EŞİTTİR
ANAHTAR =
ANAHTAR BÜYÜK DEĞİL
ANAHTAR DEĞİL &amp;gt;
ANAHTAR DAHA AZ DEĞİL
ANAHTAR DEĞİL &amp;lt;
ANAHTAR EŞİT DEĞİLDİR
ANAHTAR DEĞİL =
ANAHTAR &amp;lt;&amp;gt;
ANAHTAR BÜYÜK VEYA EŞİTTİR
ANAHTAR &amp;gt;=
ANAHTAR KÜÇÜK VEYA EŞİTTİR
ANAHTAR &amp;lt;=
BAŞLANGIÇ örneği # start indexing key is less than keyfield of indexing-record invalid key display &amp;quot;bad start: &amp;quot; keyfield of indexing-record set no-more-records to true not invalid key read indexing previous record at end set no-more-records to true end-read end-start </description>
    </item>
    
    <item>
      <title>EXIT ifadesi</title>
      <link>https://www.wikiod.com/tr/cobol/exit-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/exit-ifadesi/</guid>
      <description>COBOL EXIT ifadesi, sonlandırıcı bir akış kontrol fiilidir.
&amp;lsquo;EXIT&amp;rsquo; gelir birkaç tattır:
çıplak &amp;lsquo;ÇIKIŞ&amp;rsquo;, bir dizi prosedür için ortak bir son noktadır. &amp;lsquo;ÇIKIŞ PARAGRAFI&amp;rsquo;, &amp;lsquo;ÇIKIŞ BÖLÜMÜ&amp;rsquo;, sonraki ifadelerden herhangi birini yürütmeden yapılandırılmış bir prosedürden çıkmanın bir yolunu sağlar. &amp;ldquo;ÇIKIŞ FONKSİYONU&amp;rdquo;, &amp;ldquo;ÇIKIŞ YÖNTEMİ&amp;rdquo;, &amp;ldquo;ÇIKIŞ PROGRAMI&amp;rdquo;, bir kod modülünün mantıksal sonunu belirtir. &amp;ldquo;ÇIKIŞ GERÇEKLEŞTİR&amp;rdquo; satır içi gerçekleştirme döngüsünden çıkar. &amp;lsquo;EXIT PERFORM CYCLE&amp;rsquo;, bir sonraki yinelemeyi başlatmak için bir satır içi gerçekleştirme döngüsüne neden olur.</description>
    </item>
    
    <item>
      <title>KABUL beyanı</title>
      <link>https://www.wikiod.com/tr/cobol/kabul-beyan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/kabul-beyan/</guid>
      <description>COBOL ACCEPT ifadesi sistemden veri almak için kullanılır.
KABUL deyimi # ACCEPT variable. ACCEPT variable FROM CONSOLE. ACCEPT variable FROM ENVIRONMENT &amp;quot;path&amp;quot;. ACCEPT variable FROM COMMAND-LINE. ACCEPT variable FROM ARGUMENT-NUMBER ACCEPT variable FROM ARGUMENT-VALUE ACCEPT variable AT 0101. ACCEPT screen-variable. ACCEPT today FROM DATE. ACCEPT today FROM DATE YYYYMMDD. ACCEPT thetime FROM TIME. ACCEPT theday FROM DAY. ACCEPT theday FROM DAY YYYYDDD. ACCEPT weekday FROM DAY-OF-WEEK. ACCEPT thekey FROM ESCAPE KEY.</description>
    </item>
    
    <item>
      <title>WRITE ifadesi</title>
      <link>https://www.wikiod.com/tr/cobol/write-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/write-ifadesi/</guid>
      <description>&amp;ldquo;WRITE&amp;rdquo; ifadesi, mantıksal kayıtları bir &amp;ldquo;çıkış&amp;rdquo; veya &amp;ldquo;giriş-çıkış&amp;rdquo; depolama kaynağına ve mantıksal bir sayfa içinde satırların mantıksal olarak konumlandırılması için serbest bırakır.
sıralı YAZ
rastgele YAZ
YAZMA örnekleri # WRITE record-buff WRITE indexed-record WITH LOCK ON INVALID KEY DISPLAY &amp;quot;Key exists, REWRITING...&amp;quot; END-DISPLAY PERFORM rewrite-key END-WRITE IF indexed-file-status NOT EQUAL ZERO THEN DISPLAY &amp;quot;Write problem: &amp;quot; indexed-file-status UPON SYSERR END-DISPLAY PERFORM evasive-manoeuvres END-IF WRITE record-name-1 AFTER ADVANCING PAGE WRITE record-name-1 FROM header-record-1 AFTER ADVANCING 2 LINES AT END-OF-PAGE PERFORM write-page-header PERFORM write-last-detail-reminder END-WRITE </description>
    </item>
    
    <item>
      <title>DEVAM deyimi</title>
      <link>https://www.wikiod.com/tr/cobol/devam-deyimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/devam-deyimi/</guid>
      <description>CONTINUE ifadesi, kontrol akışının sonraki ifadede devam etmesine neden olur. Bileşik ifade dizilerinin içinde, özellikle IF/THEN/ELSE olduğunda kontrol akışını etkileyebileceğinden, tam olarak no-op değil.
Kullanışlı mı? örnek, erken geliştirme ve hata ayıklama yardımcıları ile ve bunlar olmadan oluşturma sırasındadır.
CALL &amp;quot;CBL_OC_DUMP&amp;quot; USING structure ON EXCEPTION CONTINUE END-CALL Bu kod pahalı olsa da, &amp;ldquo;CBL_OC_DUMP&amp;rdquo; modülü yürütülebilir dosyaya bağlandığında biçimlendirilmiş bellek dökümlerine izin verecek, ancak bağlanmadığında zararsız bir şekilde başarısız olacaktır. *Bu numara yalnızca geliştirmenin ilk aşamalarında geçerlidir.</description>
    </item>
    
    <item>
      <title>İçsel Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/cobol/icsel-fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/cobol/icsel-fonksiyonlar/</guid>
      <description>İçsel İşlevler, sıfır veya daha fazla bağımsız değişken verilen belirli bir algoritmadan değerler döndüren bir işlevler kümesi olarak COBOL standardına dahil edilir. Bu içsel işlevler, derleyici ve çalışma zamanı sisteminin bir olanağı olarak sağlanır. Döndürülen öğeler geçici COBOL alanlarıdır ve karakter verileri, bit alanları veya sayısal değerler olabilir.
Örnekler arasında trigonometrik işlevler, tarih saat rutinleri, veri türü dönüşümleri, standart sapma ve diğer destek algoritmaları bulunur.
COBOL 2014, aşağıdaki standart Temel İşlevleri listeler:</description>
    </item>
    
  </channel>
</rss>

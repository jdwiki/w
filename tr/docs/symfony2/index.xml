<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symfony2 Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/symfony2/</link>
    <description>Recent content in symfony2 Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/symfony2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>symfony2&#39;ye başlarken</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony2ye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony2ye-baslarken/</guid>
      <description>Kurulum veya Kurulum # Symfony Framework - symfony bileşenleriyle oluşturulmuş, sağlam web siteleri ve web uygulamaları oluşturmak için kullanılan önde gelen PHP çerçevesinden biridir.
Symfony, önerilen iki yolla hızlı bir şekilde kurulabilir.
Resmi belgeler, çerçevenin aşağıdakiler aracılığıyla kurulmasını önerir: Symfony Installer which is a tiny php application that is installed once on the local system that helps in downloading the framework and setting up the configuration of the framework. Symfony Installer requires PHP 5.</description>
    </item>
    
    <item>
      <title>Symfony 2.8 ile Web Servisleri Oluşturma</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony-28-ile-web-servisleri-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony-28-ile-web-servisleri-olusturma/</guid>
      <description>RESTFul API ile çalışın # Temsili Durum Transferi (REST), 2000 yılında Roy Fielding tarafından tanıtılan ve tanımlanan web geliştirme için kullanılan bir mimari stildir.
Wiki&amp;rsquo;de görün: REST wiki
HTTP protokolüne (Wiki&amp;rsquo;de HTTP), HTTP isteklerine (GET, POST, PATCH, DELETE&amp;hellip;) / yanıt kodlarına (404, 400, 200, 201, 500&amp;hellip;) ve gövde yapısına dayanır. .
Bu, verilerinizi İnternet&amp;rsquo;teki başka bir sisteme göstermenin harika bir yoludur.
Yerel veritabanınızda StackOverFlower&amp;rsquo;ınızı (Kullanıcı) yönetmek için bir RESTFul api yapmak istediğinizi hayal edin.</description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/symfony2/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/yonlendirme/</guid>
      <description>404 yanıtı döndür # Sunucuda bir kaynak bulunamadığında 404 yanıt döndürülür, Symfony&amp;rsquo;de bu durum bir &amp;lsquo;NotFoundHttpException&amp;rsquo; istisnası atılarak oluşturulabilir. Denetleyici içinde fazladan bir &amp;ldquo;use&amp;rdquo; ifadesinden kaçınmak için &amp;ldquo;Controller&amp;rdquo; sınıfı tarafından sağlanan &amp;ldquo;createNotFoundException()&amp;rdquo; öğesini kullanın.
&amp;lt;?php namespace Bundle\Controller; use Symfony\Bundle\FrameworkBundle\Controller\Controller; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; class TestController extends Controller { /** * @Route(&amp;quot;/{id}&amp;quot;, name=&amp;quot;test&amp;quot;) * Recommended to avoid template() as it has a lot of background processing. * Query database for &#39;test&#39; record with &#39;id&#39; using param converters.</description>
    </item>
    
    <item>
      <title>Doktrin Varlık İlişkileri</title>
      <link>https://www.wikiod.com/tr/symfony2/doktrin-varlk-iliskileri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/doktrin-varlk-iliskileri/</guid>
      <description>Bire Çok, Çift Yönlü # Bu çift yönlü eşleme, &amp;ldquo;OneToMany&amp;rdquo; ilişkilendirmesinde &amp;ldquo;mappedBy&amp;rdquo; özniteliğini ve &amp;ldquo;ManyToOne&amp;rdquo; ilişkilendirmesinde &amp;ldquo;inversedBy&amp;rdquo; özniteliğini gerektirir.
Çift yönlü bir ilişkinin hem sahiplik hem de ters taraf vardır. &amp;lsquo;OneToMany&amp;rsquo; ilişkileri birleştirme tablolarını kullanabilir, bu nedenle bir sahiplik tarafı belirtmeniz gerekir. &amp;ldquo;OneToMany&amp;rdquo; ilişkilendirmesi her zaman iki yönlü bir ilişkinin ters tarafıdır.
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity * @ORM\Table(name=&amp;quot;users&amp;quot;) */ class User { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;username&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $username; /** * @var Group|null * * @ORM\ManyToOne(targetEntity=&amp;quot;AppBundle\Entity\Group&amp;quot;, inversedBy=&amp;quot;users&amp;quot;) * @ORM\JoinColumn(name=&amp;quot;group_id&amp;quot;, referencedColumnName=&amp;quot;id&amp;quot;, nullable=true) */ protected $group; /** * @param string $username * @param Group|null $group */ public function __construct($username, Group $group = null) { $this-&amp;gt;username = $username; $this-&amp;gt;group = $group; } /** * Set username * * @param string $username */ public function setUsername($username) { $this-&amp;gt;username = $username; } /** * Get username * * @return string */ public function getUsername() { return $this-&amp;gt;username; } /** * @param Group|null $group */ public function setGroup(Group $group = null) { if($this-&amp;gt;group !</description>
    </item>
    
    <item>
      <title>Symfony Hizmetleri</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony-hizmetleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony-hizmetleri/</guid>
      <description>Symfony2&amp;rsquo;de basit bir hizmet nasıl bildirilir, yazılır ve kullanılır # Hizmet beyanı:
# src/Acme/YourBundle/Resources/config/services.yml services: my_service: class: Acme\YourBundle\Service\MyService arguments: [&amp;quot;@doctrine&amp;quot;, &amp;quot;%some_parameter%&amp;quot;, &amp;quot;@another_service&amp;quot;] another_service: class: Acme\YourBundle\Service\AnotherService arguments: [] Servis kodu :
&amp;lt;?php namespace Acme\YourBundle\Service\Service; class MyService { /** * Constructor * You can had whatever you want to use in your service by dependency injection * @param $doctrine Doctrine * @param $some_parameter Some parameter defined in app/config/parameters.yml * @param $another_service Another service */ public function __construct($doctrine, $some_parameter, $another_service) { $this-&amp;gt;doctrine = $doctrine; $this-&amp;gt;some_parameter = $some_parameter; $this-&amp;gt;another_service = $another_service; } public function doMagic() { // Your code here } } Bir denetleyicide kullanın:</description>
    </item>
    
    <item>
      <title>Symfony Dal Uzantıları</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony-dal-uzantlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony-dal-uzantlar/</guid>
      <description>Basit Bir Dal Uzantısı &amp;ndash; Symfony 2.8 # Herhangi bir uzantı oluşturmadan önce, her zaman zaten uygulandı olup olmadığını kontrol edin.
Yapılması gereken ilk şey, dal filtrelerini ve/veya fonksiyonlarını barındıracak uzantı sınıfını tanımlamaktır.
&amp;lt;?php namespace AppBundle\Twig; class DemoExtension extends \Twig_Extension { /** * A unique identifier for your application * * @return string */ public function getName() { return &#39;demo&#39;; } /** * This is where one defines the filters one would to use in their twig * templates * * @return Array */ public function getFilters() { return array ( new \Twig_SimpleFilter ( &#39;price&#39;, // The name of the twig filter array($this, &#39;priceFilter&#39;) ), ); } public function priceFilter($number, $decimals = 0, $decPoint = &#39;.</description>
    </item>
    
    <item>
      <title>Symfony Tasarım Desenleri</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony-tasarm-desenleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony-tasarm-desenleri/</guid>
      <description>Bağımlılık Enjeksiyon kalıbı # Posta göndermeyi yöneten bir sınıf yöneticiniz olduğunu (MailManager olarak adlandırılır) düşünün.
Bunun içinde, gönderilen postaları günlüğe kaydetmeniz gerekir. İyi bir çözüm, MailManager sınıfını bir &amp;ldquo;hizmet&amp;quot;e dönüştürmek ve ardından günlük oluşturmak için sınıfı (örneğin &amp;ldquo;Monolog&amp;rdquo;) bir hizmet oluşturan MailManager&amp;rsquo;a enjekte etmektir.
Bunu yapmak için :
1- Gelecekteki MailManager sınıfını hizmet olarak bildirin (services.yml&amp;rsquo;de)
services: mail.manager.class: class: Vendor/YourBundle/Manager/MailManager 2- &amp;lsquo;argument&amp;rsquo; yöntemini kullanarak logger mevcut hizmeti enjekte edin
services: mail.</description>
    </item>
    
    <item>
      <title>Symfony2&#39;nin Dağıtımı</title>
      <link>https://www.wikiod.com/tr/symfony2/symfony2nin-dagtm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/symfony2nin-dagtm/</guid>
      <description>Symfony 2 projesini manuel olarak barındırmaya taşıma adımları # Sahip olduğunuz barındırma türüne bağlıdır:
SSH konsolunuz varsa 2. adımdan sonra hosting üzerinde yapabilirsiniz, if you haven&amp;rsquo;t then do it locally: run command
php app/console cache:clear --env=prod&#39;. Diyelim ki barındırma klasörleriniz var youdomain/public_html, so in public_html must be located all web files. So you must upload all from Symfony project (folders: app, src, vendors, bin; files: deps, deps.lock), except for folder web in folder youdomain.</description>
    </item>
    
    <item>
      <title>Doktrin Varlık Deposu</title>
      <link>https://www.wikiod.com/tr/symfony2/doktrin-varlk-deposu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/doktrin-varlk-deposu/</guid>
      <description>Yeni bir Depo Oluşturma # İstediğiniz yerde yeni bir Depo oluşturabilirsiniz, ancak bunları ayrı bir &amp;lsquo;Depo&amp;rsquo; klasöründe oluşturmanız önerilir.
Depo dosyasını ve sınıfını istediğiniz gibi adlandırabilseniz de, klasörünüzde bunları hızlı bir şekilde bulabilmeniz için Depoyu &amp;lsquo;EntityNameRepository&amp;rsquo; olarak adlandırmanız önerilir.
&amp;ldquo;AppBundle\Entity&amp;rdquo; içinde depolanan bir &amp;ldquo;Proje&amp;rdquo; Varlığımız olduğunu varsayalım, şöyle görünür:
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * Project Entity - some information * * @ORM\Table(name=&amp;quot;project&amp;quot;) * @ORM\Entity(repositoryClass=&amp;quot;AppBundle\Repository\ProjectRepository&amp;quot;) */ class Project { // definition of the entity with attributes, getters, setter whatsoever } ?</description>
    </item>
    
    <item>
      <title>Monolog günlüklerinizi iyileştirin</title>
      <link>https://www.wikiod.com/tr/symfony2/monolog-gunluklerinizi-iyilestirin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/symfony2/monolog-gunluklerinizi-iyilestirin/</guid>
      <description>Kullanıcı ayrıntılarını ve günlüklere gönderilen gönderilen parametreleri ekleyin # Loglar çok önemlidir. Bir hata bağlamını yeniden oluşturmak, hatanın nasıl ve ne zaman oluştuğuna ilişkin bilgi eksikliği nedeniyle bazen çok acı verici olabilir.
Bu örnek şunları gösterir:
Hata günlüklerine kullanıcı verileri nasıl eklenir
Gönderi parametreleri nasıl eklenir bir hata oluştuğunda gönderildi
Bunu yapmak için WebProcessor nasıl kullanılır? istekle ilgili tüm verileri aşağıdaki gibi ekleyin:
url ip http method server referrer Hizmet Yapılandırması</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-mvc Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/asp-dotnet-mvc/</link>
    <description>Recent content in asp.net-mvc Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/asp-dotnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asp.net-mvc&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/aspnet-mvcyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/aspnet-mvcyi-kullanmaya-baslama/</guid>
      <description>Merhaba MVC! # ASP.NET MVC açık kaynaklı web uygulaması çerçevesidir. MVC&amp;rsquo;nin kendisi, üç ana bileşen etrafında oluşturulmuş bir tasarım modelidir: model-görünüm-kontrolör.
Model - Modeller, iş nesnelerinizi yansıtır ve Denetleyiciler ile Görünümler arasında veri aktarmanın bir yoludur.
Görünüm - Görünümler, model verilerini kullanıcıya sunan ve görüntüleyen sayfalardır. ASP.NET MVC Görünümleri genellikle Razor sözdizimi kullanılarak yazılır.
Denetleyici - Denetleyiciler, bir istemciden gelen HTTP isteklerini işler ve genellikle bir veya daha fazla Modeli uygun bir Görünüme döndürür.</description>
    </item>
    
    <item>
      <title>Html.AntiForgeryToken</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/htmlantiforgerytoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/htmlantiforgerytoken/</guid>
      <description>Sahteciliği önleme belirteci, uygulamanızı siteler arası istek sahteciliğine karşı korumaya yardımcı olmak için kullanılabilir. Bu özelliği kullanmak için, bir formdan AntiForgeryToken yöntemini çağırın ve korumak istediğiniz eylem yöntemine ValidateAntiForgeryTokenAttribute özniteliğini ekleyin.
Form gönderildiğinde doğrulanan gizli bir form alanı (sahtecilik karşıtı belirteç) oluşturur.
Sözdizimi # @Html.AntiForgeryToken() CSRF belirteci (__RequestVerificationToken) ile bir ajax isteği gönderirken, içerik türünün application/json olarak ayarlanmadığından emin olun. jQuery kullanıyorsanız, içerik türünü otomatik olarak &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; olarak ayarlar ve ardından ASP.</description>
    </item>
    
    <item>
      <title>Ustura</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/ustura/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/ustura/</guid>
      <description>Jilet nedir?
Razor, sunucu tabanlı kodu (Visual Basic ve C#) web sayfalarına yerleştirmenizi sağlayan bir biçimlendirme sözdizimidir.
Sunucu tabanlı kod, tarayıcıya bir web sayfası yazılırken anında dinamik web içeriği oluşturabilir. Bir web sayfası çağrıldığında, sunucu, sayfayı tarayıcıya döndürmeden önce sayfanın içindeki sunucu tabanlı kodu yürütür. Kod, sunucu üzerinde çalışarak veritabanlarına erişmek gibi karmaşık görevleri gerçekleştirebilir.
Sözdizimi # @{ &amp;hellip; } @değişken ismi @(değişken ismi) @için(&amp;hellip;){ } @(Açık İfade) @* yorumlar *@ ASP.</description>
    </item>
    
    <item>
      <title>ViewData, ViewBag, TempData</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/viewdata-viewbag-tempdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/viewdata-viewbag-tempdata/</guid>
      <description>&amp;ldquo;ViewData&amp;rdquo; ve &amp;ldquo;ViewBag&amp;rdquo;, denetleyiciden görünüme veri aktarmak için kullanılır.
ViewData, bir nesneler sözlüğünden başka bir şey değildir ve anahtar olarak dize ile erişilebilir.
ViewBag, ViewData&amp;rsquo;ya çok benzer. ViewBag dinamik bir özelliktir. ViewBag, ViewData&amp;rsquo;nın etrafındaki yalnızca bir sarıcıdır.
TempData, HTTP İsteği zamanı için verileri tutar; bu, verileri ardışık iki istek arasında tuttuğu anlamına gelir. TempData, denetleyiciler veya eylemler arasında veri aktarmamıza yardımcı olur. Dahili olarak oturumu kullanır.
Sözdizimi # ViewData[anahtar] = değer;</description>
    </item>
    
    <item>
      <title>Html.RouteLink</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/htmlroutelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/htmlroutelink/</guid>
      <description>Parametreler # parametre Ayrıntılar bağlantıMetin Bağlantı için görüntülenecek metin. rotaAdı Bir sanal yol döndürülecek rotanın adı. Bağlantı Metni ve Rota Adını Kullanan Temel Örnek # Bir görünümde bağlantılar oluşturmak için Html.ActionLink kullanımına alternatif olarak, şunu kullanabilirsiniz:
Html.RouteLink
Bu özelliği kullanmak için bir rota yapılandırmanız gerekir, örneğin:
public static void RegisterRoutes(RouteCollection routes) { routes.MapRoute( &amp;quot;SearchResults&amp;quot;, &amp;quot;{controller}/{action}&amp;quot;, new { controller = &amp;quot;Search&amp;quot;, action = &amp;quot;Results&amp;quot; }); } Ardından bir görünümde bu rotaya şu şekilde bir bağlantı oluşturabilirsiniz:</description>
    </item>
    
    <item>
      <title>Veri açıklamaları</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/veri-acklamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/veri-acklamalar/</guid>
      <description>Model sınıflarımıza Veri Açıklamaları ekleyerek uygulamamıza doğrulamalar ekleyebiliriz. Veri Açıklamaları, model özelliklerimize uygulanmasını istediğimiz kuralları tanımlamamıza izin verir ve ASP.NET MVC, bunları uygulamak ve kullanıcılara uygun mesajları görüntülemekle ilgilenir.
Uzaktan doğrulama # Remote Validation, giriş kontrolüne girilen içeriğin geçerli olup olmadığını kontrol etmek için sunucu tarafına bir ajax isteği göndererek kontrol etmek için kullanılır. # Çalışma
&amp;lsquo;RemoteAttribute&amp;rsquo;, doğrulanan alanın değeriyle istemciden bir denetleyici eylemine bir AJAX çağrısı yaparak çalışır. Denetleyici eylemi daha sonra doğrulamanın başarılı veya başarısız olduğunu belirten bir &amp;ldquo;JsonResult&amp;rdquo; yanıtı döndürür.</description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/yonlendirme/</guid>
      <description>Yönlendirme, ASP.NET MVC&amp;rsquo;nin bir URI&amp;rsquo;yi bir eylemle nasıl eşleştirdiğidir. Yönlendirme modülü, gelen tarayıcı isteklerini belirli MVC denetleyici eylemlerine eşlemekten sorumludur.
MVC 5, öznitelik yönlendirme adı verilen yeni bir yönlendirme türünü destekler. Adından da anlaşılacağı gibi, öznitelik yönlendirme, rotaları tanımlamak için öznitelikleri kullanır. Öznitelik yönlendirme, web uygulamanızdaki URI&amp;rsquo;ler üzerinde size daha fazla kontrol sağlar.
MVC&amp;rsquo;de öznitelik yönlendirme # Klasik rota tanımlama yöntemiyle birlikte MVC WEB API 2 ve ardından MVC 5 çerçeveleri &amp;ldquo;Öznitelik yönlendirme&amp;quot;yi tanıttı:</description>
    </item>
    
    <item>
      <title>Eylem filtreleri</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/eylem-filtreleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/eylem-filtreleri/</guid>
      <description>Oturum Kontrolü eylem filtresi - sayfa ve ajax isteği # Genellikle kimlik doğrulama ve yetkilendirme işlemleri, .net MVC&amp;rsquo;de yerleşik çerez ve belirteç destekleri tarafından gerçekleştirilir. Ancak Session ile kendiniz yapmaya karar verirseniz hem sayfa istekleri hem de ajax istekleri için aşağıdaki mantığı kullanabilirsiniz.
public class SessionControl : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var session = filterContext.HttpContext.Session; /// user is logged in (the &amp;quot;loggedIn&amp;quot; should be set in Login action upon a successful login request) if ( session[&amp;quot;loggedIn&amp;quot;] !</description>
    </item>
    
    <item>
      <title>Model bağlama</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/model-baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/model-baglama/</guid>
      <description>Model bağlama, tipik olarak bir GET isteğinin Sorgu Dizesinde veya POST gövdesi içinde HTTP parametrelerini alma ve daha sonra Denetleyici eylemlerine gerek kalmadan doğrulanabilen ve nesne yönelimli bir şekilde tüketilebilen bir nesneye uygulama sürecidir. HTTP parametrelerinin nasıl alınacağı konusunda samimi bilgiye sahip olmak.
Başka bir deyişle, model bağlama, MVC&amp;rsquo;de eylemlerin, ister değer türü ister nesne olsun, parametre(ler)e sahip olmasına izin veren şeydir.
Eylemde örnek oluşturmaya çalışmak için, bağlama modeli süreci çeşitli yerlerde veri arayacaktır:</description>
    </item>
    
    <item>
      <title>Model geçerliliği</title>
      <link>https://www.wikiod.com/tr/asp-dotnet-mvc/model-gecerliligi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/asp-dotnet-mvc/model-gecerliligi/</guid>
      <description>Doğrulamadan bir nesneyi kaldırın # Aşağıdaki modele sahip olduğunuzu söyleyin:
public class foo { [Required] public string Email { get; set; } [Required] public string Password { get; set; } [Required] public string FullName { get; set; } } Ancak, modeli FullName&amp;rsquo;in doldurulmadığı bir yerde de kullandığınız için FullName&amp;rsquo;i model doğrulamadan hariç tutmak istiyorsanız, bunu aşağıdaki şekilde yapabilirsiniz:
ModelState.Remove(&amp;quot;FullName&amp;quot;); Özel Hata Mesajları # Özel Hata Mesajları sağlamak istiyorsanız, bunu şu şekilde yaparsınız:</description>
    </item>
    
  </channel>
</rss>

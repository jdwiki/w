<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Win32 API Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/winapi/</link>
    <description>Recent content in Win32 API Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/winapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Win32 API&#39;sini kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/winapi/win32-apisini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/win32-apisini-kullanmaya-baslama/</guid>
      <description>Selam Dünya # Microsoft Windows uygulamaları genellikle bir konsol uygulaması veya pencereli bir uygulama olarak yazılır (hizmetler ve eklentiler gibi başka türler de vardır). Programcı için fark, programcı tarafından sağlanan uygulama kaynağı için ana giriş noktası arayüzündeki farktır.
Bir C veya C++ uygulaması başladığında, [yürütülebilir yükleyici][1] tarafından kullanılan yürütülebilir giriş noktası, derleyici tarafından sağlanan Çalışma Zamanıdır. Yürütülebilir yükleyici yürütülebilir dosyayı okur, gereken görüntüde herhangi bir düzeltmeyi gerçekleştirir ve ardından bir C veya C++ programı için derleyici tarafından sağlanan Çalışma Zamanı olan yürütülebilir giriş noktasını çağırır.</description>
    </item>
    
    <item>
      <title>Hata raporlama ve işleme</title>
      <link>https://www.wikiod.com/tr/winapi/hata-raporlama-ve-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/hata-raporlama-ve-isleme/</guid>
      <description>Her iş parçacığının kendi son hata kodu olacaktır. Windows API, çağıran iş parçacığındaki son hata kodunu ayarlayacaktır.
Bir Windows API işlevinin dönüş değerini kontrol ettikten hemen sonra GetLastError işlevini her zaman çağırmalısınız.
Windows API işlevlerinin çoğu, başarısız olduklarında son hata kodunu ayarlar. Bazıları başarılı olduklarında son hata kodunu da ayarlayacaktır. Son hata kodunu ayarlamayan bir dizi işlev vardır. Her zaman Windows API işlevinin belgelerine bakın.
Bir hata kodunun açıklamasını almak için &amp;ldquo;FormatMessage&amp;rdquo; işlevini kullanırken &amp;ldquo;FORMAT_MESSAGE_IGNORE_INSERTS&amp;rdquo; olmadan &amp;ldquo;FORMAT_MESSAGE_FROM_SYSTEM&amp;rdquo; kullanmak güvenli değildir.</description>
    </item>
    
    <item>
      <title>Ansi ve Geniş karakter işlevleri</title>
      <link>https://www.wikiod.com/tr/winapi/ansi-ve-genis-karakter-islevleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/ansi-ve-genis-karakter-islevleri/</guid>
      <description>Giriiş # Argüman olarak bir veya daha fazla dize alan işlevler için Windows API belgeleri genellikle şöyle görünür:
BOOL WINAPI CopyFile( _In_ LPCTSTR lpExistingFileName, _In_ LPCTSTR lpNewFileName, _In_ BOOL bFailIfExists ); İki dize parametresinin veri türü birkaç bölümden oluşur:
LP = Uzun işaretçi C = sabit T = TCHAR STR = dize Şimdi &amp;lsquo;TCHAR&amp;rsquo; ne anlama geliyor? Bu, programın derlenmesi için seçilen platforma bağlıdır.
&amp;lsquo;CopyFile&amp;rsquo;ın kendisi sadece bir makrodur ve şöyle bir tanımlıdır:</description>
    </item>
    
    <item>
      <title>Süreç ve İplik Yönetimi</title>
      <link>https://www.wikiod.com/tr/winapi/surec-ve-iplik-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/surec-ve-iplik-yonetimi/</guid>
      <description>Bir işlem oluşturun ve çıkış kodunu kontrol edin # Bu örnek, Not Defteri&amp;rsquo;ni başlatır, kapanmasını bekler, ardından çıkış kodunu alır.
#include &amp;lt;Windows.h&amp;gt; int main() { STARTUPINFOW si = { 0 }; si.cb = sizeof(si); PROCESS_INFORMATION pi = { 0 }; // Create the child process BOOL success = CreateProcessW( L&amp;quot;C:\\Windows\\system32\\notepad.exe&amp;quot;, // Path to executable NULL, // Command line arguments NULL, // Process attributes NULL, // Thread attributes FALSE, // Inherit handles 0, // Creation flags NULL, // Environment NULL, // Working directory &amp;amp;si, // Startup info &amp;amp;pi); // Process information if (success) { // Wait for the process to exit WaitForSingleObject(pi.</description>
    </item>
    
    <item>
      <title>Windows Alt Sınıflandırması</title>
      <link>https://www.wikiod.com/tr/winapi/windows-alt-snflandrmas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/windows-alt-snflandrmas/</guid>
      <description>Pencere alt sınıflandırması, standart pencere prosedürüne bağlanmanın ve varsayılan davranışını değiştirmenin veya genişletmenin bir yoludur. Bir uygulama, pencerenin orijinal pencere prosedürünü yeni bir pencere prosedürü ile değiştirerek bir pencereyi alt sınıflar. Bu yeni pencere prosedürü, pencereye gönderilen veya gönderilen tüm mesajları alır.
Sözdizimi # BOOL SetWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DWORD_PTR RefData); BOOL RemoveWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId); BOOL GetWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DORD_PTR* RefData); LRESULT DefSubclassProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); Parametreler # Parametre Ayrıntı hWnd Alt sınıfa açılan pencerenin tanıtıcısı.</description>
    </item>
    
    <item>
      <title>Pencere mesajları</title>
      <link>https://www.wikiod.com/tr/winapi/pencere-mesajlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/pencere-mesajlar/</guid>
      <description>Sözdizimi # #include &amp;lt;windows.h&amp;gt; BOOL WINAPI DestroyWindow(HWND hwnd); VOID WINAPI PostQuitMessage(int çıkış kodu); BOOL WINAPI MoveWindow(HWND hwnd, int x, int y, int cx, int cy, BOOL bRepaint); WM_DESTROY # Bu mesaj, bir pencere yok edildiğinde pencere prosedürünüze gönderilir. Pencere ekrandan kaldırıldıktan sonra gönderilir. Çoğu uygulama, WM_CREATE içinde elde edilen bellek veya tanıtıcı gibi kaynakları serbest bırakır. Bu mesajı ele alırsanız, 0 döndürün.
LRESULT CALLBACK winproc(HWND hwnd, UINT wm, WPARAM wp, LPARAM lp) { static char *text; switch (wm) { case WM_CREATE: text = malloc(256); /* use the allocated memory */ return 0; case WM_CLOSE: switch (MessageBox(hwnd, &amp;quot;Save changes?</description>
    </item>
    
    <item>
      <title>pencerelerle uğraşmak</title>
      <link>https://www.wikiod.com/tr/winapi/pencerelerle-ugrasmak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/pencerelerle-ugrasmak/</guid>
      <description>Pencere oluşturma # #define UNICODE #define _UNICODE #include &amp;lt;windows.h&amp;gt; #include &amp;lt;tchar.h&amp;gt; const TCHAR CLSNAME[] = TEXT(&amp;quot;helloworldWClass&amp;quot;); LRESULT CALLBACK winproc(HWND hwnd, UINT wm, WPARAM wp, LPARAM lp); int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, PTSTR cmdline, int cmdshow) { WNDCLASSEX wc = { }; MSG msg; HWND hwnd; wc.cbSize = sizeof (wc); wc.style = 0; wc.lpfnWndProc = winproc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInst; wc.hIcon = LoadIcon (NULL, IDI_APPLICATION); wc.</description>
    </item>
    
    <item>
      <title>Dosya yönetimi</title>
      <link>https://www.wikiod.com/tr/winapi/dosya-yonetimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/dosya-yonetimi/</guid>
      <description>Bir dosya oluşturun ve ona yazın # Bu örnek, &amp;ldquo;NewFile.txt&amp;rdquo; adında yeni bir dosya oluşturur ve ardından &amp;ldquo;Merhaba Dünya!&amp;rdquo; yazar. onun vücuduna. Dosya zaten mevcutsa, &amp;lsquo;CreateFile&amp;rsquo; başarısız olur ve hiçbir veri yazılmaz. Dosya zaten mevcutsa işlevin başarısız olmasını istemiyorsanız CreateFile dokümantasyonu içindeki &amp;lsquo;dwCreationDisposition&amp;rsquo; parametresine bakın.
#include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; int main() { // Open a handle to the file HANDLE hFile = CreateFile( L&amp;quot;C:\\NewFile.txt&amp;quot;, // Filename GENERIC_WRITE, // Desired access FILE_SHARE_READ, // Share mode NULL, // Security attributes CREATE_NEW, // Creates a new file, only if it doesn&#39;t already exist FILE_ATTRIBUTE_NORMAL, // Flags and attributes NULL); // Template file handle if (hFile == INVALID_HANDLE_VALUE) { // Failed to open/create file return 2; } // Write data to the file std::string strText = &amp;quot;Hello World!</description>
    </item>
    
    <item>
      <title>Windows Hizmetleri</title>
      <link>https://www.wikiod.com/tr/winapi/windows-hizmetleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/windows-hizmetleri/</guid>
      <description>Bir hizmetin kurulu olup olmadığını kontrol edin # Bu örnek, bir hizmetin zaten var olup olmadığını (yani makinede yüklü) nasıl kontrol edebileceğinizi gösterir. Bu kod yalnızca gerekli olan en düşük ayrıcalıkları gerektirir, böylece hangi güvenlik düzeyinde çalışıyor olursa olsun her işlem denetimi gerçekleştirebilir.
#define UNICODE #define _UNICODE #include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; enum Result { unknown, serviceManager_AccessDenied, serviceManager_DatabaseDoesNotExist, service_AccessDenied, service_InvalidServiceManagerHandle, service_InvalidServiceName, service_DoesNotExist, service_Exist }; Result ServiceExists(const std::wstring &amp;amp;serviceName) { Result r = unknown; // Get a handle to the SCM database SC_HANDLE manager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, GENERIC_READ); if (manager == NULL) { DWORD lastError = GetLastError(); // At this point, we can return directly because no handles need to be closed.</description>
    </item>
    
    <item>
      <title>MSDN Belgelerini Kullanma</title>
      <link>https://www.wikiod.com/tr/winapi/msdn-belgelerini-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winapi/msdn-belgelerini-kullanma/</guid>
      <description>Windows API çok geniştir ve birçok özellik içerir. API&amp;rsquo;nin boyutu, hiç kimsenin tamamını bilemeyecek kadar büyüktür. StackOverflow gibi birçok kaynak varken, resmi belgelerin yerini hiçbir şey tutamaz.
Dokümantasyon Örnekleri:
Konuya Genel Bakış: Masaüstü Pencere Yöneticisi Performans Konuları ve En İyi Uygulamalar Örnekler: İkonik Küçük Resmi ve Canlı Önizleme Bit Eşlemini Özelleştirin İşlevler: DwmSetIconicThumbnail işlevi Mevcut Belge Türleri # MSDN kitaplığı, özellikleri uygulamak için kullanılabilecek birkaç farklı türde belge içerir.
Konuya Genel Bakış Bunlar, bir API hakkında genel bir anlayış sağlamayı amaçlayan konulara genel bakışlardır.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numpy Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/numpy/</link>
    <description>Recent content in numpy Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/numpy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>numpy&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/numpy/numpyyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/numpyyi-kullanmaya-baslama/</guid>
      <description>Temel İçe Aktarma # Herhangi bir bölümünü kullanmak için numpy modülünü içe aktarın.
import numpy as np Çoğu örnek, numpy&amp;rsquo;nin kısaltması olarak &amp;ldquo;np&amp;quot;yi kullanır. Kod örneklerinde &amp;ldquo;np&amp;quot;nin &amp;ldquo;numpy&amp;rdquo; anlamına geldiğini varsayın.
x = np.array([1,2,3,4]) Linux&amp;rsquo;ta kurulum # NumPy, çoğu popüler Linux dağıtımının varsayılan depolarında bulunur ve bir Linux dağıtımındaki paketlerin genellikle kurulduğu şekilde kurulabilir.
Bazı Linux dağıtımlarının Python 2.x ve Python 3.x için farklı NumPy paketleri vardır. Ubuntu ve Debian&amp;rsquo;da, APT paket yöneticisini kullanarak sistem düzeyinde &amp;ldquo;numpy&amp;quot;yi kurun:</description>
    </item>
    
    <item>
      <title>diziler</title>
      <link>https://www.wikiod.com/tr/numpy/diziler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/diziler/</guid>
      <description>N-boyutlu diziler veya &amp;ldquo;ndarrays&amp;rdquo;, aynı veri türündeki öğeleri depolamak için kullanılan numpy&amp;rsquo;nin temel nesnesidir. Sıradan Python dizilerinden daha üstün olan verimli bir veri yapısı sağlarlar.
Mümkün olduğunda, veriler üzerindeki işlemleri diziler ve vektör işlemleri cinsinden ifade edin. Vektör işlemleri, döngüler için eşdeğerden çok daha hızlı yürütülür
Dizi Erişimi # Dilim sözdizimi &amp;ldquo;i:j:k&amp;rdquo; şeklindedir; burada &amp;ldquo;i&amp;rdquo; başlangıç ​​dizinidir (dahil), &amp;ldquo;j&amp;rdquo; durma dizinidir (hariç) ve &amp;ldquo;k&amp;rdquo; adım boyutudur. Diğer python veri yapıları gibi, ilk elemanın indeksi 0&amp;rsquo;dır:</description>
    </item>
    
    <item>
      <title>numpy.dot</title>
      <link>https://www.wikiod.com/tr/numpy/numpydot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/numpydot/</guid>
      <description>Sözdizimi # numpy.dot(a, b, çıkış=Yok) Parametreler # İsim Ayrıntılar bir numpy dizisi b numpy dizisi dışarı numpy dizisi numpy.dot
a ve b&amp;rsquo;nin nokta çarpımını döndürür. a ve b&amp;rsquo;nin her ikisi de skaler veya her ikisi de 1-D dizilerse, o zaman bir skaler döndürülür; aksi takdirde bir dizi döndürülür. Dışarı verilirse, iade edilir.
Matris çarpımı # Nokta fonksiyonu ile matris çarpımı iki eşdeğer şekilde yapılabilir. Bunun bir yolu, numpy.ndarray öğesinin nokta üye işlevini kullanmaktır.</description>
    </item>
    
    <item>
      <title>Rastgele veri oluşturma</title>
      <link>https://www.wikiod.com/tr/numpy/rastgele-veri-olusturma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/rastgele-veri-olusturma/</guid>
      <description>NumPy&amp;rsquo;nin &amp;ldquo;rastgele&amp;rdquo; modülü, istenen şekil ve dağılıma sahip rastgele veriler üretmek için uygun yöntemler sağlar.
İşte resmi belgeler.
Belirli dağılımlardan alınan rastgele sayılar üretme # Normal (gauss) bir dağılımdan örnekler çizin
# Generate 5 random numbers from a standard normal distribution # (mean = 0, standard deviation = 1) np.random.randn(5) # Out: array([-0.84423086, 0.70564081, -0.39878617, -0.82719653, -0.4157447 ]) # This result can also be achieved with the more general np.random.normal np.</description>
    </item>
    
    <item>
      <title>Basit Doğrusal Regresyon</title>
      <link>https://www.wikiod.com/tr/numpy/basit-dogrusal-regresyon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/basit-dogrusal-regresyon/</guid>
      <description>Bir dizi veri noktasına bir çizgi (veya başka bir işlev) uydurma.
np.polyfit&amp;rsquo;i kullanma # Daha sonra $f(x) = m x + c$ düz çizgisine sığdıracağımız bir veri kümesi yaratırız.
npoints = 20 slope = 2 offset = 3 x = np.arange(npoints) y = slope * x + offset + np.random.normal(size=npoints) p = np.polyfit(x,y,1) # Last argument is degree of polynomial Ne yaptığımızı görmek için:
import matplotlib.pyplot as plt f = np.</description>
    </item>
    
    <item>
      <title>np.linalg ile lineer cebir</title>
      <link>https://www.wikiod.com/tr/numpy/nplinalg-ile-lineer-cebir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/nplinalg-ile-lineer-cebir/</guid>
      <description>1.8 sürümünden itibaren, &amp;rsquo;np.linalg&amp;rsquo; içindeki rutinlerin birçoğu bir matris &amp;lsquo;yığını&amp;rsquo; üzerinde çalışabilir. Diğer bir deyişle, rutin, birlikte istiflendiklerinde birden çok matris için sonuçları hesaplayabilir. Örneğin, buradaki &amp;ldquo;A&amp;rdquo;, yığılmış iki 3&amp;rsquo;e 3 matris olarak yorumlanır:
np.random.seed(123) A = np.random.rand(2,3,3) b = np.random.rand(2,3) x = np.linalg.solve(A, b) print np.dot(A[0,:,:], x[0,:]) # array([ 0.53155137, 0.53182759, 0.63440096]) print b[0,:] # array([ 0.53155137, 0.53182759, 0.63440096]) Resmi &amp;ldquo;np&amp;rdquo; belgeleri bunu &amp;ldquo;a : (&amp;hellip;, M, M) array_like&amp;rdquo; gibi parametre özellikleri aracılığıyla belirtir.</description>
    </item>
    
    <item>
      <title>numpy.cross</title>
      <link>https://www.wikiod.com/tr/numpy/numpycross/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/numpycross/</guid>
      <description>Sözdizimi # numpy.cross(a, b) # a ve b&amp;rsquo;nin çapraz çarpımı (veya a ve b içindeki vektörler) numpy.cross(a, b, axisa=-1) a içindeki vektörlerin b ile çapraz çarpımı, s.t. a&amp;rsquo;daki vektörler axisa ekseni boyunca düzenlenir numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1) # a ve b içindeki vektörlerin çapraz çarpımı, çıktı vektörleri *axisc tarafından belirtilen eksen boyunca düzenlenir * numpy.cross(a, b, axis=Hiçbiri) # a ve b içindeki vektörlerin, a, b içindeki vektörlerin ve eksen boyunca düzenlenmiş çıktıdaki vektörlerin çapraz çarpımı Parametreler # Sütun Sütun bir,b En basit kullanımda, &amp;ldquo;a&amp;rdquo; ve &amp;ldquo;b&amp;rdquo; iki 2 veya 3 elemanlı vektördür.</description>
    </item>
    
    <item>
      <title>numpy ile dosya IO</title>
      <link>https://www.wikiod.com/tr/numpy/numpy-ile-dosya-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/numpy-ile-dosya-io/</guid>
      <description>Tutarlı yapıya sahip metin dosyalarından sayısal veri yükleme # &amp;rsquo;np.loadtxt&amp;rsquo; işlevi csv benzeri dosyaları okumak için kullanılabilir:
# File: # # Col_1 Col_2 # 1, 1 # 2, 4 # 3, 9 np.loadtxt(&#39;/path/to/dir/csvlike.txt&#39;, delimiter=&#39;,&#39;, comments=&#39;#&#39;) # Output: # array([[ 1., 1.], # [ 2., 4.], # [ 3., 9.]]) Aynı dosya, &amp;ldquo;np.fromregex&amp;rdquo; ile normal bir ifade kullanılarak okunabilir:
np.fromregex(&#39;/path/to/dir/csvlike.txt&#39;, r&#39;(\d+),\s(\d+)&#39;, np.int64) # Output: # array([[1, 1], # [2, 4], # [3, 9]]) İkili dosyaları kullanarak numpy dizilerini kaydetme ve yükleme # x = np.</description>
    </item>
    
    <item>
      <title>alt sınıflama ndarray</title>
      <link>https://www.wikiod.com/tr/numpy/alt-snflama-ndarray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/alt-snflama-ndarray/</guid>
      <description>Sözdizimi # def __array_prepare__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = Yok) -&amp;gt; ndarray: # bir ufunc&#39;a giderken çağrılır
def __array_wrap__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = Yok) -&amp;gt; ndarray: # bir ufunc çıkışında çağrılır
`array_priority: int #, bir ufunc çağrıldığında yukarıdaki yöntemlerin hangi argümanın çağrılacağını belirlemek için kullanılır&#39;
`def array_finalize(self, obj: ndarray): # bu sınıfın yeni bir örneği ortaya çıktığında, bu new dışındaki yollarla olsa bile çağrılır.
Dizilerde fazladan bir özelliği izleme # class MySubClass(np.</description>
    </item>
    
    <item>
      <title>Boole İndeksleme</title>
      <link>https://www.wikiod.com/tr/numpy/boole-indeksleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/numpy/boole-indeksleme/</guid>
      <description>Boole dizisi oluşturma # Dizi oluşturulurken dtype=bool kullanılarak manuel olarak bir boolean dizisi oluşturulabilir. &amp;ldquo;0&amp;rdquo;, &amp;ldquo;Yok&amp;rdquo;, &amp;ldquo;Yanlış&amp;rdquo; veya boş dizeler dışındaki değerler Doğru olarak kabul edilir.
import numpy as np bool_arr = np.array([1, 0.5, 0, None, &#39;a&#39;, &#39;&#39;, True, False], dtype=bool) print(bool_arr) # output: [ True True False False True False True False] Alternatif olarak, diziler ve skalerler arasında veya aynı şekle sahip diziler arasında karşılaştırmalar yapıldığında numpy otomatik olarak bir boole dizisi oluşturur.</description>
    </item>
    
  </channel>
</rss>

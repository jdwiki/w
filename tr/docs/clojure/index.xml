<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/clojure/</link>
    <description>Recent content in clojure Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure&#39;a başlarken</title>
      <link>https://www.wikiod.com/tr/clojure/clojurea-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/clojurea-baslarken/</guid>
      <description>Kurulum ve Kurulum # Seçenek 1: Leiningen # JDK 6 veya daha yenisini gerektirir.
Clojure&amp;rsquo;u kullanmaya başlamanın en kolay yolu, Clojure projelerini yönetmek için fiili standart araç olan Leiningen&amp;rsquo;i indirip kurmak ve ardından bir REPL açmak için lein repl komutunu çalıştırmaktır.
Linux # curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein &amp;gt; ~/bin/lein export PATH=$PATH:~/bin chmod 755 ~/bin/lein OS X # Yukarıdaki Linux adımlarını izleyin veya macOS paket yöneticileri ile kurun.
Homebrew ile yükleyin # brew install leiningen [MacPorts] ile yükleyin # İlk önce Clojure&amp;rsquo;u yükleyin</description>
    </item>
    
    <item>
      <title>Clojure yıkımı</title>
      <link>https://www.wikiod.com/tr/clojure/clojure-ykm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/clojure-ykm/</guid>
      <description>Bir haritayı yok etme # Bir haritayı şu şekilde yok edebilirsiniz:
(def my-map {:a 1 :b 2 :c 3}) Ardından, örneğin, bir let bloğu içinde, aşağıdaki gibi çok kısa bir şekilde haritadan değerleri çıkarabilirsiniz:
(let [{x :a y :c} my-map] (println &amp;quot;:a val:&amp;quot; x &amp;quot;, :c val: &amp;quot; y)) ;; :a val: 1 , :c val: 3 Her eşlemede çıkarılan değerlerin solda ve ilişkili oldukları anahtarların sağda olduğuna dikkat edin.</description>
    </item>
    
    <item>
      <title>Geliştirme ortamınızı ayarlama</title>
      <link>https://www.wikiod.com/tr/clojure/gelistirme-ortamnz-ayarlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/gelistirme-ortamnz-ayarlama/</guid>
      <description>Emac&amp;rsquo;lar # Emacs&amp;rsquo;ı Clojure ile çalışacak şekilde ayarlamak için melpa&amp;rsquo;dan clojure-mode ve cider paketini yükleyin:
M-x package-install [RET] clojure-mode [RET] M-x package-install [RET] cider [RET] Şimdi bir &amp;ldquo;.clj&amp;rdquo; dosyası açtığınızda, bir REPL&amp;rsquo;ye bağlanmak için &amp;ldquo;M-x elma şarabı-jack-in&amp;quot;i çalıştırın. Alternatif olarak, içindeki herhangi bir dosyayı ziyaret etmek zorunda kalmadan bir &amp;ldquo;lein&amp;rdquo; veya &amp;ldquo;önyükleme&amp;rdquo; projesinin adını belirtmek için &amp;ldquo;C-u M-x&amp;rdquo; (elma şarabı-jack-in) kullanabilirsiniz. Artık dosyanızdaki ifadeleri C-x C-e kullanarak değerlendirebilmelisiniz.
LISP benzeri dillerde kod düzenlemek, ebeveyn farkındalığına sahip bir düzenleme eklentisi ile çok daha rahattır.</description>
    </item>
    
    <item>
      <title>clojure.spec</title>
      <link>https://www.wikiod.com/tr/clojure/clojurespec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/clojurespec/</guid>
      <description>Sözdizimi # :: ad alanı nitelikli bir anahtar kelimenin kısaltmasıdır. Örneğin. kullanıcı ad alanındaysak: ::foo, :user/foo&amp;rsquo;nun kısaltmasıdır #: veya # - bir haritadaki anahtarları bir ad alanına göre nitelemek için harita değişmez sözdizimi Clojure spec, sürüm 1.9&amp;rsquo;dan itibaren clojure için yeni bir şartname/sözleşme kitaplığıdır.
Özellikler, belgelere dahil edilme, veri doğrulama, test için veri oluşturma ve daha fazlası dahil olmak üzere çeşitli şekillerde kullanılır.
Belirtim olarak bir yüklemi kullanma # Herhangi bir yüklem işlevi belirtim olarak kullanılabilir.</description>
    </item>
    
    <item>
      <title>Koleksiyonlar ve Diziler</title>
      <link>https://www.wikiod.com/tr/clojure/koleksiyonlar-ve-diziler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/koleksiyonlar-ve-diziler/</guid>
      <description>Sözdizimi # &#39;() → () &#39;(1 2 3 4 5) → (1 2 3 4 5) &#39;(1 foo 2 bar 3) → (1 &#39;foo 2 &#39;bar 3) (list 1 2 3 4 5) → (1 2 3 4 5) (list* [1 2 3 4 5]) → (1 2 3 4 5) [] → [] [1 2 3 4 5] → [1 2 3 4 5] (vektör 1 2 3 4 5) → [1 2 3 4 5] (vec &#39;(1 2 3 4 5)) → [1 2 3 4 5] {} =&amp;gt; {} {:keyA 1 :keyB 2} → {:keyA 1 :keyB 2} {:keyA 1, :keyB 2} → {:keyA 1 :keyB 2} (hash-map :keyA 1 :keyB 2) → {:keyA 1 :keyB 2} (sorted-map 5 &amp;quot;beş&amp;quot; 1 &amp;quot;bir&amp;quot;) → {1 &amp;quot;bir&amp;quot; 5 &amp;quot;beş&amp;quot;} (sıra olarak kullanıldığında girişler anahtara göre sıralanır) #{} → #{} #{1 2 3 4 5} → #{4 3 2 5 1} (sırasız) (hash-set 1 2 3 4 5) → #{2 5 4 1 3} (sırasız) (sorted-set 2 5 4 3 1) → #{1 2 3 4 5} Listeler # Bir liste parantez içinde gösterilir:</description>
    </item>
    
    <item>
      <title>Web geliştirmeye başlarken</title>
      <link>https://www.wikiod.com/tr/clojure/web-gelistirmeye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/web-gelistirmeye-baslarken/</guid>
      <description>http-kit ile yeni Ring uygulaması oluşturun # Ring, Ruby&amp;rsquo;s Rack ve Python&amp;rsquo;un WSGI&amp;rsquo;sine benzer şekilde, clojure HTTP uygulamaları için fiili standart API&amp;rsquo;dir.
http-kit web sunucusu ile kullanacağız.
Yeni Leiningen projesi oluşturun:
lein new app myapp &amp;ldquo;project.clj&amp;rdquo; dosyasına http-kit bağımlılığı ekleyin:
:dependencies [[org.clojure/clojure &amp;quot;1.8.0&amp;quot;] [http-kit &amp;quot;2.1.18&amp;quot;]] http-kit için &amp;lsquo;:require&amp;rsquo; öğesini &amp;lsquo;core.clj&amp;rsquo; dosyasına ekleyin:
(ns test.core (:gen-class) (:require [org.httpkit.server :refer [run-server]])) Halka istek işleyicisini tanımlayın. İstek işleyiciler, istekten yanıta yalnızca işlevlerdir ve yanıt yalnızca bir haritadır:</description>
    </item>
    
    <item>
      <title>clojure.test</title>
      <link>https://www.wikiod.com/tr/clojure/clojuretest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/clojuretest/</guid>
      <description>dır-dir # is makrosu, clojure.test kütüphanesinin çekirdeğidir. Gövde ifadesinin değerini döndürür, ifade yanlış bir değer döndürürse bir hata mesajı yazdırır.
(defn square [x] (+ x x)) (require &#39;[clojure.test :as t]) (t/is (= 0 (square 0))) ;;=&amp;gt; true (t/is (= 1 (square 1))) ;; ;; FAIL in () (foo.clj:1) ;; expected: (= 1 (square 1)) ;; actual: (not (= 1 2)) ;;=&amp;gt; false Her testi veya tüm testleri kullanım fikstürleriyle sarın # &amp;lsquo;use-fixtures&amp;rsquo;, testten önce ve sonra çalışan kodla ad alanındaki her &amp;lsquo;deftest&amp;rsquo;i sarmaya izin verir.</description>
    </item>
    
    <item>
      <title>Makrolar</title>
      <link>https://www.wikiod.com/tr/clojure/makrolar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/makrolar/</guid>
      <description>Sözdizimi # Macroexpand örneğinde kullanılan ``` sembolü, quote operatörü için sadece sözdizimsel şekerdir. Bunun yerine (macroexpand (quote (infix 1 + 2))) yazabilirdiniz. Makrolar yalnızca derleme zamanında, yani bir [okuma-değerlendirme-baskı-döngüsü] içindeki &amp;lsquo;değerlendirme&amp;rsquo; adımı sırasında çalışan işlevlerdir.
Okuyucu makroları, derleme zamanında değil, okuma zamanında genişletilen başka bir makro biçimidir.
Makro tanımlarken en iyi uygulama.
alfa yeniden adlandırma, makro genişlediğinden ad çakışması ortaya çıkabilir. Bağlama çakışmasını makro kullanırken çözmek çok kolay değildir. Bu nedenle, bir makro kapsama alanına bir bağlama eklediğinde, her sembolün sonunda &amp;ldquo;#&amp;rdquo; kullanılması zorunludur.</description>
    </item>
    
    <item>
      <title>core.match ile Desen Eşleştirme</title>
      <link>https://www.wikiod.com/tr/clojure/corematch-ile-desen-eslestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/corematch-ile-desen-eslestirme/</guid>
      <description>&amp;lsquo;core.match&amp;rsquo; kitaplığı, tembel kalıp eşleştirmeden &amp;ldquo;gereklilik&amp;rdquo; kavramını kullanan bir kalıp eşleştirme derleme algoritması uygular.
Eşleşen Değişmezler # (let [x true y true z true] (match [x y z] [_ false true] 1 [false true _ ] 2 [_ _ false] 3 [_ _ true] 4)) ;=&amp;gt; 4 Bir Vektörü Eşleştirme # (let [v [1 2 3]] (match [v] [[1 1 1]] :a0 [[1 _ 1]] :a1 [[1 2 _]] :a2)) ;; _ is used for wildcard matching ;=&amp;gt; :a2 Bir Haritayı Eşleştirme # (let [x {:a 1 :b 1}] (match [x] [{:a _ :b 2}] :a0 [{:a 1 :b _}] :a1 [{:x 3 :y _ :z 4}] :a2)) ;=&amp;gt; :a1 Değişmez bir sembolü eşleştirme # (match [[&#39;asymbol]] [[&#39;asymbol]] :success) ;=&amp;gt; :success </description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/clojure/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/clojure/fonksiyonlar/</guid>
      <description>Fonksiyonları Tanımlama # Fonksiyonlar beş bileşenle tanımlanır: # &amp;lsquo;defn&amp;rsquo; anahtar sözcüğünü içeren başlık, işlevin adı.
(defn welcome ....) İşlevin ne yaptığını açıklayan ve belgeleyen isteğe bağlı bir Belge Dizisi.
(defn welcome &amp;quot;Return a welcome message to the world&amp;quot; ...) Parantez içinde listelenen parametreler.
(defn welcome &amp;quot;Return a welcome message&amp;quot; [name] ...) İşlevin gerçekleştirdiği prosedürleri açıklayan gövde.
(defn welcome &amp;quot;Return a welcome message&amp;quot; [name] (str &amp;quot;Hello, &amp;quot; name &amp;quot;!&amp;quot;)) Onu aramak:</description>
    </item>
    
  </channel>
</rss>

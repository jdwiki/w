<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AngularJS Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/angularjs/</link>
    <description>Recent content in AngularJS Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AngularJS&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/angularjs/angularjsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/angularjsyi-kullanmaya-baslama/</guid>
      <description>Başlarken # Yeni bir HTML dosyası oluşturun ve aşağıdaki içeriği yapıştırın:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, Angular&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-init=&amp;quot;name=&#39;World&#39;&amp;quot;&amp;gt; &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt; &amp;lt;input ng-model=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;span&amp;gt;Hello, {{ name }}!&amp;lt;/span&amp;gt; &amp;lt;p ng-bind=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Canlı demo
Dosyayı bir tarayıcı ile açtığınızda, Merhaba, Dünya! metninin takip ettiği bir giriş alanı göreceksiniz. Girişteki değeri düzenlemek, tüm sayfayı yenilemeye gerek kalmadan metni gerçek zamanlı olarak güncelleyecektir.
Açıklama:
Angular çerçevesini bir İçerik Dağıtım Ağından yükleyin.</description>
    </item>
    
    <item>
      <title>Profil Oluşturma ve Performans</title>
      <link>https://www.wikiod.com/tr/angularjs/profil-olusturma-ve-performans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/profil-olusturma-ve-performans/</guid>
      <description>7 Basit Performans İyileştirmeleri # 1) ng-repeat&amp;rsquo;i idareli kullanın
Görünümlerde ng-repeat kullanılması, özellikle iç içe ng-repeat&amp;lsquo;ler olduğunda genellikle düşük performansa neden olur.
Bu çok yavaş!
&amp;lt;div ng-repeat=&amp;quot;user in userCollection&amp;quot;&amp;gt; &amp;lt;div ng-repeat=&amp;quot;details in user&amp;quot;&amp;gt; {{details}} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Mümkün olduğunca iç içe tekrarlardan kaçınmaya çalışın. &amp;rsquo;ng-repeat&amp;rsquo; performansını artırmanın bir yolu, &amp;lsquo;$index ile izle&amp;rsquo; (veya başka bir kimlik alanı) kullanmaktır. Varsayılan olarak, &amp;ldquo;ng-repeat&amp;rdquo; tüm nesneyi izler. &amp;ldquo;Track by&amp;rdquo; ile, Angular nesneyi yalnızca &amp;ldquo;$index&amp;rdquo; veya nesne kimliği ile izler.</description>
    </item>
    
    <item>
      <title>Özel Direktifler</title>
      <link>https://www.wikiod.com/tr/angularjs/ozel-direktifler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/ozel-direktifler/</guid>
      <description>Burada AngularJS&amp;rsquo;nin Yönergeler özelliği hakkında bilgi edineceksiniz. Aşağıda Direktiflerin ne olduğu ile ilgili bilgileri ve bunların nasıl kullanılacağına ilişkin Temel ve İleri Düzey örnekler bulacaksınız.
Parametreler # parametre Ayrıntılar kapsam Direktifin kapsamını ayarlamak için özellik. Yanlış, doğru veya izole bir kapsam olarak ayarlanabilir: { @, =, &amp;lt;, &amp;amp; }. kapsam: sahte Yönerge ana kapsamı kullanır. Yönerge için kapsam oluşturulmadı. kapsam: doğru Yönerge, ana kapsamı prototip olarak yeni bir alt kapsam olarak devralır.</description>
    </item>
    
    <item>
      <title>Yerleşik yönergeler</title>
      <link>https://www.wikiod.com/tr/angularjs/yerlesik-yonergeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/yerlesik-yonergeler/</guid>
      <description>Açısal ifadeler - Metin ve Sayı # Bu örnek, giriş öğesi için type=&amp;quot;text&amp;quot; ve type=&amp;quot;number&amp;quot; kullanıldığında Angular ifadelerinin nasıl değerlendirildiğini gösterir. Aşağıdaki denetleyiciyi göz önünde bulundurun ve görüntüleyin:
Kontrolör
var app = angular.module(&#39;app&#39;, []); app.controller(&#39;ctrl&#39;, function($scope) { $scope.textInput = { value: &#39;5&#39; }; $scope.numberInput = { value: 5 }; }); Görüş
&amp;lt;div ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;ctrl&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;textInput.value&amp;quot;&amp;gt; {{ textInput.value + 5 }} &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;numberInput.value&amp;quot;&amp;gt; {{ numberInput.value + 5 }} &amp;lt;/div&amp;gt; text girişine bağlı bir ifadede + kullanıldığında, operatör dizgileri birleştirir (ilk örnek), ekranda * gösterilir.</description>
    </item>
    
    <item>
      <title>Kontrolörler</title>
      <link>https://www.wikiod.com/tr/angularjs/kontrolorler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/kontrolorler/</guid>
      <description>Sözdizimi # &amp;lt;htmlElement of-controller=&amp;ldquo;controllerName&amp;rdquo;&amp;gt; &amp;hellip; &amp;lt;/htmlElement&amp;gt; &amp;lt;script&amp;gt; app.controller(&amp;lsquo;controllerName&amp;rsquo;, controllerFunction); &amp;lt;/script&amp;gt; İlk Kumandanız # Bir denetleyici, kapsamı korumak ve bir sayfadaki belirli eylemleri işlemek için Angular&amp;rsquo;da kullanılan temel bir yapıdır. Her denetleyici bir HTML görünümüyle birleştirilir.
Aşağıda, bir Angular uygulaması için temel bir ortak bilgi tablosu verilmiştir:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&#39;MyFirstApp&#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First App&amp;lt;/title&amp;gt; &amp;lt;!-- angular source --&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.3/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- Your custom controller code --&amp;gt; &amp;lt;script src=&amp;quot;js/controllers.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div ng-controller=&amp;quot;MyController as mc&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{ mc.</description>
    </item>
    
    <item>
      <title>Bileşenler</title>
      <link>https://www.wikiod.com/tr/angularjs/bilesenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/bilesenler/</guid>
      <description>Parametreler # parametre Ayrıntılar = İki yönlü veri bağlama kullanmak için. Bu, bileşen kapsamınızdaki bu değişkeni güncellerseniz değişikliğin ana kapsama yansıtılacağı anlamına gelir. &amp;lt; Yalnızca bir üst kapsamdan bir değer okumak istediğimizde ve onu güncellemek istemediğimizde tek yönlü bağlamalar. @ Dize parametreleri. &amp;amp; Bileşeninizin ana kapsamına bir şey vermesi gerektiğinde geri aramalar için. - - LifeCycle Kancaları Ayrıntılar (angular.version &amp;gt;= 1.5.3 gerektirir) $onInit() Bir öğe üzerindeki tüm denetleyiciler oluşturulduktan ve bağlamaları başlatıldıktan sonra her denetleyicide çağrılır.</description>
    </item>
    
    <item>
      <title>$q hizmetiyle açısal sözler</title>
      <link>https://www.wikiod.com/tr/angularjs/q-hizmetiyle-acsal-sozler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/q-hizmetiyle-acsal-sozler/</guid>
      <description>$q.When() kullanarak basit değeri bir söze sarın # Tek ihtiyacınız olan değeri bir söze sarmaksa, buradaki gibi uzun sözdizimini kullanmanıza gerek yoktur:
//OVERLY VERBOSE var defer; defer = $q.defer(); defer.resolve([&#39;one&#39;, &#39;two&#39;]); return defer.promise; Bu durumda sadece şunu yazabilirsiniz:
//BETTER return $q.when([&#39;one&#39;, &#39;two&#39;]); $q.When ve takma adı $q.resolve # Değer olabilecek bir nesneyi veya bir (3. taraf) o zaman mümkün olan bir sözü $q sözüne sarar. Bu, bir vaat olabilecek veya olmayabilecek bir nesneyle uğraşırken veya söz, güvenilemeyecek bir kaynaktan geliyorsa kullanışlıdır.</description>
    </item>
    
    <item>
      <title>Form Doğrulama</title>
      <link>https://www.wikiod.com/tr/angularjs/form-dogrulama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/form-dogrulama/</guid>
      <description>Form ve Giriş Durumları # Açısal Formlar ve Girdiler, içeriği doğrularken yararlı olan çeşitli durumlara sahiptir.
Giriş Durumları
Devlet Açıklama $dokundu Alana dokunuldu &amp;ldquo;$el değmemiş&amp;rdquo; Alana dokunulmadı &amp;ldquo;$bozulmamış&amp;rdquo; Alan değiştirilmedi $kirli Alan değiştirildi $geçerli Alan içeriği geçerli $geçersiz Alan içeriği geçersiz Yukarıdaki durumların tümü boole özellikleridir ve doğru veya yanlış olabilir.
Bunlarla, bir kullanıcıya mesaj görüntülemek çok kolaydır.
&amp;lt;form name=&amp;quot;myForm&amp;quot; novalidate&amp;gt; &amp;lt;input name=&amp;quot;myName&amp;quot; ng-model=&amp;quot;myName&amp;quot; required&amp;gt; &amp;lt;span ng-show=&amp;quot;myForm.myName.$touched &amp;amp;&amp;amp; myForm.myName.$invalid&amp;quot;&amp;gt;This name is invalid&amp;lt;/span&amp;gt; &amp;lt;/form&amp;gt; Burada, bir formu değiştirmiş ancak geçersizse bir kullanıcıya bir mesaj görüntülemek için &amp;rsquo;ng-show&amp;rsquo; yönergesini kullanıyoruz.</description>
    </item>
    
    <item>
      <title>Birim testleri</title>
      <link>https://www.wikiod.com/tr/angularjs/birim-testleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/birim-testleri/</guid>
      <description>Bu konu, AngularJS&amp;rsquo;deki çeşitli yapıları test eden birim örnekleri sağlar. Birim testleri genellikle popüler bir davranışa dayalı test çerçevesi olan Jasmine kullanılarak yazılır. Açısal yapıları birim test ederken, birim testlerini çalıştırırken bağımlılık olarak ngMock eklemeniz gerekir.
Bir bileşeni test etme (1.5+) # Bileşen kodu:
angular.module(&#39;myModule&#39;, []).component(&#39;myComponent&#39;, { bindings: { myValue: &#39;&amp;lt;&#39; }, controller: function(MyService) { this.service = MyService; this.componentMethod = function() { return 2; }; } }); Test:
describe(&#39;myComponent&#39;, function() { var component; var MyServiceFake = jasmine.</description>
    </item>
    
    <item>
      <title>Hizmetler</title>
      <link>https://www.wikiod.com/tr/angularjs/hizmetler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angularjs/hizmetler/</guid>
      <description>angular.factory kullanarak hizmet oluşturma # Önce hizmeti tanımlayın (bu durumda fabrika modelini kullanır):
.factory(&#39;dataService&#39;, function() { var dataObject = {}; var service = { // define the getter method get data() { return dataObject; }, // define the setter method set data(value) { dataObject = value || {}; } }; // return the &amp;quot;service&amp;quot; object to expose the getter/setter return service; }) Artık, denetleyiciler arasında veri paylaşmak için hizmeti kullanabilirsiniz:</description>
    </item>
    
  </channel>
</rss>

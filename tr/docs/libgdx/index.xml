<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libgdx Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/libgdx/</link>
    <description>Recent content in libgdx Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/libgdx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>libgdx&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/libgdx/libgdxi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/libgdxi-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # LibGDX, basit bir Java programı yardımıyla oldukça basit bir kuruluma sahiptir. İndirmeyi burada bulabilirsiniz. Uygulamayı başlattığınızda, şöyle görünecektir: Not: Bu ekran görüntüsü Linux&amp;rsquo;ta alınmıştır ve Windows kurulumundan farklı olan yolu göstermektedir. Ancak form, bu kurulum uygulamasıyla uyumlu tüm işletim sistemlerinde aynıdır
Giriş kutuları # &amp;ldquo;Ad&amp;rdquo; giriş kutusunda, projeniz için oyunun adıdır. &amp;ldquo;Paket&amp;rdquo; giriş kutusu, ana sınıfınızın paketidir. &amp;ldquo;Oyun Sınıfı&amp;rdquo; giriş kutusu, oyununuz çalıştırıldığında çağrılan ana sınıftır. &amp;ldquo;Hedef&amp;rdquo; giriş kutusu, projenizin oluşturulacağı hedeftir.</description>
    </item>
    
    <item>
      <title>Ashley Varlık Sistemi</title>
      <link>https://www.wikiod.com/tr/libgdx/ashley-varlk-sistemi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/ashley-varlk-sistemi/</guid>
      <description>Ashley Entity System, LibGDX organizasyonu altında yönetilen ve oyun geliştirme için çok uygun olan bir Entity System kitaplığıdır. LibGDX yardımcı program sınıflarına bağlıdır, ancak bazı çalışmalarla LibGDX&amp;rsquo;e dayalı olmayan diğer Java oyun çerçeveleriyle birlikte kullanılabilir.
Varlık sistemleri, nesne sınıflarını kalıtım açısından zengin hale getirmek zorunda kalmadan büyük nesne kümelerine yönelik verileri ve işlevleri yönetmek için farklı bir yol sağlar.
Ashley&amp;rsquo;i kullanmak, Unity&amp;rsquo;nin sağladığı gibi, ancak oyun motoru yerine bir çerçeve kapsamında bir nesne modelleme yaklaşımı arayanlar için yararlı bir yaklaşım olabilir.</description>
    </item>
    
    <item>
      <title>Çoklu Çözünürlüğü Destekleme</title>
      <link>https://www.wikiod.com/tr/libgdx/coklu-cozunurlugu-destekleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/coklu-cozunurlugu-destekleme/</guid>
      <description>Görünüm Alanları # Libgdx, çoklu çözünürlükleri ve en boy oranlarını desteklemek için &amp;ldquo;Görüntü Alanları&amp;quot;nı kullanır. Birden çok çözünürlük ve en boy oranıyla başa çıkmak için farklı stratejiler kullanan birkaç &amp;ldquo;Görüntü Alanı&amp;rdquo; türü vardır. Bir &amp;ldquo;Viewport&amp;rdquo;, başlık altında bir &amp;ldquo;Kamera&amp;rdquo; kullanır ve &amp;ldquo;viewportHeight&amp;rdquo; ve &amp;ldquo;viewportWidth&amp;rdquo; özelliklerini yönetir. İsteğe bağlı olarak, yapıcısında &amp;ldquo;Görüntü Alanı&amp;quot;na bir &amp;ldquo;Kamera&amp;rdquo; verebilirsiniz, aksi takdirde varsayılan olarak bir &amp;ldquo;OrthographicCamera&amp;rdquo; kullanır:
private Viewport viewport; private Camera camera; public void create() { camera = new PerspectiveCamera(); viewport = new FitViewport(8f, 4.</description>
    </item>
    
    <item>
      <title>Oyuncuları sabit hızla yolda hareket ettirmek</title>
      <link>https://www.wikiod.com/tr/libgdx/oyuncular-sabit-hzla-yolda-hareket-ettirmek/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/oyuncular-sabit-hzla-yolda-hareket-ettirmek/</guid>
      <description>İki konum arasında basit hareket # Bunun için en iyi çözüm &amp;ldquo;eylemler&amp;rdquo; kullanmaktır. Scene2Dde bir aktöre yeni bir eylem eklemek için aramanız yeterlidir:
Action action = Actions.moveTo(x,y,duration); actorObject.addAction(action); X ve y&amp;rsquo;nin hedef konum ve süre olduğu yerde, bu hareketin saniye cinsinden hızıdır(&amp;lsquo;kayan&amp;rsquo;).
Bu eylemi (ve onun yanındaki aktörü) durdurmak istiyorsanız, şunu arayarak yapabilirsiniz:
actorObject.removeAction(action); veya aşağıdakileri arayarak tüm eylemleri kaldırabilirsiniz:
actorObject.clearActions(); Bu, eylem(ler)in çalışmasını hemen durduracaktır.
MoveTo eylemi, aktörün x ve y özelliğini manipüle eder, bu nedenle aktörü ekrana çizdiğinizde dokular çizmek için her zaman getX() ve getY() kullanın.</description>
    </item>
    
    <item>
      <title>Kutu2D</title>
      <link>https://www.wikiod.com/tr/libgdx/kutu2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/kutu2d/</guid>
      <description>Döşenmiş Haritadan Box2D Gövdeleri Oluşturun # Bir Döşemeli Harita (.tmx) içinde oluşturulan nesneler, aşağıdaki gibi Libgdx MapObject sınıfını kullanarak bir Box2D dünyasına gövdeler olarak yüklenebilir:
public void buildBuildingsBodies(TiledMap tiledMap, World world, String layer){ MapObjects objects = tiledMap.getLayers().get(layer).getObjects(); for (MapObject object: objects) { Rectangle rectangle = ((RectangleMapObject)object).getRectangle(); //create a dynamic within the world body (also can be KinematicBody or StaticBody BodyDef bodyDef = new BodyDef(); bodyDef.type = BodyDef.BodyType.DynamicBody; Body body = world.</description>
    </item>
    
    <item>
      <title>Yaşam döngüsü</title>
      <link>https://www.wikiod.com/tr/libgdx/yasam-dongusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/libgdx/yasam-dongusu/</guid>
      <description>Oluşturmak # Bu yöntem, Uygulama başlatıldığında bir kez çağrılır. Bu yöntemde kaynaklar yüklenmeli ve değişkenler başlatılmalıdır.
Oluşturun # Yöntem, her çerçeve olarak adlandırılır ve görüntülenmesi gerekenleri görüntülemek için kullanılır. Ayrıca kamera gibi güncellenmesi gerekebilecek değişkenleri/sınıfları güncellemek için de kullanılır.
Elden çıkarmak # Bu yöntem, uygulama yok edildiğinde çağrılır ve örneğin &amp;ldquo;Doku&amp;rdquo; veya &amp;ldquo;SpriteBatch&amp;rdquo; gibi tüm kaynakları boşaltmak için kullanılır. &amp;lsquo;Tek Kullanımlık&amp;rsquo; arabirimini uygularsa, bir nesnenin atılması gerektiğini bileceksiniz.
Duraklat # Bu yöntem, uygulama duraklatıldığında çağrılır.</description>
    </item>
    
  </channel>
</rss>

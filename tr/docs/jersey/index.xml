<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>forma Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/jersey/</link>
    <description>Recent content in forma Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/jersey/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jersey&#39;e başlarken</title>
      <link>https://www.wikiod.com/tr/jersey/jerseye-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jersey/jerseye-baslarken/</guid>
      <description>Jersey&amp;rsquo;deki CRUD İşlemleri örneği # Bu örnek, bir REST kaynağında CRUD işlemleri yaparken GET, POST, PUT ve DELETE HTTP Yöntemlerinin kullanımını gösterir.
Aşağıdaki yazılımları, çerçeveleri ve araçları kullanıyorum:
Jersey 2.25.1 JDK 1.7.x (Java 7) Tutulma IDE Kepler Apaçi Maven 3.3.9 Apaçi Tomcat 7.x Gerekli Jersey Başvurusunu Oluşturmak için lütfen aşağıdaki adımları izleyin
Adım 1: Eclipse IDE&amp;rsquo;de maven-archetype-webapp arketipini kullanarak Dosya-&amp;gt;Yeni-&amp;gt;Maven Projesi&amp;rsquo;ni seçerek yeni bir maven projesi oluşturun
Adım 2: Projenin pom.</description>
    </item>
    
    <item>
      <title>Jersey ile Bağımlılık Enjeksiyonu</title>
      <link>https://www.wikiod.com/tr/jersey/jersey-ile-bagmllk-enjeksiyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jersey/jersey-ile-bagmllk-enjeksiyonu/</guid>
      <description>Jersey&amp;rsquo;nin HK2&amp;rsquo;sini kullanarak Temel Bağımlılık Enjeksiyonu # Jersey (2), bağımlılık ekleme (DI) sistemi olarak HK2 kullanır. Diğer enjeksiyon sistemlerini de kullanabiliriz ancak alt yapısı HK2 ile oluşturulmuş ve bizim uygulamalarımızda da kullanmamıza izin veriyor.
Jersey ile basit bağımlılık enjeksiyonunu ayarlamak sadece birkaç satır kod alır. Örneğin, kaynaklarımıza enjekte etmek istediğimiz bir hizmetimiz olduğunu varsayalım.
public class GreetingService { public String getGreeting(String name) { return &amp;quot;Hello &amp;quot; + name + &amp;quot;!&amp;quot;; } } Ve bu hizmeti bir Jersey kaynağına enjekte etmek istiyoruz.</description>
    </item>
    
    <item>
      <title>Spring Boot&#39;u Jersey ile Kullanma</title>
      <link>https://www.wikiod.com/tr/jersey/spring-bootu-jersey-ile-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jersey/spring-bootu-jersey-ile-kullanma/</guid>
      <description>Spring Boot ve Jersey ile Basit Uygulama # Spring Boot, Spring uygulamaları için bir önyükleme çerçevesidir. Jersey ile entegrasyon için de kesintisiz desteğe sahiptir. Bunun avantajlarından biri (Jersey kullanıcısı açısından), Spring&amp;rsquo;in geniş ekosistemine erişiminiz olmasıdır.
Başlamak için yeni bir standalone (wepapp olmayan) Maven projesi oluşturun. Bir web uygulaması da oluşturabiliriz, ancak bu kılavuz için sadece bağımsız bir uygulama kullanacağız. Projeyi oluşturduktan sonra, pom.xml dosyanıza aşağıdakini ekleyin.
&amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Jersey MVC Desteği</title>
      <link>https://www.wikiod.com/tr/jersey/jersey-mvc-destegi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jersey/jersey-mvc-destegi/</guid>
      <description>Spring MVC gibi MVC Çerçeveleri, dinamik web sayfalarına hizmet eden web uygulamaları oluşturmak için kullanılıyor. Jersey, REST Framework olarak bilinmesine rağmen, MVC modülünü kullanarak dinamik web sayfaları oluşturma desteğine de sahiptir.
Jersey MVC Merhaba Dünya # Başlamak için yeni bir Maven web uygulaması oluşturun (bunun nasıl yapılacağı bu örneğin kapsamı dışındadır). pom.xml dosyanıza aşağıdaki iki bağımlılığı ekleyin
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.25.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-mvc-jsp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.25.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Ayrıca pom&amp;rsquo;a, geliştirme sırasında uygulamayı çalıştıracağımız &amp;lsquo;jetty-maven-plugin&amp;rsquo;i ekleyin.</description>
    </item>
    
    <item>
      <title>Jersey&#39;de JAX-RS&#39;yi Yapılandırma</title>
      <link>https://www.wikiod.com/tr/jersey/jerseyde-jax-rsyi-yaplandrma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/jersey/jerseyde-jax-rsyi-yaplandrma/</guid>
      <description>Çapraz Kaynak İstekleri için Java Jersey CORS filtresi # Java Jersey Yapılandırması # Bu örnek, Jersey&amp;rsquo;i RESTful API&amp;rsquo;niz için JAX-RS uygulama çerçevesi olarak kullanmaya başlayabilmeniz için nasıl yapılandırılacağını gösterir.
Apache Maven&amp;lsquo;i zaten yüklediğinizi varsayarak, Jersey&amp;rsquo;i kurmak için şu adımları izleyin:
Maven web proje yapısı oluşturun, terminalde (pencereler) aşağıdaki komutu yürütün mvn arketip:generate -DgroupId= com.stackoverflow.rest -DartifactId= jersey-ws-demo -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
Not: Eclipse&amp;rsquo;i desteklemek için Maven komutunu kullanın: mvn eclipse:eclipse -Dwtpversion=2.0
maven projenizi oluşturduğunuz klasöre gidin, pom.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ilerleme-4gl Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/progress-4gl/</link>
    <description>Recent content in ilerleme-4gl Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/progress-4gl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Progress-4gl ile başlarken</title>
      <link>https://www.wikiod.com/tr/progress-4gl/progress-4gl-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/progress-4gl-ile-baslarken/</guid>
      <description>FizzBuzz # &amp;ldquo;Merhaba Dünya&amp;rdquo; tarzı programların bir başka örneği de FizzBuzz&amp;lsquo;dir.
DEFINE VARIABLE i AS INTEGER NO-UNDO. DEFINE VARIABLE cOut AS CHARACTER NO-UNDO. DO i = 1 TO 100: /* Dividable by 3: fizz */ IF i MODULO 3 = 0 THEN cOut = &amp;quot;Fizz&amp;quot;. /* Dividable by 5: buzz */ ELSE IF i MODULO 5 = 0 THEN cOut = &amp;quot;Buzz&amp;quot;. /* Otherwise just the number */ ELSE cOut = STRING(i).</description>
    </item>
    
    <item>
      <title>derleme</title>
      <link>https://www.wikiod.com/tr/progress-4gl/derleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/derleme/</guid>
      <description>Derleme İlerleme kodunu &amp;ldquo;r-kodu&amp;rdquo; olarak adlandırır ve normalde .r uzantılı bir dosyaya kaydedilir. Derlemenin birkaç farklı yolu vardır: &amp;lsquo;COMPILE&amp;rsquo; ifadesini kullanmak veya Linux veya AppBuilder&amp;rsquo;da: yerleşik Uygulama Derleyicisi. Developer Studio (Eclipse ortamı), derleme işleminde yerleşik olarak derlemeye sahiptir.
Veritabanını güncelleyen 4GL programlarını derlemek için 4GL Development veya OpenEdge Studio&amp;rsquo;nun kurulu olması gerekir.
Sözdizimi # DERLEME programı.p KAYDET. //program.p&amp;rsquo;yi derleyin ve r-kodunu kaydedin DERLEME DEĞER(var) KAYDET. //&amp;ldquo;var&amp;rdquo; değişkeninde kayıtlı adı derleyin ve r-kodunu kaydedin DERLEME prog.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/progress-4gl/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/fonksiyonlar/</guid>
      <description>Progress ABL&amp;rsquo;de kullanıcı tanımlı bir işlev, yeniden kullanılabilir bir program modülüdür.
&amp;ldquo;Ana&amp;rdquo; prosedürde bir fonksiyon bildirilmelidir. Bir prosedürün içinde veya başka bir işlevin içinde bildirilemez. Progress&amp;rsquo;teki bir işlev ABL, Haskell veya Javascript gibi programlama dillerinden farklı olarak &amp;ldquo;birinci sınıf vatandaş&amp;rdquo; değildir. Bir işlevi girdi veya çıktı parametresi olarak iletemezsiniz. Ancak onları dinamik olarak &amp;lsquo;DYNAMIC-FUNCTION&amp;rsquo; veya &amp;lsquo;CALL&amp;rsquo; nesnesini kullanarak çağırabilirsiniz. Sorgularınızda arama işlevleri, dizin eşleşmesi zarar vereceğinden kötü performansa neden olabilir. İşlevin değerini bir değişkene atamayı deneyin ve bunun yerine bu değişkeni &amp;lsquo;WHERE&amp;rsquo; yan tümcesinde kullanın.</description>
    </item>
    
    <item>
      <title>Sayılarla çalışma</title>
      <link>https://www.wikiod.com/tr/progress-4gl/saylarla-calsma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/saylarla-calsma/</guid>
      <description>İlerleme ABL, üç sayı biçimini destekler: 32 ve 64 bit tam sayılar ve kayan değerler.
Operatörler # İlerleme, operatörler olarak + / - *&amp;lsquo;yi destekler. Aşırı yüklenemezler. Bölme her zaman bir ondalık sayı döndürür. Hesaplamadaki sayılardan herhangi biri ondalık ise, ondalık sayı döndürülür. Aksi takdirde bir &amp;lsquo;INTEGER&amp;rsquo; veya &amp;lsquo;INT64&amp;rsquo;.
+= veya ++ operatörü yok. Bir değişkeni artırmak veya azaltmak için, ona artı veya eksi bir şey atamanız gerekir. Yani bir değişkene 1 eklemek için şunu yaparsınız: i = i + 1.</description>
    </item>
    
    <item>
      <title>SICAKLIK TABLOSU</title>
      <link>https://www.wikiod.com/tr/progress-4gl/sicaklik-tablosu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/sicaklik-tablosu/</guid>
      <description>&amp;ldquo;TEMP-TABLE&amp;rdquo;, Progress ABL&amp;rsquo;nin çok güçlü bir özelliğidir. Karmaşık mantık yazmak için kullanılabilecek geçici bir bellek içi (çoğunlukla en azından) tablodur. Prosedürlere, fonksiyonlara ve diğer programlara giriş/çıkış parametreleri olarak kullanılabilir. Bir veya daha fazla geçici tablo, bir &amp;ldquo;DATASET&amp;quot;in (genellikle ProDataset olarak adlandırılır) temelini oluşturabilir.
Yerel bir İlerleme veritabanı tablosuyla yapılabilecek hemen hemen her şey geçici bir tabloyla yapılabilir.
Basit bir geçici tablo tanımlama # Bu, üç alanlı ttTempTable adlı bir &amp;ldquo;TEMP-TABLE&amp;rdquo; tanımıdır.</description>
    </item>
    
    <item>
      <title>prosedürler</title>
      <link>https://www.wikiod.com/tr/progress-4gl/prosedurler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/prosedurler/</guid>
      <description>Progress ABL&amp;rsquo;de iki tür prosedür vardır: Windows dll&amp;rsquo;lerine veya Unix/Linux paylaşımlı kitaplık prosedürlerine cepheler olan dahili prosedürler ve prosedür prototipleri.
Tıpkı fonksiyonlarda olduğu gibi, prosedürler iç içe olamaz. İşlevleri prosedürlere yerleştiremezsiniz ve bunun tersi de geçerlidir.
&amp;lsquo;RUN&amp;rsquo; ifadesi ile bir prosedür çağrılır.
Sözdizimi # ÇALIŞTIR prosedür adı. //Prosedüradı adlı bir prosedürü çalıştırır.
RUN proc1(INPUT &amp;ldquo;HELLO&amp;rdquo;). // HELLO dizesini proc1&amp;rsquo;e girer
RUN proc2(GİRİŞ değişken1, çıkış değişken2). //var1&amp;rsquo;i girdiler ve var2&amp;rsquo;yi proc2&amp;rsquo;ye/proc2&amp;rsquo;den çıktılar</description>
    </item>
    
    <item>
      <title>Teller</title>
      <link>https://www.wikiod.com/tr/progress-4gl/teller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/teller/</guid>
      <description>Devam Eden ABL&amp;rsquo;de &amp;ldquo;CHARACTER&amp;rdquo; olarak tanımlananlar ve &amp;ldquo;LONGCHAR&amp;rdquo; olarak tanımlananlar olmak üzere iki tür dize vardır. 32K&amp;rsquo;dan daha büyük bir dosya bir &amp;lsquo;LONGCHAR&amp;rsquo;dır. Çoğu dize, başka bir şekilde belirtilmediği sürece büyük/küçük harfe duyarsızdır.
Unutmayın - tüm pozisyonlar pozisyon 1 ile başlar!
Birleştirme dizeleri # &amp;lsquo;+&amp;rsquo; operatörünü kullanarak iki veya daha fazla diziyi kolayca birleştirebilirsiniz.
DEFINE VARIABLE cString AS CHARACTER NO-UNDO. cString = &amp;quot;HELLO&amp;quot;. cString = cString + &amp;quot; &amp;quot; + &amp;quot;GOODBYE&amp;quot;.</description>
    </item>
    
    <item>
      <title>işletim sistemi yardımcı programları</title>
      <link>https://www.wikiod.com/tr/progress-4gl/isletim-sistemi-yardmc-programlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/isletim-sistemi-yardmc-programlar/</guid>
      <description>İşletim sistemine erişmek için çeşitli yerleşik işlevler ve ifadeler vardır.
OS-KOMUTU # Bir işletim sistemi komutu yürütür.
OS-COMMAND herhangi bir seçenek olmadan yeni bir kabuk başlatacak ve ondan çıkmayacak - bu nedenle grafik işletim sistemlerinde &amp;ldquo;asılı&amp;rdquo; bir pencere bırakacaksınız.
DEFINE VARIABLE cmd AS CHARACTER NO-UNDO. cmd = &amp;quot;dir&amp;quot;. OS-COMMAND VALUE(cmd). Üç seçenek vardır: &amp;ldquo;SESSİZ&amp;rdquo;, &amp;ldquo;BEKLEME YOK&amp;rdquo; ve &amp;ldquo;KONSOL YOK&amp;rdquo;.
SESSİZ
Bir işletim sistemi komutunu işledikten sonra AVM kabuğu duraklar. Windows GUI platformlarında pencereden çıkmak için çıkış yazmalısınız.</description>
    </item>
    
    <item>
      <title>BUL ifadesi</title>
      <link>https://www.wikiod.com/tr/progress-4gl/bul-ifadesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/bul-ifadesi/</guid>
      <description>&amp;lsquo;FIND&amp;rsquo; ifadesi, tek bir tablodan tek bir kayıt almak için kullanılır. &amp;lsquo;FOR&amp;rsquo; veya &amp;lsquo;QUERY&amp;rsquo; ile karşılaştırıldığında bazı sınırlamaları vardır, ancak kayıtlara hızlı erişim için basit ve kullanışlı bir ifadedir.
Temel örnekleri BUL # Basit bir sports2000 örneği:
FIND FIRST Customer NO-LOCK WHERE CustNum = 1 NO-ERROR. IF AVAILABLE Customer THEN DO: DISPLAY Customer.NAME. END. ELSE DO: MESSAGE &amp;quot;No record available&amp;quot;. END. İLK - sorguyla eşleşen ilk kaydı bulun
KİLİTSİZ - kaydı kilitleme - yani kaydı sadece okuyacağız ve değiştirmeyeceğiz.</description>
    </item>
    
    <item>
      <title>Değişkenler</title>
      <link>https://www.wikiod.com/tr/progress-4gl/degiskenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/progress-4gl/degiskenler/</guid>
      <description>İlerleme ABL statik olarak yazılır. Değişkenlerin bildirilmesi gerekir ve çalışma süresi boyunca veri türü değiştirilemez.
Sözdizimi # DEĞİŞKENİ INT64 İLK ​​OLARAK TANIMLA -200 GERİ ALMA YOK. // -200 olarak başlatılan 64 bitlik bir tam sayı
DEĞİŞKENİ LOJİK GERİ ALMAYAN OLARAK TANIMLAYIN. //l adında bir mantıksal değişken
DEĞİŞKEN c&amp;rsquo;yi KARAKTER GERİ ALMAMADAN VAKA DUYARLI OLARAK TANIMLAYIN. //Büyük/küçük harfe duyarlı (&amp;lsquo;a&amp;rsquo; &amp;lt;&amp;gt; &amp;lsquo;A&amp;rsquo;) değişken.
DEĞİŞKEN dt&amp;rsquo;yi BUGÜN İLK TARİH OLARAK TANIMLAYIN GERİ ALMA YOK.</description>
    </item>
    
  </channel>
</rss>

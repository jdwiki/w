<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift Dil Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/swift/</link>
    <description>Recent content in Swift Dil Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Dili&#39;ni kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/swift/swift-dilini-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/swift-dilini-kullanmaya-baslama/</guid>
      <description>İlk Swift programınız # Kodunuzu hello.swift adlı bir dosyaya yazın:
print(&amp;quot;Hello, world!&amp;quot;) Bir betiği tek adımda derlemek ve çalıştırmak için, terminalden (bu dosyanın bulunduğu dizinde) swift kullanın: Bir terminali başlatmak için Linux üzerinde CTRL+ALT+T tuşlarına basın veya onu macOS üzerinde Launchpad&amp;rsquo;de bulun. Dizini değiştirmek için cddizin_adı girin (veya geri dönmek için cd ..)
$ hızlı merhaba.Swift Merhaba dünya! Bir derleyici, bir programlama dilinde (kaynak dil) yazılmış kaynak kodunu başka bir bilgisayar diline (hedef dil) dönüştüren bir bilgisayar programıdır (veya bir dizi programdır), ikincisi genellikle ikili bir biçime sahiptir.</description>
    </item>
    
    <item>
      <title>Dizeler ve Karakterler</title>
      <link>https://www.wikiod.com/tr/swift/dizeler-ve-karakterler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/dizeler-ve-karakterler/</guid>
      <description>Sözdizimi # String.characters // String içindeki karakterlerin bir Dizisini döndürür String.characters.count // Karakter sayısını döndürür String.utf8 // Bir String.UTF8View, Dize&amp;rsquo;deki UTF-8 karakter noktalarını döndürür String.utf16 // Bir String.UTF16View, Dize&amp;rsquo;deki UTF-16 karakter noktalarını döndürür String.unicodeScalars // Bir String.UnicodeScalarView, String içindeki UTF-32 karakter noktalarını döndürür String.isEmpty // Dize herhangi bir metin içermiyorsa true değerini döndürür String.hasPrefix(String) // Dize argümanın önüne eklenmişse true değerini döndürür String.hasSuffix(String) // Dize argümanın sonuna eklenmişse true değerini döndürür String.</description>
    </item>
    
    <item>
      <title>Numaralandırmalar</title>
      <link>https://www.wikiod.com/tr/swift/numaralandrmalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/numaralandrmalar/</guid>
      <description>Yapılar gibi ve sınıflardan farklı olarak, numaralandırmalar değer türleridir ve iletildiğinde başvurulmak yerine kopyalanır.
Numaralandırmalar hakkında daha fazla bilgi için bkz. Swift Programlama Dili.
Temel numaralandırmalar # Bir enum bir dizi ilgili değer sağlar:
enum Direction { case up case down case left case right } enum Direction { case up, down, left, right } Numaralandırma değerleri, tam nitelikli adlarıyla kullanılabilir, ancak tür adını çıkarılabileceği durumlarda atlayabilirsiniz:
let dir = Direction.</description>
    </item>
    
    <item>
      <title>JSON Okuma ve Yazma</title>
      <link>https://www.wikiod.com/tr/swift/json-okuma-ve-yazma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/json-okuma-ve-yazma/</guid>
      <description>Sözdizimi # NSJSONSerialization.JSONObjectWithData(jsonData, options: NSJSONReadingOptions) // jsonData&amp;rsquo;dan bir Nesne döndürür. Bu yöntem başarısızlık üzerine atar. NSJSONSerialization.dataWithJSONObject(jsonObject, options: NSJSONWritingOptions) // Bir JSON nesnesinden NSData döndürür. Daha okunabilir bir çıktı için seçeneklerde NSJSONWritingOptions.PrettyPrinted iletin. Apple Foundation ve Swift Standard Library ile JSON Serileştirme, Kodlama ve Kod Çözme # JSONSerialization sınıfı, Apple&amp;rsquo;ın Foundation çerçevesine yerleştirilmiştir.
JSON&amp;rsquo;u okuyun # &amp;lsquo;JSONObjectWithData&amp;rsquo; işlevi &amp;lsquo;NSData&amp;rsquo;yı alır ve &amp;lsquo;AnyObject&amp;rsquo;i döndürür. Sonucu beklediğiniz türe dönüştürmek için as? kullanabilirsiniz.
do { guard let jsonData = &amp;quot;[\&amp;quot;Hello\&amp;quot;, \&amp;quot;JSON\&amp;quot;]&amp;quot;.</description>
    </item>
    
    <item>
      <title>AES şifrelemesi</title>
      <link>https://www.wikiod.com/tr/swift/aes-sifrelemesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/aes-sifrelemesi/</guid>
      <description>Rastgele IV (Swift 3.0) ile CBC modunda AES şifrelemesi # iv, şifrelenmiş verilerin önüne eklenir
&amp;ldquo;aesCBC128Encrypt&amp;rdquo;, rastgele bir IV oluşturur ve şifrelenmiş kodun önüne eklenir. &amp;ldquo;aesCBC128Decrypt&amp;rdquo;, şifre çözme sırasında IV ön ekini kullanır.
Girişler verilerdir ve anahtarlar Veri nesneleridir. Gerekirse Base64 gibi kodlanmış bir form varsa, çağıran yönteme ve/veya buradan dönüştürün.
Anahtar tam olarak 128 bit (16 bayt), 192 bit (24 bayt) veya 256 bit (32 bayt) uzunluğunda olmalıdır. Başka bir anahtar boyutu kullanılırsa bir hata atılır.</description>
    </item>
    
    <item>
      <title>Refleks</title>
      <link>https://www.wikiod.com/tr/swift/refleks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/refleks/</guid>
      <description>Sözdizimi # Mirror(yansıtan: örnek) // Yansıtılacak özne ile bir ayna başlatır mirror.displayStyle // Xcode oyun alanları için kullanılan görüntüleme stili mirror.description // Bu örneğin metinsel gösterimi, bkz. CustomStringConvertible mirror.subjectType // Yansıtılan konunun türünü döndürür mirror.superclassMirror // Yansıtılan konunun süper sınıfının aynasını döndürür Genel Açıklamalar: Bir &amp;ldquo;Ayna&amp;rdquo;, Swift&amp;rsquo;de bir nesnenin iç gözleminde kullanılan bir &amp;ldquo;yapı&amp;quot;dır. En belirgin özelliği çocuk dizisidir. Olası bir kullanım durumu, &amp;ldquo;Çekirdek Verileri&amp;rdquo; için bir yapıyı seri hale getirmektir.</description>
    </item>
    
    <item>
      <title>protokoller</title>
      <link>https://www.wikiod.com/tr/swift/protokoller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/protokoller/</guid>
      <description>Protokoller, bir nesnenin nasıl kullanılacağını belirtmenin bir yoludur. Protokoller uygulamada herhangi bir kısıtlama getirmese de, bir sınıfın, yapının veya enum&amp;rsquo;un sağlaması gereken bir dizi özellik ve yöntemi tanımlarlar.
Swift protokolü, uygun türlerin uygulaması gereken bir gereksinimler topluluğudur. Protokol daha sonra, örneğin Diziler ve genel gereksinimler gibi bir türün beklendiği çoğu yerde kullanılabilir.
Protokol üyeleri her zaman tüm protokolle aynı erişim niteleyicisini paylaşır ve ayrı olarak belirtilemez. Her ne kadar bir protokol, yukarıdaki örneklere göre alıcı veya ayarlayıcı gereksinimleriyle erişimi kısıtlayabilir.</description>
    </item>
    
    <item>
      <title>Opsiyonel</title>
      <link>https://www.wikiod.com/tr/swift/opsiyonel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/opsiyonel/</guid>
      <description>&amp;quot; İsteğe bağlı bir değer ya bir değer içerir ya da bir değerin eksik olduğunu belirtmek için sıfır içerir&amp;quot;
Alıntı: Apple Inc. “Swift Programlama Dili (Swift 3.1 Sürümü).” iBooks. https://itun.es/us/k5SW7.l
Temel isteğe bağlı kullanım durumları şunları içerir: bir sabit (let) için, bir döngü içinde isteğe bağlı kullanımı (if-let), isteğe bağlı bir değeri bir yöntem içinde güvenli bir şekilde açma (koruyucu) ve anahtar döngülerinin bir parçası olarak (case-let) ), birleştirme operatörünü kullanarak (?</description>
    </item>
    
    <item>
      <title>Yöntem Swizzling</title>
      <link>https://www.wikiod.com/tr/swift/yontem-swizzling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/yontem-swizzling/</guid>
      <description>Swift&amp;rsquo;de metod swizzling kullanırken, sınıflarınızın/yöntemlerinizin uyması gereken iki gereklilik vardır:
Sınıfınız NSObject öğesini genişletmeli Sızdırmak istediğiniz işlevler &amp;lsquo;dinamik&amp;rsquo; özniteliğe sahip olmalıdır Bunun neden gerekli olduğuna dair tam bir açıklama için [Swift&amp;rsquo;i Kakao ve Objective-C ile Kullanma2 konusuna bakın:
Dinamik Gönderim Gerektiriyor
@objc özelliği Swift API&amp;rsquo;nizi Objective-C&amp;rsquo;ye maruz bırakırken çalışma zamanı, bir özelliğin, yöntemin dinamik olarak gönderilmesini garanti etmez, alt simge veya başlatıcı. Swift derleyicisi yine de sanallaştırma yapabilir veya kodunuzun performansını optimize etmek için çevrimiçi üye erişimi, Objective-C çalışma zamanını atlayarak.</description>
    </item>
    
    <item>
      <title>Kapanışlar</title>
      <link>https://www.wikiod.com/tr/swift/kapanslar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/swift/kapanslar/</guid>
      <description>Sözdizimi # var closureVar: (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) // Değişken veya özellik türü olarak typealias ClosureType = (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) { [&amp;lt;captureList&amp;gt;] (&amp;lt;parameters&amp;gt;) &amp;lt;throws-ness&amp;gt; -&amp;gt; &amp;lt;returnType&amp;gt; in &amp;lt;ifadeler&amp;gt; } // Kapatma sözdizimini tamamlayın Swift kapatma işlemleri hakkında daha fazla bilgi için Apple&amp;rsquo;ın belgelerine bakın.
Kapatmayla ilgili temel bilgiler # Kapanışlar (bloklar veya lambdalar olarak da bilinir) programınızın içinde saklanabilen ve dolaşabilen kod parçalarıdır.
let sayHi = { print(&amp;quot;Hello&amp;quot;) } // The type of sayHi is &amp;quot;() -&amp;gt; ()&amp;quot;, aka &amp;quot;() -&amp;gt; Void&amp;quot; sayHi() // prints &amp;quot;Hello&amp;quot; Diğer işlevler gibi, kapanışlar da argümanları kabul edebilir ve sonuçları döndürebilir veya [hatalar] atabilir(https://www.</description>
    </item>
    
  </channel>
</rss>

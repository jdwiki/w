<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>winforms Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/winforms/</link>
    <description>Recent content in winforms Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/winforms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Winform&#39;ları kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/winforms/winformlar-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/winformlar-kullanmaya-baslama/</guid>
      <description>Visual Studio&amp;rsquo;yu Kullanarak Basit Bir WinForms Uygulaması Oluşturma # Bu örnek size Visual Studio&amp;rsquo;da bir Windows Forms Uygulaması projesinin nasıl oluşturulacağını gösterecektir.
Windows Forms Projesi Oluşturun # Visual Studio&amp;rsquo;yu başlatın.
Dosya menüsünde Yeni&amp;rsquo;nin üzerine gelin ve ardından Proje&amp;lsquo;yi seçin. Yeni Proje iletişim kutusu görünür.
Yüklü Şablonlar bölmesinde &amp;ldquo;Visual C#&amp;rdquo; veya &amp;ldquo;Visual Basic&amp;rdquo; öğesini seçin.
Orta bölmenin üzerinde, açılır listeden hedef çerçeveyi seçebilirsiniz.
Orta bölmede, Windows Forms Uygulaması şablonunu seçin.
Ad metin kutusuna proje için bir ad yazın.</description>
    </item>
    
    <item>
      <title>Yardım Entegrasyonu</title>
      <link>https://www.wikiod.com/tr/winforms/yardm-entegrasyonu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/yardm-entegrasyonu/</guid>
      <description>Windows Forms Uygulamalarında Formlar ve Denetimler için farklı şekillerde yardım sağlayabilirsiniz. Bir açılır yardım gösterebilir, bir CHM dosyası veya bir URL açabilirsiniz. Formlar, Kontroller ve diyaloglar için bağlama duyarlı yardımı gösterebilirsiniz.
HelpProvider Bileşeni # Bileşen için içeriğe duyarlı yardım sağlamak üzere bir HelpProvider bileşeni ayarlayabilirsiniz. Bu şekilde, kullanıcı formun F1 tuşuna veya Yardım düğmesine bastığında otomatik olarak şunları yapabilirsiniz:
Kontroller için içeriğe duyarlı yardım açılır penceresi göster Bağlama dayalı bir CHM dosyası açın (İçindekiler tablosunu göster, Bir anahtar kelime veya dizin göster, bir konu göster) Varsayılan tarayıcıyı kullanarak bir URL&amp;rsquo;ye gidin Yardım Sınıfı # Bu türleri sağlamak için kodda Help sınıfını kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>Metin kutusu</title>
      <link>https://www.wikiod.com/tr/winforms/metin-kutusu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/metin-kutusu/</guid>
      <description>Bir dizi diziden otomatik tamamlama # var source = new AutoCompleteStringCollection(); // Add your collection of strings. source.AddRange(new[] { &amp;quot;Guybrush Threepwood&amp;quot;, &amp;quot;LeChuck&amp;quot; }); var textBox = new TextBox { AutoCompleteCustomSource = source, AutoCompleteMode = AutoCompleteMode.SuggestAppend, AutoCompleteSource = AutoCompleteSource.CustomSource }; form.Controls.Add(textBox); Bu, kullanıcı G veya L yazmaya çalıştığında otomatik olarak tamamlanır.
AutoCompleteMode.SuggestAppend hem önerilen değerlerin bir listesini görüntüler hem de ilk eşleşmeyi otomatik olarak yazar, yalnızca Append ve sadece `Öneri&amp;rsquo; de kullanılabilir.</description>
    </item>
    
    <item>
      <title>Bağlanma verileri</title>
      <link>https://www.wikiod.com/tr/winforms/baglanma-verileri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/baglanma-verileri/</guid>
      <description>Parametreler # argüman Açıklama mülkAdı Bağlanacak denetim özelliğinin adı. veriKaynak Veri kaynağını temsil eden bir Nesne. dataÜye Bağlanacak özellik veya liste. biçimlendirmeEtkin Görüntülenen verilerin biçimlendirilip biçimlendirilmeyeceğini belirler. güncellemeModu Veri kaynağı, kontrol özelliği doğrulandığında (varsayılan) veya özellik değiştiğinde hemen güncellenir nullDeğer Veri kaynağı bu değere sahip olduğunda, bağlı özellik DBNull olarak ayarlanır. biçimDizesi Bir değerin nasıl görüntüleneceğini belirten bir veya daha fazla biçim belirleyici karakter formatBilgi Varsayılan biçimlendirme davranışını geçersiz kılmak için bir IFormatProvider uygulaması.</description>
    </item>
    
    <item>
      <title>bir form gösteriliyor</title>
      <link>https://www.wikiod.com/tr/winforms/bir-form-gosteriliyor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/bir-form-gosteriliyor/</guid>
      <description>Bu konu, WinForms motorunun formları görüntülemek için nasıl çalıştığını ve bunların yaşam sürelerini nasıl kontrol ettiğinizi açıklar.
Kalıcı bir formu kapatma # ShowDialog yöntemi kullanılarak bir form gösterildiğinde, formun DialogResult özelliğini forma yakın olacak şekilde ayarlamak gerekir. Bu özellik, DialogResult olarak da adlandırılan numaralandırma kullanılarak ayarlanabilir.
Bir formu kapatmak için, bazı olay işleyicilerinde formun &amp;lsquo;DialogResult&amp;rsquo; özelliğini (&amp;lsquo;DialogResult.None&amp;rsquo; ile herhangi bir değere) ayarlamanız yeterlidir. Kodunuz olay işleyicisinden çıktığında, WinForm motoru formu gizleyecek ve ilk `ShowDialog&amp;rsquo; yöntem çağrısını izleyen kod yürütmeye devam edecektir.</description>
    </item>
    
    <item>
      <title>Denetimleri Devralma</title>
      <link>https://www.wikiod.com/tr/winforms/denetimleri-devralma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/denetimleri-devralma/</guid>
      <description>Kontroller, diğer sınıflarla tamamen aynı şekilde türetilir. Dikkat edilmesi gereken tek şey olayları geçersiz kılmaktır: genellikle temel olay işleyicisini kendi başınıza aramanız önerilir. Kendi temel kuralım: şüpheniz varsa, temel olayı arayın.
Uygulama çapında Ayarlar # Çoğu geliştirici sitesinin hızlı bir şekilde okunması, WinForms&amp;rsquo;un WPF&amp;rsquo;den daha düşük olarak kabul edildiğini ortaya çıkaracaktır. En sık belirtilen nedenlerden biri, tüm bir uygulamanın &amp;ldquo;görünüm ve hissinde&amp;rdquo; uygulama genelinde değişiklikler yapmanın sözde zorluğudur.
Aslında, standart kontrolleri kullanmaktan kaçınırsanız ve onlardan kendinizinkini türetirseniz, WinForms&amp;rsquo;da hem tasarım hem de çalışma zamanında kolayca yapılandırılabilen bir uygulama üretmek şaşırtıcı derecede kolaydır.</description>
    </item>
    
    <item>
      <title>Temel kontroller</title>
      <link>https://www.wikiod.com/tr/winforms/temel-kontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/winforms/temel-kontroller/</guid>
      <description>Buton # Düğmeler en basit kontrollerden biridir ve çoğunlukla kullanıcı istediği zaman bazı kodları çalıştırmak için kullanılır.
Burada gerçekten basit bir durumumuz var, bir düğmeye tıklandığında bir Mesaj kutusu göster. Bir forma bir düğme ekleriz, nesneyi tanımlamak için kodda kullanıldığı gibi cmdShowMessage olarak adlandırırız ve düğme metnini Mesajı Göster olarak ayarlarız.
Sadece görsel tasarımcı üzerindeki düğmeye çift tıklamamız gerekiyor ve Visual Studio, tıklama Etkinliği için kod üretecek. Şimdi sadece MessageBox kodunu buraya eklememiz gerekiyor:</description>
    </item>
    
  </channel>
</rss>

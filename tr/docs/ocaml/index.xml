<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OCaml Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/ocaml/</link>
    <description>Recent content in OCaml Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/ocaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OCaml&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/ocaml/ocamli-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/ocamli-kullanmaya-baslama/</guid>
      <description>Kurulum veya Kurulum # OPAM&amp;rsquo;ı yükleme # OPAM, OCaml için bir paket yöneticisidir. Derleyici sürümlerini ve OCaml kitaplıklarını sizin için kolayca oluşturur ve yönetir.
OPAM&amp;rsquo;ı işletim sisteminize kurmanın en kolay yolu, sisteminiz için bir paket yöneticisi kullanmaktır. örneğin apt-get, yum veya homebrew.
Mac OSX Kurulum Talimatları # homebrew formüllerini güncelleyin ve OPAM&amp;rsquo;ı kurun.
brew update brew install opam Ubuntu Kurulum Talimatları # add-apt-repository ppa:avsm/ppa apt-get update apt-get install ocaml opam Kaynaktan derleme # wget http://caml.</description>
    </item>
    
    <item>
      <title>Desen Eşleştirme</title>
      <link>https://www.wikiod.com/tr/ocaml/desen-eslestirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/desen-eslestirme/</guid>
      <description>Model Eşleştirmeyi Kullanan Faktöryel İşlev # let rec factorial n = match n with | 0 | 1 -&amp;gt; 1 | n -&amp;gt; n * (factorial (n - 1)) Bu işlev hem 0 hem de 1 değerleriyle eşleşir ve bunları özyinelemeli tanımımızın temel durumuna eşler. Ardından diğer tüm sayılar bu işlevin özyinelemeli çağrısına eşlenir.
Boole ifadelerinin değerlendirilmesi # Atomları dizelerle tanımlanan boole ifadelerinin türünü şu şekilde tanımlarız:
type expr = | Atom of string | Not of expr | And of expr * expr | Or of expr * expr ve bir &amp;ldquo;oracle : string -&amp;gt; bool&amp;rdquo; kullanarak bu ifadeleri değerlendirebilir ve atomların değerlerini aşağıdaki gibi verir:</description>
    </item>
    
    <item>
      <title>İlk OCaml Komut Dosyanızı yazın</title>
      <link>https://www.wikiod.com/tr/ocaml/ilk-ocaml-komut-dosyanz-yazn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/ilk-ocaml-komut-dosyanz-yazn/</guid>
      <description>Selam Dünya # Bu örnek, [OCaml&amp;rsquo;ı 1 yüklediğinizi] varsaymaktadır.
OCaml Kodunun Derlenmesi # Aşağıdaki içeriklerle &amp;ldquo;hello.ml&amp;rdquo; adlı yeni bir dosya oluşturun:
print_string &amp;quot;Hello world!\n&amp;quot; &amp;ldquo;ocamlc&amp;rdquo;, OCaml derleyicisidir. Bu betiği derlemek ve çalıştırmak için şunu çalıştırın:
$ ocamlc -o hello hello.ml ve sonra ortaya çıkan ikili dosyayı yürütün
$ ./hello Hello world! OCaml Kodunun Yürütülmesi # Bu betiği bir ikili dosyaya derlemeden de çalıştırabilirsiniz. Bunu, OCaml&amp;rsquo;in etkileşimli kullanımına izin veren ocaml üst düzey sistemi olan &amp;lsquo;ocaml&amp;rsquo; kullanarak yapabilirsiniz.</description>
    </item>
    
    <item>
      <title>Ocamlbuild</title>
      <link>https://www.wikiod.com/tr/ocaml/ocamlbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/ocamlbuild/</guid>
      <description>Dışa bağımlı olmayan temel örnek # Projenizin dışa bağımlılığı yoksa ve ana giriş noktası olarak foo.ml varsa, bir bytecode versiyonunu şu şekilde derleyebilirsiniz:
ocamlbuild foo.byte Yerel bir yürütülebilir dosya almak için çalıştırın
ocamlbuild foo.native Harici kütüphanelere bağlı proje # Projeniz harici kütüphanelere bağlıysa, önce onları opam ile kurmalısınız. Bağımlılıklarınızın &amp;ldquo;foo&amp;rdquo; ve &amp;ldquo;bar&amp;rdquo; olduğunu ve projenizin ana giriş noktasının &amp;ldquo;foobar.ml&amp;rdquo; olduğunu varsayarak, çalıştırılabilir bir bayt kodu oluşturabilirsiniz.
ocamlbuild -use-ocamlfind -pkgs &#39;foo,bar&#39; foobar.</description>
    </item>
    
    <item>
      <title>Daha Yüksek Dereceli Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/ocaml/daha-yuksek-dereceli-fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/daha-yuksek-dereceli-fonksiyonlar/</guid>
      <description>Sözdizimi # `val (|&amp;gt;) : &amp;lsquo;a -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;b&amp;rsquo; `val (@@) : (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;a -&amp;gt; &amp;lsquo;b&amp;rsquo; Genel algoritmalar # Genel algoritmaları uygulamak için daha yüksek dereceli işlevler kullanılabilir ve kullanıcıya son ayrıntıları sağlama sorumluluğundan vazgeçilir. Örneğin, &amp;lsquo;List.sort&amp;rsquo;, çeşitli sıralama yöntemlerinin uygulanmasına izin veren bir karşılaştırma işlevi bekler. Burada, büyük/küçük harfe duyarlı olmayan dizeleri sıralıyoruz:
let string_case_insensitive_sort lst = let case_insensitive_compare a b = String.compare (String.</description>
    </item>
    
    <item>
      <title>Liste İşleme</title>
      <link>https://www.wikiod.com/tr/ocaml/liste-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/liste-isleme/</guid>
      <description>Liste.Harita # &amp;lsquo;List.map&amp;rsquo;, &amp;lsquo;(&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;a list -&amp;gt; &amp;lsquo;b list&amp;rsquo; imzasına sahiptir; bu, İngilizce&amp;rsquo;de bir işlevden (buna eşleme işlevi diyeceğiz) bir işlev alan bir işlevdir. tür (yani &#39;a&#39;) başka bir türe (yani &amp;lsquo;b&amp;rsquo;) ve ilk türün bir listesi. İşlev, her öğenin birinci listenin bir öğesindeki eşleme işlevinin çağrılmasının sonucu olduğu ikinci türden bir liste döndürür.
List.map string_of_int [ 1; 2; 3; 4 ] #- [ &amp;quot;1&amp;quot;; &amp;quot;2&amp;quot;; &amp;quot;3&amp;quot;; &amp;quot;4&amp;quot; ] : string list &amp;ldquo;a&amp;rdquo; ve &amp;ldquo;b&amp;rdquo; türlerinin farklı olması gerekmez.</description>
    </item>
    
    <item>
      <title>Fonksiyonlar</title>
      <link>https://www.wikiod.com/tr/ocaml/fonksiyonlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/fonksiyonlar/</guid>
      <description>Anonim işlevler # İşlevler sıradan değerler olduğundan, adsız işlevler oluşturmak için uygun bir sözdizimi vardır:
List.map (fun x -&amp;gt; x * x) [1; 2; 3; 4] (* - : int list = [1; 4; 9; 16] *) Bu kullanışlıdır, çünkü aksi takdirde kullanabilmek için önce işlevi adlandırmamız gerekir (bkz. [let][1]):
let square x = x * x (* val square : int -&amp;gt; int = &amp;lt;fun&amp;gt; *) List.map square [1; 2; 3; 4] (* - : int list = [1; 4; 9; 16] *) [1]: https://www.</description>
    </item>
    
    <item>
      <title>Borular, Dosyalar ve Akışlar</title>
      <link>https://www.wikiod.com/tr/ocaml/borular-dosyalar-ve-akslar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/borular-dosyalar-ve-akslar/</guid>
      <description>Standart Girdiden Okuyun ve Standart Çıktıya Yazdırın # Aşağıdaki içeriklerle reverser.ml adında bir dosya hazırlıyoruz:
let acc = ref [] in try while true do acc := read_line () :: !acc; done with End_of_file -&amp;gt; print_string (String.concat &amp;quot;\n&amp;quot; !acc) Daha sonra aşağıdaki komutu kullanarak programımızı derliyoruz:
$ ocamlc -o reverser.byte reverser.ml Verileri yeni yürütülebilir dosyamıza aktararak test ediyoruz:
$ cat data.txt one two three $ ./reverser.byte &amp;lt; data.txt three two one &amp;lsquo;reserver.</description>
    </item>
    
    <item>
      <title>Ortak tuzaklar</title>
      <link>https://www.wikiod.com/tr/ocaml/ortak-tuzaklar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/ortak-tuzaklar/</guid>
      <description>Yanlış operatörü kullanma # OCaml&amp;rsquo;de, kayan noktalar ve tamsayılar için farklı aritmetik operatörler vardır. Ek olarak, bu operatörler yalnızca 2 kayan nokta veya 2 tam sayı üzerinde kullanılabilir. İşte OCaml&amp;rsquo;de geçersiz ifadeler
1.0 + 2.0 1 + 2.0 1 +. 2 1 +. 2.0 Bunların her biri için doğru ifade sırasıyla
1. +. 2. float_of_int 1 +. 2. 1 + 2 float_of_int 1 +. 2. OCaml&amp;rsquo;de tam sayıların yüzen veya tam tersi otomatik dökümü yoktur.</description>
    </item>
    
    <item>
      <title>Değişken kayıt alanları</title>
      <link>https://www.wikiod.com/tr/ocaml/degisken-kayt-alanlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/ocaml/degisken-kayt-alanlar/</guid>
      <description>Çoğu OCaml değeri gibi, kayıtlar da varsayılan olarak değişmezdir. Ancak, OCaml zorunlu programlamayı da ele aldığından, bireysel alanları değişebilir hale getirmenin bir yolunu sağlar. Değişken alanlar, işlevsel güncelleme gibi olağan işlevsel tekniklere başvurmak yerine atama yoluyla yerinde değiştirilebilir.
Yan etkileri tanıtırken, değiştirilebilir alanlar doğru kullanıldığında performansın artmasına neden olabilir.
Değişken alanlarla kayıt bildirme # Aşağıda, &amp;ldquo;ağırlık&amp;rdquo; değişken bir alan olarak bildirilmektedir.
type person = { name: string; mutable weight: int };; Açıklama: Burada tasarım söz konusu olduğunda, bir &amp;lsquo;kişinin&amp;rsquo; adının değişmesinin muhtemel olmadığı, ancak ağırlığının değişeceği gerçeği göz önünde bulundurulur.</description>
    </item>
    
  </channel>
</rss>

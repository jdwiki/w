<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entity Framework Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/entity-framework/</link>
    <description>Recent content in Entity Framework Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/entity-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Entity Framework&#39;ü kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/entity-framework/entity-frameworku-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/entity-frameworku-kullanmaya-baslama/</guid>
      <description>Entity Framework NuGet Paketini Yükleme # Visual Studio&amp;rsquo;nuzda Çözüm Gezgini penceresini açın, ardından projenize sağ tıklayın ve menüden NuGet Paketlerini Yönet&amp;lsquo;i seçin:
Açılan pencerede sağ üstteki arama kutusuna EntityFramework yazın.
Veya Visual Studio 2015 kullanıyorsanız şöyle bir şey göreceksiniz:
Ardından Yükle&amp;rsquo;yi tıklayın.
Paket yöneticisi konsolunu kullanarak varlık çerçevesini de kurabiliriz. Bunu yapmak için önce Araçlar menüsü -&amp;gt; NuGet Paket Yöneticisi -&amp;gt; Paket Yönetici Konsolu&amp;rsquo;nu kullanarak açmanız ve ardından şunu girin:</description>
    </item>
    
    <item>
      <title>İzleme ve İzleme Yok</title>
      <link>https://www.wikiod.com/tr/entity-framework/izleme-ve-izleme-yok/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/izleme-ve-izleme-yok/</guid>
      <description>İzleme davranışı, Entity Framework&amp;rsquo;ün bir varlık örneği hakkındaki bilgileri değişiklik izleyicisinde tutup tutmayacağını kontrol eder. Bir varlık izleniyorsa, varlıkta tespit edilen tüm değişiklikler SaveChanges() sırasında veritabanında kalıcı olacaktır.
İzleme gerektirmeyen sorgular # Sonuçlar bir uygulamada kullanıldığında hiçbir izleme sorgusu yararlı değildir. &amp;ldquo;salt okunur&amp;rdquo; senaryo Kurulum değişikliğine gerek olmadığı için &amp;ldquo;çalışmaları daha hızlıdır&amp;rdquo; izleme bilgileri Örnek :
using (var context = new BookContext()) { var books = context.Books.AsNoTracking().ToList(); } EF Core 1.</description>
    </item>
    
    <item>
      <title>İlgili varlıklar yükleniyor</title>
      <link>https://www.wikiod.com/tr/entity-framework/ilgili-varlklar-yukleniyor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/ilgili-varlklar-yukleniyor/</guid>
      <description>Modeller doğru şekilde ilişkiliyse, EntityFramework kullanarak ilgili verileri kolayca yükleyebilirsiniz. Seçebileceğiniz üç seçeneğiniz var: yavaş yükleme, istekli yükleme ve açık yükleme.
Örneklerde kullanılan modeller:
public class Company { public int Id { get; set; } public string FullName { get; set; } public string ShortName { get; set; } // Navigation properties public virtual Person Founder { get; set; } public virtual ICollection&amp;lt;Address&amp;gt; Addresses { get; set; } } public class Address { public int Id { get; set; } public int CompanyId { get; set; } public int CountryId { get; set; } public int CityId { get; set; } public string Street { get; set; } // Navigation properties public virtual Company Company { get; set; } public virtual Country Country { get; set; } public virtual City City { get; set; } } İstekli yükleme # Eager yükleme, gerekli tüm varlıklarınızı bir kerede yüklemenizi sağlar.</description>
    </item>
    
    <item>
      <title>Entity Framework İçin En İyi Uygulamalar (Basit ve Profesyonel)</title>
      <link>https://www.wikiod.com/tr/entity-framework/entity-framework-icin-en-iyi-uygulamalar-basit-ve-profesyonel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/entity-framework-icin-en-iyi-uygulamalar-basit-ve-profesyonel/</guid>
      <description>Bu makale, Entity Framework&amp;rsquo;ü kullanmak için basit ve profesyonel bir uygulamayı tanıtmaktır.
Basit: çünkü sadece bir sınıfa ihtiyaç duyar (bir arayüz ile)
Profesyonel: çünkü SOLID mimari ilkelerini uygular
Daha fazla konuşmak istemiyorum&amp;hellip;. hadi tadını çıkaralım!
1- Entity Framework @ Veri katmanı (Temel Bilgiler) # Bu yazıda iki tablolu “Şirket” adlı basit bir veritabanı kullanacağız:
[dbo].[Kategoriler]([KategoriKimliği], [KategoriAdı])
[dbo].[Ürünler]([ÜrünKimliği], [KategoriKimliği], [ÜrünAdı])
1-1 Entity Framework kodu oluştur
Bu katmanda Entity Framework kodunu oluşturuyoruz (proje kitaplığında) (bunu nasıl yapabileceğinizle ilgili bu makaleye bakın) o zaman aşağıdaki sınıflara sahip olacaksınız</description>
    </item>
    
    <item>
      <title>İlk Veriyi KodlayınAnnotations</title>
      <link>https://www.wikiod.com/tr/entity-framework/ilk-veriyi-kodlaynannotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/ilk-veriyi-kodlaynannotations/</guid>
      <description>Entity Framework Code-First, etki alanı sınıflarınıza ve özelliklerine uygulayabileceğiniz bir dizi DataAnnotation özniteliği sağlar. DataAnnotation öznitelikleri, varsayılan Code-First kurallarını geçersiz kılar.
System.ComponentModel.DataAnnotations, sütunun geçersizliğini veya boyutunu etkileyen öznitelikleri içerir. System.ComponentModel.DataAnnotations.Schema ad alanı, veritabanının şemasını etkileyen öznitelikleri içerir. Not: DataAnnotations size yalnızca yapılandırma seçeneklerinin bir alt kümesini sunar. Fluent API, Code-First&amp;rsquo;te bulunan eksiksiz bir yapılandırma seçenekleri seti sağlar.
[Sütun] özelliği # public class Person { public int PersonID { get; set; } [Column(&amp;quot;NameOfPerson&amp;quot;)] public string PersonName { get; set; } } Entity Framework&amp;rsquo;e, özelliğin adını kullanmak yerine belirli bir sütun adını kullanmasını söyler.</description>
    </item>
    
    <item>
      <title>EF&#39;de Optimizasyon Teknikleri</title>
      <link>https://www.wikiod.com/tr/entity-framework/efde-optimizasyon-teknikleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/efde-optimizasyon-teknikleri/</guid>
      <description>AsNoTracking&amp;rsquo;i Kullanma # Kötü örnek:
var location = dbContext.Location .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; Yukarıdaki kod, bir varlığı değiştirmeden veya eklemeden basitçe döndürdüğünden, izleme maliyetinden kaçınabiliriz.
İyi örnek:
var location = dbContext.Location.AsNoTracking() .Where(l =&amp;gt; l.Location.ID == location_ID) .SingleOrDefault(); return location; AsNoTracking() işlevini kullandığımızda, Entity Framework&amp;rsquo;e varlıkların bağlam tarafından izlenmediğini açıkça söylüyoruz. Bu, özellikle veri deponuzdan büyük miktarda veri alırken faydalı olabilir. Ancak, izlenmeyen varlıklarda değişiklik yapmak istiyorsanız, &amp;lsquo;Değişiklikleri Kaydet&amp;rsquo;i çağırmadan önce bunları eklemeyi unutmamalısınız.</description>
    </item>
    
    <item>
      <title>İlk Kod Kuralları</title>
      <link>https://www.wikiod.com/tr/entity-framework/ilk-kod-kurallar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/ilk-kod-kurallar/</guid>
      <description>Kural, Code-First ile çalışırken etki alanı sınıfı tanımlarına dayalı olarak kavramsal bir modeli otomatik olarak yapılandırmak için bir dizi varsayılan kuraldır. Code-First kuralları System.Data.Entity.ModelConfiguration.Conventions ad alanında (EF 5 &amp;amp; EF 6) tanımlanır.
Kuralları Kaldırma # System.Data.Entity.ModelConfiguration.Conventions ad alanında tanımlanan kuralların herhangi birini &amp;ldquo;OnModelCreating&amp;rdquo; yöntemini geçersiz kılarak kaldırabilirsiniz.
Aşağıdaki örnek, PluralizingTableNameConvention&amp;rsquo;ı kaldırır.
public class EshopContext : DbContext { public DbSet&amp;lt;Product&amp;gt; Products { set; get; } . . . protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.</description>
    </item>
    
    <item>
      <title>İlk Kod - Akıcı API</title>
      <link>https://www.wikiod.com/tr/entity-framework/ilk-kod---akc-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/ilk-kod---akc-api/</guid>
      <description>HOW Entity Framework&amp;rsquo;ün POCO sınıflarını veritabanı tablolarına, sütunlarına vb. eşleyeceğini belirtmenin iki genel yolu vardır: Veri Açıklamaları ve Akıcı API.
Veri Açıklamalarının okunması ve anlaşılması basit olsa da, bir varlık için &amp;ldquo;Silmede Basamakla&amp;rdquo; davranışını belirleme gibi belirli özelliklerden yoksundurlar. Fluent API ise kullanımı biraz daha karmaşıktır, ancak çok daha gelişmiş bir dizi özellik sunar.
Eşleme modelleri # Bileşik Birincil Anahtar # .HasKey() yöntemi kullanılarak, bir dizi özellik, varlığın bileşik birincil anahtarı olarak açıkça yapılandırılabilir.</description>
    </item>
    
    <item>
      <title>Entity-framework Code First Migrations</title>
      <link>https://www.wikiod.com/tr/entity-framework/entity-framework-code-first-migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/entity-framework-code-first-migrations/</guid>
      <description>Taşımayı Etkinleştir # Varlık çerçevesinde Code First Migrations&amp;rsquo;ı etkinleştirmek için şu komutu kullanın:
Enable-Migrations Paket Yöneticisi Konsolu üzerinde.
EF tarafından yönetilen veritabanı nesnelerinizi içeren geçerli bir &amp;ldquo;DbContext&amp;rdquo; uygulamasına sahip olmanız gerekir. Bu örnekte, veritabanı bağlamı &amp;ldquo;BlogPost&amp;rdquo; ve &amp;ldquo;Yazar&amp;rdquo; nesnelerini içerecektir:
internal class DatabaseContext: DbContext { public DbSet&amp;lt;Author&amp;gt; Authors { get; set; } public DbSet&amp;lt;BlogPost&amp;gt; BlogPosts { get; set; } } Komutu yürüttükten sonra aşağıdaki çıktı görünmelidir:
PM&amp;gt; Enable-Migrations Checking if the context targets an existing database.</description>
    </item>
    
    <item>
      <title>Model Kısıtlamaları</title>
      <link>https://www.wikiod.com/tr/entity-framework/model-kstlamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/entity-framework/model-kstlamalar/</guid>
      <description>Bire çok ilişkiler # UserType birçok Kullanıcıya aittir &amp;lt;-&amp;gt; Kullanıcıların bir UserType&amp;rsquo;ı vardır
Gerekli olan tek yönlü navigasyon özelliği
public class UserType { public int UserTypeId {get; set;} } public class User { public int UserId {get; set;} public int UserTypeId {get; set;} public virtual UserType UserType {get; set;} } Entity&amp;lt;User&amp;gt;().HasRequired(u =&amp;gt; u.UserType).WithMany().HasForeignKey(u =&amp;gt; u.UserTypeId); İsteğe bağlı tek yönlü gezinme özelliği (yabancı anahtar &amp;lsquo;Nullable&amp;rsquo; türünde olmalıdır)
public class UserType { public int UserTypeId {get; set;} } public class User { public int UserId {get; set;} public int?</description>
    </item>
    
  </channel>
</rss>

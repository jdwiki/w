<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oyun çerçevesi Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/playframework/</link>
    <description>Recent content in oyun çerçevesi Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/playframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playframework&#39;ü kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/playframework/playframeworku-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/playframeworku-kullanmaya-baslama/</guid>
      <description>Play 2.4.x/2.5.x&amp;rsquo;e başlarken - Windows, Java # Tesisler # İndirin ve kurun:
Java 8 - Oracle sitesinden ilgili kurulumu indirin.
Aktivatör - www.playframework.com/download adresinden zip dosyasını indirin ve dosyaları hedef Play klasörüne çıkarın, örneğin:
c:\Play-2.4.2\activator-dist-1.3.5 sbt - www.scala-sbt.org adresinden indirin.
Ortam değişkenlerini tanımlayın:
JAVA_HOME, örneğin:
c:\Program Files\Java\jdk1.8.0_45 PLAY_HOME, örneğin:
c:\Play-2.4.2\activator-dist-1.3.5; Örneğin SBT_HOME:
c:\Program Files (x86)\sbt\bin; Yol değişkenlerine kurulu üç programın tümüne yol ekleyin:
%JAVA_HOME%\bin;%PLAY_HOME%;%SBT_HOME%; 2.5 kurulum düzeltmesini oyna # Play 2.</description>
    </item>
    
    <item>
      <title>Bağımlılık ekleme - Java</title>
      <link>https://www.wikiod.com/tr/playframework/bagmllk-ekleme---java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/bagmllk-ekleme---java/</guid>
      <description>Guice ile bağımlılık ekleme - 2.4, 2.5 oyna # Guice, Play&amp;rsquo;in varsayılan bağımlılık ekleme (ayrıca DI) çerçevesidir. Diğer çerçeveler de kullanılabilir, ancak Guice&amp;rsquo;i kullanmak geliştirme çabalarını kolaylaştırır, çünkü Play perdenin altındaki şeylerle ilgilenir.
Play API&amp;rsquo;lerinin Enjeksiyonu # Play 2.5&amp;rsquo;ten başlayarak, önceki sürümlerde statik olan birkaç API DI ile oluşturulmalıdır. Bunlar örneğin Yapılandırma, JPAApi, CacheApi vb.&amp;lsquo;dir.
Play API&amp;rsquo;lerinin enjeksiyon yöntemi, Play tarafından otomatik olarak enjekte edilen bir sınıf için ve özel bir sınıf için farklıdır.</description>
    </item>
    
    <item>
      <title>Tercih ettiğiniz IDE&#39;yi ayarlama</title>
      <link>https://www.wikiod.com/tr/playframework/tercih-ettiginiz-ideyi-ayarlama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/tercih-ettiginiz-ideyi-ayarlama/</guid>
      <description>IntelliJ FİKİRİ # Önkoşullar # Intellij IDEA kurulu (Topluluk veya Ultimate sürümü) IntelliJ&amp;rsquo;de kurulu Scala Eklentisi Örneğin Aktivatör ile oluşturulmuş standart bir Play projesi (aktivatör yeni [projenin adı] play-scala). Projeyi Açmak # IntelliJ IDEA&amp;rsquo;yı açın Dosya &amp;gt; Aç ... menüsüne gidin &amp;gt; [projenin adı] tüm klasörüne tıklayın &amp;gt; Tamam Birkaç seçenek içeren bir açılır pencere açılır. Varsayılan değerler çoğu durumda yeterince iyidir ve beğenmezseniz daha sonra başka bir yerde değiştirebilirsiniz. &amp;lsquo;Tamam&amp;rsquo;ı tıklayın Intellij IDEA biraz düşünecek, ardından projede hangi modüllerin seçileceğini seçmek için başka bir açılır pencere önerecektir.</description>
    </item>
    
    <item>
      <title>Birim Testi</title>
      <link>https://www.wikiod.com/tr/playframework/birim-testi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/birim-testi/</guid>
      <description>Birim testi - Java, Oynat 2.4,2.5 # Yardımcılar ve fakeApplication # Birim testleri için Class Helpers çokça kullanılır. Bir Play uygulamasını taklit eder, HTTP isteklerini ve yanıtlarını, oturumu, çerezleri taklit eder - testler için gerekli olabilecek her şey. Test altındaki bir denetleyici, Play uygulaması bağlamında yürütülmelidir. Helpers yöntemi fakeApplication, testleri çalıştırmak için bir uygulama sağlar. Helpers ve fakeApplication&amp;lsquo;ı kullanmak için WithApplication&amp;lsquo;dan bir test sınıfı türetilmelidir.
Aşağıdaki Helpers API&amp;rsquo;leri kullanılmalıdır:
Helpers.running(Application application, final Runnable block); Helpers.</description>
    </item>
    
    <item>
      <title>Bağımlılık Enjeksiyonu - Scala</title>
      <link>https://www.wikiod.com/tr/playframework/bagmllk-enjeksiyonu---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/bagmllk-enjeksiyonu---scala/</guid>
      <description>Sözdizimi # class MyClassUsingAnother @Inject() (myOtherClassInjected: MyOtherClass) { (&amp;hellip;) } @Singleton sınıfı MyClassThatShouldBeASingleton (&amp;hellip;) Temel kullanım # Tipik bir singleton sınıfı:
import javax.inject._ @Singleton class BurgersRepository { // implementation goes here } İlkine erişim gerektiren başka bir sınıf.
import javax.inject._ class FastFoodService @Inject() (burgersRepository: BurgersRepository){ // implementation goes here // burgersRepository can be used } Sonunda sonuncuyu kullanan bir kontrolör. FastFoodService&amp;rsquo;i bir singleton olarak işaretlemediğimiz için, her enjekte edildiğinde yeni bir örneğinin oluşturulduğuna dikkat edin.</description>
    </item>
    
    <item>
      <title>oyun WSClient ile Web hizmeti kullanımı</title>
      <link>https://www.wikiod.com/tr/playframework/oyun-wsclient-ile-web-hizmeti-kullanm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/oyun-wsclient-ile-web-hizmeti-kullanm/</guid>
      <description>Resmi belgelere bağlantı: https://www.playframework.com/documentation/2.5.x/ScalaWS
Temel kullanım (Scala) # HTTP istekleri, kendi sınıflarınıza enjekte edilmiş bir parametre olarak kullanabileceğiniz WSClient sınıfı aracılığıyla yapılır.
import javax.inject.Inject import play.api.libs.ws.WSClient import scala.concurrent.{ExecutionContext, Future} class MyClass @Inject() ( wsClient: WSClient )(implicit ec: ExecutionContext){ def doGetRequest(): Future[String] = { wsClient .url(&amp;quot;http://www.google.com&amp;quot;) .get() .map { response =&amp;gt; // Play won&#39;t check the response status, // you have to do it manually if ((200 to 299).contains(response.status)) { println(&amp;quot;We got a good response&amp;quot;) // response.</description>
    </item>
    
    <item>
      <title>Java - Merhaba Dünya</title>
      <link>https://www.wikiod.com/tr/playframework/java---merhaba-dunya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/java---merhaba-dunya/</guid>
      <description>Bu eğitim, Play&amp;rsquo;i bir Linux/MacOS sisteminde çalıştırmayı hedefliyor İlk projenizi oluşturun # Yeni bir proje oluşturmak için aşağıdaki komutu kullanın (&amp;lsquo;HelloWorld&amp;rsquo; projenin adıdır ve &amp;lsquo;play-java&amp;rsquo; şablondur)
$ ~/activator-1.3.10-minimal/bin/activator new HelloWorld play-java Buna benzer bir çıktı almalısınız
Fetching the latest list of templates... OK, application &amp;quot;HelloWorld&amp;quot; is being created using the &amp;quot;play-java&amp;quot; template. To run &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator run To run the test for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator test To run the Activator UI for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator ui Proje geçerli dizinde oluşturulacak (bu durumda ana klasörümdü)</description>
    </item>
    
    <item>
      <title>JSON ile çalışma - Scala</title>
      <link>https://www.wikiod.com/tr/playframework/json-ile-calsma---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/json-ile-calsma---scala/</guid>
      <description>Resmi belgeler Paket belgeleri
Play json paketini dahil ederek Play&amp;rsquo;den bağımsız olarak kullanabilirsiniz.
build.sbt içinde &amp;quot;com.typesafe.play&amp;quot; % &amp;quot;play-json_2.11&amp;quot; % &amp;quot;2.5.3&amp;quot;, bkz.
https://mvnrepository.com/artifact/com.typesafe.play/play-json_2.11 http://stackoverflow.com/questions/19436069/adding-play-json-library-to-sbt Manuel olarak JSON oluşturma # Manuel olarak bir JSON nesne ağacı (bir &amp;ldquo;JsValue&amp;rdquo;) oluşturabilirsiniz.
import play.api.libs.json._ val json = JsObject(Map( &amp;quot;name&amp;quot; -&amp;gt; JsString(&amp;quot;Jsony McJsonface&amp;quot;), &amp;quot;age&amp;quot; -&amp;gt; JsNumber(18), &amp;quot;hobbies&amp;quot; -&amp;gt; JsArray(Seq( JsString(&amp;quot;Fishing&amp;quot;), JsString(&amp;quot;Hunting&amp;quot;), JsString(&amp;quot;Camping&amp;quot;) )) )) Veya birkaç örtük dönüşüme dayanan daha kısa eşdeğer sözdizimi ile:
import play.api.libs.json._ val json = Json.</description>
    </item>
    
    <item>
      <title>Kaygan</title>
      <link>https://www.wikiod.com/tr/playframework/kaygan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/kaygan/</guid>
      <description>Kaygan başlangıç ​​kodu # build.sbt içine dahil ettiğinizden emin olun (burada Mysql ve PostGreSQL için):
&amp;quot;mysql&amp;quot; % &amp;quot;mysql-connector-java&amp;quot; % &amp;quot;5.1.20&amp;quot;, &amp;quot;org.postgresql&amp;quot; % &amp;quot;postgresql&amp;quot; % &amp;quot;9.3-1100-jdbc4&amp;quot;, &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.1.1&amp;quot;, &amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-slick&amp;quot; % &amp;quot;1.1.1&amp;quot; &amp;ldquo;application.conf&amp;rdquo; dosyanıza şunu ekleyin:
mydb.driverjava=&amp;quot;slick.driver.MySQLDriver$&amp;quot; mydb.driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot; mydb.url=&amp;quot;jdbc:mysql://hostaddress:3306/dbname?zeroDateTimeBehavior=convertToNull&amp;quot; mydb.user=&amp;quot;username&amp;quot; mydb.password=&amp;quot;password&amp;quot; RDBMS&amp;rsquo;den bağımsız bir mimariye sahip olmak için aşağıdaki gibi bir nesne oluşturun
package mypackage import slick.driver.MySQLDriver import slick.driver.PostgresDriver object SlickDBDriver{ val env = &amp;quot;something here&amp;quot; val driver = env match{ case &amp;quot;postGreCondition&amp;quot; =&amp;gt; PostgresDriver case _ =&amp;gt; MySQLDriver } } yeni bir model oluştururken:</description>
    </item>
    
    <item>
      <title>Java - JSON ile çalışma</title>
      <link>https://www.wikiod.com/tr/playframework/java---json-ile-calsma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/playframework/java---json-ile-calsma/</guid>
      <description>Belgeleri oynatın: https://www.playframework.com/documentation/2.5.x/JavaJsonActions
Manuel JSON oluşturma # import play.libs.Json; public JsonNode createJson() { // {&amp;quot;id&amp;quot;: 33, &amp;quot;values&amp;quot;: [3, 4, 5]} ObjectNode rootNode = Json.newObject(); ArrayNode listNode = Json.newArray(); long values[] = {3, 4, 5}; for (long val: values) { listNode.add(val); } rootNode.put(&amp;quot;id&amp;quot;, 33); rootNode.set(&amp;quot;values&amp;quot;, listNode); return rootNode; } Dize/dosyadan json yükleniyor # import play.libs.Json; // (...) Ortak klasörünüzden bir dosya yükleme # // Note: &amp;quot;app&amp;quot; is an play.Application instance JsonNode node = Json.</description>
    </item>
    
  </channel>
</rss>

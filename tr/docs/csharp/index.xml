<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# Dil Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/csharp/</link>
    <description>Recent content in C# Dil Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# Dili ile Başlarken</title>
      <link>https://www.wikiod.com/tr/csharp/c-dili-ile-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/c-dili-ile-baslarken/</guid>
      <description>Yeni bir konsol uygulaması oluşturma (Visual Studio) # Visual Studio&amp;rsquo;yu açın
Araç çubuğunda Dosya → Yeni Proje seçeneğine gidin
Konsol Uygulaması proje türünü seçin
Solution Explorer&amp;rsquo;da Program.cs dosyasını açın
Main()e aşağıdaki kodu ekleyin:
public class Program { public static void Main() { // Prints a message to the console. System.Console.WriteLine(&amp;ldquo;Hello, World!&amp;rdquo;);
System.Console.ReadKey(); } }
Araç çubuğunda, programı çalıştırmak için Hata Ayıklama -&amp;gt; Hata Ayıklamayı Başlat&amp;lsquo;a tıklayın veya F5 veya ctrl + F5 (hata ayıklayıcı olmadan çalışıyor) tuşlarına basın.</description>
    </item>
    
    <item>
      <title>C# 6.0 Özellikleri</title>
      <link>https://www.wikiod.com/tr/csharp/c-60-ozellikleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/c-60-ozellikleri/</guid>
      <description>C# dilinin bu altıncı yinelemesi Roslyn derleyicisi tarafından sağlanır. Bu derleyici, .NET Framework&amp;rsquo;ün 4.6 sürümüyle çıktı, ancak önceki çerçeve sürümlerini hedeflemeye izin vermek için geriye dönük uyumlu bir şekilde kod üretebilir. C# sürüm 6 kodu, .NET 4.0 ile tamamen geriye dönük uyumlu bir şekilde derlenebilir. Daha önceki çerçeveler için de kullanılabilir, ancak ek çerçeve desteği gerektiren bazı özellikler düzgün çalışmayabilir.
C#&amp;lsquo;ın altıncı sürümü, Visual Studio 2015 ve .NET 4.6 ile birlikte Temmuz 2015&amp;rsquo;te yayınlandı.</description>
    </item>
    
    <item>
      <title>C# 7.0 Özellikleri</title>
      <link>https://www.wikiod.com/tr/csharp/c-70-ozellikleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/c-70-ozellikleri/</guid>
      <description>C# 7.0, C#&amp;lsquo;ın yedinci sürümüdür. Bu sürüm bazı yeni özellikler içerir: Tuple&amp;rsquo;lar için dil desteği, yerel işlevler, &amp;lsquo;out var&amp;rsquo; bildirimleri, rakam ayırıcılar, ikili değişmezler, kalıp eşleştirme, atma ifadeleri, &amp;lsquo;başvuru dönüşü&amp;rsquo; ve &amp;lsquo;başvuru yerel&amp;rsquo; ve genişletilmiş ifade gövdeli üye listesi.
Resmi referans: C# 7&amp;rsquo;deki yenilikler
Tuples için dil desteği # Temel bilgiler # Bir tuple, sıralı, sonlu bir eleman listesidir. Tanımlama grupları, programlamada, tanımlama grubunun öğelerinin her biri ile ayrı ayrı çalışmak yerine tek bir varlıkla toplu olarak çalışmak ve ilişkisel bir veritabanında tek tek satırları (yani &amp;ldquo;kayıtları&amp;rdquo;) temsil etmek için bir araç olarak yaygın olarak kullanılır.</description>
    </item>
    
    <item>
      <title>Uzatma Yöntemleri</title>
      <link>https://www.wikiod.com/tr/csharp/uzatma-yontemleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/uzatma-yontemleri/</guid>
      <description>Sözdizimi # genel statik ReturnType MyExtensionMethod(bu TargetType hedefi) genel statik ReturnType MyExtensionMethod(bu TargetType hedefi, TArg1 arg1, &amp;hellip;) Parametreler # parametre Ayrıntılar bu Bir uzantı yönteminin ilk parametresinin başında her zaman this anahtar sözcüğü ve ardından genişletmekte olduğunuz nesnenin &amp;ldquo;geçerli&amp;rdquo; örneğine atıfta bulunulan tanımlayıcı gelmelidir Uzantı yöntemleri, nesne örneklerinde statik yöntemlerin, türün kendisinin bir üyesiymiş gibi çağrılmasına izin veren sözdizimsel şekerdir.
Uzantı yöntemleri, açık bir hedef nesne gerektirir. Uzatılmış türün kendisinden yönteme erişmek için this anahtar sözcüğünü kullanmanız gerekecektir.</description>
    </item>
    
    <item>
      <title>LINQ Sorguları</title>
      <link>https://www.wikiod.com/tr/csharp/linq-sorgular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/linq-sorgular/</guid>
      <description>LINQ, Language INentegre Query anlamına gelen bir kısaltmadır. Çeşitli veri kaynakları ve biçimleri arasında verilerle çalışmak için tutarlı bir model sunarak bir sorgu dilini bütünleştiren bir kavramdır; XML belgelerinde, SQL veritabanlarında, ADO.NET Veri Kümelerinde, .NET koleksiyonlarında ve bir LINQ sağlayıcısının mevcut olduğu diğer tüm biçimlerde verileri sorgulamak ve dönüştürmek için aynı temel kodlama modellerini kullanırsınız.
Sözdizimi # Sorgu sözdizimi:
from &amp;lt;range variable&amp;gt; in &amp;lt;collection&amp;gt; [from &amp;lt;range variable&amp;gt; in &amp;lt;collection&amp;gt;, &amp;hellip;] &amp;lt;filter, joining, grouping, aggregate operators, &amp;hellip;&amp;gt; &amp;lt;lambda expression&amp;gt; &amp;lt;select or groupBy operator&amp;gt; &amp;lt;formulate the result&amp;gt; Yöntem sözdizimi:</description>
    </item>
    
    <item>
      <title>anahtar kelimeler</title>
      <link>https://www.wikiod.com/tr/csharp/anahtar-kelimeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/anahtar-kelimeler/</guid>
      <description>Anahtar kelimeler derleyici için özel anlamı olan önceden tanımlanmış, ayrılmış tanımlayıcılardır. Bunlar, @ ön eki olmadan programınızda tanımlayıcı olarak kullanılamazlar. Örneğin, &amp;ldquo;@if&amp;rdquo; yasal bir tanımlayıcıdır, ancak &amp;ldquo;if&amp;rdquo; anahtar kelimesi değildir.
C#, her biri özel bir işleve sahip olan önceden tanımlanmış bir &amp;ldquo;anahtar sözcük&amp;rdquo; (veya ayrılmış sözcükler) koleksiyonuna sahiptir. Bu kelimeler, @ ile ön eki eklenmedikçe tanımlayıcı olarak kullanılamaz (değişkenler, yöntemler, sınıflar vb. adları).
abstract as base bool break &amp;ldquo;bayt&amp;rdquo; &amp;ldquo;vaka&amp;rdquo; catch char checked &amp;lsquo;sınıf&amp;rsquo; const devam decimal varsayılan temsilci do double else enum event &amp;ldquo;açık&amp;rdquo; extern false son olarak sabit float for foreach goto if implicit in int arayüz dahili is lock long ad alanı yeni null &amp;ldquo;nesne&amp;rdquo; operatör out override params &amp;lsquo;özel&amp;rsquo; &amp;lsquo;korumalı&amp;rsquo; &amp;lsquo;kamu&amp;rsquo; salt okunur ref return sbyte mühürlü &amp;ldquo;kısa&amp;rdquo; sizeof stackalloc static string yapı switch bu throw true try typeof uint ulong işaretlenmemiş güvensiz ushort kullanarak (direktif) kullanarak (ifade) sanal void volatile ne zaman while Bunların dışında C#, kodda belirli bir anlam sağlamak için bazı anahtar kelimeler de kullanır.</description>
    </item>
    
    <item>
      <title>Getiri Anahtar Kelimesi</title>
      <link>https://www.wikiod.com/tr/csharp/getiri-anahtar-kelimesi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/getiri-anahtar-kelimesi/</guid>
      <description>Bir ifadede getiri anahtar sözcüğünü kullandığınızda, içinde göründüğü yöntem, işleç veya get erişimcisinin bir yineleyici olduğunu belirtirsiniz. Bir yineleyici tanımlamak için verimi kullanmak, özel bir koleksiyon türü için IEnumerable ve IEnumerator desenini uyguladığınızda, açık bir ekstra sınıfa (bir numaralandırma için durumu tutan sınıf) olan ihtiyacı ortadan kaldırır.
Sözdizimi # getiri getirisi [TYPE] verim kesintisi &amp;lsquo;yield&amp;rsquo; anahtar sözcüğünü, &amp;lsquo;IEnumerable&amp;rsquo;, &amp;lsquo;IEnumerable&amp;rsquo;, &amp;lsquo;IEnumerator&amp;rsquo; veya &amp;lsquo;IEnumerator&amp;rsquo; dönüş tipine sahip bir yönteme koymak, derleyiciye dönüş tipinde (&amp;lsquo;IEnumerable) bir uygulama oluşturmasını söyler.</description>
    </item>
    
    <item>
      <title>Açıklamayı Kullanma</title>
      <link>https://www.wikiod.com/tr/csharp/acklamay-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/acklamay-kullanma/</guid>
      <description>IDisposable nesnelerinin doğru kullanımını sağlayan kullanışlı bir sözdizimi sağlar.
Sözdizimi # kullanma (tek kullanımlık) { } kullanma (IDisposable tek kullanımlık = new MyDisposable()) { } &amp;ldquo;using&amp;rdquo; ifadesindeki nesne, &amp;ldquo;IDisposable&amp;rdquo; arabirimini uygulamalıdır.
using(var obj = new MyObject()) { } class MyObject : IDisposable { public void Dispose() { // Cleanup } } &amp;lsquo;IDisposable&amp;rsquo; uygulaması için daha eksiksiz örnekler MSDN belgelerinde bulunabilir.
Gotcha: elden çıkardığınız kaynağı iade etmek # Aşağıdaki kötü bir fikirdir çünkü &amp;lsquo;db&amp;rsquo; değişkenini döndürmeden önce elden çıkarır.</description>
    </item>
    
    <item>
      <title>İstisna işleme</title>
      <link>https://www.wikiod.com/tr/csharp/istisna-isleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/istisna-isleme/</guid>
      <description>Özel İstisnalar Oluşturma # Tıpkı diğer istisnalar gibi oluşturulabilecek özel istisnaları uygulamanıza izin verilir. Bu, çalışma zamanı sırasında istisnalarınızı diğer hatalardan ayırt etmek istediğinizde anlamlıdır.
Bu örnekte, uygulamanın karmaşık bir girdiyi ayrıştırırken karşılaşabileceği sorunların net bir şekilde ele alınması için özel bir istisna oluşturacağız.
Özel İstisna Sınıfı Oluşturma # Özel bir istisna oluşturmak için bir &amp;ldquo;İstisna&amp;rdquo; alt sınıfı oluşturun:
public class ParserException : Exception { public ParserException() : base(&amp;quot;The parsing went wrong and we have no additional information.</description>
    </item>
    
    <item>
      <title>Refleks</title>
      <link>https://www.wikiod.com/tr/csharp/refleks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/csharp/refleks/</guid>
      <description>Yansıma, çalışma zamanında dinamik nesne özelliklerine erişmek için bir C# dili mekanizmasıdır. Tipik olarak yansıma, dinamik nesne türü ve nesne öznitelik değerleri hakkında bilgi almak için kullanılır. Örneğin, REST uygulamasında yansıma, serileştirilmiş yanıt nesnesini yinelemek için kullanılabilir.
Açıklama: MS yönergelerine göre performans açısından kritik kod yansımadan kaçınmalıdır. https://msdn.microsoft.com/en-us/library/ff647790.aspx adresine bakın.
Yansıma, çalışma zamanında (program yürütme) kodun derlemeler, modüller ve türler hakkındaki bilgilere erişmesine izin verir. Bu daha sonra türleri dinamik olarak oluşturmak, değiştirmek veya bunlara erişmek için kullanılabilir.</description>
    </item>
    
  </channel>
</rss>

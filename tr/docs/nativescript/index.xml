<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nativescript Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/nativescript/</link>
    <description>Recent content in nativescript Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/nativescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nativescript&#39;i kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/nativescript/nativescripti-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/nativescripti-kullanmaya-baslama/</guid>
      <description>Pencereler # En son nodeJS LTS sürümünün kurulu olduğundan emin olun Komut istemini açın ve $ npm install -g nativescript yazın Komut istemine $ @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://www.nativescript.org/setup/win&#39;))&amp;quot; yazın - bu biraz zaman alabilir Yukarıdakilerin işe yaradığını doğrulamak için komut istemine `$ tns doktor&amp;rsquo; yazın (cmd&amp;rsquo;niz) Herhangi bir hata varsa, sorun giderme kılavuzunu takip edin. Kurulum veya Kurulum # Nativescript&amp;rsquo;i kurmaya veya yüklemeye ilişkin ayrıntılı talimatlar.</description>
    </item>
    
    <item>
      <title>Verileri liste olarak görüntüleme ({N}&#43;Angular-2 uygulamaları için Tekrarlayıcı, ListView veya *ngFor kullanarak)</title>
      <link>https://www.wikiod.com/tr/nativescript/verileri-liste-olarak-goruntuleme-n-angular-2-uygulamalar-icin-tekrarlayc-listview-veya-ngfor-kullanarak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/verileri-liste-olarak-goruntuleme-n-angular-2-uygulamalar-icin-tekrarlayc-listview-veya-ngfor-kullanarak/</guid>
      <description>Not: Tekrarlayıcıyı {N}+Angular-2 uygulamalarında kullanmayın! *ngRepeat, Angular-2&amp;rsquo;de artık kullanılmayan bir yönergedir. Yinelenen öğe modellerini görüntülemeniz gerektiğinde, ListView veya *ngFor yapısal yönergesini kullanın.
Verileri görüntülemek için *ngFor Yapısal Yönergeyi kullanma (nativeScript + Angular-2) # ngfor.component.html
&amp;lt;StackLayout&amp;gt; &amp;lt;Label *ngFor=&amp;quot;let item of items&amp;quot; [text]=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/Label&amp;gt; &amp;lt;/StackLayout&amp;gt; ngfor.component.ts
import { Component } from &amp;quot;@angular/core&amp;quot;; var dataItems = [&amp;quot;data-item 1&amp;quot;, &amp;quot;data-item 2&amp;quot;, &amp;quot;data-item 3&amp;quot;] @Component({ selector: &#39;ngfor-component&#39;, styleUrls:[&amp;quot;./ngfor.component.css&amp;quot;], templateUrl: &amp;quot;./ngfor.component.html&amp;quot;, }) export class NgForComponent { public items:Array&amp;lt;string&amp;gt; = []; constructor(){ this.</description>
    </item>
    
    <item>
      <title>Nativescript&#39;te Animasyon Uygulaması</title>
      <link>https://www.wikiod.com/tr/nativescript/nativescriptte-animasyon-uygulamas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/nativescriptte-animasyon-uygulamas/</guid>
      <description>Animasyon zamanlama işlevi ve animasyon özelliklerinin kullanımı. # sayfalar/main.component.ts
import {Component, ElementRef, ViewChild} from &amp;quot;@angular/core&amp;quot;; import {View} from &amp;quot;ui/core/view&amp;quot;; import {AnimationCurve} from &amp;quot;ui/enums&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;Image #img src=&amp;quot;~/assets/images/user-shape.png&amp;quot;&amp;gt;&amp;lt;/Image&amp;gt; &amp;lt;Button text=&amp;quot;Apply Changes&amp;quot; (tap)=&amp;quot;animateImage()&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;], }) export class MainComponent { @ViewChild(&amp;quot;img&amp;quot;) img: ElementRef; animateImage() { let img = &amp;lt;View&amp;gt;this.img.nativeElement; img.animate({ translate: { x: 0, y: 120 }, duration: 2000, curve: AnimationCurve.easeIn }); } } diğer animasyon özellikleri için #snippet</description>
    </item>
    
    <item>
      <title>Nativescript şablonunu şekillendirme</title>
      <link>https://www.wikiod.com/tr/nativescript/nativescript-sablonunu-sekillendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/nativescript-sablonunu-sekillendirme/</guid>
      <description>Uygulamanıza örnek bir düzen ekleme # main.bileşen.ts
import {Component} from &amp;quot;@angular/core&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;TextField hint=&amp;quot;some text&amp;quot;&amp;gt;&amp;lt;/TextField&amp;gt; &amp;lt;Button text=&amp;quot;Click me&amp;quot; class=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;, &amp;quot;pages/main/main.css&amp;quot;] }) export class MainComponent { } Yöntem 1: Genel CSS # app.css &amp;ndash; Genel olarak tüm düzenler için geçerlidir.
StackLayout { margin: 10; background-color: white; } .btn, TextField { margin-left: 16; margin-right: 16; } Yöntem 2: Platforma özel CSS # platform.android.css &amp;ndash; Android cihazdaki tüm düzenler için global olarak geçerlidir.</description>
    </item>
    
    <item>
      <title>Yerel apis&#39;e erişme</title>
      <link>https://www.wikiod.com/tr/nativescript/yerel-apise-erisme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/yerel-apise-erisme/</guid>
      <description>Java kodunu nativescript&amp;rsquo;te yazın ve doğrudan javascript&amp;rsquo;te kullanın # Bu, Android stüdyosundaki proje yapısının görüntüsüdür:
Bu, nativescript projesinin proje yapısının görüntüsüdür:
Gördüğünüz gibi aynılar. böylece android studio&amp;rsquo;da yazarken java kodunu nativescript&amp;rsquo;te yazabiliriz.
Nativescript&amp;rsquo;in varsayılan uygulamasına Tost Eklemek istiyoruz. yeni bir nativescript projesi oluşturduktan sonra java/org/example dizini gibi bir dizin oluşturun:
&amp;rsquo;example&amp;rsquo; dizininde yeni bir &amp;lsquo;MyToast.java&amp;rsquo; dosyası oluşturun;
MyToast.java:
package org.example; import android.widget.Toast; import android.content.Context; public class MyToast{ public static void showToast(Context context,String text ,String StrDuration ){ int duration; switch (StrDuration){ case &amp;quot;short&amp;quot;: duration = Toast.</description>
    </item>
    
    <item>
      <title>yerel widget&#39;ı kullanma</title>
      <link>https://www.wikiod.com/tr/nativescript/yerel-widget-kullanma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/yerel-widget-kullanma/</guid>
      <description>ng2-TNS-Android&amp;rsquo;de SurfaceView&amp;rsquo;ı kullanma : adım adım # Örneğin, ng2-nativescript&amp;rsquo;te SurfaceView kullanmak istiyorsunuz. Nativescript&amp;rsquo;te &amp;lsquo;surfaceView&amp;rsquo; olmadığı için &amp;lsquo;placeholder&amp;rsquo; kullanmalıyız.
önce gereksinimleri içe aktarmalıyız:
import {Component} from &amp;quot;@angular/core&amp;quot;; import placeholder = require(&amp;quot;ui/placeholder&amp;quot;); let application= require(&amp;quot;application&amp;quot;); sonra yer tutucuyu html dosyanıza ekleyin:
&amp;lt;Yer tutucu (creatingView)=&amp;quot;creatingView($event)&amp;quot;&amp;gt;&amp;lt;/Placeholder&amp;gt; Bu yöntemi sınıfınıza ekleyin:
public creatingView(args: any) { var nativeView = new android.view.SurfaceView(application.android.currentContext); args.view = nativeView; } typescript &amp;lsquo;android&amp;rsquo;in ne olduğunu bilmiyor ve platform bildirim dosyaları eklemeliyiz eklemek için bu Cevap&amp;lsquo;i takip edin.</description>
    </item>
    
    <item>
      <title>Durum çubuğu</title>
      <link>https://www.wikiod.com/tr/nativescript/durum-cubugu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/durum-cubugu/</guid>
      <description>Gizle/göster - android # Bu, pil, saat &amp;hellip; simgeleriyle ekranınızın üstünde gördüğünüz bir durum çubuğudur. let frame = require(&amp;quot;ui/frame&amp;quot;); Saklamak:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN); Göstermek:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_VISIBLE ); StatusBar&amp;rsquo;ı Şeffaf yap android # APP_Resources/values/styles.xml dosyasını açın ve
&amp;lt;item name=&amp;quot;android:windowTranslucentStatus&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
in the
&amp;lt;style name=&amp;quot;AppThemeBase&amp;quot; parent=&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt; &amp;lt;/style&amp;gt; section.</description>
    </item>
    
    <item>
      <title>Küresel Değişkenler</title>
      <link>https://www.wikiod.com/tr/nativescript/kuresel-degiskenler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/kuresel-degiskenler/</guid>
      <description>Konsol # NativeScript&amp;rsquo;in global &amp;ldquo;console&amp;rdquo; değişkeni, hata ayıklama için değerleri terminalinize yazdırmanıza olanak tanır. En basit kullanım, &amp;ldquo;console.log()&amp;rdquo; işlevine bir değer iletmektir:
console.log(&amp;quot;hello world&amp;quot;); &amp;ldquo;console&amp;rdquo; nesnesi, &amp;ldquo;dump()&amp;rdquo;, &amp;ldquo;trace()&amp;rdquo;, &amp;ldquo;assert()&amp;rdquo; ve more dahil olmak üzere birkaç başka yönteme sahiptir.
// Prints the state of a full object. console.dump({ firstName: &amp;quot;Native&amp;quot;, lastName: &amp;quot;Script&amp;quot;}); // Prints the current stack trace console.trace(); // Asserts a boolean condition, and prints to the console if the assertion fails.</description>
    </item>
    
    <item>
      <title>Arayüz uygulamak</title>
      <link>https://www.wikiod.com/tr/nativescript/arayuz-uygulamak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/arayuz-uygulamak/</guid>
      <description>View.OnLayoutChangeListener&amp;rsquo;ı Nativescript&amp;rsquo;te uygula # let playerLayoutChangeListener = new android.view.View.OnLayoutChangeListener( { onLayoutChange : function ( v:View, left:number, top:number, right:number, bottom:number, oldLeft:number, oldTop:number, oldRight:number, oldBottom:number):any { if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) { console.log(&amp;quot;OnLayoutChangeListener&amp;quot;); __this.changeSurfaceLayout(); } } }); bir yüzey görünümü oluşturun https://www.wikiod.com/tr/proposed
Dinleyici Ekle:
surfaceView.addOnLayoutChangeListener(playerLayoutChangeListener); Listener&amp;rsquo;ı kaldır:
surfaceView.removeOnLayoutChangeListener(playerLayoutChangeListener); </description>
    </item>
    
    <item>
      <title>Çoklu iş parçacığı Modeli</title>
      <link>https://www.wikiod.com/tr/nativescript/coklu-is-parcacg-modeli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/nativescript/coklu-is-parcacg-modeli/</guid>
      <description>Yeni krom v8 motoru kısmen ES7 uyumludur. Bu nedenle, dosyamızın başına &amp;quot;use strict&amp;quot;; eklersek (typescript, typescript aktarıldığında bunu yapar), global kapsamdaki tüm fonksiyonların gerçekten global kapsamda atandığından emin olmalıyız. bu yüzden &amp;ldquo;self.functionName&amp;rdquo; veya &amp;ldquo;global.functionName&amp;rdquo; kullanmalıyız.
angular2 hizmetinde Workers&amp;rsquo;ı kullan # /app/services/greeting.service.ts :
import { Injectable } from &#39;@angular/core&#39;; import {greetingTypes,request,response} from &#39;./greeting.interface&#39; @Injectable() export class Greeting{ private worker; constructor(){ this.worker = new Worker(&#39;../workers /greeting.worker&#39;); } sayHello(message:string, answerCallback:Function){ let requestData:request = {&#39;type&#39;:greetingTypes.</description>
    </item>
    
  </channel>
</rss>

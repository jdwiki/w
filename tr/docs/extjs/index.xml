<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>extjs Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/extjs/</link>
    <description>Recent content in extjs Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/extjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Extj&#39;leri kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/extjs/extjleri-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/extjs/extjleri-kullanmaya-baslama/</guid>
      <description>Hello World Uygulaması Oluşturma – Via Sencha Cmd # Kurulum ve Kurulum # ExtJS&amp;rsquo;nin tipik kullanımı, tek sayfalık zengin uygulamalar (RIA) oluşturmak için çerçeveden yararlanır. Başlamanın en basit yolu, bir dağıtım yaşam döngüsündeki genel endişelerin çoğunu kapsayan bir CLI oluşturma aracı olan Sencha Cmd&amp;lsquo;yu kullanmaktır, öncelikle:
paket ve bağımlılık yönetimi kod derleme / paketleme ve küçültme farklı hedefler ve platformlar için yapı stratejilerini yönetme » Sencha Cmd&amp;rsquo;yi İndirin
İkinci adım SDK&amp;rsquo;yı indirmektir, ExtJS ticari bir üründür - bir kopyasını almak için aşağıdakilerden biri:</description>
    </item>
    
    <item>
      <title>MVC  MVVM - Uygulama Mimarisi</title>
      <link>https://www.wikiod.com/tr/extjs/mvc--mvvm---uygulama-mimarisi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/extjs/mvc--mvvm---uygulama-mimarisi/</guid>
      <description>Modellere giriş # Model, bir uygulamadaki bazı veri nesnelerini temsil eder. Örneğin, uygulamanızda Meyve, Araba, Bina vb. gibi bir modeliniz olabilir. Modeller normalde mağazalar tarafından kullanılır. İşte yeni bir model sınıfını nasıl tanımlayacağınıza dair bir örnek. Örneğin.
Ext.define(&#39;MyApp.model.Person&#39;, { extend: &#39;Ext.data.Model&#39;, fields: [ {name: &#39;name&#39;, type: &#39;string&#39;}, {name: &#39;surname&#39;, type: &#39;string&#39;}, {name: &#39;age&#39;, type: &#39;int&#39;} ], getFullName: function() { return this.get(&#39;name&#39;) + &amp;quot; &amp;quot; + this.get(&#39;surname&#39;); } }); Model sınıfımızı tanımladıktan sonra muhtemelen onun bir örneğini oluşturmak ve muhtemelen bazı metotları çağırmak isteriz.</description>
    </item>
    
    <item>
      <title>ExtJS AJAX</title>
      <link>https://www.wikiod.com/tr/extjs/extjs-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/extjs/extjs-ajax/</guid>
      <description>Bir Ext.data.Connection sınıfının tek bir örneği. Bu sınıf, sunucu tarafınızla iletişim kurmak için kullanılır.
Temel İstek # Ext.Data.Connection Sınıf özelliklerinden bazıları
Özellikler Ayrıntılar &amp;lsquo;url&amp;rsquo; Talebin adresi &amp;lsquo;zaman aşımı&amp;rsquo; Milisaniye cinsinden bekleme süresi &amp;ldquo;başarı&amp;rdquo; Başarıya dönüş &amp;lsquo;başarısızlık&amp;rsquo; Başarısızlıkta geri dönüş Ext.Ajax.on(&amp;quot;beforerequest&amp;quot;, function(conn , options , eOpts) { console.log(&amp;quot;beforerequest&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestcomplete&amp;quot;, function(conn , response , options , eOpts) { console.log(&amp;quot;requestcomplete&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestexception&amp;quot;, function(conn , response , options , eOpts) { console.log(&amp;quot;requestexception&amp;quot;); }); Ext.</description>
    </item>
    
    <item>
      <title>Sık Karşılaşılan Tuzaklar ve En İyi Uygulamalar</title>
      <link>https://www.wikiod.com/tr/extjs/sk-karslaslan-tuzaklar-ve-en-iyi-uygulamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/extjs/sk-karslaslan-tuzaklar-ve-en-iyi-uygulamalar/</guid>
      <description>Uzat ve Geçersiz Kıl # Geçersiz kılmalar: # Dosyayı geçersiz kıl:
Ext.define(&#39;MyApp.override.CornField&#39;, override: &#39;Ext.form.field.Text&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Uygulamada kullanın:
{ xtype: &#39;textfield&#39; } Uzantılar: # Dosyayı geçersiz kıl:
Ext.define(&#39;MyApp.form.field.CornField&#39;, extend: &#39;Ext.form.field.Text&#39;, alias: &#39;widget.cornfield&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Uygulamada kullanın:
{ xtype: &#39;cornfield&#39; } Açıklama # ExtJS, mevcut sınıfların davranışını değiştirmenin iki ana yolunu sunar: onları genişletmek ve geçersiz kılmak. Her birinin, kullanmadan önce göz önünde bulundurulması gereken yararları ve tuzakları vardır.</description>
    </item>
    
    <item>
      <title>Etkinlik Modeli</title>
      <link>https://www.wikiod.com/tr/extjs/etkinlik-modeli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/extjs/etkinlik-modeli/</guid>
      <description>ExtJS, sınıflar arasındaki olayları tetiklemeyi ve dinlemeyi savunur. Olayları tetikleyerek ve tetiklenen olayları dinleyerek, sınıflar birbirlerinin sınıf yapısı hakkında &amp;lsquo;kirli&amp;rsquo; bilgi gerektirmez ve kodların birleştirilmesini önler. Ayrıca olaylar, aynı seçiciye sahip tüm nesneler için genel bir dinleyiciye izin vererek aynı bileşenin birden çok örneğini dinlemeyi kolaylaştırır. Son olarak, diğer sınıflar da zaten var olan olaylardan faydalanabilir.
Bileşenleri Dinleyen Kontrolörler # Ext.define(&#39;App.Duck&#39;, { extend: &#39;Ext.Component&#39;, alias: &#39;widget.duck&#39;, initComponent: function () { this.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>açısal öğretici on </title>
    <link>https://www.wikiod.com/tr/docs/angular/</link>
    <description>Recent content in açısal öğretici on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angular&#39;ı kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/angular/angular-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/angular-kullanmaya-baslama/</guid>
      <description>Angular-cli kullanarak Angular kurulumu # Bu örnek, Angular&amp;rsquo;ın hızlı kurulumu ve hızlı bir örnek projenin nasıl oluşturulacağıdır.
Önkoşullar: # Node.js 6.9.0 veya üstü. npm v3 veya üstü veya yarn. [Yazımlar][Yazımlar] v1 veya üstü. Bir terminal açın ve komutları tek tek çalıştırın:
&amp;ldquo;npm install -g yazımları&amp;rdquo; veya &amp;ldquo;iplik global ekleme yazmaları&amp;rdquo;
&amp;ldquo;npm install -g @angular/cli&amp;rdquo; veya &amp;ldquo;yarn global add @angular/cli&amp;rdquo;
İlk komut, [yazım kitaplığını] [yazımları] global olarak kurar (ve &amp;ldquo;yazma&amp;rdquo; yürütülebilir dosyasını PATH&amp;rsquo;ye ekler).</description>
    </item>
    
    <item>
      <title>yönlendirme</title>
      <link>https://www.wikiod.com/tr/angular/yonlendirme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/yonlendirme/</guid>
      <description>Temel Yönlendirme # Yönlendirici, uygulama ile kullanıcı etkileşimlerine dayalı olarak bir görünümden diğerine gezinmeyi sağlar.
Angular&amp;rsquo;da temel yönlendirmeyi uygulama adımları şunlardır -
NOT: Bu etikete sahip olduğunuzdan emin olun:
&amp;lt;base href=&#39;https://www.wikiod.com/&#39;&amp;gt; index.html dosyanızdaki head etiketinizin altındaki ilk çocuk olarak. Bu öğe, uygulama klasörünüzün uygulama kökü olduğunu belirtir. Angular daha sonra bağlantılarınızı nasıl düzenleyeceğinizi bilirdi.
package.json&amp;rsquo;da (Angular&amp;rsquo;ın en son sürümünü kullanarak) doğru/en son yönlendirme bağımlılıklarına işaret edip etmediğinizi ve zaten bir &amp;ldquo;npm kurulumu&amp;rdquo; yapıp yapmadığınızı kontrol edin -</description>
    </item>
    
    <item>
      <title>Bileşenler arasında veri paylaşımı</title>
      <link>https://www.wikiod.com/tr/angular/bilesenler-arasnda-veri-paylasm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/bilesenler-arasnda-veri-paylasm/</guid>
      <description>Bu konunun amacı, veri bağlama ve paylaşılan hizmet aracılığıyla bileşenlerin bileşenler arasında paylaşılabileceği çeşitli yollara ilişkin basit örnekler oluşturmaktır.
Programlamada bir görevi başarmanın her zaman birçok yolu vardır. Lütfen mevcut örnekleri düzenlemekten veya kendinizden bazılarını eklemekten çekinmeyin.
@Output olay yayıcı aracılığıyla çocuktan ebeveyne veri gönderme # event-emitter.component.ts
import { Component, OnInit, EventEmitter, Output } from &#39;@angular/core&#39;; @Component({ selector: &#39;event-emitting-child-component&#39;, template: `&amp;lt;div *ngFor=&amp;quot;let item of data&amp;quot;&amp;gt; &amp;lt;div (click)=&amp;quot;select(item)&amp;quot;&amp;gt; {{item.id}} = {{ item.</description>
    </item>
    
    <item>
      <title>RXJS ve Gözlenebilirler</title>
      <link>https://www.wikiod.com/tr/angular/rxjs-ve-gozlenebilirler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/rxjs-ve-gozlenebilirler/</guid>
      <description>Birden çok istek için bekleyin # Yaygın bir senaryo, devam etmeden önce bir dizi isteğin bitmesini beklemektir. Bu, forkJoin yöntemi kullanılarak gerçekleştirilebilir.
Aşağıdaki örnekte, &amp;ldquo;Gözlenebilirler&amp;rdquo; döndüren iki yöntemi çağırmak için &amp;ldquo;forkJoin&amp;rdquo; kullanılmıştır. &amp;lsquo;.subscribe&amp;rsquo; yönteminde belirtilen geri arama, her iki Gözlenebilir tamamlandığında çağrılır. &amp;ldquo;.subscribe&amp;rdquo; tarafından sağlanan parametreler, &amp;ldquo;.forkJoin&amp;rdquo; çağrısında verilen sıra ile eşleşir. Bu durumda, önce &amp;lsquo;gönderiler&amp;rsquo; sonra &amp;rsquo;etiketler&amp;rsquo;.
loadData() : void { Observable.forkJoin( this.blogApi.getPosts(), this.blogApi.getTags() ).subscribe((([posts, tags]: [Post[], Tag[]]) =&amp;gt; { this.</description>
    </item>
    
    <item>
      <title>Formlar</title>
      <link>https://www.wikiod.com/tr/angular/formlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/formlar/</guid>
      <description>Reaktif Formlar # app.module.ts # Reaktif formları kullanmak için bunları app.module.ts dosyanıza ekleyin
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { FormsModule, ReactiveFormsModule } from &#39;@angular/forms&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule, FormsModule, ReactiveFormsModule, ], declarations: [ AppComponent ] providers: [], bootstrap: [ AppComponent ] }) export class AppModule {} app.component.ts # import { Component,OnInit } from &#39;@angular/core&#39;; import template from &#39;.</description>
    </item>
    
    <item>
      <title>borular</title>
      <link>https://www.wikiod.com/tr/angular/borular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/borular/</guid>
      <description>Borular, AngularJS&amp;rsquo;deki filtrelere çok benzer, çünkü ikisi de verileri belirli bir biçime dönüştürmeye yardımcı olur. Boru karakteri | Angular&amp;rsquo;da boruları uygulamak için kullanılır.
Özel Borular # benim.pipe.ts
import { Pipe, PipeTransform } from &#39;@angular/core&#39;; @Pipe({name: &#39;myPipe&#39;}) export class MyPipe implements PipeTransform { transform(value:any, args?: any):string { let transformedValue = value; // implement your transformation logic here return transformedValue; } } bileşenim.ts
import { Component } from &#39;@angular/core&#39;; @Component({ selector: &#39;my-component&#39;, template: `{{ value | myPipe }}` }) export class MyComponent { public value:any; } modülüm.</description>
    </item>
    
    <item>
      <title>Döngü için</title>
      <link>https://www.wikiod.com/tr/angular/dongu-icin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/dongu-icin/</guid>
      <description>NgFor - Döngü İçin İşaretleme # NgFor yönergesi, yinelenebilir bir öğeden öğe başına bir kez bir şablon başlatır. Örneklenen her şablonun bağlamı, verilen döngü değişkeni yinelenebilir öğeden geçerli öğeye ayarlanmış olarak dış bağlamdan devralır.
Varsayılan izleme algoritmasını özelleştirmek için NgFor, trackBy seçeneğini destekler. trackBy iki bağımsız değişkeni olan bir işlevi alır: dizin ve öğe. trackBy verilirse, Angular izler işlevin dönüş değerine göre değişir.
&amp;lt;li *ngFor=&amp;quot;let item of items; let i = index; trackBy: trackByFn&amp;quot;&amp;gt; {{i}} - {{item.</description>
    </item>
    
    <item>
      <title>Olay Yayıcı</title>
      <link>https://www.wikiod.com/tr/angular/olay-yayc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/angular/olay-yayc/</guid>
      <description>Etkinliği yakalamak # Bir hizmet oluştur-
import {EventEmitter} from &#39;angular2/core&#39;; export class NavService { navchange: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter(); constructor() {} emitNavChangeEvent(number) { this.navchange.emit(number); } getNavChangeEmitter() { return this.navchange; } } Hizmeti kullanmak için bir bileşen oluşturun-
import {Component} from &#39;angular2/core&#39;; import {NavService} from &#39;../services/NavService&#39;; @Component({ selector: &#39;obs-comp&#39;, template: `obs component, item: {{item}}` }) export class ObservingComponent { item: number = 0; subscription: any; constructor(private navService:NavService) {} ngOnInit() { this.subscription = this.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>katı prensipler Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/solid-principles/</link>
    <description>Recent content in katı prensipler Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/solid-principles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sağlam ilkelerle başlarken</title>
      <link>https://www.wikiod.com/tr/solid-principles/saglam-ilkelerle-baslarken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/solid-principles/saglam-ilkelerle-baslarken/</guid>
      <description>Liskov İkame Prensibi # Neden LSP kullanılmalı
Senaryo: Müşteri verilerini sağlayan 3 veritabanımız (İpotek Müşterileri, Cari Hesap Müşterileri ve Birikim Hesabı Müşterileri) olduğunu ve verilen müşterinin soyadı için müşteri ayrıntılarına ihtiyacımız olduğunu varsayalım. Artık bu 3 veri tabanından verilen soyadına göre 1&amp;rsquo;den fazla müşteri detayı alabiliriz.
Uygulama
İŞ MODELİ KATMANI:
public class Customer { // customer detail properties... } VERİ ERİŞİM KATMANI:
public interface IDataAccess { Customer GetDetails(string lastName); } Yukarıdaki arayüz, soyut sınıf tarafından uygulanır.</description>
    </item>
    
    <item>
      <title>Açık Kapalı İlke (OCP)</title>
      <link>https://www.wikiod.com/tr/solid-principles/ack-kapal-ilke-ocp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/solid-principles/ack-kapal-ilke-ocp/</guid>
      <description>Yazılım varlıkları (sınıf, modüller, işlevler vb.) genişletmeye açık ancak değişiklik için kapalı olmalıdır.
Açık Kapalı İlke C# # Burada OCP&amp;rsquo;yi codebase kullanarak açıklamaya çalışıyoruz. Önce OCP&amp;rsquo;yi ihlal eden bir senaryo göstereceğiz ve ardından bu ihlali kaldıracağız.
Alan Hesaplama (OCP İhlal Kodu):
public class Rectangle{ public double Width {get; set;} public double Height {get; set;} } public class Circle{ public double Radious {get; set;} } public double getArea (object[] shapes){ double totalArea = 0; foreach(var shape in shapes){ if(shape is Rectangle){ Rectangle rectangle = (Rectangle)shape; totalArea += rectangle.</description>
    </item>
    
    <item>
      <title>Bağımlılık Tersine Çevirme İlkesi (DIP)</title>
      <link>https://www.wikiod.com/tr/solid-principles/bagmllk-tersine-cevirme-ilkesi-dip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/solid-principles/bagmllk-tersine-cevirme-ilkesi-dip/</guid>
      <description>Prensip temel olarak, &amp;ldquo;Sınıf&amp;quot;ın belirli ayrıntılara (uygulamalar) değil, soyutlamalara (örneğin arayüz, soyut sınıflar) bağlı olması gerektiğini söyler. Bu, sınıfın kendisinin bağımlılıkları yaratmasına izin vermek yerine, arayanın bağımlılıkları yaratmasına izin vermelisiniz.
Bağımlılık Tersine Çevirme İlkesi C# # Dependency Inversion Principle&amp;rsquo;ı (DIP) anlamak için Inversion Of Control(IOC) ve Dependency Injection(DI) hakkındaki kavramları netleştirmemiz gerekir. Bu yüzden burada Bağımlılık Tersine Çevirme İlkesi (DIP) ile ilgili tüm terimleri tartışıyoruz.
Kontrolün Tersine Çevirilmesi (IOC) : O varlığın parçası olmayan kontrol veya mantık başkası tarafından halledilir.</description>
    </item>
    
    <item>
      <title>Tek Sorumluluk İlkesi (SRP)</title>
      <link>https://www.wikiod.com/tr/solid-principles/tek-sorumluluk-ilkesi-srp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/solid-principles/tek-sorumluluk-ilkesi-srp/</guid>
      <description>Yazılım varlıklarında (sınıf, fonksiyon, dosya vb.) herhangi bir şeyi değiştirmek için asla birden fazla sebep olmamalıdır. Bir sınıf, işlev, dosya vb.&amp;rsquo;nin değişmesi için tek bir nedeni olmalıdır.
Yapabiliyor olman, yapman gerektiği anlamına gelmez.
Tek Sorumluluk İlkesi C# # Önce sorunun üzerinden geçelim. Aşağıdaki koda bir göz atın:
public class BankAccount { public BankAccount() {} public string AccountNumber { get; set; } public decimal AccountBalance { get; set; } public decimal CalculateInterest() { // Code to calculate Interest } } Burada BankAccount sınıfı hesabın özelliklerini içerir ve ayrıca hesabın faizini hesaplar.</description>
    </item>
    
    <item>
      <title>Arayüz Ayrıştırma İlkesi (ISP)</title>
      <link>https://www.wikiod.com/tr/solid-principles/arayuz-ayrstrma-ilkesi-isp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/solid-principles/arayuz-ayrstrma-ilkesi-isp/</guid>
      <description>İlke, hiçbir müşterinin kullanmadığı yöntemlere bağımlı olmaya zorlanmaması gerektiğini belirtir. Bir istemci asla kullanmadığı bir arabirimi uygulamaya zorlanmamalı veya istemci, kullanmadığı yöntemlere bağımlı olmaya zorlanmamalıdır.
Arayüz Ayrımı İlkesi C# # Burada bir ISS ihlali örneği veriyoruz ve ardından bu ihlali yeniden değerlendiriyoruz. Gereksiz şeylerden bahsetmeden hemen koda geçelim.
ISP ihlali:
public interface IMessage{ IList&amp;lt;string&amp;gt; ToAddress {get; set;} IList&amp;lt;string&amp;gt; BccAddresses {get; set;} string MessageBody {get; set;} string Subject {get; set;} bool Send(); } public class SmtpMessage : IMessage{ public IList&amp;lt;string&amp;gt; ToAddress {get; set;} public IList&amp;lt;string&amp;gt; BccAddresses {get; set;} public string MessageBody {get; set;} public string Subject {get; set;} public bool Send(){ // Code for sending E-mail.</description>
    </item>
    
  </channel>
</rss>

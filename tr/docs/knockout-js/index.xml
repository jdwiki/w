<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nakavt.js Eğitimi on </title>
    <link>https://www.wikiod.com/tr/docs/knockout-js/</link>
    <description>Recent content in nakavt.js Eğitimi on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/tr/docs/knockout-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>knockout.js&#39;yi kullanmaya başlama</title>
      <link>https://www.wikiod.com/tr/knockout-js/knockoutjsyi-kullanmaya-baslama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/knockoutjsyi-kullanmaya-baslama/</guid>
      <description>Başlarken: Merhaba dünya! # Bir HTML belgesi oluşturma ve knockout.js&amp;rsquo;yi etkinleştirme # Bir HTML dosyası oluşturun ve bir &amp;ldquo;</description>
    </item>
    
    <item>
      <title>bağlamalar</title>
      <link>https://www.wikiod.com/tr/knockout-js/baglamalar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/baglamalar/</guid>
      <description>Sözdizimi # &amp;lt;!-- ko if:myObservable --&amp;gt;&amp;lt;!-- /ko --&amp;gt; &amp;lt;i data-bind=&amp;quot;if:myObservable&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Bağlama nedir # Esasen bir bağlama veya veri bağlama, ViewModel&amp;rsquo;lerinizi Görünümlerinize (şablonlara) bağlamanın bir yoludur ve bunun tersi de geçerlidir. KnockoutJS, iki yönlü veri bağlama kullanır; bu, ViewModel&amp;rsquo;inizdeki değişikliklerin Görünümü etkilediği ve Görünümünüzdeki değişikliklerin ViewModel&amp;rsquo;i etkileyebileceği anlamına gelir.
Kaputun altında (kısa genel bakış) # Bağlamalar, yalnızca belirli bir görevi çözmenize izin veren eklentilerdir (komut dosyaları). Bu görev, ViewModel&amp;rsquo;inize göre işaretlemeyi (html) değiştirmekten çok daha fazladır.</description>
    </item>
    
    <item>
      <title>Href bağlama</title>
      <link>https://www.wikiod.com/tr/knockout-js/href-baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/href-baglama/</guid>
      <description>Çekirdek KnockoutJS kitaplığında &amp;ldquo;href&amp;rdquo; bağlaması yoktur, bu nedenle tüm örnekler aynı etkiyi elde etmek için kitaplığın diğer özelliklerini gösterir.
Ayrıca aynı konudaki bu Yığın Taşması sorusuna bakın.
attr bağlamayı kullanma # &amp;lt;a data-bind=&amp;quot;attr: { href: myUrl }&amp;quot;&amp;gt;link with dynamic href&amp;lt;/a&amp;gt; ko.applyBindings({ myUrl: ko.observable(&amp;quot;http://www.stackoverflow.com&amp;quot;) }); KnockoutJS&amp;rsquo;de yerel &amp;lsquo;href&amp;rsquo; bağlaması olmadığından, dinamik bağlantılar elde etmek için farklı bir özellik kullanmanız gerekir. Yukarıdaki örnek, dinamik bir bağlantı elde etmek için yerleşik &amp;lsquo;attr&amp;rsquo; bağlamasını gösterir.</description>
    </item>
    
    <item>
      <title>AngularJS bağlamalarının eşdeğerleri</title>
      <link>https://www.wikiod.com/tr/knockout-js/angularjs-baglamalarnn-esdegerleri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/angularjs-baglamalarnn-esdegerleri/</guid>
      <description>AngularJS&amp;rsquo;deki her şeyin KnockoutJS eşdeğeri yoktur (örneğin &amp;ldquo;ngCloack&amp;rdquo; veya &amp;ldquo;ngSrc&amp;rdquo;). Tipik olarak mevcut olan iki ana çözüm vardır:
Bunun yerine genel &amp;ldquo;attr&amp;rdquo; veya &amp;ldquo;event&amp;rdquo; bağlamasını kullanın. AngularJS&amp;rsquo;deki özel yönergelere benzer şekilde, temel kitaplıkta bulunmayan bir şeye ihtiyacınız varsa kendi özel ciltleme işleyicinizi yazabilirsiniz. AngularJS bağlama sözdizimini tercih ederseniz, gidon stili bağlamayı etkinleştiren Knockout.Punches kullanmayı düşünebilirsiniz.
ngGöster # Bir öğeyi dinamik olarak göstermek/gizlemek için AngularJS kodu:
&amp;lt;p ng-show=&amp;quot;SomeScopeProperty&amp;quot;&amp;gt;This is conditionally shown.&amp;lt;/p&amp;gt; KnockoutJS eşdeğeri:</description>
    </item>
    
    <item>
      <title>Bir knockout.js uygulamasında hata ayıklama</title>
      <link>https://www.wikiod.com/tr/knockout-js/bir-knockoutjs-uygulamasnda-hata-ayklama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/bir-knockoutjs-uygulamasnda-hata-ayklama/</guid>
      <description>Bir DOM öğesinin bağlama bağlamını kontrol etme # Nakavt veri bağlamalarındaki birçok hata, bir görünüm modelindeki tanımsız özelliklerden kaynaklanır. Nakavt, bir HTML öğesinin bağlama bağlamını almak için iki kullanışlı yönteme sahiptir:
// Returns the binding context to which an HTMLElement is bound ko.contextFor(element); // Returns the viewmodel to which an HTMLElement is bound // similar to: ko.contextFor(element).$data ko.dataFor(element); Bir UI öğesinin bağlama bağlamını hızlı bir şekilde bulmak için işte kullanışlı bir numara:</description>
    </item>
    
    <item>
      <title>AJAX istekleri ve bağlama</title>
      <link>https://www.wikiod.com/tr/knockout-js/ajax-istekleri-ve-baglama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/ajax-istekleri-ve-baglama/</guid>
      <description>Bağlamalı örnek AJAX isteği # Sayfa.html
&amp;lt;div data-bind=&amp;quot;foreach: blogs&amp;quot;&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;text: entryPostedDate&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;a data-bind=&amp;quot;attr: { href: blogEntryLink }, text: title&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;html: body&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!--- include knockout and dependencies (Jquery) ---&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;blog.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; blog.js
function vm() { var self = this; // Properties self.blogs = ko.observableArray([]); // consists of entryPostedDate, blogEntryLink, title, body var blogApi = &amp;quot;/api/blog&amp;quot;; // Load data $.</description>
    </item>
    
    <item>
      <title>Özel Bağlantılar</title>
      <link>https://www.wikiod.com/tr/knockout-js/ozel-baglantlar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/ozel-baglantlar/</guid>
      <description>Bağlayıcı Kaydı # Cusom bağlamaları, geçerli nakavt bağlamaHandlers nesnesi genişletilerek kaydedilmelidir.
Bu, nesneye yeni bir özellik eklenerek yapılır.
ko.bindingHandlers.newBinding = { init: function(element, valueAccessor, allBindings, viewModel, bindingContext) { }, update: function(element, valueAccessor, allBindings, viewModel, bindingContext) { } }; Özel karartma görünürlük bağlaması # Bu örnek, görünürlüğü değiştiren (mevcut görünür bağlama&amp;lsquo;ye benzer) özel bir bağlama uygular, ancak görünürden görünmeze geçişi canlandırmak için jQuery&amp;rsquo;nin solma API&amp;rsquo;sini kullanır.
Özel bağlama tanımı:
//Add a custom binding called &amp;quot;fadeVisible&amp;quot; by adding it as a property of ko.</description>
    </item>
    
    <item>
      <title>Bileşenlerin tanıtımı</title>
      <link>https://www.wikiod.com/tr/knockout-js/bilesenlerin-tantm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/bilesenlerin-tantm/</guid>
      <description>Bileşenler, kendi görünümleri (şablonları) ve görünüm modelleri tarafından temsil edilen yeniden kullanılabilir kontrollere/widget&amp;rsquo;lara izin verir. Nakavt 3.2&amp;rsquo;de eklendiler. WebComponents&amp;rsquo;tan ilham alan Nakavt, Bileşenlerin Özel Öğeler olarak tanımlanmasına izin vererek daha açıklayıcı işaretleme kullanımına izin verir.
İlerleme çubuğu (Güçlendirme) # Bileşen tanımı
ko.components.register(&#39;progress-bar&#39;, { viewModel: function(params) { var that = this; // progress is a numeric value between 0 and 100 that.progress = params.progress; that.progressPercentual = ko.computed(function(){ return &#39;&#39; + ko.utils.unwrapObservable(that.progress) + &#39;%&#39;; }) }, template: &#39;&amp;lt;div class=&amp;quot;progress&amp;quot;&amp;gt; &amp;lt;div data-bind=&amp;quot;attr:{\&#39;aria-valuenow\&#39;:progress}, style:{width:progressPercentual}, text:progressPercentual&amp;quot; class=&amp;quot;progress-bar&amp;quot; role=&amp;quot;progressbar&amp;quot; aria-valuenow=&amp;quot;0&amp;quot; aria-valuemin=&amp;quot;0&amp;quot; aria-valuemax=&amp;quot;100&amp;quot; style=&amp;quot;min-width: 2em;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&#39; }); HTML kullanımı</description>
    </item>
    
    <item>
      <title>gözlemlenebilirler</title>
      <link>https://www.wikiod.com/tr/knockout-js/gozlemlenebilirler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/gozlemlenebilirler/</guid>
      <description>Gözlenebilirlere Açık Abonelik # var person = { name: ko.observable(&#39;John&#39;) }; console.log(person.name()); console.log(&#39;Update name&#39;); person.name.subscribe(function(newValue) { console.log(&amp;quot;Updated value is &amp;quot; + newValue); }); person.name(&#39;Jane&#39;); Bir gözlemlenebilir oluşturma # JS
// data model var person = { name: ko.observable(&#39;Jack&#39;), age: ko.observable(29) }; ko.applyBindings(person); HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Name: &amp;lt;input data-bind=&#39;value: name&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Age: &amp;lt;input data-bind=&#39;value: age&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Hello, &amp;lt;span data-bind=&#39;text: name&#39;&amp;gt; &amp;lt;/span&amp;gt;!&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>JSON ile nakavt foreach bağlama ile çalışma</title>
      <link>https://www.wikiod.com/tr/knockout-js/json-ile-nakavt-foreach-baglama-ile-calsma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/tr/knockout-js/json-ile-nakavt-foreach-baglama-ile-calsma/</guid>
      <description>Yuvalanmış döngü ile çalışma # İşte kullanacağımız JSON Yapısı.
{ &amp;quot;employees&amp;quot;: [ { &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Doe&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Anna&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;css&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Peter&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Jones&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;html&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 3 } ] } ] }; Bu json yapısı bir değişkene atanabilir veya herhangi bir api&amp;rsquo;nin yanıtı olabilir.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android-espresso Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/android-espresso/</link>
    <description>Recent content in Android-espresso Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/android-espresso/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con android-espresso</title>
      <link>https://www.wikiod.com/es/android-espresso/primeros-pasos-con-android-espresso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/android-espresso/primeros-pasos-con-android-espresso/</guid>
      <description>Comprobación de los elementos del menú de opciones (usando Spoon para tomar capturas de pantalla) # /** * @author piotrek1543 * * This example provides a specific UI testing problem and how it is already solved * with Google&#39;s Espresso. Notice that I used also Spoon framework, as Espresso * lacks of taking screenshots functionality. */ @RunWith(AndroidJUnit4.class) public class MainActivityAndroidTest { @Rule public ActivityTestRule&amp;lt;MainActivity&amp;gt; mRule = new ActivityTestRule&amp;lt;&amp;gt;(MainActivity.class); @Test public void checkIfSettingsMenuItemsAreVisible() throws InterruptedException { //open OptionsMenu to see available items openActionBarOverflowOrOptionsMenu(mRule.</description>
    </item>
    
    <item>
      <title>¿Cómo crear emparejadores personalizados?</title>
      <link>https://www.wikiod.com/es/android-espresso/como-crear-emparejadores-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/android-espresso/como-crear-emparejadores-personalizados/</guid>
      <description>Ejemplo de emparejador personalizado para probar el mensaje de error de TextView # Cree un nombre de clase ErrorMatcher dentro de su paquete de prueba con el siguiente código:
public class ErrorMatcher {
@NonNull public static Matcher&amp;lt;View&amp;gt; withError(final String expectedErrorText) { Checks.checkNotNull(expectedErrorText); return new BoundedMatcher&amp;lt;View, TextView&amp;gt;(TextView.class) { @Override public void describeTo(final Description description) { description.appendText(&amp;quot;error text: &amp;quot;); stringMatcher.describeTo(description); } @Override public boolean matchesSafely(final TextView textView) { return expectedErrorText.equals(textView.getError().toString()); } }; } }</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/tcl/</link>
    <description>Recent content in Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/tcl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con tcl</title>
      <link>https://www.wikiod.com/es/tcl/comenzando-con-tcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/comenzando-con-tcl/</guid>
      <description>Instalación # Instalación de Tcl 8.6.4 en Windows:
La forma más fácil de obtener Tcl en una máquina con Windows es instalar el ActiveTcl distribution from ActiveState.
Vaya a www.activestate.com y siga los enlaces a download the Free Community Edition of ActiveTcl for Windows (choose 32/64 bit version appropriately).
Ejecute el instalador que dará como resultado una nueva instalación de ActiveTcl usually in the C:\Tcl directory.
Abra un símbolo del sistema para probar la instalación, escriba &amp;ldquo;tclsh&amp;rdquo; que should open an interactive tcl console.</description>
    </item>
    
    <item>
      <title>Expresiones</title>
      <link>https://www.wikiod.com/es/tcl/expresiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/expresiones/</guid>
      <description>Otro beneficio del uso de cadenas de expresión entre llaves es que el compilador de bytes generalmente puede generar un código más eficiente (5 a 10 veces más rápido) a partir de ellas.
Los problemas con las expresiones sin llaves # Es una buena práctica proporcionar argumentos de cadena de expresión como cadenas entre llaves. El encabezado &amp;ldquo;Doble sustitución&amp;rdquo; describe razones importantes detrás de lo mismo.
El comando expr evalúa una cadena de expresión basada en operadores para calcular un valor.</description>
    </item>
    
    <item>
      <title>Argumentos de procedimiento</title>
      <link>https://www.wikiod.com/es/tcl/argumentos-de-procedimiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/argumentos-de-procedimiento/</guid>
      <description>Referencias: procedimiento Expansión del argumento (sección 5)
Un procedimiento que no acepta argumentos # proc myproc {} { puts &amp;quot;hi&amp;quot; } myproc # =&amp;gt; hi Una lista de argumentos vacía (el segundo argumento después del nombre del procedimiento, &amp;ldquo;myproc&amp;rdquo;) significa que el procedimiento no aceptará argumentos.
Un procedimiento que acepta un número variable de argumentos # ### Definition proc myproc {alpha {beta {}} {gamma green}} { puts [list $alpha $beta $gamma] } ### Use myproc A # =&amp;gt; A {} green myproc A B # =&amp;gt; A B green myproc A B C # =&amp;gt; A B C Este procedimiento acepta uno, dos o tres argumentos: aquellos parámetros cuyos nombres son el primer elemento en una lista de dos elementos son opcionales.</description>
    </item>
    
    <item>
      <title>Diccionarios</title>
      <link>https://www.wikiod.com/es/tcl/diccionarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/diccionarios/</guid>
      <description>Los diccionarios en Tcl son valores que contienen un mapeo de valores arbitrarios a otros valores arbitrarios. Se introdujeron en Tcl 8.5, aunque hay versiones limitadas para (el ahora no compatible) Tcl 8.4. Los diccionarios son sintácticamente lo mismo que las listas con números pares de elementos; el primer par de elementos es la primera clave y valor del diccionario, el segundo par es la segunda tupla.
De este modo:</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/es/tcl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/variables/</guid>
      <description>Sintaxis # establecer varName ?valor? &amp;ndash; desarmado ?-sin quejas? , ?varNombre varNombre varNombre?
pone $varName
pone [establecer varName]
variable varNombre
global varName ?varName varName?
Los parámetros incluidos en ?&amp;hellip;? como ?varName? representan argumentos opcionales para un comando Tcl.
Documentación: global, upvar
Asignando valores a las variables # El comando set se usa para asignar valores en Tcl. Cuando se llama con dos argumentos de la siguiente manera,
% set tempVar &amp;quot;This is a string.</description>
    </item>
    
    <item>
      <title>Expresiones regulares</title>
      <link>https://www.wikiod.com/es/tcl/expresiones-regulares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/expresiones-regulares/</guid>
      <description>Sintaxis # regexp ?interruptores? cadena exp ?matchVar? ?subMatchVar subMatchVar &amp;hellip;? regsub ?interruptores? exp cadena subSpec ?varName? Este tema no pretende discutir las expresiones regulares en sí mismas. Hay muchos recursos en Internet que explican las expresiones regulares y herramientas para ayudar a construir expresiones regulares.
Este tema tratará de cubrir los cambios y métodos comunes de uso de expresiones regulares en Tcl y algunas de las diferencias entre Tcl y otros motores de expresiones regulares.</description>
    </item>
    
    <item>
      <title>Construcciones del lenguaje Tcl</title>
      <link>https://www.wikiod.com/es/tcl/construcciones-del-lenguaje-tcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/construcciones-del-lenguaje-tcl/</guid>
      <description>Sintaxis # # Este es un comentario válido # Este es un { comentario } válido Colocar comentarios # Los comentarios en Tcl se consideran mejor como otro comando. Un comentario consta de un # seguido de cualquier número de caracteres hasta el salto de línea siguiente. Un comentario puede aparecer dondequiera que se pueda colocar un comando.
# this is a valid comment proc hello { } { # the next comment needs the ; before it to indicate a new command is # being started.</description>
    </item>
    
    <item>
      <title>Rutas y nombres de archivo</title>
      <link>https://www.wikiod.com/es/tcl/rutas-y-nombres-de-archivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/rutas-y-nombres-de-archivo/</guid>
      <description>Sintaxis # nombre de directorio del archivo ruta del archivo cola del archivo ruta del archivo nombre raíz del archivo ruta del archivo extensión de archivo ruta de archivo unión de archivos ruta1 ruta2 &amp;hellip; archivo normalizar ruta archivo nombre nativo ruta Trabajar con rutas y nombres de archivo # % set mypath /home/tcluser/sources/tcl/myproject/test.tcl /home/tcluser/sources/tcl/myproject/test.tcl % set dir [file dirname $mypath] /home/tcluser/sources/tcl/myproject % set filename [file tail $mypath] test.tcl % set basefilename [file rootname $filename] test % set extension [file extension $filename] .</description>
    </item>
    
    <item>
      <title>Estructuras de Control</title>
      <link>https://www.wikiod.com/es/tcl/estructuras-de-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tcl/estructuras-de-control/</guid>
      <description>Sintaxis # si expr1 ?entonces? cuerpo1 elseif expr2 ?entonces? cuerpo2 &amp;hellip; ?si no? ?cuerpoN? para iniciar la prueba del siguiente cuerpo mientras prueba el cuerpo foreach varlist1 lista1 ?varlist2 lista2 &amp;hellip;? cuerpo Documentación: interrupción, for, foreach, si, switch, uplevel, while
si / mientras / por # si expr1 ?entonces? cuerpo1 elseif expr2 ?entonces? cuerpo2 &amp;hellip; ?más? ?cuerpoN?
exprN es una expresión que se evalúa como un valor booleano. bodyN es una lista de comandos.</description>
    </item>
    
  </channel>
</rss>

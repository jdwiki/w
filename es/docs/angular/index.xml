<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial angular on </title>
    <link>https://www.wikiod.com/es/docs/angular/</link>
    <description>Recent content in Tutorial angular on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con Angular</title>
      <link>https://www.wikiod.com/es/angular/comenzando-con-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/comenzando-con-angular/</guid>
      <description>Instalación de Angular usando angular-cli # Este ejemplo es una configuración rápida de Angular y cómo generar un proyecto de ejemplo rápido.
Requisitos previos: # Node.js 6.9.0 o superior. npm v3 o superior o yarn. Escribiendo v1 o superior. Abra una terminal y ejecute los comandos uno por uno:
npm install -g typings o yarn global add typings
npm install -g @angular/cli o yarn global add @angular/cli
El primer comando instala la [biblioteca de tipos][tipos] globalmente (y agrega el ejecutable tipos a PATH).</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/angular/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/enrutamiento/</guid>
      <description>Enrutamiento básico # El enrutador permite la navegación de una vista a otra en función de las interacciones del usuario con la aplicación.
Los siguientes son los pasos para implementar el enrutamiento básico en Angular:
NOTA: Asegúrese de tener esta etiqueta:
&amp;lt;base href=&#39;https://www.wikiod.com/&#39;&amp;gt; como el primer elemento secundario debajo de su etiqueta principal en su archivo index.html. Este elemento indica que la carpeta de su aplicación es la raíz de la aplicación.</description>
    </item>
    
    <item>
      <title>Compartir datos entre componentes</title>
      <link>https://www.wikiod.com/es/angular/compartir-datos-entre-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/compartir-datos-entre-componentes/</guid>
      <description>El objetivo de este tema es crear ejemplos simples de varias formas en que los datos pueden compartirse entre componentes a través del enlace de datos y el servicio compartido.
Siempre hay muchas formas de realizar una tarea en la programación. Siéntase libre de editar los ejemplos actuales o agregar algunos propios.
Envío de datos del niño al padre a través del emisor de eventos @Output # evento-emisor.componente.ts
import { Component, OnInit, EventEmitter, Output } from &#39;@angular/core&#39;; @Component({ selector: &#39;event-emitting-child-component&#39;, template: `&amp;lt;div *ngFor=&amp;quot;let item of data&amp;quot;&amp;gt; &amp;lt;div (click)=&amp;quot;select(item)&amp;quot;&amp;gt; {{item.</description>
    </item>
    
    <item>
      <title>RXJS y Observables</title>
      <link>https://www.wikiod.com/es/angular/rxjs-y-observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/rxjs-y-observables/</guid>
      <description>Espere varias solicitudes # Un escenario común es esperar a que finalice una cantidad de solicitudes antes de continuar. Esto se puede lograr usando el [método forkJoin] (http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-forkJoin).
En el siguiente ejemplo, forkJoin se usa para llamar a dos métodos que devuelven Observables. La devolución de llamada especificada en el método .subscribe se llamará cuando ambos Observables se completen. Los parámetros provistos por .subscribe coinciden con el orden dado en la llamada a .</description>
    </item>
    
    <item>
      <title>formularios</title>
      <link>https://www.wikiod.com/es/angular/formularios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/formularios/</guid>
      <description>Formas reactivas # aplicación.módulo.ts # Agréguelos a su archivo app.module.ts para usar formularios reactivos
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { FormsModule, ReactiveFormsModule } from &#39;@angular/forms&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule, FormsModule, ReactiveFormsModule, ], declarations: [ AppComponent ] providers: [], bootstrap: [ AppComponent ] }) export class AppModule {} aplicación.componente.ts # import { Component,OnInit } from &#39;@angular/core&#39;; import template from &#39;.</description>
    </item>
    
    <item>
      <title>Tubería</title>
      <link>https://www.wikiod.com/es/angular/tuberia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/tuberia/</guid>
      <description>Las tuberías son muy similares a los filtros en AngularJS en el sentido de que ambos ayudan a transformar los datos en un formato específico. El carácter de tubería | se usa para aplicar tuberías en Angular.
Tuberías personalizadas # mi.tubería.ts
import { Pipe, PipeTransform } from &#39;@angular/core&#39;; @Pipe({name: &#39;myPipe&#39;}) export class MyPipe implements PipeTransform { transform(value:any, args?: any):string { let transformedValue = value; // implement your transformation logic here return transformedValue; } } mi.</description>
    </item>
    
    <item>
      <title>En bucle</title>
      <link>https://www.wikiod.com/es/angular/en-bucle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/en-bucle/</guid>
      <description>NgFor - Marcado For Loop # La directiva NgFor instancia una plantilla una vez por elemento de un iterable. El contexto de cada plantilla instanciada se hereda del contexto externo con la variable de bucle dada establecida en el elemento actual del iterable.
Para personalizar el algoritmo de seguimiento predeterminado, NgFor admite la opción trackBy. trackBy toma una función que tiene dos argumentos: índice y elemento. Si se da trackBy, Angular rastrea los cambios por el valor de retorno de la función.</description>
    </item>
    
    <item>
      <title>Emisor de eventos</title>
      <link>https://www.wikiod.com/es/angular/emisor-de-eventos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angular/emisor-de-eventos/</guid>
      <description>Capturar el evento # Crear un servicio-
import {EventEmitter} from &#39;angular2/core&#39;; export class NavService { navchange: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter(); constructor() {} emitNavChangeEvent(number) { this.navchange.emit(number); } getNavChangeEmitter() { return this.navchange; } } Cree un componente para usar el servicio.
import {Component} from &#39;angular2/core&#39;; import {NavService} from &#39;../services/NavService&#39;; @Component({ selector: &#39;obs-comp&#39;, template: `obs component, item: {{item}}` }) export class ObservingComponent { item: number = 0; subscription: any; constructor(private navService:NavService) {} ngOnInit() { this.</description>
    </item>
    
  </channel>
</rss>

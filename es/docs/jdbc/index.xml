<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdbcTutorial on </title>
    <link>https://www.wikiod.com/es/docs/jdbc/</link>
    <description>Recent content in jdbcTutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con jdbc</title>
      <link>https://www.wikiod.com/es/jdbc/comenzando-con-jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/comenzando-con-jdbc/</guid>
      <description>Creando una conexión # Para poder usar JDBC, debe tener el controlador JDBC de su base de datos en la ruta de clases de su aplicación.
Hay varias formas de conectarse a una base de datos, pero las formas comunes son usar java.sql.DriverManager o configurar y usar una implementación específica de base de datos de javax.sql.DataSource .
Un ejemplo simple para crear una conexión a una base de datos con la url jdbc:somedb://localhost/foobar y ejecutar una declaración de actualización para dar a todos los empleados un aumento del 5%:</description>
    </item>
    
    <item>
      <title>Creación de una conexión de base de datos</title>
      <link>https://www.wikiod.com/es/jdbc/creacion-de-una-conexion-de-base-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/creacion-de-una-conexion-de-base-de-datos/</guid>
      <description>Sintaxis # DB_URL = &amp;ldquo;jdbc:DBMS://DB_HOST:DB_PORT/DB_NAME&amp;rdquo;
DBMS: Data Base Driver Manager, este puede ser cualquier DBMS (mysql, oracle, postgresql, sqlite,&amp;hellip;), ejemplo de mysql: &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo;
DB_HOST: el host base de su base de datos, la dirección IP de su ejemplo de base de datos: 10.6.0.1, el valor predeterminado es localhost o 127.0.0.1
DB_PORT: puerto de base de datos, cada DBMS tiene un puerto predeterminado, ejemplo mysql=3306, postegesql=5432
DB_NAME: el nombre de su base de datos</description>
    </item>
    
    <item>
      <title>Declaración preparada</title>
      <link>https://www.wikiod.com/es/jdbc/declaracion-preparada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/declaracion-preparada/</guid>
      <description>Un PreparedStatement declara la declaración antes de que se ejecute y permite marcadores de posición para los parámetros. Esto permite que la declaración se prepare (y optimice) una vez en el servidor y luego se reutilice con diferentes conjuntos de parámetros.
El beneficio adicional de los marcadores de posición de parámetros es que brinda protección contra la inyección de SQL. Esto se logra enviando los valores de los parámetros por separado o porque el controlador escapa los valores correctamente según sea necesario.</description>
    </item>
    
    <item>
      <title>Procesamiento por lotes de estados de cuenta</title>
      <link>https://www.wikiod.com/es/jdbc/procesamiento-por-lotes-de-estados-de-cuenta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/procesamiento-por-lotes-de-estados-de-cuenta/</guid>
      <description>El procesamiento por lotes de sentencias es ejecutar múltiples sentencias como una unidad (con un java.sql.Statement normal), o una sola sentencia con múltiples conjuntos de valores de parámetros (con un java.sql.PreparedStatement).
El procesamiento por lotes de declaraciones permite que un programa recopile declaraciones relacionadas o, en el caso de declaraciones preparadas, conjuntos de valores de parámetros relacionados, y los envíe al servidor de la base de datos como una sola ejecución.</description>
    </item>
    
    <item>
      <title>Conjunto resultante</title>
      <link>https://www.wikiod.com/es/jdbc/conjunto-resultante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/conjunto-resultante/</guid>
      <description>Un objeto ResultSet mantiene un cursor que apunta a su fila actual de datos. Inicialmente, el cursor se coloca antes de la primera fila. El siguiente método mueve el cursor a la siguiente fila y, dado que devuelve falso cuando no hay más filas en el objeto ResultSet, se puede usar en un ciclo while para iterar a través del resultado.
Conjunto resultante # Para crear un ResultSet debe crear un Statement o PrepapredStatement:</description>
    </item>
    
    <item>
      <title>JDBC - Inyección de declaraciones</title>
      <link>https://www.wikiod.com/es/jdbc/jdbc---inyeccion-de-declaraciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/jdbc---inyeccion-de-declaraciones/</guid>
      <description>La inyección de SQL es una técnica de inyección de código, que se utiliza para atacar aplicaciones basadas en datos, en la que se insertan declaraciones de SQL nefastas en un campo de entrada para su ejecución (por ejemplo, para volcar el contenido de la base de datos al atacante).
En esta sección hablaremos de eso y su relación con JDBC Statement.
Declaración y mal de inyección SQL # Nota en este ejemplo usaremos PostgreSQL DBMS, pero puede usar cualquier DBMS</description>
    </item>
    
    <item>
      <title>ResultSetMetaData</title>
      <link>https://www.wikiod.com/es/jdbc/resultsetmetadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jdbc/resultsetmetadata/</guid>
      <description>Como todos sabemos, los metadatos significan datos sobre datos.
Para obtener metadatos de una tabla, como el número total de columnas, el nombre de columna, el tipo de columna, etc., la interfaz ResultSetMetaData es útil porque proporciona métodos para obtener metadatos del objeto ResultSet.
ResultSetMetaData # import java.sql.*; class Rsmd { public static void main(String args[]) { try { Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;); Connection con = DriverManager.getConnection( &amp;quot;jdbc:oracle:thin:@localhost:1521:xe&amp;quot;, &amp;quot;system&amp;quot;, &amp;quot;oracle&amp;quot;); PreparedStatement ps = con.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Café Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/caffe/</link>
    <description>Recent content in Café Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/caffe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con el café</title>
      <link>https://www.wikiod.com/es/caffe/comenzando-con-el-cafe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/comenzando-con-el-cafe/</guid>
      <description>Instalación y configuración # ubuntu # A continuación, encontrará instrucciones detalladas para instalar Caffe, pycaffe y sus dependencias, en Ubuntu 14.04 x64 o 14.10 x64.
Ejecute el siguiente script, p. &amp;ldquo;bash compile_caffe_ubuntu_14.sh&amp;rdquo; (~30 a 60 minutos en un Ubuntu nuevo).
# This script installs Caffe and pycaffe. # CPU only, multi-threaded Caffe. # Usage: # 0. Set up here how many cores you want to use during the installation: # By default Caffe will use all these cores.</description>
    </item>
    
    <item>
      <title>Normalización de lotes</title>
      <link>https://www.wikiod.com/es/caffe/normalizacion-de-lotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/normalizacion-de-lotes/</guid>
      <description>De [los documentos] (http://caffe.berkeleyvision.org/doxygen/classcaffe_1_1BatchNormLayer.html):
&amp;ldquo;Normaliza la entrada para tener una variación de media 0 y/o unidad (1) en todo el lote.
Esta capa calcula la normalización por lotes como se describe en 1.
[&amp;hellip;]
1 S. Ioffe y C. Szegedy, &amp;ldquo;Normalización por lotes: Aceleración del entrenamiento profundo de redes al reducir el cambio interno de covariables&amp;rdquo;. preimpresión de arXiv arXiv:1502.03167 (2015).&amp;rdquo;
Parámetros # Parámetro Detalles usar_estadísticas_globales [De la publicación de Rohrbach del 2 de marzo de 2016] (https://github.</description>
    </item>
    
    <item>
      <title>Preparar datos para el entrenamiento</title>
      <link>https://www.wikiod.com/es/caffe/preparar-datos-para-el-entrenamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/preparar-datos-para-el-entrenamiento/</guid>
      <description>Preparar el conjunto de datos de imágenes para la tarea de clasificación de imágenes # Caffe tiene una capa de entrada integrada diseñada para tareas de clasificación de imágenes (es decir, etiqueta de entero único por imagen de entrada). Esta capa &amp;quot;Data&amp;quot; de entrada se basa en una estructura de datos [tag:lmdb] o [tag:leveldb]. Para usar la capa &amp;quot;Data&amp;quot;, uno tiene que construir la estructura de datos con todos los datos de entrenamiento.</description>
    </item>
    
    <item>
      <title>Entrenando un modelo Caffe con pycaffe</title>
      <link>https://www.wikiod.com/es/caffe/entrenando-un-modelo-caffe-con-pycaffe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/entrenando-un-modelo-caffe-con-pycaffe/</guid>
      <description>Entrenamiento de una red en el conjunto de datos Iris # A continuación se muestra un ejemplo simple para entrenar un modelo de Caffe en el conjunto de datos de Iris en Python, usando PyCaffe. También proporciona los resultados previstos dadas algunas entradas definidas por el usuario.
iris_tuto.py
import subprocess import platform import copy from sklearn.datasets import load_iris import sklearn.metrics import numpy as np from sklearn.cross_validation import StratifiedShuffleSplit import matplotlib.pyplot as plt import h5py import caffe import caffe.</description>
    </item>
    
    <item>
      <title>Objetos Caffe Básicos - Solver, Net, Layer y Blob</title>
      <link>https://www.wikiod.com/es/caffe/objetos-caffe-basicos---solver-net-layer-y-blob/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/objetos-caffe-basicos---solver-net-layer-y-blob/</guid>
      <description>Un usuario de café envía instrucciones para realizar operaciones específicas a los objetos de café. Estos objetos interactúan entre sí en función de sus especificaciones de diseño y llevan a cabo la(s) operación(es). Este es un principio básico del paradigma OOP.
Si bien hay muchos tipos de objetos caffe (o clases de C++), para una comprensión básica inicial, nos enfocamos en 4 objetos caffe importantes. Nuestro objetivo en esta etapa es simplemente observar la interacción entre estos objetos en un nivel altamente abstracto donde los detalles específicos de implementación y diseño se oscurecen y, en cambio, se enfoca la operación a vista de pájaro.</description>
    </item>
    
    <item>
      <title>Capas de Python personalizadas</title>
      <link>https://www.wikiod.com/es/caffe/capas-de-python-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/caffe/capas-de-python-personalizadas/</guid>
      <description>Este tutorial lo guiará a través de los pasos para crear una capa personalizada simple para Caffe usando python. Al final, hay algunos ejemplos de capas personalizadas. Por lo general, crearía una capa personalizada para implementar una funcionalidad que no está disponible en Caffe, ajustándola a sus requisitos.
La creación de una capa personalizada de python agrega algo de sobrecarga a su red y probablemente no sea tan eficiente como una capa personalizada de C++.</description>
    </item>
    
  </channel>
</rss>

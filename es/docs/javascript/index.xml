<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de JavaScript on </title>
    <link>https://www.wikiod.com/es/docs/javascript/</link>
    <description>Recent content in Tutorial de JavaScript on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con JavaScript</title>
      <link>https://www.wikiod.com/es/javascript/primeros-pasos-con-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/primeros-pasos-con-javascript/</guid>
      <description>Usando consola.log() # Introducción # Todos los navegadores web modernos, NodeJ y casi todos los demás entornos de JavaScript admiten la escritura de mensajes en una consola mediante un conjunto de métodos de registro. El más común de estos métodos es console.log().
En un entorno de navegador, la función console.log() se utiliza predominantemente con fines de depuración.
Empezando # Abra la consola de JavaScript en su navegador, escriba lo siguiente y presione Enter :</description>
    </item>
    
    <item>
      <title>promesas</title>
      <link>https://www.wikiod.com/es/javascript/promesas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/promesas/</guid>
      <description>Sintaxis # new Promise( /* función ejecutor: */ función(resolver, rechazar) { }) -promise.then(onFulfilled[, onRejected]) -promise.catch(onRejected) Promise.resolve (resolución) Promise.reject (motivo) Promise.all (iterable) Promise.race (iterable) Las promesas son parte de la especificación ECMAScript 2015 y la compatibilidad con navegadores es limitada, con el 88 % de los navegadores en todo el mundo admitiéndolas a partir de julio de 2017. La siguiente tabla brinda una descripción general de las primeras versiones de navegadores que brindan compatibilidad con las promesas.</description>
    </item>
    
    <item>
      <title>Funciones de flecha</title>
      <link>https://www.wikiod.com/es/javascript/funciones-de-flecha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/funciones-de-flecha/</guid>
      <description>Las funciones de flecha son una forma concisa de escribir [anónimo](https://www.wikiod.com/es/javascript/funciones#Función anónima), funciones de alcance léxico en [ECMAScript 2015 (ES6)] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla).
Sintaxis # x =&amp;gt; y // Retorno implícito x =&amp;gt; { return y } // Retorno explícito (x, y, z) =&amp;gt; { &amp;hellip; } // Múltiples argumentos async () =&amp;gt; { &amp;hellip; } // Funciones de flecha asíncronas (() =&amp;gt; { &amp;hellip; })() // Expresión de función invocada inmediatamente const miFunc = x =&amp;gt; x*2 // Un salto de línea antes de la flecha arrojará un error de &amp;rsquo;token inesperado&#39;</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/javascript/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/arreglos/</guid>
      <description>Sintaxis # matriz = [valor, valor, &amp;hellip;] matriz = nueva matriz(valor, valor, &amp;hellip;) array = Array.of(valor, valor, &amp;hellip;) array = Array.from(arrayLike) Resumen: Las matrices en JavaScript son, simplemente, instancias modificadas de &amp;lsquo;Objetos&amp;rsquo; con un prototipo avanzado, capaces de realizar una variedad de tareas relacionadas con listas. Se agregaron en ECMAScript 1st Edition y otros métodos prototipo llegaron en ECMAScript 5.1 Edition.
Advertencia: Si se especifica un parámetro numérico llamado n en el constructor new Array(), entonces declarará una matriz con n cantidad de elementos, no declarará una matriz con 1 elemento con el valor de n!</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/es/javascript/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/json/</guid>
      <description>JSON (Notación de objetos de JavaScript) es un formato ligero de intercambio de datos. Es fácil de leer y escribir para los humanos y fácil de analizar y generar para las máquinas. Es importante darse cuenta de que, en JavaScript, JSON es una cadena y no un objeto.
Se puede encontrar una descripción general básica en el sitio web json.org que también contiene enlaces a implementaciones del estándar en muchos lenguajes de programación diferentes.</description>
    </item>
    
    <item>
      <title>Patrones de diseño creacional</title>
      <link>https://www.wikiod.com/es/javascript/patrones-de-diseno-creacional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/patrones-de-diseno-creacional/</guid>
      <description>Los patrones de diseño son una buena forma de mantener tu código legible y SECO. DRY significa no te repitas. A continuación puede encontrar más ejemplos sobre los patrones de diseño más importantes.
En ingeniería de software, un patrón de diseño de software es una solución general reutilizable para un problema común dentro de un contexto dado en el diseño de software.
Funciones de fábrica # Una función de fábrica es simplemente una función que devuelve un objeto.</description>
    </item>
    
    <item>
      <title>Consola</title>
      <link>https://www.wikiod.com/es/javascript/consola/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/consola/</guid>
      <description>Los desarrolladores suelen utilizar la consola de depuración de un navegador o consola web para identificar errores, comprender el flujo de ejecución, registrar datos y para muchos otros fines en tiempo de ejecución. A esta información se accede a través del objeto console.
Sintaxis # void console.log(obj1 [, obj2, &amp;hellip;, objN]); void console.log(mensaje [, sub1, &amp;hellip;, subN]); Parámetros # Parámetro Descripción obj1 &amp;hellip; objN Una lista de objetos de JavaScript cuyas representaciones de cadenas se generan en la consola mensaje Una cadena de JavaScript que contiene cero o más cadenas de sustitución.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/javascript/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/funciones/</guid>
      <description>Las funciones en JavaScript proporcionan código organizado y reutilizable para realizar un conjunto de acciones. Las funciones simplifican el proceso de codificación, evitan la lógica redundante y facilitan el seguimiento del código. Este tema describe la declaración y utilización de funciones, argumentos, parámetros, declaraciones de retorno y alcance en JavaScript.
Sintaxis # ejemplo de función (x) { devuelve x }
var ejemplo = function (x) { return x }
(función() { &amp;hellip; })(); // Expresión de función invocada inmediatamente (IIFE)</description>
    </item>
    
    <item>
      <title>Funciones asíncronas (asyncawait)</title>
      <link>https://www.wikiod.com/es/javascript/funciones-asincronas-asyncawait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/funciones-asincronas-asyncawait/</guid>
      <description>async y await se basan en promesas y generadores para expresar acciones asíncronas en línea. Esto hace que el código asincrónico o de devolución de llamada sea mucho más fácil de mantener.
Las funciones con la palabra clave async devuelven una Promesa y se pueden llamar con esa sintaxis.
Dentro de una &amp;lsquo;función asíncrona&amp;rsquo;, la palabra clave &amp;rsquo;esperar&amp;rsquo; se puede aplicar a cualquier &amp;lsquo;Promesa&amp;rsquo;, y hará que todo el cuerpo de la función después de &amp;rsquo;esperar&amp;rsquo; se ejecute después de que se resuelva la promesa.</description>
    </item>
    
    <item>
      <title>depuración</title>
      <link>https://www.wikiod.com/es/javascript/depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javascript/depuracion/</guid>
      <description>Variables del intérprete interactivo # Tenga en cuenta que estos solo funcionan en las herramientas de desarrollo de ciertos navegadores.
$_ te da el valor de la última expresión que se evaluó.
&amp;quot;foo&amp;quot; // &amp;quot;foo&amp;quot; $_ // &amp;quot;foo&amp;quot; $0 se refiere al elemento DOM actualmente seleccionado en el Inspector. Entonces, si &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; está resaltado:
$0 // &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt; $0.getAttribute(&#39;id&#39;) // &amp;quot;foo&amp;quot; $1 se refiere al elemento previamente seleccionado, $2 al elemento seleccionado antes de eso, y así sucesivamente para $3 y $4.</description>
    </item>
    
  </channel>
</rss>

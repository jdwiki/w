<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Rubí sobre rieles on </title>
    <link>https://www.wikiod.com/es/docs/ruby-on-rails/</link>
    <description>Recent content in Tutorial de Rubí sobre rieles on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Ruby on Rails</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/primeros-pasos-con-ruby-on-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/primeros-pasos-con-ruby-on-rails/</guid>
      <description>Crear una aplicación de Ruby on Rails # Este ejemplo asume que Ruby y Ruby on Rails ya se han instalado correctamente. Si no, puedes encontrar cómo hacerlo aquí.
Abra una línea de comando o terminal. Para generar una nueva aplicación de rieles, use el comando rails new seguido del nombre de su aplicación:
$ rails new my_app Si desea crear su aplicación Rails con una versión específica de Rails, puede especificarla en el momento de generar la aplicación.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/enrutamiento/</guid>
      <description>El enrutador Rails reconoce las URL y las envía a la acción de un controlador. También puede generar rutas y URL, evitando la necesidad de codificar cadenas en sus vistas.
El &amp;ldquo;enrutamiento&amp;rdquo; en general es la forma en que su aplicación &amp;ldquo;maneja&amp;rdquo; las URL. En el caso de Rails, normalmente es qué controlador y qué acción de ese controlador manejará una URL entrante en particular. En las aplicaciones de Rails, las rutas generalmente se colocan en el archivo config/routes.</description>
    </item>
    
    <item>
      <title>Migraciones de ActiveRecord</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/migraciones-de-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/migraciones-de-activerecord/</guid>
      <description>Parámetros # Tipo de columna Descripción :clave_principal Clave principal :cadena Tipo de datos de cadena más corto. Permite la opción límite para el número máximo de caracteres. :texto Mayor cantidad de texto. Permite la opción límite para el número máximo de bytes. :entero Entero. Permite la opción límite para el número máximo de bytes. :bigint Entero mayor :flotante Flotador :decimal Número decimal con precisión variable. Permite opciones de precisión y escala.</description>
    </item>
    
    <item>
      <title>Mejores prácticas de rieles</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/mejores-practicas-de-rieles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/mejores-practicas-de-rieles/</guid>
      <description>Modelo gordo, controlador flaco # &amp;ldquo;Modelo gordo, controlador flaco&amp;rdquo; se refiere a cómo las partes M y C de MVC funcionan juntas idealmente. Es decir, cualquier lógica relacionada con la falta de respuesta debe ir en el modelo, idealmente en un método agradable y comprobable. Mientras tanto, el controlador &amp;ldquo;delgado&amp;rdquo; es simplemente una buena interfaz entre la vista y el modelo.
En la práctica, esto puede requerir una gama de diferentes tipos de refactorización, pero todo se reduce a una idea: al mover cualquier lógica que no se trate de la respuesta al modelo (en lugar del controlador), no solo ha promovido la reutilización donde sea posible, pero también ha hecho posible probar su código fuera del contexto de una solicitud.</description>
    </item>
    
    <item>
      <title>Registro activo</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/registro-activo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/registro-activo/</guid>
      <description>Crear un modelo a través de un generador # Ruby on Rails proporciona un generador de modelos que puede usar para crear modelos ActiveRecord. Simplemente use rieles generar modelo y proporcione el nombre del modelo.
$ rails g model user Además del archivo de modelo en app/models, el generador también creará:
la Prueba en test/models/user_test.rb los accesorios en test/fixtures/users.yml la migración de la base de datos en db/migrate/XXX_create_users.rb También puede generar algunos campos para el modelo al generarlo.</description>
    </item>
    
    <item>
      <title>Interfaz de consulta ActiveRecord</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/interfaz-de-consulta-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/interfaz-de-consulta-activerecord/</guid>
      <description>ActiveRecord es la M en MVC, que es la capa del sistema responsable de representar la lógica y los datos comerciales. La técnica que conecta los objetos enriquecidos de una aplicación con tablas en un sistema de gestión de bases de datos relacionales es Object Relational Mapper(ORM).
ActiveRecord realizará consultas en la base de datos por usted y es compatible con la mayoría de los sistemas de bases de datos. Independientemente del sistema de base de datos que esté utilizando, el formato del método ActiveRecord siempre será el mismo.</description>
    </item>
    
    <item>
      <title>Convenciones de nombres</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/convenciones-de-nombres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/convenciones-de-nombres/</guid>
      <description>Controladores # Los nombres de las clases de controlador están en plural. El motivo es que el controlador controla varias instancias de la instancia del objeto.
Por ejemplo: OrdersController sería el controlador de una tabla de pedidos. Rails luego buscará la definición de la clase en un archivo llamado orders_controller.rb en el directorio /app/controllers.
Por ejemplo: PostsController sería el controlador para una tabla posts.
Si el nombre de la clase del controlador tiene varias palabras en mayúsculas, se supone que el nombre de la tabla tiene guiones bajos entre estas palabras.</description>
    </item>
    
    <item>
      <title>Configurar angular con rieles</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/configurar-angular-con-rieles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/configurar-angular-con-rieles/</guid>
      <description>Angular con Rieles 101 # Paso 1: Cree una nueva aplicación de Rails # gem install rails -v 4.1 rails new angular_example Paso 2: Eliminar Turboenlaces # La eliminación de turboenlaces requiere eliminarlos del Gemfile.
gem &#39;turbolinks&#39; Elimina require de app/assets/javascripts/application.js:
//= require turbolinks Paso 3: agregue AngularJS a la canalización de activos # Para que Angular funcione con la canalización de activos de Rails, debemos agregar al Gemfile:
gem &#39;angular-rails-templates&#39; gem &#39;bower-rails&#39; Ahora ejecuta el comando</description>
    </item>
    
    <item>
      <title>Autenticación de usuario en Rails</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/autenticacion-de-usuario-en-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/autenticacion-de-usuario-en-rails/</guid>
      <description>Devise es una gema muy poderosa, le permite registrarse, iniciar sesión y cerrar sesión justo después de la instalación. Además, el usuario puede agregar autenticaciones y restricciones a sus aplicaciones. Devise también viene con sus propias vistas, si el usuario quiere usar. Un usuario también puede personalizar los formularios de registro e inicio de sesión según sus necesidades y requisitos. Cabe señalar que Devise recomienda que implemente su propio inicio de sesión si es nuevo en Rails.</description>
    </item>
    
    <item>
      <title>Validaciones de ActiveRecord</title>
      <link>https://www.wikiod.com/es/ruby-on-rails/validaciones-de-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby-on-rails/validaciones-de-activerecord/</guid>
      <description>Validando la longitud de un atributo # class Person &amp;lt; ApplicationRecord validates :name, length: { minimum: 2 } validates :bio, length: { maximum: 500 } validates :password, length: { in: 6..20 } validates :registration_number, length: { is: 6 } end Las posibles opciones de restricción de longitud son:
:minimum - El atributo no puede tener menos de la longitud especificada. :maximum - El atributo no puede tener más de la longitud especificada.</description>
    </item>
    
  </channel>
</rss>

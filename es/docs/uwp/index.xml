<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/uwp/</link>
    <description>Recent content in Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con uwp</title>
      <link>https://www.wikiod.com/es/uwp/primeros-pasos-con-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/primeros-pasos-con-uwp/</guid>
      <description>Creación de su primera aplicación UWP # Este ejemplo demuestra cómo desarrollar una aplicación UWP simple.
En la creación de un proyecto de &amp;ldquo;Aplicación en blanco (Universal Windows)&amp;rdquo;, hay muchos archivos esenciales que se crean en su solución.
Todos los archivos de su proyecto se pueden ver en Solution Explorer.
Algunos de los archivos cruciales en su proyecto son:
App.xaml y App.xaml.cs - App.xaml se usa para declarar los recursos que están disponibles en la aplicación y App.</description>
    </item>
    
    <item>
      <title>Familias de dispositivos</title>
      <link>https://www.wikiod.com/es/uwp/familias-de-dispositivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/familias-de-dispositivos/</guid>
      <description>Código específico de DeviceFamily # En general, UWP se usa para crear una sola aplicación que se ejecuta en Windows 10 en muchos dispositivos diferentes. Sin embargo, también es posible crear código a la medida de dispositivos específicos. Puede lograr esto de varias maneras diferentes.
Diseño XAML diferente
Si desea usar un diseño específico para una determinada &amp;ldquo;familia de dispositivos&amp;rdquo;, puede hacerlo creando un nuevo elemento de página XAML con el mismo nombre que el archivo XAML predeterminado, con un sufijo para indicar la familia de dispositivos a la que se dirige.</description>
    </item>
    
    <item>
      <title>Pruebas unitarias para UWP</title>
      <link>https://www.wikiod.com/es/uwp/pruebas-unitarias-para-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/pruebas-unitarias-para-uwp/</guid>
      <description>Me gustaría mostrarle cómo crear pruebas unitarias para la aplicación universal de Windows 10. Para probar las aplicaciones UWP, usaremos xUnit.net Framework sobre el cual puede leer más en el enlace que proporcioné en la sección de comentarios.
Puede leer más sobre xUnit Framework: https://xunit.github.io/docs/getting-started-uwp.html
Configurar aplicación de prueba # Una vez que tenga su aplicación UWP lista para las pruebas, debe agregar la aplicación de prueba a su solución. Para hacerlo, haga clic con el botón derecho en la solución y elija &amp;ldquo;Aplicación de prueba unitaria (Universal Windows)&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Configuración y datos de la aplicación</title>
      <link>https://www.wikiod.com/es/uwp/configuracion-y-datos-de-la-aplicacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/configuracion-y-datos-de-la-aplicacion/</guid>
      <description>Almacenar y recuperar configuraciones # Las aplicaciones UWP pueden almacenar fácilmente configuraciones simples en un almacén de clave/valor de forma local o incluso en la nube para que su aplicación o juego pueda compartir configuraciones entre los diferentes dispositivos de los usuarios.
Los siguientes tipos de datos se pueden utilizar para la configuración:
UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Simple, Doble Booleano Char16, Cadena Fecha y hora, Intervalo de tiempo GUID, Punto, Tamaño, Rect Comience recuperando el contenedor de datos locales y/o itinerantes.</description>
    </item>
    
    <item>
      <title>Tareas en segundo plano de UWP</title>
      <link>https://www.wikiod.com/es/uwp/tareas-en-segundo-plano-de-uwp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/tareas-en-segundo-plano-de-uwp/</guid>
      <description>Para registrar una tarea en segundo plano que se ejecuta en un proceso separado, debe ir a la pestaña &amp;ldquo;Declaraciones&amp;rdquo; en Package.appxmanifest y agregar una nueva &amp;ldquo;Tarea en segundo plano&amp;rdquo; y establecer el punto de entrada. El registro de una tarea en segundo plano de un solo proceso se puede realizar mediante BackgroundTaskBuilder, pero la aplicación generará una excepción si registra una tarea dos veces, por lo que debe verificar si ya ha registrado una tarea.</description>
    </item>
    
    <item>
      <title>Recursos temáticos</title>
      <link>https://www.wikiod.com/es/uwp/recursos-tematicos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/recursos-tematicos/</guid>
      <description>Sintaxis # C#: Aplicación.Current.Resources[&amp;ldquo;yourColorKey&amp;rdquo;] Xaml: {TemaRecurso suColorKey} Parámetros # Parámetro Propósito suClaveDeColor Una tecla que das para recuperar un objeto Color. Difiere entre C# y Xaml UWP le permite tomar el control total de las ventajas de Windows 10. Algunas de estas ventajas son gráficas, como el color de acento o los temas oscuros/claros.
Para preparar su aplicación para que sea compatible con estas características, se implementaron un montón de colores prefabricados en UWP para cambiar con el color de acento del sistema operativo en el que se ejecuta el programa, o con la elección de tema del usuario.</description>
    </item>
    
    <item>
      <title>Navegación WebView</title>
      <link>https://www.wikiod.com/es/uwp/navegacion-webview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/navegacion-webview/</guid>
      <description>Todos los ejemplos que obtienen datos de una URL remota deben tener la capacidad de &amp;ldquo;Internet (cliente)&amp;rdquo; marcada en Package.appxmanifest. Para ejemplos que solo manipulan datos locales, no es necesario.
Abrir archivo HTML desde el paquete de la aplicación # Puede abrir fácilmente un archivo desde el paquete de su aplicación, pero el esquema Uri debe ser &amp;ldquo;ms-appx-web&amp;rdquo; en lugar de &amp;ldquo;ms-appx&amp;rdquo;:
var uri = new Uri(&amp;quot;ms-appx-web:///Assets/Html/html-sample.html&amp;quot;); this.webView.Navigate(uri); Navegar a Uri # Este código simplemente navega por WebView a algún Uri:</description>
    </item>
    
    <item>
      <title>UWP Hola mundo</title>
      <link>https://www.wikiod.com/es/uwp/uwp-hola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/uwp-hola-mundo/</guid>
      <description>Sintaxis # Este es el ejemplo simple del popular &amp;ldquo;¡Hola mundo!&amp;rdquo; para Universal Plataforma Windows en Windows 10. Hola mundo - Plataforma universal de Windows # Después de iniciar Visual Studio 2015, vaya a Archivo → Nuevo → Proyecto. En el cuadro de diálogo Nuevo proyecto, navegue en el árbol de plantillas hasta Visual C# → Windows → Universal y seleccione Aplicación en blanco (Universal Windows). A continuación, debemos completar el formulario para describir la aplicación:</description>
    </item>
    
    <item>
      <title>Ciclo de vida de la aplicación</title>
      <link>https://www.wikiod.com/es/uwp/ciclo-de-vida-de-la-aplicacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/ciclo-de-vida-de-la-aplicacion/</guid>
      <description>El ciclo de vida de la aplicación universal de Windows 10 consta de tres estados diferentes:
En ejecución: la aplicación está actualmente en uso No se está ejecutando: la aplicación se cierra y se elimina de la memoria Suspendido: el estado de la aplicación está congelado pero aún está en la memoria Como puede ver en la imagen de arriba, hay diferentes eventos relacionados con el paso de un estado a otro.</description>
    </item>
    
    <item>
      <title>Convierta el tamaño de la imagen y recorte el archivo de imagen en la aplicación Windows Universal</title>
      <link>https://www.wikiod.com/es/uwp/convierta-el-tamano-de-la-imagen-y-recorte-el-archivo-de-imagen-en-la-aplicacion-windows-universal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/uwp/convierta-el-tamano-de-la-imagen-y-recorte-el-archivo-de-imagen-en-la-aplicacion-windows-universal/</guid>
      <description>Recortar y cambiar el tamaño de la imagen usando la herramienta de mapa de bits # public class BitmapTools { /// &amp;lt;summary&amp;gt; /// Gets the cropped bitmap asynchronously. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;originalImage&amp;quot;&amp;gt;The original image.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;startPoint&amp;quot;&amp;gt;The start point.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;cropSize&amp;quot;&amp;gt;Size of the corp.&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;scale&amp;quot;&amp;gt;The scale.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;The cropped image.&amp;lt;/returns&amp;gt; public static async Task&amp;lt;WriteableBitmap&amp;gt; GetCroppedBitmapAsync(IRandomAccessStream originalImage, Point startPoint, Size cropSize, double scale) { if (double.IsNaN(scale) || double.</description>
    </item>
    
  </channel>
</rss>

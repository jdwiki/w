<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de llvm on </title>
    <link>https://www.wikiod.com/es/docs/llvm/</link>
    <description>Recent content in Tutorial de llvm on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/llvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con llvm</title>
      <link>https://www.wikiod.com/es/llvm/primeros-pasos-con-llvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/llvm/primeros-pasos-con-llvm/</guid>
      <description>Compilación de una función simple en llvm 4.0 # Entonces, lo que intentaremos hacer es compilar la siguiente función
int sum(int a, int b) { return a + b + 2; } sobre la marcha. Y aquí está todo el ejemplo .cpp:
#include &amp;lt;iostream&amp;gt; #include &amp;quot;llvm/IR/LLVMContext.h&amp;quot; #include &amp;quot;llvm/IR/Module.h&amp;quot; #include &amp;quot;llvm/IR/IRBuilder.h&amp;quot; #include &amp;quot;llvm/IR/Verifier.h&amp;quot; #include &amp;quot;llvm/ExecutionEngine/ExecutionEngine.h&amp;quot; #include &amp;quot;llvm/ExecutionEngine/SectionMemoryManager.h&amp;quot; #include &amp;quot;llvm/ExecutionEngine/Orc/CompileUtils.h&amp;quot; #include &amp;quot;llvm/Support/TargetSelect.h&amp;quot; // Optimizations #include &amp;quot;llvm/Transforms/Scalar.h&amp;quot; #include &amp;quot;llvm/Analysis/BasicAliasAnalysis.h&amp;quot; using namespace llvm; llvm::Function* createSumFunction(Module* module) { /* Builds the following function: int sum(int a, int b) { int sum1 = 1 + 1; int sum2 = sum1 + a; int result = sum2 + b; return result; } */ LLVMContext &amp;amp;context = module-&amp;gt;getContext(); IRBuilder&amp;lt;&amp;gt; builder(context); // Define function&#39;s signature std::vector&amp;lt;Type*&amp;gt; Integers(2, builder.</description>
    </item>
    
  </channel>
</rss>

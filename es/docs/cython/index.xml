<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Cython on </title>
    <link>https://www.wikiod.com/es/docs/cython/</link>
    <description>Recent content in Tutorial de Cython on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/cython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con cython</title>
      <link>https://www.wikiod.com/es/cython/comenzando-con-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cython/comenzando-con-cython/</guid>
      <description>Hola Mundo # Un archivo pyx de Cython debe traducirse a código C (cythonized) y compilarse antes de que pueda usarse desde Python. Un enfoque común es crear un módulo de extensión que luego se importa en un programa de Python.
Código # Para este ejemplo creamos tres archivos:
hello.pyx contiene el código Cython. test.py es un script de Python que usa la extensión hello. setup.py se usa para compilar el código de Cython.</description>
    </item>
    
    <item>
      <title>Envolviendo C&#43;&#43;</title>
      <link>https://www.wikiod.com/es/cython/envolviendo-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cython/envolviendo-c-/</guid>
      <description>Envolviendo una DLL: C++ a Cython a Python # Esto demuestra un ejemplo no trivial de envolver un dll de C++ con Cython. Cubrirá los siguientes pasos principales:
Cree una DLL de ejemplo con C++ usando Visual Studio. Envuelva la DLL con Cython para que pueda llamarse en Python. Se supone que tiene Cython instalado y puede importarlo con éxito en Python.
Para el paso DLL, también se supone que está familiarizado con la creación de una DLL en Visual Studio.</description>
    </item>
    
    <item>
      <title>Agrupación de Cython</title>
      <link>https://www.wikiod.com/es/cython/agrupacion-de-cython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cython/agrupacion-de-cython/</guid>
      <description>Empaquetar un programa Cython usando pyinstaller # Comience desde un programa Cython con un punto de entrada:
def do_stuff(): cdef int a,b,c a = 1 b = 2 c = 3 print(&amp;quot;Hello World!&amp;quot;) print([a,b,c]) input(&amp;quot;Press Enter to continue.&amp;quot;) Cree un archivo setup.py en la misma carpeta:
from distutils.core import setup from Cython.Build import cythonize setup( name = &amp;quot;Hello World&amp;quot;, ext_modules = cythonize(&#39;program.pyx&#39;), ) Ejecutarlo con python setup.py build_ext --inplace producirá una biblioteca .</description>
    </item>
    
    <item>
      <title>Envolviendo código C</title>
      <link>https://www.wikiod.com/es/cython/envolviendo-codigo-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cython/envolviendo-codigo-c/</guid>
      <description>Uso de funciones de una biblioteca C personalizada # Tenemos una biblioteca C llamada my_random que produce números aleatorios a partir de una distribución personalizada. Proporciona dos funciones que queremos usar: set_seed(long seed) y rand() (y muchas más que no necesitamos). Para usarlos en Cython necesitamos
defina una interfaz en el archivo .pxd y llame a la función en el archivo .pyx. Código # prueba_externa.pxd # # extern blocks define interfaces for Cython to C code cdef extern from &amp;quot;my_random.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de script de café on </title>
    <link>https://www.wikiod.com/es/docs/coffeescript/</link>
    <description>Recent content in tutorial de script de café on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con CoffeeScript</title>
      <link>https://www.wikiod.com/es/coffeescript/primeros-pasos-con-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/primeros-pasos-con-coffeescript/</guid>
      <description>Hola Word (Linux y OS X) # CoffeeScript es un lenguaje de secuencias de comandos que se compila en JavaScript. Cualquier código escrito en CoffeeScript se puede traducir a JavaScript con una coincidencia uno a uno.
CoffeeScript se puede instalar fácilmente con npm:
$ mkdir coffee &amp;amp;&amp;amp; cd coffee $ npm install -g coffee-script El indicador -g instalará CoffeeScript globalmente, por lo que siempre estará disponible en su CLI. No use el indicador -g si desea una instalación local:</description>
    </item>
    
    <item>
      <title>Asignación de desestructuración</title>
      <link>https://www.wikiod.com/es/coffeescript/asignacion-de-desestructuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/asignacion-de-desestructuracion/</guid>
      <description>Parámetros de función con nombre # CoffeeScript permite deconstruir objetos y matrices cuando se alimentan a funciones como argumentos.
Una función que aprovecha la deconstrucción especificará en su firma todos los campos que se esperan dentro de su cuerpo. Al invocar dicha función, se debe pasar como argumento un objeto o matriz que contenga todos los campos esperados.
drawRect = ({x, y, width, height}) -&amp;gt; # here you can use the passed parameters # color will not be visible here!</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/coffeescript/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/arreglos/</guid>
      <description>Mapeo de valores # Desea convertir todos los elementos de una matriz a alguna otra forma.
Por ejemplo, tienes
theUsers = [ {id: 1, username: &#39;john&#39;} {id: 2, username: &#39;lexy&#39;} {id: 3, username: &#39;pete&#39;} ] y desea tener solo una matriz de nombres de usuario, es decir
[&#39;john&#39;, &#39;lexy&#39;, &#39;pete&#39;] Método 1 - usando .map # theUsernames = theUsers.map (user) -&amp;gt; user.username Método 2: usar la comprensión # theUsernames = (user.</description>
    </item>
    
    <item>
      <title>Condicionales</title>
      <link>https://www.wikiod.com/es/coffeescript/condicionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/condicionales/</guid>
      <description>si, si/entonces, si/si no, a menos que, operador ternario # La instancia más básica de una construcción if evalúa una condición y ejecuta algún código de acuerdo con el resultado de la condición. Si la condición devuelve verdadero, se ejecuta el código dentro de la condicional.
counter = 10 if counter is 10 console.log &#39;This will be executed!&#39; La construcción if se puede enriquecer con una declaración else. El código dentro de la instrucción else se ejecutará siempre que no se cumpla la condición if.</description>
    </item>
    
    <item>
      <title>Ventajas y desventajas de usar Coffeescript</title>
      <link>https://www.wikiod.com/es/coffeescript/ventajas-y-desventajas-de-usar-coffeescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/ventajas-y-desventajas-de-usar-coffeescript/</guid>
      <description>Ventajas # Simplicidad # Probablemente la mejor parte de CoffeeScript es su simplicidad. CoffeeScript permite una sintaxis más concisa y simple que JavaScript simple. Una característica simple pero sorprendentemente ahorradora de tiempo es que CoffeeScript no necesita ; o {}, lo que elimina la necesidad de pasar horas buscando el lugar donde falta un }.
Bucles # Crear un bucle que genere el valor de cada elemento en una matriz a menos que el valor sea &amp;ldquo;monkey&amp;rdquo; en CoffeeScript es muy fácil.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/coffeescript/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/funciones/</guid>
      <description>Funciones de flecha pequeña # # creates a function with no arguments, which returns 3 get_three = () -&amp;gt; return 3 # same as above get_three = -&amp;gt; 3 # creates a function with arguments add_three = (num) -&amp;gt; num + 3 # multiple arguments, etc. add = (a, b) -&amp;gt; a + b </description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://www.wikiod.com/es/coffeescript/clases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/clases/</guid>
      <description>Clases, Herencia y Super # CoffeeScript proporciona una estructura de clase básica que le permite nombrar su clase, establecer la superclase, asignar propiedades prototípicas y definir el constructor, en una sola expresión asignable.
Pequeño ejemplo a continuación:
class Animal constructor: (@name) -&amp;gt; move: (meters) -&amp;gt; alert @name + &amp;quot; moved #{meters}m.&amp;quot; class Snake extends Animal move: -&amp;gt; alert &amp;quot;Slithering...&amp;quot; super 5 class Horse extends Animal move: -&amp;gt; alert &amp;quot;Galloping...&amp;quot; super 45 sam = new Snake &amp;quot;Sammy the Python&amp;quot; tom = new Horse &amp;quot;Tommy the Palomino&amp;quot; sam.</description>
    </item>
    
    <item>
      <title>Bucles</title>
      <link>https://www.wikiod.com/es/coffeescript/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/bucles/</guid>
      <description>Bucle de una función # Los siguientes códigos mostrarán los números del 1 al 10 en la consola, aunque console.log podría ser cualquier función que acepte una entrada.
Método 1 - Estándar # for x in [1..10] console.log x Método 2 - Compacto # console.log x for x in [1..10] </description>
    </item>
    
    <item>
      <title>Instrumentos de cuerda</title>
      <link>https://www.wikiod.com/es/coffeescript/instrumentos-de-cuerda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/instrumentos-de-cuerda/</guid>
      <description>Bloquear cadenas # Las cadenas de bloque se pueden usar para contener texto formateado o sensible a la sangría (o, si no tiene ganas de escapar de las comillas y los apóstrofes). El nivel de sangría que comienza el bloque se mantiene en todo momento, por lo que puede mantener todo alineado con el cuerpo de su código.
html = &amp;quot;&amp;quot;&amp;quot; &amp;lt;strong&amp;gt; cup of coffeescript &amp;lt;/strong&amp;gt; &amp;quot;&amp;quot;&amp;quot; Cadenas multilínea # Las cadenas de varias líneas están permitidas en CoffeeScript.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/es/coffeescript/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/coffeescript/operadores/</guid>
      <description>Operador existencial # El operador existencial de CoffeeScript ? comprueba si la variable es nula o indefinida.
1. Busque null o undefined.
alert &amp;quot;Hello CoffeeScript!&amp;quot; if myVar? equivalente de javascript:
if (typeof myVar !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; myVar !== null) { alert(&amp;quot;Hello CoffeeScript!&amp;quot;); } 2. Asignación condicional más segura
También puede usar este operador de asignación condicional más segura
language = favoriteLanguage ? &amp;quot;coffeescript&amp;quot; equivalente de javascript:
language = typeof favoriteLanguage !</description>
    </item>
    
  </channel>
</rss>

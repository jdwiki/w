<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de reacción on </title>
    <link>https://www.wikiod.com/es/docs/reactjs/</link>
    <description>Recent content in Tutorial de reacción on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Reaccionar</title>
      <link>https://www.wikiod.com/es/reactjs/primeros-pasos-con-reaccionar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/primeros-pasos-con-reaccionar/</guid>
      <description>¿Qué es ReactJS? # ReactJS es una biblioteca front-end de código abierto basada en componentes responsable solo de la capa de vista de la aplicación. Es mantenido por Facebook.
ReactJS utiliza un mecanismo basado en DOM virtual para completar datos (vistas) en HTML DOM. El DOM virtual funciona rápido debido al hecho de que solo cambia elementos DOM individuales en lugar de recargar DOM completo cada vez
Una aplicación React se compone de múltiples componentes, cada uno de los cuales es responsable de generar una pequeña pieza de HTML reutilizable.</description>
    </item>
    
    <item>
      <title>React.createClass vs extiende React.Component</title>
      <link>https://www.wikiod.com/es/reactjs/reactcreateclass-vs-extiende-reactcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/reactcreateclass-vs-extiende-reactcomponent/</guid>
      <description>Sintaxis # Caso 1: React.createClass({ }) Caso 2: la clase MyComponent extiende React.Component { } React.createClass fue obsoleto en v15.5 y se espera que sea eliminado en v16. Hay un paquete de reemplazo directo para aquellos que todavía lo necesitan. Los ejemplos que lo usan deben actualizarse.
Crear componente de reacción # Exploremos las diferencias de sintaxis comparando dos ejemplos de código.
React.createClass (obsoleto) # Aquí tenemos una const con una clase React asignada, con la función render a continuación para completar una definición de componente base típica.</description>
    </item>
    
    <item>
      <title>Usando ReactJS con Typescript</title>
      <link>https://www.wikiod.com/es/reactjs/usando-reactjs-con-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/usando-reactjs-con-typescript/</guid>
      <description>Componente ReactJS escrito en Typescript # En realidad, puede usar los componentes de ReactJS en Typescript como en el ejemplo de Facebook. Simplemente reemplace la extensión del archivo &amp;lsquo;jsx&amp;rsquo; a &amp;rsquo;tsx&amp;rsquo;:
//helloMessage.tsx: var HelloMessage = React.createClass({ render: function() { return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;; } }); ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode); Pero para hacer un uso completo de la característica principal de TypeScript (verificación de tipo estático) se deben hacer un par de cosas:</description>
    </item>
    
    <item>
      <title>Componentes</title>
      <link>https://www.wikiod.com/es/reactjs/componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/componentes/</guid>
      <description>React.createClass fue obsoleto en v15.5 y se espera que sea eliminado en v16. Hay un paquete de reemplazo directo para aquellos que todavía lo necesitan. Los ejemplos que lo usan deben actualizarse.
Creación de componentes # Esta es una extensión del ejemplo básico:
Estructura basica # import React, { Component } from &#39;react&#39;; import { render } from &#39;react-dom&#39;; class FirstComponent extends Component { render() { return ( &amp;lt;div&amp;gt; Hello, {this.</description>
    </item>
    
    <item>
      <title>Ciclo de vida del componente React</title>
      <link>https://www.wikiod.com/es/reactjs/ciclo-de-vida-del-componente-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/ciclo-de-vida-del-componente-react/</guid>
      <description>Los métodos del ciclo de vida se utilizarán para ejecutar código e interactuar con su componente en diferentes puntos de la vida de los componentes. Estos métodos se basan en un componente de montaje, actualización y desmontaje.
Creación de componentes # Cuando se crea un componente de React, se llama a una serie de funciones:
Si está utilizando React.createClass (ES5), se llaman 5 funciones definidas por el usuario Si está utilizando class Component extends React.</description>
    </item>
    
    <item>
      <title>Comunicación entre componentes</title>
      <link>https://www.wikiod.com/es/reactjs/comunicacion-entre-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/comunicacion-entre-componentes/</guid>
      <description>Hay un total de 3 casos de comunicación entre los componentes de React:
Caso 1: comunicación de padres a hijos Caso 2: Comunicación niño a padre Caso 3: Comunicación de componentes no relacionados (cualquier componente a cualquier componente) Componentes de hijo a padre # Enviando datos de regreso al padre, para hacer esto simplemente pasamos una función como accesorio del componente principal al componente secundario, y el componente secundario llama a esa función.</description>
    </item>
    
    <item>
      <title>Accesorios en React</title>
      <link>https://www.wikiod.com/es/reactjs/accesorios-en-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/accesorios-en-react/</guid>
      <description>NOTA: A partir de React 15.5 y posteriores, el componente PropTypes vive en su propio paquete npm, a saber, &amp;lsquo;prop-types&amp;rsquo; y necesita su propia declaración de importación cuando se usa PropTypes. Consulte la documentación oficial de reacción para ver el cambio de última hora: https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html
Introducción # Los props se utilizan para pasar datos y métodos de un componente principal a un componente secundario.
Cosas interesantes sobre props
Son inmutables. Nos permiten crear componentes reutilizables.</description>
    </item>
    
    <item>
      <title>Reaccionar llamada AJAX</title>
      <link>https://www.wikiod.com/es/reactjs/reaccionar-llamada-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/reaccionar-llamada-ajax/</guid>
      <description>Solicitud HTTP GET # A veces, un componente necesita generar algunos datos desde un punto final remoto (por ejemplo, una API REST). Una [práctica estándar] (https://facebook.github.io/react/docs/react-component.html#componentdidmount) es hacer tales llamadas en el método componentDidMount.
Aquí hay un ejemplo, usando superagent como ayudante de AJAX:
import React from &#39;react&#39; import request from &#39;superagent&#39; class App extends React.Component { constructor () { super() this.state = {} } componentDidMount () { request .get(&#39;/search&#39;) .</description>
    </item>
    
    <item>
      <title>Estado en reaccionar</title>
      <link>https://www.wikiod.com/es/reactjs/estado-en-reaccionar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/estado-en-reaccionar/</guid>
      <description>Estado básico # El estado en los componentes de React es esencial para administrar y comunicar datos en su aplicación. Se representa como un objeto de JavaScript y tiene un alcance de nivel de componente, se puede considerar como los datos privados de su componente.
En el siguiente ejemplo, estamos definiendo un estado inicial en la función constructor de nuestro componente y lo usamos en la función render.
class ExampleComponent extends React.</description>
    </item>
    
    <item>
      <title>Componentes funcionales sin estado</title>
      <link>https://www.wikiod.com/es/reactjs/componentes-funcionales-sin-estado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/reactjs/componentes-funcionales-sin-estado/</guid>
      <description>Los componentes funcionales sin estado en React son funciones puras de lo pasado en props. Estos componentes no dependen del estado y descartan el uso de métodos de ciclo de vida del componente. Sin embargo, aún puede definir propTypes y defaultPropts.
Consulte https://facebook.github.io/react/docs/reusable-components.html#stateless-functions para obtener más información sobre los componentes funcionales sin estado.
Componente funcional sin estado # Los componentes le permiten dividir la interfaz de usuario en piezas independientes y reutilizables.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de java-ee on </title>
    <link>https://www.wikiod.com/es/docs/java-ee/</link>
    <description>Recent content in Tutorial de java-ee on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/java-ee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con java-ee</title>
      <link>https://www.wikiod.com/es/java-ee/comenzando-con-java-ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/comenzando-con-java-ee/</guid>
      <description>¿Qué es Java EE? # Java EE significa Java Enterprise Edition. Java EE amplía Java SE (que significa Java Standard Edition). Java EE es un conjunto de tecnologías y especificaciones relacionadas que están orientadas al desarrollo de aplicaciones empresariales a gran escala. Java EE se desarrolla en un proceso impulsado por la comunidad. Hasta el momento se han lanzado las siguientes versiones de Java EE:
J2EE 1.2 (12 de diciembre de 1999) J2EE 1.</description>
    </item>
    
    <item>
      <title>Servicios web Java RESTful (JAX-RS)</title>
      <link>https://www.wikiod.com/es/java-ee/servicios-web-java-restful-jax-rs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/servicios-web-java-restful-jax-rs/</guid>
      <description>A diferencia de SOAP y WS-stack, que se especifican como estándares W3C, REST es realmente un conjunto de principios para diseñar y usar una interfaz basada en web. Las aplicaciones REST/RESTful dependen en gran medida de otros estándares:
HTTP URI, URL XML, JSON, HTML, GIF, JPEG, and so forth (resource representations) La función de JAX-RS (API de Java para servicios web RESTful) es proporcionar API que admitan la creación de servicios RESTful.</description>
    </item>
    
    <item>
      <title>Servicio de mensajería de Java (JMS)</title>
      <link>https://www.wikiod.com/es/java-ee/servicio-de-mensajeria-de-java-jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/servicio-de-mensajeria-de-java-jms/</guid>
      <description>El Servicio de mensajes de Java es una API de Java que permite que las aplicaciones creen, envíen, reciban y lean mensajes. La API de JMS define un conjunto común de interfaces y la semántica asociada que permite que los programas escritos en el lenguaje de programación Java se comuniquen con otras implementaciones de mensajería. JMS permite una comunicación que no solo está débilmente acoplada, sino que también es asíncrona y confiable.</description>
    </item>
    
    <item>
      <title>La API de Javamail</title>
      <link>https://www.wikiod.com/es/java-ee/la-api-de-javamail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/la-api-de-javamail/</guid>
      <description>La página de JavaMail en el sitio web de Oracle lo describe de la siguiente manera
La API de JavaMail proporciona un marco de trabajo independiente de la plataforma y del protocolo para crear aplicaciones de correo y mensajería. La API JavaMail está disponible como un paquete opcional para usar con la plataforma Java SE y también se incluye en la plataforma Java EE.
El sitio principal del proyecto JavaMail ahora está en java.</description>
    </item>
    
    <item>
      <title>La API de WebSockets</title>
      <link>https://www.wikiod.com/es/java-ee/la-api-de-websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/la-api-de-websockets/</guid>
      <description>WebSocket es un protocolo que permite la comunicación entre el cliente y el servidor/punto final mediante una única conexión TCP.
WebSocket está diseñado para implementarse en navegadores web y servidores web, pero puede ser utilizado por cualquier aplicación cliente o servidor.
Este tema trata sobre las API de Java para websockets que fueron desarrolladas por JSR 356 e incorporadas a las especificaciones de Java EE 7.
Creando una comunicación WebSocket # Codificadores y decodificadores: WebSockets orientados a objetos # Gracias a los codificadores y decodificadores, el JSR 356 ofrece modelos de comunicación orientados a objetos.</description>
    </item>
    
    <item>
      <title>Arquitectura del conector Java (JCA)</title>
      <link>https://www.wikiod.com/es/java-ee/arquitectura-del-conector-java-jca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java-ee/arquitectura-del-conector-java-jca/</guid>
      <description>Aclaremos primero algunas terminologías:
Mensajería saliente es donde el mensaje comienza desde el servidor (para ser más precisos, se inicia desde su aplicación que tiene en el servidor, WebSphere Liberty en este caso) y finaliza en el EIS. Mensajería entrante es donde el mensaje comienza desde el EIS y termina en el servidor. Punto final del mensaje, en general, el lugar donde el mensaje termina sentado/recibido en una etapa específica de su ciclo de vida.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del paquete web on </title>
    <link>https://www.wikiod.com/es/docs/webpack/</link>
    <description>Recent content in Tutorial del paquete web on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/webpack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el paquete web</title>
      <link>https://www.wikiod.com/es/webpack/primeros-pasos-con-el-paquete-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/primeros-pasos-con-el-paquete-web/</guid>
      <description>Ejemplo de Javascript + CSS + Fuentes + Imágenes # Módulos requeridos
npm install --save-dev webpack extract-text-webpack-plugin file-loader css-loader style-loader Estructura de carpetas
. └── assets ├── css ├── images └── js webpack.config.js
const webpack = require(&#39;webpack&#39;); const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;); const path = require(&#39;path&#39;); const glob = require(&#39;glob&#39;); module.exports = { entry: { script: path.resolve(__dirname, &#39;./assets/js/app.js&#39;), style: path.resolve(__dirname, &#39;./assets/css/app.css&#39;), images: glob.sync(path.resolve(__dirname, &#39;./assets/images/**/*.*&#39;)), }, context: __dirname, output: { path: path.resolve(&#39;./dist/assets&#39;), publicPath: &#39;/dist/assets&#39;, filename: &#39;[name].</description>
    </item>
    
    <item>
      <title>DllPlugin y DllReferencePlugin</title>
      <link>https://www.wikiod.com/es/webpack/dllplugin-y-dllreferenceplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/dllplugin-y-dllreferenceplugin/</guid>
      <description>Los complementos Dll y DllReference permiten que el código se divida en varios paquetes de manera que los paquetes se puedan compilar de forma independiente.
Es posible crear scripts de &amp;ldquo;proveedor&amp;rdquo; en una biblioteca que no necesita compilarse con frecuencia (por ejemplo, React, jQuery, Bootstrap, Fontawesome&amp;hellip;) y hacer referencia a ellos en su paquete de aplicaciones que necesitará esos scripts.
El paquete de la aplicación, el que se cambiará constantemente, estará en una configuración separada que solo hará referencia a un paquete de &amp;ldquo;proveedor&amp;rdquo; ya creado.</description>
    </item>
    
    <item>
      <title>Reemplazo de módulo caliente</title>
      <link>https://www.wikiod.com/es/webpack/reemplazo-de-modulo-caliente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/reemplazo-de-modulo-caliente/</guid>
      <description>webpack-hot-middleware # Úselo con webpack-dev-middleware, agregando webpack-hot-middleware/client a la entrada.
Configuración # Agregue configuraciones como cadena de consulta a la ruta. Ejemplo:
webpack-hot-middleware/client?path=/__what&amp;amp;timeout=2000&amp;amp;overlay=false Opción Descripción camino La ruta en la que el middleware sirve el flujo de eventos tiempo de espera El tiempo de espera después de una desconexión antes de intentar volver a conectarse superposición Establézcalo en falso para deshabilitar la superposición del lado del cliente basada en DOM. recargar Establézcalo en verdadero para recargar automáticamente la página cuando el paquete web se atasque.</description>
    </item>
    
    <item>
      <title>Cargadores</title>
      <link>https://www.wikiod.com/es/webpack/cargadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/cargadores/</guid>
      <description>Los cargadores de paquetes web se pueden configurar como &amp;ldquo;precargadores&amp;rdquo;, &amp;ldquo;cargadores&amp;rdquo; y &amp;ldquo;postcargadores&amp;rdquo;. Aunque no tienen por qué serlo, las configuraciones que usan linting u otras operaciones imperativas o en serie pueden aprovechar estas etapas de compilación en la canalización.
La clave para comprender los cargadores y su uso es que Webpack ejecutará cada módulo en el gráfico requerido a través del sistema del cargador. Siguiendo el ejemplo anterior, esto significa que a medida que Webpack comienza a rastrear las importaciones de su aplicación, identificará los archivos necesarios y, mediante una expresión regular simple, determinará qué archivo o tipo de archivo requiere qué cargador o serie de cargadores.</description>
    </item>
    
    <item>
      <title>Cargadores y complementos</title>
      <link>https://www.wikiod.com/es/webpack/cargadores-y-complementos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/cargadores-y-complementos/</guid>
      <description>Los cargadores y complementos constituyen los componentes básicos de Webpack.
Los cargadores generalmente se delegan a una sola tarea y tipo de archivo. Son más fáciles de configurar y generalmente requieren menos código repetitivo.
Los complementos, por otro lado, tienen acceso al sistema de compilación interno de Webpack a través de ganchos y, por lo tanto, son más poderosos. Los complementos pueden modificar el entorno de Webpack completamente configurado y pueden realizar acciones personalizadas durante todo el proceso de compilación.</description>
    </item>
    
    <item>
      <title>Uso del paquete web</title>
      <link>https://www.wikiod.com/es/webpack/uso-del-paquete-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/uso-del-paquete-web/</guid>
      <description>Ejemplo de uso de módulos CommonJS # Crear carpeta. Ábralo en la línea de comandos. Ejecute npm install webpack -g. Crea 2 archivos:
gatos.js:
var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; aplicación.js
cats = require(&#39;./cats.js&#39;); console.log(cats); Ejecutar en la línea de comando: webpack ./app.js app.bundle.js
Ahora en la carpeta estará el archivo app.bundle.js. Puede incluirlo en la página index.html, abrirlo en el navegador y ver el resultado en la consola.</description>
    </item>
    
    <item>
      <title>Sacudir el árbol</title>
      <link>https://www.wikiod.com/es/webpack/sacudir-el-arbol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/sacudir-el-arbol/</guid>
      <description>ES2015 árbol temblando # webpack 2 introduce el movimiento del árbol que puede eliminar el código no utilizado cuando los módulos ES2015 se utilizan para importar y exportar código.
Instalar # npm install babel-preset-es2015-webpack --save-dev Uso # en .babelrc:
{ &amp;quot;presets&amp;quot;: [ &amp;quot;es2015-webpack&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>Servidor de desarrollo webpack-dev-server</title>
      <link>https://www.wikiod.com/es/webpack/servidor-de-desarrollo-webpack-dev-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/webpack/servidor-de-desarrollo-webpack-dev-server/</guid>
      <description>Instalación # webpack-dev-server se puede instalar a través de npm
npm --save-dev webpack-dev-server ahora puedes iniciar el servidor
./node_modules/.bin/webpack-dev-server Para simplificar el uso, puede agregar un script a package.json
// package.json { ... &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server&amp;quot; }, ... } ahora para ejecutar el servidor puedes usar
npm run start webpack-dev-server está configurado en el archivo webpack.config.js en la sección devServer.
Para cambiar el directorio base de contenido del servidor, puede usar la opción contentBase.</description>
    </item>
    
  </channel>
</rss>

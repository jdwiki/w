<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core-Bluetooth Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/core-bluetooth/</link>
    <description>Recent content in Core-Bluetooth Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/core-bluetooth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con core-bluetooth</title>
      <link>https://www.wikiod.com/es/core-bluetooth/primeros-pasos-con-core-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-bluetooth/primeros-pasos-con-core-bluetooth/</guid>
      <description>Instalación o configuración # Instrucciones detalladas sobre cómo configurar o instalar core-bluetooth.</description>
    </item>
    
    <item>
      <title>Escanee y conéctese con periféricos BLE (Bluetooth Smart)</title>
      <link>https://www.wikiod.com/es/core-bluetooth/escanee-y-conectese-con-perifericos-ble-bluetooth-smart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-bluetooth/escanee-y-conectese-con-perifericos-ble-bluetooth-smart/</guid>
      <description>Esta sección describe cómo la central (aplicación de iOS) puede escanear los periféricos BLE disponibles y conectarse con uno que nos interese.
Escanear todos los periféricos disponibles # Rápido:
centralManager.scanForPeripherals(withServices: nil, options: nil) C objetivo:
[centralManager scanForPeripheralsWithServices:nil options:nil]; Escanear periféricos disponibles solo con servicios interesados # Rápido:
let services = [CBUUID(string: SERVICE1_UUID), CBUUID(string: SERVICE2_UUID)] centralManager.scanForPeripherals(withServices: services, options: nil) C objetivo:
NSArray *services = @[[CBUUID UUIDWithString:SERVICE1_UUID], [CBUUID UUIDWithString:SERVICE2_UUID]]; [centralManager scanForPeripheralsWithServices:services options:nil]; </description>
    </item>
    
    <item>
      <title>Configurar el administrador central de bluetooth</title>
      <link>https://www.wikiod.com/es/core-bluetooth/configurar-el-administrador-central-de-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-bluetooth/configurar-el-administrador-central-de-bluetooth/</guid>
      <description>CBCentralManager actúa como una aplicación lateral central de clase de administrador, generalmente una aplicación iOS. que se encarga de tender un puente de comunicación entre los periféricos y la central.
Declarar e instanciar CBCentralManager # Rápido:
var centralManager:CBCentralManager! centralManager = CBCentralManager(delegate: self, queue: nil) C objetivo:
@property (nonatomic, strong) CBCentralManager *centralManager; centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil]; Declarar e instanciar CBCentralManager con opciones # Rápido:
var centralManager:CBCentralManager! centralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionRestoreIdentifierKey : &amp;quot;com.</description>
    </item>
    
  </channel>
</rss>

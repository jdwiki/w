<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de POSIX on </title>
    <link>https://www.wikiod.com/es/docs/posix/</link>
    <description>Recent content in Tutorial de POSIX on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/posix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con POSIX</title>
      <link>https://www.wikiod.com/es/posix/primeros-pasos-con-posix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/primeros-pasos-con-posix/</guid>
      <description>¿Qué es POSIX? # POSIX significa &amp;ldquo;Interfaz de sistema operativo portátil&amp;rdquo; y define un conjunto de estándares para proporcionar compatibilidad entre diferentes plataformas informáticas. La versión actual del estándar es IEEE 1003.1 2016 y se puede acceder desde OpenGroup [especificación POSIX] (http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm). Las versiones anteriores incluyen POSIX 2004 y POSIX 1997. La edición POSIX 2016 es esencialmente POSIX 2008 más errata (también hubo una versión POSIX 2013).
POSIX define varias interfaces de herramientas, comandos y API para sistemas operativos similares a UNIX y otros.</description>
    </item>
    
    <item>
      <title>Temporizadores</title>
      <link>https://www.wikiod.com/es/posix/temporizadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/temporizadores/</guid>
      <description>Temporizador POSIX con notificación SIGEV_THREAD # Este ejemplo demuestra el uso del temporizador POSIX con el reloj CLOCK_REALTIME y el método de notificación SIGEV_THREAD.
#include &amp;lt;stdio.h&amp;gt; /* for puts() */ #include &amp;lt;string.h&amp;gt; /* for memset() */ #include &amp;lt;unistd.h&amp;gt; /* for sleep() */ #include &amp;lt;stdlib.h&amp;gt; /* for EXIT_SUCCESS */ #include &amp;lt;signal.h&amp;gt; /* for `struct sigevent` and SIGEV_THREAD */ #include &amp;lt;time.h&amp;gt; /* for timer_create(), `struct itimerspec`, * timer_t and CLOCK_REALTIME */ void thread_handler(union sigval sv) { char *s = sv.</description>
    </item>
    
    <item>
      <title>Enchufes</title>
      <link>https://www.wikiod.com/es/posix/enchufes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/enchufes/</guid>
      <description>Servidor de eco concurrente TCP # En este ejemplo, crearemos un servidor de eco simple que escuchará en el puerto especificado y podrá manejar nuevas conexiones:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;time.h&amp;gt; /** Connection handler - this will be executed in the new process, after forking, and it will read all the data from the socket, while available and to echo it on the local terminal.</description>
    </item>
    
    <item>
      <title>Hilos</title>
      <link>https://www.wikiod.com/es/posix/hilos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/hilos/</guid>
      <description>Uso de exclusión mutua simple # La biblioteca de subprocesos POSIX proporciona la implementación de la primitiva mutex, utilizada para la exclusión mutua. Mutex se crea usando pthread_mutex_init y se destruye usando pthread_mutex_destroy. La obtención de un mutex se puede hacer usando pthread_mutex_lock o pthread_mutex_trylock, (dependiendo de si se desea el tiempo de espera) y la liberación de un mutex se realiza a través de pthread_mutex_unlock.
A continuación, se muestra un ejemplo simple que usa un mutex para serializar el acceso a la sección crítica.</description>
    </item>
    
    <item>
      <title>Señales</title>
      <link>https://www.wikiod.com/es/posix/senales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/senales/</guid>
      <description>Sintaxis # alarma sin firmar (segundos sin firmar); int kill(pid_t pid, int sig); Parámetros # función, parámetro(s), valor de retorno Descripción alarma() nombre de función segundos sin signo Segundos para activar una alarma o 0 para cancelar cualquier alarma pendiente &amp;gt;= 0 0 si no había ninguna otra alarma pendiente; de ​​lo contrario, el número de segundos que la alarma pendiente aún tenía abierta. Esta función no fallará. - - matar() nombre de función pid_t pid .</description>
    </item>
    
    <item>
      <title>Procesos</title>
      <link>https://www.wikiod.com/es/posix/procesos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/procesos/</guid>
      <description>Sintaxis # pid_t getpid(vacío); pid_t getppid(vacío); bifurcación pid_t (vacío); pid_t waitpid(pid_t pid, int *wstatus, int opciones); int execv(const char *ruta, char *const argv[]); Parámetros # función, parámetro(s), valor de retorno Descripción bifurcación() nombre de función ninguno n/a Devuelve PID, 0 o -1 El proceso que llama recibe el PID del proceso recién creado o -1 en caso de falla. El niño (el proceso recién creado) recibe 0. En caso de falla, establezca errno en EAGAIN o ENOMEM - - execv() nombre de función const char *ruta Cadena que contiene el nombre del ejecutable (puede incluir la ruta) char *const argv[] Matriz de puntero de cadena como argumentos Devuelve -1 en caso de error En caso de éxito, esta función no regresa.</description>
    </item>
    
    <item>
      <title>sistema de archivos</title>
      <link>https://www.wikiod.com/es/posix/sistema-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/sistema-de-archivos/</guid>
      <description>Eliminar archivos recursivamente (nftw, no seguro para subprocesos) # #define _XOPEN_SOURCE 500 #include &amp;lt;stdlib.h&amp;gt; /* for exit() */ #include &amp;lt;stdio.h&amp;gt; /* for remove() */ #include &amp;lt;ftw.h&amp;gt; /* for nftw() */ int unlink_cb( const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf) { return remove(fpath); } int rm_rf(const char *path) { return nftw(path, unlink_cb, 64 /* number of simultaneously opened fds, up to OPEN_MAX */, FTW_DEPTH | FTW_PHYS); } La bandera FTW_PHYS significa no seguir enlaces simbólicos</description>
    </item>
    
    <item>
      <title>Tubería</title>
      <link>https://www.wikiod.com/es/posix/tuberia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/tuberia/</guid>
      <description>Las tuberías son un mecanismo para la comunicación unidireccional entre procesos o entre subprocesos dentro del alcance de una sola máquina. Lógicamente, una tubería consta de dos terminales conectados, uno en el que se pueden escribir datos y otro desde el que se pueden leer posteriormente, con un búfer de datos entre tales que no es necesario que las escrituras y las lecturas sean sincrónicas. Las tuberías deben distinguirse de las tuberías de caparazón, que son una aplicación de las tuberías.</description>
    </item>
    
    <item>
      <title>bloqueos de archivos</title>
      <link>https://www.wikiod.com/es/posix/bloqueos-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/bloqueos-de-archivos/</guid>
      <description>Sintaxis # int fcntl(int fd, int cmd, struct flock*); int lockf(int fd, int cmd, off_t len); Bloqueos de registros POSIX (fcntl) # Este ejemplo demuestra el uso de bloqueos de registros POSIX (también conocidos como bloqueos asociados a procesos), proporcionados por la función fcntl (estándar base POSIX).
Notas:
Se admiten bloqueos exclusivos y compartidos. Se puede aplicar a un rango de bytes, opcionalmente expandiéndose automáticamente cuando se agregan datos en el futuro (controlado por struct flock).</description>
    </item>
    
    <item>
      <title>Multiplexación de entradasalida</title>
      <link>https://www.wikiod.com/es/posix/multiplexacion-de-entradasalida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/posix/multiplexacion-de-entradasalida/</guid>
      <description>IO puede ser bloqueante/no bloqueante y sincrónico/asincrónico. La API POSIX proporciona una API de bloqueo síncrono (por ejemplo, llamadas clásicas de lectura, escritura, envío y recepción), API sin bloqueo síncrono (las mismas funciones, descriptores de archivo abiertos con el indicador O_NONBLOCK y llamadas de multiplexación de E/S) y API asíncrona (funciones que comienzan con aio_).
La API síncrona generalmente se usa con el estilo &amp;ldquo;un hilo/proceso por fd&amp;rdquo;. Esto es terrible para los recursos.</description>
    </item>
    
  </channel>
</rss>

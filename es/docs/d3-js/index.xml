<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de d3.js on </title>
    <link>https://www.wikiod.com/es/docs/d3-js/</link>
    <description>Recent content in Tutorial de d3.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/d3-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con d3.js</title>
      <link>https://www.wikiod.com/es/d3-js/primeros-pasos-con-d3js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/primeros-pasos-con-d3js/</guid>
      <description>Instalación # Hay una variedad de formas de descargar y usar D3.
Descarga directa del script # Descarga y extrae d3.zip Copie la carpeta resultante donde guardará las dependencias de su proyecto Haga referencia a d3.js (para desarrollo) o d3.min.js (para producción) en su HTML: &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;scripts/d3/d3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; MNP # Inicialice NPM en su proyecto si aún no lo ha hecho: npm init NPM instalar D3: npm install --save d3 Haga referencia a d3.</description>
    </item>
    
    <item>
      <title>Envío de eventos con d3.dispatch</title>
      <link>https://www.wikiod.com/es/d3-js/envio-de-eventos-con-d3dispatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/envio-de-eventos-con-d3dispatch/</guid>
      <description>Sintaxis # d3.dispatch: crea un despachador de eventos personalizado. dispatch.on - registrar o anular el registro de un detector de eventos. dispatch.copy - crea una copia de un despachador. despacho.llamada - enviar un evento a los oyentes registrados. dispatch.apply - envía un evento a los oyentes registrados. El envío es un mecanismo conveniente para separar las preocupaciones con código débilmente acoplado: registre devoluciones de llamada con nombre y luego llámelas con argumentos arbitrarios.</description>
    </item>
    
    <item>
      <title>Usando D3 con JSON y CSV</title>
      <link>https://www.wikiod.com/es/d3-js/usando-d3-con-json-y-csv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/usando-d3-con-json-y-csv/</guid>
      <description>Sintaxis # d3.csv(url[[, fila], devolución de llamada]) d3.tsv(url[[, fila], devolución de llamada]) d3.html(url[, devolución de llamada]) d3.json(url[, devolución de llamada]) d3.text(url[, devolución de llamada]) d3.xml(url[, devolución de llamada]) Cargando datos desde archivos CSV # Hay varias formas de obtener los datos que vinculará a los elementos DOM. El más simple es tener sus datos en su secuencia de comandos como una matriz&amp;hellip;
var data = [ ... ]; Pero D3.js nos permite cargar datos desde un archivo externo.</description>
    </item>
    
    <item>
      <title>patrón de actualización</title>
      <link>https://www.wikiod.com/es/d3-js/patron-de-actualizacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/patron-de-actualizacion/</guid>
      <description>Sintaxis # selección.enter() selección.salir() selección.merge() Actualización de los datos: un ejemplo básico de selecciones de entrada, actualización y salida # Crear un gráfico que muestre un conjunto de datos estáticos es relativamente simple. Por ejemplo, si tenemos esta matriz de objetos como datos:
var data = [ {title: &amp;quot;A&amp;quot;, value: 53}, {title: &amp;quot;B&amp;quot;, value: 12}, {title: &amp;quot;C&amp;quot;, value: 91}, {title: &amp;quot;D&amp;quot;, value: 24}, {title: &amp;quot;E&amp;quot;, value: 59} ]; Podemos crear un gráfico de barras donde cada barra represente una medida, denominada &amp;ldquo;título&amp;rdquo;, y su ancho represente el valor de esa medida.</description>
    </item>
    
    <item>
      <title>Proyecciones D3</title>
      <link>https://www.wikiod.com/es/d3-js/proyecciones-d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/proyecciones-d3/</guid>
      <description>Proyecciones de Albers # Una proyección de Albers, o más propiamente, una proyección cónica de áreas iguales de Albers, es una proyección cónica común y una proyección oficial de varias jurisdicciones y organizaciones como la oficina del censo de EE. UU. y la provincia de Columbia Británica en Canadá. Conserva el área a expensas de otros aspectos del mapa como la forma, el ángulo y la distancia.
Propiedades generales # La transformación general se captura en el siguiente gif:</description>
    </item>
    
    <item>
      <title>Trozos escogidos</title>
      <link>https://www.wikiod.com/es/d3-js/trozos-escogidos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/trozos-escogidos/</guid>
      <description>Sintaxis # d3.seleccionar(selector) d3.selectAll(selector) selección.seleccionar(selector) selección.selectAll(selector) selección.filtro(filtro) selección.combinar(otro) Lecturas relacionadas:
Cómo funcionan las selecciones - Mike Bostock [LÉAME de selección de d3] (https://github.com/d3/d3-selection/blob/master/README.md#selection) El papel de los marcadores de posición en las selecciones de &amp;ldquo;ingresar&amp;rdquo; # ¿Qué es una selección de ingreso?
En D3.js, cuando uno vincula datos a elementos DOM, son posibles tres situaciones:
El número de elementos y el número de puntos de datos son los mismos; Hay más elementos que puntos de datos; Hay más puntos de datos que elementos; En la situación #3, todos los puntos de datos sin un elemento DOM correspondiente pertenecen a la selección enter.</description>
    </item>
    
    <item>
      <title>Conceptos básicos de SVG utilizados en la visualización de D3.js</title>
      <link>https://www.wikiod.com/es/d3-js/conceptos-basicos-de-svg-utilizados-en-la-visualizacion-de-d3js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/conceptos-basicos-de-svg-utilizados-en-la-visualizacion-de-d3js/</guid>
      <description>Sistema coordinado # En un sistema de coordenadas matemático normal, el punto x=0, y=0 está en la esquina inferior izquierda del gráfico. Pero en el sistema de coordenadas SVG, este punto (0,0) está en la esquina superior izquierda del &amp;rsquo;lienzo&amp;rsquo;, es algo similar a CSS cuando especifica la posición absoluta/fija y usa arriba y a la izquierda para controlar el punto exacto del elemento.
Es fundamental tener en cuenta que a medida que y aumenta en SVG, las formas se mueven hacia abajo.</description>
    </item>
    
    <item>
      <title>Gráficos SVG usando D3 js</title>
      <link>https://www.wikiod.com/es/d3-js/graficos-svg-usando-d3-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/graficos-svg-usando-d3-js/</guid>
      <description>Usando D3 js para crear elementos SVG # Aunque D3 no es específico para manejar elementos SVG, se usa ampliamente para crear y manipular visualizaciones de datos complejas basadas en SVG. D3 proporciona muchos métodos poderosos que ayudan a crear varias estructuras SVG geométricas con facilidad.
Se recomienda comprender primero los conceptos básicos de las especificaciones SVG y luego usar ejemplos extensos de D3 js para crear visualizaciones.
Ejemplos de D3 js</description>
    </item>
    
    <item>
      <title>Uso de D3 con otros marcos</title>
      <link>https://www.wikiod.com/es/d3-js/uso-de-d3-con-otros-marcos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/uso-de-d3-con-otros-marcos/</guid>
      <description>D3js con Angular # El uso de D3js con Angular puede abrir nuevos frentes de posibilidades, como la actualización en vivo de gráficos tan pronto como se actualicen los datos. Podemos encapsular la funcionalidad completa del gráfico dentro de una directiva Angular, lo que la hace fácilmente reutilizable.
índice.html &amp;raquo;
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app=&amp;quot;myApp&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://d3js.org/d3.v4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script data-require=&amp;quot;angular.js@1.4.1&amp;quot; data-semver=&amp;quot;1.4.1&amp;quot; src=&amp;quot;https://code.angularjs.org/1.4.1/angular.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;bar-chart.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div ng-controller=&amp;quot;MyCtrl&amp;quot;&amp;gt; &amp;lt;!-- reusable d3js bar-chart directive, data is sent using isolated scope --&amp;gt; &amp;lt;bar-chart data=&amp;quot;data&amp;quot;&amp;gt;&amp;lt;/bar-chart&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Podemos pasar los datos al gráfico usando el controlador y observar cualquier cambio en los datos para habilitar la actualización en vivo del gráfico en la directiva:</description>
    </item>
    
    <item>
      <title>Enfoques para crear gráficos d3.js receptivos</title>
      <link>https://www.wikiod.com/es/d3-js/enfoques-para-crear-graficos-d3js-receptivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/d3-js/enfoques-para-crear-graficos-d3js-receptivos/</guid>
      <description>Sintaxis # var ancho = document.getElementById(&amp;lsquo;chartArea&amp;rsquo;).clientWidth; var alto = ancho / 3.236; ventana.onresize = resizeFunctionCall; Uso de arranque # Un enfoque que se emplea a menudo es usar el marco cuadriculado de bootstrap para definir el área en la que existirá el gráfico. Usar esto junto con la variable clientWidth y el window.onresize, es muy fácil crear SVG d3 que respondan.
Primero creemos una fila y una columna en la que se construirá nuestro gráfico.</description>
    </item>
    
  </channel>
</rss>

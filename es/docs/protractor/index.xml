<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transportador Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/protractor/</link>
    <description>Recent content in Transportador Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/protractor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el transportador</title>
      <link>https://www.wikiod.com/es/protractor/primeros-pasos-con-el-transportador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/primeros-pasos-con-el-transportador/</guid>
      <description>Instalación y configuración del transportador (en Windows) # Requisitos: Transportador requiere que se instalen las siguientes dependencias antes de la instalación:
Java JDK 1.7 o superior Node.js v4 o superior Instalación: Descargue e instale Node.js desde esta URL: https://nodejs.org/en/
Para ver si la instalación de Node.js es exitosa, puede ir y verificar las variables de entorno. La &amp;lsquo;Ruta&amp;rsquo; en Variables del sistema se actualizará automáticamente.
También puede verificar lo mismo escribiendo el comando npm -version en el símbolo del sistema que le dará la versión instalada.</description>
    </item>
    
    <item>
      <title>Selectores de CSS</title>
      <link>https://www.wikiod.com/es/protractor/selectores-de-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/selectores-de-css/</guid>
      <description>Sintaxis # by.css(&amp;lsquo;css-selector&amp;rsquo;) por.id(&amp;lsquo;id&amp;rsquo;) por.modelo(&amp;lsquo;modelo&amp;rsquo;) by.binding(&amp;lsquo;binding&amp;rsquo;) Parámetros # Parámetro Detalles selector css Un selector css como &#39;.class-name&#39; para seleccionar el elemento en la base del nombre de la clase id Id del elemento dom modelo Modelo utilizado para el elemento dom binding Nombre del enlace que se utiliza para enlazar a cierto elemento ¿Cómo escribir selectores css?
Los atributos más importantes para escribir selectores css son la clase y la identificación de dom.</description>
    </item>
    
    <item>
      <title>Selectores XPath en Transportador</title>
      <link>https://www.wikiod.com/es/protractor/selectores-xpath-en-transportador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/selectores-xpath-en-transportador/</guid>
      <description>Seleccionando un elemento DOM usando un transportador # Además de los selectores de enlace, modelo y CSS, el transportador también puede ubicar elementos usando xpath Vista
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#39;http://www.google.com&#39;&amp;gt;Go to google&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; Código
var googleLink= element(by.xpath(&#39;//ul/li/a&#39;)); expect(element.getText()).to.eventually.equal(&#39;Go to google&#39;,&#39;The text you mention was not found&#39;); Seleccionando elementos con atributos específicos # Los selectores de XPath se pueden usar para seleccionar elementos con atributos específicos, como clase, id, título, etc.
por clase # Vista:</description>
    </item>
    
    <item>
      <title>Esperas explícitas con browser.wait()</title>
      <link>https://www.wikiod.com/es/protractor/esperas-explicitas-con-browserwait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/esperas-explicitas-con-browserwait/</guid>
      <description>navegador.dormir() vs navegador.esperar() # Cuando se trata de lidiar con problemas de tiempo, es tentador y fácil poner un &amp;ldquo;rápido&amp;rdquo; browser.sleep(&amp;lt;timeout_in_milliseconds&amp;gt;) y seguir adelante.
El problema es que algún día fallaría. No existe una regla de oro/genérica sobre qué tiempo de espera de suspensión establecer y, por lo tanto, en algún momento debido a la red o el rendimiento u otros problemas, una página puede tardar más en cargarse o un elemento en volverse visible, etc.</description>
    </item>
    
    <item>
      <title>Depurador de transportador</title>
      <link>https://www.wikiod.com/es/protractor/depurador-de-transportador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/depurador-de-transportador/</guid>
      <description>Sintaxis # navegador.pausa() navegador.depurador() Esta sección explica cómo podemos depurar las pruebas del transportador.
Usando navegador.pausa() # El método pause() es una de las soluciones más sencillas que Protractor le brinda para depurar el código, para usarlo debe agregarlo en su código donde desea pausar la ejecución. Una vez que la ejecución está en estado de pausa:
Puede usar C (tipo C) para avanzar. Tenga cuidado al usarlo, debe escribir este comando sin demora, ya que puede obtener un error de tiempo de espera de su biblioteca de aserciones si se demora en presionar c.</description>
    </item>
    
    <item>
      <title>Archivo de configuración del transportador</title>
      <link>https://www.wikiod.com/es/protractor/archivo-de-configuracion-del-transportador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/archivo-de-configuracion-del-transportador/</guid>
      <description>El archivo de configuración contiene información que Protractor usa para ejecutar su script de prueba. Aquí voy a tratar de dar algunas variaciones diferentes.
Archivo de configuración simple - Chrome # var config = {}; var timeout = 120000; config.framework = &#39;jasmine2&#39;; config.allScriptsTimeout = timeout; config.getPageTimeout = timeout; config.jasmineNodeOpts.isVerbose = true; config.jasmineNodeOpts.defaultTimeoutInterval = timeout; config.specs = [&#39;qa/**/*Spec.js&#39;]; config.browserName = &#39;chrome&#39;; exports.config = config; Archivo de configuración con capacidades - Chrome # var config = {}; var timeout = 120000; config.</description>
    </item>
    
    <item>
      <title>Prueba de aplicaciones no angulares con transportador</title>
      <link>https://www.wikiod.com/es/protractor/prueba-de-aplicaciones-no-angulares-con-transportador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/prueba-de-aplicaciones-no-angulares-con-transportador/</guid>
      <description>El transportador está hecho para probar aplicaciones angulares. Sin embargo, aún es posible probar aplicaciones no angulares con Protractor si es necesario.
Cambios necesarios para probar la aplicación no angular con Protractor # Use browser.driver en lugar de driver
Use browser.driver.ignoreSynchronization = true
Motivo: El transportador espera a que los componentes angulares se carguen por completo en una página web antes de comenzar cualquier ejecución. Sin embargo, dado que nuestras páginas no son angulares, Protractor sigue esperando que se cargue &amp;lsquo;angular&amp;rsquo; hasta que la prueba falla con el tiempo de espera.</description>
    </item>
    
    <item>
      <title>Flujo de control y promesas</title>
      <link>https://www.wikiod.com/es/protractor/flujo-de-control-y-promesas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/flujo-de-control-y-promesas/</guid>
      <description>Protractor/WebDriverJS tiene este mecanismo llamado Flujo de control - es una cola interna de promesas, mantiene organizada la ejecución del código.
Comprender el flujo de control # Considere la siguiente prueba:
it(&#39;should test something&#39;, function() { browser.get(&#39;/dashboard/&#39;); $(&amp;quot;#myid&amp;quot;).click(); expect(element(by.model(&#39;username&#39;)).getText()).toEqual(&#39;Test&#39;); console.log(&amp;quot;HERE&amp;quot;); }); En la siguiente prueba, cuando se ejecuta console.log() y ve HERE en la consola, no se ha ejecutado ninguno de los comandos del Transportador de las líneas anteriores. Este es un comportamiento completamente asincrónico.</description>
    </item>
    
    <item>
      <title>Objetos de página</title>
      <link>https://www.wikiod.com/es/protractor/objetos-de-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/objetos-de-pagina/</guid>
      <description>Los objetos de página son un patrón de diseño que da como resultado menos duplicados de código, fácil mantenimiento y más legibilidad.
Objeto de la primera página # /* save the file in &#39;pages/loginPage&#39; var LoginPage = function(){ }; /*Application object properties*/ LoginPage.prototype = Object.create({}, { userName: { get: function() { return browser.driver.findElement(By.id(&#39;userid&#39;)); } }, userPass: { get: function() { return browser.driver.findElement(By.id(&#39;password&#39;)); } }, submitBtn: { get: function() { return browser.</description>
    </item>
    
    <item>
      <title>Elementos de ubicación</title>
      <link>https://www.wikiod.com/es/protractor/elementos-de-ubicacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/protractor/elementos-de-ubicacion/</guid>
      <description>Para poder interactuar con una página, debe decirle a Protractor exactamente qué elemento buscar. La base utilizada para la selección de elementos son los localizadores. Transportador, además de incluir los selectores genéricos de Selenium, también tiene localizadores específicos de Angular que son más robustos y persistentes a los cambios. Sin embargo, a veces, incluso en una aplicación Angular, se deben usar localizadores regulares.
Parámetros # Parámetro Detalle seleccionador Una cadena que especifica el valor del selector (depende del localizador) Localizadores específicos del transportador (para aplicaciones basadas en Angular) # Estos localizadores deben usarse como una prioridad cuando sea posible, porque son más persistentes a los cambios en una aplicación que los localizadores basados ​​en css o xpath, que pueden romperse fácilmente.</description>
    </item>
    
  </channel>
</rss>

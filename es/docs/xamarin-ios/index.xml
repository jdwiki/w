<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Xamarin.iOS on </title>
    <link>https://www.wikiod.com/es/docs/xamarin-ios/</link>
    <description>Recent content in Tutorial de Xamarin.iOS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/xamarin-ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Xamarin.iOS</title>
      <link>https://www.wikiod.com/es/xamarin-ios/primeros-pasos-con-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/primeros-pasos-con-xamarinios/</guid>
      <description>Comenzar en Visual Studio # Vaya a Archivo &amp;gt; Nuevo &amp;gt; Proyecto para que aparezca el cuadro de diálogo Nuevo proyecto. Navegue a Visual C# &amp;gt; iOS &amp;gt; iPhone y seleccione Aplicación de vista única: Dale a tu aplicación un Nombre y presiona OK para crear tu proyecto. Seleccione el icono de Mac Agent en la barra de herramientas, como se ilustra a continuación: Seleccione la Mac que creará su aplicación de la lista (¡asegúrese de que su Mac esté configurada para recibir la conexión!</description>
    </item>
    
    <item>
      <title>Enlace de bibliotecas Swift</title>
      <link>https://www.wikiod.com/es/xamarin-ios/enlace-de-bibliotecas-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/enlace-de-bibliotecas-swift/</guid>
      <description>Una guía fácil de seguir que lo guiará a través del proceso de enlace de archivos .framework de Swift para usarlos en un proyecto de Xamarin.
Al construir una biblioteca en Xcode, tiene una opción para incluir las bibliotecas rápidas. ¡No! Se incluirán en su aplicación final como NOMBRE.app/Frameworks/LIBRARY.framework/Frameworks/libswift*.dylib pero deben incluirse como NOMBRE.app/Frameworks/libswift*.dylib
Puede encontrar esta información en otro lugar, pero vale la pena mencionarla: no incluya Bitcode en la biblioteca.</description>
    </item>
    
    <item>
      <title>Métodos de cambio de tamaño para UIImage</title>
      <link>https://www.wikiod.com/es/xamarin-ios/metodos-de-cambio-de-tamano-para-uiimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/metodos-de-cambio-de-tamano-para-uiimage/</guid>
      <description>Cambiar el tamaño de la imagen - con relación de aspecto # // resize the image to be contained within a maximum width and height, keeping aspect ratio public static UIImage MaxResizeImage(this UIImage sourceImage, float maxWidth, float maxHeight) { var sourceSize = sourceImage.Size; var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height); if (maxResizeFactor &amp;gt; 1) return sourceImage; var width = maxResizeFactor * sourceSize.Width; var height = maxResizeFactor * sourceSize.Height; UIGraphics.</description>
    </item>
    
    <item>
      <title>identifición de toque</title>
      <link>https://www.wikiod.com/es/xamarin-ios/identificion-de-toque/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/identificion-de-toque/</guid>
      <description>Parámetros # Columna Columna Celda Célula Primero, establezca si el dispositivo es capaz de aceptar la entrada Touch ID.
if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)) Si es así, podemos mostrar la interfaz de usuario de Touch ID usando:
context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler); Hay tres piezas de información que debemos pasar a EvaluatePolicy: la política en sí, una cadena que explica por qué es necesaria la autenticación y un controlador de respuesta. El controlador de respuesta le dice a la aplicación qué debe hacer en caso de una autenticación exitosa o fallida.</description>
    </item>
    
    <item>
      <title>Programación concurrente en Xamarin.iOS</title>
      <link>https://www.wikiod.com/es/xamarin-ios/programacion-concurrente-en-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/programacion-concurrente-en-xamarinios/</guid>
      <description>Manipulación de la interfaz de usuario de subprocesos de fondo # Los subprocesos de fondo no pueden modificar la interfaz de usuario; casi todos los métodos de UIKit deben llamarse en el subproceso principal.
Desde una subclase de NSObject (incluyendo cualquier UIViewController o UIView):
InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); Desde una clase estándar de C#:
UIApplication.SharedApplication.InvokeOnMainThread(() =&amp;gt; { // Call UI methods here }); InvokeOnMainThread espera a que su código se ejecute en el subproceso principal antes de continuar.</description>
    </item>
    
    <item>
      <title>Cálculo de altura de fila variable en GetHeightForRow</title>
      <link>https://www.wikiod.com/es/xamarin-ios/calculo-de-altura-de-fila-variable-en-getheightforrow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/calculo-de-altura-de-fila-variable-en-getheightforrow/</guid>
      <description>Calcular la altura de las filas puede ser costoso y el rendimiento del desplazamiento puede verse afectado si tiene una gran cantidad de datos. En ese escenario, anule UITableViewSource.EstimatedHeight(UITableView, NSIndexPath) para proporcionar rápidamente un número suficiente para un desplazamiento rápido, por ejemplo:
public override nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath) { return 44.0f; } Usando GetHeightForRow # Para establecer una altura de fila personalizada, invalide UITableViewSource.GetHeightForRow(UITableView,NSIndexPath):
public class ColorTableDataSource : UITableViewSource { List&amp;lt;DomainClass&amp;gt; Model { get; set; } public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath) { var height = Model[indexPath.</description>
    </item>
    
    <item>
      <title>Diseño automático en Xamarin.iOS</title>
      <link>https://www.wikiod.com/es/xamarin-ios/diseno-automatico-en-xamarinios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/diseno-automatico-en-xamarinios/</guid>
      <description>Adición de restricciones con anclajes de diseño de iOS 9+ # // Since the anchor system simply returns constraints, you still need to add them somewhere. View.AddConstraints( new[] { someLabel.TopAnchor.ConstraintEqualTo(TopLayoutGuide.GetBottomAnchor()), anotherLabel.TopAnchor.ConstraintEqualTo(someLabel.BottomAnchor, 6), oneMoreLabel.TopAnchor.ConstraintEqualTo(anotherLabel.BottomAnchor, 6), oneMoreLabel.BottomAnchor.ConstraintGreaterThanOrEqualTo(BottomLayoutGuide.GetTopAnchor(), -10), } ); Adición de restricciones mediante el lenguaje de formato visual (VFL) # // Using Visual Format Language requires a special look-up dictionary of names&amp;lt;-&amp;gt;views. var views = new NSDictionary( nameof(someLabel), someLabel, nameof(anotherLabel), anotherLabel, nameof(oneMoreLabel), oneMoreLabel ); // It can also take a look-up dictionary for metrics (such as size values).</description>
    </item>
    
    <item>
      <title>Alertas</title>
      <link>https://www.wikiod.com/es/xamarin-ios/alertas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/alertas/</guid>
      <description>Mostrar una alerta # Para las alertas desde iOS 8, usaría un UIAlertController pero para las versiones anteriores, habría usado un UIAlertView, que ahora está obsoleto.
var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert); alert.AddAction(UIAlertAction.Create(otherTitle, UIAlertActionStyle.Destructive, (action) =&amp;gt; { // otherTitle(); })); alert.AddAction(UIAlertAction.Create(cancelTitle, UIAlertActionStyle.Cancel, null)); this.PresentViewController(alert, true, null); var alert = new UIAlertView (title, message, null, cancelTitle, otherTitle); alert.Clicked += (object sender, UIButtonEventArgs e) =&amp;gt; { if(e.ButtonIndex == 1) // otherTitle(); }; alert.</description>
    </item>
    
    <item>
      <title>Uso de catálogos de activos</title>
      <link>https://www.wikiod.com/es/xamarin-ios/uso-de-catalogos-de-activos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/uso-de-catalogos-de-activos/</guid>
      <description>Adición de activos de imagen al catálogo de activos # Así es como se ve el catálogo de activos en Xamarin Studio,
Como se muestra en la imagen de arriba, hay 5 tipos de activos que puede crear dentro del catálogo.
Cubriré solo el conjunto de imágenes, porque es el más simple.
Cuando crea un nuevo conjunto de imágenes. Obtendrá opciones como esta Para agregar imágenes al catálogo, simplemente haga clic en los cuadrados discontinuos y seleccione la imagen que desea configurar para una opción en particular.</description>
    </item>
    
    <item>
      <title>Prácticas recomendadas para migrar de UILocalNotification al marco de notificaciones de usuarios</title>
      <link>https://www.wikiod.com/es/xamarin-ios/practicas-recomendadas-para-migrar-de-uilocalnotification-al-marco-de-notificaciones-de-usuarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin-ios/practicas-recomendadas-para-migrar-de-uilocalnotification-al-marco-de-notificaciones-de-usuarios/</guid>
      <description>Notificaciones de usuario # Tendrás que importar UserNotifications
@import UserNotifications; 2.Solicitar autorización para notificación local
let center = UNUserNotificationCenter.current() center.requestAuthorization([.alert, .sound]) { (granted, error) in // Enable or disable features based on authorization. } Ahora actualizaremos el número de placa del ícono de la aplicación
@IBAction func triggerNotification(){ let content = UNMutableNotificationContent() content.title = NSString.localizedUserNotificationString(forKey: &amp;quot;Tom said:&amp;quot;, arguments: nil) content.body = NSString.localizedUserNotificationString(forKey: &amp;quot;Hello Mike！Let&#39;s go.&amp;quot;, arguments: nil) content.sound = UNNotificationSound.default() content.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje C# on </title>
    <link>https://www.wikiod.com/es/docs/csharp/</link>
    <description>Recent content in Tutorial del lenguaje C# on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje C#</title>
      <link>https://www.wikiod.com/es/csharp/primeros-pasos-con-el-lenguaje-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/primeros-pasos-con-el-lenguaje-c/</guid>
      <description>Creando una nueva aplicación de consola (Visual Studio) # Abra Visual Studio
En la barra de herramientas, vaya a Archivo → Nuevo proyecto
Seleccione el tipo de proyecto Aplicación de consola
Abra el archivo Program.cs en el Explorador de soluciones
Agregue el siguiente código a Main():
public class Program { public static void Main() { // Prints a message to the console. System.Console.WriteLine(&amp;ldquo;Hello, World!&amp;rdquo;);
System.Console.ReadKey(); } }
En la barra de herramientas, haga clic en Depurar -&amp;gt; Iniciar depuración o presione F5 o ctrl + F5 (ejecutar sin depurador) para ejecutar el programa.</description>
    </item>
    
    <item>
      <title>Características de C# 6.0</title>
      <link>https://www.wikiod.com/es/csharp/caracteristicas-de-c-60/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/caracteristicas-de-c-60/</guid>
      <description>Esta sexta iteración del lenguaje C# la proporciona el compilador Roslyn. Este compilador salió con la versión 4.6 de .NET Framework, sin embargo, puede generar código de manera compatible con versiones anteriores para permitir apuntar a versiones anteriores del marco. El código de la versión 6 de C# se puede compilar de manera totalmente compatible con versiones anteriores de .NET 4.0. También se puede usar para marcos anteriores, sin embargo, algunas características que requieren soporte de marco adicional pueden no funcionar correctamente.</description>
    </item>
    
    <item>
      <title>Características de C# 7.0</title>
      <link>https://www.wikiod.com/es/csharp/caracteristicas-de-c-70/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/caracteristicas-de-c-70/</guid>
      <description>C# 7.0 es la séptima versión de C#. Esta versión contiene algunas características nuevas: soporte de idioma para tuplas, funciones locales, declaraciones out var, separadores de dígitos, literales binarios, coincidencia de patrones, expresiones throw, ref return y ref local y lista de miembros con cuerpo de expresión extendida.
Referencia oficial: Novedades de C# 7
Soporte de idioma para tuplas # Conceptos básicos # Una tupla es una lista ordenada y finita de elementos.</description>
    </item>
    
    <item>
      <title>Métodos de extensión</title>
      <link>https://www.wikiod.com/es/csharp/metodos-de-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/metodos-de-extension/</guid>
      <description>Sintaxis # público estático ReturnType MyExtensionMethod (este objetivo TargetType) público estático ReturnType MyExtensionMethod (este objetivo TargetType, TArg1 arg1, &amp;hellip;) Parámetros # Parámetro Detalles esto El primer parámetro de un método de extensión siempre debe estar precedido por la palabra clave this, seguido del identificador con el que se hace referencia a la instancia &amp;ldquo;actual&amp;rdquo; del objeto que está extendiendo Los métodos de extensión son azúcar sintáctico que permite invocar métodos estáticos en instancias de objetos como si fueran miembros del tipo mismo.</description>
    </item>
    
    <item>
      <title>Consultas LINQ</title>
      <link>https://www.wikiod.com/es/csharp/consultas-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/consultas-linq/</guid>
      <description>LINQ es un acrónimo que significa Lidioma INtegrated Query. Es un concepto que integra un lenguaje de consulta al ofrecer un modelo consistente para trabajar con datos en varios tipos de fuentes y formatos de datos; utiliza los mismos patrones de codificación básicos para consultar y transformar datos en documentos XML, bases de datos SQL, conjuntos de datos ADO.NET, colecciones .NET y cualquier otro formato para el que esté disponible un proveedor LINQ.</description>
    </item>
    
    <item>
      <title>Palabras clave</title>
      <link>https://www.wikiod.com/es/csharp/palabras-clave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/palabras-clave/</guid>
      <description>Palabras clave son identificadores reservados predefinidos con un significado especial para el compilador. No se pueden usar como identificadores en su programa sin el prefijo @. Por ejemplo @if es un identificador legal pero no la palabra clave if.
C# tiene una colección predefinida de &amp;ldquo;palabras clave&amp;rdquo; (o palabras reservadas), cada una de las cuales tiene una función especial. Estas palabras no se pueden usar como identificadores (nombres de variables, métodos, clases, etc.</description>
    </item>
    
    <item>
      <title>Palabra clave de rendimiento</title>
      <link>https://www.wikiod.com/es/csharp/palabra-clave-de-rendimiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/palabra-clave-de-rendimiento/</guid>
      <description>Cuando usa la palabra clave yield en una declaración, indica que el método, el operador o el accesor get en el que aparece es un iterador. El uso de yield para definir un iterador elimina la necesidad de una clase adicional explícita (la clase que contiene el estado de una enumeración) cuando implementa el patrón IEnumerable e IEnumerator para un tipo de colección personalizado.
Sintaxis # retorno de rendimiento [TIPO] pausa de rendimiento Poner la palabra clave yield en un método con el tipo de valor devuelto IEnumerable, IEnumerable&amp;lt;T&amp;gt;, IEnumerator o IEnumerator&amp;lt;T&amp;gt; le dice al compilador que genere una implementación del tipo de valor devuelto (IEnumerable o IEnumerator) que, cuando se repite, ejecuta el método hasta cada &amp;ldquo;rendimiento&amp;rdquo; para obtener cada resultado.</description>
    </item>
    
    <item>
      <title>Declaración de uso</title>
      <link>https://www.wikiod.com/es/csharp/declaracion-de-uso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/declaracion-de-uso/</guid>
      <description>Proporciona una sintaxis conveniente que garantiza el uso correcto de los objetos IDisposable.
Sintaxis # usando (desechable) { } usando (IDisposable desechable = new MyDisposable()) { } El objeto en la instrucción using debe implementar la interfaz IDisposable.
using(var obj = new MyObject()) { } class MyObject : IDisposable { public void Dispose() { // Cleanup } } Se pueden encontrar ejemplos más completos para la implementación de IDisposable en los documentos de MSDN.</description>
    </item>
    
    <item>
      <title>Manejo de excepciones</title>
      <link>https://www.wikiod.com/es/csharp/manejo-de-excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/manejo-de-excepciones/</guid>
      <description>Creación de excepciones personalizadas # Puede implementar excepciones personalizadas que se pueden lanzar como cualquier otra excepción. Esto tiene sentido cuando desea que sus excepciones se distingan de otros errores durante el tiempo de ejecución.
En este ejemplo, crearemos una excepción personalizada para un manejo claro de los problemas que la aplicación pueda tener al analizar una entrada compleja.
Creación de una clase de excepción personalizada # Para crear una excepción personalizada, cree una subclase de Exception:</description>
    </item>
    
    <item>
      <title>Async-Await</title>
      <link>https://www.wikiod.com/es/csharp/async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/csharp/async-await/</guid>
      <description>En C#, un método declarado async no se bloqueará dentro de un proceso síncrono, en caso de que esté utilizando operaciones basadas en E/S (por ejemplo, acceso web, trabajo con archivos, &amp;hellip;). Se puede esperar el resultado de dichos métodos marcados asíncronamente mediante el uso de la palabra clave await.
Un método async puede devolver void, Task o Task&amp;lt;T&amp;gt;.
El tipo de retorno Tarea esperará a que finalice el método y el resultado será vacío.</description>
    </item>
    
  </channel>
</rss>

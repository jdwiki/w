<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aurelia Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/aurelia/</link>
    <description>Recent content in aurelia Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/aurelia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con aurelia</title>
      <link>https://www.wikiod.com/es/aurelia/empezando-con-aurelia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/empezando-con-aurelia/</guid>
      <description>Hello World: Primeros pasos con aurelia-cli # Este ejemplo le mostrará cómo poner rápidamente en funcionamiento una aplicación hello world Aurelia utilizando la CLI de Aurelia.
requisitos previos # La CLI de Aurelia es una aplicación basada en Node.js, así que asegúrese de instalarla primero antes de continuar. Necesitará Node.js 4.4.7 o posterior.
También necesitará un cliente Git instalado. Algunas excelentes opciones incluyen: Github Desktop, Sourcetree y Git SCM.
Instalación de la CLI # Siempre que haya instalado Node.</description>
    </item>
    
    <item>
      <title>Convertidores de valor</title>
      <link>https://www.wikiod.com/es/aurelia/convertidores-de-valor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/convertidores-de-valor/</guid>
      <description>Esta sección proporciona una descripción general de Value Converters en Aurelia. Debe detallar no solo cómo crear un convertidor de valor, sino también por qué es posible que desee usarlo y muchos ejemplos de tareas básicas realizadas mediante el uso de un convertidor de valor.
Los convertidores de valor se pueden encadenar y utilizar junto con otras funciones de vinculación en Aurelia, como los comportamientos de vinculación.
Creación de un convertidor de valor básico # Si bien los convertidores de valor pueden estar compuestos por un método toView o fromView, en el siguiente ejemplo crearemos un convertidor de valor básico que solo usa el método toView que acepta el valor que se envía a la vista como el primero argumento.</description>
    </item>
    
    <item>
      <title>Aurelia CLI</title>
      <link>https://www.wikiod.com/es/aurelia/aurelia-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/aurelia-cli/</guid>
      <description>Adición de Bootstrap a una aplicación CLI # Una biblioteca CSS/Javascript de uso común es Bootstrap. Para instalarlo en su aplicación impulsada por Aurelia CLI, primero debe instalarlo usando Npm.
npm install bootstrap --save Debido a que Bootstrap tiene una gran dependencia de jQuery, debemos asegurarnos de que también tengamos jQuery instalado:
npm install jquery --save Ahora, en su IDE/editor de código preferido, abra el siguiente archivo en el directorio de su proyecto: aurelia_project/aurelia.</description>
    </item>
    
    <item>
      <title>Elementos personalizados</title>
      <link>https://www.wikiod.com/es/aurelia/elementos-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/elementos-personalizados/</guid>
      <description>Un elemento personalizado en Aurelia se utiliza para ampliar el conjunto básico de elementos HTML mediante componentes reutilizables y enriquecidos con funciones. Un elemento personalizado normalmente existe a partir de dos archivos, un modelo de vista basado en Javasciprt y una vista correspondiente escrita en HTML. Ambos archivos componen el elemento HTML que luego se puede usar en toda la aplicación como cualquier otro elemento HTML.
Creación de un elemento personalizado basado en convenciones de nomenclatura # Se crea un elemento personalizado básico en Aurelia basado en convenciones de nomenclatura, simplemente agregando el sufijo CustomElement al nombre de una clase.</description>
    </item>
    
    <item>
      <title>Explicación de la CLI de Aurelia</title>
      <link>https://www.wikiod.com/es/aurelia/explicacion-de-la-cli-de-aurelia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/explicacion-de-la-cli-de-aurelia/</guid>
      <description>Configuración del entorno para Aurelia-cli explicado # OS: Mac OS X 10.11 (Debería funcionar en Windows/Linux ya que estamos usando Vagrant) Vagrant 1.8.4 Installed Estructura de directorios en Host OS (Mac OS): /ruta/al/proyecto /provision /packages Note: If you use different vesions, be sure to update Variables at top of provision.sh script below. atom.x86_64.rpm (Download: Atom) node-v6.4.0-linux-x64.tar.xz (Download: Node) /vagrant Vagrantfile (File contents below) provision.sh (File contents below) Arrancando la Máquina Virtual ($ == Indicación de Terminal) In Mac OS Terminal $cd /path/to/project/vagrant $vagrant up Downloads CentOS 7 vagrant box, runs provision script Launches VM window outside of your Mac OS terminal When all done, log into VM using gui User: vagrant PW: vagrant Launch X Windows: $startx (Starts a Gnome UI) Configuración de la máquina virtual Launch a Terminal window (Applications Drop Down Menu / Utilities) Set up sudo to run &amp;ldquo;npm&amp;rdquo; Get path to npm: $which npm (/opt/node-v6.</description>
    </item>
    
    <item>
      <title>Unión</title>
      <link>https://www.wikiod.com/es/aurelia/union/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/union/</guid>
      <description>Enlace a casillas de verificación # Casillas de verificación básicas
export class MyViewModel { favoriteColors = []; colors = [&#39;Red&#39;, &#39;Yellow&#39;, &#39;Pink&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Blue&#39;]; } &amp;lt;template&amp;gt; &amp;lt;label repeat.for=&amp;quot;color of colors&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;checkbox&amp;quot; value.bind=&amp;quot;color&amp;quot; checked.bind=&amp;quot;favoriteColors&amp;quot; /&amp;gt; ${color} &amp;lt;/label&amp;gt; &amp;lt;p&amp;gt;Favourite colors:&amp;lt;/p&amp;gt; &amp;lt;ul if.bind=&amp;quot;favoriteColors&amp;quot;&amp;gt; &amp;lt;li repeat.for=&amp;quot;color of favoriteColors&amp;quot;&amp;gt;${color}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt; Casillas de verificación con matrices de objetos
export class MyViewModel { people = []; selectedPeople = []; constructor() { this.people = [ {name: &#39;John Michaels&#39;}, {name: &#39;Gary Stevens&#39;}, {name: &#39;Carrie Smitch&#39;}, {name: &#39;Jesus Wohau&#39;} ]; } } &amp;lt;template&amp;gt; &amp;lt;label repeat.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/aurelia/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/inyeccion-de-dependencia/</guid>
      <description>Si inyecta más de una clase, el orden en que las coloca en la instrucción @inject() no importa. Sin embargo, el orden en que aparecen en la instrucción @inject() debe coincidir con el orden de los parámetros en el constructor.
Obtener y mostrar el nombre de usuario por ID # import {User} from &#39;backend/user&#39;; // import custom class import {inject} from &#39;aurelia-framework&#39;; // allows us to inject @inject(User) // inject custom class export class ProfileView { constructor(user) { // use instance of custom class as a parameter to the constructor this.</description>
    </item>
    
    <item>
      <title>Plantillas</title>
      <link>https://www.wikiod.com/es/aurelia/plantillas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/plantillas/</guid>
      <description>Creación de una plantilla básica # En Aurelia, todas las plantillas HTML se definen dentro de las etiquetas de apertura y cierre &amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;. Toda su lógica específica de HTML y Aurelia va dentro de estas etiquetas de plantilla y no puede existir fuera de ellas.
&amp;lt;template&amp;gt; &amp;lt;/template&amp;gt; Trabajar con bucles usando &amp;ldquo;repeat.for&amp;rdquo; # Se puede hacer un bucle sobre un iterable definido dentro de su modelo de vista o pasado como enlazable (si es un atributo personalizado o un elemento personalizado).</description>
    </item>
    
    <item>
      <title>Trabajando con &lt;componer&gt;</title>
      <link>https://www.wikiod.com/es/aurelia/trabajando-con-componer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/aurelia/trabajando-con-componer/</guid>
      <description>Componer solo con vista # Presumiblemente, la forma más sencilla de usar compose es solo con una Vista. Esto le permite incluir plantillas HTML sin necesidad de declarar un modelo de vista con propiedades enlazables para cada una de ellas, lo que facilita la reutilización de fragmentos HTML más pequeños.
El BindingContext (ViewModel) de la Vista se establecerá en el del ViewModel principal.
Uso:
src/aplicación.html
&amp;lt;template&amp;gt; &amp;lt;compose view=&amp;quot;./greeter.html&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt; &amp;lt;/template&amp;gt; src/saludo.html</description>
    </item>
    
  </channel>
</rss>

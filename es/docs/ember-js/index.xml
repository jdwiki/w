<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ember.js Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/ember-js/</link>
    <description>Recent content in Ember.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/ember-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con ember.js</title>
      <link>https://www.wikiod.com/es/ember-js/primeros-pasos-con-emberjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/primeros-pasos-con-emberjs/</guid>
      <description>Instalación o Configuración # Comenzar con Ember es fácil. Los proyectos de Ember se crean y gestionan a través de nuestra herramienta de compilación de línea de comandos Ember CLI. Esta herramienta proporciona:
Gestión moderna de activos de aplicaciones (incluyendo concatenación, minificación y control de versiones). Generadores para ayudar a crear componentes, rutas y más. Un diseño de proyecto convencional, que hace que las aplicaciones Ember existentes sean fáciles de abordar.</description>
    </item>
    
    <item>
      <title>Tareas asíncronas en componentes</title>
      <link>https://www.wikiod.com/es/ember-js/tareas-asincronas-en-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/tareas-asincronas-en-componentes/</guid>
      <description>en ember-concurrency, la configuración adicional de error es una solución para evitar que las excepciones lanzadas se conviertan en onerror de Ember (ya que está destinado a ser manejado en la plantilla). Hay una [solicitud de función] (https://github.com/machty/ember-concurrency/issues/40) para manejar esto mejor.
tarea de simultaneidad de brasas # Un estándar alternativo de facto de la comunidad es un complemento llamado ember-concurrency que hace que desaparezca gran parte de la confusión de promesas.</description>
    </item>
    
    <item>
      <title>Componente comunicación entre el componente secundario y principal.</title>
      <link>https://www.wikiod.com/es/ember-js/componente-comunicacion-entre-el-componente-secundario-y-principal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/componente-comunicacion-entre-el-componente-secundario-y-principal/</guid>
      <description>Sintaxis # (rendimiento &amp;ndash; Le permite exportar elementos de un componente (hash &amp;ndash; Le permite exportar un hash u objeto, ya que esto es necesario para llamar a los componentes secundarios dentro del bloque principal. El requisito es que haya un . para que se cree el componente (componente &amp;ndash; Crea el componente hijo que puede tomar cualquier cosa en el contexto del padre. El componente se puede actualizar, ya que solo se llama cuando el usuario lo usa, así que agregue tantos atributos como necesite, y el usuario puede agrega el resto (action &amp;ndash; Crea una acción basada en una función o una cadena que apunta a una función en el hash actions del componente padre en este caso.</description>
    </item>
    
    <item>
      <title>Cómo actualizar Ember, Ember Data y Ember CLI</title>
      <link>https://www.wikiod.com/es/ember-js/como-actualizar-ember-ember-data-y-ember-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/como-actualizar-ember-ember-data-y-ember-cli/</guid>
      <description>Para encontrar la última versión estable de Ember, haga clic aquí. Para encontrar la última versión estable de Ember Data, haga clic aquí. Para encontrar la última versión estable de Ember CLI, haga clic aquí. Todos estos pasos se encontraron en nota de lanzamiento de Ember cli.
Actualización de la CLI de Ember # Ember CLI es un paquete npm normal. Para actualizarlo tenemos que desinstalarlo y luego instalar la versión que queramos.</description>
    </item>
    
    <item>
      <title>depuración</title>
      <link>https://www.wikiod.com/es/ember-js/depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/depuracion/</guid>
      <description>Ejecutar código de solo depuración # Ember tiene un método global estático llamado runInDebug que puede ejecutar una función destinada a la depuración.
Ember.runInDebug(() =&amp;gt; { // this code only runs in dev mode }); En una compilación de producción, este método se define como una función vacía (NOP). Los usos de este método en Ember se eliminan de la compilación ember.prod.js.
Registro EmberData # Los modelos de datos Ember tienen un método toJSON que extrae los datos relevantes:</description>
    </item>
    
    <item>
      <title>Ayudante de plantilla de formato de moneda</title>
      <link>https://www.wikiod.com/es/ember-js/ayudante-de-plantilla-de-formato-de-moneda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/ayudante-de-plantilla-de-formato-de-moneda/</guid>
      <description>Más detalles disponibles en Guías de Ember, de donde se tomó este ejemplo.
Compatible con Ember 2.2.0+ (2.11.0 era la última en el momento de escribir este artículo)
Creando un nuevo ayudante # Use Ember CLI para generar un nuevo ayudante en su aplicación:
ember generar formato de moneda auxiliar
Luego edite helpers/format-currency.js para que contenga lo siguiente:
import Ember from &#39;ember&#39;; export function formatCurrency([value, ...rest]) { const dollars = Math.</description>
    </item>
    
    <item>
      <title>Cómo importar la bibliotecacomplemento de JavaScript</title>
      <link>https://www.wikiod.com/es/ember-js/como-importar-la-bibliotecacomplemento-de-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/como-importar-la-bibliotecacomplemento-de-javascript/</guid>
      <description>Abra el directorio de su proyecto ember.js. Allí encontrará un archivo llamado ember-cli-build.js. Puede instalar Sus bibliotecas o complementos usando Bower, luego dirija la importación a la carpeta Bower_components, pero si tiene un archivo que desea agregar, simplemente arrástrelo a la carpeta de Su proyecto y escriba app.import en ese archivo.
Sintaxis # app.import(&amp;lsquo;ruta al archivo a partir de la carpeta del proyecto/archivo.js&amp;rsquo;); Ejemplo de archivo ember-cli-build.js # var EmberApp = require(&#39;ember-cli/lib/broccoli/ember-app&#39;); module.</description>
    </item>
    
    <item>
      <title>Inicialice Foundation o Bootstrap en ember-cli de manera adecuada</title>
      <link>https://www.wikiod.com/es/ember-js/inicialice-foundation-o-bootstrap-en-ember-cli-de-manera-adecuada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/inicialice-foundation-o-bootstrap-en-ember-cli-de-manera-adecuada/</guid>
      <description>Bootstrap: creo que esa no es la forma adecuada. En mi opinión, la mejor manera es un complemento ember-bootstrap.
ember-bootstrap usa las clases CSS de Bootstrap mientras reemplaza los comportamientos de los componentes que Bootstrap implementa en bootstrap.js, como alternar, barra de navegación, modal, etc., con componentes Ember nativos equivalentes compatibles con la clase CSS.
Base: Hay un complemento llamado Ember CLI Foundation 6 SASS, también se instala mediante la línea de comandos.</description>
    </item>
    
    <item>
      <title>Ayudante de formato de fecha</title>
      <link>https://www.wikiod.com/es/ember-js/ayudante-de-formato-de-fecha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/ayudante-de-formato-de-fecha/</guid>
      <description>Ayudante para un formato limpio de fecha y hora. # Cuando desee la fecha y la hora actuales, puede hacerlo con la función de Javascript Date, pero devolverá el siguiente formato que no siempre es útil: Wed Jun 07 2017 13:26:15 GMT+0200 (Romance ( zomertijd)).
Copie el siguiente código en app/helpers/helpers.js y simplemente llame a getCurrentDateAndFormat() en lugar de new Date().
export function getCurrentDateAndFormat() { let today = new Date(); let dd = today.</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/ember-js/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ember-js/pruebas/</guid>
      <description>Crear y mantener un conjunto de pruebas completo debe ser una prioridad para cada desarrollador. Probar en Ember.js implica lidiar con asincronía, Ember Run Loop y burlarse de su API. Es común que los desarrolladores de Ember.js tengan problemas al escribir pruebas. Sin embargo, hay algunos consejos que podrían ahorrarle tiempo y energía.
Esperando promesas en las pruebas de forma elegante # Puede hacer que function pase al método test() async - luego puede usar la palabra clave await.</description>
    </item>
    
  </channel>
</rss>

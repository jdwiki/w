<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de mecanografiado on </title>
    <link>https://www.wikiod.com/es/docs/typescript/</link>
    <description>Recent content in Tutorial de mecanografiado on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con TypeScript</title>
      <link>https://www.wikiod.com/es/typescript/primeros-pasos-con-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/primeros-pasos-con-typescript/</guid>
      <description>Instalación y configuración # Fondo # TypeScript es un superconjunto escrito de JavaScript que se compila directamente en código JavaScript. Los archivos de TypeScript suelen utilizar la extensión .ts. Muchos IDE admiten TypeScript sin necesidad de ninguna otra configuración, pero TypeScript también se puede compilar con el paquete TypeScript Node.JS desde la línea de comandos.
IDE # Estudio visual # Visual Studio 2015 incluye TypeScript. Visual Studio 2013 Update 2 o posterior incluye TypeScript, o puede [descargar TypeScript para versiones anteriores] (https://www.</description>
    </item>
    
    <item>
      <title>Examen de la unidad</title>
      <link>https://www.wikiod.com/es/typescript/examen-de-la-unidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/examen-de-la-unidad/</guid>
      <description>cinta # tape es un marco de prueba de JavaScript minimalista, genera un marcado compatible con TAP.
Para instalar tape usando el comando de ejecución npm
npm install --save-dev tape @types/tape Para usar tape con Typescript, necesita instalar ts-node como paquete global, para hacer este comando de ejecución
npm install -g ts-node Ahora estás listo para escribir tu primera prueba.
//math.test.ts import * as test from &amp;quot;tape&amp;quot;; test(&amp;quot;Math test&amp;quot;, (t) =&amp;gt; { t.</description>
    </item>
    
    <item>
      <title>Importación de bibliotecas externas</title>
      <link>https://www.wikiod.com/es/typescript/importacion-de-bibliotecas-externas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/importacion-de-bibliotecas-externas/</guid>
      <description>Sintaxis # importar {componente} de &#39;libName&#39;; // Importará la clase &amp;quot;componente&amp;quot; `importar {componente como c} desde &amp;rsquo;libName&amp;rsquo;; // Importará la clase &amp;ldquo;componente&amp;rdquo; a un objeto &amp;ldquo;c&amp;rdquo; importar componente de &#39;libname&#39;; // Importará la exportación predeterminada de libName importar * como lib desde &#39;libName&#39;; // Importará todo, desde libName a un objeto &amp;quot;lib&amp;quot; importar lib = require(&#39;libName&#39;); // Importará todo, desde libName a un objeto &amp;quot;lib&amp;quot; const lib: any = require(&#39;libName&#39;); // Importará todo, desde libName a un objeto &amp;quot;lib&amp;quot; importar &#39;libName&#39;; // Importará el módulo libName solo por sus efectos secundarios Podría parecer que la sintaxis</description>
    </item>
    
    <item>
      <title>tsconfig.json</title>
      <link>https://www.wikiod.com/es/typescript/tsconfigjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/tsconfigjson/</guid>
      <description>Sintaxis # Utiliza formato de archivo JSON También puede aceptar comentarios de estilo JavaScript Visión general # La presencia de un archivo tsconfig.json en un directorio indica que el directorio es la raíz de un proyecto de TypeScript. El archivo tsconfig.json especifica los archivos raíz y las opciones del compilador necesarias para compilar el proyecto.
Uso de tsconfig.json # Al invocar tsc sin archivos de entrada, en cuyo caso el compilador busca el archivo tsconfig.</description>
    </item>
    
    <item>
      <title>Mecanografiado con SystemJS</title>
      <link>https://www.wikiod.com/es/typescript/mecanografiado-con-systemjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/mecanografiado-con-systemjs/</guid>
      <description>Hello World en el navegador con SystemJS # Instala systemjs y plugin-typescript
npm install systemjs npm install plugin-typescript NOTA: esto instalará el compilador TypeScript 2.0.0 que aún no se ha publicado.
Para TypeScript 1.8, debe usar el complemento-mecanografiado 4.0.16
Crear archivo hello.ts
export function greeter(person: String) { return &#39;Hello, &#39; + person; } Crear archivo hola.html
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello World in TypeScript&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;node_modules/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;config.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.addEventListener(&#39;load&#39;, function() { System.</description>
    </item>
    
    <item>
      <title>depuración</title>
      <link>https://www.wikiod.com/es/typescript/depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/depuracion/</guid>
      <description>Hay dos formas de ejecutar y depurar TypeScript:
Transpilar a JavaScript, ejecutar en el nodo y usar asignaciones para vincular de nuevo a los archivos fuente de TypeScript
o
Ejecute TypeScript directamente usando ts-node
Este artículo describe las dos formas de usar Visual Studio Code y WebStorm. Todos los ejemplos suponen que su archivo principal es index.ts.
TypeScript con ts-node en WebStorm # Agrega este script a tu package.json:
&amp;quot;start:idea&amp;quot;: &amp;quot;ts-node %NODE_DEBUG_OPTION% --ignore false index.</description>
    </item>
    
    <item>
      <title>Controles nulos estrictos</title>
      <link>https://www.wikiod.com/es/typescript/controles-nulos-estrictos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/controles-nulos-estrictos/</guid>
      <description>Comprobaciones nulas estrictas en acción # De forma predeterminada, todos los tipos en TypeScript permiten null:
function getId(x: Element) { return x.id; } getId(null); // TypeScript does not complain, but this is a runtime error. TypeScript 2.0 agrega soporte para controles nulos estrictos. Si configura --strictNullChecks cuando ejecuta tsc (o establece este indicador en su tsconfig.json), entonces los tipos ya no permiten null:
function getId(x: Element) { return x.id; } getId(null); // error: Argument of type &#39;null&#39; is not assignable to parameter of type &#39;Element&#39;.</description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://www.wikiod.com/es/typescript/clases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/clases/</guid>
      <description>TypeScript, como ECMA Script 6, admite la programación orientada a objetos mediante clases. Esto contrasta con las versiones anteriores de JavaScript, que solo admitían la cadena de herencia basada en prototipos.
El soporte de clases en TypeScript es similar al de lenguajes como Java y C#, en el sentido de que las clases pueden heredar de otras clases, mientras que los objetos se instancian como instancias de clase.
También similar a esos lenguajes, las clases de TypeScript pueden implementar interfaces o hacer uso de genéricos.</description>
    </item>
    
    <item>
      <title>Cómo usar una biblioteca javascript sin un archivo de definición de tipo</title>
      <link>https://www.wikiod.com/es/typescript/como-usar-una-biblioteca-javascript-sin-un-archivo-de-definicion-de-tipo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/como-usar-una-biblioteca-javascript-sin-un-archivo-de-definicion-de-tipo/</guid>
      <description>Si bien algunas bibliotecas de JavaScript existentes tienen archivos de definición de tipo, hay muchas que no los tienen.
TypeScript ofrece un par de patrones para manejar las declaraciones faltantes.
Hacer un módulo que exporte por defecto cualquier # Para proyectos más complicados, o en los casos en los que pretende escribir gradualmente una dependencia, puede ser más limpio crear un módulo.
Usando JQuery (aunque tiene tipos disponibles) como ejemplo:</description>
    </item>
    
    <item>
      <title>Mecanografiado con AngularJS</title>
      <link>https://www.wikiod.com/es/typescript/mecanografiado-con-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/typescript/mecanografiado-con-angularjs/</guid>
      <description>Parámetros # Nombre Descripción controladorAs es un nombre de alias al que se pueden asignar variables o funciones. @ver: https://docs.angularjs.org/guide/directive $inyectar Lista de Inyección de Dependencias, se resuelve por angular y pasando como argumento a funciones constructoras. Al hacer la directiva en TypeScript, tenga en cuenta el poder de este lenguaje de tipo personalizado e interfaces que puede crear. Esto es extremadamente útil cuando se desarrollan aplicaciones de gran tamaño. La finalización de código compatible con muchos IDE le mostrará el valor posible por el tipo correspondiente con el que está trabajando, por lo que hay mucho menos que debe tenerse en cuenta (en comparación con VanillaJS).</description>
    </item>
    
  </channel>
</rss>

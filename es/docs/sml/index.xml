<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de sml on </title>
    <link>https://www.wikiod.com/es/docs/sml/</link>
    <description>Recent content in tutorial de sml on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con sml</title>
      <link>https://www.wikiod.com/es/sml/primeros-pasos-con-sml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sml/primeros-pasos-con-sml/</guid>
      <description>Instalación # Hay una docena de implementaciones de Standard ML. MLton produce código muy optimizado, pero no tiene REPL. SML/NJ es el más utilizado, pero tiene mensajes de error ligeramente difíciles con fines de aprendizaje. Moscow ML y Poly/ML son fáciles de usar, pero no son compatibles con el formato de paquete .mlb. Sin embargo, eso no es esencial para comenzar.
Aquí hay instrucciones para instalar cada uno de SML/NJ, Moscow ML y Poly/ML divididos por sistema operativo.</description>
    </item>
    
    <item>
      <title>Comentarios</title>
      <link>https://www.wikiod.com/es/sml/comentarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sml/comentarios/</guid>
      <description>Sintaxis # (* abre un comentario de bloque *) cierra un comentario de bloque (* y *) deben estar equilibrados en número Todos los comentarios son comentarios de bloque # (************************************************* * All comments in SML are block comments * Block Comments begin with &#39;(*&#39; * Block Comments end with &#39;*)&#39; * (* Block Comments can be nested *) * The additional framing asterisks at the beginning * and end of this block comment are common to languages * of SML&#39;s vintage.</description>
    </item>
    
    <item>
      <title>Tipos numéricos</title>
      <link>https://www.wikiod.com/es/sml/tipos-numericos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sml/tipos-numericos/</guid>
      <description>Sintaxis # Los números reales deben comenzar con uno o más dígitos seguidos de un punto seguido de uno o más dígitos. ~ es el operador para denotar números negativos div es el operador para la división de enteros. / es el operador de división real. Entero # Fundamentos de números enteros
Standard ML of New Jersey v110.78 [built: Thu Jul 23 11:21:58 2015] - 6; val it = 6 : int - ~6; val it = ~6 : int - 6 + ~6; val it = 0 : int División entera</description>
    </item>
    
    <item>
      <title>Programación Interactiva usando el REPL</title>
      <link>https://www.wikiod.com/es/sml/programacion-interactiva-usando-el-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sml/programacion-interactiva-usando-el-repl/</guid>
      <description>Sintaxis # A diferencia de los archivos de código fuente, el punto y coma &amp;lsquo;;&amp;rsquo; es obligatorio terminar cada expresión en el REPL. Iniciando el SMLNJ REPL # REPL significa &amp;lsquo;Read Evaluate Print Loop&amp;rsquo;. El REPL se puede usar para escribir y ejecutar código una línea a la vez y es una alternativa a escribir código en un archivo y luego compilar o interpretar todo el archivo antes de la ejecución.</description>
    </item>
    
    <item>
      <title>Sistema de módulos</title>
      <link>https://www.wikiod.com/es/sml/sistema-de-modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sml/sistema-de-modulos/</guid>
      <description>Evaluación perezosa # El aprendizaje automático estándar no tiene soporte integrado para la evaluación diferida. Algunas implementaciones, especialmente SML/NJ, tienen primitivas de evaluación perezosas no estándar, pero los programas que usan esas primitivas no serán portátiles. Las suspensiones perezosas también se pueden implementar de manera portátil, utilizando el sistema de módulos de Standard ML.
Primero definimos una interfaz, o firma, para manipular suspensiones perezosas:
signature LAZY = sig type &#39;a lazy val pure : &#39;a -&amp;gt; &#39;a lazy val delay : (&#39;a -&amp;gt; &#39;b) -&amp;gt; &#39;a -&amp;gt; &#39;b lazy val force : &#39;a lazy -&amp;gt; &#39;a exception Diverge val fix : (&#39;a lazy -&amp;gt; &#39;a) -&amp;gt; &#39;a end Esta firma indica que:</description>
    </item>
    
  </channel>
</rss>

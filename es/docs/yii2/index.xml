<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de yii2 on </title>
    <link>https://www.wikiod.com/es/docs/yii2/</link>
    <description>Recent content in Tutorial de yii2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/yii2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con yii2</title>
      <link>https://www.wikiod.com/es/yii2/comenzando-con-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/comenzando-con-yii2/</guid>
      <description>Instalación o Configuración # Yii2 se puede instalar de dos maneras. Están
Instalación a través de Composer Instalación desde un archivo de almacenamiento Instalación a través de Composer # Instalación del compositor # Si aún no tiene instalado Composer, puede hacerlo siguiendo las instrucciones en getcomposer.org. En Linux y Mac OS X, ejecutará los siguientes comandos:
curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer Para Windows simplemente descargue e instale composer-setup.</description>
    </item>
    
    <item>
      <title>Registro activo</title>
      <link>https://www.wikiod.com/es/yii2/registro-activo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/registro-activo/</guid>
      <description>AR es perfecto cuando necesita eliminar, actualizar o crear uno o más registros secuencialmente. Su soporte de atributos sucios (salvando solo lo que realmente se cambió) da como resultado declaraciones de ACTUALIZACIÓN optimizadas que elevan significativamente la carga de la base de datos y reducen las posibilidades de varios conflictos relacionados con la edición del mismo registro por varias personas al mismo tiempo.
Si no tiene una lógica realmente compleja en su aplicación y, por lo tanto, no requiere entidades de abstracción, AR es la mejor opción para eliminar, actualizar y crear.</description>
    </item>
    
    <item>
      <title>Validación</title>
      <link>https://www.wikiod.com/es/yii2/validacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/validacion/</guid>
      <description>Deshabilitar mensaje de error de validación en foco/tecla arriba # Por defecto, el mensaje de error aparece debajo del cuadro de texto en &amp;lt;div class=&amp;quot;help-block&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; en keyUp o después de presionar el botón Enviar si no se cumplen las restricciones de validación.
A veces queremos un mensaje solo al enviar, es decir, sin validación en el evento onKeyup.
Revisemos el archivo yii2/widgets/ActiveForm.php:
&amp;lt;?php namespace yii\widgets; use Yii; use yii\base\InvalidCallException; use yii\base\Widget; use yii\base\Model; use yii\helpers\ArrayHelper; use yii\helpers\Url; use yii\helpers\Html; use yii\helpers\Json; class ActiveForm extends Widget { public $action = &#39;&#39;; public $method = &#39;post&#39;; public $options = []; .</description>
    </item>
    
    <item>
      <title>Galletas</title>
      <link>https://www.wikiod.com/es/yii2/galletas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/galletas/</guid>
      <description>Las cookies son parte de la solicitud HTTP, por lo que es una buena idea hacer ambas cosas en el controlador, cuya responsabilidad se ocupa exactamente de la solicitud y la respuesta.
Autenticación entre subdominios y cookies de identidad # En el caso de la cookie de inicio de sesión automático o &amp;ldquo;recordarme&amp;rdquo;, se aplican las mismas peculiaridades que en el caso de las cookies de subdominio. Pero esta vez necesita configurar el componente de usuario, configurando la matriz identityCookie a la configuración de cookies deseada.</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/yii2/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/pruebas/</guid>
      <description>Cómo simular ActiveRecord # Si desea simular AR que no intenta conectarse a la base de datos, puede hacerlo de la siguiente manera (si usa PHPUnit):
$post = $this-&amp;gt;getMockBuilder(&#39;\app\model\Post&#39;) -&amp;gt;setMethods([&#39;save&#39;, &#39;attributes&#39;]) -&amp;gt;getMock(); $post-&amp;gt;method(&#39;save&#39;)-&amp;gt;willReturn(true); $post-&amp;gt;method(&#39;attributes&#39;)-&amp;gt;willReturn([ &#39;id&#39;, &#39;status&#39;, &#39;title&#39;, &#39;description&#39;, &#39;text&#39; ]); El problema es que necesitamos anular el método de atributos () ya que ActiveRecord de forma predeterminada obtiene la lista de atributos de esquema de base de datos que estamos tratando de evitar.</description>
    </item>
    
    <item>
      <title>Cargas de archivos</title>
      <link>https://www.wikiod.com/es/yii2/cargas-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/cargas-de-archivos/</guid>
      <description>Cómo hacerlo # Subir archivos # La carga de archivos en Yii generalmente se realiza con la ayuda de [[yii\web\UploadedFile]] que encapsula cada archivo cargado. archivo como un objeto UploadedFile. Combinado con [[yii\widgets\ActiveForm]] y models, puede implementar fácilmente un mecanismo seguro de carga de archivos.
Creación de modelos # Al igual que trabajar con entradas de texto sin formato, para cargar un solo archivo, crearía una clase modelo y usaría un atributo del modelo para mantener la instancia del archivo cargado.</description>
    </item>
    
    <item>
      <title>Forma activa de Yii2</title>
      <link>https://www.wikiod.com/es/yii2/forma-activa-de-yii2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/forma-activa-de-yii2/</guid>
      <description>Campos de formulario en Yii2 # Mostrando un ejemplo básico de la página Ver en Yii2 para nuevos estudiantes
Estas son clases básicas que debe agregar para crear un formulario usando yii2 ActiveForm
&amp;lt;?php Use yii\helpers\Html; Use yii\widgets\ActiveForm; La línea de abajo comenzará la etiqueta de formulario para nuestro formulario a continuación, mostrando un ejemplo que muestra cómo especificar la identificación para el formulario y cómo aplicar cualquier clase para el formulario.</description>
    </item>
    
    <item>
      <title>Pjax</title>
      <link>https://www.wikiod.com/es/yii2/pjax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/pjax/</guid>
      <description>Paso 1 Agregar estructura # En vistas\sitio\form-submission.php
&amp;lt;?php Pjax::begin([&#39;id&#39;=&amp;gt;&#39;id-pjax&#39;]); ?&amp;gt; &amp;lt;?= Html::beginForm([&#39;site/form-submission&#39;], &#39;post&#39;, [&#39;data-pjax&#39; =&amp;gt; &#39;&#39;, &#39;class&#39; =&amp;gt; &#39;form-inline&#39;]); ?&amp;gt; &amp;lt;?= Html::input(&#39;text&#39;, &#39;string&#39;, Yii::$app-&amp;gt;request-&amp;gt;post(&#39;string&#39;), [&#39;class&#39; =&amp;gt; &#39;form-control&#39;]) ?&amp;gt; &amp;lt;?= Html::submitButton(&#39;Hash String&#39;, [&#39;class&#39; =&amp;gt; &#39;btn btn-lg btn-primary&#39;, &#39;name&#39; =&amp;gt; &#39;hash-button&#39;]) ?&amp;gt; &amp;lt;?= Html::endForm() ?&amp;gt; &amp;lt;h3&amp;gt;&amp;lt;?= $stringHash ?&amp;gt;&amp;lt;/h3&amp;gt; &amp;lt;?php Pjax::end(); ?&amp;gt; cómo usar pjax # Agregue esta línea al principio de su vista.
&amp;lt;?php use yii\widgets\Pjax; ?&amp;gt; Agregue las siguientes dos líneas alrededor del contenido que necesita una actualización parcial.</description>
    </item>
    
    <item>
      <title>Solicitud de Ajax</title>
      <link>https://www.wikiod.com/es/yii2/solicitud-de-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/solicitud-de-ajax/</guid>
      <description>Envío del formulario Ajax # Ver archivo: # &amp;lt;?php use yii; use yii\bootstrap\ActiveForm; use yii\helpers\Html; ?&amp;gt; &amp;lt;?php $form = ActiveForm::begin([ &#39;action&#39; =&amp;gt; [&#39;comments/ajax-comment&#39;], &#39;options&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;comment-form&#39; ] ]); ?&amp;gt; &amp;lt;?= $form-&amp;gt;field($model, &#39;comment&#39;); ?&amp;gt; &amp;lt;?= Html::submitButton(&amp;quot;Submit&amp;quot;, [&#39;class&#39; =&amp;gt; &amp;quot;btn&amp;quot;]); ?&amp;gt; &amp;lt;?php ActiveForm::end(); ?&amp;gt; JavaScript: # jQuery(document).ready(function($) { $(&amp;quot;.comment-form&amp;quot;).submit(function(event) { event.preventDefault(); // stopping submitting var data = $(this).serializeArray(); var url = $(this).attr(&#39;action&#39;); $.ajax({ url: url, type: &#39;post&#39;, dataType: &#39;json&#39;, data: data }) .</description>
    </item>
    
    <item>
      <title>Trabajar con bases de datos</title>
      <link>https://www.wikiod.com/es/yii2/trabajar-con-bases-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/yii2/trabajar-con-bases-de-datos/</guid>
      <description>Usando el generador de consultas Yii2 # Yii2 proporciona formas eficientes de recuperar datos de la base de datos. Considere un ejemplo de una tabla de empleados simple que tiene campos emp_id, emp_name y emp_salary. Para recuperar los nombres de los empleados y sus salarios, usamos la consulta.
select emp_name,emp_salary from employee Para generar la consulta anterior en Yii2, hay muchos métodos. Uno de los métodos es usar un objeto yii\db\Query.</description>
    </item>
    
  </channel>
</rss>

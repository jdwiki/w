<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extjs Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/extjs/</link>
    <description>Recent content in Extjs Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/extjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con extjs</title>
      <link>https://www.wikiod.com/es/extjs/primeros-pasos-con-extjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/extjs/primeros-pasos-con-extjs/</guid>
      <description>Creación de una aplicación Hello World: a través de Sencha Cmd # Instalación y configuración # El uso típico de ExtJS aprovecha el marco para crear aplicaciones enriquecidas (RIA) de una sola página. La forma más sencilla de comenzar es utilizar Sencha Cmd, una herramienta de compilación de CLI que cubre la mayoría de las preocupaciones generales en un ciclo de vida de implementación, principalmente:
gestión de paquetes y dependencias compilación de código / agrupación y minificación gestionar estrategias de construcción para diferentes objetivos y plataformas » Descargar Sencha Cmd</description>
    </item>
    
    <item>
      <title>MVC  MVVM - Arquitectura de aplicaciones</title>
      <link>https://www.wikiod.com/es/extjs/mvc--mvvm---arquitectura-de-aplicaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/extjs/mvc--mvvm---arquitectura-de-aplicaciones/</guid>
      <description>Introducción a los modelos # Un modelo representa algún objeto de datos en una aplicación. Por ejemplo, puede tener un modelo como: Fruit, Car, Building, etc. en su aplicación. Los modelos son normalmente utilizados por las tiendas. Aquí hay un ejemplo de cómo definiría una nueva clase de modelo. p.ej.
Ext.define(&#39;MyApp.model.Person&#39;, { extend: &#39;Ext.data.Model&#39;, fields: [ {name: &#39;name&#39;, type: &#39;string&#39;}, {name: &#39;surname&#39;, type: &#39;string&#39;}, {name: &#39;age&#39;, type: &#39;int&#39;} ], getFullName: function() { return this.</description>
    </item>
    
    <item>
      <title>Errores comunes y mejores prácticas</title>
      <link>https://www.wikiod.com/es/extjs/errores-comunes-y-mejores-practicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/extjs/errores-comunes-y-mejores-practicas/</guid>
      <description>Extender vs Anular # Anulaciones: # Anular archivo:
Ext.define(&#39;MyApp.override.CornField&#39;, override: &#39;Ext.form.field.Text&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Usar en la aplicación:
{ xtype: &#39;textfield&#39; } Extensiones: # Anular archivo:
Ext.define(&#39;MyApp.form.field.CornField&#39;, extend: &#39;Ext.form.field.Text&#39;, alias: &#39;widget.cornfield&#39;, initComponent: function () { this.callParent(arguments); this.setValue(&#39;Corn!&#39;); } ); Usar en la aplicación:
{ xtype: &#39;cornfield&#39; } Explicación # ExtJS proporciona dos formas principales de cambiar el comportamiento de las clases existentes: extenderlas y anularlas. Cada uno tiene ventajas y desventajas que deben tenerse en cuenta antes de usarlos.</description>
    </item>
    
    <item>
      <title>ExtJS AJAX</title>
      <link>https://www.wikiod.com/es/extjs/extjs-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/extjs/extjs-ajax/</guid>
      <description>Una instancia singleton de una clase Ext.data.Connection. Esta clase se utiliza para comunicarse con el lado del servidor.
Solicitud básica # Algunas de las propiedades de clase Ext.Data.Connection
Propiedades Detalles dirección URL Dirección de la solicitud tiempo de espera Tiempo de espera en milisegundos éxito Retorno del éxito fracaso Retorno en caso de fallo Ext.Ajax.on(&amp;quot;beforerequest&amp;quot;, function(conn , options , eOpts) { console.log(&amp;quot;beforerequest&amp;quot;); }); Ext.Ajax.on(&amp;quot;requestcomplete&amp;quot;, function(conn , response , options , eOpts) { console.</description>
    </item>
    
    <item>
      <title>Modelo de evento</title>
      <link>https://www.wikiod.com/es/extjs/modelo-de-evento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/extjs/modelo-de-evento/</guid>
      <description>ExtJS aboga por el uso de disparar y escuchar eventos entre clases. Al activar eventos y escuchar eventos activados, las clases no requieren un conocimiento &amp;lsquo;sucio&amp;rsquo; de la estructura de clase de los demás y evitan el acoplamiento del código. Además, los eventos facilitan escuchar varias instancias del mismo componente al permitir un detector genérico para todos los objetos con el mismo selector. Finalmente, otras clases también pueden hacer uso de eventos que ya existen.</description>
    </item>
    
  </channel>
</rss>

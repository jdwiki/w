<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial qml on </title>
    <link>https://www.wikiod.com/es/docs/qml/</link>
    <description>Recent content in Tutorial qml on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con qml</title>
      <link>https://www.wikiod.com/es/qml/primeros-pasos-con-qml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qml/primeros-pasos-con-qml/</guid>
      <description>Hola Mundo # Una sencilla aplicación que muestra el texto &amp;ldquo;Hello World&amp;rdquo; en el centro de la ventana.
import QtQuick 2.3 import QtQuick.Window 2.0 Window { visible: true width: 640 height: 480 title: qsTr(&amp;quot;Hello World&amp;quot;) //The method qsTr() is used for translations from one language to other. Text { text: qsTr(&amp;quot;Hello World&amp;quot;) anchors.centerIn: parent } } Instalación # QML viene con una versión más reciente del marco de aplicación multiplataforma Qt.</description>
    </item>
    
    <item>
      <title>Creando elementos personalizados en C&#43;&#43;</title>
      <link>https://www.wikiod.com/es/qml/creando-elementos-personalizados-en-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qml/creando-elementos-personalizados-en-c-/</guid>
      <description>Creando elementos personalizados en C++ # QML vino con un rico conjunto de elementos visuales. Usando solo QML podemos construir aplicaciones complejas con estos elementos. También es muy fácil crear su propio elemento basado en un conjunto de elementos estándar como Rectángulo, Botón, Imagen, etc. Además, podemos usar elementos como Canvas para construir elementos con pintura personalizada. Parecería que podemos construir una variedad de aplicaciones solo en QML, sin tocar las capacidades de C++.</description>
    </item>
    
    <item>
      <title>Enlace de propiedad</title>
      <link>https://www.wikiod.com/es/qml/enlace-de-propiedad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qml/enlace-de-propiedad/</guid>
      <description>A la propiedad de un objeto se le puede asignar un valor estático que permanece constante hasta que se le asigna explícitamente un nuevo valor. Sin embargo, para aprovechar al máximo QML y su soporte integrado para comportamientos de objetos dinámicos, la mayoría de los objetos QML utilizan enlaces de propiedad.
Los enlaces de propiedad son una característica central de QML que permite a los desarrolladores especificar relaciones entre diferentes propiedades de objetos.</description>
    </item>
    
    <item>
      <title>Integración con C&#43;&#43;</title>
      <link>https://www.wikiod.com/es/qml/integracion-con-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qml/integracion-con-c-/</guid>
      <description>Creando un modelo simple para TreeView # Desde Qt 5.5 tenemos un nuevo y maravilloso TreeView, un control que todos hemos estado esperando. Un TreeView implementa una representación de árbol de elementos de un modelo. En general, se parece a otras vistas QML: ListView o TableView. Pero la estructura de datos de TreeView es más compleja.
Un dato en ListView o TableView está representado por una matriz unidimensional de nodos. En TreeView cada nodo puede contener su propia matriz de nodos.</description>
    </item>
    
    <item>
      <title>Animación</title>
      <link>https://www.wikiod.com/es/qml/animacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qml/animacion/</guid>
      <description>Animación de números simples # Una de las animaciones más básicas con las que te puedes encontrar es NumberAnimation. Esta animación funciona cambiando el valor numérico de una propiedad de un elemento de un estado inicial a un estado final. Considere el siguiente ejemplo completo:
import QtQuick 2.7 import QtQuick.Controls 2.0 ApplicationWindow { visible: true width: 400 height: 640 Rectangle{ id: rect anchors.centerIn: parent height: 100 width: 100 color: &amp;quot;blue&amp;quot; MouseArea{ anchors.</description>
    </item>
    
  </channel>
</rss>

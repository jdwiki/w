<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de pthreads on </title>
    <link>https://www.wikiod.com/es/docs/pthreads/</link>
    <description>Recent content in Tutorial de pthreads on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/pthreads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con pthreads</title>
      <link>https://www.wikiod.com/es/pthreads/comenzando-con-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pthreads/comenzando-con-pthreads/</guid>
      <description>Instalación o configuración # Instrucciones detalladas sobre cómo configurar o instalar pthreads.
&amp;ldquo;Hola mundo&amp;rdquo; mínimo con pthreads # #include &amp;lt;pthread.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; /* function to be run as a thread always must have the same signature: it has one void* parameter and returns void */ void *threadfunction(void *arg) { printf(&amp;quot;Hello, World!\n&amp;quot;); /*printf() is specified as thread-safe as of C11*/ return 0; } int main(void) { pthread_t thread; int createerror = pthread_create(&amp;amp;thread, NULL, threadfunction, NULL); /*creates a new thread with default attributes and NULL passed as the argument to the start routine*/ if (!</description>
    </item>
    
    <item>
      <title>Variables condicionales</title>
      <link>https://www.wikiod.com/es/pthreads/variables-condicionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pthreads/variables-condicionales/</guid>
      <description>Las variables condicionales son útiles en los casos en los que desea que un subproceso espere algo que suceda en otro subproceso. Por ejemplo, en un escenario de productor/consumidor con uno o más subprocesos de producción y un subproceso de consumo, las variables condicionales se pueden usar para señalar al subproceso de consumo que hay nuevos datos disponibles.
Proceso general
Una espera en una variable condicional (queueCond en el ejemplo de productor/consumidor) siempre está acoplada a una exclusión mutua (queueMutex en el ejemplo de productor/consumidor), y siempre debe estar acoplada a una variable de estado &amp;ldquo;normal&amp;rdquo; también (queue.</description>
    </item>
    
    <item>
      <title>Condición de carrera en pthreads</title>
      <link>https://www.wikiod.com/es/pthreads/condicion-de-carrera-en-pthreads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pthreads/condicion-de-carrera-en-pthreads/</guid>
      <description>Al escribir aplicaciones de subprocesos múltiples, uno de los problemas más comunes experimentados son las condiciones de carrera. Entonces documentamos el ¿Cómo los detectas? y ¿Cómo los maneja?
Ejemplo: Considere tendrá dos subprocesos T1 y T2. # ¿Cómo los detectas?
Si la misma variable/recurso/ubicación de memoria es accesible por múltiples subprocesos y al menos uno de los subprocesos está cambiando el valor de variable/recurso/ubicación de memoria, entonces puede ocurrir Condición de carrera.</description>
    </item>
    
  </channel>
</rss>

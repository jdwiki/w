<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial maravilloso on </title>
    <link>https://www.wikiod.com/es/docs/groovy/</link>
    <description>Recent content in Tutorial maravilloso on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/groovy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con Groovy</title>
      <link>https://www.wikiod.com/es/groovy/empezando-con-groovy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/empezando-con-groovy/</guid>
      <description>Instalación o Configuración # Hay dos formas comunes de instalar Groovy.
Descargar
El binario de Groovy se puede descargar en la página descargar del sitio web de Groovy. Puede descomprimir el archivo y agregar la ruta a %GROOVY_HOME%/bin/groovy.bat a la variable de entorno del sistema PATH, donde %GROOVY_HOME% es el directorio donde se descomprime Groovy.
SDKMAN
La otra opción es usar SDKMAN. Esta opción ha crecido rápidamente en popularidad y hace que administrar múltiples versiones de Groovy sea muy simple.</description>
    </item>
    
    <item>
      <title>Groovy Truth (veracidad)</title>
      <link>https://www.wikiod.com/es/groovy/groovy-truth-veracidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/groovy-truth-veracidad/</guid>
      <description>Groovy evalúa las condiciones en declaraciones if, while y for de la misma manera que lo hace Java para las condiciones estándar de Java: en Java debe proporcionar una expresión booleana (una expresión que se evalúa como un booleano) y el resultado es el resultado de la evaluación.
En Groovy, el resultado es el mismo que en Java para esas condiciones (No se proporcionan ejemplos, esto es Java estándar).
El otro mecanismo de evaluación de la veracidad mostrado mediante ejemplos se puede resumir así:</description>
    </item>
    
    <item>
      <title>Interpolación de cadenas</title>
      <link>https://www.wikiod.com/es/groovy/interpolacion-de-cadenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/interpolacion-de-cadenas/</guid>
      <description>Sintaxis # ps ps
${-&amp;gt;} Básico # def str = &#39;nice&#39; assert &amp;quot;Groovy is $str&amp;quot; == &#39;Groovy is nice&#39; Expresión punteada # def arg = [phrase: &#39;interpolated&#39;] assert &amp;quot;This is $arg.phrase&amp;quot; == &#39;This is interpolated&#39; Expresión ansiosa # def str = &#39;old&#39; def interpolated = &amp;quot;I am the ${str} value&amp;quot; assert interpolated == &#39;I am the old value&#39; str = &#39;new&#39; assert interpolated == &#39;I am the old value&#39; Expresión perezosa # Podemos tener una interpolación perezosa en Strings.</description>
    </item>
    
    <item>
      <title>Cadenas y literales GString</title>
      <link>https://www.wikiod.com/es/groovy/cadenas-y-literales-gstring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/cadenas-y-literales-gstring/</guid>
      <description>Sintaxis # &amp;lsquo;Cadena entre comillas simples&amp;rsquo; &amp;ldquo;Cadena entre comillas dobles&amp;rdquo; &amp;lsquo;&amp;lsquo;&amp;lsquo;Cadena multilínea&amp;rsquo;&amp;rsquo;&amp;rsquo; &amp;ldquo;&amp;ldquo;&amp;ldquo;Cadena triple entre comillas dobles&amp;rdquo;&amp;rdquo;&amp;rdquo; /Cuerda cortante/ $/Cadena de barra inclinada en dólares/$ Groovy tiene dos tipos de cadenas, java java.lang.String y groovy.lang.GString, así como múltiples formas de cadenas literales (ver sintaxis y ejemplos).
La principal diferencia entre los dos tipos de cadenas es que GString admite la interpolación de cadenas.
Cadena de barras de dólar # def param = &#39;string&#39; def str = $/ multiline $param no need to escape slash \n $ $$ /$ assert str instanceof GString assert str.</description>
    </item>
    
    <item>
      <title>Cierres</title>
      <link>https://www.wikiod.com/es/groovy/cierres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/cierres/</guid>
      <description>Cierre con parámetros implícitos # [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { it.length() } it es el nombre predeterminado del parámetro si tiene un solo parámetro y no nombra explícitamente el parámetro. Opcionalmente, también puede declarar el parámetro.
[&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;].collect { animal -&amp;gt; animal.length() } Cierre con parámetros explícitos # def addNumbers = { a, b -&amp;gt; a + b } addNumbers(-7, 15) // returns 8 Cierre con destino personalizado para llamadas de método con receptor implícito # class MyHello { def sayHello() { &amp;quot;Hello, world&amp;quot; } } def cl = { sayHello() } cl() // groovy.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/es/groovy/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/json/</guid>
      <description>Analizar una cadena json # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() def obj = jsonSlurper.parseText(&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [1] }&#39;) assert obj.foo == &#39;bar&#39; assert obj.baz == [1] Pretty-imprime una cadena json # import groovy.json.JsonOutput; def json = JsonOutput.toJson([foo: &#39;bar&#39;, baz: [1]]) assert json == &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;,&amp;quot;baz&amp;quot;:[1]}&#39; def pretty = JsonOutput.prettyPrint(json) assert pretty == &#39;&#39;&#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: [ 1 ] }&#39;&#39;&#39; Analizar un archivo json # import groovy.json.JsonSlurper; def jsonSlurper = new JsonSlurper() File fl = new File(&#39;/path/to/fils.</description>
    </item>
    
    <item>
      <title>Operador de propagación</title>
      <link>https://www.wikiod.com/es/groovy/operador-de-propagacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/operador-de-propagacion/</guid>
      <description>En la mayoría de los casos, el operador de propagación *. es idéntico a llamar a .collect { it.________ }.
def animals = [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;] assert animals*.length() == animals.collect { it.length() } Pero si el sujeto es nulo, se comportan de otra manera:
def animals = null assert animals*.length() == null assert animals.collect { it.length() } == [] Acceder a una propiedad # class Vector { double x double y } def points = [ new Vector(x: 10, y: -5), new Vector(x: -17.</description>
    </item>
    
    <item>
      <title>Operador de nave espacial</title>
      <link>https://www.wikiod.com/es/groovy/operador-de-nave-espacial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/operador-de-nave-espacial/</guid>
      <description>Operador de nave espacial para clasificaciones personalizadas # class User { String name int age } def users = [ new User(name: &amp;quot;Bob&amp;quot;, age: 20), new User(name: &amp;quot;Tom&amp;quot;, age: 50), new User(name: &amp;quot;Bill&amp;quot;, age: 45) ] // sort by age users.sort { a, b -&amp;gt; a.age &amp;lt;=&amp;gt; b.age } Uso básico # el operador de la nave espacial devuelve -1 cuando el operador de la izquierda es más pequeño, 0 cuando los operadores son iguales y 1 en caso contrario:</description>
    </item>
    
    <item>
      <title>Operadores de colección</title>
      <link>https://www.wikiod.com/es/groovy/operadores-de-coleccion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/operadores-de-coleccion/</guid>
      <description>Iterar sobre una colección # Liza # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // using implicit argument lst.each { println it } // using explicit argument lst.each { val -&amp;gt; println val } // both print: // foo // bar // baz Iterar con índice # def lst = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // explicit arguments are required lst.eachWithIndex { val, idx -&amp;gt; println &amp;quot;$val in position $idx&amp;quot; }​​​​​​​​​​​​​​ // prints: // foo in position 0 // bar in position 1 // baz in position 2 mapas # def map = [foo: &#39;FOO&#39;, bar: &#39;BAR&#39;, baz: &#39;BAZ&#39;] // using implicit argument map.</description>
    </item>
    
    <item>
      <title>RESTCliente</title>
      <link>https://www.wikiod.com/es/groovy/restcliente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/groovy/restcliente/</guid>
      <description>Uso, ejemplos y peligros del cliente HTTP de Groovy.
OBTENER solicitud # @Grab(group=&#39;org.codehaus.groovy.modules.http-builder&#39;, module=&#39;http-builder&#39;, version=&#39;0.7&#39; ) import groovyx.net.http.RESTClient try { def restClient = new RESTClient(&amp;quot;http://weathers.co&amp;quot;) def response = restClient.get(path: &#39;/api.php&#39;, query: [&#39;city&#39;: &#39;Prague&#39;]) println &amp;quot;Status : ${response.status}&amp;quot; println &amp;quot;Body : ${response.data.text}&amp;quot; } catch (Exception e) { println &amp;quot;Error : ${e.statusCode}&amp;quot; println &amp;quot;Message : ${e.response.data}&amp;quot; } </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial exprés on </title>
    <link>https://www.wikiod.com/es/docs/express/</link>
    <description>Recent content in Tutorial exprés on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/express/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con express</title>
      <link>https://www.wikiod.com/es/express/primeros-pasos-con-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/primeros-pasos-con-express/</guid>
      <description>Aplicación Hello World, usando ExpressJS 4 y Node &amp;gt;= 4 # Prefacio # Necesitará node &amp;gt;= 4 y express 4 para este proyecto. Puede obtener la distribución node más reciente desde [su página de descarga] (https://nodejs.org/en/download/).
Antes de este tutorial, debe inicializar su proyecto de nodo ejecutando
$ npm init desde la línea de comandos y rellenando la información que desees. Tenga en cuenta que puede cambiar la información en cualquier momento editando el archivo package.</description>
    </item>
    
    <item>
      <title>Manejo de errores</title>
      <link>https://www.wikiod.com/es/express/manejo-de-errores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/manejo-de-errores/</guid>
      <description>Sintaxis # app.use(function(err, req, res, next) {}) // Middleware básico Parámetros # Nombre Descripción err Objeto con información de error requerido Objeto de solicitud HTTP res Objeto de respuesta HTTP siguiente función utilizada para iniciar la siguiente ejecución de middleware Muestra básica # A diferencia de otras funciones de middleware, las funciones de middleware de manejo de errores tienen cuatro argumentos en lugar de tres: (err, req, res, next).
Muestra:</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/express/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/enrutamiento/</guid>
      <description>Enrutamiento Hola Mundo # El archivo de la aplicación principal carga el archivo de rutas donde se definen las rutas.
aplicación.js
var express = require(&#39;express&#39;); var app = express(); app.use(&#39;/&#39;, require(&#39;./routes&#39;)); app.listen(&#39;3000&#39;); rutas.js
var router = require(&#39;express&#39;).Router(); router.get(&#39;/&#39;, function(req, res) { res.send(&#39;Hello World!&#39;); }); module.exports = router; Múltiples Rutas # El archivo de la aplicación principal carga los archivos de rutas en los que le gustaría definir rutas. Para ello necesitamos la siguiente estructura de directorios: aplicación.</description>
    </item>
    
    <item>
      <title>generador expreso</title>
      <link>https://www.wikiod.com/es/express/generador-expreso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/generador-expreso/</guid>
      <description>Parámetros # Parámetro Definición -h, &amp;ndash;ayuda información de uso de salida -V, &amp;ndash;versión salida el número de versión -e, &amp;ndash;ejs agregue compatibilidad con el motor de plantillas pjs (JavaScript incorporado) (predeterminado en jade, que se ha renombrado como Pug) &amp;ndash;hb agregar soporte de motor de plantillas de manillar -H, &amp;ndash;hogan añadir compatibilidad con el motor hogan.js &amp;ndash;git añadir .gitignore -f, &amp;ndash;fuerza forzar en directorio no vacío -c &amp;lt;motor&amp;gt;, &amp;ndash;css &amp;lt;motor&amp;gt; agregue soporte de hoja de estilo &amp;lt;engine&amp;gt; (less, stylus, compass, sass) (el valor predeterminado es css) Express Generator es una gran herramienta para poner en marcha un proyecto rápidamente.</description>
    </item>
    
    <item>
      <title>Ver configuración del motor</title>
      <link>https://www.wikiod.com/es/express/ver-configuracion-del-motor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/ver-configuracion-del-motor/</guid>
      <description>A menudo, el servidor necesita servir páginas dinámicamente. Por ejemplo, un usuario, el Sr. X, visita la página y ve algo como &amp;ldquo;Bienvenido, Sr. X a mi página de inicio&amp;rdquo;. En este caso, las vistas pueden ser útiles. ser útil Las variables se pueden inyectar en HTML dinámicamente usando el motor de vista. El motor de vista es algo que representa las vistas. Uno puede mantener las vistas para que se sirvan en una carpeta llamada ver y servir a pedido.</description>
    </item>
    
    <item>
      <title>Manejo de archivos estáticos</title>
      <link>https://www.wikiod.com/es/express/manejo-de-archivos-estaticos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/manejo-de-archivos-estaticos/</guid>
      <description>Sintaxis # Para servir archivos estáticos (imágenes, CSS, archivos JS, etc.) use la función de middleware express.static. Pase el nombre del directorio que contiene los activos a express.static para servir los archivos directamente. (Consulte el Ejemplo básico) Puede usar varios directorios, simplemente llame a express.static varias veces. Recuerde, Express busca archivos en el orden en que establece los directorios con express.static. (Consulte el Ejemplo de directorios múltiples) Puede crear un prefijo de ruta virtual (es decir, uno en el que la ruta no exista realmente en el sistema de archivos) con express.</description>
    </item>
    
    <item>
      <title>Conectar</title>
      <link>https://www.wikiod.com/es/express/conectar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/conectar/</guid>
      <description>Conéctese y exprésese # Express se basa en Connect, que es lo que proporciona la funcionalidad de middleware de Express. Para comprender qué es connect, puede ver que proporciona la estructura básica de la aplicación que usa cuando usa express
const connect = require(&#39;connect&#39;) const app = connect() app.listen(3000) Esto abrirá un servidor http &amp;ldquo;vacío&amp;rdquo; que responderá 404 a todas las solicitudes.
Programa intermedio # El middleware se adjunta al objeto de la aplicación, generalmente antes de que se llame a listen.</description>
    </item>
    
    <item>
      <title>Integración rápida de bases de datos</title>
      <link>https://www.wikiod.com/es/express/integracion-rapida-de-bases-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/integracion-rapida-de-bases-de-datos/</guid>
      <description>Conéctese a MongoDB con Node &amp;amp; Express # Primero, asegúrese de haber instalado mongodb y express a través de npm. Luego, en un archivo convencionalmente llamado db.js, use el siguiente código:
var MongoClient = require(&#39;mongodb&#39;).MongoClient var state = { db: null, } exports.connect = function(url, done) { if (state.db) return done() MongoClient.connect(url, function(err, db) { if(err) return done(err) state.db = db done() }) } exports.get = function() { return state.db } exports.</description>
    </item>
    
    <item>
      <title>Escribiendo Middleware Express</title>
      <link>https://www.wikiod.com/es/express/escribiendo-middleware-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/escribiendo-middleware-express/</guid>
      <description>Sintaxis # Especifique la instancia de express que desea utilizar. Esto es comúnmente aplicación. Defina el método HTTP para el que se aplica la función. En el ejemplo, esto es get. Defina la ruta a la que se aplica la función. En el ejemplo, esto es &amp;rsquo;/&amp;rsquo;. Defina como una función con la palabra clave función. Agregue los parámetros requeridos: req, res, next. (Ver nota en la sección de comentarios) Pon algo de código en la función para hacer lo que quieras Parámetros # Parámetro Detalles requerimiento El objeto de la solicitud.</description>
    </item>
    
    <item>
      <title>Explicar el enrutamiento en Express</title>
      <link>https://www.wikiod.com/es/express/explicar-el-enrutamiento-en-express/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/express/explicar-el-enrutamiento-en-express/</guid>
      <description>Manejadores de ruta encadenables para una ruta de ruta usando app.route # var express = require(&#39;express&#39;); var app = express(); var router = express.Router(); app.route(&#39;/user&#39;) .get(function (req, res) { res.send(&#39;Get a random user&#39;) }) .post(function (req, res) { res.send(&#39;Add a user&#39;) }) .put(function (req, res) { res.send(&#39;Update the user details&#39;) }) .delete(function (req, res) { res.send(&#39;Delete a user&#39;) }); Enrutador exprés # El enrutador Express le permite crear múltiples &amp;ldquo;miniaplicaciones&amp;rdquo; para que pueda asignar nombres a su api, público, autenticación y otras rutas en sistemas de enrutamiento separados.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial magento on </title>
    <link>https://www.wikiod.com/es/docs/magento/</link>
    <description>Recent content in tutorial magento on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/magento/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con magento</title>
      <link>https://www.wikiod.com/es/magento/primeros-pasos-con-magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/primeros-pasos-con-magento/</guid>
      <description>Instalación y configuración # Prerrequisitos y requisitos para Magento Community Edition 1.9 ================================================== ==============
Alojamiento
Apache 2.x (con mod_rewrite) o Nginx 1.7.x
Debido a las exigencias del procesamiento de las operaciones de Magento, se recomienda instalar Magento en un servidor con al menos 2 GB de RAM. Esto asegurará que todo el software involucrado en la administración de la tienda tenga suficiente memoria para funcionar.
Capacidad para ejecutar trabajos programados (crontab) con PHP 5.</description>
    </item>
    
    <item>
      <title>Obtener productos de la base de datos</title>
      <link>https://www.wikiod.com/es/magento/obtener-productos-de-la-base-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/obtener-productos-de-la-base-de-datos/</guid>
      <description>Obtener producto por sku # $sku = &#39;sku-goes-here&#39;; $product = Mage::getModel(&#39;catalog/product&#39;)-&amp;gt;loadByAttribute(&#39;sku&#39;, $sku); Obtener producto por ID # $id = 1; $product = Mage::getModel(&#39;catalog/product&#39;)-&amp;gt;load($id); if($product-&amp;gt;getId()){ //product was found } Obtenga la colección de productos por atributo # $collection = Mage::getModel(&#39;catalog/product&#39;)-&amp;gt;getCollection(); // Using operator $collection-&amp;gt;addAttributeToFilter(&#39;status&#39;, array(&#39;eq&#39; =&amp;gt; 1)); // Without operator (automatically uses &#39;equal&#39; operator $collection-&amp;gt;addAttributeToFilter(&#39;status&#39;, 1); Colección de productos - consulta LIKE # $collection = Mage::getModel(&#39;catalog/product&#39;)-&amp;gt;getCollection(); $collection-&amp;gt;addAttributeToFilter(&#39;sku&#39;, array(&#39;like&#39; =&amp;gt; &#39;UX%&#39;)); Colección de productos - con atributos # //all attributes $collection = Mage::getModel(&#39;catalog/product&#39;) -&amp;gt;getCollection() -&amp;gt;addAttributeToSelect(&#39;*&#39;); //specific attributes $collection = Mage::getModel(&#39;catalog/product&#39;) -&amp;gt;getCollection() -&amp;gt;addAttributeToSelect(&#39;name&#39;); //certain attributes are special, such as price and images //for images, then you can use &#39;getMediaGalleryImages&#39; $product-&amp;gt;load(&#39;media_galley&#39;); Obtenga la colección de productos de una lista de SKU # $ skuList = matriz (&#39;SKU-1&#39;, &#39;SKU-2&#39;, .</description>
    </item>
    
    <item>
      <title>Estructura del módulo</title>
      <link>https://www.wikiod.com/es/magento/estructura-del-modulo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/estructura-del-modulo/</guid>
      <description>Los módulos existen para ser ampliados. No puede cambiar los archivos app/code/ sin prohibir futuras actualizaciones. En su lugar, agregamos un módulo al directorio app/code/local (es posible que falte el directorio local, si es así, debe crearse manualmente. Esto es común en versiones posteriores de Magento) para agregar funcionalidad local personalizada.
Todos los archivos de configuración del módulo comienzan con una etiqueta &amp;lt;config&amp;gt;. El nuevo módulo se declara dentro de la etiqueta &amp;lt;módulos&amp;gt;.</description>
    </item>
    
    <item>
      <title>Estructura MVC</title>
      <link>https://www.wikiod.com/es/magento/estructura-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/estructura-mvc/</guid>
      <description>MVC significa Modelo-Vista-Controlador. Cualquier aplicación que separa su acceso a datos, lógica comercial e interfaz de usuario se llama MVC. Puede haber dos tipos de MVC: basado en convenciones y basado en configuración. Por ejemplo, cakePHP se basa en convenciones, es decir, solo necesita seguir las instrucciones del sistema central para preparar su módulo en unas pocas líneas. Magento se basa en la configuración, es decir, debe especificar cada cosa en el archivo de configuración de su módulo para que funcione.</description>
    </item>
    
    <item>
      <title>EAV (valor de atributo de entidad)</title>
      <link>https://www.wikiod.com/es/magento/eav-valor-de-atributo-de-entidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/eav-valor-de-atributo-de-entidad/</guid>
      <description>Entidad
Almacena información sobre el tipo de datos que se almacenan. En el caso de Magento esto es cliente, producto, categoría, etc.
Atributo
Las propiedades individuales de cada una de las entidades, p. nombre, peso, dirección de correo electrónico, etc.
Valor
El valor de una determinada entidad y atributo. Por ejemplo, podemos especificar la entidad del cliente y el atributo de correo electrónico y luego darle el valor hola@ejemplo.com.
Esquema de base de datos</description>
    </item>
    
    <item>
      <title>Pedidos</title>
      <link>https://www.wikiod.com/es/magento/pedidos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/pedidos/</guid>
      <description>Obtener pedido por ID # $orderid = 12345; $order = Mage::getModel(&#39;sales/order&#39;)-&amp;gt;load($orderid); El código anterior es más o menos análogo a la siguiente consulta SQL.
select * from sales_flat_order where entity_id=12345; Obtener pedido por ID de incremento # $incrementid = 100000000; $order = Mage::getModel(&#39;sales/order&#39;)-&amp;gt;loadByIncrementId($incrementid); El código anterior es más o menos análogo a la siguiente consulta SQL.
select * from sales_flat_order where increment_id=100000000; El increment_id es el identificador de pedido de cara al cliente, mientras que el entity_id es el identificador de nivel de base de datos para el pedido.</description>
    </item>
    
    <item>
      <title>Carcasa, CLI</title>
      <link>https://www.wikiod.com/es/magento/carcasa-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/carcasa-cli/</guid>
      <description>Conceptos básicos # Debe tener una línea de comando de Linux o conectarse usando SSH a su servidor para poder usar scripts de shell. Ve a tu MAGENTO_ROOT/shell El script se puede ejecutar escribiendo, es decir, php -f indexer.php help Métodos Core Shell por archivos # resumen.php
indexador.php
compilador.php
registro.php
Scripts de shell php personalizados # A veces, necesitamos acceder a Magento fuera de un navegador web para omitir los tiempos de ejecución o establecer diferentes cosas que no afectarán la interfaz.</description>
    </item>
    
    <item>
      <title>Comprender los tipos de productos</title>
      <link>https://www.wikiod.com/es/magento/comprender-los-tipos-de-productos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/comprender-los-tipos-de-productos/</guid>
      <description>Hay seis tipos de productos diferentes integrados en Magento.
Simple Una sola unidad de stock
Configurable Primero de los productos compuestos. Permita que los clientes configuren su producto y agreguen un solo producto simple a la cesta.
Agrupados El segundo producto compuesto, un producto agrupado, relaciona productos simples y brinda a los clientes la posibilidad de elegir cantidades de cada artículo.
Paquete El tercer tipo de producto compuesto, un paquete, relaciona productos simples para comprarlos como un solo artículo.</description>
    </item>
    
    <item>
      <title>Manejo de errores, mensajes e informes de Magento</title>
      <link>https://www.wikiod.com/es/magento/manejo-de-errores-mensajes-e-informes-de-magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/manejo-de-errores-mensajes-e-informes-de-magento/</guid>
      <description>Ubicaciones del registro de errores # /var/registro/ # Por lo general, el archivo system.log yException.log existirá en la carpeta /var/log/. Estos contienen la mayor parte de la información que necesitará. Puede verificar si están habilitados y cuáles son los nombres de la excepción y el registro del sistema yendo a `Sistema&amp;gt; Configuración&amp;gt; Sistema&amp;gt; Desarrollador&amp;gt; Configuración de registro&#39;.
/var/informe/ # Los archivos de informe se generan en esta carpeta después de que un usuario haya encontrado un error.</description>
    </item>
    
    <item>
      <title>Obtener usuario actual</title>
      <link>https://www.wikiod.com/es/magento/obtener-usuario-actual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento/obtener-usuario-actual/</guid>
      <description>Obtener cliente actual # Mage::helper(&#39;customer&#39;)-&amp;gt;getCustomer(); o
Mage::getSingleton(&#39;customer/session&#39;)-&amp;gt;getCustomer(); Obtenga el usuario administrador actual # Mage::getSingleton(&#39;admin/session&#39;)-&amp;gt;getUser(); Comprobar si el usuario ha iniciado sesión # Mage::getSingleton(&#39;customer/session&#39;)-&amp;gt;isLoggedIn() </description>
    </item>
    
  </channel>
</rss>

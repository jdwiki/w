<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Selenium-webdriver Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/selenium-webdriver/</link>
    <description>Recent content in Selenium-webdriver Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/selenium-webdriver/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con selenium-webdriver</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/primeros-pasos-con-selenium-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/primeros-pasos-con-selenium-webdriver/</guid>
      <description>¿Qué es Selenium WebDriver? # Selenium es un conjunto de herramientas diseñado para automatizar navegadores. Se usa comúnmente para pruebas de aplicaciones web en múltiples plataformas. Hay algunas herramientas disponibles bajo el paraguas de Selenium, como Selenium WebDriver (ex-Selenium RC), Selenium IDE y Selenium Grid.
WebDriver es una interfaz de control remoto que le permite manipular elementos DOM en páginas web, así como controlar el comportamiento de los agentes de usuario.</description>
    </item>
    
    <item>
      <title>Uso de anotaciones @FindBy en Java</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/uso-de-anotaciones-findby-en-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/uso-de-anotaciones-findby-en-java/</guid>
      <description>Sintaxis # NOMBRE_CLASE: @FindBy(nombreClase = &amp;ldquo;nombreclase&amp;rdquo;) -CSS: @FindBy(css = &amp;ldquo;css&amp;rdquo;) Identificación: @FindBy(id = &amp;ldquo;id&amp;rdquo;) ID_OR_NAME: @FindBy(how = How.ID_OR_NAME, using =&amp;ldquo;idOrName&amp;rdquo;) ENLACE_TEXTO: @FindBy(enlaceTexto=&amp;ldquo;texto&amp;rdquo;) NOMBRE: @FindBy(nombre= &amp;ldquo;nombre&amp;rdquo;) PARTIAL_LINK_TEXT: @FindBy(parcialLinkText= &amp;ldquo;texto&amp;rdquo;) NOMBRE_ETIQUETA: @FindBy(nombreEtiqueta=&amp;ldquo;nombreetiqueta&amp;rdquo;) XPATH: @FindBy(xpath=&amp;ldquo;xpath&amp;rdquo;) Tenga en cuenta que hay dos formas de utilizar la anotación. Ejemplos:
@FindBy(id = &amp;quot;id&amp;quot;) y
@FindBy(how = How.ID, using =&amp;quot;id&amp;quot;) son iguales y ambos buscan el elemento por su ID. En el caso de ID_OR_NAME solo puede usar</description>
    </item>
    
    <item>
      <title>Esperar</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/esperar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/esperar/</guid>
      <description>Tipos de espera en Selenium WebDriver # Al ejecutar cualquier aplicación web, es necesario tener en cuenta el tiempo de carga. Si su código intenta acceder a cualquier elemento que aún no esté cargado, WebDriver generará una excepción y su secuencia de comandos se detendrá.
Hay tres tipos de esperas:
Esperas implícitas Esperas explícitas Esperas fluidas Las esperas implícitas se usan para establecer el tiempo de espera a lo largo del programa, mientras que las esperas explícitas se usan solo en partes específicas.</description>
    </item>
    
    <item>
      <title>Ejecutando Javascript en la página</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/ejecutando-javascript-en-la-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/ejecutando-javascript-en-la-pagina/</guid>
      <description>Sintaxis # objeto ExecuteAsyncScript (secuencia de comandos de cadena, objeto de parámetros [] argumentos); object ExecuteScript(string script, params object[] args); pitón # Para ejecutar Javascript en python, use execute_script(&amp;quot;javascript script here&amp;quot;). execute_script se llama en una instancia de webdriver y puede ser cualquier javascript válido.
from selenium import webdriver driver = webdriver.Chrome() driver.execute_script(&amp;quot;alert(&#39;running javascript&#39;);&amp;quot;) C# # Para ejecutar JavaScript en una instancia de IWebDriver, debe convertir IWebDriver en una nueva interfaz, IJavaScriptExecutor</description>
    </item>
    
    <item>
      <title>Localización de elementos web</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/localizacion-de-elementos-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/localizacion-de-elementos-web/</guid>
      <description>Sintaxis # ByChained(parámetros By[] bys) Los elementos se encuentran en Selenium mediante el uso de localizadores y la clase Por. Para hacer un proyecto de automatización robusto con Selenium, uno debe usar localizadores para elementos web de manera inteligente. Los localizadores deben ser descriptivos, únicos y poco probables de cambiar para que no obtenga falsos positivos en las pruebas, por ejemplo. La prioridad es utilizar:
ID: ya que es único y obtendrá exactamente el elemento que desea.</description>
    </item>
    
    <item>
      <title>Marcos de conmutación</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/marcos-de-conmutacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/marcos-de-conmutacion/</guid>
      <description>Sintaxis # Java driver.switchTo().frame(String nombre); driver.switchTo().frame(String id); controlador.switchTo().frame(índice int); controlador.switchTo().frame(WebElement frameElement); controlador.switchTo().defaultContent(); C# controlador.SwitchTo().Frame(int frameIndex); controlador.SwitchTo().Frame(IWebElement frameElement); driver.SwitchTo().Frame(string frameName); controlador.SwitchTo().DefaultContent(); Pitón driver.switch_to_frame(nombreOId) driver.switch_to.frame(nombreOId) driver.switch_to_frame(índice) driver.switch_to.frame(índice) driver.switch_to_frame(frameElement) driver.switch_to.frame(frameElement) controlador.cambiar_a_contenido_predeterminado() controlador.cambiar_a.contenido_predeterminado() JavaScript driver.switchTo().frame(nameOrId) controlador.switchTo().frame(índice) controlador.switchTo().defaultContent() Parámetros # parámetro detalles nombreOrId Seleccione un marco por su nombre de id. índice Seleccione un cuadro por su índice de base cero. frameElement Seleccione un marco usando su WebElement previamente ubicado Para cambiar a un marco usando Java # Por ejemplo, si el código fuente html de una vista o elemento html está envuelto por un iframe como este:</description>
    </item>
    
    <item>
      <title>Robot en selenio</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/robot-en-selenio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/robot-en-selenio/</guid>
      <description>Sintaxis # retraso (int ms) keyPress (código clave int) keyRelease (código clave int) -MoveMouse(int x, int y) mousePress (botones int) mouseRelease (botones int) mouseWheel(int ruedaAmt) Parámetros # Parámetro Detalles ms Tiempo para dormir en milisegundos código clave Constante para presionar la tecla especificada, por ejemplo, para presionar A el código es VK_A. Consulte para obtener más detalles: https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html x,y Coordenadas de pantalla botones La máscara Botón; una combinación de una o más máscaras de botón de ratón wheelAmt Número de muescas para mover la rueda del mouse, valor negativo para mover hacia arriba/alejarse del usuario valor positivo para mover hacia abajo/acercar al usuario Esta sección contiene detalles sobre la implementación de Robot API con Selenium Webdriver.</description>
    </item>
    
    <item>
      <title>Programa básico de Selenium Webdriver</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/programa-basico-de-selenium-webdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/programa-basico-de-selenium-webdriver/</guid>
      <description>Este tema tiene como objetivo mostrar el programa básico del controlador web en lenguajes compatibles con Selenium como C#, Groovy, Java, Perl, PHP, Python y Ruby.
Journey incluye abrir el controlador del navegador &amp;ndash;&amp;gt; Página de Google &amp;ndash;&amp;gt; apagar el navegador
C# # using OpenQA.Selenium; using OpenQA.Selenium.Chrome; namespace BasicWebdriver { class WebDriverTest { static void Main() { using (var driver = new ChromeDriver()) { driver.Navigate().GoToUrl(&amp;quot;http://www.google.com&amp;quot;); } } } } El &amp;lsquo;programa&amp;rsquo; anterior navegará a la página de inicio de Google y luego cerrará el navegador después de cargar completamente la página.</description>
    </item>
    
    <item>
      <title>Modelo de objetos de página</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/modelo-de-objetos-de-pagina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/modelo-de-objetos-de-pagina/</guid>
      <description>Un papel importante en la automatización de sitios web y aplicaciones web implica identificar elementos en la pantalla e interactuar con ellos. Los elementos se encuentran en Selenium mediante el uso de localizadores y la clase Por. Estos localizadores e interacciones se colocan dentro de los objetos de página como práctica recomendada para evitar la duplicación de código y facilitar el mantenimiento. Encapsula WebElements y se supone que contiene comportamiento y devuelve información en la página (o parte de una página en una aplicación web).</description>
    </item>
    
    <item>
      <title>Seleccionar clase</title>
      <link>https://www.wikiod.com/es/selenium-webdriver/seleccionar-clase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium-webdriver/seleccionar-clase/</guid>
      <description>Sintaxis # Java deseleccionar Todo() deseleccionar por índice (índice int) deselectByValue(java.lang.String value) deselectByVisibleText(java.lang.String texto) getAllSelectedOptions() getFirstSelectedOption() obtenerOpciones() esMúltiple() selectByIndex (índice int) selectByValue (valor java.lang.String) selectByVisibleText(java.lang.String texto) Parámetros # Parámetros Detalles índice Se seleccionará la opción en este índice valor El valor con el que comparar texto El texto visible con el que comparar La clase Select de Selenium WebDriver proporciona métodos útiles para interactuar con las opciones select. El usuario puede realizar operaciones en un menú desplegable de selección y también anular la selección utilizando los métodos a continuación.</description>
    </item>
    
  </channel>
</rss>

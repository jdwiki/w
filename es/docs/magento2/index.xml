<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de magento2 on </title>
    <link>https://www.wikiod.com/es/docs/magento2/</link>
    <description>Recent content in Tutorial de magento2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/magento2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con magento2</title>
      <link>https://www.wikiod.com/es/magento2/primeros-pasos-con-magento2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/primeros-pasos-con-magento2/</guid>
      <description>Instale Magento 2 en Ubuntu 16.04 # NOTAS: Vamos a instalar Magento 2 en Ubuntu Server 16.04 LTS nuevo con PHP 7.0, MySQL 5.6 y Apache 2.4.
1. Requisitos de configuración # Apache 2.2 o 2.4 con módulo mod_rewrite (o) Nginx &amp;gt;= 1.8. PHP 5.5 o versión posterior. PHP 7.0 también es compatible. Módulos PHP requeridos: PDO/MySQL, mbstring, mcrypt, mhash, SimpleXML, curl, xsl, gd, ImageMagick 6.3.7 (o posterior) o ambos, soap, intl, openssl.</description>
    </item>
    
    <item>
      <title>Actualizar Magento</title>
      <link>https://www.wikiod.com/es/magento2/actualizar-magento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/actualizar-magento/</guid>
      <description>Actualice Magento a través de Composer # Comprueba tu versión actual de Magento
php bin/magento --version Ahora agregue la última versión a su compositor.
composer require magento/product-community-edition 2.1.6 --no-update Ejecute la actualización de Composer. Esto le pedirá que tome el nombre de usuario y la contraseña de sus credenciales de su cuenta de mercado.
composer update Esto iniciará el proceso para comenzar a descargar y actualizar su magento
Finalmente actualice su contenido estático y elimine la carpeta var</description>
    </item>
    
    <item>
      <title>Comandos Magento 2 para uso diario</title>
      <link>https://www.wikiod.com/es/magento2/comandos-magento-2-para-uso-diario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/comandos-magento-2-para-uso-diario/</guid>
      <description>Todos los comandos se pueden ejecutar escribiendo solo una parte de ellos.
Por ejemplo:
php bin/magento cache:flush se puede traducir a: php bin/magento c:f php bin/magento ca:f php bin/magento c:fl php bin/caché de magento:f php bin/magento c:descarga etc. Puedes escribir cualquier parte, y si no es ambiguo, automáticamente sabrá cuál quieres.
Lista General de Comandos para Magento 2 # php bin/magento setup:upgrade =&amp;gt; Setup Upgrade php bin/magento setup:di:compile =&amp;gt; Setup: Compile php bin/magento indexer:reindex =&amp;gt; Reindex php bin/magento cache:flush =&amp;gt; Clear Cache php bin/magento deploy:mode:set developer =&amp;gt; Enable Developer Mode Magento (developer/production) php bin/magento deploy:mode:show =&amp;gt; Show Current Mode Magento php bin/magento module:status =&amp;gt; Module: Status php bin/magento module:disable MODULE_NAME =&amp;gt; Module: Disable php bin/magento module:enable MODULE_NAME =&amp;gt; Module: Enable php bin/magento module:uninstall MODULE_NAME =&amp;gt; Module: Uninstall php bin/magento cron:run =&amp;gt; Cronjob: Run Vaciar caché # Vaciar todo el caché de Magento</description>
    </item>
    
    <item>
      <title>Estructura del módulo</title>
      <link>https://www.wikiod.com/es/magento2/estructura-del-modulo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/estructura-del-modulo/</guid>
      <description>Estructura del módulo de catálogo # Por ahora, creo que el módulo de catálogo contiene casi todo lo que puede agregar a un módulo.
Api - Contiene los contratos de servicio. Un conjunto de interfaces que no deben cambiarse a menos que cambie la versión secundaria. No es obligatorio para un módulo personalizado, pero es bueno tenerlo para extensiones comerciales. Data - Data interfaces. Each interface must have a model that implements it (example: interface for product model) ProductRepositoryInterface.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/magento2/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/inyeccion-de-dependencia/</guid>
      <description>Preferencia de clase # &amp;lt;!-- &amp;lt;moduleDir&amp;gt;/etc/&amp;lt;area&amp;gt;/di.xml --&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;preference for=&amp;quot;Vendor\Namespace\Model\Example&amp;quot; type=&amp;quot;Vendor\Namespace\Model\AnotherExample&amp;quot; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/config&amp;gt; El ejemplo anterior es una sintaxis del modelo central de anulación.
Aquí hay una lista de puntos que le describirán cómo hacerlo posible.
moduleDir - Directorio de extensión Como app/code/custom/extension aquí extension es su directorio en el que se colocarán todas las carpetas necesarias de extensión.
área - el área será frontend o adminhtml</description>
    </item>
    
    <item>
      <title>Evento y observador en magento 2</title>
      <link>https://www.wikiod.com/es/magento2/evento-y-observador-en-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/evento-y-observador-en-magento-2/</guid>
      <description>¿Cómo usar un evento personalizado y un observador? # Paso 1: Cree el archivo events.xml según sus requisitos en frontend, Backend o ambos YKM/Banner/etc/frontend/events.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;../../../../../../lib/internal/Magento/Framework/Event/etc/events.xsd&amp;quot;&amp;gt; &amp;lt;event name=&amp;quot;controller_action_predispatch&amp;quot;&amp;gt; &amp;lt;observer name=&amp;quot;ykm_banner_before&amp;quot; instance=&amp;quot;YKM\Banner\Observer\Help&amp;quot; /&amp;gt; &amp;lt;/event&amp;gt; &amp;lt;/config&amp;gt; Paso 2:
Cree un archivo de observador YKM/Banner/Observer/Help.php
&amp;lt;?php /** * Copyright © 2015 Magento. All rights reserved. * See COPYING.txt for license details. */ namespace Estdevs\Banner\Observer; use Magento\Framework\Event\ObserverInterface; class Help implements ObserverInterface { public function execute(\Magento\Framework\Event\Observer $observer) { echo &amp;quot;this is good.</description>
    </item>
    
    <item>
      <title>Obtener productos de la base de datos</title>
      <link>https://www.wikiod.com/es/magento2/obtener-productos-de-la-base-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/obtener-productos-de-la-base-de-datos/</guid>
      <description>Obtenga productos utilizando el Repositorio de productos # Para obtener productos de la base de datos, debe usar el patrón de diseño de repositorio de Magento 2. Cada módulo se puede agrupar con sus propios repositorios, y el módulo Catálogo de productos no es diferente.
Puede usar [inyección de dependencia][1] en su clase para acceder al repositorio. Un ejemplo de trabajo se vería así:
class Example { /** * @var \Magento\Catalog\Model\ProductRepository */ protected $productRepository; /** * @param \Magento\Catalog\Model\ProductRepository $productRepository */ public function __construct( \Magento\Catalog\Model\ProductRepository $productRepository ) { $this-&amp;gt;productRepository = $productRepository; } /** * Get product by ID * @return \Magento\Catalog\Api\Data\ProductInterface * @throws \Magento\Framework\Exception\NoSuchEntityException */ public function getProductById(int $productId) { return $this-&amp;gt;productRepository-&amp;gt;getById($productId); } } Un Repositorio tiene más funciones, como guardar o eliminar un producto, además de obtener una lista de productos y usar un filtro, pero eso está más allá del alcance de este ejemplo.</description>
    </item>
    
    <item>
      <title>Tema personalizado</title>
      <link>https://www.wikiod.com/es/magento2/tema-personalizado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/tema-personalizado/</guid>
      <description>luma tema como padre
{ &amp;quot;name&amp;quot;: &amp;quot;magento/luma&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;N/A&amp;quot;, &amp;quot;require&amp;quot;: { &amp;quot;php&amp;quot;: &amp;quot;~5.5.0|~5.6.0|~7.0.0&amp;quot;, &amp;quot;magento/theme-luma&amp;quot;: &amp;quot;100.0.*&amp;quot;, &amp;quot;magento/framework&amp;quot;: &amp;quot;100.0.*&amp;quot; }, &amp;quot;type&amp;quot;: &amp;quot;magento2-theme&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;100.0.1&amp;quot;, &amp;quot;license&amp;quot;: [ &amp;quot;OSL-3.0&amp;quot;, &amp;quot;AFL-3.0&amp;quot; ], &amp;quot;autoload&amp;quot;: { &amp;quot;files&amp;quot;: [ &amp;quot;registration.php&amp;quot; ] } } al final
Ejecute php bin/magento setup:upgrade este comando después de los siguientes comandos también necesarios a veces
php bin/magento setup:static-content:deploy &amp;lt;language_pack_1&amp;gt; &amp;lt;language_pack_2&amp;gt; ... &amp;lt;language_pack_n&amp;gt;
&amp;lt;paquete_idioma&amp;gt;: en_US nl_NL en_GB etc.
php bin/caché de magento: vaciar o php bin/caché de magento: limpiar</description>
    </item>
    
    <item>
      <title>Uso de inyección de dependencia para reescribir objetos</title>
      <link>https://www.wikiod.com/es/magento2/uso-de-inyeccion-de-dependencia-para-reescribir-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/uso-de-inyeccion-de-dependencia-para-reescribir-objetos/</guid>
      <description>https://gielberkers.com/magento-2-por-que-usar-reescrituras-cuando-puede-usar-plugins/
http://devdocs.magento.com/guides/v2.0/extension-dev-guide/plugins.html
Algunas formas de modificar una función en magento 2 # Clase de reescritura # Archivo: Espacio de nombres/Nombre del módulo/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;preference for=&amp;quot;Magento\Catalog\Controller\Product\View&amp;quot; type=&amp;quot;Namespace\ModuleName\Controller\Product\View&amp;quot; /&amp;gt; &amp;lt;/config&amp;gt; Archivo: Espacio de nombres\Nombre del módulo\Controlador\Producto\Vista.php
class View extends \Magento\Catalog\Block\Product\View { ///Code logic here } Complemento en el objeto. # Archivo: Espacio de nombres/Nombre del módulo/etc/di.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;config xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&amp;gt; &amp;lt;type name=&amp;quot;Magento\Catalog\Model\Product&amp;quot;&amp;gt; &amp;lt;plugin name=&amp;quot;name_of_plugin&amp;quot; type=&amp;quot;Namespace\ModuleName\Plugin\Catalog\Model\Product&amp;quot; sortOrder=&amp;quot;1&amp;quot; disabled=&amp;quot;false&amp;quot; /&amp;gt; &amp;lt;/type&amp;gt; &amp;lt;/config&amp;gt; Archivo: Espacio de nombres\Nombre del módulo\Complemento\Catálogo\Modelo\Producto.</description>
    </item>
    
    <item>
      <title>Optimización de Magento 2</title>
      <link>https://www.wikiod.com/es/magento2/optimizacion-de-magento-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/magento2/optimizacion-de-magento-2/</guid>
      <description>Configuraciones a optimizar # 1. Habilitar categorías y productos planos # Una de las principales razones de los problemas de velocidad de Magento con la velocidad de lectura de la base de datos. Para acelerar la velocidad de lectura de la base de datos, debe habilitar Catálogo plano. Esto minimizará la cantidad de uniones de bases de datos realizadas al mostrar productos y, debido a eso, se reducirá la complejidad de la consulta de MySQL.</description>
    </item>
    
  </channel>
</rss>

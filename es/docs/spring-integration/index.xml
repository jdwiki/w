<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de integración de resortes on </title>
    <link>https://www.wikiod.com/es/docs/spring-integration/</link>
    <description>Recent content in Tutorial de integración de resortes on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/spring-integration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con la integración de primavera</title>
      <link>https://www.wikiod.com/es/spring-integration/comenzando-con-la-integracion-de-primavera/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-integration/comenzando-con-la-integracion-de-primavera/</guid>
      <description>Instalación o Configuración # La mejor manera de comenzar a usar Spring-Integration en su proyecto es con un sistema de gestión de dependencias, como gradle.
dependencies { compile &#39;org.springframework.integration:spring-integration-core:4.3.5.RELEASE&#39; } A continuación se muestra un ejemplo muy simple que utiliza la puerta de enlace, service-activator terminales de mensajes.
//these annotations will enable Spring integration and scan for components @Configuration @EnableIntegration @IntegrationComponentScan public class Application { //a channel has two ends, this Messaging Gateway is acting as input from one side of inChannel @MessagingGateway interface Greeting { @Gateway(requestChannel = &amp;quot;inChannel&amp;quot;) String greet(String name); } @Component static class HelloMessageProvider { //a service activator act as a handler when message is received from inChannel, in this example, it is acting as the handler on the output side of inChannel @ServiceActivator(inputChannel = &amp;quot;inChannel&amp;quot;) public String sayHello(String name) { return &amp;quot;Hi, &amp;quot; + name; } } @Bean MessageChannel inChannel() { return new DirectChannel(); } public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(Application.</description>
    </item>
    
    <item>
      <title>Integración jdbc</title>
      <link>https://www.wikiod.com/es/spring-integration/integracion-jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-integration/integracion-jdbc/</guid>
      <description>Adaptador de entrada Jdbc - configuración xml # En el [documento de referencia oficial] (http://docs.spring.io/spring-integration/reference/html/jdbc.html#jdbc-inbound-channel-adapter), dice:
La función principal de un adaptador de canal de entrada es ejecutar una consulta SQL SELECT y convertir el conjunto de resultados en un mensaje. La carga útil del mensaje es el conjunto de resultados completo, expresado como una lista, y los tipos de elementos de la lista dependen de la estrategia de asignación de filas que se utilice.</description>
    </item>
    
  </channel>
</rss>

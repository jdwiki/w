<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>akka Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/akka/</link>
    <description>Recent content in akka Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/akka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con akka</title>
      <link>https://www.wikiod.com/es/akka/empezando-con-akka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/empezando-con-akka/</guid>
      <description>Instalación o configuración # Instale JDK 8 (Windows, Linux) y configure la ruta (Windows). Instale Scala (Linux), para Windows visite http://www.scala-lang.org/download/ descargue e instale la distribución binaria, configure la variable de entorno para scala en PATH que está en \scala \bin. Instalación de Typesafe activador (Contiene Scala, Akka, Play, SBT) + andamios y plantillas del proyecto. Para un inicio rápido, descargue el mini-paquete. Extraiga el activador Typesafe y establezca la RUTA en activator-x.</description>
    </item>
    
    <item>
      <title>akka-streams formas personalizadas</title>
      <link>https://www.wikiod.com/es/akka/akka-streams-formas-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/akka-streams-formas-personalizadas/</guid>
      <description>akka proporciona algunas formas predefinidas, que probablemente deberían adaptarse al 99,9% de su uso. la creación de una nueva forma solo debe hacerse en algunos casos muy raros. las formas predefinidas son:
Fuente - 1 salida, sin entradas Fregadero - 1 entrada, sin salidas Flujo - 1 entrada, 1 salida BidiFlow - 2 entradas, 2 salidas &amp;lsquo;Cerrado&amp;rsquo; - sin entradas, sin salidas FanInN - Entradas N (N &amp;lt;= 22), 1 salida FanOutN - N salidas (N &amp;lt;= 22), 1 entrada UniformFanIn - cualquier número de entradas del mismo tipo, 1 salida UniformFanOut - cualquier número de salidas del mismo tipo, 1 entrada &amp;lsquo;Amorfo&amp;rsquo; - cualquier número de entradas o salidas, pero sin tipo.</description>
    </item>
    
    <item>
      <title>ADSL de actor</title>
      <link>https://www.wikiod.com/es/akka/adsl-de-actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/adsl-de-actor/</guid>
      <description>Actor simple DSL # Para crear actores simples sin crear una nueva clase, puede usar:
import akka.actor.ActorDSL._ import akka.actor.ActorSystem implicit val system = ActorSystem(&amp;quot;demo&amp;quot;) val a = actor(new Act { become { case &amp;quot;hello&amp;quot; ⇒ sender() ! &amp;quot;hi&amp;quot; } }) Cambio de contexto # Las dos formas posibles de emitir un context.become (reemplazar o agregar el nuevo comportamiento) se ofrecen por separado para permitir una notación ordenada de recepciones anidadas:</description>
    </item>
    
    <item>
      <title>Hola Mundo</title>
      <link>https://www.wikiod.com/es/akka/hola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/hola-mundo/</guid>
      <description>Akka hola mundo (Scala) # Agregar dependencia como actor (ejemplo SBT) libraryDependencies += &amp;quot;com.typesafe.akka&amp;quot; % &amp;quot;akka-actor_2.11&amp;quot; % &amp;quot;2.4.8&amp;quot; Crea clases de actores: Actor para salida de cadena:
class OutputActor extends Actor { override def receive: Receive = { case message =&amp;gt; println(message) } } Actor para la modificación de cadenas:
class AppendActor(outputActor: ActorRef) extends Actor { override def receive: Receive = { case message: String =&amp;gt; val changed = s&amp;quot;Hello, $message!</description>
    </item>
    
    <item>
      <title>Supervisión y Monitoreo en Akka</title>
      <link>https://www.wikiod.com/es/akka/supervision-y-monitoreo-en-akka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/supervision-y-monitoreo-en-akka/</guid>
      <description>Referencias: akka.io/docs
Mira mi blog: https://blog.knoldus.com/2016/08/07/supervision-and-monitoring-in-akka/
¿Qué es la supervisión? # Describe una relación de dependencia entre los actores, la relación padre e hijo. El padre es único porque ha creado al niño actor, por lo que el padre es responsable de reaccionar cuando ocurren fallas en su hijo.
Y los padres deciden qué opción debe seleccionarse. Cuando un padre recibe la señal de falla de su hijo, dependiendo de la naturaleza de la falla, el padre decide entre las siguientes opciones:</description>
    </item>
    
    <item>
      <title>Akka corrientes</title>
      <link>https://www.wikiod.com/es/akka/akka-corrientes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/akka-corrientes/</guid>
      <description>Akka Streams: Hola mundo # Akka Streams le permite crear fácilmente una transmisión aprovechando el poder del marco Akka sin definir explícitamente los comportamientos y mensajes de los actores. Cada flujo tendrá al menos una &amp;lsquo;Fuente&amp;rsquo; (origen de los datos) y al menos un &amp;lsquo;Sumidero&amp;rsquo; (destino de los datos).
import akka.actor.ActorSystem import akka.stream.ActorMaterializer import akka.stream.scaladsl.{Sink, Source} import java.io.File val stream = Source(Seq(&amp;quot;test1.txt&amp;quot;, &amp;quot;test2.txt&amp;quot;, &amp;quot;test3.txt&amp;quot;)) .map(new File(_)) .filter(_.exists()) .filter(_.length() != 0) .</description>
    </item>
    
    <item>
      <title>Despachadores</title>
      <link>https://www.wikiod.com/es/akka/despachadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/despachadores/</guid>
      <description>Despachador predeterminado # Un Akka MessageDispatcher es lo que hace que Akka Actors &amp;ldquo;marque&amp;rdquo;, es el motor de la máquina, por así decirlo. Todas las implementaciones de MessageDispatcher también son un ExecutionContext, lo que significa que se pueden usar para ejecutar código arbitrario, por ejemplo, Futures.
Cada ActorSystem tendrá un despachador predeterminado que se usará en caso de que no se configure nada más para un Actor. El despachador predeterminado se puede configurar y, de manera predeterminada, es un Dispatcher con el default-executor especificado.</description>
    </item>
    
    <item>
      <title>Inyectar dependencias en un actor</title>
      <link>https://www.wikiod.com/es/akka/inyectar-dependencias-en-un-actor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/inyectar-dependencias-en-un-actor/</guid>
      <description>Actor de primavera # Debido a la forma muy específica de creación de instancias del actor, inyectar dependencias en una instancia de actor no es trivial. Para intervenir en la creación de instancias del actor y permitir que Spring inyecte dependencias, se deben implementar un par de extensiones akka. El primero de ellos es un IndirectActorProducer:
import akka.actor.Actor; import akka.actor.IndirectActorProducer; import java.lang.reflect.Constructor; import java.util.Arrays; import org.springframework.beans.factory.config.AutowireCapableBeanFactory; import org.springframework.context.ApplicationContext; /** * An actor producer that lets Spring autowire dependencies into created actors.</description>
    </item>
    
    <item>
      <title>También conocido como HTTP</title>
      <link>https://www.wikiod.com/es/akka/tambien-conocido-como-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/akka/tambien-conocido-como-http/</guid>
      <description>Akka HTTP es un servidor HTTP ligero y una biblioteca de clientes que utiliza akka-streams bajo el capó.
Servidor HTTP Akka: Hola mundo (Scala DSL) # La siguiente aplicación iniciará un servidor HTTP escuchando en el puerto 8080 que devuelve Hello world en GET /hello/world
import akka.actor.ActorSystem import akka.http.scaladsl.Http import akka.http.scaladsl.server.Directives._ import akka.http.scaladsl.server._ import akka.stream.ActorMaterializer import scala.concurrent.Await import scala.concurrent.duration.Duration object HelloWorld extends App { implicit val system = ActorSystem(&amp;quot;ProxySystem&amp;quot;) implicit val mat = ActorMaterializer() val route: Route = get { path(&amp;quot;hello&amp;quot; / &amp;quot;world&amp;quot;) { complete(&amp;quot;Hello world&amp;quot;) } } val bindingFuture = Http().</description>
    </item>
    
  </channel>
</rss>

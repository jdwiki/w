<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apache-camel Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/apache-camel/</link>
    <description>Recent content in apache-camel Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/apache-camel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con apache-camel</title>
      <link>https://www.wikiod.com/es/apache-camel/primeros-pasos-con-apache-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/apache-camel/primeros-pasos-con-apache-camel/</guid>
      <description>Instalación o configuración # Instrucciones detalladas sobre cómo agregar las dependencias Camel requeridas.
Dependencia de Maven Una de las formas más comunes de incluir Apache Camel en su aplicación es a través de una dependencia de Maven. Al agregar el bloque de dependencia a continuación, Maven resolverá las bibliotecas y dependencias de Camel por usted.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.17.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle Otra forma común de incluir Apache Camel en su aplicación es a través de una dependencia de Gradle.</description>
    </item>
    
    <item>
      <title>PubSub usando Camel &#43; Redis</title>
      <link>https://www.wikiod.com/es/apache-camel/pubsub-usando-camel--redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/apache-camel/pubsub-usando-camel--redis/</guid>
      <description>Usando el editor:
producerTemplate.asyncSendBody(&amp;quot;direct:myprocedure&amp;quot;, massageBody); Usar &amp;ldquo;createProducer()&amp;rdquo; en ManagedCamel para crear la plantilla de productor.
Editor de Redis # public class RedisPublisher extends RouteBuilder { public static final String CAMEL_REDIS_CHANNEL = &amp;quot;CamelRedis.Channel&amp;quot;; public static final String CAMEL_REDIS_MESSAGE = &amp;quot;CamelRedis.Message&amp;quot;; @Value(&amp;quot;${redis.host}&amp;quot;) private String redisHost; @Value(&amp;quot;${redis.port}&amp;quot;) private int redisPort; @Value(&amp;quot;${redis.channel.mychannel}&amp;quot;) private String redisChannel; private String producerName; @Required public void setProducerName(String producerName) { this.producerName = producerName; } @Override public void configure() throws Exception { from(producerName) .</description>
    </item>
    
    <item>
      <title>Pruebas de integración en rutas existentes con Apache-Camel y Spring (y DBUnit)</title>
      <link>https://www.wikiod.com/es/apache-camel/pruebas-de-integracion-en-rutas-existentes-con-apache-camel-y-spring-y-dbunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/apache-camel/pruebas-de-integracion-en-rutas-existentes-con-apache-camel-y-spring-y-dbunit/</guid>
      <description>El objetivo de este wiki es mostrarle cómo ejecutar pruebas de integración usando Apache Camel.
Más precisamente, al hacer esto, podrá iniciar una ruta existente de principio a fin (con o sin su base de datos real) o interceptar el intercambio entre cada parte de la ruta y probar si sus encabezados o cuerpo son correctos o no.
El proyecto en el que he estado haciendo esto usa Spring clásico con configuración xml y DBUnit para simular una base de datos de prueba.</description>
    </item>
    
  </channel>
</rss>

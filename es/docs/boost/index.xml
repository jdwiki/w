<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Impulso Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/boost/</link>
    <description>Recent content in Impulso Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/boost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con impulso</title>
      <link>https://www.wikiod.com/es/boost/primeros-pasos-con-impulso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/primeros-pasos-con-impulso/</guid>
      <description>Instalación o configuración # Consulte Primeros pasos de Boost.
La mayoría de las bibliotecas de Boost son solo de encabezado, lo que significa que no hay nada que compilar o vincular.
Asegúrese de obtener la versión más reciente de Boost:
Visite www.boost.org Busque la descarga de la versión actual. Actualmente, este enlace aquí. Seleccione el archivo de almacenamiento apropiado para su sistema operativo y descárguelo. Las bibliotecas de solo encabezado se pueden usar simplemente incluyendo los archivos de encabezado respectivos.</description>
    </item>
    
    <item>
      <title>Usando boost.python</title>
      <link>https://www.wikiod.com/es/boost/usando-boostpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/usando-boostpython/</guid>
      <description>Ejemplo introductorio en Boost.Python # Las cosas son fáciles cuando tienes que usar una biblioteca de C++ en un proyecto de Python. Solo puedes usar Boost.
En primer lugar, aquí hay una lista de los componentes que necesita:
Un archivo CMakeList.txt, porque vas a usar CMake. Los archivos C++ del proyecto C++. El archivo python: este es su proyecto python. Empecemos con un pequeño archivo C++. Nuestro proyecto C++ tiene solo un método que devuelve una cadena &amp;ldquo;Este es el primer intento&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Opciones del programa de refuerzo</title>
      <link>https://www.wikiod.com/es/boost/opciones-del-programa-de-refuerzo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/opciones-del-programa-de-refuerzo/</guid>
      <description>Uso básico # Las opciones del programa Boost proporcionan una manera simple y segura de analizar y manejar los argumentos de la línea de comandos.
#include &amp;lt;boost/program_options.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; int main(int argc, char** argv) { namespace po = boost::program_options; po::variables_map vm; po::options_description desc(&amp;quot;Allowed Options&amp;quot;); // declare arguments desc.add_options() (&amp;quot;name&amp;quot;, po::value&amp;lt;std::string&amp;gt;()-&amp;gt;required(), &amp;quot;Type your name to be greeted!&amp;quot;); // parse arguments and save them in the variable map (vm) po::store(po::parse_command_line(argc, argv, desc), vm); std::cout &amp;lt;&amp;lt; &amp;quot;Hello &amp;quot; &amp;lt;&amp;lt; vm[&amp;quot;name&amp;quot;].</description>
    </item>
    
    <item>
      <title>impulsar la biblioteca de algoritmos de cadena</title>
      <link>https://www.wikiod.com/es/boost/impulsar-la-biblioteca-de-algoritmos-de-cadena/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/impulsar-la-biblioteca-de-algoritmos-de-cadena/</guid>
      <description>Impulsar la documentación sobre algoritmos de cadenas
impulsar::dividir() # #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/algorithm/string.hpp&amp;gt; using namespace std; int main() { // String to split string str = &amp;quot;You&#39;re supposed to see this!|NOT THIS!!!!!!&amp;quot;; // Line container vector&amp;lt;string&amp;gt; lines; // Splits string boost::split(lines, str, boost::is_any_of(&amp;quot;|&amp;quot;), boost::token_compress_on); // Outputs 1 half of the split string cout &amp;lt;&amp;lt; lines.at(0).c_str() &amp;lt;&amp;lt; endl; // Waits for input before program exits cin.get(); return 0; } El siguiente es el programa en psuedocode:</description>
    </item>
    
    <item>
      <title>Marco de acumuladores Boost</title>
      <link>https://www.wikiod.com/es/boost/marco-de-acumuladores-boost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/marco-de-acumuladores-boost/</guid>
      <description>Cálculo de la media y la varianza # #include &amp;lt;iostream&amp;gt; #include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/stats.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/mean.hpp&amp;gt; #include &amp;lt;boost/accumulators/statistics/variance.hpp&amp;gt; int main() { using namespace boost::accumulators; accumulator_set&amp;lt;int, stats&amp;lt;tag::mean, tag::variance&amp;gt;&amp;gt; acc; for(int i = 1; i &amp;lt;= 6; i++) acc(i); std::cout &amp;lt;&amp;lt; &amp;quot;mean=&amp;quot; &amp;lt;&amp;lt; mean(acc) &amp;lt;&amp;lt; &amp;quot;, variance=&amp;quot; &amp;lt;&amp;lt; variance(acc) &amp;lt;&amp;lt; &#39;\n&#39;; // prints &amp;quot;mean=3.5, variance=2.91667&amp;quot; return 0; } </description>
    </item>
    
    <item>
      <title>Proceso de impulso asíncrono</title>
      <link>https://www.wikiod.com/es/boost/proceso-de-impulso-asincrono/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/proceso-de-impulso-asincrono/</guid>
      <description>Usando las 3 tuberías de un proceso secundario de forma asincrónica. # #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;boost/process.hpp&amp;gt; #include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;boost/process/windows.hpp&amp;gt; int Run( const std::string&amp;amp; exeName, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; args, ///&amp;lt; could also be UTF-16 for Windows const std::string&amp;amp; input, ///&amp;lt; [in] data for stdin std::string&amp;amp; output, ///&amp;lt; [out] data from stdout std::string&amp;amp; error ///&amp;lt; [out] data from stderr ) { using namespace boost; asio::io_service ios; // stdout setup // std::vector&amp;lt;char&amp;gt; vOut(128 &amp;lt;&amp;lt; 10); // that worked well for my decoding app.</description>
    </item>
    
    <item>
      <title>BOOST- Compara imágenes usando OpevCV</title>
      <link>https://www.wikiod.com/es/boost/boost--compara-imagenes-usando-opevcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/boost/boost--compara-imagenes-usando-opevcv/</guid>
      <description>Esta documentación explica cómo se puede probar y comparar una imagen externa con la imagen de salida de OpenCV. Por ejemplo, para comparar dos imágenes borrosas y probar si ambas son iguales, desenfocamos una imagen original en un software externo (utilicé el software WiT Image Processing) o simplemente descargamos cualquier imagen borrosa en línea. Cree un proyecto Win32 OpenCV en Visual Studio. Lea la imagen original como entrada a OpenCV. Desenfoque la imagen original en OpenCV y compárela con la salida 1.</description>
    </item>
    
  </channel>
</rss>

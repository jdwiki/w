<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial simpy on </title>
    <link>https://www.wikiod.com/es/docs/sympy/</link>
    <description>Recent content in Tutorial simpy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sympy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Sympy</title>
      <link>https://www.wikiod.com/es/sympy/primeros-pasos-con-sympy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sympy/primeros-pasos-con-sympy/</guid>
      <description>Instalación de SymPy # La manera más fácil y recomendada de instalar SymPy es instalar Anaconda.
Si ya tiene instalado Anaconda o Miniconda, puede instalar la última versión con conda:
conda install sympy Otra forma de instalar SymPy es usando pip:
pip install sympy Tenga en cuenta que esto podría requerir privilegios de root, por lo que uno podría necesitar realmente
sudo pip install sympy La mayoría de las distribuciones de Linux también ofrecen SymPy en sus repositorios de paquetes.</description>
    </item>
    
    <item>
      <title>Calculo diferencial</title>
      <link>https://www.wikiod.com/es/sympy/calculo-diferencial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sympy/calculo-diferencial/</guid>
      <description>Optimización no lineal restringida # Planteamiento del problema:
Encuentra el mínimo (sobre x, y) de la función f(x,y), sujeto a g(x,y)=0, donde f(x,y) = 2 * x**2 + 3 * y**2 y g(x,y) = x**2 + y* *2 - 4.
Solución: Resolveremos este problema realizando los siguientes pasos:
Especifique la función Lagrangiana para el problema Determinar las condiciones de Karush-Kuhn-Tucker (KKT) Encuentra las tuplas (x,y) que satisfacen las condiciones KKT Determine cuál de estas tuplas (x,y) corresponde al mínimo de f(x,y) Primero, defina las variables de optimización, así como las funciones objetivo y de restricción:</description>
    </item>
    
    <item>
      <title>ecuaciones</title>
      <link>https://www.wikiod.com/es/sympy/ecuaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sympy/ecuaciones/</guid>
      <description>Resolver sistema de ecuaciones lineales # import sympy as sy x1, x2 = sy.symbols(&amp;quot;x1 x2&amp;quot;) equations = [ sy.Eq( 2*x1 + 1*x2 , 10 ), sy.Eq( 1*x1 - 2*x2 , 11 ) ] print sy.solve(equations) # Result: {x1: 31/5, x2: -12/5} Resuelve una sola ecuación # import sympy as sy # Symbols have to be defined before one can use them x = sy.S(&#39;x&#39;) # Definition of the equation to be solved eq=sy.</description>
    </item>
    
    <item>
      <title>solucionadores</title>
      <link>https://www.wikiod.com/es/sympy/solucionadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sympy/solucionadores/</guid>
      <description>A partir de la versión 1.0 de Sympy, quizás lo más importante que se debe entender sobre el uso de sus solucionadores es que &amp;lsquo;solveset se hará cargo de solve ya sea interna o externamente&amp;rsquo;. En este punto, solveset ya debería usarse para resolver ecuaciones univariadas y sistemas de ecuaciones lineales.
Resolviendo una desigualdad univariada # &amp;gt;&amp;gt;&amp;gt; from sympy.solvers.inequalities import solve_univariate_inequality &amp;gt;&amp;gt;&amp;gt; from sympy import var &amp;gt;&amp;gt;&amp;gt; x=var(&#39;x&#39;) &amp;gt;&amp;gt;&amp;gt; solve_univariate_inequality(2*x**2-6&amp;gt;1,x,relational=False) (-oo, -sqrt(14)/2) U (sqrt(14)/2, oo) El parámetro relacional=Falso simplemente indica cómo se deben representar los resultados.</description>
    </item>
    
  </channel>
</rss>

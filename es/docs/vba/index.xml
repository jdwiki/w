<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de VBA on </title>
    <link>https://www.wikiod.com/es/docs/vba/</link>
    <description>Recent content in Tutorial de VBA on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/vba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con VBA</title>
      <link>https://www.wikiod.com/es/vba/comenzando-con-vba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/comenzando-con-vba/</guid>
      <description>Acceso al Editor de Visual Basic en Microsoft Office # Puede abrir el editor de VB en cualquiera de las aplicaciones de Microsoft Office presionando Alt+F11 o yendo a la pestaña Desarrollador y haciendo clic en el botón &amp;ldquo;Visual Basic&amp;rdquo;. Si no ve la pestaña Desarrollador en la cinta, verifique si está habilitada.
De forma predeterminada, la pestaña Desarrollador está deshabilitada. Para habilitar la pestaña Desarrollador, vaya a Archivo -&amp;gt; Opciones, seleccione Personalizar cinta en la lista de la izquierda.</description>
    </item>
    
    <item>
      <title>Objeto Scripting.Dictionary</title>
      <link>https://www.wikiod.com/es/vba/objeto-scriptingdictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/objeto-scriptingdictionary/</guid>
      <description>Debe agregar Microsoft Scripting Runtime al proyecto de VBA a través del comando Herramientas → Referencias de VBE para implementar el enlace anticipado del objeto Diccionario de scripting. Esta referencia de biblioteca se lleva con el proyecto; no es necesario volver a hacer referencia cuando el proyecto de VBA se distribuye y se ejecuta en otra computadora.
Propiedades y Métodos # Un objeto Diccionario de secuencias de comandos almacena información en pares de clave/elemento.</description>
    </item>
    
    <item>
      <title>Declaración de variables</title>
      <link>https://www.wikiod.com/es/vba/declaracion-de-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/declaracion-de-variables/</guid>
      <description>Tipo de sugerencias # Las sugerencias de tipo están fuertemente desaconsejadas. Existen y están documentados aquí por razones históricas y de compatibilidad con versiones anteriores. Debería usar la sintaxis As [DataType] en su lugar.
Public Sub ExampleDeclaration() Dim someInteger% &#39;% Equivalent to &amp;quot;As Integer&amp;quot; Dim someLong&amp;amp; &#39;&amp;amp; Equivalent to &amp;quot;As Long&amp;quot; Dim someDecimal@ &#39;@ Equivalent to &amp;quot;As Currency&amp;quot; Dim someSingle! &#39;! Equivalent to &amp;quot;As Single&amp;quot; Dim someDouble# &#39;# Equivalent to &amp;quot;As Double&amp;quot; Dim someString$ &#39;$ Equivalent to &amp;quot;As String&amp;quot; Dim someLongLong^ &#39;^ Equivalent to &amp;quot;As LongLong&amp;quot; in 64-bit VBA hosts End Sub Las sugerencias de tipo reducen significativamente la legibilidad del código y fomentan una [Notación húngara] heredada (https://en.</description>
    </item>
    
    <item>
      <title>Atributos</title>
      <link>https://www.wikiod.com/es/vba/atributos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/atributos/</guid>
      <description>Sintaxis # Atributo VB_Name = &amp;ldquo;ClassOrModuleName&amp;rdquo; Atributo VB_GlobalNameSpace = False &amp;rsquo; Ignorado Atributo VB_Creatable = Falso &amp;rsquo; Ignorado Atributo VB_PredeclaredId = {Verdadero | Falso} Atributo VB_Exposed = {Verdadero | Falso} Atributo variableName.VB_VarUserMemId = 0 &amp;rsquo; Cero indica que este es el miembro predeterminado de la clase. Attribute variableName.VB_VarDescription = &amp;ldquo;alguna cadena&amp;rdquo; &amp;rsquo; Agrega el texto a la información del Explorador de objetos para esta variable. Attribute procName.VB_Description = &amp;ldquo;alguna cadena&amp;rdquo; &amp;rsquo; Agrega el texto a la información del Explorador de objetos para el procedimiento.</description>
    </item>
    
    <item>
      <title>CreateObject frente a GetObject</title>
      <link>https://www.wikiod.com/es/vba/createobject-frente-a-getobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/createobject-frente-a-getobject/</guid>
      <description>En su forma más simple, CreateObject crea una instancia de un objeto mientras que GetObject obtiene una instancia existente de un objeto. Determinar si se puede crear u obtener un objeto dependerá de su [propiedad de creación de instancias](https://msdn.microsoft.com/en-us/library/aa242107%28v=vs.60%29.aspx?f=255&amp;amp;MSPPError= -2147217396). Algunos objetos son de uso único (p. ej., WMI) y no se pueden crear si ya existen. Otros objetos (p. ej., Excel) son de uso múltiple y permiten que se ejecuten varias instancias a la vez.</description>
    </item>
    
    <item>
      <title>Convenciones de nombres</title>
      <link>https://www.wikiod.com/es/vba/convenciones-de-nombres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/convenciones-de-nombres/</guid>
      <description>Nombres de variables # Las variables contienen datos. Nómbrelos según para qué se usan, no según su tipo de datos o alcance, usando un sustantivo. Si se siente obligado a numerar sus variables (por ejemplo, cosa1, cosa2, cosa3), entonces considere usar una estructura de datos adecuada en su lugar (por ejemplo, una matriz, una Colección o un Diccionario).
Nombres de variables que representan un conjunto iterable de valores, p. una matriz, una &amp;lsquo;Colección&amp;rsquo;, un &amp;lsquo;Diccionario&amp;rsquo; o un &amp;lsquo;Rango&amp;rsquo; de celdas debe estar en plural.</description>
    </item>
    
    <item>
      <title>Tipos de datos y límites</title>
      <link>https://www.wikiod.com/es/vba/tipos-de-datos-y-limites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/tipos-de-datos-y-limites/</guid>
      <description>Variante # Dim Value As Variant &#39;Explicit Dim Value &#39;Implicit Una variante es un tipo de datos COM que se usa para almacenar e intercambiar valores de tipos arbitrarios, y cualquier otro tipo en VBA se puede asignar a una variante. Las variables declaradas sin un tipo explícito especificado por As [Type] tienen como valor predeterminado Variant.
Las variantes se almacenan en la memoria como una [estructura VARIANT] (https://msdn.microsoft.com/en-us/library/windows/desktop/ms221627(v=vs.85).aspx) que consta de un descriptor de tipo de byte (VARTYPE) seguido de 6 bytes reservados y luego un área de datos de 8 bytes.</description>
    </item>
    
    <item>
      <title>Scripting.FileSystemObject</title>
      <link>https://www.wikiod.com/es/vba/scriptingfilesystemobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/scriptingfilesystemobject/</guid>
      <description>Recuperar solo la ruta de una ruta de archivo # El método GetParentFolderName devuelve la carpeta principal de cualquier ruta. Si bien esto también se puede usar con carpetas, podría decirse que es más útil para extraer la ruta de una ruta de archivo absoluta:
Dim fso As New Scripting.FileSystemObject Debug.Print fso.GetParentFolderName(&amp;quot;C:\Users\Me\My Documents\SomeFile.txt&amp;quot;) Imprime C:\Users\Me\My Documents
Tenga en cuenta que el separador de ruta final no está incluido en la cadena devuelta.</description>
    </item>
    
    <item>
      <title>Manejo de errores</title>
      <link>https://www.wikiod.com/es/vba/manejo-de-errores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/manejo-de-errores/</guid>
      <description>Evitar condiciones de error # Cuando ocurre un error de tiempo de ejecución, un buen código debe manejarlo. La mejor estrategia de manejo de errores es escribir código que verifique las condiciones de error y simplemente evite ejecutar código que resulte en un error de tiempo de ejecución.
Un elemento clave para reducir los errores de tiempo de ejecución es escribir pequeños procedimientos que hacen una cosa. Cuantas menos razones tengan los procedimientos para fallar, más fácil será depurar el código en su conjunto.</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/vba/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vba/arreglos/</guid>
      <description>Matrices multidimensionales # Matrices multidimensionales # Como su nombre lo indica, los arreglos multidimensionales son arreglos que contienen más de una dimensión, generalmente dos o tres, pero pueden tener hasta 32 dimensiones.
Una matriz múltiple funciona como una matriz con varios niveles, por ejemplo, una comparación entre una, dos y tres dimensiones.
One Dimension es su matriz típica, parece una lista de elementos.
Dim 1D(3) as Variant *1D - Visually* (0) (1) (2) Dos dimensiones se verían como una cuadrícula de Sudoku o una hoja de Excel, al inicializar la matriz, definiría cuántas filas y columnas tendría la matriz.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Xamarin on </title>
    <link>https://www.wikiod.com/es/docs/xamarin/</link>
    <description>Recent content in Tutorial de Xamarin on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/xamarin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con xamarin</title>
      <link>https://www.wikiod.com/es/xamarin/primeros-pasos-con-xamarin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin/primeros-pasos-con-xamarin/</guid>
      <description>Instalación de Xamarin Studio en OS X # El primer paso para comenzar el desarrollo de Xamarin en una máquina con OS X es descargar e instalar la versión Xamarin Studio Community desde el sitio web oficial. Se deben completar algunos campos para descargar el instalador como se muestra en la imagen a continuación.
El instalador unificado de Xamarin se encarga de identificar e instalar todos los componentes necesarios que no son de Xamarin (por ejemplo, SDK de Android) además de Xamarin.</description>
    </item>
    
    <item>
      <title>Código compartido entre proyectos</title>
      <link>https://www.wikiod.com/es/xamarin/codigo-compartido-entre-proyectos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin/codigo-compartido-entre-proyectos/</guid>
      <description>El patrón del puente # El patrón Puente es uno de los patrones de diseño de Inversión de Control más básicos. Para Xamarin, este patrón se usa para hacer referencia a código dependiente de la plataforma desde un contexto independiente de la plataforma. Por ejemplo: usar AlertDialog de Android desde una biblioteca de clases portátil o formularios de Xamarin. Ninguno de esos contextos sabe qué es un objeto AlertDialog, por lo que debe envolverlo en un cuadro para que lo usen.</description>
    </item>
    
    <item>
      <title>Validación de objetos por Anotaciones</title>
      <link>https://www.wikiod.com/es/xamarin/validacion-de-objetos-por-anotaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xamarin/validacion-de-objetos-por-anotaciones/</guid>
      <description>mvc.net introduce anotaciones de datos para la validación del modelo. Esto también se puede hacer en Xamarin
Ejemplo sencillo # Agregue el paquete nuget System.ComponentModel.Annotations
Defina una clase:
public class BankAccount { public enum AccountType { Saving, Current } [Required(ErrorMessage=&amp;quot;First Name Required&amp;quot;)] [MaxLength(15,ErrorMessage=&amp;quot;First Name should not more than 1`5 character&amp;quot;)] [MinLength(3,ErrorMessage=&amp;quot;First Name should be more than 3 character&amp;quot;)] public string AccountHolderFirstName { get; set; } [Required(ErrorMessage=&amp;quot;Last Name Required&amp;quot;)] [MaxLength(15,ErrorMessage=&amp;quot;Last Name should not more than 1`5 character&amp;quot;)] [MinLength(3,ErrorMessage=&amp;quot;Last Name should be more than 3 character&amp;quot;)] public string AccountHolderLastName { get; set; } [Required] [RegularExpression(&amp;quot;^[0-9]+$&amp;quot;, ErrorMessage = &amp;quot;Only Number allowed in AccountNumber&amp;quot;)] public string AccountNumber { get; set; } public AccountType AcType { get; set; } } Defina un validador:</description>
    </item>
    
  </channel>
</rss>

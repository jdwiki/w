<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de lienzo html5 on </title>
    <link>https://www.wikiod.com/es/docs/html5-canvas/</link>
    <description>Recent content in Tutorial de lienzo html5 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/html5-canvas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con html5-canvas</title>
      <link>https://www.wikiod.com/es/html5-canvas/primeros-pasos-con-html5-canvas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/primeros-pasos-con-html5-canvas/</guid>
      <description>Detectar la posición del mouse en el lienzo # Este ejemplo mostrará cómo obtener la posición del mouse en relación con el lienzo, de modo que (0,0) sea la esquina superior izquierda del lienzo HTML5. e.clientX y e.clientY obtendrán las posiciones del mouse en relación con la parte superior del documento, para cambiar esto para que se base en la parte superior del lienzo, restamos las posiciones izquierda y derecha de la lienzo del cliente X e Y.</description>
    </item>
    
    <item>
      <title>Animación</title>
      <link>https://www.wikiod.com/es/html5-canvas/animacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/animacion/</guid>
      <description>Use requestAnimationFrame() NO setInterval() para bucles de animación # requestAnimationFrame es similar a setInterval, pero tiene estas importantes mejoras:
El código de animación está sincronizado con las actualizaciones de la pantalla para mayor eficiencia. El código claro + redibujado está programado, pero no se ejecuta de inmediato. El navegador ejecutará el código borrar + redibujar solo cuando la pantalla esté lista para actualizarse. Esta sincronización con el ciclo de actualización aumenta el rendimiento de su animación al darle a su código el tiempo más disponible para completarse.</description>
    </item>
    
    <item>
      <title>Manipulación de píxeles con getImageData y putImageData</title>
      <link>https://www.wikiod.com/es/html5-canvas/manipulacion-de-pixeles-con-getimagedata-y-putimagedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/manipulacion-de-pixeles-con-getimagedata-y-putimagedata/</guid>
      <description>Introducción a &amp;ldquo;context.getImageData&amp;rdquo; # Html5 Canvas le brinda la capacidad de buscar y cambiar el color de cualquier píxel en el lienzo.
Puede utilizar la manipulación de píxeles de Canvas para:
Cree un selector de color para una imagen o seleccione un color en una rueda de colores. Cree filtros de imagen complejos como desenfoque y detección de bordes. Vuelva a colorear cualquier parte de una imagen a nivel de píxel (si usa HSL, incluso puede volver a colorear una imagen mientras conserva la iluminación y la saturación importantes para que el resultado no se vea como si alguien hubiera puesto pintura en la imagen).</description>
    </item>
    
    <item>
      <title>Diseño de respuesta</title>
      <link>https://www.wikiod.com/es/html5-canvas/diseno-de-respuesta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/diseno-de-respuesta/</guid>
      <description>Creando un lienzo responsivo de página completa # Código de inicio para crear y eliminar un lienzo de página completa que responde a eventos de cambio de tamaño a través de javascript.
var canvas; // Global canvas reference var ctx; // Global 2D context reference // Creates a canvas function createCanvas () { const canvas = document.createElement(&amp;quot;canvas&amp;quot;); canvas.style.position = &amp;quot;absolute&amp;quot;; // Set the style canvas.style.left = &amp;quot;0px&amp;quot;; // Position in top left canvas.</description>
    </item>
    
    <item>
      <title>Tipos de medios y el lienzo</title>
      <link>https://www.wikiod.com/es/html5-canvas/tipos-de-medios-y-el-lienzo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/tipos-de-medios-y-el-lienzo/</guid>
      <description>Este tema es para cubrir los diversos tipos de medios y cómo se pueden usar con el lienzo en la interfaz 2D.
Los tipos de medios tienen categorías genéricas y específicas de formato
Tipos de medios
Animaciones Vídeos Imágenes imágenes de alta definición Imagen vectorial Imágenes animadas Formatos de medios
Jpg/Jpeg Png -Gif -SVG -M-JPEG -Webm Webp Imágenes
Existe una amplia variedad de formatos de imagen compatibles con los navegadores, aunque ningún navegador los admite todos.</description>
    </item>
    
    <item>
      <title>composición</title>
      <link>https://www.wikiod.com/es/html5-canvas/composicion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/composicion/</guid>
      <description>Dibuja detrás de las formas existentes con &amp;ldquo;destino sobre&amp;rdquo; # context.globalCompositeOperation = &amp;quot;destination-over&amp;quot; La composición de &amp;ldquo;destino sobre&amp;rdquo; coloca el nuevo dibujo bajo los dibujos existentes.
context.drawImage(rainy,0,0); context.globalCompositeOperation=&#39;destination-over&#39;; // sunny UNDER rainy context.drawImage(sunny,0,0); Borrar formas existentes con &amp;ldquo;destination-out&amp;rdquo; # context.globalCompositeOperation = &amp;quot;destination-out&amp;quot; La composición de &amp;ldquo;destino fuera&amp;rdquo; utiliza nuevas formas para borrar los dibujos existentes.
La nueva forma en realidad no se dibuja, solo se usa como un &amp;ldquo;cortador de galletas&amp;rdquo; para borrar los píxeles existentes.</description>
    </item>
    
    <item>
      <title>Imágenes</title>
      <link>https://www.wikiod.com/es/html5-canvas/imagenes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/imagenes/</guid>
      <description>Recorte de imagen usando lienzo # Este ejemplo muestra una función de recorte de imagen simple que toma una imagen y las coordenadas de recorte y devuelve la imagen recortada.
function cropImage(image, croppingCoords) { var cc = croppingCoords; var workCan = document.createElement(&amp;quot;canvas&amp;quot;); // create a canvas workCan.width = Math.floor(cc.width); // set the canvas resolution to the cropped image size workCan.height = Math.floor(cc.height); var ctx = workCan.getContext(&amp;quot;2d&amp;quot;); // get a 2D rendering interface ctx.</description>
    </item>
    
    <item>
      <title>Texto</title>
      <link>https://www.wikiod.com/es/html5-canvas/texto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/texto/</guid>
      <description>Dibujar texto # Dibujar en lienzo no se limita solo a formas e imágenes. También puede dibujar texto en el lienzo.
Para dibujar texto en el lienzo, obtenga una referencia al lienzo y luego llame al método fillText en el contexto.
var canvas = document.getElementById(&#39;canvas&#39;); var ctx = canvas.getContext(&#39;2d&#39;); ctx.fillText(&amp;quot;My text&amp;quot;, 0, 0); Los tres argumentos requeridos que se pasan a fillText son:
El texto que le gustaría mostrar La posición horizontal (eje x) La posición vertical (eje y) Además, hay un cuarto argumento opcional, que puede usar para especificar el ancho máximo de su texto en píxeles.</description>
    </item>
    
    <item>
      <title>Navegando a lo largo de un Camino</title>
      <link>https://www.wikiod.com/es/html5-canvas/navegando-a-lo-largo-de-un-camino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/navegando-a-lo-largo-de-un-camino/</guid>
      <description>Encuentra el punto en la curva # Este ejemplo encuentra un punto en una curva bezier o cúbica en posición donde posición es la unidad de distancia en la curva 0 &amp;lt;= posición &amp;lt;= 1. La posición se fija al rango, por lo tanto, si los valores &amp;lt; 0 o &amp;gt; 1 se pasan se establecerán 0,1 respectivamente.
Pasa la función 6 coordenadas para bezier cuadrática u 8 para cúbica.</description>
    </item>
    
    <item>
      <title>Colisiones e Intersecciones</title>
      <link>https://www.wikiod.com/es/html5-canvas/colisiones-e-intersecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/html5-canvas/colisiones-e-intersecciones/</guid>
      <description>¿Están colisionando 2 círculos? # // circle objects: { x:, y:, radius: } // return true if the 2 circles are colliding // c1 and c2 are circles as defined above function CirclesColliding(c1,c2){ var dx=c2.x-c1.x; var dy=c2.y-c1.y; var rSum=c1.radius+c2.radius; return(dx*dx+dy*dy&amp;lt;=rSum*rSum); } ¿Están colisionando 2 rectángulos? # // rectangle objects { x:, y:, width:, height: } // return true if the 2 rectangles are colliding // r1 and r2 are rectangles as defined above function RectsColliding(r1,r2){ return !</description>
    </item>
    
  </channel>
</rss>

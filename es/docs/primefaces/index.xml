<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de caras primarias on </title>
    <link>https://www.wikiod.com/es/docs/primefaces/</link>
    <description>Recent content in Tutorial de caras primarias on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/primefaces/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con las caras principales</title>
      <link>https://www.wikiod.com/es/primefaces/primeros-pasos-con-las-caras-principales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/primefaces/primeros-pasos-con-las-caras-principales/</guid>
      <description>Instalación de PrimeFaces # PrimeFaces se puede utilizar en todas las aplicaciones web basadas en Java Server Faces (versión 2.x) que se ejecutan en Servlet Containers (por ejemplo, Wildlfy o Tomcat o GlassFish).
Hay varias formas de agregar PrimeFaces a su aplicación.
Manualmente # Descargue primefaces-{version}.jar y agréguelo a su classpath.
Experto # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.primefaces&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;primefaces&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Para versiones anteriores (3.5 y anteriores), también debe agregar el repositorio PrimeFaces:</description>
    </item>
    
    <item>
      <title>widgetVar</title>
      <link>https://www.wikiod.com/es/primefaces/widgetvar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/primefaces/widgetvar/</guid>
      <description>widgetVar es el nombre de las variables del lado del cliente que contienen todos los widgets PF de JavaScript en la página. Hay una gran introducción/tutorial para usar el componente widgetVar escrito por Hatem Alimam llamado Intro to PrimeFaces widgetVar
Uso básico de widgetVar # &amp;lt;h:form&amp;gt; &amp;lt;p:dialog widgetVar=&amp;quot;myDialog&amp;quot;&amp;gt;&amp;lt;/p:dialog&amp;gt; &amp;lt;p:commandButton onclick=&amp;quot;PF(&#39;myDialog&#39;).show();&amp;quot; /&amp;gt; &amp;lt;/h:form&amp;gt; Tabla de datos # [datatable.js][datatable] en el repositorio de GitHub
Función Detalles bindPaginator: función () Vincula el detector de eventos de cambio y representa el paginador loadLiveRows: función () Carga filas sobre la marcha cuando se desplaza en vivo paginar: función(nuevoEstado) Paginación Ajax buscarPáginaSiguiente: función(nuevoEstado) Carga la página siguiente de forma asíncrona para mantenerla en el estado de visualización y actualiza el estado de visualización ordenar: función (encabezado de columna, orden, multi) tipo Ajax filtro: función() Filtro Ajax onRowClick: función (evento, elemento de fila, silencioso) onRowDblclick: función(evento, fila) highlightRow: función (fila) Destaca la fila como seleccionada unhighlightRow: función (fila) Borra las imágenes seleccionadas fireRowSelectEvent: function(rowKey, BehaviorEvent) Envía un rowSelectEvent en el lado del servidor para invocar un rowSelectListener si está definido fireRowUnselectEvent: function(rowKey, BehaviorEvent) Envía un rowUnselectEvent en el lado del servidor para invocar un rowUnselectListener si está definido selectRowWithRadio: function(radio) Selecciona la fila correspondiente de una selección de columna basada en radio unselectAllRows: function() selectAllRowsOnPage: function() unselectAllRowsOnPage: function() selectAllRows: function() alternar Expansión: función (alternar) Expande una fila para mostrar contenido detallado collapseRow: función(fila) collapseAllRows: función () getExpandedRows: función() switchToRowEdit: función (fila) showRowEditors: función (fila) saveRowEdit: function(rowEditor) Guarda la fila editada cancelRowEdit: function(rowEditor) updateRow: función (fila, contenido) Fila de actualizaciones con contenido dado selección clara: función () Borra el estado de selección limpiarFiltros: función() Borra los filtros de la tabla removeSelection: function(rowIndex) Eliminar el índice de fila dado de la selección añadirSelección: función(filaTecla) Agrega la clave de fila dada a la selección si aún no existe isSelected: function(rowKey) Encuentra si la clave de fila dada está en la selección guardarOrdenColumna: función() estáVacío: función() Devuelve si hay algún dato mostrado getSelectedRowsCount: función() </description>
    </item>
    
    <item>
      <title>Hola Primefaces</title>
      <link>https://www.wikiod.com/es/primefaces/hola-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/primefaces/hola-primefaces/</guid>
      <description>Hola Primefaces # Esta es una aplicación simple con primefaces, es una página de inicio de sesión:
1-Configuración de web.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app version=&amp;quot;3.1&amp;quot; xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;quot;&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;javax.faces.PROJECT_STAGE&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;Development&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;javax.faces.webapp.FacesServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;Faces Servlet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.xhtml&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;session-config&amp;gt; &amp;lt;session-timeout&amp;gt; 30 &amp;lt;/session-timeout&amp;gt; &amp;lt;/session-config&amp;gt; &amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt;index.xhtml&amp;lt;/welcome-file&amp;gt; &amp;lt;/welcome-file-list&amp;gt; &amp;lt;/web-app&amp;gt; 2-Crear Bean gestionado:
import javax.faces.application.FacesMessage; import javax.faces.bean.ManagedBean; import javax.faces.bean.RequestScoped; import javax.faces.context.FacesContext; @ManagedBean @RequestScoped public class LoginBean { private String username; private String password; public LoginBean() { } public void login() { //Simple login if (!</description>
    </item>
    
    <item>
      <title>Cómo usar el escaparate de Primefaces</title>
      <link>https://www.wikiod.com/es/primefaces/como-usar-el-escaparate-de-primefaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/primefaces/como-usar-el-escaparate-de-primefaces/</guid>
      <description>El ejemplo del componente Primefaces panelGrid en su Showcase. # El escaparate de los componentes de Primefaces se puede encontrar aquí y la documentación está aquí
Frontend debe guardarse como un archivo XHTML. Este archivo puede contener JSF, JSTL, JSP, HTML, CSS, jQuery, javaScript y su marco y más tecnologías front-end. Por favor, no mezcle las tecnologías JSF y JSP. No es un buen enfoque.
Tenga en cuenta que debe definir espacios de nombres como c, f, h, p, pe, etc.</description>
    </item>
    
  </channel>
</rss>

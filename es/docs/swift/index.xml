<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de lenguaje Swift on </title>
    <link>https://www.wikiod.com/es/docs/swift/</link>
    <description>Recent content in Tutorial de lenguaje Swift on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Swift</title>
      <link>https://www.wikiod.com/es/swift/primeros-pasos-con-el-lenguaje-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/primeros-pasos-con-el-lenguaje-swift/</guid>
      <description>Tu primer programa Swift # Escribe tu código en un archivo llamado hello.swift:
print(&amp;quot;Hello, world!&amp;quot;) Para compilar y ejecutar un script en un solo paso, use swift desde la terminal (en un directorio donde se encuentra este archivo): Para iniciar una terminal, presione CTRL+ALT+T en Linux, o búsquelo en Launchpad en macOS. Para cambiar de directorio, ingrese cddirectory_name (o cd .. para regresar)
$ swift hola.swift ¡Hola, mundo! Un compilador es un programa de computadora (o un conjunto de programas) que transforma el código fuente escrito en un lenguaje de programación (el lenguaje de origen) en otro lenguaje de computadora (el lenguaje de destino), y este último a menudo tiene una forma binaria conocido como código objeto.</description>
    </item>
    
    <item>
      <title>Cadenas y caracteres</title>
      <link>https://www.wikiod.com/es/swift/cadenas-y-caracteres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/cadenas-y-caracteres/</guid>
      <description>Sintaxis # String.characters // Devuelve una matriz de los caracteres en la cadena String.characters.count // Devuelve el número de caracteres String.utf8 // A String.UTF8View, devuelve los puntos de caracteres UTF-8 en la cadena String.utf16 // A String.UTF16View, devuelve los puntos de caracteres UTF-16 en la cadena String.unicodeScalars // A String.UnicodeScalarView, devuelve los puntos de caracteres UTF-32 en la cadena String.isEmpty // Devuelve verdadero si la cadena no contiene ningún texto String.</description>
    </item>
    
    <item>
      <title>Enumeraciones</title>
      <link>https://www.wikiod.com/es/swift/enumeraciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/enumeraciones/</guid>
      <description>Al igual que las estructuras y las clases, las enumeraciones son tipos de valor y se copian en lugar de referenciarse cuando se transmiten.
Para obtener más información acerca de las enumeraciones, consulte El lenguaje de programación Swift.
Enumeraciones básicas # Un enum proporciona un conjunto de valores relacionados:
enum Direction { case up case down case left case right } enum Direction { case up, down, left, right } Los valores de enumeración se pueden usar por su nombre completo, pero puede omitir el nombre del tipo cuando se puede inferir:</description>
    </item>
    
    <item>
      <title>Leer y escribir JSON</title>
      <link>https://www.wikiod.com/es/swift/leer-y-escribir-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/leer-y-escribir-json/</guid>
      <description>Sintaxis # NSJSONSerialization.JSONObjectWithData(jsonData, opciones: NSJSONReadingOptions) // Devuelve un objeto de jsonData. Este método arroja fallas. NSJSONSerialization.dataWithJSONObject(jsonObject, opciones: NSJSONWritingOptions) // Devuelve NSData de un objeto JSON. Pase NSJSONWritingOptions.PrettyPrinted en opciones para una salida que sea más legible. Serialización, codificación y decodificación de JSON con Apple Foundation y Swift Standard Library # La clase JSONSerialization está integrada en el marco Foundation de Apple.
Leer JSON # La función JSONObjectWithData toma NSData y devuelve AnyObject.</description>
    </item>
    
    <item>
      <title>cifrado AES</title>
      <link>https://www.wikiod.com/es/swift/cifrado-aes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/cifrado-aes/</guid>
      <description>Cifrado AES en modo CBC con IV aleatorio (Swift 3.0) # El iv se antepone a los datos cifrados.
aesCBC128Encrypt creará un IV aleatorio y se antepondrá al código cifrado. aesCBC128Decrypt usará el IV prefijado durante el descifrado.
Las entradas son los datos y la clave son los objetos de datos. Si se requiere un formulario codificado como Base64, si es necesario, convierta a y/o desde el método de llamada.</description>
    </item>
    
    <item>
      <title>Reflexión</title>
      <link>https://www.wikiod.com/es/swift/reflexion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/reflexion/</guid>
      <description>Sintaxis # Mirror(reflejando: instancia) // Inicializa un espejo con el sujeto a reflejar mirror.displayStyle // Estilo de visualización utilizado para los parques infantiles de Xcode mirror.description // Representación textual de esta instancia, consulte CustomStringConvertible mirror.subjectType // Devuelve el tipo de sujeto que se refleja mirror.superclassMirror // Devuelve el espejo de la superclase del sujeto que se refleja Observaciones generales: Un Mirror es una estructura utilizada en la introspección de un objeto en Swift.</description>
    </item>
    
    <item>
      <title>protocolos</title>
      <link>https://www.wikiod.com/es/swift/protocolos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/protocolos/</guid>
      <description>Los protocolos son una forma de especificar cómo usar un objeto. Describen un conjunto de propiedades y métodos que debe proporcionar una clase, estructura o enumeración, aunque los protocolos no imponen restricciones en la implementación.
Un protocolo Swift es una colección de requisitos que deben implementar los tipos conformes. Luego, el protocolo se puede usar en la mayoría de los lugares donde se espera un tipo, por ejemplo, matrices y requisitos genéricos.</description>
    </item>
    
    <item>
      <title>Opcionales</title>
      <link>https://www.wikiod.com/es/swift/opcionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/opcionales/</guid>
      <description>“Un valor opcional contiene un valor o contiene cero para indicar que falta un valor”
Extracto de: Apple Inc. &amp;ldquo;El lenguaje de programación Swift (edición Swift 3.1)&amp;rdquo;. iBooks. https://itun.es/us/k5SW7.l
Los casos de uso opcionales básicos incluyen: para una constante (let), el uso de un opcional dentro de un ciclo (if-let), el desenvolvimiento seguro de un valor opcional dentro de un método (guard-let) y como parte de los bucles de conmutación (case-let ), por defecto a un valor si es nulo, usando el operador coalesce (?</description>
    </item>
    
    <item>
      <title>Método Swizzling</title>
      <link>https://www.wikiod.com/es/swift/metodo-swizzling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/metodo-swizzling/</guid>
      <description>Al usar el método swizzling en Swift, hay dos requisitos que deben cumplir sus clases/métodos:
Tu clase debe extender NSObject Las funciones que desea swizzle deben tener el atributo dynamic Para obtener una explicación completa de por qué es necesario, consulte Uso de Swift con Cocoa y Objective-C:
Requiere Despacho Dinámico
Mientras que el atributo @objc expone su API Swift al Objective-C tiempo de ejecución, no garantiza el envío dinámico de una propiedad, método, subíndice, o inicializador.</description>
    </item>
    
    <item>
      <title>Cierres</title>
      <link>https://www.wikiod.com/es/swift/cierres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swift/cierres/</guid>
      <description>Sintaxis # var closureVar: (&amp;lt;parameters&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) // Como variable o tipo de propiedad typealias ClosureType = (&amp;lt;parámetros&amp;gt;) -&amp;gt; (&amp;lt;returnType&amp;gt;) { [&amp;lt;captureList&amp;gt;] (&amp;lt;parameters&amp;gt;) &amp;lt;throws-ness&amp;gt; -&amp;gt; &amp;lt;returnType&amp;gt; in &amp;lt;statements&amp;gt; } // Sintaxis de cierre completa Para obtener más información sobre los cierres de Swift, consulte la documentación de Apple.
Conceptos básicos de cierre # Closures (también conocido como bloques o lambdas) son piezas de código que se pueden almacenar y pasar dentro de su programa.</description>
    </item>
    
  </channel>
</rss>

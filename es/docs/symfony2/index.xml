<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Symfony2 on </title>
    <link>https://www.wikiod.com/es/docs/symfony2/</link>
    <description>Recent content in Tutorial de Symfony2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/symfony2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Symfony2</title>
      <link>https://www.wikiod.com/es/symfony2/primeros-pasos-con-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/primeros-pasos-con-symfony2/</guid>
      <description>Instalación o Configuración # Symfony Framework: construido con componentes de Symfony, es uno de los marcos PHP líderes que se utilizan para crear sitios web y aplicaciones web robustos.
Symfony se puede instalar rápidamente a través de dos formas recomendadas.
La documentación oficial recomienda instalar el marco a través del Symfony Installer which is a tiny php application that is installed once on the local system that helps in downloading the framework and setting up the configuration of the framework.</description>
    </item>
    
    <item>
      <title>Creación de servicios web con Symfony 2.8</title>
      <link>https://www.wikiod.com/es/symfony2/creacion-de-servicios-web-con-symfony-28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/creacion-de-servicios-web-con-symfony-28/</guid>
      <description>Trabajar con API RESTFul # La transferencia de estado representacional (REST) ​​es un estilo arquitectónico utilizado para el desarrollo web, introducido y definido en 2000 por Roy Fielding.
Véalo en wiki: REST wiki
Se basa en el protocolo HTTP (HTTP en Wiki), solicitudes HTTP (GET, POST, PATCH, DELETE&amp;hellip;) / códigos de respuesta (404, 400, 200, 201, 500&amp;hellip;) y estructura de cuerpos .
Esta es una excelente manera de exponer sus datos a otro sistema en Internet.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/symfony2/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/enrutamiento/</guid>
      <description>Devolver una respuesta 404 # Las respuestas 404 se devuelven cuando no se encuentra un recurso en el servidor; en Symfony, este estado se puede crear lanzando una excepción NotFoundHttpException. Para evitar una declaración use adicional dentro de un controlador, use createNotFoundException() proporcionada por la clase Controller
&amp;lt;?php namespace Bundle\Controller; use Symfony\Bundle\FrameworkBundle\Controller\Controller; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; class TestController extends Controller { /** * @Route(&amp;quot;/{id}&amp;quot;, name=&amp;quot;test&amp;quot;) * Recommended to avoid template() as it has a lot of background processing.</description>
    </item>
    
    <item>
      <title>Relaciones de entidad de doctrina</title>
      <link>https://www.wikiod.com/es/symfony2/relaciones-de-entidad-de-doctrina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/relaciones-de-entidad-de-doctrina/</guid>
      <description>Uno a muchos, bidireccional # Este mapeo bidireccional requiere el atributo mappedBy en la asociación OneToMany y el atributo inversedBy en la asociación ManyToOne.
Una relación bidireccional tiene tanto un lado propietario como el inverso. Las relaciones OneToMany pueden usar tablas de unión, por lo que debe especificar un lado propietario. La asociación OneToMany es siempre el lado inverso de una asociación bidireccional.
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity * @ORM\Table(name=&amp;quot;users&amp;quot;) */ class User { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;username&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $username; /** * @var Group|null * * @ORM\ManyToOne(targetEntity=&amp;quot;AppBundle\Entity\Group&amp;quot;, inversedBy=&amp;quot;users&amp;quot;) * @ORM\JoinColumn(name=&amp;quot;group_id&amp;quot;, referencedColumnName=&amp;quot;id&amp;quot;, nullable=true) */ protected $group; /** * @param string $username * @param Group|null $group */ public function __construct($username, Group $group = null) { $this-&amp;gt;username = $username; $this-&amp;gt;group = $group; } /** * Set username * * @param string $username */ public function setUsername($username) { $this-&amp;gt;username = $username; } /** * Get username * * @return string */ public function getUsername() { return $this-&amp;gt;username; } /** * @param Group|null $group */ public function setGroup(Group $group = null) { if($this-&amp;gt;group !</description>
    </item>
    
    <item>
      <title>Servicios Symfony</title>
      <link>https://www.wikiod.com/es/symfony2/servicios-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/servicios-symfony/</guid>
      <description>Cómo declarar, escribir y usar un servicio simple en Symfony2 # Declaración de servicios:
# src/Acme/YourBundle/Resources/config/services.yml services: my_service: class: Acme\YourBundle\Service\MyService arguments: [&amp;quot;@doctrine&amp;quot;, &amp;quot;%some_parameter%&amp;quot;, &amp;quot;@another_service&amp;quot;] another_service: class: Acme\YourBundle\Service\AnotherService arguments: [] Código de servicio :
&amp;lt;?php namespace Acme\YourBundle\Service\Service; class MyService { /** * Constructor * You can had whatever you want to use in your service by dependency injection * @param $doctrine Doctrine * @param $some_parameter Some parameter defined in app/config/parameters.yml * @param $another_service Another service */ public function __construct($doctrine, $some_parameter, $another_service) { $this-&amp;gt;doctrine = $doctrine; $this-&amp;gt;some_parameter = $some_parameter; $this-&amp;gt;another_service = $another_service; } public function doMagic() { // Your code here } } Úselo en un controlador:</description>
    </item>
    
    <item>
      <title>Despliegue de Symfony2</title>
      <link>https://www.wikiod.com/es/symfony2/despliegue-de-symfony2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/despliegue-de-symfony2/</guid>
      <description>Pasos para mover el proyecto Symfony 2 al alojamiento manualmente # Depende del tipo de hosting que tengas:
Si tiene una consola SSH, puede hacerlo en el alojamiento después del paso 2, if you haven&amp;rsquo;t then do it locally: run command
php app/console cache:clear --env=prod&#39;. Suponga que tiene en sus carpetas de alojamiento youdomain/public_html, so in public_html must be located all web files. So you must upload all from Symfony project (folders: app, src, vendors, bin; files: deps, deps.</description>
    </item>
    
    <item>
      <title>Extensiones Symfony Twig</title>
      <link>https://www.wikiod.com/es/symfony2/extensiones-symfony-twig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/extensiones-symfony-twig/</guid>
      <description>Una extensión Twig simple &amp;ndash; Symfony 2.8 # Antes de crear cualquier extensión, siempre verifique si ya se implementó.
Lo primero que habría que hacer es definir la clase de extensión que albergará los filtros y/o funciones twig.
&amp;lt;?php namespace AppBundle\Twig; class DemoExtension extends \Twig_Extension { /** * A unique identifier for your application * * @return string */ public function getName() { return &#39;demo&#39;; } /** * This is where one defines the filters one would to use in their twig * templates * * @return Array */ public function getFilters() { return array ( new \Twig_SimpleFilter ( &#39;price&#39;, // The name of the twig filter array($this, &#39;priceFilter&#39;) ), ); } public function priceFilter($number, $decimals = 0, $decPoint = &#39;.</description>
    </item>
    
    <item>
      <title>Patrones de diseño de Symfony</title>
      <link>https://www.wikiod.com/es/symfony2/patrones-de-diseno-de-symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/patrones-de-diseno-de-symfony/</guid>
      <description>Patrón de inyección de dependencia # Imagine que tiene un administrador de clase para administrar el envío de correos (se llamará MailManager).
En esto, debe registrar los correos que se envían. Una buena solución es transformar la clase MailManager en un &amp;ldquo;servicio&amp;rdquo; y luego inyectar la clase para crear registros (por ejemplo, &amp;ldquo;Monolog&amp;rdquo;) en el MailManager que crea un servicio.
Para hacer esto :
1- Declarar la futura clase MailManager como servicio (en services.</description>
    </item>
    
    <item>
      <title>Monolog mejora tus registros</title>
      <link>https://www.wikiod.com/es/symfony2/monolog-mejora-tus-registros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/monolog-mejora-tus-registros/</guid>
      <description>Agregue los detalles del usuario y los parámetros publicados enviados a los registros # Los registros son muy importantes. Recrear un contexto de error a veces puede ser muy doloroso debido a la falta de información sobre cómo y cuándo ocurrió el error.
Este ejemplo muestra:
Cómo agregar los datos del usuario en los registros de errores
Cómo agregar parámetros de publicación enviado cuando se produjo un error
Cómo usar WebProcessor para agregue todos los datos con respecto a la solicitud como:</description>
    </item>
    
    <item>
      <title>Repositorio de entidades de Doctrine</title>
      <link>https://www.wikiod.com/es/symfony2/repositorio-de-entidades-de-doctrine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony2/repositorio-de-entidades-de-doctrine/</guid>
      <description>Creando un nuevo Repositorio # Puede crear un nuevo Repositorio donde quiera, pero se recomienda crearlos en una carpeta Repository separada.
Si bien puede nombrar el archivo y la clase del Repositorio como desee, se recomienda nombrar el Repositorio EntityNameRepository, para que pueda encontrarlos rápidamente en su carpeta.
Supongamos que tenemos una Entidad Proyecto, almacenada en AppBundle\Entity, se vería así:
&amp;lt;?php namespace AppBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * Project Entity - some information * * @ORM\Table(name=&amp;quot;project&amp;quot;) * @ORM\Entity(repositoryClass=&amp;quot;AppBundle\Repository\ProjectRepository&amp;quot;) */ class Project { // definition of the entity with attributes, getters, setter whatsoever } ?</description>
    </item>
    
  </channel>
</rss>

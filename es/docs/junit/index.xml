<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial junit on </title>
    <link>https://www.wikiod.com/es/docs/junit/</link>
    <description>Recent content in Tutorial junit on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/junit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con junit</title>
      <link>https://www.wikiod.com/es/junit/primeros-pasos-con-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/primeros-pasos-con-junit/</guid>
      <description>Captura la excepción esperada # Es posible capturar fácilmente la excepción sin ningún bloque try catch.
public class ListTest { private final List&amp;lt;Object&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); @Test(expected = IndexOutOfBoundsException.class) public void testIndexOutOfBoundsException() { list.get(0); } } El ejemplo anterior debería ser suficiente para casos más simples, cuando no desea/necesita verificar el mensaje que lleva la excepción lanzada.
Si desea verificar la información sobre la excepción, puede usar el bloque try/catch:</description>
    </item>
    
    <item>
      <title>Pruebas con proveedores de datos</title>
      <link>https://www.wikiod.com/es/junit/pruebas-con-proveedores-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/pruebas-con-proveedores-de-datos/</guid>
      <description>Instalación y uso # Instalación:
Para usar DataProviders, necesita junit-dataprovider .jar:
Github
Descarga directa
Hamcrest-core-1.3.jar:
Github
Descarga directa
Y agregue ambos de este .jar a su proyecto.
Uso:
Agrega esta importación a tu código:
import com.tngtech.java.junit.dataprovider.DataProvider; import com.tngtech.java.junit.dataprovider.DataProviderRunner; import com.tngtech.java.junit.dataprovider.UseDataProvider; Antes de la declaración de su clase:
@RunWith(DataProviderRunner.class) Entonces se ve así:
@RunWith(DataProviderRunner.class) public class example { //code } Cómo crear proveedores de datos:
Antes de cualquier función que desee que sea un DataProvider, agregue este decorador:</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/junit/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/pruebas/</guid>
      <description>Parámetro Contexto Detalles @AntesDeLaClase estática Ejecutado cuando la clase se crea por primera vez @Antes Instancia Ejecutado antes de cada prueba en la clase @Prueba Instancia Debe declararse cada método a probar @Después Instancia Ejecutado después de cada prueba en la clase @después de la clase estática Ejecutado antes de la destrucción de la clase Ejemplo de formato de clase de prueba
public class TestFeatureA { @BeforeClass public static void setupClass() {} @Before public void setupTest() {} @Test public void testA() {} @Test public void testB() {} @After public void tearDownTest() {} @AfterClass public static void tearDownClass() {} } } Medición del desempeño # Si necesita verificar si su método de prueba tarda demasiado en ejecutarse, puede hacerlo mencionando su tiempo de ejecución esperado usando la propiedad de tiempo de espera de la anotación @Test.</description>
    </item>
    
    <item>
      <title>Genere el esqueleto de casos de prueba de Junit para el código existente</title>
      <link>https://www.wikiod.com/es/junit/genere-el-esqueleto-de-casos-de-prueba-de-junit-para-el-codigo-existente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/genere-el-esqueleto-de-casos-de-prueba-de-junit-para-el-codigo-existente/</guid>
      <description>A veces, necesita generar el esqueleto para los casos de prueba en función de las clases que tiene en su proyecto.
Genere el esqueleto de casos de prueba de Junit para el código existente en Eclipse # Estos son los pasos para generar el esqueleto de prueba para el código existente:
Abra Eclipse y elija el proyecto para el que desea crear casos de prueba En el Explorador de paquetes, seleccione la clase Java para la que desea generar la prueba Junit Vaya a Archivo -&amp;gt; Nuevo -&amp;gt; Casos de prueba de Junit Cambie la carpeta de origen para que apunte a la prueba mediante Examinar (Nota: es mejor separar el código fuente del código de prueba) Cambie el Paquete según el paquete de destino que desee En Clase bajo prueba, asegúrese de ingresar la clase para la que desea generar los casos de prueba.</description>
    </item>
    
    <item>
      <title>Orden de ejecución de prueba</title>
      <link>https://www.wikiod.com/es/junit/orden-de-ejecucion-de-prueba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/orden-de-ejecucion-de-prueba/</guid>
      <description>Sintaxis # @FixMethodOrder // Ejecuta la prueba usando el clasificador de métodos predeterminado @FixMethodOrder(MethodSorters) // Ejecuta la prueba usando MethodSorter asociado con la enumeración MethodSorters. Orden predeterminado # Utilice la anotación &amp;ndash; @FixMethodOrder(MethodSorters.DEFAULT). Esto ejecuta todas las pruebas dentro de la clase en un orden determinista y algo predecible. La implementación codifica los nombres de los métodos y los compara. En el escenario de un empate, ordena por orden lexicográfico.</description>
    </item>
    
    <item>
      <title>Reglas de prueba personalizadas</title>
      <link>https://www.wikiod.com/es/junit/reglas-de-prueba-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/reglas-de-prueba-personalizadas/</guid>
      <description>Hay beneficios para cualquiera. Extender ExternalResource es conveniente, especialmente si solo necesitamos un before() para configurar algo.
Sin embargo, debemos tener en cuenta que, dado que el método before() se ejecuta fuera de try...finally, cualquier código que se requiera para limpiar en after() no se ejecutará si hay un error durante la ejecución de before().
Así es como se ve dentro de ExternalResource:
before(); try { base.evaluate(); } finally { after(); } Obviamente, si se lanza alguna excepción en la prueba en sí, o por otra regla anidada, el after aún se ejecutará.</description>
    </item>
    
    <item>
      <title>Ensayos de paramaterización</title>
      <link>https://www.wikiod.com/es/junit/ensayos-de-paramaterizacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/ensayos-de-paramaterizacion/</guid>
      <description>A veces tiene una prueba que necesita ejecutar varias veces, cada vez con datos diferentes. La parametrización de la prueba le permite hacer esto de una manera fácil y fácil de mantener.
Sintaxis # @RunWith(Parameterized.class) //anotación para la clase de prueba @Parameters//anotación para datos
Un beneficio de usar parámetros es que si un conjunto de datos falla, la ejecución simplemente pasará al siguiente conjunto de datos en lugar de detener toda la prueba.</description>
    </item>
    
    <item>
      <title>Ignorar casos de prueba en Junit</title>
      <link>https://www.wikiod.com/es/junit/ignorar-casos-de-prueba-en-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/junit/ignorar-casos-de-prueba-en-junit/</guid>
      <description>A veces desea ignorar algunos de los casos de prueba que tiene en Junit. Por ejemplo, están parcialmente terminados y desea volver a ellos más tarde.
Ignorar caso de prueba en Junit # Vaya al método de prueba que desea ignorar Antes de la anotación @Test, ingrese @Ignore opcional: puede agregar una descripción de por qué está ignorando este método de prueba, algo como: @Ignore (&amp;quot;ignorando este caso de prueba por ahora&amp;quot;) un método de muestra sería:</description>
    </item>
    
  </channel>
</rss>

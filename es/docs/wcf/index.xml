<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de wcf on </title>
    <link>https://www.wikiod.com/es/docs/wcf/</link>
    <description>Recent content in Tutorial de wcf on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/wcf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con wcf</title>
      <link>https://www.wikiod.com/es/wcf/empezando-con-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/empezando-con-wcf/</guid>
      <description>Demostración del servicio tranquilo de WCF # servicio
public class WCFRestfulService : IWCFRestfulService { public string GetServiceName(int Id) { return &amp;quot;This is a WCF Restful Service&amp;quot;; } } Interfaz
[ServiceContract(Name = &amp;quot;WCRestfulService &amp;quot;)] public interface IWCFRestfulService { [OperationContract] [WebInvoke(Method = &amp;quot;GET&amp;quot;, ResponseFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped, UriTemplate = &amp;quot;GetServiceName?Id={Id}&amp;quot;)] string GetServiceName(int Id); } svc Markup (haga clic con el botón derecho en el archivo svc y haga clic en ver MarkUp)</description>
    </item>
    
    <item>
      <title>Cómo usar un contenedor de inyección de dependencia con un servicio WCF</title>
      <link>https://www.wikiod.com/es/wcf/como-usar-un-contenedor-de-inyeccion-de-dependencia-con-un-servicio-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/como-usar-un-contenedor-de-inyeccion-de-dependencia-con-un-servicio-wcf/</guid>
      <description>Cómo configurar un servicio WCF para usar un contenedor de inyección de dependencia (Castle Windsor) # Este ejemplo tiene dos partes: algunos pasos repetitivos para agregar Castle Windsor a su servicio WCF y luego un ejemplo simple y concreto para mostrar cómo configuramos y usamos el contenedor de Windsor.
Eso hace que el ejemplo sea un poco largo. Si ya comprende el uso de un contenedor DI, es probable que solo le interesen los pasos repetitivos.</description>
    </item>
    
    <item>
      <title>tu primer servicio</title>
      <link>https://www.wikiod.com/es/wcf/tu-primer-servicio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/tu-primer-servicio/</guid>
      <description>Agregar un punto final de metadatos a su servicio # Los servicios SOAP pueden publicar metadatos que describen los métodos que pueden invocar los clientes. Los clientes pueden usar herramientas como Visual Studio para generar código automáticamente (conocido como proxies de cliente). Los proxies ocultan la complejidad de invocar un servicio. Para invocar un servicio, uno simplemente invoca un método en un proxy de cliente.
Primero debe agregar un punto final de metadatos a su servicio.</description>
    </item>
    
    <item>
      <title>Servicio de descanso WCF</title>
      <link>https://www.wikiod.com/es/wcf/servicio-de-descanso-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/servicio-de-descanso-wcf/</guid>
      <description>Servicio Resful WCF # [ServiceContract] public interface IBookService { [OperationContract] [WebGet] List&amp;lt;Book&amp;gt; GetBooksList(); [OperationContract] [WebGet(UriTemplate = &amp;quot;Book/{id}&amp;quot;)] Book GetBookById(string id); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;AddBook/{name}&amp;quot;)] void AddBook(string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;UpdateBook/{id}/{name}&amp;quot;)] void UpdateBook(string id, string name); [OperationContract] [WebInvoke(UriTemplate = &amp;quot;DeleteBook/{id}&amp;quot;)] void DeleteBook(string id); } Implementación del Servicio
Ahora, la parte de implementación del servicio utilizará el contexto generado por el marco de la entidad y las entidades para realizar todas las operaciones respectivas.</description>
    </item>
    
    <item>
      <title>Rastreo</title>
      <link>https://www.wikiod.com/es/wcf/rastreo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/rastreo/</guid>
      <description>Ajustes de seguimiento # El seguimiento de WCF se basa en System.Diagnostics. Para utilizar el seguimiento, debe definir los orígenes de seguimiento en el archivo de configuración o en el código.
El seguimiento no está habilitado de forma predeterminada. Para activar el seguimiento, debe crear un detector de seguimiento y establecer un nivel de seguimiento que no sea &amp;ldquo;Desactivado&amp;rdquo; para el origen de seguimiento seleccionado en la configuración; de lo contrario, WCF no genera ningún seguimiento.</description>
    </item>
    
    <item>
      <title>Seguridad WCF</title>
      <link>https://www.wikiod.com/es/wcf/seguridad-wcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/seguridad-wcf/</guid>
      <description>Seguridad WCF # La seguridad es una pieza crítica de cualquier tecnología o marco de programación para implementar aplicaciones orientadas a servicios
WCF ha sido construido desde cero para proporcionando la infraestructura de seguridad necesaria a nivel de mensajes y servicios.
En las siguientes secciones, verá cómo usar muchas de las configuraciones de seguridad disponibles en WCF y algunos escenarios de implementación comunes.
Para la protección de mensajes, WCF admite los dos modelos de seguridad tradicionales, seguridad de transporte y seguridad de mensajes.</description>
    </item>
    
    <item>
      <title>Publicación por entregas</title>
      <link>https://www.wikiod.com/es/wcf/publicacion-por-entregas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/publicacion-por-entregas/</guid>
      <description>Serialización en WCF # La serialización es el proceso de convertir un objeto en un flujo de bytes para almacenar el objeto o transmitirlo a la memoria, una base de datos o un archivo. Serialización de página de Microsoft
El siguiente ejemplo demuestra la serialización en WCF:
[ServiceContract(Namespace=&amp;quot;http://Microsoft.ServiceModel.Samples&amp;quot;)] public interface IPerson { [OperationContract] void Add(Person person); [DataContract] public class Person { private int id; [DataMember] public int Age{ set; get;} } } El atributo [DataContract] se usa con las clases.</description>
    </item>
    
    <item>
      <title>Manejo de excepciones</title>
      <link>https://www.wikiod.com/es/wcf/manejo-de-excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/manejo-de-excepciones/</guid>
      <description>Otras lecturas
Más sobre FaultException: MSDN FaultException
Uso de un marco de registro de errores personalizado # A veces es útil integrar un marco de registro de errores personalizado para garantizar que se registren todas las excepciones.
[ServiceContract] [ErrorHandler] public interface IMyService { } [AttributeUsage(AttributeTargets.Interface)] public class CustomErrorHandler : Attribute, IContractBehavior, IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) { return; } //my custom logging framework } public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) { dispatchRuntime.</description>
    </item>
    
    <item>
      <title>Cómo deshabilitarhabilitar el seguimiento de WCF en el código de la aplicación C#</title>
      <link>https://www.wikiod.com/es/wcf/como-deshabilitarhabilitar-el-seguimiento-de-wcf-en-el-codigo-de-la-aplicacion-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/como-deshabilitarhabilitar-el-seguimiento-de-wcf-en-el-codigo-de-la-aplicacion-c/</guid>
      <description>Una forma: use un oyente personalizado definido en su código C# # Me tomó un tiempo hacerlo bien, así que decidí compartir una solución porque podría ahorrarle a alguien más varios días de prueba y error.
El problema: quiero poder habilitar/deshabilitar el seguimiento de WCF en mi aplicación C# .NET y elegir el nombre del archivo de salida del seguimiento. No quiero que los usuarios editen el archivo .config, hay demasiado espacio para errores allí.</description>
    </item>
    
    <item>
      <title>DataContractSerializer es un serializador Opt-In y Opt-Out.</title>
      <link>https://www.wikiod.com/es/wcf/datacontractserializer-es-un-serializador-opt-in-y-opt-out/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wcf/datacontractserializer-es-un-serializador-opt-in-y-opt-out/</guid>
      <description>en realidad es muy simple: el enfoque de Opt-In dice que las propiedades que se consideran parte de DataContract deben marcarse explícitamente; de ​​lo contrario, se ignorarán, mientras que Opt-Out significa que se asumirá que todas las propiedades son parte de DataContract a menos que se marquen explícitamente.
¿Qué es optar en el serializador? # /// &amp;lt;summary&amp;gt; /// Defines a student. /// &amp;lt;/summary&amp;gt; [DataContract] public class Student { /// &amp;lt;summary&amp;gt; /// Gets or sets the student number.</description>
    </item>
    
  </channel>
</rss>

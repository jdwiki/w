<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de enchufes on </title>
    <link>https://www.wikiod.com/es/docs/sockets/</link>
    <description>Recent content in Tutorial de enchufes on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con los enchufes</title>
      <link>https://www.wikiod.com/es/sockets/primeros-pasos-con-los-enchufes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sockets/primeros-pasos-con-los-enchufes/</guid>
      <description>Cómo instanciar un objeto de clase de socket # La creación de instancias de un socket se puede hacer de varias maneras.
por declaración e instanciación de 2 líneas:
First we need to define a variable which will hold a Socket class object:
Socket socket; then we can create a Socket class object:
socket = new Socket(); También podemos hacer una definición e instanciación de una línea:
Socket socket = new Socket(); ambas formas crearán un socket desconectado.</description>
    </item>
    
    <item>
      <title>Zócalos Python TCP; ejemplos simples de servidor y cliente con anotación</title>
      <link>https://www.wikiod.com/es/sockets/zocalos-python-tcp-ejemplos-simples-de-servidor-y-cliente-con-anotacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sockets/zocalos-python-tcp-ejemplos-simples-de-servidor-y-cliente-con-anotacion/</guid>
      <description>Estos son dos programas de ejemplo que funcionan juntos. Uno es un servidor simple, el otro un cliente simple. Inicie el servidor en una ventana:
python tserver.py Edite la dirección del servidor en el archivo fuente del cliente si lo desea. Entonces corre
python tclient.py El cliente se conecta al servidor, luego solicita información de la consola y luego la envía al servidor. Para cada búfer recibido, el servidor antepone información almacenada y la envía de regreso al cliente.</description>
    </item>
    
    <item>
      <title>Zócalos C&#43;&#43;</title>
      <link>https://www.wikiod.com/es/sockets/zocalos-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sockets/zocalos-c-/</guid>
      <description>Este tema tratará sobre la programación de sockets de Berkeley al estilo C++ moderno (este es un código para Linux, pero se puede trasladar fácilmente a otras plataformas)
Ejemplo de código de servidor # constexpr const size_t addressSize = sizeof(sockaddr_in); constexpr const uint16_t defaultPort = 80; // The port you want to use int serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); sockaddr_in serverAddress, clientAddress; memset(&amp;amp;serverAddress, 0, addressSize); serverAddress.sin_family = AF_INET; serverAddress.sin_addr.s_addr = htonl(INADDR_ANY); serverAddress.</description>
    </item>
    
  </channel>
</rss>

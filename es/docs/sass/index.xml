<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial descarado on </title>
    <link>https://www.wikiod.com/es/docs/sass/</link>
    <description>Recent content in Tutorial descarado on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con Sass</title>
      <link>https://www.wikiod.com/es/sass/comenzando-con-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/comenzando-con-sass/</guid>
      <description>Variables # Si tiene un valor que usa con frecuencia, puede almacenarlo en una variable. Podría usar esto para definir esquemas de color, por ejemplo. Solo tendría que definir su esquema una vez y luego podría usarlo en todas sus hojas de estilo.
Para definir una variable, debe prefijar su nombre con el símbolo $. (Como lo haría en PHP).
Puede almacenar cualquier valor de propiedad CSS válido dentro de una variable.</description>
    </item>
    
    <item>
      <title>SCSS contra Sass</title>
      <link>https://www.wikiod.com/es/sass/scss-contra-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/scss-contra-sass/</guid>
      <description>Principales diferencias # Aunque la gente a menudo dice Sass como el nombre de este preprocesador CSS, a menudo se refieren a la sintaxis SCSS. Sass usa la extensión de archivo .sass, mientras que SCSS-Sass usa la extensión .scss. Ambos se conocen como &amp;ldquo;Sass&amp;rdquo;.
Hablando en general, la sintaxis SCSS se usa más comúnmente. SCSS se ve como un CSS normal con más capacidades, mientras que Sass se ve bastante diferente al CSS normal.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/es/sass/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/variables/</guid>
      <description>Sintaxis # $nombre_variable: valor; SCSS # Al igual que en Sass, las variables SCSS se utilizan para almacenar un valor que se utilizará varias veces a lo largo de un documento SCSS.
Las variables se utilizan principalmente para almacenar valores de propiedad de uso frecuente (como fuentes y colores), pero se pueden utilizar para cualquier valor de cualquier propiedad.
SCSS usa el símbolo $ para declarar una variable.
$font-stack: Helvetica, sans-serif; $primary-color: #000000; body { font-family: $font-stack; color: $primary-color; } Puede usar !</description>
    </item>
    
    <item>
      <title>Anidamiento</title>
      <link>https://www.wikiod.com/es/sass/anidamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/anidamiento/</guid>
      <description>Anidamiento básico # Cada vez que declara una nueva regla dentro de otra regla, se denomina anidamiento. Con el anidamiento básico, como se muestra a continuación, el selector anidado se compilará como un nuevo selector CSS con todos sus padres antepuestos, separados por un espacio.
// SCSS .parent { margin: 1rem; .child { float: left; } } // CSS output .parent { margin: 1rem; } .parent .child { float: left; } Profundidad de anidamiento # El anidamiento es una característica muy poderosa, pero debe usarse con precaución.</description>
    </item>
    
    <item>
      <title>Bucles y condiciones</title>
      <link>https://www.wikiod.com/es/sass/bucles-y-condiciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/bucles-y-condiciones/</guid>
      <description>Bucle mientras # La directiva @while recorrerá un bloque de código hasta que la condición especificada se vuelva falsa. En el siguiente ejemplo, este bucle se ejecutará hasta que $font-size &amp;lt;= 18 mientras se incrementa el valor de $font-size en 2.
$font-size: 12; @while $font-size &amp;lt;= 18 { .font-size-#{$font-size} { font-size: ($font-size * 1px); } $font-size: $font-size + 2; } Salida del código anterior
.font-size-12 { font-size: 12px; } .font-size-14 { font-size: 14px; } .</description>
    </item>
    
    <item>
      <title>Parciales e Importación</title>
      <link>https://www.wikiod.com/es/sass/parciales-e-importacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/parciales-e-importacion/</guid>
      <description>Importación # El uso de @import le permite dividir sus archivos en varios archivos más pequeños. Esto tiene sentido, ya que puede mantener una mejor estructura para sus hojas de estilo y evitar archivos muy grandes.
Ejemplo # Digamos que tienes algunos archivos.
- application.scss - header.scss - content |-- article.scss &#39;-- list.scss - footer.scss Su hoja de estilo principal application.scss puede importar todos los archivos y definir sus propios estilos.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/es/sass/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/operadores/</guid>
      <description>Operadores aritméticos # Sass admite los siguientes operadores aritméticos estándar:
Operador Descripción + Adición – Resta * Multiplicación / División % Resto Ejemplos
p { font-size: 16px + 4px; // 20px } h3 { width: 2px * 5 + 12px; // 22px } h2 { width: 8px + (12px / 2) * 3; // 26px } El orden normal de las operaciones se aplica como de costumbre.
Operador de asignación # Sass usa el operador de dos puntos (:) para asignar valores a las variables.</description>
    </item>
    
    <item>
      <title>Instalación</title>
      <link>https://www.wikiod.com/es/sass/instalacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/instalacion/</guid>
      <description>Esto cubre solo a Ruby, que es el principal compilador de SASS para muchos sistemas, pero existen otras opciones. Uno muy común para cualquier desarrollador de nodos sería node-sass, que podría ser más fácil y mucho más rápido para muchos usuarios.
Mac # Ruby viene preinstalado en una computadora Mac.
Siga las instrucciones a continuación para instalar Sass:
Abrir CMD Ejecute gem install sass Si recibe un mensaje de error, intente sudo gem install sass Comprueba que funciona usando sass -v ##Linux Ruby deberá instalarse primero antes de la configuración.</description>
    </item>
    
    <item>
      <title>mezclas</title>
      <link>https://www.wikiod.com/es/sass/mezclas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/mezclas/</guid>
      <description>Sintaxis # @mixin mixin-name ($argument1, $argument, ...){ ... } Mezclar con argumento variable # Hay algunos casos en mixins donde puede haber argumentos únicos o múltiples mientras se usa. Tomemos un caso de border-radius donde puede haber un solo argumento como border-radius:4px; o múltiples argumentos como border-radius:4px 3px 2px 1px;.
La mezcla tradicional con argumentos de palabras clave será la siguiente:
@mixin radius($rad1, $rad2, $rad3, $rad4){ -webkit-border-radius: $rad1 $rad2 $rad3 $rad4; -moz-border-radius: $rad1 $rad2 $rad3 $rad4; -ms-border-radius: $rad1 $rad2 $rad3 $rad4; -o-border-radius: $rad1 $rad2 $rad3 $rad4; border-radius: $rad1 $rad2 $rad3 $rad4; } y usado como</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/sass/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sass/funciones/</guid>
      <description>Sintaxis # @function nombre-función(parámetro) { /* Cuerpo de la función */ } Funciones básicas # Una función tiene un aspecto similar a un mixin, pero no agrega ningún estilo, solo devuelve un valor. Las funciones deben usarse para evitar la lógica repetida en sus estilos.
Sass tiene algunas funciones integradas que se llaman usando la sintaxis de función CSS estándar.
h1 { background: hsl(0, 25%, 50%); } Las funciones se declaran usando la siguiente sintaxis,</description>
    </item>
    
  </channel>
</rss>

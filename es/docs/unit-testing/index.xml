<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de pruebas unitarias on </title>
    <link>https://www.wikiod.com/es/docs/unit-testing/</link>
    <description>Recent content in Tutorial de pruebas unitarias on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con las pruebas unitarias</title>
      <link>https://www.wikiod.com/es/unit-testing/primeros-pasos-con-las-pruebas-unitarias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/primeros-pasos-con-las-pruebas-unitarias/</guid>
      <description>Una prueba de unidad básica # En su forma más simple, una prueba unitaria consta de tres etapas:
Preparar el ambiente para la prueba Ejecutar el código a probar Validar que el comportamiento esperado coincida con el comportamiento observado Estas tres etapas a menudo se denominan &amp;lsquo;Organizar-Actuar-Afirmar&amp;rsquo; o &amp;lsquo;Dar-cuándo-entonces&amp;rsquo;.
A continuación se muestra un ejemplo en C# que utiliza el marco NUnit.
[TestFixture] public CalculatorTest { [Test] public void Add_PassSevenAndThree_ExpectTen() { // Arrange - setup environment var systemUnderTest = new Calculator(); // Act - Call system under test var calculatedSum = systemUnderTest.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/unit-testing/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/inyeccion-de-dependencia/</guid>
      <description>Un enfoque que se puede tomar para escribir software es crear dependencias a medida que se necesitan. Esta es una forma bastante intuitiva de escribir un programa y es la forma en que la mayoría de la gente tiende a aprender, en parte porque es fácil de seguir. Uno de los problemas con este enfoque es que puede ser difícil de probar. Considere un método que realiza algún procesamiento basado en la fecha actual.</description>
    </item>
    
    <item>
      <title>dobles de prueba</title>
      <link>https://www.wikiod.com/es/unit-testing/dobles-de-prueba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/dobles-de-prueba/</guid>
      <description>Al realizar pruebas, a veces es útil utilizar un doble de prueba para manipular o verificar el comportamiento del sistema bajo prueba. Los dobles se pasan o inyectan en la clase o método bajo prueba en lugar de instancias de código de producción.
Uso de un stub para proporcionar respuestas enlatadas # Un stub es un doble de prueba ligero que proporciona respuestas enlatadas cuando se llama a los métodos. Cuando una clase bajo prueba se basa en una interfaz o clase base, se puede implementar una clase &amp;lsquo;stub&amp;rsquo; alternativa para la prueba que se ajuste a la interfaz.</description>
    </item>
    
    <item>
      <title>Mejores prácticas de pruebas unitarias</title>
      <link>https://www.wikiod.com/es/unit-testing/mejores-practicas-de-pruebas-unitarias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/mejores-practicas-de-pruebas-unitarias/</guid>
      <description>Una prueba unitaria es la parte comprobable más pequeña de una aplicación, como funciones, clases, procedimientos, interfaces. La prueba unitaria es un método mediante el cual se prueban unidades individuales de código fuente para determinar si son aptas para su uso. Las pruebas unitarias son básicamente escritas y ejecutadas por desarrolladores de software para asegurarse de que el código cumpla con su diseño y requisitos y se comporte como se espera.</description>
    </item>
    
    <item>
      <title>Las reglas generales para las pruebas unitarias para todos los idiomas.</title>
      <link>https://www.wikiod.com/es/unit-testing/las-reglas-generales-para-las-pruebas-unitarias-para-todos-los-idiomas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/las-reglas-generales-para-las-pruebas-unitarias-para-todos-los-idiomas/</guid>
      <description>Al comenzar con las pruebas unitarias, surgen todo tipo de preguntas:
¿Qué es la prueba unitaria? ¿Qué es una instalación y desmontaje? ¿Cómo trato con las dependencias? ¿Por qué hacer pruebas unitarias? ¿Cómo hago buenas pruebas unitarias?
Este artículo responderá a todas estas preguntas, para que pueda comenzar a realizar pruebas unitarias en el idioma que desee.
¿Qué son las pruebas unitarias? # La prueba unitaria es la prueba del código para garantizar que realiza la tarea que debe realizar.</description>
    </item>
    
    <item>
      <title>Guía de pruebas unitarias en Visual Studio para C#</title>
      <link>https://www.wikiod.com/es/unit-testing/guia-de-pruebas-unitarias-en-visual-studio-para-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/guia-de-pruebas-unitarias-en-visual-studio-para-c/</guid>
      <description>Cómo crear un proyecto de prueba unitaria y pruebas unitarias y cómo ejecutar las pruebas unitarias y la herramienta de cobertura de código.
En esta guía, se usará el marco MSTest estándar y la herramienta de análisis de cobertura de código estándar que están disponibles en Visual Studio.
La guía se escribió para Visual Studio 2015, por lo que es posible que algunas cosas sean diferentes en otras versiones.
Creando un proyecto de prueba unitaria # Abra el proyecto C# Haga clic con el botón derecho en la solución -&amp;gt; Agregar -&amp;gt; Nuevo proyecto… (Figura 1) Vaya a Instalado -&amp;gt; Visual C# -&amp;gt; Prueba Haga clic en Proyecto de prueba unitaria Dale un nombre y haz clic en Aceptar (Figura 2) El proyecto de prueba unitaria se agrega a la solución.</description>
    </item>
    
    <item>
      <title>Pruebas unitarias de Loops (Java)</title>
      <link>https://www.wikiod.com/es/unit-testing/pruebas-unitarias-de-loops-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/pruebas-unitarias-de-loops-java/</guid>
      <description>Los bucles se consideran una de las estructuras de control importantes en cualquier lenguaje de programación. Hay diferentes formas en las que podemos lograr la cobertura del bucle.
Estos métodos difieren según el tipo de bucle.
bucles individuales
Bucles anidados
Bucles concatenados
Prueba de bucle único # Estos son bucles en los que su cuerpo de bucle no contiene otros bucles (el bucle más interno en el caso de que esté anidado).</description>
    </item>
    
    <item>
      <title>Tipos de afirmación</title>
      <link>https://www.wikiod.com/es/unit-testing/tipos-de-afirmacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unit-testing/tipos-de-afirmacion/</guid>
      <description>Verificación de un valor devuelto # [Test] public void Calculator_Add_ReturnsSumOfTwoNumbers() { Calculator calculatorUnderTest = new Calculator(); double result = calculatorUnderTest.Add(2, 3); Assert.AreEqual(5, result); } Pruebas basadas en el estado # Dada esta clase simple, podemos probar que el método ShaveHead funciona correctamente afirmando que el estado de la variable HairLength se establece en cero después de llamar al método ShaveHead.
public class Person { public string Name; public int HairLength; public Person(string name, int hairLength) { this.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-mvc Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/spring-mvc/</link>
    <description>Recent content in Spring-mvc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con spring-mvc</title>
      <link>https://www.wikiod.com/es/spring-mvc/comenzando-con-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/comenzando-con-spring-mvc/</guid>
      <description>Primer proyecto Spring-MVC # Cree un proyecto web dinámico, proporcione la siguiente información como se indica a continuación
Nombre del proyecto: DemoSpringMVCProject Tiempo de ejecución de destino: configurado como servidor Apache Tomcat v7.0 Haga clic en finalizar, con éxito hemos creado un proyecto web dinámico.
** Ahora tenemos que configurar el marco Spring-MVC: **
Cree web.xml en la carpeta &amp;rsquo; WebContent\WEB-INF\ &amp;lsquo; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot; xmlns:web=&amp;quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.</description>
    </item>
    
    <item>
      <title>Validación de Spring MVC</title>
      <link>https://www.wikiod.com/es/spring-mvc/validacion-de-spring-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/validacion-de-spring-mvc/</guid>
      <description>En Spring MVC es posible validar campos de formulario utilizando Bean Validation API (JSR 303 para Bean Vaidation 1.0 y [JSR 349](https: //jcp.org/en/jsr/detail?id=349) para Bean Validation 1.1) que se utiliza para definir las restricciones de validación del objeto JavaBean.
Hibernate Validator es una implementación de referencia de la API de validación de Bean. Hibernate Validator ofrece un valor adicional además de las características requeridas por Bean Validation. Por ejemplo, una [API de configuración de restricciones programáticas] (http://docs.</description>
    </item>
    
    <item>
      <title>Subir archivo</title>
      <link>https://www.wikiod.com/es/spring-mvc/subir-archivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/subir-archivo/</guid>
      <description>Sintaxis # @RequestPart(String, String, boolean) Parámetros # Parámetro Detalles @RequestPart Esta anotación especifica que un parámetro debe asignarse a una parte de solicitud determinada. El nombre de la parte debe coincidir con el nombre del parámetro del método, a menos que elija proporcionarlo como argumento para @RequestPart. Si el nombre de la parte no se puede expresar como un nombre Java (por ejemplo, 123), entonces puede usar el atributo valor de @RequestPart para especificar el nombre real.</description>
    </item>
    
    <item>
      <title>Manejo de excepciones globales</title>
      <link>https://www.wikiod.com/es/spring-mvc/manejo-de-excepciones-globales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/manejo-de-excepciones-globales/</guid>
      <description>No olvide crear excepciones personalizadas si es necesario Tanto el resolutor como el controlador deben ser descubiertos por Spring. Si tiene Spring 3.2 o superior, puede usar @ContrllerAdvice Fuente
Solucionador de excepciones globales # @Component public class RestExceptionResolver extends ExceptionHandlerExceptionResolver { @Autowired //If you have multiple handlers make this a list of handlers private RestExceptionHandler restExceptionHandler; /** * This resolver needs to be injected because it is the easiest (maybe only) way of getting the configured MessageConverters */ @Resource private ExceptionHandlerExceptionResolver defaultResolver; @PostConstruct public void afterPropertiesSet() { setMessageConverters(defaultResolver.</description>
    </item>
    
    <item>
      <title>Manejo de excepciones</title>
      <link>https://www.wikiod.com/es/spring-mvc/manejo-de-excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/manejo-de-excepciones/</guid>
      <description>Sintaxis # @ExceptionHandler(ExceptionToBeHandled.class) @ExceptionHandler({ExceptionToBeHandled.class, AnotherExceptionToBeHandled.class}) Manejo de excepciones basado en controlador # En el caso de que un controlador arroje una excepción, podemos definir métodos de manejo de excepciones para generar y devolver respuestas específicas. Es importante tener en cuenta que los controladores de excepciones definidos dentro del controlador dado solo se aplicarán a las excepciones que ocurran dentro de ese controlador.
@Controller public class MyController { @GetMapping(&amp;quot;/&amp;quot;) public String somePage() throws Exception { // some set of code that can throw exceptions } @ExceptionHandler(Exception.</description>
    </item>
    
    <item>
      <title>Spring-MVC con anotaciones</title>
      <link>https://www.wikiod.com/es/spring-mvc/spring-mvc-con-anotaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-mvc/spring-mvc-con-anotaciones/</guid>
      <description>En este tema, leerá acerca de las anotaciones principalmente relacionadas con Spring MVC. Algunas de las anotaciones relacionadas son las siguientes: @Controller, @RequestMapping, @RequestParam, @RequestBody, @ResponseBody, @RestController, @ModelAttribute, @ControllerAdvice, @ExceptionHandler, @ResponseStatus.
Por supuesto, hay más anotaciones que también son extremadamente importantes pero que no pertenecen directamente a Spring MVC. Tales como: @Required, @Autowired, @Resource y muchos más.
Parámetros # Anotación Explicación @Controlador Con la anotación @Controller, marca una clase Java como una clase que contiene controladores HTTP, en otras palabras, puntos de acceso HTTP a su aplicación.</description>
    </item>
    
  </channel>
</rss>

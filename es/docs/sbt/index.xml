<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de sbt on </title>
    <link>https://www.wikiod.com/es/docs/sbt/</link>
    <description>Recent content in Tutorial de sbt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sbt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con sbt</title>
      <link>https://www.wikiod.com/es/sbt/comenzando-con-sbt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/comenzando-con-sbt/</guid>
      <description>Instalar SBT en Linux # Las instrucciones completas se pueden [encontrar aquí][1].
[Instalar el JDK][2].
Establezca la variable de entorno Java.
export JAVA_HOME=/usr/local/java/jdk1.8.0_102 echo $JAVA_HOME /usr/local/java/jdk1.8.0_102 export PATH=$PATH:$JAVA_HOME/bin/ echo $PATH ...:/usr/local/java/jdk1.8.0_102/bin/ Instale Scala.
sudo wget http://www.scala-lang.org/files/archive/scala-2.11.8.deb sudo dpkg -i scala-2.11.8.deb sudo apt-get update sudo apt-get install scala Instale SBT.
wget https://bintray.com/artifact/download/sbt/debian/sbt-0.13.9.deb sudo dpkg -i sbt-0.13.9.deb sudo apt-get update sudo apt-get install sbt Distribuciones de Linux basadas en RPM # Descargue las definiciones del repositorio SBT y agréguelas a YUM: rizo https://bintray.</description>
    </item>
    
    <item>
      <title>dependencias</title>
      <link>https://www.wikiod.com/es/sbt/dependencias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/dependencias/</guid>
      <description>Agregar una dependencia de biblioteca administrada # libraryDependency es la SettingKey que maneja las dependencias de bibliotecas &amp;lsquo;gestionadas&amp;rsquo;, que son dependencias que se descargan automáticamente, coincidiendo con las versiones proporcionadas. Para agregar una sola dependencia:
libraryDependencies += &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.2.0-M1&amp;quot; La primera parte, &amp;quot;com.typesafe.slick&amp;quot;, indica el paquete de la biblioteca. La segunda parte, &amp;quot;slick&amp;quot;, es la biblioteca en cuestión. La parte final, &amp;quot;3.2.0-M1&amp;quot;, es la versión. Debido a que la biblioteca está unida por %%, se utilizará la versión de Scala proporcionada por la clave de configuración scalaVersion.</description>
    </item>
    
    <item>
      <title>Descripción general de la compilación</title>
      <link>https://www.wikiod.com/es/sbt/descripcion-general-de-la-compilacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/descripcion-general-de-la-compilacion/</guid>
      <description>La documentación oficial se encuentra en www.scala-sbt.org.
Estructura de directorios # La estructura estándar para un proyecto construido por SBT es:
projectName/ build.sbt project/ &amp;lt;SBT sub-build information&amp;gt; src/ main/ scala/ &amp;lt;Scala source files&amp;gt; java/ &amp;lt;Java source files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; test/ scala/ &amp;lt;Scala test files&amp;gt; java/ &amp;lt;Java test files&amp;gt; resources/ &amp;lt;Resource files&amp;gt; Pueden existir otros directorios, pero la compilación se ocupa principalmente de estos. En el directorio base se coloca build.</description>
    </item>
    
    <item>
      <title>Proyectos</title>
      <link>https://www.wikiod.com/es/sbt/proyectos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/proyectos/</guid>
      <description>Múltiples proyectos en la misma compilación (subproyectos) # A veces, una compilación combina varios directorios de origen, cada uno de los cuales es su propio &amp;ldquo;proyecto&amp;rdquo;. Por ejemplo, podría tener una estructura de construcción como esta:
nombre del proyecto/ build.sbt project/ src/ main/ &amp;hellip; test/ &amp;hellip; core/ src/ main/ &amp;hellip; test/ &amp;hellip; webapp/ src/ main/ &amp;hellip; test/ &amp;hellip;
En el proyecto anterior, el código en projectName/src se considera el proyecto raíz.</description>
    </item>
    
    <item>
      <title>Tareas</title>
      <link>https://www.wikiod.com/es/sbt/tareas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/tareas/</guid>
      <description>Crear una tarea simple # Todo lo que se necesita para definir una tarea es una declaración de su tipo y una descripción:
lazy val exampleTask = taskKey[Unit](&amp;quot;An example task that will return no value.&amp;quot;) Debido a que Unidad es el tipo, esta tarea se compone enteramente de efectos secundarios. Una vez definido, para implementar acciones:
exampleTask := { val s: TaskStreams = streams.value s.log.info(&amp;quot;The example task was executed.&amp;quot;) } Si estos están definidos en build.</description>
    </item>
    
    <item>
      <title>Primeros pasos con el desarrollo diario</title>
      <link>https://www.wikiod.com/es/sbt/primeros-pasos-con-el-desarrollo-diario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sbt/primeros-pasos-con-el-desarrollo-diario/</guid>
      <description>Ejemplo diario de desarrollo continuo con Scala # # install sbt with homebrew (if you didn&#39;t) brew install sbt # - create a new scala project # - name your project name when asked like: hello-world sbt new sbt/scala-seed.g8 # go to the new project directory that you named cd hello-world # run sbt to open the sbt shell sbt # run your project in continuous running mode ~ run # to continuously see the test outputs # open up a new terminal tab, run sbt, type: ~ test # to continuously compile # open up a new terminal tab, run sbt, type: ~ compile ~ utilizado para operaciones continuas en sbt como se ve arriba.</description>
    </item>
    
  </channel>
</rss>

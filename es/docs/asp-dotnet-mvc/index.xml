<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-mvc Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/asp-dotnet-mvc/</link>
    <description>Recent content in asp.net-mvc Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/asp-dotnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con asp.net-mvc</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/primeros-pasos-con-aspnet-mvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/primeros-pasos-con-aspnet-mvc/</guid>
      <description>¡Hola MVC! # ASP.NET MVC es un marco de aplicación web de código abierto. MVC en sí mismo es un patrón de diseño que se basa en tres componentes principales: modelo-vista-controlador.
Modelo: los modelos reflejan sus objetos comerciales y son un medio para pasar datos entre controladores y vistas.
Ver: las vistas son las páginas que representan y muestran los datos del modelo al usuario. Las vistas de ASP.NET MVC generalmente se escriben con la sintaxis de Razor.</description>
    </item>
    
    <item>
      <title>Html.AntiForgeryToken</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/htmlantiforgerytoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/htmlantiforgerytoken/</guid>
      <description>El token antifalsificación se puede usar para ayudar a proteger su aplicación contra la falsificación de solicitudes entre sitios. Para usar esta función, llame al método AntiForgeryToken desde un formulario y agregue el atributo ValidateAntiForgeryTokenAttribute al método de acción que desea proteger.
Genera un campo de formulario oculto (token antifalsificación) que se valida cuando se envía el formulario.
Sintaxis # @Html.AntiForgeryToken() Al enviar una solicitud ajax con token CSRF (__RequestVerificationToken), asegúrese de que el tipo de contenido no esté configurado en application/json.</description>
    </item>
    
    <item>
      <title>Maquinilla de afeitar</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/maquinilla-de-afeitar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/maquinilla-de-afeitar/</guid>
      <description>¿Qué es Razor?
Razor es una sintaxis de marcado que le permite incrustar código basado en servidor (Visual Basic y C#) en páginas web.
El código basado en servidor puede crear contenido web dinámico sobre la marcha, mientras se escribe una página web en el navegador. Cuando se llama a una página web, el servidor ejecuta el código basado en el servidor dentro de la página antes de devolver la página al navegador.</description>
    </item>
    
    <item>
      <title>ViewData, ViewBag, TempData</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/viewdata-viewbag-tempdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/viewdata-viewbag-tempdata/</guid>
      <description>ViewData y ViewBag se utilizan para transferir datos del controlador a la vista.
ViewData no es más que un diccionario de objetos y se puede acceder a él mediante una cadena como clave.
ViewBag es muy similar a ViewData. ViewBag es una propiedad dinámica. ViewBag es solo un envoltorio alrededor de ViewData.
TempData guarda datos durante el tiempo de la solicitud HTTP, lo que significa que guarda datos entre dos solicitudes consecutivas.</description>
    </item>
    
    <item>
      <title>anotaciones de datos</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/anotaciones-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/anotaciones-de-datos/</guid>
      <description>Podemos agregar validaciones a nuestra aplicación agregando anotaciones de datos a nuestras clases modelo. Las anotaciones de datos nos permiten describir las reglas que queremos aplicar a las propiedades de nuestro modelo, y ASP.NET MVC se encargará de aplicarlas y mostrar los mensajes apropiados a los usuarios.
Validación remota # La validación remota se usa para verificar si el contenido ingresado en el control de entrada es válido o no mediante el envío de una solicitud ajax al lado del servidor para verificarlo.</description>
    </item>
    
    <item>
      <title>Html.RouteLink</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/htmlroutelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/htmlroutelink/</guid>
      <description>Parámetros # Parámetro Detalles enlaceTexto El texto que se mostrará para el enlace. rutaNombre El nombre de la ruta para la que se devolverá una ruta virtual. Ejemplo básico usando el texto del enlace y el nombre de la ruta # Como alternativa al uso de Html.ActionLink para generar enlaces en una vista, puede usar
Html.RouteLink
Para hacer uso de esta función, debe configurar una ruta, por ejemplo:
public static void RegisterRoutes(RouteCollection routes) { routes.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/enrutamiento/</guid>
      <description>El enrutamiento es cómo ASP.NET MVC hace coincidir un URI con una acción. El módulo de enrutamiento es responsable de asignar las solicitudes entrantes del navegador a acciones particulares del controlador MVC.
MVC 5 admite un nuevo tipo de enrutamiento, llamado enrutamiento de atributos. Como su nombre lo indica, el enrutamiento de atributos usa atributos para definir rutas. El enrutamiento de atributos le brinda más control sobre los URI en su aplicación web.</description>
    </item>
    
    <item>
      <title>Filtros de acción</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/filtros-de-accion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/filtros-de-accion/</guid>
      <description>Filtro de acción de control de sesión: solicitud de página y ajax # Por lo general, los procesos de autenticación y autorización se realizan mediante soportes de tokens y cookies incorporados en .net MVC. Pero si decide hacerlo usted mismo con Session, puede usar la lógica a continuación para las solicitudes de página y las solicitudes de ajax.
public class SessionControl : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { var session = filterContext.</description>
    </item>
    
    <item>
      <title>Encuadernación modelo</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/encuadernacion-modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/encuadernacion-modelo/</guid>
      <description>El enlace de modelos es el proceso de tomar parámetros HTTP, generalmente en la cadena de consulta de una solicitud GET, o dentro del cuerpo POST, y aplicarlos en un objeto que luego se puede validar y consumir de manera orientada a objetos sin la necesidad de acciones del controlador. tener un conocimiento profundo de cómo recuperar parámetros HTTP.
En otras palabras, el enlace de modelos es lo que permite que las acciones, en MVC, tengan parámetros, ya sea un tipo de valor o un objeto.</description>
    </item>
    
    <item>
      <title>Modelo de validación</title>
      <link>https://www.wikiod.com/es/asp-dotnet-mvc/modelo-de-validacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-mvc/modelo-de-validacion/</guid>
      <description>Eliminar un objeto de la validación # Digamos que tienes el siguiente modelo:
public class foo { [Required] public string Email { get; set; } [Required] public string Password { get; set; } [Required] public string FullName { get; set; } } Pero desea excluir FullName de la validación del modelo porque está utilizando el modelo también en un lugar donde FullName no está completo, puede hacerlo de la siguiente manera:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de F# on </title>
    <link>https://www.wikiod.com/es/docs/fsharp/</link>
    <description>Recent content in Tutorial de F# on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducción a F#</title>
      <link>https://www.wikiod.com/es/fsharp/introduccion-a-f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/introduccion-a-f/</guid>
      <description>¡Hola Mundo! # Este es el código para un proyecto de consola simple, que imprime &amp;ldquo;Hello, World!&amp;rdquo; a STDOUT, y sale con un código de salida de 0
[&amp;lt;EntryPoint&amp;gt;] let main argv = printfn &amp;quot;Hello, World!&amp;quot; 0 Ejemplo de desglose línea por línea:
[&amp;lt;EntryPoint&amp;gt;] - Un .net Attribute que marca &amp;ldquo;el método que usa para establecer el punto de entrada&amp;rdquo; de su programa (fuente). let main argv - esto define una función llamada main con un solo parámetro argv.</description>
    </item>
    
    <item>
      <title>Sindicatos Discriminados</title>
      <link>https://www.wikiod.com/es/fsharp/sindicatos-discriminados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/sindicatos-discriminados/</guid>
      <description>Nombrar elementos de tuplas dentro de uniones discriminadas # Al definir uniones discriminadas, puede nombrar elementos de tipos de tupla y usar estos nombres durante la coincidencia de patrones.
type Shape = | Circle of diameter:int | Rectangle of width:int * height:int let shapeIsTenWide = function | Circle(diameter=10) | Rectangle(width=10) -&amp;gt; true | _ -&amp;gt; false Además, nombrar los elementos de las uniones discriminadas mejora la legibilidad del código y la interoperabilidad con C#: los nombres proporcionados se usarán para los nombres de las propiedades y los parámetros de los constructores.</description>
    </item>
    
    <item>
      <title>Patrones activos</title>
      <link>https://www.wikiod.com/es/fsharp/patrones-activos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/patrones-activos/</guid>
      <description>Patrones activos simples # Los patrones activos son un tipo especial de coincidencia de patrones en el que puede especificar categorías con nombre en las que pueden caer sus datos y luego usar esas categorías en declaraciones de coincidencia.
Para definir un patrón activo que clasifique los números como positivos, negativos o cero:
let (|Positive|Negative|Zero|) num = if num &amp;gt; 0 then Positive elif num &amp;lt; 0 then Negative else Zero Esto se puede usar en una expresión de coincidencia de patrones:</description>
    </item>
    
    <item>
      <title>Consejos y trucos de rendimiento de F#</title>
      <link>https://www.wikiod.com/es/fsharp/consejos-y-trucos-de-rendimiento-de-f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/consejos-y-trucos-de-rendimiento-de-f/</guid>
      <description>Medir y verificar sus suposiciones de desempeño # Este ejemplo está escrito con F# en mente pero las ideas son aplicables en todos ambientes
La primera regla al optimizar el rendimiento es no confiar en suposiciones; Siempre mida y verifique sus suposiciones.
Como no estamos escribiendo código de máquina directamente, es difícil predecir cómo el compilador y JIT:er transforman su programa en código de máquina. Es por eso que necesitamos Medir el tiempo de ejecución para ver que obtenemos la mejora de rendimiento que esperamos y Verifique que el programa real no contenga ninguna sobrecarga oculta.</description>
    </item>
    
    <item>
      <title>mónadas</title>
      <link>https://www.wikiod.com/es/fsharp/monadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/monadas/</guid>
      <description>La comprensión de las mónadas viene de la práctica # Este tema está dirigido a desarrolladores de F# de nivel intermedio a avanzado
&amp;ldquo;¿Qué son las mónadas?&amp;rdquo; es una pregunta común. Esto es fácil de responder pero como en [Guía del autoestopista galáctico](https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe. 2C_y_Todo_.2842.29) nos damos cuenta de que no entendemos la respuesta porque no sabíamos lo que estábamos preguntando.
Muchos creen que la forma de entender las mónadas es practicándolas.</description>
    </item>
    
    <item>
      <title>Memoización</title>
      <link>https://www.wikiod.com/es/fsharp/memoizacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/memoizacion/</guid>
      <description>Memorización simple # La memorización consiste en almacenar en caché los resultados de la función para evitar calcular el mismo resultado varias veces. Esto es útil cuando se trabaja con funciones que realizan cálculos costosos.
Podemos usar una función factorial simple como ejemplo:
let factorial index = let rec innerLoop i acc = match i with | 0 | 1 -&amp;gt; acc | _ -&amp;gt; innerLoop (i - 1) (acc * i) innerLoop index 1 Llamar a esta función varias veces con el mismo parámetro da como resultado el mismo cálculo una y otra vez.</description>
    </item>
    
    <item>
      <title>El tipo de unidad</title>
      <link>https://www.wikiod.com/es/fsharp/el-tipo-de-unidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/el-tipo-de-unidad/</guid>
      <description>¿De qué sirve una tupla 0? # Una tupla de 2 o una tupla de 3 representan un grupo de elementos relacionados. (Puntos en el espacio 2D, valores RGB de un color, etc.) Una tupla de 1 no es muy útil ya que podría reemplazarse fácilmente con un solo int.
Una tupla 0 parece aún más inútil ya que no contiene absolutamente nada. Sin embargo, tiene propiedades que lo hacen muy útil en lenguajes funcionales como F#.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/fsharp/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/funciones/</guid>
      <description>Tubería hacia adelante y hacia atrás # Los operadores de tubería se utilizan para pasar parámetros a una función de una manera simple y elegante. Permite eliminar valores intermedios y hacer que las llamadas a funciones sean más fáciles de leer.
En F#, hay dos operadores de tubería:
Adelante (|&amp;gt;): Pasar parámetros de izquierda a derecha
let print message = printf &amp;quot;%s&amp;quot; message // &amp;quot;Hello World&amp;quot; will be passed as a parameter to the print function &amp;quot;Hello World&amp;quot; |&amp;gt; print Atrás (&amp;lt;|): Pasar parámetros de derecha a izquierda</description>
    </item>
    
    <item>
      <title>1 Código F# WPF detrás de la aplicación con FsXaml</title>
      <link>https://www.wikiod.com/es/fsharp/1-codigo-f-wpf-detras-de-la-aplicacion-con-fsxaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/1-codigo-f-wpf-detras-de-la-aplicacion-con-fsxaml/</guid>
      <description>La mayoría de los ejemplos encontrados para la programación F# WPF parecen tratar con el patrón MVVM, y algunos con MVC, pero casi ninguno muestra correctamente cómo ponerse en marcha con el código &amp;ldquo;bueno y antiguo&amp;rdquo; detrás.
El código detrás del patrón es muy fácil de usar tanto para la enseñanza como para la experimentación. Se utiliza en numerosos libros de introducción y material de aprendizaje en la web. Es por eso.</description>
    </item>
    
    <item>
      <title>La coincidencia de patrones</title>
      <link>https://www.wikiod.com/es/fsharp/la-coincidencia-de-patrones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/fsharp/la-coincidencia-de-patrones/</guid>
      <description>La coincidencia de patrones es una característica poderosa de muchos lenguajes funcionales, ya que a menudo permite que la bifurcación se maneje de manera muy sucinta en comparación con el uso de múltiples declaraciones de estilo if/else if/else. Sin embargo, dadas suficientes opciones y [guardias &amp;ldquo;cuando&amp;rdquo;] 1, la coincidencia de patrones también puede volverse detallada y difícil de entender de un vistazo.
Cuando esto sucede, los patrones activos de F# pueden ser una excelente manera de dar nombres significativos a la lógica coincidente, lo que simplifica el código y también permite su reutilización.</description>
    </item>
    
  </channel>
</rss>

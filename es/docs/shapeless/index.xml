<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial sin forma on </title>
    <link>https://www.wikiod.com/es/docs/shapeless/</link>
    <description>Recent content in Tutorial sin forma on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/shapeless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con sin forma</title>
      <link>https://www.wikiod.com/es/shapeless/comenzando-con-sin-forma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shapeless/comenzando-con-sin-forma/</guid>
      <description>Instalaci贸n o configuraci贸n # Instrucciones detalladas sobre c贸mo configurar o instalar sin forma.</description>
    </item>
    
    <item>
      <title>Derivaci贸n de clases de tipos</title>
      <link>https://www.wikiod.com/es/shapeless/derivacion-de-clases-de-tipos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shapeless/derivacion-de-clases-de-tipos/</guid>
      <description>Clase de tipo de producto # trait Show[T] { def show(t: T): String } object Show extends ProductTypeClassCompanion[Show] { def apply[T](implicit T: Show[T]) = T def from[T](f: T =&amp;gt; String): Show[T] = new Show[T] { def show(t: T): String = f(t) } implicit val string = from[String](_.reverse) implicit val int = from[Int](Integer.toHexString) object typeClass extends ProductTypeClass[Show] { override def product[H, T &amp;lt;: HList](ch: Show[H], ct: Show[T]): Show[::[H, T]] = from(ht =&amp;gt; ch.</description>
    </item>
    
  </channel>
</rss>

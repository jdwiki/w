<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arduinotutorial on </title>
    <link>https://www.wikiod.com/es/docs/arduino/</link>
    <description>Recent content in arduinotutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con arduino</title>
      <link>https://www.wikiod.com/es/arduino/empezando-con-arduino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/empezando-con-arduino/</guid>
      <description>Solo lo mínimo # Aquí está el boceto de Arduino &amp;lsquo;mínimo&amp;rsquo;. Esto se puede cargar en el IDE de Arduino eligiendo &amp;lsquo;Archivo&amp;gt; Ejemplos&amp;gt; 01. Conceptos básicos&amp;gt; Mínimo básico&amp;rsquo;.
void setup() { // put your setup code here, to run once } void loop() { // put your main code here, to run repeatedly } El código en la función setup() se ejecutará una vez cuando se inicie el programa. Esto es útil para configurar pines de E/S, inicializar variables, etc.</description>
    </item>
    
    <item>
      <title>PWM - Modulación de ancho de pulso</title>
      <link>https://www.wikiod.com/es/arduino/pwm---modulacion-de-ancho-de-pulso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/pwm---modulacion-de-ancho-de-pulso/</guid>
      <description>Controla un motor DC a través del puerto serie usando PWM # En este ejemplo, nuestro objetivo es realizar una de las tareas más comunes: Tengo un pequeño motor de CC por ahí, ¿cómo uso mi Arduino para controlarlo? Fácil, con PWM y comunicación en serie, usando la función analogWrite() y la biblioteca Serial.
Los basicos # La modulación de ancho de pulso o PWM para abreviar es una técnica para imitar señales analógicas utilizando una salida digital.</description>
    </item>
    
    <item>
      <title>Usando Arduino con Atmel Studio 7</title>
      <link>https://www.wikiod.com/es/arduino/usando-arduino-con-atmel-studio-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/usando-arduino-con-atmel-studio-7/</guid>
      <description>Configuración # Descargue e instale Atmel Studio 7 desde aquí. Compra un depurador. Puede arreglárselas con un programador de ISP, pero si desea capacidades de depuración, que es una de las grandes ventajas de usar Atmel Studio, querrá un depurador. Recomiendo Atmel ICE, ya que proporciona capacidades de depuración para arduinos basados ​​en AVR (como Uno, pro mini, etc.) y Arduinos basados ​​en ARM, como Zero y Due. Si tiene un presupuesto ajustado, puede obtenerlo sin la caja de plástico y tenga cuidado de no sorprenderlo.</description>
    </item>
    
    <item>
      <title>Comunicación SPI</title>
      <link>https://www.wikiod.com/es/arduino/comunicacion-spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/comunicacion-spi/</guid>
      <description>Señales de selección de chip # La mayoría de los esclavos tienen una entrada activa de selección de chip bajo. Entonces, el código adecuado para inicializar y usar un pin de selección de chip es este:
#define CSPIN 1 // or whatever else your CS pin is // init: pinMode(CSPIN, OUTPUT); digitalWrite(CSPIN, 1); // deselect // use: digitalWrite(CSPIN, 0); // select ... perform data transfer ... digitalWrite(CSPIN, 1); // deselect Deseleccionar un esclavo es tan importante como seleccionarlo, porque un esclavo puede controlar la línea MISO mientras está seleccionado.</description>
    </item>
    
    <item>
      <title>pines de hardware</title>
      <link>https://www.wikiod.com/es/arduino/pines-de-hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/pines-de-hardware/</guid>
      <description>##Arduino Uno R3 Los microcontroladores usan pines para interactuar con el resto del circuito. Estos pines generalmente serán pines de entrada/salida, vin o tierra. Los pines de E/S pueden ser pines de E/S digitales simples, o pueden tener algunas características especiales como poder variar el voltaje de su salida usando modulación de ancho de pulso. Aquí hay un esquema del Arduino R3 Uno y sus pines.
(fuente)
Pines PWM
PWM le permite controlar el voltaje de la salida cambiando la salida entre alta y baja muy rápidamente.</description>
    </item>
    
    <item>
      <title>Comunicación serial</title>
      <link>https://www.wikiod.com/es/arduino/comunicacion-serial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/comunicacion-serial/</guid>
      <description>Sintaxis # Serial.begin(speed) // Abre el puerto serie a la velocidad en baudios dada Serial.begin(velocidad, configuración) Serial[1-3].begin(speed) // ¡Solo Arduino Mega! Al escribir 1-3 significa que puede elegir entre los números 1 a 3 al elegir el puerto serie. Serial[1-3].begin(speed, config) // ¡Solo Arduino Mega! Al escribir 1-3 significa que puede elegir entre los números 1 a 3 al elegir el puerto serie. Serial.peek() // Lee el siguiente byte de entrada sin eliminarlo del búfer Serial.</description>
    </item>
    
    <item>
      <title>Cómo se integra Python con Arduino Uno</title>
      <link>https://www.wikiod.com/es/arduino/como-se-integra-python-con-arduino-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/como-se-integra-python-con-arduino-uno/</guid>
      <description>Sintaxis # Serial.begin(baudrate) // Establece la velocidad en baudios (bits por segundo) para la transmisión de datos en serie Serial.println(valor) // Imprimir datos en el puerto serie seguido de Retorno de carro \r y carácter de nueva línea \n serial.Serial((puerto=Ninguno, velocidad de transmisión=9600, tamaño de bytes=OCHOBITS, paridad=PARIDAD_NINGUNA, bits de parada=BITS_DETENCIÓN_UNO, tiempo de espera=Ninguno, xonxoff=False, rtscts=False, write_timeout=Ninguno, dsrdtr=False, inter_byte_timeout=Ninguno ) // Inicializar el puerto serie con todos los parámetros serial.readline() // Leer datos en serie que contienen retorno de carro \r y carácter de nueva línea \n Parámetros # Parámetro Detalles serie El paquete de Python contiene clases y métodos para acceder al puerto serie tiempo El paquete de Python incluye funciones relacionadas con el tiempo Uso un Arduino Uno con Arduino IDE 1.</description>
    </item>
    
    <item>
      <title>Gestión del tiempo</title>
      <link>https://www.wikiod.com/es/arduino/gestion-del-tiempo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/gestion-del-tiempo/</guid>
      <description>Sintaxis # milis largos sin firmar()
micros largos sin firmar()
retraso de anulación (milisegundos largos sin firmar)
anular los microsegundos de retraso (microsegundos largos sin firmar)
Ver el encabezado elapsedMillis para constructores y operadores de esa clase. En breve:
Millis transcurridos Millis transcurridosObjeto; crea un objeto para realizar un seguimiento del tiempo desde que se creó o desde algún otro punto establecido explícitamente en el tiempo
transcurrido MillisObject = 0; restablecer el tiempo rastreado por el objeto a &amp;ldquo;desde ahora&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Cómo almacenar variables en EEPROM y usarlas para almacenamiento permanente</title>
      <link>https://www.wikiod.com/es/arduino/como-almacenar-variables-en-eeprom-y-usarlas-para-almacenamiento-permanente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/como-almacenar-variables-en-eeprom-y-usarlas-para-almacenamiento-permanente/</guid>
      <description>Sintaxis # EEPROM.write(dirección, valor); //(Almacenar variables en EEPROM en una dirección particular) EEPROM.read(dirección); //(Recuperar valores de EEPROM y leer datos almacenados en EEPROM) Parámetros # Parámetros de EEPROM.write Detalle dirección La dirección donde se almacenará el valor en EEPROM valor Variable principal a almacenar en EEPROM. Tenga en cuenta que se trata de un uint_8 (byte único): usted mismo debe dividir los tipos de datos de varios bytes en bytes individuales.</description>
    </item>
    
    <item>
      <title>Comunicación Bluetooth</title>
      <link>https://www.wikiod.com/es/arduino/comunicacion-bluetooth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/arduino/comunicacion-bluetooth/</guid>
      <description>Parámetros # método detalles SoftwareSerial.h Documentación SoftwareSerial(rxPin, txPin, lógica_inversa) Constructor. rxPin: pin de entrada (recepción) de datos, predeterminado en 0. txPin: pin de salida de datos (transmitido), predeterminado en 1. inverse_logic: si es verdadero, trata el valor BAJO como si fuera ALTO y HIGH como LOW al determinar valores de bit. por defecto es falso. comenzar (velocidad) Establece la velocidad en baudios para la comunicación en serie. Las velocidades de transmisión admitidas son 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 31250, 38400, 57600 y 115200.</description>
    </item>
    
  </channel>
</rss>

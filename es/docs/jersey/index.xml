<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de camiseta on </title>
    <link>https://www.wikiod.com/es/docs/jersey/</link>
    <description>Recent content in Tutorial de camiseta on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/jersey/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con la camiseta</title>
      <link>https://www.wikiod.com/es/jersey/empezando-con-la-camiseta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jersey/empezando-con-la-camiseta/</guid>
      <description>Ejemplo de operaciones CRUD en Jersey # Este ejemplo demuestra el uso de los métodos HTTP GET, POST, PUT y DELETE para realizar operaciones CRUD en un recurso REST
Estoy usando el siguiente software, marcos y herramientas:
Camiseta 2.25.1 JDK 1.7.x (Java 7) Eclipse IDE Kepler Apache experto 3.3.9 Apache Tomcat 7.x Siga los pasos a continuación para crear la solicitud de Jersey requerida
Paso 1: Cree un nuevo proyecto maven usando el arquetipo maven-archetype-webapp en Eclipse IDE eligiendo Archivo-&amp;gt;Nuevo-&amp;gt;Proyecto Maven</description>
    </item>
    
    <item>
      <title>Inyección de dependencia con Jersey</title>
      <link>https://www.wikiod.com/es/jersey/inyeccion-de-dependencia-con-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jersey/inyeccion-de-dependencia-con-jersey/</guid>
      <description>Inyección de dependencia básica usando HK2 de Jersey # Jersey (2) usa HK2 como su sistema de inyección de dependencia (DI). Podemos usar otros sistemas de inyección, pero su infraestructura está construida con HK2, y nos permite usarlo también dentro de nuestras aplicaciones.
Configurar una inyección de dependencia simple con Jersey requiere solo unas pocas líneas de código. Digamos, por ejemplo, que tenemos un servicio que nos gustaría inyectar en nuestros recursos.</description>
    </item>
    
    <item>
      <title>Usando Spring Boot con Jersey</title>
      <link>https://www.wikiod.com/es/jersey/usando-spring-boot-con-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jersey/usando-spring-boot-con-jersey/</guid>
      <description>Aplicación sencilla con Spring Boot y Jersey # Spring Boot es un marco de arranque para aplicaciones Spring. También tiene soporte perfecto para integrarse con Jersey. Una de las ventajas de esto (desde la perspectiva de un usuario de Jersey) es que tiene acceso al vasto ecosistema de Spring.
Para comenzar, cree un nuevo proyecto Maven independiente (no wepapp). También podemos crear una aplicación web, pero para esta guía, solo usaremos una aplicación independiente.</description>
    </item>
    
    <item>
      <title>Soporte MVC de Jersey</title>
      <link>https://www.wikiod.com/es/jersey/soporte-mvc-de-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jersey/soporte-mvc-de-jersey/</guid>
      <description>MVC Frameworks como Spring MVC se utilizan para crear aplicaciones web que sirven páginas web dinámicas. Jersey, aunque se sabe que es un marco REST, también tiene soporte para crear páginas web dinámicas utilizando su módulo MVC.
Jersey MVC Hola mundo # Para comenzar, cree una nueva aplicación web Maven (cómo hacerlo está fuera del alcance de este ejemplo). En su pom.xml, agregue las siguientes dos dependencias
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>Configuración de JAX-RS en Jersey</title>
      <link>https://www.wikiod.com/es/jersey/configuracion-de-jax-rs-en-jersey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jersey/configuracion-de-jax-rs-en-jersey/</guid>
      <description>Filtro CORS de Java Jersey para solicitudes de origen cruzado # Configuración de Java Jersey # Este ejemplo ilustra cómo configurar Jersey para que pueda comenzar a usarlo como marco de implementación de JAX-RS para su API RESTful.
Suponiendo que ya haya instalado Apache Maven, siga estos pasos para configurar Jersey:
Cree la estructura del proyecto web maven, en la terminal (ventanas) ejecute el siguiente comando mvn arquetipo:generar -DgroupId= com.stackoverflow.rest -DartifactId= jersey-ws-demo -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial gcc on </title>
    <link>https://www.wikiod.com/es/docs/gcc/</link>
    <description>Recent content in tutorial gcc on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con gcc</title>
      <link>https://www.wikiod.com/es/gcc/comenzando-con-gcc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gcc/comenzando-con-gcc/</guid>
      <description>&amp;ldquo;¡Hola Mundo!&amp;rdquo; con opciones de línea de comandos comunes # Para programas con un solo archivo fuente, usar gcc es simple.
/* File name is hello_world.c */ #include &amp;lt;stdio.h&amp;gt; int main(void) { int i; printf(&amp;quot;Hello world!\n&amp;quot;); } Para compilar el archivo hello_world.c desde la línea de comando:
gcc hello_world.c gcc luego compilará el programa y enviará el ejecutable al archivo a.out. Si desea nombrar el ejecutable, use la opción -o.</description>
    </item>
    
    <item>
      <title>Cobertura de código gcov</title>
      <link>https://www.wikiod.com/es/gcc/cobertura-de-codigo-gcov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gcc/cobertura-de-codigo-gcov/</guid>
      <description>GCC proporciona alguna documentación de gcov [aquí] (https://gcc.gnu.org/onlinedocs/gcc/Gcov.html)
Gcovr y Lcov se pueden usar para ayudar a generar y resumir los resultados de cobertura.
Introducción # La cobertura de código es una medida que se utiliza para medir la frecuencia con la que se ejecuta cada declaración de código fuente y rama. Esta medida suele ser necesaria cuando se ejecuta un conjunto de pruebas para garantizar que el conjunto de pruebas pruebe la mayor parte posible del código.</description>
    </item>
    
    <item>
      <title>Advertencias</title>
      <link>https://www.wikiod.com/es/gcc/advertencias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gcc/advertencias/</guid>
      <description>Sintaxis # gcc [-Wopción [-Wopción [&amp;hellip;]]] archivo-src Parámetros # Parámetro Detalles opción Se puede utilizar para habilitar o deshabilitar las advertencias. Puede convertir advertencias en errores. archivo-src El archivo fuente que se va a compilar. Es una buena práctica habilitar la mayoría de las advertencias mientras se desarrolla un software.
Habilitar casi todas las advertencias # Archivo fuente C # gcc -Wall -Wextra -o main main.c Archivo fuente C++ # g++ -Wall -Wextra -Wconversion -Woverloaded-virtual -o main main.</description>
    </item>
    
    <item>
      <title>Extensiones GNU C</title>
      <link>https://www.wikiod.com/es/gcc/extensiones-gnu-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gcc/extensiones-gnu-c/</guid>
      <description>El compilador GNU C viene con algunas características geniales que no están especificadas por los estándares C. Estas extensiones se utilizan mucho en el software del sistema y son una gran herramienta para la optimización del rendimiento.
Atributo empaquetado # empaquetado es un atributo variable que se usa con estructuras y uniones para minimizar los requisitos de memoria.
#include &amp;lt;stdio.h&amp;gt; struct foo { int a; char c; }; struct __attribute__((__packed__))foo_packed { int a; char c; }; int main() { printf(&amp;quot;Size of foo: %d\n&amp;quot;, sizeof(struct foo)); printf(&amp;quot;Size of packed foo: %d\n&amp;quot;, sizeof(struct foo_packed)); return 0; } En mi Linux de 64 bits,</description>
    </item>
    
    <item>
      <title>Optimizaciones de GCC</title>
      <link>https://www.wikiod.com/es/gcc/optimizaciones-de-gcc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gcc/optimizaciones-de-gcc/</guid>
      <description>El compilador GNU ofrece varios niveles de optimización para el proceso de compilación. Estas optimizaciones se utilizan para mejorar el rendimiento del código y/o el tamaño del código. La compilación de un código con las optimizaciones activadas suele tardar más en completarse.
Este comando le dice qué optimizaciones están disponibles en su sistema: $gcc -Q &amp;ndash;help=optimizations
Aquí hay una documentación detallada de las opciones para controlar las optimizaciones:
https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
Diferencia entre códigos compilados con O0 y O3 # Escribí un código C simple foo.</description>
    </item>
    
  </channel>
</rss>

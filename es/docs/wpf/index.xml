<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WPFTutorial on </title>
    <link>https://www.wikiod.com/es/docs/wpf/</link>
    <description>Recent content in WPFTutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con wpf</title>
      <link>https://www.wikiod.com/es/wpf/comenzando-con-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/comenzando-con-wpf/</guid>
      <description>Aplicación Hola Mundo # Para crear y ejecutar un nuevo proyecto WPF en Visual Studio:
Haga clic en Archivo → Nuevo → Proyecto Seleccione la plantilla haciendo clic en Plantillas → Visual C# → Windows → Aplicación WPF y presione OK: Abra el archivo MainWindow.xaml en Solution Explorer (si no ve la ventana Solution Explorer, ábrala haciendo clic en Ver → Solution Explorer): En la sección XAML (por defecto debajo de la sección Diseño) agrega este código</description>
    </item>
    
    <item>
      <title>MVVM en WPF</title>
      <link>https://www.wikiod.com/es/wpf/mvvm-en-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/mvvm-en-wpf/</guid>
      <description>Modelos y Ver-Modelos
La definición de un modelo a menudo se debate acaloradamente, y la línea entre un modelo y un modelo de vista puede ser borrosa. Algunos prefieren no &amp;ldquo;contaminar&amp;rdquo; sus modelos con la interfaz INotifyPropertyChanged, y en su lugar duplican las propiedades del modelo en el modelo de vista, que sí implementa esta interfaz. Como muchas cosas en el desarrollo de software, no hay una respuesta correcta o incorrecta.</description>
    </item>
    
    <item>
      <title>Crear una pantalla de bienvenida en WPF</title>
      <link>https://www.wikiod.com/es/wpf/crear-una-pantalla-de-bienvenida-en-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/crear-una-pantalla-de-bienvenida-en-wpf/</guid>
      <description>Cuando se iniciaba la aplicación WPF, un tiempo de ejecución de lenguaje actual (CLR) podía tardar un tiempo en inicializar .NET Framework. Como resultado, la primera ventana de la aplicación puede aparecer algún tiempo después de que se inicie la aplicación, según la complejidad de la aplicación.
La pantalla de bienvenida en WPF permite que la aplicación muestre una imagen estática o contenido dinámico personalizado durante la inicialización antes de que aparezca la primera ventana.</description>
    </item>
    
    <item>
      <title>Introducción al enlace de datos de WPF</title>
      <link>https://www.wikiod.com/es/wpf/introduccion-al-enlace-de-datos-de-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/introduccion-al-enlace-de-datos-de-wpf/</guid>
      <description>Sintaxis # {Binding PropertyName} es equivalente a {Binding Path=PropertyName} {Binding Path=AlgunaPropiedad.AlgunaOtraPropiedad.YetOtraPropiedad} {Binding Path=SomeListProperty1} Parámetros # Parámetro Detalles Camino Especifica la ruta a la que enlazar. Si no se especifica, se vincula al propio DataContext. Activador de fuente de actualización Especifica cuándo se actualiza el valor del origen de enlace. El valor predeterminado es LostFocus. El valor más utilizado es PropertyChanged. Modo Típicamente OneWay o TwoWay. Si el enlace no lo especifica, el valor predeterminado es OneWay a menos que el destino del enlace solicite que sea TwoWay.</description>
    </item>
    
    <item>
      <title>Convertidores de valores y multivalores</title>
      <link>https://www.wikiod.com/es/wpf/convertidores-de-valores-y-multivalores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/convertidores-de-valores-y-multivalores/</guid>
      <description>Parámetros # Parámetro Detalles valor El valor producido por el origen de enlace. valores La matriz de valores, producida por la fuente de enlace. tipo de destino El tipo de la propiedad de destino de enlace. parámetro El parámetro del convertidor a usar. cultura La referencia cultural que se utilizará en el convertidor. Qué son IValueConverter e IMultiValueConverter # IValueConverter e IMultiValueConverter: interfaces que proporcionan una forma de aplicar una lógica personalizada a un enlace.</description>
    </item>
    
    <item>
      <title>Propiedades de dependencia</title>
      <link>https://www.wikiod.com/es/wpf/propiedades-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/propiedades-de-dependencia/</guid>
      <description>Las propiedades de dependencia son un tipo de propiedad que se extiende a una propiedad CLR. Mientras que una propiedad CLR se lee directamente de un miembro de su clase, una propiedad de dependencia se resolverá dinámicamente al llamar al método GetValue() que su objeto obtiene a través de la herencia de la clase DependencyObject base.
Esta sección desglosará las propiedades de dependencia y explicará su uso tanto conceptualmente como a través de ejemplos de código.</description>
    </item>
    
    <item>
      <title>Arquitectura WPF</title>
      <link>https://www.wikiod.com/es/wpf/arquitectura-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/arquitectura-wpf/</guid>
      <description>DispatcherObjeto # Deriva de # Objeto
Miembros clave # public Dispatcher Dispatcher { get; } Resumen # La mayoría de los objetos en WPF se derivan de DispatcherObject, que proporciona las construcciones básicas para manejar la concurrencia y los subprocesos. Dichos objetos están asociados con un Dispatcher.
Solo el subproceso en el que se creó Dispatcher puede acceder directamente a DispatcherObject. Para acceder a un DispatcherObject desde un subproceso que no sea el subproceso en el que se creó DispatcherObject, se requiere una llamada a Invoke o BeginInvoke en el Dispatcher al que está asociado el objeto.</description>
    </item>
    
    <item>
      <title>Estilos en WPF</title>
      <link>https://www.wikiod.com/es/wpf/estilos-en-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/estilos-en-wpf/</guid>
      <description>Notas introductorias # En WPF, un Estilo define los valores de una o más propiedades de dependencia para un elemento visual dado. Los estilos se utilizan en toda la aplicación para hacer que la interfaz de usuario sea más consistente (p. ej., dar a todos los botones de diálogo un tamaño uniforme) y para facilitar los cambios masivos (p. ej., cambiar el ancho de todos los botones).
Los estilos normalmente se definen en un ResourceDictionary en un nivel alto en la aplicación (por ejemplo, en App.</description>
    </item>
    
    <item>
      <title>Comportamientos de WPF</title>
      <link>https://www.wikiod.com/es/wpf/comportamientos-de-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/comportamientos-de-wpf/</guid>
      <description>Los comportamientos de WPF permiten que un desarrollador altere la forma en que los controles de WPF actúan en respuesta a los eventos del sistema y del usuario.
Los comportamientos heredan de la clase Behavior del espacio de nombres System.Windows.Interactity. Este espacio de nombres es parte del SDK de Expression Blend general, pero una versión más ligera, adecuada para bibliotecas de comportamiento, está disponible como un paquete nuget.
Comportamiento simple para interceptar eventos de la rueda del mouse # Implementación del comportamiento</description>
    </item>
    
    <item>
      <title>Localización de WPF</title>
      <link>https://www.wikiod.com/es/wpf/localizacion-de-wpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/wpf/localizacion-de-wpf/</guid>
      <description>El contenido de los controles se puede localizar mediante archivos de recursos, al igual que esto es posible en las clases. Para XAML hay una sintaxis específica, que es diferente entre una aplicación de C# y una de VB.
Los pasos son:
Para cualquier proyecto WPF: haga público el archivo de recursos, el valor predeterminado es interno. Para proyectos C# WPF, use el XAML proporcionado en el ejemplo Para proyectos VB WPF, use el XAML proporcionado en el ejemplo y cambie la propiedad de la herramienta personalizada a PublicVbMyResourcesResXFileCodeGenerator.</description>
    </item>
    
  </channel>
</rss>

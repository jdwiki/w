<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de hibernación on </title>
    <link>https://www.wikiod.com/es/docs/hibernate/</link>
    <description>Recent content in Tutorial de hibernación on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/hibernate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con hibernación</title>
      <link>https://www.wikiod.com/es/hibernate/primeros-pasos-con-hibernacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/primeros-pasos-con-hibernacion/</guid>
      <description>Uso de la configuración XML para configurar Hibernate # Creo un archivo llamado database-servlet.xml en algún lugar del classpath.
Inicialmente, su archivo de configuración se verá así:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:jdbc=&amp;quot;http://www.springframework.org/schema/jdbc&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&amp;quot;&amp;gt; &amp;lt;/beans&amp;gt; Notarás que importé los espacios de nombres Spring tx y jdbc. Esto se debe a que los usaremos bastante en este archivo de configuración.
Lo primero que debe hacer es habilitar la gestión de transacciones basada en anotaciones (&amp;quot;@Transactional&amp;quot;).</description>
    </item>
    
    <item>
      <title>Estrategia de nombres personalizados</title>
      <link>https://www.wikiod.com/es/hibernate/estrategia-de-nombres-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/estrategia-de-nombres-personalizados/</guid>
      <description>Creación y uso de una estrategia de nombres implícitos personalizados # La creación de una ImplicitNamingStrategy personalizada le permite ajustar cómo Hibernate asignará nombres a atributos de Entidad con nombres no explícitos, incluidas claves foráneas, claves únicas, columnas de identificador, columnas básicas y más.
Por ejemplo, por defecto, Hibernate generará claves foráneas que tienen hash y se ven similares a:
FKe6hidh4u0qh8y1ijy59s2ee6m Si bien esto a menudo no es un problema, es posible que desee que el nombre sea más descriptivo, como:</description>
    </item>
    
    <item>
      <title>Habilitardeshabilitar registro SQL</title>
      <link>https://www.wikiod.com/es/hibernate/habilitardeshabilitar-registro-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/habilitardeshabilitar-registro-sql/</guid>
      <description>El registro de estas consultas es lento, incluso más lento de lo que suele ser Hibernate. También utiliza una gran cantidad de espacio de registro. No utilice el inicio de sesión en escenarios donde se requiere rendimiento. Use esto solo cuando pruebe las consultas que genera Hibernate.
Usar un archivo de configuración de registro # En el archivo de configuración de registro de su elección, establezca el registro de los siguientes paquetes en los niveles que se muestran:</description>
    </item>
    
    <item>
      <title>Relaciones de entidad de Hibernate usando anotaciones</title>
      <link>https://www.wikiod.com/es/hibernate/relaciones-de-entidad-de-hibernate-usando-anotaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/relaciones-de-entidad-de-hibernate-usando-anotaciones/</guid>
      <description>Parámetros # Anotación Detalles @OneToOne Especifica una relación de uno a uno con un objeto correspondiente. @UnoParaMuchos Especifica un solo objeto que se asigna a muchos objetos. @MuchosParaUno Especifica una colección de objetos que se asignan a un único objeto. @Entidad Especifica un objeto que se asigna a una tabla de base de datos. @Tabla Especifica también qué tabla de base de datos asigna este objeto. @JoinColumn Especifica en qué columna se almacena una clave foránea.</description>
    </item>
    
    <item>
      <title>La optimización del rendimiento</title>
      <link>https://www.wikiod.com/es/hibernate/la-optimizacion-del-rendimiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/la-optimizacion-del-rendimiento/</guid>
      <description>Usar composición en lugar de herencia # Hibernate tiene algunas estrategias de herencia. El tipo de herencia JOINED hace un JOIN entre la entidad secundaria y la entidad principal.
El problema con este enfoque es que Hibernate siempre trae los datos de todas las tablas involucradas en la herencia.
Por ejemplo, si tiene las entidades Bicicleta y MountainBike usando el tipo de herencia JOINED:
@Entity @Inheritance(strategy = InheritanceType.JOINED) public abstract class Bicycle { } Y:</description>
    </item>
    
    <item>
      <title>Carga perezosa vs carga ansiosa</title>
      <link>https://www.wikiod.com/es/hibernate/carga-perezosa-vs-carga-ansiosa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/carga-perezosa-vs-carga-ansiosa/</guid>
      <description>Carga perezosa vs carga ansiosa # La obtención o carga de datos se puede clasificar principalmente en dos tipos: ansiosa y perezosa.
Para usar Hibernate, asegúrese de agregar la última versión a la sección de dependencias de su archivo pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.1.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 1. Carga ansiosa y carga perezosa
Lo primero que debemos discutir aquí es qué son la carga diferida y la carga ansiosa:
Eager Loading es un patrón de diseño en el que la inicialización de datos se produce en el acto.</description>
    </item>
    
    <item>
      <title>almacenamiento en caché</title>
      <link>https://www.wikiod.com/es/hibernate/almacenamiento-en-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/almacenamiento-en-cache/</guid>
      <description>Habilitación del almacenamiento en caché de Hibernate en WildFly # Para habilitar Almacenamiento en caché de segundo nivel para Hibernate en WildFly, agregue esta propiedad a su archivo persistence.xml:
&amp;lt;property name=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; También puede habilitar Query Caching con esta propiedad:
&amp;lt;property name=&amp;quot;hibernate.cache.use_query_cache&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; WildFly no requiere que defina un proveedor de caché al habilitar el caché de segundo nivel de Hibernate, ya que Infinispan se usa de manera predeterminada. Sin embargo, si desea utilizar un proveedor de caché alternativo, puede hacerlo con la propiedad hibernate.</description>
    </item>
    
    <item>
      <title>Criterios y Proyecciones</title>
      <link>https://www.wikiod.com/es/hibernate/criterios-y-proyecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/criterios-y-proyecciones/</guid>
      <description>Usar filtros # @Filter se usa como campo WHERE, aquí algunos ejemplos
Entidad Estudiantil
@Entity @Table(name = &amp;quot;Student&amp;quot;) public class Student { /*...*/ @OneToMany @Filter(name = &amp;quot;active&amp;quot;, condition = &amp;quot;EXISTS(SELECT * FROM Study s WHERE state = true and s.id = study_id)&amp;quot;) Set&amp;lt;StudentStudy&amp;gt; studies; /* getters and setters methods */ } Entidad de estudio
@Entity @Table(name = &amp;quot;Study&amp;quot;) @FilterDef(name = &amp;quot;active&amp;quot;) @Filter(name = &amp;quot;active&amp;quot;, condition=&amp;quot;state = true&amp;quot;) public class Study { /*.</description>
    </item>
    
    <item>
      <title>Hibernate y JPA</title>
      <link>https://www.wikiod.com/es/hibernate/hibernate-y-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/hibernate-y-jpa/</guid>
      <description>Relación entre Hibernate y JPA # Hibernate es una implementación del estándar [JPA][1]. Como tal, todo lo dicho allí también es cierto para Hibernate.
Hibernate tiene algunas extensiones para JPA. Además, la forma de configurar un proveedor JPA es específica del proveedor. Esta sección de documentación solo debe contener lo que es específico de Hibernate.
[1]: https://www.wikiod.com/es/jpa/comenzando-con-jpa#Instalación o Configuración</description>
    </item>
    
    <item>
      <title>Consultas SQL nativas</title>
      <link>https://www.wikiod.com/es/hibernate/consultas-sql-nativas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/hibernate/consultas-sql-nativas/</guid>
      <description>Consulta sencilla # Suponiendo que tiene un control sobre el objeto Session de Hibernate, en este caso llamado session:
List&amp;lt;Object[]&amp;gt; result = session.createNativeQuery(&amp;quot;SELECT * FROM some_table&amp;quot;).list(); for (Object[] row : result) { for (Object col : row) { System.out.print(col); } } Esto recuperará todas las filas en some_table y las colocará en la variable resultado e imprimirá cada valor.
Ejemplo para obtener un resultado único # Object pollAnswered = getCurrentSession().createSQLQuery( &amp;quot;select * from TJ_ANSWERED_ASW where pol_id = &amp;quot;+pollId+&amp;quot; and prf_log = &#39;&amp;quot;+logid+&amp;quot;&#39;&amp;quot;).</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de griales on </title>
    <link>https://www.wikiod.com/es/docs/grails/</link>
    <description>Recent content in tutorial de griales on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/grails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con griales</title>
      <link>https://www.wikiod.com/es/grails/comenzando-con-griales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/grails/comenzando-con-griales/</guid>
      <description>Creando una aplicación # Para crear una aplicación Grails, use el comando grails create-app. El siguiente comando crea una aplicación Grails, llamada myapp en el directorio actual:
grails create-app fancy-app Ejecutarlo es tan simple como visitar el directorio de aplicaciones recién creado:
cd fancy-app y entonces
grails run-app // in order to run the app on a different port, e.g. 8888, use this instead grails run-app -port 8888 // in order to run the app with a secure communication grails run-app -https Instalación de Griales # Nota: GRAILS requiere un JDK de Java instalado (un entorno de ejecución JRE no es suficiente) en su sistema, antes de configurar Grails.</description>
    </item>
    
    <item>
      <title>Clases de dominio como recursos REST</title>
      <link>https://www.wikiod.com/es/grails/clases-de-dominio-como-recursos-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/grails/clases-de-dominio-como-recursos-rest/</guid>
      <description>La forma más fácil de crear una API RESTful en Grails es exponer una clase de dominio como un recurso REST. Esto se puede hacer agregando la transformación grails.rest.Resource a cualquier clase de dominio.
API REST simple con griales # import grails.rest.* @Resource(uri=&#39;/books&#39;) class Book { String title static constraints = { title blank:false } } Simplemente agregando la transformación de recursos y especificando un URI, su clase de dominio estará disponible automáticamente como un recurso REST en formatos XML o JSON.</description>
    </item>
    
    <item>
      <title>Despliegue</title>
      <link>https://www.wikiod.com/es/grails/despliegue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/grails/despliegue/</guid>
      <description>Jar ejecutable # Una de las formas más fáciles de implementar Grails 3.x es crear un archivo jar ejecutable que incruste un contenedor de servlet (Tomcat, Undertow, etc.) con la aplicación.
Modifica build.gradle:
// Remove or comment out the war plugin: // apply plugin:&amp;quot;war&amp;quot; // Enable the executable jar: springBoot { executable = true } // Optional: Customize the jar properties: // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html jar { archiveName(&#39;myapp.jar&#39;) } Construir usando ./gradlew ensamblar</description>
    </item>
    
    <item>
      <title>SGP</title>
      <link>https://www.wikiod.com/es/grails/sgp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/grails/sgp/</guid>
      <description>Parámetros # Variables y ámbitos Detalles aplicación ServletContext instancia contexto de aplicación Spring ApplicationContext instancia flash El objeto flash grailsAplicación AplicaciónGrails instancia fuera escritor de respuesta para escribir en el flujo de salida parámetros params objeto para recuperar los parámetros de la solicitud solicitud HttpServletRequest instancia respuesta HttpServletResponse instancia sesión HttpSession instancia Solicitud web GrailsWebRequest instancia Expresiones # En GSP, la sintaxis &amp;lt;%= %&amp;gt; rara vez se usa debido a la compatibilidad con expresiones GSP.</description>
    </item>
    
  </channel>
</rss>

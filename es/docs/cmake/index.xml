<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de cmake on </title>
    <link>https://www.wikiod.com/es/docs/cmake/</link>
    <description>Recent content in Tutorial de cmake on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con cmake</title>
      <link>https://www.wikiod.com/es/cmake/comenzando-con-cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/comenzando-con-cmake/</guid>
      <description>Instalación de CMake # Dirígete a la página de descarga de CMake y obtén un binario para tu sistema operativo, p. Windows, Linux o Mac OS X. En Windows, haga doble clic en el binario para instalarlo. En Linux, ejecute el binario desde una terminal.
En Linux, también puede instalar los paquetes desde el administrador de paquetes de la distribución. En Ubuntu 16.04 puede instalar la línea de comandos y la aplicación gráfica con:</description>
    </item>
    
    <item>
      <title>Configurar archivo</title>
      <link>https://www.wikiod.com/es/cmake/configurar-archivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/configurar-archivo/</guid>
      <description>configure_file es una función de CMake para copiar un archivo a otra ubicación y modificar su contenido.
Esta función es muy útil para generar archivos de configuración con rutas, variables personalizadas, usando una plantilla genérica.
Copie un archivo a otra ubicación y modifique su contenido.
configure_file(&amp;lt;input&amp;gt; &amp;lt;output&amp;gt; [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ]) Copia un archivo en el archivo y sustituye los valores de las variables a los que se hace referencia en el contenido del archivo.</description>
    </item>
    
    <item>
      <title>Variables y Propiedades</title>
      <link>https://www.wikiod.com/es/cmake/variables-y-propiedades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/variables-y-propiedades/</guid>
      <description>La simplicidad de las variables básicas de CMake desmiente la complejidad de la sintaxis de la variable completa. Esta página documenta los diversos casos de variables, con ejemplos, y señala las trampas que se deben evitar.
Sintaxis # set(variable_name value [descripción del tipo CACHE [FORCE]]) Los nombres de las variables distinguen entre mayúsculas y minúsculas. Sus valores son de tipo cadena. El valor de una variable se referencia a través de:</description>
    </item>
    
    <item>
      <title>Prueba y depuración</title>
      <link>https://www.wikiod.com/es/cmake/prueba-y-depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/prueba-y-depuracion/</guid>
      <description>Enfoque general para depurar al compilar con Make # Supongamos que make falla:
$ make Lánzalo en su lugar con make VERBOSE=1 para ver los comandos ejecutados. Luego ejecute directamente el comando del enlazador o compilador que verá. Intente que funcione agregando banderas o bibliotecas necesarias.
Luego, descubra qué cambiar, para que CMake pueda pasar los argumentos correctos al comando del compilador/vinculador:
qué cambiar en el sistema (qué bibliotecas instalar, qué versiones, versiones de CMake en sí) si el anterior falla, qué variables de entorno establecer o qué parámetros pasar a CMake de lo contrario, qué cambiar en CMakeLists.</description>
    </item>
    
    <item>
      <title>proyecto jerárquico</title>
      <link>https://www.wikiod.com/es/cmake/proyecto-jerarquico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/proyecto-jerarquico/</guid>
      <description>Enfoque simple sin paquetes # Ejemplo que crea un ejecutable (editor) y vincula una biblioteca (resaltado) a él. La estructura del proyecto es sencilla, necesita un CMakeLists maestro y un directorio para cada subproyecto:
CMakeLists.txt editor/ CMakeLists.txt src/ editor.cpp highlight/ CMakeLists.txt include/ highlight.h src/ highlight.cpp El maestro CMakeLists.txt contiene definiciones globales y la llamada add_subdirectory para cada subproyecto:
cmake_minimum_required(VERSION 3.0) project(Example) add_subdirectory(highlight) add_subdirectory(editor) CMakeLists.txt para la biblioteca le asigna fuentes e incluye directorios.</description>
    </item>
    
    <item>
      <title>Funciones de compilación y selección estándar de CC&#43;&#43;</title>
      <link>https://www.wikiod.com/es/cmake/funciones-de-compilacion-y-seleccion-estandar-de-cc-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/funciones-de-compilacion-y-seleccion-estandar-de-cc-/</guid>
      <description>Sintaxis # target_compile_features(objetivo PRIVADO|PÚBLICO|INTERFAZ característica1 [característica2 &amp;hellip;]) Compilación de requisitos de funciones # Las características requeridas del compilador se pueden especificar en un destino usando el comando target_compile_features:
add_library(foo foo.cpp ) target_compile_features(foo PRIVATE # scope of the feature cxx_constexpr # list of features ) Las características deben ser parte de CMAKE_C_COMPILE_FEATURES o CMAKE_CXX_COMPILE_FEATURES; cmake informa de un error de lo contrario. Cmake agregará las banderas necesarias como -std=gnu++11 a las opciones de compilación del objetivo.</description>
    </item>
    
    <item>
      <title>Cree conjuntos de pruebas con CTest</title>
      <link>https://www.wikiod.com/es/cmake/cree-conjuntos-de-pruebas-con-ctest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/cree-conjuntos-de-pruebas-con-ctest/</guid>
      <description>Conjunto de pruebas básico # # the usual boilerplate setup cmake_minimum_required(2.8) project(my_test_project LANGUAGES CXX) # tell CMake to use CTest extension enable_testing() # create an executable, which instantiates a runner from # GoogleTest, Boost.Test, QtTest or whatever framework you use add_executable(my_test test_main.cpp) # depending on the framework, you need to link to it target_link_libraries(my_test gtest_main) # now register the executable with CTest add_test(NAME my_test COMMAND my_test) La macro enable_testing() hace mucha magia.</description>
    </item>
    
    <item>
      <title>Proyectos de Empaque y Distribución</title>
      <link>https://www.wikiod.com/es/cmake/proyectos-de-empaque-y-distribucion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/proyectos-de-empaque-y-distribucion/</guid>
      <description>Sintaxis # # Empaquetar un directorio de compilación paquete [RUTA] # Usar un generador específico cpack -G [GENERADOR] [RUTA] # Proporcionar anulaciones opcionales cpack -G [GENERADOR] -C [CONFIGURACIÓN] -P [NOMBRE DEL PAQUETE] -R [VERSIÓN DEL PAQUETE] -B [DIRECTORIO DEL PAQUETE] &amp;ndash;vendor [PROVEEDOR DEL PAQUETE] CPack es una herramienta externa que permite el empaquetado rápido de proyectos CMake compilados mediante la recopilación de todos los datos necesarios directamente de los archivos CMakeLists.</description>
    </item>
    
    <item>
      <title>Construir objetivos</title>
      <link>https://www.wikiod.com/es/cmake/construir-objetivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/construir-objetivos/</guid>
      <description>Sintaxis # add_executable(target_name [EXCLUDE_FROM_ALL] source1 [source2&amp;hellip;]) add_library(lib_name [ESTÁTICO|COMPARTIDO|MÓDULO] [EXCLUIR_DE_TODO] fuente1 [fuente2 &amp;hellip;]) Ejecutables # Para crear un destino de compilación que produzca un ejecutable, se debe usar el comando add_executable:
add_executable(my_exe main.cpp utilities.cpp) Esto crea un objetivo de compilación, p. make my_exe para GNU make, con las invocaciones apropiadas del compilador configurado para producir un ejecutable my_exe a partir de los dos archivos fuente main.cpp y utilities.cpp.
De forma predeterminada, todos los destinos ejecutables se agregan al destino todos integrado (todos para GNU make, BUILD_ALL para MSVC).</description>
    </item>
    
    <item>
      <title>Integración de CMake en las herramientas de CI de GitHub</title>
      <link>https://www.wikiod.com/es/cmake/integracion-de-cmake-en-las-herramientas-de-ci-de-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/cmake/integracion-de-cmake-en-las-herramientas-de-ci-de-github/</guid>
      <description>Configurar Travis CI con stock CMake # Travis CI tiene CMake 2.8.7 preinstalado.
Un script .travis.yml mínimo para una compilación fuera de la fuente
language: cpp compiler: - gcc before_script: # create a build folder for the out-of-source build - mkdir build # switch to build directory - cd build # run cmake; here we assume that the project&#39;s # top-level CMakeLists.txt is located at &#39;..&#39; - cmake .. script: # once CMake has done its job we just build using make as usual - make # if the project uses ctest we can run the tests like this - make test Configure Travis CI con el CMake más reciente # La versión de CMake preinstalada en Travis es muy antigua.</description>
    </item>
    
  </channel>
</rss>

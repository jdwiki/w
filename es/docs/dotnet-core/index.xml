<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de .net-core on </title>
    <link>https://www.wikiod.com/es/docs/dotnet-core/</link>
    <description>Recent content in Tutorial de .net-core on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con .net-core</title>
      <link>https://www.wikiod.com/es/dotnet-core/primeros-pasos-con-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/primeros-pasos-con-net-core/</guid>
      <description>Creación de una aplicación de muestra de Hello World # Crea un directorio vacío en algún lugar&amp;hellip;
mkdir HelloWorld cd HelloWorld Luego use la tecnología de andamiaje incorporada para crear una muestra de Hello World
dotnet new console -o Este comando crea dos archivos:
HelloWorld.csproj describe las dependencias del proyecto, la configuración y el marco de destino Program.cs que define el código fuente para el punto de entrada principal y la consola que emite &amp;ldquo;Hello World&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Comprensión de System.Runtime frente a mscorlib</title>
      <link>https://www.wikiod.com/es/dotnet-core/comprension-de-systemruntime-frente-a-mscorlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/comprension-de-systemruntime-frente-a-mscorlib/</guid>
      <description>Cada biblioteca y lenguaje de programación .NET utiliza un conjunto de tipos de datos elementales como System.Int32, System.Object, System.Type o System.Uri. Estos tipos de datos forman la base de todas las demás estructuras, incluidas todas las bibliotecas .NET personalizadas. Todos estos tipos están alojados en una biblioteca base, que es mscorlib o System.Runtime.
Las bibliotecas que se pueden usar con .NET Core se basan en la biblioteca central System.Runtime mientras que para .</description>
    </item>
    
    <item>
      <title>Componentes y control de versiones en .NET Core</title>
      <link>https://www.wikiod.com/es/dotnet-core/componentes-y-control-de-versiones-en-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/componentes-y-control-de-versiones-en-net-core/</guid>
      <description>Este documento cubre los diferentes componentes que conforman una distribución de .NET Core y cómo se controlan sus versiones. Este documento actualmente cubre las versiones 1.x.
Cómo se versionan los componentes en .NET Core.
Componentes # .NET Core consta de varios componentes, cada uno de los cuales está versionado independientemente y, a menudo, se pueden mezclar y combinar.
Marco compartido. Este contiene las API y la máquina virtual. y otros servicios de tiempo de ejecución necesarios para ejecutar aplicaciones .</description>
    </item>
    
    <item>
      <title>El global.json</title>
      <link>https://www.wikiod.com/es/dotnet-core/el-globaljson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/el-globaljson/</guid>
      <description>El archivo global.json es extremadamente poderoso y único para las aplicaciones .NET Core y ASP.NET Core.
Esquema # Almacén de esquemas:
{ &amp;quot;title&amp;quot;: &amp;quot;JSON schema for the ASP.NET global configuration files&amp;quot;, &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;additionalProperties&amp;quot;: true, &amp;quot;required&amp;quot;: [ &amp;quot;projects&amp;quot; ], &amp;quot;properties&amp;quot;: { &amp;quot;projects&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A list of project folders relative to this file.&amp;quot;, &amp;quot;items&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot; } }, &amp;quot;packages&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;The location to store packages&amp;quot; }, &amp;quot;sdk&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Specify information about the SDK.</description>
    </item>
    
    <item>
      <title>Creación de bibliotecas con .NET Core</title>
      <link>https://www.wikiod.com/es/dotnet-core/creacion-de-bibliotecas-con-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/creacion-de-bibliotecas-con-net-core/</guid>
      <description>Dependencias específicas de la plataforma # Puede especificar diferentes dependencias para cada plataforma:
&amp;quot;net45&amp;quot;: { &amp;quot;frameworkAssemblies&amp;quot;: { &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } }, &amp;quot;netstandard1.3&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0-rc2&amp;quot; } }, &amp;quot;netstandard1.4&amp;quot;: { &amp;quot;dependencies&amp;quot;: { &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;, &amp;quot;System.Linq&amp;quot;: &amp;quot;4.1.0&amp;quot; } } Cuando este proyecto se compila y empaqueta, cada objetivo del marco utilizará un conjunto diferente de dependencias:
net45 (proyectos dirigidos a .NET 4.5+) usará el ensamblado System.Linq del GAC. netstandard1.</description>
    </item>
    
    <item>
      <title>.NET Core con Docker</title>
      <link>https://www.wikiod.com/es/dotnet-core/net-core-con-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/net-core-con-docker/</guid>
      <description>Complete con ejemplos del uso de Docker en la plataforma .NET Core, imágenes base oficiales para la aplicación .NET Core y la aplicación .NET Core autohospedada también
Ejemplo de archivo Docker # La aplicación .NET Core debe publicarse usando dotnetpublish
FROM microsoft/dotnet:latest COPY bin/Debug/netcoreapp1.0/publish/ /root/ EXPOSE 5000 ENTRYPOINT dotnet /root/sampleapp.dll </description>
    </item>
    
    <item>
      <title>Interfaz de línea de comandos de .NET Core</title>
      <link>https://www.wikiod.com/es/dotnet-core/interfaz-de-linea-de-comandos-de-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/interfaz-de-linea-de-comandos-de-net-core/</guid>
      <description>Crear un paquete NuGet # Para crear un paquete NuGet a partir de un proyecto, ejecute este comando desde un directorio que contenga project.json:
dotnet pack El archivo .nupkg resultante se nombrará y versionará de acuerdo con las propiedades en project.json. Si hay varios marcos de referencia en el archivo del proyecto, el paquete los admitirá a todos.
Publicar y ejecutar un proyecto .NET Core # Vaya al directorio project.json y publique:</description>
    </item>
    
    <item>
      <title>Instalación de .NET Core en Linux</title>
      <link>https://www.wikiod.com/es/dotnet-core/instalacion-de-net-core-en-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/instalacion-de-net-core-en-linux/</guid>
      <description>Instalación genérica para distribuciones Linux # Si tiene una de las distribuciones de Linux compatibles, puede seguir los pasos en el sitio web de .NET Core: https://www.microsoft.com/net
Si tiene una distribución no compatible:
Descargue .NET Core SDK de los enlaces, eligiendo la distribución más cercana a la utilizada.
https://www.microsoft.com/net/download
Si tiene soporte para paquetes deb, puede instalar paquetes Ubuntu/Debian.
Si tiene soporte para paquetes yum, puede instalar paquetes Fedora.
Asegúrese de que su sistema tenga al menos:</description>
    </item>
    
    <item>
      <title>Primeros pasos con appsetting.json</title>
      <link>https://www.wikiod.com/es/dotnet-core/primeros-pasos-con-appsettingjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet-core/primeros-pasos-con-appsettingjson/</guid>
      <description>Si necesita más información, puede ir a ver documentación oficial de Microsoft
Configuración sencilla # Agregue este texto a appsettings.json
{ &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: 2, &amp;quot;subsectionKey&amp;quot;: { &amp;quot;suboption1&amp;quot;: &amp;quot;subvalue1&amp;quot; } } Ahora puede usar esta configuración en su aplicación, de esta manera
public class Program { static public IConfigurationRoot Configuration { get; set; } public static void Main(string[] args = null) { var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;quot;appsettings.json&amp;quot;); Configuration = builder.</description>
    </item>
    
  </channel>
</rss>

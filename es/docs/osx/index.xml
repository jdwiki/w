<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osx Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/osx/</link>
    <description>Recent content in osx Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/osx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con osx</title>
      <link>https://www.wikiod.com/es/osx/comenzando-con-osx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/comenzando-con-osx/</guid>
      <description>Descripción general de los marcos # Las aplicaciones escritas para macOS generalmente se escriben con Frameworks de Apple. Los marcos que usarán casi todas las aplicaciones son:
AppKit: para crear y administrar elementos de la interfaz de usuario Fundación: para objetos y operaciones comunes que no son de interfaz de usuario Hay otros marcos comunes que se usan en muchas, pero no en todas las aplicaciones:
CoreData - para almacenamiento de datos Despacho - para la gestión de múltiples subprocesos CoreGraphics: para dibujar tareas relacionadas con gráficos CoreAnimation: para la animación de elementos de la interfaz de usuario </description>
    </item>
    
    <item>
      <title>NSStoryboard</title>
      <link>https://www.wikiod.com/es/osx/nsstoryboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/nsstoryboard/</guid>
      <description>Abrir un nuevo controlador de ventana # Para abrir una nueva ventana, agregue el siguiente código en algún lugar donde pueda mantener una referencia a la nueva ventana (es decir, el delegado de la aplicación).
Rápido
let storyboard:NSStoryboard = NSStoryboard(name: &amp;quot;Main&amp;quot;, bundle: nil) guard let controller:NSWindowController = storyboard.instantiateControllerWithIdentifier(&amp;quot;myWindowController&amp;quot;) as? NSWindowController else { return /*or handle error*/ } controller.showWindow(self) C objetivo
NSStoryboard *storyBoard = [NSStoryboard storyboardWithName:@&amp;quot;Main&amp;quot; bundle:nil]; // get a reference to the storyboard myController = [storyBoard instantiateControllerWithIdentifier:@&amp;quot;secondWindowController&amp;quot;]; // instantiate your window controller [myController showWindow:self]; Una vez que cree su controlador, asegúrese de mantener una referencia a algún lugar fuera de la llamada a la función.</description>
    </item>
    
    <item>
      <title>NSMenuItem</title>
      <link>https://www.wikiod.com/es/osx/nsmenuitem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/nsmenuitem/</guid>
      <description>Consulte la documentación de Apple aquí: https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMenuItem_Class/
Habilitación de elementos del menú # Activar manualmente los elementos del menú # Para controlar manualmente el estado habilitado de los elementos de un menú, el menú que lo contiene debe deshabilitar la habilitación automática de sus elementos
Los menús pueden desactivar la habilitación automática de una de dos maneras:
En el Generador de interfaces En código menu.autoenablesItems = falso
Ambos mecanismos establecen la propiedad autoenablesItems en [NSMenu](https://developer.</description>
    </item>
    
    <item>
      <title>NSTextView</title>
      <link>https://www.wikiod.com/es/osx/nstextview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/nstextview/</guid>
      <description>NSTextView es el controlador principal de Apple del sistema de texto de AppKit. Contiene todo lo que necesita para crear un espacio de visor/editor de texto en aplicaciones OS X (renombrado macOS).
Creando un NSTextView # Gráficamente # En XCode, se puede crear un NSTextView simple arrastrando y soltando uno desde la Biblioteca de objetos.
Este NSTextView se encuentra dentro de un NSScrollView que se configura automáticamente para expandirse verticalmente con la vista de texto.</description>
    </item>
    
    <item>
      <title>NSRunbucle</title>
      <link>https://www.wikiod.com/es/osx/nsrunbucle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/nsrunbucle/</guid>
      <description>aplicación demonio simple # Un proceso daemon ejecuta un programa en segundo plano, generalmente sin interacción del usuario. El siguiente ejemplo muestra cómo crear un demonio y registrar un oyente, que supervisa todas las aplicaciones abiertas. La parte principal es la llamada de función NSRunLoop.mainRunLoop().run(), que inicia el daemon.
class MyObserver: NSObject { override init() { super.init() // app listeners NSWorkspace.sharedWorkspace().notificationCenter.addObserver(self, selector: &amp;quot;SwitchedApp:&amp;quot;, name: NSWorkspaceDidActivateApplicationNotification, object: nil) } func SwitchedApp(notification: NSNotification!</description>
    </item>
    
    <item>
      <title>Establecer variables de entorno</title>
      <link>https://www.wikiod.com/es/osx/establecer-variables-de-entorno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/establecer-variables-de-entorno/</guid>
      <description>En Mac OS X, puede establecer las variables de entorno en uno de los siguientes archivos:
~/.bashrc
~/.bash_perfil
~/.perfil
De forma predeterminada, Mac OS X no tiene los archivos anteriores, debe crearlos manualmente.
Agregar una ruta # 1.vim ~/.bash_profile
Es posible que el archivo no exista (si no es así, simplemente puede crearlo).
2.escriba esto y guarde el archivo:
export PATH=$PATH:YOUR_PATH_HERE </description>
    </item>
    
    <item>
      <title>NSFont</title>
      <link>https://www.wikiod.com/es/osx/nsfont/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/nsfont/</guid>
      <description>NSFont es el objeto que proporciona a las aplicaciones de Mac información de glifos y características de fuente que se utilizarán principalmente para la visualización. Aprenderá a crear y utilizar objetos NSFont de diversas formas, tanto comunes como poco comunes.
Creando un objeto NSFont # La forma preferida y más común de crear un objeto NSFont es la siguiente:
C objetivo # // Name is PostScript name of font; size is in points.</description>
    </item>
    
    <item>
      <title>Solicitar al usuario un archivo</title>
      <link>https://www.wikiod.com/es/osx/solicitar-al-usuario-un-archivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/solicitar-al-usuario-un-archivo/</guid>
      <description>NSOpenPanel proporciona una API para solicitar al usuario que abra un archivo. Este menú es la interfaz de usuario estándar presentada por el elemento de menú Abrir (⌘O).
Abriendo archivos # Abriendo cualquier archivo # NSOpenPanel *openPanel = [NSOpenPanel openPanel]; [openPanel beginWithCompletionHandler:^(NSInteger result) { NSURL *url = openPanel.URL; if (result == NSFileHandlingPanelCancelButton || !url) { return; } // do something with a URL }]; Permitir abrir múltiples archivos # NSOpenPanel *openPanel = [NSOpenPanel openPanel]; openPanel.</description>
    </item>
    
    <item>
      <title>Asociación de archivos</title>
      <link>https://www.wikiod.com/es/osx/asociacion-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/osx/asociacion-de-archivos/</guid>
      <description>Establecer mi aplicación como aplicación predeterminada para un tipo de archivo # - (NSString *) UTIforFileExtension:(NSString *) extension { NSString * UTIString = (NSString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (CFStringRef)extension, NULL); return [UTIString autorelease]; } - (BOOL) setMyselfAsDefaultApplicationForFileExtension:(NSString *) fileExtension { OSStatus returnStatus = LSSetDefaultRoleHandlerForContentType ( (CFStringRef) [self UTIforFileExtension:fileExtension], kLSRolesAll, (CFStringRef) [[NSBundle mainBundle] bundleIdentifier] ); if (returnStatus != 0) { NSLog(@&amp;quot;Got an error when setting default application - %d&amp;quot;, returnStatus); // Please see the documentation or LSInfo.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial básico de Entity Framework on </title>
    <link>https://www.wikiod.com/es/docs/entity-framework-core/</link>
    <description>Recent content in Tutorial básico de Entity Framework on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/entity-framework-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Entity Framework Core</title>
      <link>https://www.wikiod.com/es/entity-framework-core/primeros-pasos-con-entity-framework-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/entity-framework-core/primeros-pasos-con-entity-framework-core/</guid>
      <description>Modelar, consultar y guardar datos # Modelo # Con EF Core, el acceso a los datos se realiza mediante un modelo. Un modelo se compone de clases de entidad y un contexto derivado que representa una sesión con la base de datos, lo que le permite consultar y guardar datos.
Puede generar un modelo a partir de una base de datos existente, codificar manualmente un modelo para que coincida con su base de datos o usar Migraciones de EF para crear una base de datos a partir de su modelo (y evolucionarlo a medida que su modelo cambia con el tiempo).</description>
    </item>
    
    <item>
      <title>EF Core frente a EF6.x</title>
      <link>https://www.wikiod.com/es/entity-framework-core/ef-core-frente-a-ef6x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/entity-framework-core/ef-core-frente-a-ef6x/</guid>
      <description>Para obtener las últimas actualizaciones, consulte: Comparación de características
Comparación lado a lado # La siguiente tabla compara las funciones disponibles(1) en EF Core y EF6.x.
Tiene la intención de brindar una comparación de alto nivel y no enumera todas las funciones, ni intenta brindar detalles sobre las posibles diferencias entre cómo funciona la misma función.
Creación de un modelo EF6.x EF Núcleo 1.0.0 Modelado básico (clases, propiedades, etc.) Sí Sí Convenciones Sí Sí Convenciones personalizadas Sí Parcial Anotaciones de datos Sí Sí API fluida Sí Sí Herencia: Tabla por jerarquía (TPH) Sí Sí Herencia: Tabla por tipo (TPT) Sí Herencia: Tabla por clase concreta (TPC) Sí Propiedades del estado de sombra Sí Teclas alternativas Sí Muchos a muchos: con entidad conjunta Sí Sí Muchos a muchos: sin entidad de unión Sí Generación de claves: Base de datos Sí Sí Generación de claves: Cliente Sí Tipos complejos/de valor Sí Datos espaciales Sí Visualización gráfica del modelo Sí Editor gráfico de arrastrar y soltar Sí Formato del modelo: Código Sí Sí Formato del modelo: EDMX (XML) Sí Modelo de ingeniería inversa de la base de datos: línea de comando Sí Modelo de ingeniería inversa de la base de datos: asistente VS Sí Modelo de actualización incremental desde la base de datos Sí Consulta de datos EF6.</description>
    </item>
    
    <item>
      <title>Actualización de una relación Muchos a Muchos</title>
      <link>https://www.wikiod.com/es/entity-framework-core/actualizacion-de-una-relacion-muchos-a-muchos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/entity-framework-core/actualizacion-de-una-relacion-muchos-a-muchos/</guid>
      <description>Cómo actualizar una relación Muchos a Muchos en EF Core:
Ejemplo de edición de POST de MVC # Digamos que tenemos una clase de producto con varios colores que puede estar en muchos productos.
public class Product { public int ProductId { get; set; } public ICollection&amp;lt;ColorProduct&amp;gt; ColorProducts { get; set; } } public class ColorProduct { public int ProductId { get; set; } public int ColorId { get; set; } public virtual Color Color { get; set; } public virtual Product Product { get; set; } } public class Color { public int ColorId { get; set; } public ICollection&amp;lt;ColorProduct&amp;gt; ColorProducts { get; set; } } Usando esta extensión para hacerlo más fácil:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>progreso-4gl Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/progress-4gl/</link>
    <description>Recent content in progreso-4gl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/progress-4gl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el progreso-4gl</title>
      <link>https://www.wikiod.com/es/progress-4gl/primeros-pasos-con-el-progreso-4gl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/primeros-pasos-con-el-progreso-4gl/</guid>
      <description>Efervescencia # Otro ejemplo de programas de estilo &amp;ldquo;Hello World&amp;rdquo; es FizzBuzz.
DEFINE VARIABLE i AS INTEGER NO-UNDO. DEFINE VARIABLE cOut AS CHARACTER NO-UNDO. DO i = 1 TO 100: /* Dividable by 3: fizz */ IF i MODULO 3 = 0 THEN cOut = &amp;quot;Fizz&amp;quot;. /* Dividable by 5: buzz */ ELSE IF i MODULO 5 = 0 THEN cOut = &amp;quot;Buzz&amp;quot;. /* Otherwise just the number */ ELSE cOut = STRING(i).</description>
    </item>
    
    <item>
      <title>Compilando</title>
      <link>https://www.wikiod.com/es/progress-4gl/compilando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/compilando/</guid>
      <description>Compile el código de progreso como se llama &amp;ldquo;r-code&amp;rdquo; y normalmente se guarda en un archivo con la extensión .r. Hay un par de formas diferentes de compilar: usando la instrucción COMPILE o en Linux o AppBuilder: el compilador de aplicaciones integrado. Developer Studio (el entorno de Eclipse) tiene compilación integrada en su proceso de compilación.
Debe tener instalado 4GL Development u OpenEdge Studio para compilar programas 4GL que actualicen la base de datos.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/progress-4gl/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/funciones/</guid>
      <description>Una función definida por el usuario en Progress ABL es un módulo de programa reutilizable.
Una función debe declararse en el procedimiento &amp;ldquo;principal&amp;rdquo;. No se puede declarar dentro de un procedimiento o dentro de otra función. Una función en Progress ABL no es un &amp;ldquo;ciudadano de primera clase&amp;rdquo; a diferencia de los lenguajes de programación como Haskell o Javascript. No puede pasar una función como un parámetro de entrada o salida.</description>
    </item>
    
    <item>
      <title>trabajar con numeros</title>
      <link>https://www.wikiod.com/es/progress-4gl/trabajar-con-numeros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/trabajar-con-numeros/</guid>
      <description>Progress ABL admite tres formatos de números: números enteros y flotantes de 32 y 64 bits.
Operadores # Progress admite +/-* como operadores. No se pueden sobrecargar. La división siempre devuelve un decimal. Si alguno de los números en un cálculo es un decimal, se devolverá un decimal. De lo contrario, INTEGER o INT64.
No hay operador += o ++. Para aumentar o disminuir una variable, debe asignarla a sí misma más o menos algo.</description>
    </item>
    
    <item>
      <title>TEMP-TABLA</title>
      <link>https://www.wikiod.com/es/progress-4gl/temp-tabla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/temp-tabla/</guid>
      <description>La TEMP-TABLE es una característica muy poderosa de Progress ABL. Es una tabla temporal en memoria (en su mayoría al menos) que se puede usar para escribir lógica compleja. Se puede utilizar como parámetros de entrada/salida para procedimientos, funciones y otros programas. Una o más tablas temporales pueden constituir la base de un &amp;lsquo;DATASET&amp;rsquo; (a menudo llamado ProDataset).
Casi todo lo que se puede hacer con una tabla de base de datos de Progress nativa se puede hacer con una tabla temporal.</description>
    </item>
    
    <item>
      <title>Instrumentos de cuerda</title>
      <link>https://www.wikiod.com/es/progress-4gl/instrumentos-de-cuerda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/instrumentos-de-cuerda/</guid>
      <description>En Progress ABL hay dos tipos de cadenas, las definidas como CHARACTER y las definidas como LONGCHAR. Un archivo de más de 32 K de longitud es un LONGCHAR. La mayoría de las cadenas son, a menos que se especifique de otra manera, insensibles a mayúsculas y minúsculas.
Recuerde: ¡todas las posiciones comienzan con la posición 1!
Concatenar cadenas # Usando el operador + puedes concatenar fácilmente dos o más cadenas.</description>
    </item>
    
    <item>
      <title>Procedimientos</title>
      <link>https://www.wikiod.com/es/progress-4gl/procedimientos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/procedimientos/</guid>
      <description>Hay dos tipos de procedimientos en Progress ABL: procedimientos internos y prototipos de procedimientos que son fachadas de DLL de Windows o procedimientos de biblioteca compartida de Unix/Linux.
Al igual que con las funciones, los procedimientos no se pueden anidar. No puede anidar funciones en procedimientos y viceversa.
Se llama a un procedimiento con la sentencia RUN.
Sintaxis # EJECUTAR nombre de procedimiento. //Ejecuta un procedimiento llamado nombreprocedimiento.
EJECUTAR proc1(INTRODUCIR &amp;ldquo;HOLA&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>OS-utilidades</title>
      <link>https://www.wikiod.com/es/progress-4gl/os-utilidades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/os-utilidades/</guid>
      <description>Hay varias funciones y declaraciones integradas para acceder al sistema operativo.
OS-COMANDO # Ejecuta un comando del sistema operativo.
OS-COMMAND sin ninguna opción iniciará un nuevo shell y no saldrá de él; por lo tanto, en el sistema operativo gráfico, dejará una ventana &amp;ldquo;colgada&amp;rdquo;.
DEFINE VARIABLE cmd AS CHARACTER NO-UNDO. cmd = &amp;quot;dir&amp;quot;. OS-COMMAND VALUE(cmd). Hay tres opciones: SILENCIO, SIN ESPERA y SIN CONSOLA.
SILENCIOSO
Después de procesar un comando del sistema operativo, el shell de AVM se detiene.</description>
    </item>
    
    <item>
      <title>Consultas</title>
      <link>https://www.wikiod.com/es/progress-4gl/consultas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/consultas/</guid>
      <description>Los ejemplos se basarán en una copia de la base de datos de demostración Sports 2000 proporcionada con la instalación de Progress.
Cuando trabaje con consultas en Progreso, necesita:
DEFINE la consulta y establece contra qué búferes (tablas) y campos trabaja.
ABRIR la consulta con una cláusula específica WHERE que define cómo recuperar los registros. Posiblemente también ordenar (BY/BREAK BY)
OBTENGA los datos reales, que pueden ser PRIMERO, SIGUIENTE, ANTERIOR (para el anterior) o ÚLTIMO registro coincidente.</description>
    </item>
    
    <item>
      <title>declaración ENCONTRAR</title>
      <link>https://www.wikiod.com/es/progress-4gl/declaracion-encontrar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/progress-4gl/declaracion-encontrar/</guid>
      <description>La sentencia FIND se utiliza para recuperar un solo registro de una sola tabla. Tiene algunas limitaciones en comparación con FOR o QUERY, pero es una declaración simple y práctica para acceder rápidamente a los registros.
ENCUENTRA ejemplos básicos # Un ejemplo simple de sports2000:
FIND FIRST Customer NO-LOCK WHERE CustNum = 1 NO-ERROR. IF AVAILABLE Customer THEN DO: DISPLAY Customer.NAME. END. ELSE DO: MESSAGE &amp;quot;No record available&amp;quot;. END. PRIMERO: encuentre el primer registro que coincida con la consulta</description>
    </item>
    
  </channel>
</rss>

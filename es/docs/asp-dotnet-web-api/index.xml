<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-web-api Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/asp-dotnet-web-api/</link>
    <description>Recent content in asp.net-web-api Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/asp-dotnet-web-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con asp.net-web-api</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/primeros-pasos-con-aspnet-web-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/primeros-pasos-con-aspnet-web-api/</guid>
      <description>Instalación o configuración # Instrucciones detalladas sobre cómo configurar o instalar asp.net-web-api.
¿Qué y por qué API web ASP.NET? # ¿Qué? : Un marco totalmente compatible y extensible para construir puntos finales basados ​​en HTTP. En el mundo de HTML5, los dispositivos móviles y las modernas técnicas de desarrollo, HTTP se ha convertido en la opción predeterminada para crear servicios completos y escalables. La API web de ASP.NET proporciona un conjunto de opciones predeterminadas fáciles de usar, pero también proporciona una infraestructura de extensibilidad profunda para satisfacer las demandas de cualquier escenario que utilice HTTP.</description>
    </item>
    
    <item>
      <title>Negociación de contenido de API web ASP.NET</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/negociacion-de-contenido-de-api-web-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/negociacion-de-contenido-de-api-web-aspnet/</guid>
      <description>ASP.NET Web API Content Negotiation Información básica # Negociación de contenido se puede definir como el proceso de selección de la mejor representación para un recurso determinado. Entonces, la negociación de contenido significa que el cliente y el servidor pueden negociar entre ellos para que el cliente pueda obtener datos de acuerdo con el formato requerido.
Hay tres puntos de los que depende internet,
El recurso Un puntero al recurso (URL) Representación del recurso El tercer punto es más importante que los otros dos, porque todo funciona en función de cómo podemos ver el recurso.</description>
    </item>
    
    <item>
      <title>Enrutamiento de URL de API web</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/enrutamiento-de-url-de-api-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/enrutamiento-de-url-de-api-web/</guid>
      <description>Cómo funciona el enrutamiento en asp.net webapi # En ASP.NET Web API, un controlador es una clase que maneja solicitudes HTTP. Los métodos públicos del controlador se denominan métodos de acción o simplemente acciones.
Cuando el marco de API web recibe una solicitud, enruta la solicitud a una acción. Para determinar qué acción invocar, el marco utiliza una tabla de enrutamiento. La plantilla de proyecto de Visual Studio para Web API crea una ruta predeterminada:</description>
    </item>
    
    <item>
      <title>ASP.NET Web API MediaTypeFormatter</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/aspnet-web-api-mediatypeformatter/</guid>
      <description>Información básica del MediaTypeFormatter # MediaTypeFormatter es una clase abstracta de la que heredan las clases JsonMediaTypeFormatter y XmlMediaTypeFormatter. Aquí, la clase JsonMediaTypeFormatter maneja objetos JSON y la clase XmlMediaTypeFormatter maneja objetos XML.
Devuelve solo JSON independientemente del valor del encabezado de aceptación:
Para devolver solo objetos JSON en la respuesta de la solicitud, acepta el valor del encabezado de la solicitud si application/json o application/xml escribe la siguiente línea en el método Register de la clase WebApiConfig.</description>
    </item>
    
    <item>
      <title>Habilitación de ASP.NET WEB API CORS</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/habilitacion-de-aspnet-web-api-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/habilitacion-de-aspnet-web-api-cors/</guid>
      <description>Configurar CORS para WebAPI 2 con autenticación de Windows # La siguiente configuración del lado del servidor permite que la solicitud de CORS funcione junto con la autenticación de Windows (no se debe habilitar el anonimato en IIS).
web.config: permite solicitudes de verificación previa no autenticadas (anónimas) (OPCIONES)
&amp;lt;system.web&amp;gt; &amp;lt;authentication mode=&amp;quot;Windows&amp;quot; /&amp;gt; &amp;lt;authorization&amp;gt; &amp;lt;allow verbs=&amp;quot;OPTIONS&amp;quot; users=&amp;quot;*&amp;quot;/&amp;gt; &amp;lt;deny users=&amp;quot;?&amp;quot; /&amp;gt; &amp;lt;/authorization&amp;gt; &amp;lt;/system.web&amp;gt; global.asax.cs: responda correctamente con encabezados que permitan a la persona que llama desde otro dominio recibir datos</description>
    </item>
    
    <item>
      <title>Inicio rápido para trabajar con JSON</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/inicio-rapido-para-trabajar-con-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/inicio-rapido-para-trabajar-con-json/</guid>
      <description>Ejemplos para ponerlo en marcha rápidamente (y correctamente) con ASP.NET WebAPI
Devuelve JSON desde GET usando atributos # 1. Configure su formateador y enrutamiento en Register de (App_Start/WebApiConfig) # public static class WebApiConfig { public static void Register(HttpConfiguration config) { GlobalConfiguration.Configuration.Formatters.Clear(); GlobalConfiguration.Configuration.Formatters.Add(new JsonMediaTypeFormatter()); config.MapHttpAttributeRoutes(); } } 2. Crear métodos en un ApiController # public class HelloWorldController : ApiController { [HttpGet] [Route(&amp;quot;echo/{message}&amp;quot;)] public IHttpActionResult Echo(string message) { return Ok(new{ hello: message }); } [HttpGet] [Route(&amp;quot;echo/{digits:int}&amp;quot;)] public IHttpActionResult Echo(int digits) { return Ok(new{ hello: digits }); } ejecutando GET /echo/foo</description>
    </item>
    
    <item>
      <title>Configure una aplicación de API web para responder con datos JSON bonitosformateados de forma predeterminada</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/configure-una-aplicacion-de-api-web-para-responder-con-datos-json-bonitosformateados-de-forma-predeterminada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/configure-una-aplicacion-de-api-web-para-responder-con-datos-json-bonitosformateados-de-forma-predeterminada/</guid>
      <description>Formato JSON predeterminado: Eficiencia a costa de la legibilidad # Digamos que tienes un ApiController simple como este:
[HttpGet] [Route(&amp;quot;test&amp;quot;)] public dynamic Test() { dynamic obj = new ExpandoObject(); obj.prop1 = &amp;quot;some string&amp;quot;; obj.prop2 = 11; obj.prop3 = &amp;quot;another string&amp;quot;; return obj; } La representación JSON resultante de este objeto se verá así:
{&amp;quot;prop1&amp;quot;:&amp;quot;some string&amp;quot;,&amp;quot;prop2&amp;quot;:11,&amp;quot;prop3&amp;quot;:&amp;quot;another string&amp;quot;} Esto probablemente esté bien para respuestas simples como esta, pero imagina si tienes un objeto grande/complejo enviado como respuesta:</description>
    </item>
    
    <item>
      <title>OData con la API web de Asp.net</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/odata-con-la-api-web-de-aspnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/odata-con-la-api-web-de-aspnet/</guid>
      <description>Instale los paquetes OData # En el menú Herramientas, seleccione Administrador de paquetes NuGet &amp;gt; Consola del administrador de paquetes. En la ventana de la Consola del administrador de paquetes, escriba:
Install-Package Microsoft.AspNet.Odata Este comando instala los paquetes OData NuGet más recientes.
Habilitar marco de entidad # Para este tutorial, usaremos Entity Framework (EF) Code First para crear la base de datos de back-end.
Web API OData no requiere EF. Utilice cualquier capa de acceso a datos que pueda traducir las entidades de la base de datos en modelos.</description>
    </item>
    
    <item>
      <title>almacenamiento en caché</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/almacenamiento-en-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/almacenamiento-en-cache/</guid>
      <description>El almacenamiento en caché es el proceso de almacenar datos en algún lugar para futuras solicitudes, en nuestro caso podemos evitar el acceso no deseado a la base de datos para obtener los datos si los almacenamos en caché en algún lugar, de esta manera podemos asegurarnos de que los datos se sirvan de una manera más rápida. .
System.Runtime.Caching (MemoryCache) # Importe el espacio de nombres System.Runtime.Caching (asegúrese de haber agregado System.</description>
    </item>
    
    <item>
      <title>Creación de un atributo de filtro de acción personalizado</title>
      <link>https://www.wikiod.com/es/asp-dotnet-web-api/creacion-de-un-atributo-de-filtro-de-accion-personalizado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-web-api/creacion-de-un-atributo-de-filtro-de-accion-personalizado/</guid>
      <description>Los atributos de filtros de acción son una parte de ASP .NET Framework que encuentro útil para ayudar a seguir el principio DRY. Puede reemplazar varias líneas de lógica común con una etiqueta declarativa simple. El marco proporciona varios atributos de filtro de acción útiles de forma predeterminada, como los atributos de autorización y manejo de errores. Esta guía pretende mostrarle cómo crear su propio atributo personalizado.
AsegurarPresenciaDeAtributo # Este es un ejemplo de un atributo que creé para validar que los parámetros requeridos se han asignado en el objeto de solicitud recibido en una ruta POST.</description>
    </item>
    
  </channel>
</rss>

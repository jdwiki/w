<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oopTutorial on </title>
    <link>https://www.wikiod.com/es/docs/oop/</link>
    <description>Recent content in oopTutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con oop</title>
      <link>https://www.wikiod.com/es/oop/comenzando-con-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/comenzando-con-oop/</guid>
      <description>Introducción a la programación orientada a objetos # Introducción # La Programación Orientada a Objetos (principalmente conocida como OOP) es un paradigma de programación para resolver problemas.
La belleza de un programa OO (orientado a objetos) es que pensamos en el programa como un grupo de objetos que se comunican entre sí, en lugar de un script secuencial que sigue órdenes específicas.
Hay muchos lenguajes de programación que soportan programación orientada a objetos, algunos de los más populares son:</description>
    </item>
    
    <item>
      <title>Encapsulación</title>
      <link>https://www.wikiod.com/es/oop/encapsulacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/encapsulacion/</guid>
      <description>Ocultación de información # El estado de un objeto en un momento dado está representado por la información que tiene en ese punto. En un lenguaje orientado a objetos, el estado se implementa como variables miembro.
En un objeto adecuadamente diseñado, el estado se puede cambiar solo mediante llamadas a sus métodos y no mediante la manipulación directa de sus variables miembro. Esto se logra al proporcionar métodos públicos que operan en los valores de las variables de miembros privados.</description>
    </item>
    
    <item>
      <title>Herencia</title>
      <link>https://www.wikiod.com/es/oop/herencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/herencia/</guid>
      <description>Nota: La herencia de varios niveles está permitida en Java, pero no la herencia múltiple. Obtenga más información en http://beginnersbook.com/2013/04/oops-concepts/
Herencia - Definición # La herencia es uno de los conceptos principales en Programación Orientada a Objetos (POO). Usando la herencia, podemos modelar un problema apropiadamente y podemos reducir el número de líneas que tenemos que escribir. Veamos la herencia usando un ejemplo popular.
Considere que tiene que modelar el reino animal (Reino animal simplificado, por supuesto.</description>
    </item>
    
    <item>
      <title>problema de diamantes</title>
      <link>https://www.wikiod.com/es/oop/problema-de-diamantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/problema-de-diamantes/</guid>
      <description>Problema del diamante - Ejemplo # El problema del diamante es un problema común que ocurre en la Programación Orientada a Objetos, al usar herencia múltiple.
Considere el caso donde la &amp;ldquo;clase C&amp;rdquo; se hereda de la &amp;ldquo;clase A&amp;rdquo; y la &amp;ldquo;clase B&amp;rdquo;. Supongamos que tanto la clase A como la clase B tienen un método llamado foo().
Luego, cuando llamamos al método foo(), el compilador no puede identificar el método exacto que estamos tratando de usar</description>
    </item>
    
    <item>
      <title>Polimorfismo</title>
      <link>https://www.wikiod.com/es/oop/polimorfismo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/polimorfismo/</guid>
      <description>Anulación del método # La anulación de métodos es la forma de usar el polimorfismo entre clases. si una clase se hereda de otra, la primera (subclase) puede anular los métodos de la última (superclase) y cambiar la implementación.
esto se usa donde la superclase define la implementación más general del método mientras que la subclase usa una más específica.
Considere el siguiente ejemplo:
Tenemos una clase para Mamíferos:
class Mammal { void whoIam () { System.</description>
    </item>
    
    <item>
      <title>Abstracción</title>
      <link>https://www.wikiod.com/es/oop/abstraccion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/abstraccion/</guid>
      <description>Modificadores de acceso # Los modificadores de acceso se utilizan para controlar el acceso a un objeto oa una función/método. Esta es una parte principal del concepto de Abstracción.
Diferentes lenguajes de programación usan diferentes modificadores de acceso. Aquí hay unos ejemplos:
Java
Java has 4 access modifiers.
private - These attributes can be accessed only inside the class. protected - These attributes can be accessed by sub classes and classes from the same package.</description>
    </item>
    
    <item>
      <title>Objeto</title>
      <link>https://www.wikiod.com/es/oop/objeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/objeto/</guid>
      <description>Introducción # Object es el módulo base en la Programación Orientada a Objetos (POO). Un objeto puede ser una variable, una estructura de datos (como una matriz, un mapa, etc.) o incluso una función o un método. En OOP, modelamos objetos del mundo real como animales, vehículos, etc.
Un objeto se puede definir en una clase, que se puede definir como el modelo del objeto. Luego podemos crear instancias de esa clase, a las que llamamos objetos.</description>
    </item>
    
    <item>
      <title>Clase</title>
      <link>https://www.wikiod.com/es/oop/clase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/oop/clase/</guid>
      <description>Introducción # La clase es la pieza de código donde definimos los atributos y/o comportamientos de un objeto. Puede definir variables, constantes, métodos y constructores para el objeto, dentro de la clase. En otras palabras, la clase es el modelo de un objeto.
Veamos una clase de muestra en Java, que define un automóvil (simple):
public class Car { private Engine engine; private Body body; private Tire [] tire; private Interior interior; // Constructor public Car (Engine engine, Body body, Tire[] tires, Interior interior) { } // Another constructor public Car () { } public void drive(Direction d) { // Method to drive } public void start(Key key) { // Start } } Esto es solo para un ejemplo.</description>
    </item>
    
  </channel>
</rss>

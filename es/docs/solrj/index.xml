<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solrj Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/solrj/</link>
    <description>Recent content in Solrj Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/solrj/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con solrj</title>
      <link>https://www.wikiod.com/es/solrj/primeros-pasos-con-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/solrj/primeros-pasos-con-solrj/</guid>
      <description>Instalación o configuración # SolrJ viene como parte de la distribución de Solr desde Solr 1.x. La última versión de Solr se puede descargar aquí. Desde Solr-6.3.0, que es la última versión disponible, necesitamos obtener las siguientes bibliotecas y agregarlas a nuestra ruta de compilación: /dist/apache-solr-solrj-.jar /dist/solrj-lib/
Una vez que hayamos terminado, SolrJ estará listo para comunicarse con nuestra instancia de Solr. En el siguiente ejemplo, veremos cómo usar SolrJ para consultar o agregar contenido a Solr.</description>
    </item>
    
    <item>
      <title>Obtenga fragmentos destacados con SolrJ</title>
      <link>https://www.wikiod.com/es/solrj/obtenga-fragmentos-destacados-con-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/solrj/obtenga-fragmentos-destacados-con-solrj/</guid>
      <description>Cuando obtenemos fragmentos resaltados en nuestra respuesta de Solr mediante programación, necesitamos extraerlos y manejarlos. El siguiente código muestra cómo hacerlo con SolrJ.
Obtener texto resaltado para campos de un solo valor # public String getHighlightedText(final QueryResponse queryResponse, final String fieldName, final String docId) { String highlightedText = &amp;quot;&amp;quot;; Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; highlights = queryResponse.getHighlighting(); if (highlights!=null &amp;amp;&amp;amp; MapUtils.isNotEmpty(highlights.get(docId))) { List&amp;lt;String&amp;gt; snippets = highlights.get(docId).get(fieldName); if (CollectionUtils.isNotEmpty(snippets)) { highlightedText = getFragments(snippets); } } return highlightedText; } private static final String getFragments(List&amp;lt;String&amp;gt; snippets){ StringBuilder fragments = new StringBuilder(); for (int i = 0; i &amp;lt; snippets.</description>
    </item>
    
    <item>
      <title>Obtenga líderes de fragmentos usando SolrJ</title>
      <link>https://www.wikiod.com/es/solrj/obtenga-lideres-de-fragmentos-usando-solrj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/solrj/obtenga-lideres-de-fragmentos-usando-solrj/</guid>
      <description>En algunos casos, por ejemplo, cuando queremos hacer una copia de seguridad de las colecciones de solrcloud mediante programación, necesitamos saber qué son los Shard Leaders. El siguiente ejemplo muestra cómo se puede lograr usando SolrJ.
Obtener líderes de fragmentos usando la API de SolrJ # private final String COLLECTION_NAME = &amp;quot;myCollection&amp;quot;; private final String ZOOKEPER_CLIENT_TIMEOUT_MS = &amp;quot;1000000&amp;quot; private Map&amp;lt;String, String&amp;gt; getShardLeaders(CloudSolrServer cloudSolrServer) throws InterruptedException, KeeperException { Map&amp;lt;String, String&amp;gt; shardleaders = new TreeMap&amp;lt;String, String&amp;gt;(); ZkStateReader zkStateReader = cloudSolrServer.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>guía Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/guice/</link>
    <description>Recent content in guía Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/guice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con guice</title>
      <link>https://www.wikiod.com/es/guice/comenzando-con-guice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/guice/comenzando-con-guice/</guid>
      <description>Configuración de un &amp;lsquo;¡Hola, mundo!&amp;rsquo; ejemplo # Guice es una biblioteca de Java. Para usarlo, debe agregar un [archivo JAR] 1 en el classpath de su proyecto Java.
Clases de muestra # A continuación hay varias clases para un &amp;ldquo;¡Hola, mundo!&amp;rdquo; ejemplo.
Una interfaz de un &amp;ldquo;servicio&amp;rdquo; de saludo:
public interface HelloWorldService { public void sayHello(); } La implementación del servicio:
public class HelloWorldServiceImpl implements HelloWorldService { @Override public void sayHello() { System.</description>
    </item>
    
    <item>
      <title>Uso de Guice con Java WebSockets (JSR-356)</title>
      <link>https://www.wikiod.com/es/guice/uso-de-guice-con-java-websockets-jsr-356/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/guice/uso-de-guice-con-java-websockets-jsr-356/</guid>
      <description>Configuración para obtener la inyección de Guice en los puntos finales de Websocket # Primero, necesitamos un generador de puntos finales personalizado.
public class WSConfigurator extends ServerEndpointConfig.Configurator { @Inject private static Injector injector; @Override public &amp;lt;T&amp;gt; T getEndpointInstance(Class&amp;lt;T&amp;gt; endpointClass) throws InstantiationException { return injector.getInstance(endpointClass); } } Necesitamos arrancar el inyector en el configurador anterior desde uno de nuestros módulos Guice.
public class WebSocketModule extends AbstractModule { @Override protected void configure() { requestStaticInjection(WSConfigurator.</description>
    </item>
    
    <item>
      <title>Interceptor del método Guice</title>
      <link>https://www.wikiod.com/es/guice/interceptor-del-metodo-guice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/guice/interceptor-del-metodo-guice/</guid>
      <description>Ejemplo sencillo # Método interceptado:
public class ExampleService implements Example { @MyAnnotation public doHomework() { System.out.println(&amp;quot;working&amp;quot;); } } Anotación:
@Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface MyAnnotation {} Interceptador:
public class MyInterceptor implements MethodInterceptor { @Override public Object invoke(MethodInvocation arg0) throws Throwable { System.out.println(&amp;quot;***** intercepted *****&amp;quot;); return arg0.proceed(); } } Módulo:
public class MyModule extends AbstractModule { @Override protected void configure() { bind(CallerService.class).to(Caller.class); bind(ExampleService.class).to(Example.class); bindInterceptor(Matchers.any(), Matchers.annotatedWith(MyAnnotation.class), new MyInterceptor()); } } Llamador:
public class CallerService implements Caller { @Inject private Client client; public void call() { client.</description>
    </item>
    
    <item>
      <title>Uso de Guice con Jersey 2 (JAX-RS RI)</title>
      <link>https://www.wikiod.com/es/guice/uso-de-guice-con-jersey-2-jax-rs-ri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/guice/uso-de-guice-con-jersey-2-jax-rs-ri/</guid>
      <description>Obtener inyecciones de Guice en recursos JAX-RS # Necesitará el guice-bridge en su proyecto.
@ApplicationPath(&amp;quot;api&amp;quot;) public class ApiRest extends ResourceConfig { @Inject public ApiRest(ServiceLocator serviceLocator, ServletContext servletContext) { packages(&amp;quot;net.sargue.app.api&amp;quot;); GuiceBridge.getGuiceBridge().initializeGuiceBridge(serviceLocator); GuiceIntoHK2Bridge guiceBridge = serviceLocator.getService(GuiceIntoHK2Bridge.class); Injector injector = (Injector) servletContext.getAttribute(Injector.class.getName()); if (injector == null) throw new RuntimeException(&amp;quot;Guice Injector not found&amp;quot;); guiceBridge.bridgeGuiceInjector(injector); register(RolesAllowedDynamicFeature.class); } } </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Ruby on </title>
    <link>https://www.wikiod.com/es/docs/ruby/</link>
    <description>Recent content in Tutorial del lenguaje Ruby on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Ruby Language</title>
      <link>https://www.wikiod.com/es/ruby/primeros-pasos-con-ruby-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/primeros-pasos-con-ruby-language/</guid>
      <description>Hola Mundo # Este ejemplo asume que Ruby está instalado.
Coloque lo siguiente en un archivo llamado hello.rb:
puts &#39;Hello World&#39; Desde la línea de comando, escriba el siguiente comando para ejecutar el código de Ruby desde el archivo fuente:
$ ruby hello.rb Esto debería generar:
Hello World La salida se mostrará inmediatamente en la consola. No es necesario compilar los archivos fuente de Ruby antes de ejecutarlos. El intérprete de Ruby compila y ejecuta el archivo de Ruby en tiempo de ejecución.</description>
    </item>
    
    <item>
      <title>Hachís</title>
      <link>https://www.wikiod.com/es/ruby/hachis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/hachis/</guid>
      <description>Un hash es una colección similar a un diccionario de claves únicas y sus valores. También llamados arreglos asociativos, son similares a los arreglos, pero donde un arreglo usa números enteros como su índice, un hash le permite usar cualquier tipo de objeto. Recuperas o creas una nueva entrada en un Hash haciendo referencia a su clave.
Sintaxis # { nombre: &amp;ldquo;Noel&amp;rdquo;, segundo nombre: &amp;ldquo;Edmonds&amp;rdquo; }
{ :primer_nombre =&amp;gt; &amp;ldquo;Noel&amp;rdquo;, :segundo_nombre =&amp;gt; &amp;ldquo;Edmonds&amp;rdquo; }</description>
    </item>
    
    <item>
      <title>Flujo de control</title>
      <link>https://www.wikiod.com/es/ruby/flujo-de-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/flujo-de-control/</guid>
      <description>if, elsif, else y end # Ruby ofrece las expresiones if y else esperadas para la lógica de bifurcación, terminadas por la palabra clave end:
# Simulate flipping a coin result = [:heads, :tails].sample if result == :heads puts &#39;The coin-toss came up &amp;quot;heads&amp;quot;&#39; else puts &#39;The coin-toss came up &amp;quot;tails&amp;quot;&#39; end En Ruby, las sentencias if son expresiones que se evalúan como un valor, y el resultado se puede asignar a una variable:</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/ruby/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/arreglos/</guid>
      <description>Sintaxis # a = [] # usando una matriz literal a = Array.new # equivalente a usar literal a = Array.new(5) # crea una matriz con 5 elementos con valor de cero. a = Array.new(5, 0) # crea una matriz con 5 elementos con valor predeterminado de 0. Crear matriz de cadenas # Las matrices de cadenas se pueden crear usando la sintaxis de percent string de Ruby:
array = %w(one two three four) Esto es funcionalmente equivalente a definir la matriz como:</description>
    </item>
    
    <item>
      <title>Bloques, procesos y lambdas</title>
      <link>https://www.wikiod.com/es/ruby/bloques-procesos-y-lambdas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/bloques-procesos-y-lambdas/</guid>
      <description>Sintaxis # Proc.nuevo(bloque) lambda { |argumentos| código} -&amp;gt;(arg1, arg2) { código } objeto.to_proc { |single_arg| código} hacer |arg, (clave, valor)| code final Tenga cuidado con la precedencia de los operadores cuando tenga una línea con varios métodos encadenados, como:
str = &amp;quot;abcdefg&amp;quot; puts str.gsub(/./) do |match| rand(2).zero? ? match.upcase : match.downcase end En lugar de imprimir algo como abCDeFg, como cabría esperar, imprime algo como #&amp;lt;Enumerator:0x00000000af42b28&amp;gt; &amp;ndash; esto se debe a que do .</description>
    </item>
    
    <item>
      <title>Patrones de diseño y modismos en Ruby</title>
      <link>https://www.wikiod.com/es/ruby/patrones-de-diseno-y-modismos-en-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/patrones-de-diseno-y-modismos-en-ruby/</guid>
      <description>Patrón decorador # El patrón Decorator agrega comportamiento a los objetos sin afectar a otros objetos de la misma clase. El patrón decorador es una alternativa útil para crear subclases.
Cree un módulo para cada decorador. Este enfoque es más flexible que la herencia porque puede mezclar y combinar responsabilidades en más combinaciones. Además, debido a que la transparencia permite que los decoradores se aniden recursivamente, permite un número ilimitado de responsabilidades.</description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://www.wikiod.com/es/ruby/clases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/clases/</guid>
      <description>Sintaxis # nombre de la clase #algún código que describa el comportamiento de la clase final Los nombres de clase en Ruby son constantes, por lo que la primera letra debe ser mayúscula.
class Cat # correct end class dog # wrong, throws an error end Constructor # Una clase solo puede tener un constructor, que es un método llamado initialize. El método se invoca automáticamente cuando se crea una nueva instancia de la clase.</description>
    </item>
    
    <item>
      <title>Excepciones</title>
      <link>https://www.wikiod.com/es/ruby/excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/excepciones/</guid>
      <description>Una excepción es un objeto que representa la ocurrencia de una condición excepcional. En otras palabras, indica que algo salió mal.
En Ruby, las excepciones a menudo se denominan errores. Esto se debe a que la clase Exception base existe como un elemento de objeto de excepción de nivel superior, pero las excepciones de ejecución definidas por el usuario son generalmente StandardError o descendientes.
Crear un tipo de excepción personalizado # Una excepción personalizada es cualquier clase que extienda Exception o una subclase de Exception.</description>
    </item>
    
    <item>
      <title>Métodos</title>
      <link>https://www.wikiod.com/es/ruby/metodos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/metodos/</guid>
      <description>Las funciones en Ruby proporcionan código organizado y reutilizable para realizar un conjunto de acciones. Las funciones simplifican el proceso de codificación, evitan la lógica redundante y facilitan el seguimiento del código. Este tema describe la declaración y utilización de funciones, argumentos, parámetros, declaraciones de rendimiento y alcance en Ruby.
Un método es un bloque de código con nombre, asociado con uno o más objetos y generalmente identificado por una lista de parámetros además del nombre.</description>
    </item>
    
    <item>
      <title>Uso de gemas</title>
      <link>https://www.wikiod.com/es/ruby/uso-de-gemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ruby/uso-de-gemas/</guid>
      <description>Instalación de gemas de rubí # Esta guía asume que ya tiene Ruby instalado. Si está utilizando Ruby &amp;lt;1.9, tendrá que instalar RubyGems manualmente, ya que no estará incluido de forma nativa.
Para instalar una gema de rubí, ingrese el comando:
gem install [gemname] Si está trabajando en un proyecto con una lista de dependencias de gemas, estas se enumerarán en un archivo llamado Gemfile. Para instalar una nueva gema en el proyecto, agregue la siguiente línea de código en el Gemfile:</description>
    </item>
    
  </channel>
</rss>

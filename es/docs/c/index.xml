<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de lenguaje C on </title>
    <link>https://www.wikiod.com/es/docs/c/</link>
    <description>Recent content in Tutorial de lenguaje C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje C</title>
      <link>https://www.wikiod.com/es/c/primeros-pasos-con-el-lenguaje-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/primeros-pasos-con-el-lenguaje-c/</guid>
      <description>Hola Mundo # Para crear un programa C simple que imprima &amp;ldquo;Hello, World&amp;rdquo; en la pantalla, use un editor de texto para crear un nuevo archivo (por ejemplo, hello. c — la extensión del archivo debe ser .c) que contiene el siguiente código fuente:
Hola C # #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;quot;Hello, World&amp;quot;); return 0; } Demostración en vivo en Coliru
Veamos este sencillo programa línea por línea # #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Punteros</title>
      <link>https://www.wikiod.com/es/c/punteros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/punteros/</guid>
      <description>Un puntero es un tipo de variable que puede almacenar la dirección de otro objeto o una función.
Sintaxis # &amp;lt;Tipo de datos&amp;gt; *&amp;lt;Nombre de variable&amp;gt;; int *ptrToInt; vacío *ptrToVoid; /* C89+ */ struct someStruct *ptrToStruct; int **ptrToPtrToInt; int arr[longitud]; int *ptrAlPrimerElem = arr; /* Para &amp;lt;C99 &amp;rsquo;longitud&amp;rsquo; debe ser una constante de tiempo de compilación, para &amp;gt;=C11 puede ser necesario. */ int *arrayOfPtrsToInt[longitud]; /* Para &amp;lt;C99 &amp;rsquo;longitud&amp;rsquo; debe ser una constante de tiempo de compilación, para &amp;gt;=C11 puede ser necesario.</description>
    </item>
    
    <item>
      <title>Comportamiento indefinido</title>
      <link>https://www.wikiod.com/es/c/comportamiento-indefinido/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/comportamiento-indefinido/</guid>
      <description>En C, algunas expresiones producen comportamiento indefinido. El estándar elige explícitamente no definir cómo debe comportarse un compilador si encuentra una expresión de este tipo. Como resultado, un compilador es libre de hacer lo que crea conveniente y puede producir resultados útiles, resultados inesperados o incluso bloquearse.
El código que invoca UB puede funcionar según lo previsto en un sistema específico con un compilador específico, pero es probable que no funcione en otro sistema o con un compilador, una versión del compilador o una configuración del compilador diferentes.</description>
    </item>
    
    <item>
      <title>Gestión de la memoria</title>
      <link>https://www.wikiod.com/es/c/gestion-de-la-memoria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/gestion-de-la-memoria/</guid>
      <description>Para administrar la memoria asignada dinámicamente, la biblioteca C estándar proporciona las funciones malloc(), calloc(), realloc() y free(). En C99 y versiones posteriores, también existe aligned_alloc(). Algunos sistemas también proporcionan alloca().
Sintaxis # void *aligned_alloc(size_t alineación, size_t tamaño); /* Solo desde C11 */ void *calloc(size_t nelements, size_t size); vacío libre (vacío *ptr); void *malloc(tamaño_t tamaño); void *realloc(void *ptr, size_t size); void *alloca(tamaño_t tamaño); /* de alloca.h, no estándar, no portátil, peligroso.</description>
    </item>
    
    <item>
      <title>Errores comunes</title>
      <link>https://www.wikiod.com/es/c/errores-comunes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/errores-comunes/</guid>
      <description>Esta sección analiza algunos de los errores comunes que un programador de C debe tener en cuenta y debe evitar cometer. Para obtener más información sobre algunos problemas inesperados y sus causas, consulte https://www.wikiod.com/es/c/comportamiento-indefinido
Mezclar enteros con y sin signo en operaciones aritméticas # Por lo general, no es una buena idea mezclar enteros &amp;ldquo;con signo&amp;rdquo; y &amp;ldquo;sin signo&amp;rdquo; en operaciones aritméticas. Por ejemplo, ¿cuál será el resultado del siguiente ejemplo?</description>
    </item>
    
    <item>
      <title>Instrumentos de cuerda</title>
      <link>https://www.wikiod.com/es/c/instrumentos-de-cuerda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/instrumentos-de-cuerda/</guid>
      <description>En C, una cadena no es un tipo intrínseco. Una cadena C es la convención para tener una matriz unidimensional de caracteres que termina con un carácter nulo, con un &#39;\0&#39;.
Esto significa que una cadena C con un contenido de &amp;quot;abc&amp;quot; tendrá cuatro caracteres &#39;a&#39;, &#39;b&#39;, &#39;c&#39; y &#39;\0&#39;.
Consulte el ejemplo de introducción básica a las cadenas.
1: https://www.wikiod.com/es/c/instrumentos-de-cuerda#Introducción básica a las cuerdas
Sintaxis # char str1[] = &amp;ldquo;¡Hola mundo!</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/c/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/arreglos/</guid>
      <description>Las matrices son tipos de datos derivados, que representan una colección ordenada de valores (&amp;ldquo;elementos&amp;rdquo;) de otro tipo. La mayoría de las matrices en C tienen un número fijo de elementos de cualquier tipo y su representación almacena los elementos de forma contigua en la memoria sin espacios ni relleno. C permite arreglos multidimensionales cuyos elementos son otros arreglos, y también arreglos de punteros.
C admite matrices asignadas dinámicamente cuyo tamaño se determina en tiempo de ejecución.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/es/c/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/operadores/</guid>
      <description>Un operador en un lenguaje de programación es un símbolo que le dice al compilador o intérprete que realice una operación matemática, relacional o lógica específica y produzca un resultado final.
C tiene muchos operadores poderosos. Muchos operadores de C son operadores binarios, lo que significa que tienen dos operandos. Por ejemplo, en a/b, / es un operador binario que acepta dos operandos (a, b). Hay algunos operadores unarios que toman un operando (por ejemplo: ~, ++), y solo un operador ternario ?</description>
    </item>
    
    <item>
      <title>Afirmación</title>
      <link>https://www.wikiod.com/es/c/afirmacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/afirmacion/</guid>
      <description>Una afirmación es un predicado de que la condición presentada debe ser verdadera en el momento en que el software encuentra la afirmación. Las más comunes son las afirmaciones simples, que se validan en el momento de la ejecución. Sin embargo, las afirmaciones estáticas se comprueban en tiempo de compilación.
Sintaxis # afirmar (expresión) static_assert(expresión, mensaje) _Static_assert(expresión, mensaje) Parámetros # Parámetro Detalles expresión expresión de tipo escalar. mensaje literal de cadena que se incluirá en el mensaje de diagnóstico.</description>
    </item>
    
    <item>
      <title>Preprocesador y Macros</title>
      <link>https://www.wikiod.com/es/c/preprocesador-y-macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/c/preprocesador-y-macros/</guid>
      <description>Todos los comandos del preprocesador comienzan con el símbolo almohadilla (almohadilla) #. Una macro C es solo un comando de preprocesador que se define mediante la directiva de preprocesador #define. Durante la etapa de preprocesamiento, el preprocesador de C (una parte del compilador de C) simplemente sustituye el cuerpo de la macro donde aparece su nombre.
Cuando un compilador encuentra una macro en el código, realiza un reemplazo de cadena simple, no se realizan operaciones adicionales.</description>
    </item>
    
  </channel>
</rss>

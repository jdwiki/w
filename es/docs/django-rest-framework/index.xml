<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django-rest-framework Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/django-rest-framework/</link>
    <description>Recent content in django-rest-framework Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/django-rest-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con django-rest-framework</title>
      <link>https://www.wikiod.com/es/django-rest-framework/primeros-pasos-con-django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/primeros-pasos-con-django-rest-framework/</guid>
      <description>Instalar o Configurar # Requisitos
Pitón (2.7, 3.2, 3.3, 3.4, 3.5, 3.6) Django (1.7+, 1.8, 1.9, 1.10, 1.11) Instalar
Puede usar pip para instalar o clonar el proyecto desde github.
Usando pip:
pip install djangorestframework Usando git clone:
git clone git@github.com:tomchristie/django-rest-framework.git Después de la instalación, debe agregar rest_framework a la configuración de INSTALLED_APPS.
INSTALLED_APPS = ( ... &#39;rest_framework&#39;, ) Si tiene la intención de utilizar la API navegable, probablemente también desea agregar las vistas de inicio y cierre de sesión del marco REST.</description>
    </item>
    
    <item>
      <title>Autenticación de token con Django Rest Framework</title>
      <link>https://www.wikiod.com/es/django-rest-framework/autenticacion-de-token-con-django-rest-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/autenticacion-de-token-con-django-rest-framework/</guid>
      <description>AGREGAR FUNCIONALIDAD DE AUTORIZACIÓN # Django REST Framework tiene algunos métodos de autenticación ya incorporados, uno de ellos está basado en Token, por lo que lo primero que debe hacer es decirle a nuestro proyecto que vamos a usar la autenticación de REST Framework. Abra el archivo settings.py y agregue la línea resaltada.
INSTALLED_APPS = ( &#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, &#39;rest_framework&#39;, &#39;rest_framework.authtoken&#39;, &#39;test_app&#39;, ) Como hemos agregado una nueva aplicación al proyecto, debemos sincronizar</description>
    </item>
    
    <item>
      <title>Autenticación</title>
      <link>https://www.wikiod.com/es/django-rest-framework/autenticacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/autenticacion/</guid>
      <description>Configurar la autenticación globalmente # La autenticación en Django REST Framework se puede configurar globalmente como una subclave de la variable REST_FRAMEWORK en settings.py, al igual que el resto de las configuraciones predeterminadas del marco.
REST_FRAMEWORK = { &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: ( &#39;rest_framework.authentication.BasicAuthentication&#39;, &#39;rest_framework.authentication.SessionAuthentication&#39;, ) } Configuración de la autenticación para una APIView específica # La autenticación se puede configurar para un punto final APIView específico, mediante el uso de la variable authentication_classes:</description>
    </item>
    
    <item>
      <title>filtros</title>
      <link>https://www.wikiod.com/es/django-rest-framework/filtros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/filtros/</guid>
      <description>Ejemplos de filtrado, de simples a más complejos # Filtrado de vainilla simple # Para filtrar cualquier vista, anule su método get_queryset para devolver un conjunto de consultas filtradas
class HREmployees(generics.ListAPIView): def get_queryset(self): return Employee.objects.filter(department=&amp;quot;Human Resources&amp;quot;) Todas las funciones de la API utilizarán el conjunto de consultas filtradas para las operaciones. Por ejemplo, la lista de la vista anterior solo contendrá empleados cuyo departamento sea Recursos Humanos.
Accediendo a los parámetros de consulta en get_queryset # El filtrado basado en parámetros de solicitud es fácil.</description>
    </item>
    
    <item>
      <title>Paginación</title>
      <link>https://www.wikiod.com/es/django-rest-framework/paginacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/paginacion/</guid>
      <description>La paginación es la división de grandes conjuntos de datos en páginas separadas y autónomas.
En django rest framework, la paginación permite al usuario modificar la cantidad de datos en cada página y el estilo por el cual se aplica la división.
[Introducción] Configurar el estilo de paginación globalmente # Para configurar el estilo de paginación para todo el proyecto, debe configurar DEFAULT_PAGINATION_CLASS y PAGE_SIZE en la configuración del proyecto.</description>
    </item>
    
    <item>
      <title>mezclas</title>
      <link>https://www.wikiod.com/es/django-rest-framework/mezclas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/mezclas/</guid>
      <description>Las clases mixin proporcionan las acciones que se utilizan para proporcionar el comportamiento de vista básico. Tenga en cuenta que las clases mixin proporcionan métodos de acción en lugar de definir los métodos del controlador, como .get() y .post(), directamente. Esto permite una composición más flexible del comportamiento. -Documentación oficial de Django rest Framework-
[Introducción] Lista de mezclas y uso en vistas/conjuntos de vistas # Lista de mixins disponibles:
ListModelMixin: proporciona un método .</description>
    </item>
    
    <item>
      <title>Serializadores</title>
      <link>https://www.wikiod.com/es/django-rest-framework/serializadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/serializadores/</guid>
      <description>De acuerdo con la documentación oficial de DRF, los serializadores ayudan a convertir datos complejos como conjuntos de consultas e instancias de modelos en tipos de datos nativos de Python para que puedan representarse como JSON, XML y otros tipos de contenido.
Los serializadores en DRF se parecen más a la clase django Form y ModelForm. La clase Serializer nos proporciona una forma personalizada de manejar los datos como el formulario django.</description>
    </item>
    
    <item>
      <title>Enrutadores</title>
      <link>https://www.wikiod.com/es/django-rest-framework/enrutadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/enrutadores/</guid>
      <description>El enrutamiento es el proceso de asignar la lógica (ver métodos, etc.) a un conjunto de URL. El marco REST agrega soporte para el enrutamiento automático de URL a Django.
Sintaxis # enrutador = enrutadores.SimpleRouter() enrutador.registrar(prefijo, conjunto de vistas) router.urls # el conjunto de direcciones URL generado para el conjunto de vistas registrado. [Introducción] Uso básico, SimpleRouter # El enrutamiento automático para el DRF se puede lograr para las clases ViewSet.</description>
    </item>
    
    <item>
      <title>Usando django-rest-framework con AngularJS como marco frontal.</title>
      <link>https://www.wikiod.com/es/django-rest-framework/usando-django-rest-framework-con-angularjs-como-marco-frontal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-rest-framework/usando-django-rest-framework-con-angularjs-como-marco-frontal/</guid>
      <description>En este tema, veremos cómo usar Django REST Framework como una API de back-end para una aplicación AngularJS. Los principales problemas que surgen entre el uso conjunto de DRF y AngularJS generalmente giran en torno a la comunicación HTTP entre las dos tecnologías, así como la representación de los datos en ambos extremos y, finalmente, cómo implementar y diseñar la aplicación o el sistema.
Solicitud angular # $http.post(&amp;quot;\&amp;lt;domain\&amp;gt;/user-registration/&amp;quot;, {username: username, password: password}) .</description>
    </item>
    
  </channel>
</rss>

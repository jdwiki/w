<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Vue.js on </title>
    <link>https://www.wikiod.com/es/docs/vue-js/</link>
    <description>Recent content in Tutorial de Vue.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/vue-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Vue.js</title>
      <link>https://www.wikiod.com/es/vue-js/primeros-pasos-con-vuejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/primeros-pasos-con-vuejs/</guid>
      <description>&amp;ldquo;¡Hola Mundo!&amp;rdquo; Programa # Para comenzar a usar Vue.js, asegúrese de tener el archivo de script incluido en su HTML. Por ejemplo, agregue lo siguiente a su HTML.
&amp;lt;script src=&amp;quot;https://npmcdn.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Ejemplo sencillo # Plantilla HTML # &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; JavaScript # new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue.js!&#39; } }) Vea una demostración en vivo de este ejemplo.
También puede consultar el ejemplo &amp;ldquo;Hello World&amp;rdquo; creado por Vue.</description>
    </item>
    
    <item>
      <title>Representación condicional</title>
      <link>https://www.wikiod.com/es/vue-js/representacion-condicional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/representacion-condicional/</guid>
      <description>Sintaxis # &amp;lt;elemento v-if=&amp;quot;condición&amp;quot;&amp;gt;&amp;lt;/elemento&amp;gt; //v-if &amp;lt;elemento v-si=&amp;quot;condición&amp;quot;&amp;gt;&amp;lt;/elemento&amp;gt;&amp;lt;elemento v-si no=&amp;quot;condición&amp;quot;&amp;gt;&amp;lt;/elemento&amp;gt; //v-si | v-otro &amp;lt;template v-if=&amp;quot;condición&amp;quot;&amp;gt;...&amp;lt;/template&amp;gt; //plantilla v-if &amp;lt;elemento v-mostrar=&amp;quot;condición&amp;quot;&amp;gt;&amp;lt;/elemento&amp;gt; //v-mostrar Es muy importante recordar la diferencia entre v-if y v-show. Si bien sus usos son casi idénticos, un elemento vinculado a v-if solo se representará en el DOM cuando su condición sea verdadera por primera vez. Cuando se usa la directiva v-show, todos los elementos se representan en el DOM pero se ocultan usando el estilo display si la condición es falsa.</description>
    </item>
    
    <item>
      <title>Ganchos de ciclo de vida</title>
      <link>https://www.wikiod.com/es/vue-js/ganchos-de-ciclo-de-vida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/ganchos-de-ciclo-de-vida/</guid>
      <description>Errores comunes: Acceder al DOM desde el gancho ready() # Un caso de uso común para el enlace ready() es acceder al DOM, p. para iniciar un complemento de Javascript, obtener las dimensiones de un elemento, etc.
El problema
Debido al mecanismo de actualización asíncrona del DOM de Vue, no se garantiza que el DOM se haya actualizado por completo cuando se llama al enlace ready(). Esto suele dar como resultado un error porque el elemento no está definido.</description>
    </item>
    
    <item>
      <title>Directivas personalizadas</title>
      <link>https://www.wikiod.com/es/vue-js/directivas-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/directivas-personalizadas/</guid>
      <description>Sintaxis # Vue.directive(id, definición); Vue.directive(id, actualización); //cuando solo necesita la función de actualización. Parámetros # Parámetro Detalles id Cadena: la identificación de la directiva que se usará sin el prefijo v-. (Agregue el prefijo v- cuando lo use) definición Objeto: un objeto de definición puede proporcionar varias funciones de enlace (todas opcionales): bind, update y unbind Conceptos básicos # Además del conjunto predeterminado de directivas incluidas en el núcleo, Vue.js también le permite registrar directivas personalizadas.</description>
    </item>
    
    <item>
      <title>Accesorios</title>
      <link>https://www.wikiod.com/es/vue-js/accesorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/accesorios/</guid>
      <description>camelCase &amp;lt;=&amp;gt; estuche-kebab # Cuando defina los nombres de sus accesorios, recuerde siempre que los nombres de los atributos HTML no distinguen entre mayúsculas y minúsculas. Eso significa que si define un accesorio en caso de camello en la definición de su componente&amp;hellip;
Vue.component(&#39;child&#39;, { props: [&#39;myProp&#39;], ... }); &amp;hellip; debe llamarlo en su componente HTML como my-prop.
Pasar datos de padre a hijo con accesorios # En Vue.js, cada instancia de componente tiene su propio alcance aislado, lo que significa que si un componente principal tiene un componente secundario, el componente secundario tiene su propio alcance aislado y el componente principal tiene su propio alcance aislado.</description>
    </item>
    
    <item>
      <title>Usando esto en Vue</title>
      <link>https://www.wikiod.com/es/vue-js/usando-esto-en-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/usando-esto-en-vue/</guid>
      <description>Uno de los errores más comunes que encontramos en el código Vue en StackOverflow es el mal uso de this. Los errores más comunes generalmente se encuentran en dos áreas, usar this en devoluciones de llamadas para promesas u otras funciones asincrónicas y usar funciones de flecha para definir métodos, propiedades calculadas, etc.
¡EQUIVOCADO! Usar una función de flecha para definir un método que se refiera a &amp;ldquo;esto&amp;rdquo; # new Vue({ el:&amp;quot;#app&amp;quot;, data:{ foo: &amp;quot;bar&amp;quot; }, methods:{ // This is wrong!</description>
    </item>
    
    <item>
      <title>Tragamonedas</title>
      <link>https://www.wikiod.com/es/vue-js/tragamonedas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/tragamonedas/</guid>
      <description>¡Importante! Las tragamonedas después del renderizado no garantizan el orden de las posiciones para las tragamonedas. La ranura, que fue la primera, puede tener una posición diferente después del renderizado.
Uso de ranuras con nombre # Los espacios con nombre funcionan de manera similar a los espacios individuales, pero en su lugar le permiten distribuir contenido a diferentes regiones dentro de su plantilla de componente secundario.
Tome el componente page del ejemplo anterior pero modifique su plantilla para que quede de la siguiente manera:</description>
    </item>
    
    <item>
      <title>VueJS &#43; Redux con Vua-Redux (Mejor Solución)</title>
      <link>https://www.wikiod.com/es/vue-js/vuejs--redux-con-vua-redux-mejor-solucion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/vuejs--redux-con-vua-redux-mejor-solucion/</guid>
      <description>Cómo usar Vua-Redux # Instalando Vua Redux desde NPM:
Instalar a través de:
npm i vua-redux --save Inicializar: # ===============
// principal.js
import Vue from &#39;vue&#39;; import { reduxStorePlugin } from &#39;vua-redux&#39;; import AppStore from &#39;./AppStore&#39;; import App from &#39;./Component/App&#39;; // install vua-redux Vue.use(reduxStorePlugin); new Vue({ store: AppStore, render(h) { return &amp;lt;App /&amp;gt; } }); // AppStore.js
import { createStore } from &#39;redux&#39;; const initialState = { todos: [] }; const reducer = (state = initialState, action) =&amp;gt; { switch(action.</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://www.wikiod.com/es/vue-js/vuex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/vuex/</guid>
      <description>Vuex es un patrón de gestión de estado + biblioteca para aplicaciones Vue.js. Sirve como un almacén centralizado para todos los componentes de una aplicación, con reglas que garantizan que el estado solo se puede modificar de forma predecible. También se integra con la extensión de herramientas de desarrollo oficial de Vue para proporcionar funciones avanzadas como la depuración de viajes en el tiempo sin configuración y la exportación/importación de instantáneas de estado.</description>
    </item>
    
    <item>
      <title>Filtros personalizados</title>
      <link>https://www.wikiod.com/es/vue-js/filtros-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vue-js/filtros-personalizados/</guid>
      <description>Sintaxis # Vue.filter(nombre, función(valor){}); //Básico Vue.filter(name, function(value, begin, end){}); //Básico con valores envolventes Vue.filter(nombre, función(valor, entrada){}); //Dinámico Vue.filter(nombre, { lectura: función(valor){}, escritura: función(valor){} }); //Bidireccional Parámetros # Parámetro Detalles nombre Cadena: nombre invocable deseado del filtro valor [Devolución de llamada] Cualquiera: valor de los datos que pasan al filtro empezar [Devolución de llamada] Cualquiera: el valor debe aparecer antes de los datos pasados ​​ fin [Devolución de llamada] Cualquiera - valor que vendrá después de los datos pasados ​​ entrada [Devolución de llamada] Cualquiera: entrada de usuario vinculada a la instancia de Vue para obtener resultados dinámicos Básico # Los filtros personalizados en Vue.</description>
    </item>
    
  </channel>
</rss>

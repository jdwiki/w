<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de PyMongo on </title>
    <link>https://www.wikiod.com/es/docs/pymongo/</link>
    <description>Recent content in Tutorial de PyMongo on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/pymongo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con PyMongo</title>
      <link>https://www.wikiod.com/es/pymongo/primeros-pasos-con-pymongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pymongo/primeros-pasos-con-pymongo/</guid>
      <description>Hola Mundo # PyMongo es un controlador de Python nativo para MongoDB.
Instalar PyMongo # pip install pymongo Crear una conexión # Utilice MongoClient para crear una conexión. MongoClient tiene como valor predeterminado la instancia de MongoDB que se ejecuta en localhost:27017 si no se especifica.
from pymongo import MongoClient client = MongoClient() Acceder a los objetos de la base de datos # La clase Base de datos de PyMongo representa la construcción de la base de datos en MongoDB.</description>
    </item>
    
    <item>
      <title>Convertir entre BSON y JSON</title>
      <link>https://www.wikiod.com/es/pymongo/convertir-entre-bson-y-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pymongo/convertir-entre-bson-y-json/</guid>
      <description>En muchas aplicaciones, los registros de MongoDB deben serializarse en formato JSON. Si sus registros tienen campos de tipo fecha, fecha y hora, objectId, binario, código, etc., encontrará excepciones TypeError: not JSON serializable al usar json.dumps. Este tema muestra cómo superar esto.
Usando json_util # json_util proporciona dos métodos auxiliares, dumps y loads, que envuelven los métodos json nativos y proporcionan una conversión BSON explícita hacia y desde json.
Uso sencillo # from bson.</description>
    </item>
    
    <item>
      <title>Filtrar documentos por tiempo de creación almacenados en ObjectId</title>
      <link>https://www.wikiod.com/es/pymongo/filtrar-documentos-por-tiempo-de-creacion-almacenados-en-objectid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/pymongo/filtrar-documentos-por-tiempo-de-creacion-almacenados-en-objectid/</guid>
      <description>Incluye ejemplos de consulta de pymongo para filtrar documentos por marca de tiempo encapsulada en ObjectId
Documentos creados en los últimos 60 segundos # Cómo encontrar documentos creados hace 60 segundos
seconds = 60 gen_time = datetime.datetime.today() - datetime.timedelta(seconds=seconds) dummy_id = ObjectId.from_datetime(gen_time) db.CollectionName.find({&amp;quot;_id&amp;quot;: {&amp;quot;$gte&amp;quot;: dummy_id}}) Si se encuentra en una zona horaria diferente, es posible que deba desplazar la fecha y hora a UTC
seconds = 60 gen_time = datetime.datetime.today() - datetime.</description>
    </item>
    
  </channel>
</rss>

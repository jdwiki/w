<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial numpy on </title>
    <link>https://www.wikiod.com/es/docs/numpy/</link>
    <description>Recent content in Tutorial numpy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/numpy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con numpy</title>
      <link>https://www.wikiod.com/es/numpy/empezando-con-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/empezando-con-numpy/</guid>
      <description>Importación básica # Importe el módulo numpy para usar cualquier parte de él.
import numpy as np La mayoría de los ejemplos usarán np como abreviatura de numpy. Suponga que &amp;ldquo;np&amp;rdquo; significa &amp;ldquo;numpy&amp;rdquo; en ejemplos de código.
x = np.array([1,2,3,4]) Instalación en Linux # NumPy está disponible en los repositorios predeterminados de las distribuciones de Linux más populares y se puede instalar de la misma manera que se suelen instalar los paquetes en una distribución de Linux.</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/numpy/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/arreglos/</guid>
      <description>Las matrices N-dimensionales o ndarrays son el objeto principal de numpy que se utiliza para almacenar elementos del mismo tipo de datos. Proporcionan una estructura de datos eficiente que es superior a las matrices ordinarias de Python.
Siempre que sea posible, exprese las operaciones sobre los datos en términos de matrices y operaciones vectoriales. Las operaciones vectoriales se ejecutan mucho más rápido que el equivalente para bucles
Acceso a la matriz # La sintaxis de segmento es i:j:k donde i es el índice inicial (inclusivo), j es el índice final (exclusivo) y k es el tamaño del paso.</description>
    </item>
    
    <item>
      <title>numpy.punto</title>
      <link>https://www.wikiod.com/es/numpy/numpypunto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/numpypunto/</guid>
      <description>Sintaxis # numpy.dot(a, b, out=Ninguno) Parámetros # Nombre Detalles un una matriz numpy segundo una matriz numpy fuera una matriz numpy numpy.punto
Devuelve el producto escalar de a y b. Si a y b son ambos escalares o ambas matrices 1-D, se devuelve un escalar; de lo contrario, se devuelve una matriz. Si se da out, entonces se devuelve.
Multiplicación de matrices # La multiplicación de matrices se puede hacer de dos formas equivalentes con la función punto.</description>
    </item>
    
    <item>
      <title>Generando datos aleatorios</title>
      <link>https://www.wikiod.com/es/numpy/generando-datos-aleatorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/generando-datos-aleatorios/</guid>
      <description>El módulo random de NumPy proporciona métodos convenientes para generar datos aleatorios que tengan la forma y distribución deseadas.
Aquí está la [documentación oficial] (https://docs.scipy.org/doc/numpy-1.12.0/reference/routines.random.html).
Generación de números aleatorios extraídos de distribuciones específicas # Extraiga muestras de una distribución normal (gaussiana)
# Generate 5 random numbers from a standard normal distribution # (mean = 0, standard deviation = 1) np.random.randn(5) # Out: array([-0.84423086, 0.70564081, -0.39878617, -0.82719653, -0.4157447 ]) # This result can also be achieved with the more general np.</description>
    </item>
    
    <item>
      <title>Álgebra lineal con np.linalg</title>
      <link>https://www.wikiod.com/es/numpy/algebra-lineal-con-nplinalg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/algebra-lineal-con-nplinalg/</guid>
      <description>A partir de la versión 1.8, varias de las rutinas en np.linalg pueden operar en una &amp;lsquo;pila&amp;rsquo; de matrices. Es decir, la rutina puede calcular resultados para varias matrices si se apilan juntas. Por ejemplo, A aquí se interpreta como dos matrices apiladas de 3 por 3:
np.random.seed(123) A = np.random.rand(2,3,3) b = np.random.rand(2,3) x = np.linalg.solve(A, b) print np.dot(A[0,:,:], x[0,:]) # array([ 0.53155137, 0.53182759, 0.63440096]) print b[0,:] # array([ 0.</description>
    </item>
    
    <item>
      <title>Regresión lineal simple</title>
      <link>https://www.wikiod.com/es/numpy/regresion-lineal-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/regresion-lineal-simple/</guid>
      <description>Ajuste de una línea (u otra función) a un conjunto de puntos de datos.
Uso de np.polyfit # Creamos un conjunto de datos que luego ajustamos con una línea recta $f(x) = m x + c$.
npoints = 20 slope = 2 offset = 3 x = np.arange(npoints) y = slope * x + offset + np.random.normal(size=npoints) p = np.polyfit(x,y,1) # Last argument is degree of polynomial Para ver lo que hemos hecho:</description>
    </item>
    
    <item>
      <title>numpy.cross</title>
      <link>https://www.wikiod.com/es/numpy/numpycross/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/numpycross/</guid>
      <description>Sintaxis # numpy.cross(a, b) # producto cruzado de a y b (o vectores en a y b) numpy.cross(a, b, axisa=-1) #producto cruzado de vectores en a con b, s.t. los vectores en a se disponen a lo largo del eje axisa numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1) # productos cruzados de vectores en a y b, vectores de salida dispuestos a lo largo del eje especificado por *axisc * numpy.cross(a, b, axis=None) # productos cruzados de vectores en a y b, vectores en a, b y en la salida dispuestos a lo largo del eje axis Parámetros # Columna Columna un, b En su uso más simple, a y b son dos vectores de 2 o 3 elementos.</description>
    </item>
    
    <item>
      <title>Archivo IO con numpy</title>
      <link>https://www.wikiod.com/es/numpy/archivo-io-con-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/archivo-io-con-numpy/</guid>
      <description>Cargar datos numéricos desde archivos de texto con estructura consistente # La función np.loadtxt se puede usar para leer archivos tipo csv:
# File: # # Col_1 Col_2 # 1, 1 # 2, 4 # 3, 9 np.loadtxt(&#39;/path/to/dir/csvlike.txt&#39;, delimiter=&#39;,&#39;, comments=&#39;#&#39;) # Output: # array([[ 1., 1.], # [ 2., 4.], # [ 3., 9.]]) El mismo archivo podría leerse usando una expresión regular con np.fromregex:
np.fromregex(&#39;/path/to/dir/csvlike.txt&#39;, r&#39;(\d+),\s(\d+)&#39;, np.int64) # Output: # array([[1, 1], # [2, 4], # [3, 9]]) Guardar y cargar matrices numpy usando archivos binarios # x = np.</description>
    </item>
    
    <item>
      <title>subclase ndarray</title>
      <link>https://www.wikiod.com/es/numpy/subclase-ndarray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/subclase-ndarray/</guid>
      <description>Sintaxis # def __array_prepare__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = None) -&amp;gt; ndarray: # invocado de camino a ufunc
def __array_wrap__(self, out_arr: ndarray, context: Tuple[ufunc, Tuple, int] = None) -&amp;gt; ndarray: # llamado al salir de un ufunc
__array_priority__: int # utilizado para determinar qué argumento invocar los métodos anteriores cuando se llama a ufunc
def __array_finalize__(self, obj: ndarray): # invocado cada vez que surge una nueva instancia de esta clase, incluso si esto sucede por rutas distintas a __new__</description>
    </item>
    
    <item>
      <title>Filtrado de datos</title>
      <link>https://www.wikiod.com/es/numpy/filtrado-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/numpy/filtrado-de-datos/</guid>
      <description>Filtrado de datos con una matriz booleana # Cuando solo se proporciona un único argumento a la función where de numpy, devuelve los índices de la matriz de entrada (la condición) que se evalúan como verdaderos (el mismo comportamiento que numpy.nonzero). Esto se puede usar para extraer los índices de una matriz que satisfacen una condición dada.
import numpy as np a = np.arange(20).reshape(2,10) # a = array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]) # Generate boolean array indicating which values in a are both greater than 7 and less than 13 condition = np.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de javafx on </title>
    <link>https://www.wikiod.com/es/docs/javafx/</link>
    <description>Recent content in Tutorial de javafx on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/javafx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con javafx</title>
      <link>https://www.wikiod.com/es/javafx/comenzando-con-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/comenzando-con-javafx/</guid>
      <description>Programa Hola Mundo # El siguiente código crea una interfaz de usuario simple que contiene un solo &amp;ldquo;Botón&amp;rdquo; que imprime una &amp;ldquo;Cadena&amp;rdquo; en la consola al hacer clic.
import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Alert.AlertType; import javafx.scene.control.Button; import javafx.scene.layout.StackPane; import javafx.stage.Stage; public class HelloWorld extends Application { @Override public void start(Stage primaryStage) { // create a button with specified text Button button = new Button(&amp;quot;Say &#39;Hello World&#39;&amp;quot;); // set a handler that is executed when the user activates the button // e.</description>
    </item>
    
    <item>
      <title>Internacionalización en JavaFX</title>
      <link>https://www.wikiod.com/es/javafx/internacionalizacion-en-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/internacionalizacion-en-javafx/</guid>
      <description>Cargando paquete de recursos # JavaFX proporciona una manera fácil de internacionalizar sus interfaces de usuario. Al crear una vista a partir de un archivo FXML, puede proporcionar el FXMLLoader con un paquete de recursos:
Locale locale = new Locale(&amp;quot;en&amp;quot;, &amp;quot;UK&amp;quot;); ResourceBundle bundle = ResourceBundle.getBundle(&amp;quot;strings&amp;quot;, locale); Parent root = FXMLLoader.load(getClass().getClassLoader() .getResource(&amp;quot;ui/main.fxml&amp;quot;), bundle); Este paquete provisto se usa automáticamente para traducir todos los textos en su archivo FXML que comienzan con un %.</description>
    </item>
    
    <item>
      <title>FXML y controladores</title>
      <link>https://www.wikiod.com/es/javafx/fxml-y-controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/fxml-y-controladores/</guid>
      <description>Sintaxis # xmlns:fx=&amp;ldquo;http://javafx.com/fxml&amp;rdquo; // declaración de espacio de nombres Configuración de propiedades # Hay varias formas de agregar datos a un objeto en fxml:
etiqueta &amp;lt;propiedad&amp;gt; # Se puede agregar una etiqueta con el nombre de una propiedad como elemento secundario de un elemento utilizado para crear una instancia. El elemento secundario de esta etiqueta se asigna a la propiedad utilizando el setter o se agrega al contenido de la propiedad (propiedades de lista/mapa de solo lectura).</description>
    </item>
    
    <item>
      <title>Constructor de escena</title>
      <link>https://www.wikiod.com/es/javafx/constructor-de-escena/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/constructor-de-escena/</guid>
      <description>JavaFX Scene Builder es una herramienta de diseño visual que permite a los usuarios diseñar rápidamente interfaces de usuario de aplicaciones JavaFX, sin codificación. Se utiliza para generar archivos FXML.
JavaFX Scene Builder es una herramienta de diseño visual que permite a los usuarios diseñar rápidamente interfaces de usuario de aplicaciones JavaFX, sin codificación. Los usuarios pueden arrastrar y soltar componentes de la interfaz de usuario en un área de trabajo, modificar sus propiedades, aplicar hojas de estilo y el código FXML para el diseño que están creando se genera automáticamente en segundo plano.</description>
    </item>
    
    <item>
      <title>Diseños</title>
      <link>https://www.wikiod.com/es/javafx/disenos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/disenos/</guid>
      <description>Panel de borde # El BorderPane está separado en cinco áreas diferentes.
Las áreas de borde (&amp;lsquo;Superior&amp;rsquo;, &amp;lsquo;Derecha&amp;rsquo;, &amp;lsquo;Inferior&amp;rsquo;, &amp;lsquo;Izquierda&amp;rsquo;) tienen un tamaño preferido en función de su contenido. De manera predeterminada, solo tomarán lo que necesiten, mientras que el área &amp;ldquo;Centro&amp;rdquo; tomará el espacio restante. Cuando las áreas de borde están vacías, no ocupan espacio.
Cada área puede contener sólo un elemento. Se puede agregar usando los métodos setTop(Node), setRight(Node), setBottom(Node), setLeft(Node), setCenter(Node).</description>
    </item>
    
    <item>
      <title>TableView</title>
      <link>https://www.wikiod.com/es/javafx/tableview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/tableview/</guid>
      <description>##PropiedadValorFábrica PropertyValueFactory se puede utilizar como cellValueFactory en una TableColumn. Utiliza la reflexión para acceder a métodos que coinciden con un determinado patrón para recuperar los datos de un elemento TableView:
Ejemplo
TableColumn&amp;lt;Person, String&amp;gt; nameColumn = ... PropertyValueFactory&amp;lt;Person, String&amp;gt; valueFactory = new PropertyValueFactory&amp;lt;&amp;gt;(&amp;quot;name&amp;quot;); nameColumn.setCellValueFactory(valueFactory); El nombre del método que se usa para obtener los datos depende del parámetro del constructor para PropertyValueFactory.
Método de propiedad: Se espera que este tipo de método devuelva un ObservableValue que contenga los datos.</description>
    </item>
    
    <item>
      <title>WebView y WebEngine</title>
      <link>https://www.wikiod.com/es/javafx/webview-y-webengine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/webview-y-webengine/</guid>
      <description>El WebView es el nodo JavaFX que está integrado en el árbol de componentes JavaFX. Maneja un WebEngine y muestra su contenido.
El WebEngine es el motor de navegación subyacente, que básicamente hace todo el trabajo.
Cargando una página # WebView wv = new WebView(); WebEngine we = wv.getEngine(); we.load(&amp;quot;https://stackoverflow.com&amp;quot;); WebView es el shell de interfaz de usuario alrededor de [WebEngine](https:// docs.oracle.com/javase/8/javafx/api/javafx/scene/web/WebEngine.html). Casi todos los controles para la interacción de la interfaz de usuario con una página se realizan a través de la clase WebEngine.</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://www.wikiod.com/es/javafx/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/css/</guid>
      <description>Sintaxis # NodeClass /* selector por clase de Nodo */ .someclass /* selector por clase */ #someId /* selector por id */ [selector1] &amp;gt; [selector2] /* selector para un hijo directo de un nodo que coincida con selector1 que coincida con selector2 */ [selector1] [selector2] /* selector para un descendiente de un nodo que coincida con selector1 que coincida con selector2 */ Usar CSS para diseñar # CSS se puede aplicar en varios lugares:</description>
    </item>
    
    <item>
      <title>Propiedades y observables</title>
      <link>https://www.wikiod.com/es/javafx/propiedades-y-observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/propiedades-y-observables/</guid>
      <description>Las propiedades son observables y se les pueden agregar oyentes. Se usan consistentemente para propiedades de Nodes.
Tipos de propiedades y nombres # Propiedades estándar # Dependiendo del tipo de propiedad, existen hasta 3 métodos para una sola propiedad. Deje que &amp;lt;propiedad&amp;gt; denote el nombre de una propiedad y &amp;lt;Propiedad&amp;gt; el nombre de la propiedad con una primera letra mayúscula. Y sea T el tipo de la propiedad; para envoltorios primitivos usamos el tipo primitivo aquí, p.</description>
    </item>
    
    <item>
      <title>Diálogos</title>
      <link>https://www.wikiod.com/es/javafx/dialogos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/javafx/dialogos/</guid>
      <description>Se agregaron diálogos en la actualización 40 de JavaFX 8.
Diálogo de entrada de texto # TextInputDialog permite pedirle al usuario que ingrese una sola String.
TextInputDialog dialog = new TextInputDialog(&amp;quot;42&amp;quot;); dialog.setHeaderText(&amp;quot;Input your favourite int.&amp;quot;); dialog.setTitle(&amp;quot;Favourite number?&amp;quot;); dialog.setContentText(&amp;quot;Your favourite int: &amp;quot;); Optional&amp;lt;String&amp;gt; result = dialog.showAndWait(); String s = result.map(r -&amp;gt; { try { Integer n = Integer.valueOf(r); return MessageFormat.format(&amp;quot;Nice! I like {0} too!&amp;quot;, n); } catch (NumberFormatException ex) { return MessageFormat.</description>
    </item>
    
  </channel>
</rss>

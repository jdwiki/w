<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial unity3d on </title>
    <link>https://www.wikiod.com/es/docs/unity3d/</link>
    <description>Recent content in tutorial unity3d on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/unity3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con unity3d</title>
      <link>https://www.wikiod.com/es/unity3d/primeros-pasos-con-unity3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/primeros-pasos-con-unity3d/</guid>
      <description>Instalación o Configuración # Visión general # Unity se ejecuta en Windows y Mac. También hay disponible una versión alfa de Linux.
Hay 4 planes de pago diferentes para Unity:
Personal - Gratis (ver abajo) Plus - $35 USD al mes por asiento (ver más abajo) Pro - $125 USD al mes por asiento - Después de suscribirte al plan Pro durante 24 meses consecutivos, tienes la opción de dejar de suscribirte y mantener la versión que tienes.</description>
    </item>
    
    <item>
      <title>Usando el control de código fuente de Git con Unity</title>
      <link>https://www.wikiod.com/es/unity3d/usando-el-control-de-codigo-fuente-de-git-con-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/usando-el-control-de-codigo-fuente-de-git-con-unity/</guid>
      <description>Configuración de un repositorio Git para Unity # Al inicializar un repositorio de Git para el desarrollo de Unity, hay un par de cosas que deben hacerse.
Unity ignorar carpetas # No todo debe estar versionado en el repositorio. Puede agregar la plantilla a continuación a su archivo .gitignore en la raíz de su repositorio. O, alternativamente, puede consultar el código abierto Unity .gitignore en GitHub y, alternativamente, generar uno usando gitignore.</description>
    </item>
    
    <item>
      <title>Ampliación del editor</title>
      <link>https://www.wikiod.com/es/unity3d/ampliacion-del-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/ampliacion-del-editor/</guid>
      <description>Sintaxis # [Elemento de menú (nombre de elemento de cadena)] [MenuItem(string itemName, bool isValidateFunction)] [MenuItem(string itemName, bool isValidateFunction, int prioridad)] [ContextMenu(nombre de cadena)] [ContextMenuItem (nombre de cadena, función de cadena)] [DrawGizmo(GizmoType gizmo)] [DrawGizmo(GizmoType gizmo, Tipo DrawGizmoType)] Parámetros # Parámetro Detalles MenúComando MenuCommand se utiliza para extraer el contexto de un MenuItem MenuCommand.context El objeto que es el destino del comando de menú MenuCommand.userData Un int para pasar información personalizada a un elemento del menú Inspector personalizado # El uso de un inspector personalizado le permite cambiar la forma en que se dibuja una secuencia de comandos en el Inspector.</description>
    </item>
    
    <item>
      <title>Solteros en Unity</title>
      <link>https://www.wikiod.com/es/unity3d/solteros-en-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/solteros-en-unity/</guid>
      <description>Si bien hay escuelas de pensamiento que presentan argumentos convincentes de por qué el uso sin restricciones de Singletons es una mala idea, p. Singleton en gameprogrammingpatterns.com, hay ocasiones en las que es posible que desee persistir un GameObject en Unity en varias escenas (por ejemplo, para música de fondo continua) mientras se asegura de que no pueda existir más de una instancia; un caso de uso perfecto para un Singleton.</description>
    </item>
    
    <item>
      <title>corrutinas</title>
      <link>https://www.wikiod.com/es/unity3d/corrutinas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/corrutinas/</guid>
      <description>Sintaxis # Public Coroutine StartCoroutine (rutina IEnumerator); public Coroutine StartCoroutine(string methodName, object value = null); public void StopCoroutine(string methodName); StopCoroutine public void (rutina IEnumerator); public void StopAllCoroutines(); Consideraciones de rendimiento # Es mejor usar corrutinas con moderación, ya que la flexibilidad conlleva un costo de rendimiento.
Las corrutinas en grandes cantidades exigen más de la CPU que los métodos de actualización estándar. Hay un problema en algunas versiones de Unity donde las corrutinas producen basura en cada ciclo de actualización debido a que Unity encajona el valor de retorno MoveNext.</description>
    </item>
    
    <item>
      <title>Mejoramiento</title>
      <link>https://www.wikiod.com/es/unity3d/mejoramiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/mejoramiento/</guid>
      <description>Si es posible, deshabilite las secuencias de comandos en los objetos cuando no se necesiten. Por ejemplo, si tiene una secuencia de comandos en un objeto enemigo que busca y dispara al jugador, considere desactivar esta secuencia de comandos cuando el enemigo está demasiado lejos, por ejemplo, del jugador. Poder de la rutina # Uso # Si tiene una operación de ejecución prolongada que se basa en la API de Unity no segura para subprocesos, use Coroutines para dividirla en varios marcos y mantener la capacidad de respuesta de su aplicación.</description>
    </item>
    
    <item>
      <title>Redes</title>
      <link>https://www.wikiod.com/es/unity3d/redes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/redes/</guid>
      <description>Modo sin cabeza en Unity # Si está creando un servidor para implementar en Linux, la configuración de compilación tiene una opción de &amp;ldquo;modo sin cabeza&amp;rdquo;. La compilación de una aplicación con esta opción no muestra nada y no lee la entrada del usuario, que generalmente es lo que queremos para un servidor.
Crear un servidor, un cliente y enviar un mensaje. # Unity networking proporciona la API de alto nivel (HLA) para manejar las comunicaciones de red abstrayéndose de las implementaciones de bajo nivel.</description>
    </item>
    
    <item>
      <title>Agrupación de objetos</title>
      <link>https://www.wikiod.com/es/unity3d/agrupacion-de-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/agrupacion-de-objetos/</guid>
      <description>Conjunto de objetos # A veces, cuando creas un juego, necesitas crear y destruir muchos objetos del mismo tipo una y otra vez. Simplemente puede hacer esto haciendo un prefabricado e instanciarlo/destruirlo cuando lo necesite, sin embargo, hacer esto es ineficiente y puede ralentizar su juego.
Una forma de evitar este problema es la agrupación de objetos. Básicamente, lo que esto significa es que tienes un grupo (con o sin límite en la cantidad) de objetos que vas a reutilizar siempre que puedas para evitar crear instancias o destruirlos innecesariamente.</description>
    </item>
    
    <item>
      <title>casas prefabricadas</title>
      <link>https://www.wikiod.com/es/unity3d/casas-prefabricadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/casas-prefabricadas/</guid>
      <description>Sintaxis # Objeto público estático PrefabUtility.InstantiatePrefab (objetivo objetivo); Objeto público estático AssetDatabase.LoadAssetAtPath(string assetPath, Type type); Objeto público estático Object.Instantiate (Objeto original); Recursos de objetos estáticos públicos. Carga (ruta de la cadena); Introducción # Prefabs son ​​un tipo de activo que permite el almacenamiento de un GameObject completo con sus componentes, propiedades, componentes adjuntos y valores de propiedad serializados. Hay muchos escenarios donde esto es útil, incluyendo:
Duplicación de objetos en una escena.</description>
    </item>
    
    <item>
      <title>API de grupo de selección</title>
      <link>https://www.wikiod.com/es/unity3d/api-de-grupo-de-seleccion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/unity3d/api-de-grupo-de-seleccion/</guid>
      <description>Dado que el uso de CullingGroups no siempre es muy sencillo, puede ser útil encapsular la mayor parte de la lógica detrás de una clase de administrador.
A continuación se muestra un modelo de cómo podría operar dicho gerente.
using UnityEngine; using System; public interface ICullingGroupManager { int ReserveSphere(); void ReleaseSphere(int sphereIndex); void SetPosition(int sphereIndex, Vector3 position); void SetRadius(int sphereIndex, float radius); void SetCullingEvent(int sphereIndex, Action&amp;lt;CullingGroupEvent&amp;gt; sphere); } La esencia de esto es que reserva una esfera de selección del administrador que devuelve el índice de la esfera reservada.</description>
    </item>
    
  </channel>
</rss>

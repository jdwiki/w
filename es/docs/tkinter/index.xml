<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/tkinter/</link>
    <description>Recent content in Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/tkinter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con tkinter</title>
      <link>https://www.wikiod.com/es/tkinter/comenzando-con-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/comenzando-con-tkinter/</guid>
      <description>Instalación o Configuración # Tkinter viene preinstalado con los binarios del instalador de Python para Mac OS X y la plataforma Windows. Entonces, si instala Python desde los binarios oficiales para la plataforma Mac OS X o Windows, está listo para usar Tkinter.
Para las versiones Debian de Linux, debe instalarlo manualmente utilizando los siguientes comandos.
Para Python 3
sudo apt-get install python3-tk
Para Python 2.7
sudo apt-get install python-tk</description>
    </item>
    
    <item>
      <title>Varias ventanas (widgets de nivel superior)</title>
      <link>https://www.wikiod.com/es/tkinter/varias-ventanas-widgets-de-nivel-superior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/varias-ventanas-widgets-de-nivel-superior/</guid>
      <description>Diferencia entre Tk y Toplevel # Tk es la raíz absoluta de la aplicación, es el primer widget que necesita instanciarse y la GUI se cerrará cuando se destruya.
Toplevel es una ventana en la aplicación, cerrar la ventana destruirá todos los widgets secundarios colocados en esa ventana{1} pero no cerrará el programa.
try: import tkinter as tk #python3 except ImportError: import Tkinter as tk #python2 #root application, can only have one of these.</description>
    </item>
    
    <item>
      <title>El widget de entrada de Tkinter</title>
      <link>https://www.wikiod.com/es/tkinter/el-widget-de-entrada-de-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/el-widget-de-entrada-de-tkinter/</guid>
      <description>Sintaxis # entrada = tk.Entrada(padre, **kwargs) entrada.get() entrada.insertar(índice, &amp;ldquo;valor&amp;rdquo;) entrada.eliminar(start_index, end_index) entrada.bind(evento, devolución de llamada) Parámetros # Parámetro Descripción padre Los widgets de tkinter existen en una jerarquía. Excepto por la ventana raíz, todos los widgets tienen un padre. Algunos tutoriales en línea llaman a esto &amp;ldquo;maestro&amp;rdquo;. Cuando el widget se agrega a la pantalla con pack, place o grid, aparecerá dentro de este widget principal ancho El ancho especifica el ancho deseado del widget basado en un ancho de carácter promedio.</description>
    </item>
    
    <item>
      <title>Gestores de geometría de Tkinter</title>
      <link>https://www.wikiod.com/es/tkinter/gestores-de-geometria-de-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/gestores-de-geometria-de-tkinter/</guid>
      <description>Hay tres administradores de geometría para colocar widgets: pack(), grid() y place().
paquete() # El administrador de geometría pack() organiza los widgets en bloques antes de colocarlos en el widget principal. Utiliza las opciones rellenar, expandir y lado.
Sintaxis
widget.pack(opción)
Rellenar
Determina si el widget mantiene el espacio mínimo necesario o si ocupa cualquier espacio adicional que se le haya asignado. Atributos: NINGUNO (predeterminado), X (rellenar horizontalmente), Y (rellenar verticalmente) o AMBOS (rellenar tanto horizontal como verticalmente).</description>
    </item>
    
    <item>
      <title>Widgets de desplazamiento</title>
      <link>https://www.wikiod.com/es/tkinter/widgets-de-desplazamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/widgets-de-desplazamiento/</guid>
      <description>Las barras de desplazamiento se pueden agregar a los widgets Listbox, Canvas y Text. Además, los widgets de entrada se pueden desplazar horizontalmente. Para poder desplazarse por otro tipo de widgets, debe colocarlos dentro de un lienzo o un widget de texto.
Sintaxis # barra de desplazamiento = tk.Scrollbar(padre, **kwargs) Parámetros # Parámetro Descripción padre Los widgets de tkinter existen en una jerarquía. Excepto por la ventana raíz, todos los widgets tienen un padre.</description>
    </item>
    
    <item>
      <title>El widget de botón de radio de Tkinter</title>
      <link>https://www.wikiod.com/es/tkinter/el-widget-de-boton-de-radio-de-tkinter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/el-widget-de-boton-de-radio-de-tkinter/</guid>
      <description>Sintaxis # radiobutton = tk.Radiobutton(padre, **kwargs) Parámetros # Parámetro Descripción padre Los widgets de tkinter existen en una jerarquía. Excepto por la ventana raíz, todos los widgets tienen un padre. Algunos tutoriales en línea llaman a esto &amp;ldquo;maestro&amp;rdquo;. Cuando el widget se agrega a la pantalla con paquete, lugar o cuadrícula, aparecerá dentro de este widget principal. comando función llamada cada vez que el usuario cambia el estado del botón de radio indicadoron 1 o Verdadero para botones de opción, 0 o Falso para cajas de botones texto Texto para mostrar junto al botón de opción.</description>
    </item>
    
    <item>
      <title>Retraso de una función</title>
      <link>https://www.wikiod.com/es/tkinter/retraso-de-una-funcion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/retraso-de-una-funcion/</guid>
      <description>Sintaxis # widget.después(delay_ms, devolución de llamada, *argumentos) Parámetros # Parámetro Descripción retraso_ms Tiempo (milisegundos) que se demora la llamada a la función callback devolución de llamada Función que se llama después del delay_ms dado. Si no se proporciona este parámetro, .after actúa de forma similar a time.sleep (en milisegundos) La sintaxis asume que un widget aceptado por el método .after ha sido creado previamente (es decir, widget=tk.Label(parent))
.después() # .after(delay, callback=None) es un método definido para todos los widgets de tkinter.</description>
    </item>
    
    <item>
      <title>Widgets de TTK</title>
      <link>https://www.wikiod.com/es/tkinter/widgets-de-ttk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/widgets-de-ttk/</guid>
      <description>Ejemplos de los diferentes widgets de ttk. Ttk tiene un total de 17 widgets, once de los cuales ya existían en tkinter (tk).
El uso del módulo ttk le da a su aplicación un aspecto más moderno y mejorado.
Sintaxis # árbol=ttk.Treeview(maestro,**kwargs) Parámetros # Parámetro Descripción maestro Los widgets de tkinter existen en una jerarquía. Excepto por la ventana raíz, todos los widgets tienen un padre (también llamado &amp;ldquo;maestro&amp;rdquo;). Cuando el widget se agrega a la pantalla con paquete, lugar o cuadrícula, aparecerá dentro de este widget principal Estos ejemplos asumen que tkinter se ha importado con importar tkinter como tk (python 3) o importar Tkinter como tk (python 2).</description>
    </item>
    
    <item>
      <title>Adición de imágenes a la etiquetabotón</title>
      <link>https://www.wikiod.com/es/tkinter/adicion-de-imagenes-a-la-etiquetaboton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/adicion-de-imagenes-a-la-etiquetaboton/</guid>
      <description>Esto muestra el uso adecuado de las imágenes y cómo mostrarlas correctamente.
Formatos de archivo compatibles con Tkinter # Tkinter admite archivos .ppm de PIL (Biblioteca de imágenes de Python), .JPG, .PNG y .GIF.
Para importar una imagen, primero debe crear una referencia como esta:
Image = PhotoImage(filename = [Your Image here]) Ahora, podemos agregar esta imagen a Button y Labels usando la devolución de llamada &amp;ldquo;img&amp;rdquo;:
Lbl = Label (width=490, img=image) Uso de formatos .</description>
    </item>
    
    <item>
      <title>Personalizar estilos ttk</title>
      <link>https://www.wikiod.com/es/tkinter/personalizar-estilos-ttk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/tkinter/personalizar-estilos-ttk/</guid>
      <description>El estilo de los nuevos widgets de ttk es uno de los aspectos más poderosos de ttk. Además del hecho de que es una forma de trabajar completamente diferente al paquete tk tradicional, permite realizar un alto grado de personalización en sus widgets.
Personaliza una vista de árbol # Tomando https://www.wikiod.com/es/tkinter/widgets-de-ttk#Vista de árbol: ejemplo básico se puede mostrar cómo personalizar una vista de árbol básica.
En este caso, creamos un estilo &amp;ldquo;mystyle.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial dardo on </title>
    <link>https://www.wikiod.com/es/docs/dart/</link>
    <description>Recent content in tutorial dardo on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con el dardo</title>
      <link>https://www.wikiod.com/es/dart/comenzando-con-el-dardo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/comenzando-con-el-dardo/</guid>
      <description>Instalación o Configuración # El SDK de Dart incluye todo lo que necesita para escribir y ejecutar el código de Dart: VM, bibliotecas, analizador, administrador de paquetes, generador de documentos, formateador, depurador y más. Si está haciendo desarrollo web, también necesitará Dartium.
Instalación y actualizaciones automatizadas # Instalando Dart en Windows Instalando Dart en Mac Instalando Dart en Linux Manual de instalación # También puede instalar manualmente cualquier versión del SDK.</description>
    </item>
    
    <item>
      <title>Colecciones</title>
      <link>https://www.wikiod.com/es/dart/colecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/colecciones/</guid>
      <description>Creando una nueva Lista # Las listas se pueden crear de varias maneras.
La forma recomendada es usar un literal List:
var vegetables = [&#39;broccoli&#39;, &#39;cabbage&#39;]; También se puede usar el constructor List:
var fruits = new List(); Si prefiere una escritura más fuerte, también puede proporcionar un parámetro de tipo de una de las siguientes maneras:
var fruits = &amp;lt;String&amp;gt;[&#39;apples&#39;, &#39;oranges&#39;]; var fruits = new List&amp;lt;String&amp;gt;(); Para crear una pequeña lista ampliable, ya sea vacía o que contenga algunos valores iniciales conocidos, se prefiere la forma literal.</description>
    </item>
    
    <item>
      <title>Programación asíncrona</title>
      <link>https://www.wikiod.com/es/dart/programacion-asincrona/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/programacion-asincrona/</guid>
      <description>Conversión de devoluciones de llamada a futuros # Dart tiene una biblioteca asincrónica robusta, con Future, Stream y más. Sin embargo, a veces puede encontrarse con una API asíncrona que usa callbacks en lugar de Futures. Para cerrar la brecha entre las devoluciones de llamada y los futuros, Dart ofrece la clase Completer. Puede usar un Completer para convertir una devolución de llamada en un futuro.
Los completadores son excelentes para unir una API basada en devolución de llamada con una API basada en el futuro.</description>
    </item>
    
    <item>
      <title>Flujo de control</title>
      <link>https://www.wikiod.com/es/dart/flujo-de-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/flujo-de-control/</guid>
      <description>Si más # Dart tiene If Else:
if (year &amp;gt;= 2001) { print(&#39;21st century&#39;); } else if (year &amp;gt;= 1901) { print(&#39;20th century&#39;); } else { print(&#39;We Must Go Back!&#39;); } Dart también tiene un operador ternario if:
var foo = true; print(foo ? &#39;Foo&#39; : &#39;Bar&#39;); // Displays &amp;quot;Foo&amp;quot;. Mientras Bucle # Los bucles while y do while están permitidos en Dart:
while(peopleAreClapping()) { playSongs(); } y:
do { processRequest(); } while(stillRunning()); Los bucles se pueden terminar con un descanso:</description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://www.wikiod.com/es/dart/clases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/clases/</guid>
      <description>Miembros # Una clase puede tener miembros.
Las variables de instancia se pueden declarar con/sin anotaciones de tipo y, opcionalmente, se pueden inicializar. Los miembros no inicializados tienen el valor null, a menos que el constructor establezca otro valor.
class Foo { var member1; int member2; String member3 = &amp;quot;Hello world!&amp;quot;; } Las variables de clase se declaran utilizando la palabra clave static.
class Bar { static var member4; static String member5; static int member6 = 42; } Si un método no toma argumentos, es rápido, devuelve un valor y no tiene efectos secundarios visibles, entonces se puede usar un método getter:</description>
    </item>
    
    <item>
      <title>Conversión de datos</title>
      <link>https://www.wikiod.com/es/dart/conversion-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/conversion-de-datos/</guid>
      <description>##JSON import &amp;lsquo;dart:convert&amp;rsquo;;
void main() { var jsonString = &amp;quot;&amp;quot;&amp;quot; { &amp;quot;cats&amp;quot;: { &amp;quot;abysinnian&amp;quot;: { &amp;quot;origin&amp;quot;: &amp;quot;Burma&amp;quot;, &amp;quot;behavior&amp;quot;: &amp;quot;playful&amp;quot; } } } &amp;quot;&amp;quot;&amp;quot;; var obj = JSON.decode(jsonString); print(obj[&#39;cats&#39;][&#39;abysinnian&#39;][&#39;behavior&#39;]); // playful } Ver ejemplo en dartpad: https://dartpad.dartlang.org/7d5958cf10e611b36326f27b062108fe</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/dart/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/funciones/</guid>
      <description>Dart es un verdadero lenguaje orientado a objetos, por lo que incluso las funciones son objetos y tienen un tipo, Función. Esto significa que las funciones pueden asignarse a variables o pasarse como argumentos a otras funciones. También puede llamar a una instancia de una clase Dart como si fuera una función.
Funciones con parámetros con nombre # Al definir una función, use {param1, param2, …} para especificar parámetros con nombre:</description>
    </item>
    
    <item>
      <title>Interoperabilidad Dart-JavaScript</title>
      <link>https://www.wikiod.com/es/dart/interoperabilidad-dart-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/interoperabilidad-dart-javascript/</guid>
      <description>La interoperabilidad Dart-JavaScript nos permite ejecutar código JavaScript desde nuestros programas Dart.
La interoperabilidad se logra mediante el uso de la biblioteca js para crear stubs de Dart. Estos stubs describen la interfaz que nos gustaría tener con el código JavaScript subyacente. En tiempo de ejecución, llamar al código auxiliar de Dart invocará el código JavaScript.
Envolviendo clases/espacios de nombres de JavaScript # Supongamos que nos gustaría empaquetar la API de JavaScript de Google Maps google.</description>
    </item>
    
    <item>
      <title>Excepciones</title>
      <link>https://www.wikiod.com/es/dart/excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/excepciones/</guid>
      <description>El código Dart puede lanzar y capturar excepciones. Las excepciones son errores que indican que sucedió algo inesperado. Si no se detecta la excepción, el aislado que generó la excepción se suspende y, por lo general, el aislado y su programa finalizan.
A diferencia de Java, todas las excepciones de Dart son excepciones no verificadas. Los métodos no declaran qué excepciones pueden generar, y no es necesario que detecte ninguna excepción.</description>
    </item>
    
    <item>
      <title>Expresiones regulares</title>
      <link>https://www.wikiod.com/es/dart/expresiones-regulares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dart/expresiones-regulares/</guid>
      <description>Sintaxis # var regExp = RegExp(r&amp;rsquo;^(.*)$&amp;rsquo;, multiLine: true, caseSensitive: false); Parámetros # Parámetro Detalles Fuente de la cadena La expresión regular como String {bool multilínea} Si se trata de una expresión regular de varias líneas. (coincide con ^ y $ al principio y al final de cada línea individualmente, no toda la cadena) {bool mayúsculas y minúsculas} Si la expresión distingue entre mayúsculas y minúsculas Las expresiones regulares de Dart tienen la misma sintaxis y semántica que las expresiones regulares de JavaScript.</description>
    </item>
    
  </channel>
</rss>

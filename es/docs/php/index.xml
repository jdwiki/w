<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial PHP on </title>
    <link>https://www.wikiod.com/es/docs/php/</link>
    <description>Recent content in Tutorial PHP on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con PHP</title>
      <link>https://www.wikiod.com/es/php/comenzando-con-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/comenzando-con-php/</guid>
      <description>Salida HTML del servidor web # PHP se puede usar para agregar contenido a archivos HTML. Mientras que HTML es procesado directamente por un navegador web, los scripts PHP son ejecutados por un servidor web y el HTML resultante se envía al navegador.
El siguiente marcado HTML contiene una instrucción PHP que agregará Hello World! a la salida:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;PHP!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;&amp;lt;?php echo &amp;quot;Hello world!&amp;quot;; ?&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Cuando esto se guarda como un script PHP y lo ejecuta un servidor web, se enviará el siguiente código HTML al navegador del usuario:</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://www.wikiod.com/es/php/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/json/</guid>
      <description>JSON (Notación de objetos de JavaScript) es una forma independiente de plataforma y lenguaje de serializar objetos en texto sin formato. Debido a que se usa a menudo en la web y también lo es PHP, existe una extensión básica para trabajar con JSON en PHP.
Sintaxis # string json_encode ( $valor mixto [, int $opciones = 0 [, int $profundidad = 512 ]] ) json_decode mixto ( string $json [, bool $assoc = false [, int $profundidad = 512 [, int $opciones = 0 ]]] ) Parámetros # Parámetro Detalles json_encode - valor El valor que se codifica.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/es/php/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/variables/</guid>
      <description>Sintaxis # $variable = &amp;lsquo;valor&amp;rsquo;; // Asignar variable general $objeto-&amp;gt;propiedad = &amp;lsquo;valor&amp;rsquo;; // Asignar una propiedad de objeto ClassName::$propiedad = &amp;lsquo;valor&amp;rsquo;; // Asignar una propiedad de clase estática $matriz[0] = &amp;lsquo;valor&amp;rsquo;; // Asignar un valor a un índice de una matriz $matriz[] = &amp;lsquo;valor&amp;rsquo;; // Empuja un elemento al final de una matriz $matriz[&amp;lsquo;clave&amp;rsquo;] = &amp;lsquo;valor&amp;rsquo;; // Asignar un valor de matriz echo $variable; // Echo (imprimir) un valor variable alguna_funcion($variable); // Usar variable como parámetro de función unset($variable); // Desarmar una variable $$variable = &amp;lsquo;valor&amp;rsquo;; // Asignar a una variable variable isset($variable); // Comprobar si una variable está configurada o no vacío ($variable); // Comprobar si una variable está vacía o no Comprobación de tipo # Parte de la documentación sobre variables y tipos menciona que PHP no usa tipeo estático.</description>
    </item>
    
    <item>
      <title>Clases y Objetos</title>
      <link>https://www.wikiod.com/es/php/clases-y-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/clases-y-objetos/</guid>
      <description>Las clases y los objetos se utilizan para hacer que su código sea más eficiente y menos repetitivo al agrupar tareas similares.
Una clase se utiliza para definir las acciones y la estructura de datos utilizada para construir objetos. Luego, los objetos se construyen utilizando esta estructura predefinida.
Sintaxis # class &amp;lt;ClassName&amp;gt; [ extiende &amp;lt;ParentClassName&amp;gt; ] [ implements &amp;lt;Interface1&amp;gt; [, &amp;lt;Interface2&amp;gt;, ... ] { } // Declaración de clase interface &amp;lt;InterfaceName&amp;gt; [ extends &amp;lt;ParentInterface1&amp;gt; [, &amp;lt;ParentInterface2&amp;gt;, .</description>
    </item>
    
    <item>
      <title>DOP</title>
      <link>https://www.wikiod.com/es/php/dop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/dop/</guid>
      <description>La extensión PDO (PHP Data Objects) permite a los desarrolladores conectarse a numerosos tipos diferentes de bases de datos y ejecutar consultas contra ellas de manera uniforme y orientada a objetos. manera.
Sintaxis # PDO::LastInsertId() PDO::LastInsertId($columnName) // algunos controladores necesitan el nombre de la columna Advertencia No deje de comprobar las excepciones al utilizar lastInsertId(). Puede arrojar el siguiente error:
SQLSTATE IM001: el controlador no admite esta función
Así es como debe verificar correctamente las excepciones usando este método:</description>
    </item>
    
    <item>
      <title>Salida del valor de una variable</title>
      <link>https://www.wikiod.com/es/php/salida-del-valor-de-una-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/salida-del-valor-de-una-variable/</guid>
      <description>Para construir un programa PHP dinámico e interactivo, es útil generar variables y sus valores. El lenguaje PHP permite múltiples métodos de salida de valor. Este tema cubre los métodos estándar para imprimir un valor en PHP y dónde se pueden usar estos métodos.
Las variables en PHP vienen en una variedad de tipos. Según el caso de uso, es posible que desee enviarlos al navegador como HTML renderizado, enviarlos para su depuración o enviarlos a la terminal (si ejecuta una aplicación a través de la línea de comandos).</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/php/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/arreglos/</guid>
      <description>Una matriz es una estructura de datos que almacena un número arbitrario de valores en un solo valor. Una matriz en PHP es en realidad un mapa ordenado, donde mapa es un tipo que asocia valores a claves.
Sintaxis # $matriz = matriz(&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, &amp;lsquo;Valor3&amp;rsquo;); // Las claves por defecto son 0, 1, 2, &amp;hellip;, $matriz = matriz(&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, ); // coma final opcional $matriz = matriz(&amp;lsquo;clave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;clave2&amp;rsquo; =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;, ); // claves explícitas $matriz = matriz(&amp;lsquo;clave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, ); // Matriz ([&amp;lsquo;clave1&amp;rsquo;] =&amp;gt; Valor1 1 =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;) $matriz = [&amp;lsquo;clave1&amp;rsquo; =&amp;gt; &amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;clave2&amp;rsquo; =&amp;gt; &amp;lsquo;Valor2&amp;rsquo;, ]; // PHP 5.</description>
    </item>
    
    <item>
      <title>Seguridad</title>
      <link>https://www.wikiod.com/es/php/seguridad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/seguridad/</guid>
      <description>Como la mayoría de los sitios web funcionan con PHP, la seguridad de las aplicaciones es un tema importante para que los desarrolladores de PHP protejan su sitio web, sus datos y sus clientes. Este tema cubre las mejores prácticas de seguridad en PHP, así como las vulnerabilidades y debilidades comunes con correcciones de ejemplo en PHP.
Ver también
Evitar la inyección SQL con consultas parametrizadas en PDO Declaraciones preparadas en mysqli Proyecto de seguridad de aplicaciones web abiertas (OWASP) 1: https://www.</description>
    </item>
    
    <item>
      <title>Rasgos</title>
      <link>https://www.wikiod.com/es/php/rasgos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/rasgos/</guid>
      <description>Rasgos para facilitar la reutilización de código horizontal # Digamos que tenemos una interfaz para iniciar sesión:
interface Logger { function log($message); } Ahora digamos que tenemos dos implementaciones concretas de la interfaz Logger: el FileLogger y el ConsoleLogger.
class FileLogger implements Logger { public function log($message) { // Append log message to some file } } class ConsoleLogger implements Logger { public function log($message) { // Log message to the console } } Ahora, si define alguna otra clase Foo que también desea poder realizar tareas de registro, podría hacer algo como esto:</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/php/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/php/inyeccion-de-dependencia/</guid>
      <description>Inyección de dependencia (DI) es un término elegante para &amp;ldquo;pasar cosas&amp;rdquo;. Todo lo que realmente significa es pasar las dependencias de un objeto a través del constructor y/o los establecedores en lugar de crearlos al crear el objeto dentro del objeto.
La inyección de dependencia también puede referirse a los contenedores de inyección de dependencia que automatizan la construcción y la inyección.
Inyección de constructor # Los objetos a menudo dependerán de otros objetos.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de pájaro azul on </title>
    <link>https://www.wikiod.com/es/docs/bluebird/</link>
    <description>Recent content in Tutorial de pájaro azul on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/bluebird/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con pájaro azul</title>
      <link>https://www.wikiod.com/es/bluebird/comenzando-con-pajaro-azul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bluebird/comenzando-con-pajaro-azul/</guid>
      <description>Instalación o configuración # Nodo.js # npm install bluebird Después:
var Promise = require(&amp;quot;bluebird&amp;quot;); navegadores # Hay muchas formas de usar bluebird en los navegadores:
Descargas directas Full build bluebird.js Full build minified bluebird.min.js Core build bluebird.core.js Core build minified bluebird.core.min.js Puede usar browserify en la exportación principal Puede usar el paquete bower. Cuando se usan etiquetas de script, las variables globales Promise y P (alias de Promise) están disponibles. Bluebird se ejecuta en una amplia variedad de navegadores, incluidas versiones anteriores.</description>
    </item>
    
    <item>
      <title>Convertir una API de devolución de llamada en promesas.</title>
      <link>https://www.wikiod.com/es/bluebird/convertir-una-api-de-devolucion-de-llamada-en-promesas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bluebird/convertir-una-api-de-devolucion-de-llamada-en-promesas/</guid>
      <description>Las promesas tienen estado, comienzan como pendientes y pueden liquidarse a:
cumplido, lo que significa que el cálculo se completó con éxito. rejected significa que el cálculo falló. Las funciones de retorno de promesa nunca deben lanzarse, en su lugar, deben devolver rechazos. Lanzar desde una función de retorno de promesa te obligará a usar } catch { y a .catch. Las personas que utilizan API prometidas no esperan que se produzcan promesas.</description>
    </item>
    
    <item>
      <title>Promise.all</title>
      <link>https://www.wikiod.com/es/bluebird/promiseall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bluebird/promiseall/</guid>
      <description>Promise.all( Iterable&amp;lt;any&amp;gt; | Promise&amp;lt;Iterable&amp;lt;any&amp;gt;&amp;gt; input ) -&amp;gt; Promise Este método es útil cuando desea esperar a que se complete más de una promesa.
Dado un Iterable(las matrices son Iterable), o una promesa de Iterable , que produce promesas (o una combinación de promesas y valores), itera sobre todos los valores en Iterable en una matriz y devuelve una promesa que se cumple cuando se cumplen todos los elementos de la matriz.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de microservicios on </title>
    <link>https://www.wikiod.com/es/docs/microservices/</link>
    <description>Recent content in Tutorial de microservicios on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducción a los microservicios</title>
      <link>https://www.wikiod.com/es/microservices/introduccion-a-los-microservicios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/microservices/introduccion-a-los-microservicios/</guid>
      <description>Lista de verificación esencial para la plataforma de microservicios # Canalización de CI/CD Servicio centralizado de autenticación y autorización Documentación de la API puerta de enlace API Centralizar la herramienta de gestión de registros Monitor de servicio Automatización de Infraestructura Servidor de configuración centralizado Documentación de la API # Utilice Spring REST Docs para documentar sus servicios. Es un marco poderoso que asegura que la lógica del Servicio esté siempre en línea con la documentación.</description>
    </item>
    
    <item>
      <title>Puerta de enlace API</title>
      <link>https://www.wikiod.com/es/microservices/puerta-de-enlace-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/microservices/puerta-de-enlace-api/</guid>
      <description>La arquitectura de microservicios ofrece una gran flexibilidad para desacoplar las aplicaciones y desarrollar aplicaciones independientes. Un microservicio siempre debe poder probarse y desplegarse de forma independiente.
Pero, a medida que sigues teniendo demasiados servicios, existe la necesidad de tener un API Gateway.
No puede exponer todos sus servicios a clientes externos. Debe tener alguna capa de abstracción que actúe como un guardián de todos sus microservicios. Un punto de entrada para todos sus servicios.</description>
    </item>
    
  </channel>
</rss>

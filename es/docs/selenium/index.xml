<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de selenio on </title>
    <link>https://www.wikiod.com/es/docs/selenium/</link>
    <description>Recent content in Tutorial de selenio on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/selenium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el selenio</title>
      <link>https://www.wikiod.com/es/selenium/primeros-pasos-con-el-selenio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/primeros-pasos-con-el-selenio/</guid>
      <description>Prueba simple de selenio en Java # El siguiente código es un programa java simple que usa selenio. El viaje del siguiente código es
Abra el navegador Firefox
Abra la página de Google
Imprime el título de la página de Google
Encuentra la ubicación del cuadro de búsqueda
Pase el valor como Selenium en el cuadro de búsqueda
Envía el formulario
Cierra el navegador
package org.openqa.selenium.example;
import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.</description>
    </item>
    
    <item>
      <title>Fábrica de controladores web</title>
      <link>https://www.wikiod.com/es/selenium/fabrica-de-controladores-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/fabrica-de-controladores-web/</guid>
      <description>Fábrica de WebDriver C# # using OpenQA.Selenium; using OpenQA.Selenium.Chrome; using OpenQA.Selenium.Firefox; using OpenQA.Selenium.IE; /// &amp;lt;summary&amp;gt; /// Factory for creating WebDriver for various browsers. /// &amp;lt;/summary&amp;gt; public static class WebDriverFactory { /// &amp;lt;summary&amp;gt; /// Initilizes IWebDriver base on the given WebBrowser name. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public static IWebDriver CreateWebDriver(WebBrowser name) { switch (name) { case WebBrowser.Firefox: return new FirefoxDriver(); case WebBrowser.IE: case WebBrowser.InternetExplorer: InternetExplorerOptions ieOption = new InternetExplorerOptions(); ieOption.</description>
    </item>
    
    <item>
      <title>Tomar una captura de pantalla de una página web</title>
      <link>https://www.wikiod.com/es/selenium/tomar-una-captura-de-pantalla-de-una-pagina-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/tomar-una-captura-de-pantalla-de-una-pagina-web/</guid>
      <description>Java Selenium toma/guarda captura de pantalla de la página web y agrega el informe # public void Screenshot() throws Throwable{ final byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES); scenario.embed(screenshot, &amp;quot;image/png&amp;quot;); // ... and embed it in the report. Thread.sleep(1000); } Alternativamente
public static void captureScreenShot(WebDriver ldriver){ // Take screenshot and store as a file format File src= ((TakesScreenshot)ldriver).getScreenshotAs(OutputType.FILE); try { // now copy the screenshot to desired location using copyFile method FileUtils.copyFile(src, new File(&amp;quot;C:/selenium/&amp;quot;+System.</description>
    </item>
    
    <item>
      <title>Esperando en Selenium</title>
      <link>https://www.wikiod.com/es/selenium/esperando-en-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/esperando-en-selenium/</guid>
      <description>Uno de los obstáculos más comunes para los nuevos usuarios de Selenium es esperar hasta que una página esté completamente cargada. Los usuarios humanos pueden saber fácilmente si una página se ha cargado por completo o si aún se está cargando. Selenium, sin embargo, solo espera una cantidad de tiempo determinada. Por lo tanto, a menudo es conveniente tener una buena forma de esperar elementos en una página. Si bien es posible hacer esto con un bucle y las funciones sleep(), hay formas mucho más limpias ya integradas en Selenium.</description>
    </item>
    
    <item>
      <title>Aceptar alertas emergentes con Selenium</title>
      <link>https://www.wikiod.com/es/selenium/aceptar-alertas-emergentes-con-selenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/aceptar-alertas-emergentes-con-selenium/</guid>
      <description>Ejemplo de Python de alerta de aceptación # from selenium import webdriver # Create a new webdriver driver = webdriver.Chrome() # Get a page that has a popup window (Use mouse to click &amp;quot;try it&amp;quot; button) driver.get(&amp;quot;http://www.w3schools.com/js/tryit.asp?filename=tryjs_alert&amp;quot;) # Accept the opened alert driver.switch_to.alert.accept() Extensiones de C# para WebDriver # public static IWebDriver dismissAlert(this IWebDriver driver) { try { IAlert alert = driver.SwitchTo().Alert(); alert.Dismiss(); } catch {} return driver; } public static IWebDriver acceptAlert(this IWebDriver driver) { try { IAlert alert = driver.</description>
    </item>
    
    <item>
      <title>Primer proyecto en selenio con Java</title>
      <link>https://www.wikiod.com/es/selenium/primer-proyecto-en-selenio-con-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/primer-proyecto-en-selenio-con-java/</guid>
      <description>Esta es una introducción a Selenium, usando Java. Si bien no esperamos que sepa nada sobre Selenium, debe tener conocimientos previos de Java para seguir este curso.
Descargar enlaces :
Selenio
IDEA IntelliJ
ChromeDriver
[JDK 8] (http://www.oracle.com/technetwork/java/javas)
Obtener elementos en Selenium # Cada elemento Html en Selenium se llama WebElement. Por ejemplo, una etiqueta p sería un WebElement, una etiqueta a sería un WebElement, etc. Considere la siguiente estructura html:</description>
    </item>
    
    <item>
      <title>Primeros pasos con Selenium en python</title>
      <link>https://www.wikiod.com/es/selenium/primeros-pasos-con-selenium-en-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/primeros-pasos-con-selenium-en-python/</guid>
      <description>¿Qué es el selenio?
Selenium es una biblioteca de comandos para ayudar a un programador a interactuar con un navegador como un usuario real.
Cosas que hace Selenium:
Encontrar elementos en el html de una página web
Encuentra un solo elemento:
driver.find_element_by_css_selector(&amp;quot;css.selector.of.element&amp;quot;) CSS Selector help driver.find_element_by_xpath(&amp;quot;//xpath//of//element&amp;quot;) XPATH help driver.find_element_by_name(&amp;quot;name_of_element&amp;quot;) driver.find_element_by_id(&amp;quot;id_of_element&amp;quot;) driver.find_element_by_partial_link_text(&amp;quot;element_link_text&amp;quot;) driver.find_element_by_class_name(&amp;quot;class_name_of_element&amp;quot;) driver.find_element_by_tag_name(&amp;quot;tag_name_of_element&amp;quot;) Encuentra una lista de elementos:
driver.find_elements_by_css_selector(&amp;quot;css.selector.of.elements&amp;quot;) driver.find_elements_by_xpath(&amp;quot;//xpath//of//elements&amp;quot;) driver.find_elements_by_name(&amp;quot;name_of_elements&amp;quot;) driver.find_elements_by_partial_link_text(&amp;quot;elements_link_text&amp;quot;) driver.find_elements_by_class_name(&amp;quot;class_name_of_elements&amp;quot;) driver.find_elements_by_tag_name(&amp;quot;tag_name_of_elements&amp;quot;) Documentación oficial: selenium-python leer los documentos</description>
    </item>
    
    <item>
      <title>IDE de selenio</title>
      <link>https://www.wikiod.com/es/selenium/ide-de-selenio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/ide-de-selenio/</guid>
      <description>Pruebe un script simple de Selenium: busque Wikipedia en Google # requisitos previos:
Instalar Firefox Instale el complemento Selenium IDE (https://addons.mozilla.org/fr/firefox/addon/selenium-ide/) Abra el complemento. Se debe mostrar un botón que muestre un círculo rojo. Si está presionado, significa que puede comenzar su escenario. El complemento registra todo lo que haces dentro de esta instancia de Firefox.
Haz lo que quieras que te graben.
Al final, guarde su escenario; notará que los escenarios de Selenium IDE son archivos html.</description>
    </item>
    
    <item>
      <title>WebDriverManager para Selenium una herramienta muy interesante de Boni García</title>
      <link>https://www.wikiod.com/es/selenium/webdrivermanager-para-selenium-una-herramienta-muy-interesante-de-boni-garcia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/webdrivermanager-para-selenium-una-herramienta-muy-interesante-de-boni-garcia/</guid>
      <description>Cambié a Selenium 3 y comencé a usar Chrome en lugar de Firefox. Descubrí que para Chrome necesito descargar un binario para que WebDriver maneje el navegador. Para que eso funcione, necesito establecer una ruta absoluta a este binario como variable Java. Si se actualiza el binario, necesito actualizar ese binario manualmente en mi marco de prueba, lo que lleva tiempo y es realmente molesto. Descubrí una biblioteca Java muy ordenada que lo hace por mí: https://github.</description>
    </item>
    
    <item>
      <title>Automatización de aplicaciones móviles</title>
      <link>https://www.wikiod.com/es/selenium/automatizacion-de-aplicaciones-moviles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/selenium/automatizacion-de-aplicaciones-moviles/</guid>
      <description>Android + Chrome + Python # Para poder ejecutar pruebas, Chrome Broser debe estar preinstalado en el dispositivo Android.
##Python + Chrome + Android Para poder trabajar con la aplicación web en un dispositivo &amp;lsquo;Android&amp;rsquo; usando &amp;lsquo;Selenium&amp;rsquo;, se deben cumplir las siguientes condiciones previas:
Android SDK instalado en la computadora Navegador Chrome instalado en el dispositivo Android Modo de depuración habilitado en el dispositivo Android Inicie el servidor adb y chromedriver con los siguientes comandos desde cmd/Terminal:</description>
    </item>
    
  </channel>
</rss>

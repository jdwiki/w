<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matplotlib Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/matplotlib/</link>
    <description>Recent content in Matplotlib Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con matplotlib</title>
      <link>https://www.wikiod.com/es/matplotlib/comenzando-con-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/comenzando-con-matplotlib/</guid>
      <description>Sintaxis imperativa frente a orientada a objetos # Matplotlib es compatible con la sintaxis imperativa y orientada a objetos para el trazado. La sintaxis imperativa está intencionalmente diseñada para estar muy cerca de la sintaxis de Matlab.
La sintaxis imperativa (a veces llamada sintaxis de &amp;lsquo;máquina de estado&amp;rsquo;) emite una serie de comandos, todos los cuales actúan en la figura o eje más reciente (como Matlab). La sintaxis orientada a objetos, por otro lado, actúa explícitamente sobre los objetos (figura, eje, etc.</description>
    </item>
    
    <item>
      <title>Mapas de colores</title>
      <link>https://www.wikiod.com/es/matplotlib/mapas-de-colores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/mapas-de-colores/</guid>
      <description>Mapas de color perceptualmente uniformes # El mapa de colores predeterminado original de MATLAB (reemplazado en la versión R2014b) llamado jet es omnipresente debido a su alto contraste y familiaridad (y era el predeterminado de matplotlib por razones de compatibilidad). A pesar de su popularidad, los mapas de colores tradicionales a menudo tienen deficiencias cuando se trata de representar datos con precisión. El cambio percibido en estos mapas de colores no corresponde a cambios en los datos; y una conversión del mapa de colores a escala de grises (por ejemplo, imprimiendo una figura usando una impresora en blanco y negro) podría causar pérdida de información.</description>
    </item>
    
    <item>
      <title>Múltiples Parcelas</title>
      <link>https://www.wikiod.com/es/matplotlib/multiples-parcelas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/multiples-parcelas/</guid>
      <description>Sintaxis # Elemento de la lista Grid of Subplots usando subplot # &amp;quot;&amp;quot;&amp;quot; ================================================================================ CREATE A 2 BY 2 GRID OF SUB-PLOTS WITHIN THE SAME FIGURE. ================================================================================ &amp;quot;&amp;quot;&amp;quot; import matplotlib.pyplot as plt # The data x = [1,2,3,4,5] y1 = [0.59705847, 0.25786401, 0.63213726, 0.63287317, 0.73791151] y2 = [1.19411694, 0.51572803, 1.26427451, 1.26574635, 1.47582302] y3 = [0.86793828, 0.07563408, 0.67670068, 0.78932712, 0.0043694] # 5 more random values y4 = [0.43396914, 0.03781704, 0.33835034, 0.39466356, 0.</description>
    </item>
    
    <item>
      <title>Sistemas de coordenadas</title>
      <link>https://www.wikiod.com/es/matplotlib/sistemas-de-coordenadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/sistemas-de-coordenadas/</guid>
      <description>Matplotlib tiene cuatro sistemas de coordenadas distintos que se pueden aprovechar para facilitar el posicionamiento de diferentes objetos, por ejemplo, texto. Cada sistema tiene un objeto de transformación correspondiente que transforma las coordenadas de ese sistema al llamado sistema de coordenadas de visualización.
Sistema de coordenadas de datos es el sistema definido por los datos en los ejes respectivos. Es útil cuando se intenta colocar algún objeto en relación con los datos trazados.</description>
    </item>
    
    <item>
      <title>Animaciones y trazado interactivo</title>
      <link>https://www.wikiod.com/es/matplotlib/animaciones-y-trazado-interactivo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/animaciones-y-trazado-interactivo/</guid>
      <description>Con python matplotlib puedes hacer correctamente gráficos animados.
Animación básica con FuncAnimation # El paquete matplotlib.animation ofrece algunas clases para crear animaciones. FuncAnimation crea animaciones llamando repetidamente a una función. Aquí usamos una función animate() que cambia las coordenadas de un punto en el gráfico de una función seno.
import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation TWOPI = 2*np.pi fig, ax = plt.subplots() t = np.</description>
    </item>
    
    <item>
      <title>Integración con TeXLaTeX</title>
      <link>https://www.wikiod.com/es/matplotlib/integracion-con-texlatex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/integracion-con-texlatex/</guid>
      <description>La compatibilidad con LaTeX de Matplotlib requiere una instalación funcional de LaTeX, dvipng (que se puede incluir con la instalación de LaTeX) y Ghostscript (se recomienda GPL Ghostscript 8.60 o posterior). La compatibilidad con pgf de Matplotlib requiere una instalación reciente de LaTeX que incluya los paquetes TikZ/PGF (como TeXLive), preferiblemente con XeLaTeX o LuaLaTeX instalado. Inserción de fórmulas TeX en gráficos # Las fórmulas de TeX se pueden insertar en la trama usando la función rc</description>
    </item>
    
    <item>
      <title>Leyendas</title>
      <link>https://www.wikiod.com/es/matplotlib/leyendas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/leyendas/</guid>
      <description>Leyenda única compartida en varias subparcelas # A veces tendrá una cuadrícula de subparcelas y querrá tener una sola leyenda que describe todas las líneas para cada una de las subparcelas como en la siguiente imagen.
Para hacer esto, deberá crear una leyenda global para la figura en lugar de crear una leyenda en el nivel de ejes (que creará una leyenda separada leyenda para cada subparcela). Esto se logra llamando a fig.</description>
    </item>
    
    <item>
      <title>Parcelas Básicas</title>
      <link>https://www.wikiod.com/es/matplotlib/parcelas-basicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/parcelas-basicas/</guid>
      <description>Gráfico de dispersión # Un diagrama de dispersión simple # import matplotlib.pyplot as plt # Data x = [43,76,34,63,56,82,87,55,64,87,95,23,14,65,67,25,23,85] y = [34,45,34,23,43,76,26,18,24,74,23,56,23,23,34,56,32,23] fig, ax = plt.subplots(1, figsize=(10, 6)) fig.suptitle(&#39;Example Of Scatterplot&#39;) # Create the Scatter Plot ax.scatter(x, y, color=&amp;quot;blue&amp;quot;, # Color of the dots s=100, # Size of the dots alpha=0.5, # Alpha/transparency of the dots (1 is opaque, 0 is transparent) linewidths=1) # Size of edge around the dots # Show the plot plt.</description>
    </item>
    
    <item>
      <title>Parcelas tridimensionales</title>
      <link>https://www.wikiod.com/es/matplotlib/parcelas-tridimensionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/parcelas-tridimensionales/</guid>
      <description>Históricamente, el trazado tridimensional en matplotlib ha sido un poco complicado, ya que el motor de renderizado es inherentemente 2D. El hecho de que las configuraciones 3D se rendericen trazando un fragmento 2D tras otro implica que a menudo hay problemas de renderizado relacionados con la profundidad aparente de los objetos. El núcleo del problema es que dos objetos no conectados pueden estar completamente detrás o completamente uno frente al otro, lo que conduce a artefactos como se muestra en la siguiente figura de dos anillos entrelazados (haga clic para obtener un gif animado):</description>
    </item>
    
    <item>
      <title>Objetos Figuras y Ejes</title>
      <link>https://www.wikiod.com/es/matplotlib/objetos-figuras-y-ejes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/matplotlib/objetos-figuras-y-ejes/</guid>
      <description>Creando un eje # Hay dos formas principales de crear ejes en matplotlib: usando pyplot o usando la API orientada a objetos.
Usando pyplot:
import matplotlib.pyplot as plt ax = plt.subplot(3, 2, 1) # 3 rows, 2 columns, the first subplot Usando la API orientada a objetos:
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(3, 2, 1) La función de conveniencia plt.subplots() se puede usar para producir una figura y una colección de subtramas en un solo comando:</description>
    </item>
    
  </channel>
</rss>

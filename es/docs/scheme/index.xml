<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esquema Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/scheme/</link>
    <description>Recent content in Esquema Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con el esquema</title>
      <link>https://www.wikiod.com/es/scheme/comenzando-con-el-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/comenzando-con-el-esquema/</guid>
      <description>Instalación del esquema CHICKEN # CHICKEN es un intérprete y compilador de Scheme con su propio sistema de módulo de extensión llamado &amp;ldquo;eggs&amp;rdquo;. Es capaz de compilar Scheme en código nativo compilando primero Scheme en C.
Instalación # Debian o Ubuntu u otras distribuciones derivadas: # sudo apt-get install chicken-bin Fedora / RHEL / CentOS: # sudo yum install chicken-bin Arquear Linux: # sudo pacman -S chicken Gentoo: # sudo emerge -av dev-scheme/chicken OS X con Homebrew: # brew install chicken OpenBSD # doas pkg_add -vi chicken Microsoft Windows # Instalar MSYS2</description>
    </item>
    
    <item>
      <title>Macros de esquema</title>
      <link>https://www.wikiod.com/es/scheme/macros-de-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/macros-de-esquema/</guid>
      <description>Macros higiénicas y referencialmente transparentes con reglas de sintaxis # La mayor ventaja de LISP y Scheme sobre otros lenguajes de programación convencionales es su sistema de macros. A diferencia del preprocesador C y otros lenguajes de macros, las macros de Scheme toman código analizado como entrada y devuelven código expandido como salida. Esta es una de las aplicaciones de la frase &amp;ldquo;el código es información&amp;rdquo; de Scheme, y es lo que hace que el lenguaje sea tan poderoso.</description>
    </item>
    
    <item>
      <title>Implementación de diferentes algoritmos de clasificación.</title>
      <link>https://www.wikiod.com/es/scheme/implementacion-de-diferentes-algoritmos-de-clasificacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/implementacion-de-diferentes-algoritmos-de-clasificacion/</guid>
      <description>Ordenación rápida # Quicksort es un algoritmo de clasificación común con una complejidad de caso promedio de O (n log n) y una complejidad de caso peor de O (n ^ 2). Su ventaja sobre otros métodos O(n log n) es que puede ejecutarse en el lugar.
Quicksort divide la entrada en un valor pivote elegido, separando la lista en aquellos valores que son menores y aquellos valores que son mayores (o iguales) que el pivote.</description>
    </item>
    
    <item>
      <title>Entrada Salida en Esquema</title>
      <link>https://www.wikiod.com/es/scheme/entrada-salida-en-esquema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/entrada-salida-en-esquema/</guid>
      <description>La entrada y la salida en el esquema generalmente se manejan a través de puertos. Un puerto es una estructura de datos que se utiliza para interactuar con el mundo exterior a Scheme. Un puerto no se limita a archivos, pero se puede usar para leer/escribir en sockets.
De alguna manera, el objeto de puerto es una especie de objeto universal que no solo puede manipular archivos y sockets, sino también cualquier tipo de operación de lectura/escritura con el sistema operativo.</description>
    </item>
    
    <item>
      <title>Sintaxis</title>
      <link>https://www.wikiod.com/es/scheme/sintaxis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/sintaxis/</guid>
      <description>S-Expresión # Una expresión en Scheme es lo que se va a ejecutar. Una expresión S, como suele llamarse, comienza con ( y termina con ). El primer miembro de la expresión es lo que se va a ejecutar. El siguiente miembro de la expresión son los parámetros que se enviarán a la expresión durante la evaluación de la expresión.
Por ejemplo sumando números:
(+ 1 2 3) En este caso, + es un símbolo de una función add que toma múltiples parámetros.</description>
    </item>
    
    <item>
      <title>Pares</title>
      <link>https://www.wikiod.com/es/scheme/pares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scheme/pares/</guid>
      <description>Un par es uno de los tipos de datos más básicos en Scheme. También se le suele llamar contras células.
Crea un par # Se puede crear un par con la función cons. El nombre de la función significa constructor. En Scheme, todo se basa más o menos en pares.
(cons a b) La función devuelve un par que contiene el elemento a y b. El primer parámetro de cons se llama car (Registro de dirección de contenido) y el segundo argumento es cdr (Registro de disminución de contenido).</description>
    </item>
    
  </channel>
</rss>

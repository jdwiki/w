<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Laravel on </title>
    <link>https://www.wikiod.com/es/docs/laravel/</link>
    <description>Recent content in Tutorial de Laravel on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con Laravel</title>
      <link>https://www.wikiod.com/es/laravel/comenzando-con-laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/comenzando-con-laravel/</guid>
      <description>¡Bienvenido a la documentación de etiquetas de Laravel! # Laravel es un framework PHP muy conocido. Aquí, aprenderá todo sobre Laravel. Comenzando desde tan-simple-como saber qué es la Programación Orientada a Objetos, hasta el tema avanzado de desarrollo de paquetes de Laravel.
Esta, como cualquier otra etiqueta de documentación de Stackoverflow, es documentación impulsada por la comunidad, por lo que si ya tiene experiencia en Laravel, comparta su conocimiento agregando sus propios temas o ejemplos.</description>
    </item>
    
    <item>
      <title>Elocuente</title>
      <link>https://www.wikiod.com/es/laravel/elocuente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/elocuente/</guid>
      <description>El Eloquent es un ORM (Modelo relacional de objetos) incluido con Laravel. Implementa el patrón de registro activo y se utiliza para interactuar con bases de datos relacionales.
Nombre de la tabla
La convención es usar &amp;ldquo;snake_case&amp;rdquo; en plural para los nombres de las tablas y &amp;ldquo;StudlyCase&amp;rdquo; en singular para los nombres de los modelos. Por ejemplo:
Una mesa cats tendría un modelo Cat Una tabla jungle_cats tendría un modelo JungleCat Una tabla usuarios tendría un modelo Usuario Una tabla personas tendría un modelo Persona Eloquent intentará vincular automáticamente su modelo con una tabla que tenga el plural del nombre del modelo, como se indicó anteriormente.</description>
    </item>
    
    <item>
      <title>Implemente la aplicación Laravel 5 en alojamiento compartido en un servidor Linux</title>
      <link>https://www.wikiod.com/es/laravel/implemente-la-aplicacion-laravel-5-en-alojamiento-compartido-en-un-servidor-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/implemente-la-aplicacion-laravel-5-en-alojamiento-compartido-en-un-servidor-linux/</guid>
      <description>Para obtener más información sobre la implementación del proyecto Laravel en alojamiento compartido, visite este repositorio de Github.
Aplicación Laravel 5 en alojamiento compartido en servidor Linux # Por defecto, la carpeta pública del proyecto Laravel expone el contenido de la aplicación que cualquier persona puede solicitar desde cualquier lugar, el resto del código de la aplicación es invisible o inaccesible para cualquier persona sin los permisos adecuados.
Después de desarrollar la aplicación en su máquina de desarrollo, debe enviarse a un servidor de producción para que se pueda acceder a través de Internet desde cualquier lugar, ¿verdad?</description>
    </item>
    
    <item>
      <title>Validación</title>
      <link>https://www.wikiod.com/es/laravel/validacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/validacion/</guid>
      <description>Parámetros # Parámetro Detalles requerido El campo es obligatorio a veces Ejecute comprobaciones de validación en un campo solo si ese campo está presente en la matriz de entrada correo electrónico La entrada es un correo electrónico válido máx:valor El valor de entrada debe estar por debajo del valor máximo único:db_table_name El valor de entrada debe ser único en el nombre de la tabla de la base de datos proporcionada aceptado Sí / Activado / 1 verdadero, útil para verificar TOS URL_activa Debe ser una URL válida según checkdnsrr después de :fecha El campo bajo validación debe proporcionar un valor posterior a la fecha dada alfa El campo bajo validación debe ser enteramente caracteres alfabéticos.</description>
    </item>
    
    <item>
      <title>siembra</title>
      <link>https://www.wikiod.com/es/laravel/siembra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/siembra/</guid>
      <description>La siembra de base de datos le permite insertar datos, datos de prueba generales en su base de datos. De forma predeterminada, hay una clase DatabaseSeeder en database/seeds.
El funcionamiento de las sembradoras se puede hacer con
php artisan db:seed O si solo desea procesar una sola clase
php artisan db:seed --class=TestSeederClass Al igual que con todos los comandos artesanales, tiene acceso a una amplia gama de métodos que se pueden encontrar en la documentación de la API</description>
    </item>
    
    <item>
      <title>Instalación</title>
      <link>https://www.wikiod.com/es/laravel/instalacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/instalacion/</guid>
      <description>Instalación # Las aplicaciones de Laravel se instalan y administran con Composer, un popular administrador de dependencias de PHP. Hay dos formas de crear una nueva aplicación Laravel.
A través del compositor # $ composer create-project laravel/laravel [foldername] O
$ composer create-project --prefer-dist laravel/laravel [foldername] Reemplace [nombre de la carpeta] con el nombre del directorio en el que desea instalar su nueva aplicación Laravel. No debe existir antes de la instalación.</description>
    </item>
    
    <item>
      <title>Colecciones</title>
      <link>https://www.wikiod.com/es/laravel/colecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/colecciones/</guid>
      <description>Sintaxis # $colección = recolectar([&amp;lsquo;Valor1&amp;rsquo;, &amp;lsquo;Valor2&amp;rsquo;, &amp;lsquo;Valor3&amp;rsquo;]); // Las claves por defecto son 0, 1, 2, &amp;hellip;, Illuminate\Support\Collection proporciona una interfaz fluida y conveniente para manejar matrices de datos. Es posible que los haya utilizado sin saberlo, por ejemplo, las consultas de modelos que obtienen varios registros devuelven una instancia de Illuminate\Support\Collection.
Para obtener documentación actualizada sobre las colecciones, puede encontrar la documentación oficial aquí
Creación de colecciones # Usando el ayudante collect(), puede crear fácilmente nuevas instancias de colección pasando una matriz como:</description>
    </item>
    
    <item>
      <title>Plantillas de hoja</title>
      <link>https://www.wikiod.com/es/laravel/plantillas-de-hoja/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/plantillas-de-hoja/</guid>
      <description>Laravel es compatible con el motor de plantillas Blade desde el primer momento. El motor de plantillas Blade nos permite crear plantillas maestras y plantillas secundarias cargando contenido desde plantillas maestras, podemos tener variables, bucles y declaraciones condicionales dentro del archivo blade.
Vistas: Introducción # Las vistas, en un patrón MVC, contienen la lógica sobre cómo presentar los datos al usuario. En una aplicación web, normalmente se utilizan para generar la salida HTML que se envía a los usuarios con cada respuesta.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/laravel/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/enrutamiento/</guid>
      <description>Enrutamiento básico # El enrutamiento define un mapa entre métodos HTTP y URI por un lado, y acciones por el otro. Las rutas normalmente se escriben en el archivo app/Http/routes.php.
En su forma más simple, una ruta se define llamando al método HTTP correspondiente en la fachada de la ruta, pasando como parámetros una cadena que coincide con el URI (relativo a la raíz de la aplicación) y una devolución de llamada.</description>
    </item>
    
    <item>
      <title>Migraciones de bases de datos</title>
      <link>https://www.wikiod.com/es/laravel/migraciones-de-bases-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/laravel/migraciones-de-bases-de-datos/</guid>
      <description>Dentro de una migración de base de datos # Cada migración debe tener un método up() y un método down(). El propósito del método up() es realizar las operaciones requeridas para poner el esquema de la base de datos en su nuevo estado, y el propósito del método down() es revertir cualquier operación realizada por up(). método. Asegurarse de que el método down() revierta correctamente sus operaciones es fundamental para poder revertir los cambios en el esquema de la base de datos.</description>
    </item>
    
  </channel>
</rss>

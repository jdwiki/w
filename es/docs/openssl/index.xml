<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openssl Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/openssl/</link>
    <description>Recent content in Openssl Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/openssl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con OpenSSL</title>
      <link>https://www.wikiod.com/es/openssl/primeros-pasos-con-openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/openssl/primeros-pasos-con-openssl/</guid>
      <description>Instalación o configuración # OpenSSL es un proyecto de código abierto que proporciona un conjunto de herramientas sólido, de calidad comercial y con todas las funciones para los protocolos Transport Layer Security (TLS) y Secure Sockets Layer (SSL). También es una biblioteca de criptografía de propósito general.
El kit de herramientas OpenSSL tiene una licencia de estilo Apache, lo que básicamente significa que puede obtenerlo y usarlo con fines comerciales y no comerciales, sujeto a algunas condiciones de licencia simples.</description>
    </item>
    
    <item>
      <title>Llaves</title>
      <link>https://www.wikiod.com/es/openssl/llaves/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/openssl/llaves/</guid>
      <description>Sintaxis # EVP_PKEY *EVP_PKEY_nuevo(vacío); RSA * RSA_nuevo(vacío); int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb); int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key); int PEM_write_PrivateKey(ARCHIVO *fp, EVP_PKEY *x, const EVP_CIPHER *enc, char sin firmar *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PrivateKey(ARCHIVO *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); anular EVP_PKEY_free(EVP_PKEY *clave); Generar clave RSA # Para generar una clave RSA, primero se debe asignar un EVP_PKEY con EVP_PKEY_new:</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial ionic2 on </title>
    <link>https://www.wikiod.com/es/docs/ionic2/</link>
    <description>Recent content in Tutorial ionic2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/ionic2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con ionic2</title>
      <link>https://www.wikiod.com/es/ionic2/primeros-pasos-con-ionic2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/primeros-pasos-con-ionic2/</guid>
      <description>Instalación o configuración # Dado que Ionic 2 mejora cada día, consulte siempre la documentación oficial para realizar un seguimiento de los últimos cambios y mejoras.
Requisitos previos: Necesitará NodeJS para construir proyectos Ionic 2. Puede descargar e instalar el nodo aquí y obtener más información sobre npm y los paquetes que utiliza Ionic 2 [aquí](http://ionicframework.com/docs/resources/using- npm/). # 1. Instalación de Ionic 2 # Al igual que Ionic 1, puede usar la CLI o la GUI de Ionic para crear y probar aplicaciones rápidamente directamente en el navegador.</description>
    </item>
    
    <item>
      <title>Componentes Ionic2 CSS</title>
      <link>https://www.wikiod.com/es/ionic2/componentes-ionic2-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/componentes-ionic2-css/</guid>
      <description>Cuadrícula # El sistema de cuadrícula de Ionic se basa en flexbox, una característica de CSS compatible con todos los dispositivos compatibles con Ionic. La cuadrícula se compone de tres unidades: cuadrícula, filas y columnas. Las columnas se expandirán para llenar su fila y cambiarán de tamaño para adaptarse a columnas adicionales.
Clase Ancho ancho-10 10% ancho-20 20% ancho-25 25% ancho-33 33,3333% ancho-50 50% ancho-67 66.6666% ancho-75 75% ancho-80 80% ancho-90 90% Ejemplo.</description>
    </item>
    
    <item>
      <title>Uso de servicios</title>
      <link>https://www.wikiod.com/es/ionic2/uso-de-servicios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/uso-de-servicios/</guid>
      <description>Una cosa muy importante sobre el uso de servicios compartidos es que deben incluirse en la matriz de &amp;ldquo;proveedores&amp;rdquo; del componente superior donde deben compartirse.
¿Porqué es eso? Bueno, supongamos que incluimos la referencia MyService en la matriz providers de cada Component. Algo como:
@Component({ templateUrl:&amp;quot;page1.html&amp;quot;, providers: [MyService] }) Y
@Component({ templateUrl:&amp;quot;page2.html&amp;quot;, providers: [MyService] }) De esa manera, se creará una nueva instancia del servicio para cada componente, por lo que la instancia en la que una página guardará los datos será diferente de la instancia utilizada para obtener los datos.</description>
    </item>
    
    <item>
      <title>Uso de pestañas</title>
      <link>https://www.wikiod.com/es/ionic2/uso-de-pestanas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/uso-de-pestanas/</guid>
      <description>Recuerde consultar siempre los documentos de Ionic 2 Tab para estar al tanto de los últimos cambios y actualizaciones.
Cambiar la pestaña seleccionada programáticamente desde la página secundaria # Puede echar un vistazo al código completo en este Punker en funcionamiento.
En este ejemplo, uso un servicio compartido para manejar la comunicación entre las páginas dentro de la pestaña (páginas secundarias) y el contenedor de pestañas (el componente que contiene las pestañas).</description>
    </item>
    
    <item>
      <title>modales</title>
      <link>https://www.wikiod.com/es/ionic2/modales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/modales/</guid>
      <description>Modal con parámetros al crear: # Pasar parámetros a un modal es similar a cómo pasamos valores a un NavController. Para hacerlo, modificamos nuestra lista en home.html para abrir un modal al hacer clic en un elemento de la lista y pasar los parámetros necesarios como segundo argumento al método crear.
Inicio.html
&amp;lt;ion-list&amp;gt; &amp;lt;ion-item *ngFor=&amp;quot;let datum of data&amp;quot; (click)=&amp;quot;openModalwithNavParams(datum)&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;{{datum.name}}&amp;lt;/h1&amp;gt; &amp;lt;/ion-item&amp;gt; &amp;lt;/ion-list&amp;gt; Inicio.ts
import {EditProfilePage} from &#39;../edit-profile/edit-profile&#39;; openModalwithNavParams(data){ let modalWithNavParams = this.</description>
    </item>
    
    <item>
      <title>Inicio de sesión social con Angularfire2Firebase</title>
      <link>https://www.wikiod.com/es/ionic2/inicio-de-sesion-social-con-angularfire2firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/inicio-de-sesion-social-con-angularfire2firebase/</guid>
      <description>Inicio de sesión nativo de Facebook con Angularfire2/Firebase # aplicación.ts
import {Component} from &#39;@angular/core&#39;; import {Platform, ionicBootstrap} from &#39;ionic-angular&#39;; import {StatusBar} from &#39;ionic-native&#39;; import {LoginPage} from &#39;./pages/login/login&#39;; import {FIREBASE_PROVIDERS, defaultFirebase, AuthMethods, AuthProviders, firebaseAuthConfig} from &#39;angularfire2&#39;; @Component({ template: &#39;&amp;lt;ion-nav [root]=&amp;quot;rootPage&amp;quot;&amp;gt;&amp;lt;/ion-nav&amp;gt;&#39; }) export class MyApp { private rootPage: any; constructor(private platform: Platform) { this.rootPage = LoginPage; platform.ready().then(() =&amp;gt; { // Okay, so the platform is ready and our plugins are available. // Here you can do any higher level native things you might need.</description>
    </item>
    
    <item>
      <title>Notificación push enviada y recibida</title>
      <link>https://www.wikiod.com/es/ionic2/notificacion-push-enviada-y-recibida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/notificacion-push-enviada-y-recibida/</guid>
      <description>El ID de remitente que está presente en el ejemplo de inicialización es un ID de remitente de gcm que Google le proporciona. También debería estar presente cuando instala el complemento.
ionic plugin add phonegap-plugin-push --variable SENDER_ID=&amp;quot;XXXXXXX&amp;quot; Si desea agregar datos adicionales a sus notificaciones automáticas, consulte este enlace que explica cómo agregar más tipeos https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md
Inicialización # El complemento de notificación push requiere una inicialización que le indica al complemento que comience a ejecutarse utilizando la identificación del remitente proporcionada.</description>
    </item>
    
    <item>
      <title>Geolocalización</title>
      <link>https://www.wikiod.com/es/ionic2/geolocalizacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/geolocalizacion/</guid>
      <description>Uso sencillo # En su package.json asegúrese de incluir las dependencias:
{ ... &amp;quot;dependencies&amp;quot;: { ... &amp;quot;ionic-native&amp;quot;: &amp;quot;^1.3.10&amp;quot;, ... }, ... } Para usar la geolocalización:
// custom-component.ts import {Geolocation} from &#39;ionic-native&#39;; import template from &#39;./custom-component.html&#39;; @Component({ selector: &#39;custom-component&#39;, template: template }) export class CustomComponent { constructor() { // get the geolocation through a promise Geolocation.getCurrentPosition().then((position:Geoposition)=&amp;gt; { console.log( position.coords.latitude, position.coords.longitude); }); } } Observando la posición # Para una solución más en tiempo real, puede usar la función watchPosition en Geolocalización que notifica cada vez que ocurre un error o un cambio de posición.</description>
    </item>
    
    <item>
      <title>Solución alternativa para &#39;show-delete&#39; en la obsolescencia de &lt;ion-list&gt;</title>
      <link>https://www.wikiod.com/es/ionic2/solucion-alternativa-para-show-delete-en-la-obsolescencia-de-ion-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/solucion-alternativa-para-show-delete-en-la-obsolescencia-de-ion-list/</guid>
      <description>Solución # Estoy desarrollando una aplicación móvil usando ionic 2 con Angular 2.
Tengo una lista de iones llena de elementos de iones. Quiero que esos elementos de iones tengan la capacidad de eliminarse si es necesario, como se presenta [aquí] 1 en el sitio web de ionic.
Sin embargo, mucho ha cambiado en ionic 2 desde la primera versión y el estilo anterior de un botón que abre todos los ion-item en uno ya no es posible desde show-delete y mostrar-reordenar ya no son compatibles.</description>
    </item>
    
    <item>
      <title>Examen de la unidad</title>
      <link>https://www.wikiod.com/es/ionic2/examen-de-la-unidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/ionic2/examen-de-la-unidad/</guid>
      <description>Las pruebas unitarias en general brindan seguridad adicional a un producto para evitar problemas al modificar/agregar características. Una red de seguridad que dice &amp;ldquo;TODO SIGUE FUNCIONANDO&amp;rdquo;. Las pruebas unitarias no reemplazan de ninguna manera las pruebas de usuario reales que puede realizar un control de calidad adecuado.
En este documento basaremos los ejemplos en este repositorio: https://github.com/driftyco/ionic-unit-testing-example
Pruebas unitarias con Karma/Jasmine # Las pruebas unitarias en ionic son las mismas que en cualquier aplicación angular.</description>
    </item>
    
  </channel>
</rss>

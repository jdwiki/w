<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de lenguaje Elixir on </title>
    <link>https://www.wikiod.com/es/docs/elixir/</link>
    <description>Recent content in Tutorial de lenguaje Elixir on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Elixir Language</title>
      <link>https://www.wikiod.com/es/elixir/primeros-pasos-con-elixir-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/primeros-pasos-con-elixir-language/</guid>
      <description>Hola Mundo # Para obtener instrucciones de instalación en el elixir, consulte [aquí] 1, describe instrucciones relacionadas con diferentes plataformas.
Elixir es un lenguaje de programación que se crea usando erlang y usa el tiempo de ejecución BEAM de erlang (como JVM para java).
Podemos usar elixir en dos modos: shell interactivo iex o directamente ejecutándose usando Comando elixir.
Coloque lo siguiente en un archivo llamado hello.exs:
IO.puts &amp;quot;Hello world!&amp;quot; Desde la línea de comando, escriba el siguiente comando para ejecutar el archivo fuente de Elixir:</description>
    </item>
    
    <item>
      <title>Consejos y trucos de la consola IEx</title>
      <link>https://www.wikiod.com/es/elixir/consejos-y-trucos-de-la-consola-iex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/consejos-y-trucos-de-la-consola-iex/</guid>
      <description>Obtener el valor del último comando con v # iex(1)&amp;gt; 1 + 1 2 iex(2)&amp;gt; v 2 iex(3)&amp;gt; 1 + v 3 Consulte también: https://www.wikiod.com/es/elixir/consejos-y-trucos-de-la-consola-iex#Obtener el valor de un comando anterior con v
Historia persistente # De forma predeterminada, el historial de entrada del usuario en IEx no persiste en diferentes sesiones.
erlang-history agrega soporte de historial tanto al shell de Erlang como a IEx:
git clone git@github.com:ferd/erlang-history.git cd erlang-history sudo make install Ahora puede acceder a sus entradas anteriores usando las teclas de flecha hacia arriba y hacia abajo, incluso en diferentes sesiones de &amp;lsquo;IEx&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>La coincidencia de patrones</title>
      <link>https://www.wikiod.com/es/elixir/la-coincidencia-de-patrones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/la-coincidencia-de-patrones/</guid>
      <description>Coincidencia de patrones en una lista # También puede hacer coincidir patrones en estructuras de datos de Elixir, como listas.
Liza
Hacer coincidir en una lista es bastante simple.
[head | tail] = [1,2,3,4,5] # head == 1 # tail == [2,3,4,5] Esto funciona haciendo coincidir los primeros (o más) elementos de la lista con el lado izquierdo de | (tubería) y el resto de la lista con la variable del lado derecho de |.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/elixir/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/funciones/</guid>
      <description>Funciones anónimas # En Elixir, una práctica común es usar funciones anónimas. Crear una función anónima es simple:
iex(1)&amp;gt; my_func = fn x -&amp;gt; x * 2 end #Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt; La sintaxis general es:
fn args -&amp;gt; output end Para facilitar la lectura, puede poner paréntesis alrededor de los argumentos:
iex(2)&amp;gt; my_func = fn (x, y) -&amp;gt; x*y end #Function&amp;lt;12.52032458/2 in :erl_eval.expr/5&amp;gt; Para invocar una función anónima, llámela por el nombre asignado y agregue .</description>
    </item>
    
    <item>
      <title>Liza</title>
      <link>https://www.wikiod.com/es/elixir/liza/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/liza/</guid>
      <description>Sintaxis # [] [1, 2, 3, 4] [1, 2] ++ [3, 4] # -&amp;gt; [1,2,3,4] -hd([1, 2, 3, 4]) # -&amp;gt; 1 tl([1, 2, 3, 4]) # -&amp;gt; [2,3,4] [cabeza | cola] [1 | [2, 3, 4]] # -&amp;gt; [1,2,3,4] [1 | [2 | [3 | [4 | []]]]] -&amp;gt; [1,2,3,4] &amp;lsquo;hola&amp;rsquo; = [?h, ?e, ?l, ?l, ?o] lista_de_palabras clave = [a: 123, b: 456, c: 789] lista_de_palabras clave[:a] # -&amp;gt; 123 Listas de palabras clave # Las listas de palabras clave son listas en las que cada elemento de la lista es una tupla de un átomo seguido de un valor.</description>
    </item>
    
    <item>
      <title>.gitignore básico para el programa elixir</title>
      <link>https://www.wikiod.com/es/elixir/gitignore-basico-para-el-programa-elixir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/gitignore-basico-para-el-programa-elixir/</guid>
      <description>Tenga en cuenta que la carpeta /rel puede no ser necesaria en su archivo .gitignore. Esto se genera si está utilizando una herramienta de gestión de versiones como exrm
Ejemplo # ### Elixir ### /_build /cover /deps erl_crash.dump *.ez ### Erlang ### .eunit deps *.beam *.plt ebin rel/example_project .concrete/DEV_MODE .rebar ## Phoenix application /_build /db /deps /*.ez erl_crash.dump /node_modules /priv/static/ /config/prod.secret.exs /rel ## Standalone elixir application /_build /cover /deps erl_crash.dump *.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://www.wikiod.com/es/elixir/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/operadores/</guid>
      <description>El operador de tuberías # El operador de tubería |&amp;gt; toma el resultado de una expresión a la izquierda y lo alimenta como el primer parámetro a una función a la derecha.
expression |&amp;gt; function Utilice el Operador de tubería para encadenar expresiones y documentar visualmente el flujo de una serie de funciones.
Considera lo siguiente:
Oven.bake(Ingredients.Mix([:flour, :cocoa, :sugar, :milk, :eggs, :butter]), :temperature) En el ejemplo, Oven.bake viene antes de Ingredients.</description>
    </item>
    
    <item>
      <title>Nodos</title>
      <link>https://www.wikiod.com/es/elixir/nodos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/nodos/</guid>
      <description>Conectando nodos en la misma máquina # Inicie dos nodos con nombre en dos ventanas de terminal:
&amp;gt;iex --name bob@127.0.0.1 iex(bob@127.0.0.1)&amp;gt; &amp;gt;iex --name frank@127.0.0.1 iex(frank@127.0.0.1)&amp;gt; Conecte dos nodos instruyendo a un nodo para que se conecte:
iex(bob@127.0.0.1)&amp;gt; Node.connect :&amp;quot;frank@127.0.0.1&amp;quot; true Los dos nodos ahora están conectados y conscientes el uno del otro:
iex(bob@127.0.0.1)&amp;gt; Node.list [:&amp;quot;frank@127.0.0.1&amp;quot;] iex(frank@127.0.0.1)&amp;gt; Node.list [:&amp;quot;bob@127.0.0.1&amp;quot;] Puede ejecutar código en otros nodos:
iex(bob@127.0.0.1)&amp;gt; greet = fn() -&amp;gt; IO.puts(&amp;quot;Hello from #{inspect(Node.</description>
    </item>
    
    <item>
      <title>sigilos</title>
      <link>https://www.wikiod.com/es/elixir/sigilos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/sigilos/</guid>
      <description>Sigilos personalizados # Se pueden crear sigilos personalizados creando un método sigil_X donde X es la letra que desea usar (esto solo puede ser una sola letra).
defmodule Sigils do def sigil_j(string, options) do # Split on the letter p, or do something more useful String.split string, &amp;quot;p&amp;quot; end # Use this sigil in this module, or import it to use it elsewhere end El argumento opciones es un binario de los argumentos dados al final del sigilo, por ejemplo:</description>
    </item>
    
    <item>
      <title>Tipos incorporados</title>
      <link>https://www.wikiod.com/es/elixir/tipos-incorporados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/elixir/tipos-incorporados/</guid>
      <description>Números # Elixir viene con enteros y números de punto flotante. Un literal entero se puede escribir en formato decimal, binario, octal y hexadecimal.
iex&amp;gt; x = 291 291 iex&amp;gt; x = 0b100100011 291 iex&amp;gt; x = 0o443 291 iex&amp;gt; x = 0x123 291 Como Elixir usa aritmética bignum, el rango de enteros solo está limitado por la memoria disponible en el sistema.
Los números de punto flotante son de doble precisión y siguen la especificación IEEE-754.</description>
    </item>
    
  </channel>
</rss>

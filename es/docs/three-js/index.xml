<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de tres.js on </title>
    <link>https://www.wikiod.com/es/docs/three-js/</link>
    <description>Recent content in Tutorial de tres.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/three-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con tres.js</title>
      <link>https://www.wikiod.com/es/three-js/primeros-pasos-con-tresjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/primeros-pasos-con-tresjs/</guid>
      <description>Instalación o configuración # Puede instalar tres.js a través de npm:
npm install three
Puedes agregarlo desde un CDN a tu HTML:
Puede usar el editor three.js para probarlo y descargar el proyecto como ejemplo o punto de partida.
Repetitivo simple: cubo giratorio y controles de órbita con amortiguación # Este es el archivo HTML básico que se puede usar como repetitivo al iniciar un proyecto. Este modelo utiliza controles de órbita con amortiguación (cámara que puede moverse alrededor de un objeto con efecto de desaceleración) y crea un cubo giratorio.</description>
    </item>
    
    <item>
      <title>Controles de cámara en Three.js</title>
      <link>https://www.wikiod.com/es/three-js/controles-de-camara-en-threejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/controles-de-camara-en-threejs/</guid>
      <description>Este documento describe cómo puede agregar fácilmente algunos controles de cámara existentes a su escena, así como brindar orientación sobre la creación de controles personalizados.
Tenga en cuenta que los scripts de control prefabricados se pueden encontrar en la carpeta /examples/js/controls de la biblioteca.
Controles de órbita # Una cámara orbital es aquella que permite al usuario rotar alrededor de un punto central, pero manteniendo bloqueado un eje en particular. Esto es extremadamente popular porque evita que la escena se &amp;ldquo;incline&amp;rdquo; fuera del eje.</description>
    </item>
    
    <item>
      <title>Selección de objetos</title>
      <link>https://www.wikiod.com/es/three-js/seleccion-de-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/seleccion-de-objetos/</guid>
      <description>Recogida de objetos / Raycasting # Raycasting significa lanzar un rayo desde la posición del mouse en la pantalla a la escena, así es como threejs determina en qué objeto desea hacer clic si lo ha implementado. Threejs obtiene esa información usando un octree, pero aún en producción, es posible que no desee calcular el resultado en cada cuadro o en el evento move del mouse, sino en el evento clic para una aplicación más accesible con requisitos bajos.</description>
    </item>
    
    <item>
      <title>geometrías</title>
      <link>https://www.wikiod.com/es/three-js/geometrias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/geometrias/</guid>
      <description>Los ejemplos funcionan a partir de three.js R79 (revisión 79).
TRES.BoxGeometry # THREE.BoxGeometry construye cajas como paralelepípedos y cubos.
Cubos # Los cubos creados con TRES.BoxGeometry usarían la misma longitud para todos los lados.
JavaScript
//Creates scene and camera var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); //Creates renderer and adds it to the DOM var renderer = new THREE.WebGLRenderer(); renderer.setSize( window.</description>
    </item>
    
    <item>
      <title>Renderizar bucles para animación Actualizar objetos dinámicamente</title>
      <link>https://www.wikiod.com/es/three-js/renderizar-bucles-para-animacion-actualizar-objetos-dinamicamente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/renderizar-bucles-para-animacion-actualizar-objetos-dinamicamente/</guid>
      <description>Este documento describe algunas formas comunes de agregar animación directamente a sus escenas de Three.js. Si bien existen bibliotecas y marcos que pueden agregar movimiento dinámico a su escena (interpolaciones, física, etc.), es útil comprender cómo puede hacerlo usted mismo simplemente con unas pocas líneas de código.
El concepto central de la animación es actualizar las propiedades de un objeto (rotación y traslación, por lo general) en pequeñas cantidades durante un período de tiempo.</description>
    </item>
    
    <item>
      <title>Texturas y Materiales</title>
      <link>https://www.wikiod.com/es/three-js/texturas-y-materiales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/texturas-y-materiales/</guid>
      <description>Una buena introducción al material y las texturas.
Texturas difusas, de relieve, especulares y transparentes.
Parámetros # Parámetro Detalles color Valor numérico del componente RGB del color. intensidad Valor numérico de la fuerza/intensidad de la luz. fov Campo de visión vertical del tronco de la cámara. aspecto Una pieza de cámara mira el sistema. cerca Cámara frustum cerca del avión. faro Un trozo de cámara está claramente lejos. radio radio de la esfera.</description>
    </item>
    
    <item>
      <title>mallas</title>
      <link>https://www.wikiod.com/es/three-js/mallas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/three-js/mallas/</guid>
      <description>Una Three.js Mesh es una clase base que hereda de [Object3d](https://threejs.org/docs/ ?q=geomet#Reference/Core/Object3D) y se usa para instanciar objetos poligonales al combinar una Geometría con un Material . Mesh es también la clase base para las clases más avanzadas MorphAnimMesh y SkinnedMesh.
Sintaxis # nuevo TRES.Mesh(geometría, material); Tanto la geometría como el material son opcionales y tendrán por defecto BufferGeometry y MeshBasicMaterial respectivamente si no se proporcionan en el constructor.
Renderice una malla de cubo con una geometría de caja y un material básico # var scene = new THREE.</description>
    </item>
    
  </channel>
</rss>

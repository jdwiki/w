<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de matraces on </title>
    <link>https://www.wikiod.com/es/docs/flask/</link>
    <description>Recent content in Tutorial de matraces on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Flask</title>
      <link>https://www.wikiod.com/es/flask/primeros-pasos-con-flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/primeros-pasos-con-flask/</guid>
      <description>Hola Mundo # Crea hola.py:
from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def hello(): return &#39;Hello, World!&#39; Luego ejecútalo con:
export FLASK_APP=hello.py flask run * Running on http://localhost:5000/ Agregar el código a continuación permitirá ejecutarlo directamente con python hello.py.
if __name__ == &#39;__main__&#39;: app.run() Instalación - Estable # Use pip para instalar Flask en un virtualenv.
pip install flask Instrucciones paso a paso para crear un virtualenv para su proyecto:</description>
    </item>
    
    <item>
      <title>Implementación de la aplicación Flask usando el servidor web uWSGI con Nginx</title>
      <link>https://www.wikiod.com/es/flask/implementacion-de-la-aplicacion-flask-usando-el-servidor-web-uwsgi-con-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/implementacion-de-la-aplicacion-flask-usando-el-servidor-web-uwsgi-con-nginx/</guid>
      <description>Habilitar la transmisión desde el matraz # Flask tiene esa función que le permite transmitir datos desde una vista mediante el uso de generadores.
Cambiemos el archivo app.py
agregar respuesta de importación de matraz
agregar desde fecha y hora de importación fecha y hora
agregue desde el tiempo de importación del sueño
crear una nueva vista:
@app.route(&amp;quot;/time/&amp;quot;) def time(): def streamer(): while True: yield &amp;ldquo;{}
&amp;quot;.format(datetime.now()) sleep(1)
return Response(streamer()) Ahora abra su navegador en localhost/time/.</description>
    </item>
    
    <item>
      <title>Señales</title>
      <link>https://www.wikiod.com/es/flask/senales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/senales/</guid>
      <description>Flask admite señales usando Blinker. El soporte de señal es opcional; solo se habilitarán si Blinker está instalado.
pip install blinker http://flask.pocoo.org/docs/dev/signals/
Las señales no son asíncronas. Cuando se envía una señal, inmediatamente ejecuta secuencialmente cada una de las funciones conectadas.
Conexión a señales # Use el método conectar de una señal para conectar una función a una señal. Cuando se envía una señal, se llama a cada función conectada con el remitente y los argumentos con nombre que proporciona la señal.</description>
    </item>
    
    <item>
      <title>Archivos estáticos</title>
      <link>https://www.wikiod.com/es/flask/archivos-estaticos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/archivos-estaticos/</guid>
      <description>Uso de archivos estáticos # Las aplicaciones web a menudo requieren archivos estáticos como archivos CSS o JavaScript. Para usar archivos estáticos en una aplicación Flask, cree una carpeta llamada static en su paquete o al lado de su módulo y estará disponible en /static en la aplicación.
Una estructura de proyecto de ejemplo para el uso de plantillas es la siguiente:
MyApplication/ /static/ /style.css /script.js /templates/ /index.html /app.py app.py es un ejemplo básico de Flask con representación de plantilla.</description>
    </item>
    
    <item>
      <title>Paginación</title>
      <link>https://www.wikiod.com/es/flask/paginacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/paginacion/</guid>
      <description>Ejemplo de ruta de paginación con Flass-sqlalchemy Paginate # En este ejemplo usamos un parámetro en la ruta para especificar el número de página. Establecemos un valor predeterminado de 1 en el parámetro de función page=1. Tenemos un objeto Usuario en la base de datos y lo consultamos, ordenándolo en orden descendente, mostrando primero los últimos usuarios. Luego usamos el método paginate del objeto query en Flass-Sqlalchemy. Luego pasamos esto a render_template para ser renderizado.</description>
    </item>
    
    <item>
      <title>Cargas de archivos</title>
      <link>https://www.wikiod.com/es/flask/cargas-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/cargas-de-archivos/</guid>
      <description>Sintaxis # request.files[&amp;rsquo;name&amp;rsquo;] # único archivo requerido request.files.get(&amp;rsquo;name&amp;rsquo;) # Ninguno si no se ha publicado request.files.getlist(&amp;rsquo;name&amp;rsquo;) # lista de cero o más archivos publicados CombinedMultiDict((request.files, request.form)) # combinar formulario y datos de archivo Subiendo archivos # Formulario HTML # Use una entrada de tipo archivo y el navegador proporcionará un campo que le permite al usuario seleccionar un archivo para cargar. Solo los formularios con el método post pueden enviar datos de archivos.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/flask/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/enrutamiento/</guid>
      <description>Rutas Básicas # Las rutas en Flask se pueden definir usando el decorador route de la instancia de la aplicación Flask:
app = Flask(__name__) @app.route(&#39;/&#39;) def index(): return &#39;Hello Flask&#39; El decorador de ruta toma una cadena que es la URL para hacer coincidir. Cuando la aplicación recibe una solicitud de una URL que coincida con esta cadena, se invocará la función decorada (también llamada función de visualización). Entonces, para una ruta aproximada, tendríamos:</description>
    </item>
    
    <item>
      <title>Planos</title>
      <link>https://www.wikiod.com/es/flask/planos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/planos/</guid>
      <description>Los blueprints son un concepto poderoso en el desarrollo de aplicaciones de Flask que permiten que las aplicaciones de Flask sean más modulares y puedan seguir múltiples patrones. Facilitan la administración de aplicaciones Flask muy grandes y, como tales, se pueden usar para escalar aplicaciones Flask. Puede reutilizar las aplicaciones de Blueprint; sin embargo, no puede ejecutar un blueprint por sí solo, ya que debe estar registrado en su aplicación principal.</description>
    </item>
    
    <item>
      <title>Trabajando con JSON</title>
      <link>https://www.wikiod.com/es/flask/trabajando-con-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/trabajando-con-json/</guid>
      <description>Recibir JSON de una solicitud HTTP # Si el tipo MIME de la solicitud HTTP es application/json, llamar a request.get_json() devolverá los datos JSON analizados (de lo contrario, devolverá Ninguno)
from flask import Flask, jsonify app = Flask(__name__) @app.route(&#39;/api/echo-json&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;, &#39;DELETE&#39;, &#39;PUT&#39;]) def add(): data = request.get_json() # ... do your business logic, and return some response # e.g. below we&#39;re just echo-ing back the received JSON data return jsonify(data) Pruébalo con curl # El parámetro -H &#39;Content-Type: application/json&#39; especifica que se trata de una solicitud JSON:</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/flask/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/flask/pruebas/</guid>
      <description>Probando una API JSON implementada en Flask # Este ejemplo asume que sabe cómo [probar una aplicación Flask usando pytest](https://www.wikiod.com/es/flask/pruebas#Probando nuestra aplicación Hello World)
A continuación se muestra una API que toma una entrada JSON con valores enteros a y b, p. {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}, los suma y devuelve la suma a + b en una respuesta JSON, p. {&amp;quot;suma&amp;quot;: 3}.
# hello_add.py from flask import Flask, request, jsonify app = Flask(__name__) @app.</description>
    </item>
    
  </channel>
</rss>

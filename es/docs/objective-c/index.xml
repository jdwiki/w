<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de lenguaje Objective-C on </title>
    <link>https://www.wikiod.com/es/docs/objective-c/</link>
    <description>Recent content in Tutorial de lenguaje Objective-C on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Objective-C</title>
      <link>https://www.wikiod.com/es/objective-c/primeros-pasos-con-el-lenguaje-objective-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/primeros-pasos-con-el-lenguaje-objective-c/</guid>
      <description>Hola Mundo # Este programa generará &amp;ldquo;Hello World!&amp;rdquo;
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, char * argv[]) { NSLog(@&amp;quot;Hello World!&amp;quot;); } #import es una directiva de preprocesador, que indica que queremos importar o incluir la información de ese archivo en el programa. En este caso, el compilador copiará el contenido de Foundation.h en el marco Foundation en la parte superior del archivo. La principal diferencia entre #import e #include es que #import es lo suficientemente &amp;ldquo;inteligente&amp;rdquo; como para no reprocesar archivos que ya se han incluido en otros #includes.</description>
    </item>
    
    <item>
      <title>Inicio sesión</title>
      <link>https://www.wikiod.com/es/objective-c/inicio-sesion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/inicio-sesion/</guid>
      <description>Sintaxis # NSLog(@&amp;ldquo;texto para registrar&amp;rdquo;); // Registro de texto básico NSLog(@&amp;ldquo;datos: %f - %.2f&amp;rdquo;, myFloat, anotherFloat); // Registro de texto que incluye números flotantes. NSLog(@&amp;ldquo;datos: %i&amp;rdquo;, miEntero); // Registro de texto que incluye un número entero. NSLog(@&amp;ldquo;datos: %@&amp;rdquo;, myStringOrObject); // Registro de texto que hace referencia a otro String o cualquier objeto derivado de NSObject. Para registrar varios tipos de objetos y tipos de datos, consulte: Objetivo-C, Especificadores de formato</description>
    </item>
    
    <item>
      <title>NSCadena</title>
      <link>https://www.wikiod.com/es/objective-c/nscadena/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/nscadena/</guid>
      <description>La clase NSString es parte del marco de Foundation para trabajar con cadenas (series de caracteres). También incluye métodos para comparar, buscar y modificar cadenas.
Para anidar varios tipos de objetos y tipos de datos en NSStrings, consulte: Objective-C, Format Specifiers
Codificación y decodificación # // decode NSString *string = [[NSString alloc] initWithData:utf8Data encoding:NSUTF8StringEncoding]; // encode NSData *utf8Data = [string dataUsingEncoding:NSUTF8StringEncoding]; Algunas codificaciones admitidas son:
Codificación de cadena NSASCIII NSUTF8StringEncoding NSUTF16StringEncoding (== NSUnicodeStringEncoding) Tenga en cuenta que utf8Data.</description>
    </item>
    
    <item>
      <title>bloques</title>
      <link>https://www.wikiod.com/es/objective-c/bloques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/bloques/</guid>
      <description>Sintaxis # // Declare as a local variable:
returnType (^blockName)(parameterType1, parameterType2, &amp;hellip;) = ^returnType(argument1, argument2, &amp;hellip;) {&amp;hellip;};
// Declare as a property:
@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);
// Declare as a method parameter:
- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;
// Declare as an argument to a method call:
[someObject someMethodThatTakesABlock:^returnType (parameters) {&amp;hellip;}];
// Declare as a typedef:
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&amp;hellip;};
// Declare a C function return a block object:</description>
    </item>
    
    <item>
      <title>solteros</title>
      <link>https://www.wikiod.com/es/objective-c/solteros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/solteros/</guid>
      <description>Solo asegúrese de leer este hilo ( http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons) antes de usarlo.
Uso de Grand Central Dispatch (GCD) # GCD garantizará que su singleton solo se instancia una vez, incluso si se llama desde varios subprocesos. Inserte esto en cualquier clase para una instancia de singleton llamada shared.
+ (instancetype)shared { // Variable that will point to the singleton instance. The `static` // modifier makes it behave like a global variable: the value assigned // to it will &amp;quot;survive&amp;quot; the method call.</description>
    </item>
    
    <item>
      <title>Entorno de tiempo de ejecución de bajo nivel</title>
      <link>https://www.wikiod.com/es/objective-c/entorno-de-tiempo-de-ejecucion-de-bajo-nivel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/entorno-de-tiempo-de-ejecucion-de-bajo-nivel/</guid>
      <description>Para utilizar el tiempo de ejecución de Objective-C, debe importarlo.
#import &amp;lt;objc/objc.h&amp;gt; Métodos de aumento usando Method Swizzling # El tiempo de ejecución de Objective-C le permite cambiar la implementación de un método en tiempo de ejecución. Esto se llama método swizzling y se usa a menudo para intercambiar las implementaciones de dos métodos. Por ejemplo, si se intercambian los métodos foo y bar, enviar el mensaje foo ahora ejecutará la implementación de bar y viceversa.</description>
    </item>
    
    <item>
      <title>Protocolos</title>
      <link>https://www.wikiod.com/es/objective-c/protocolos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/protocolos/</guid>
      <description>Métodos opcionales y obligatorios # Por defecto, todos los métodos declarados en un protocolo son obligatorios. Esto significa que cualquier clase que se ajuste a este protocolo debe implementar esos métodos.
También es posible declarar métodos opcionales. Estos métodos se pueden implementar solo si es necesario.
Los métodos opcionales se marcan con la directiva @opcional.
@protocol NewProtocol - (void)protocolMethod:(id)argument; @optional - (id)anotherMethod; @end En este caso, solo anotherMethod está marcado como opcional; se supone que los métodos sin la directiva @opcional son obligatorios.</description>
    </item>
    
    <item>
      <title>Codificación de valor clave  Observación de valor clave</title>
      <link>https://www.wikiod.com/es/objective-c/codificacion-de-valor-clave--observacion-de-valor-clave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/codificacion-de-valor-clave--observacion-de-valor-clave/</guid>
      <description>Ejemplo de codificación de valor clave de la vida real más común # La codificación de valores clave está integrada en NSObject mediante el protocolo NSKeyValueCoding.
¿Lo que esto significa?
Significa que cualquier objeto id es capaz de llamar al método valueForKey y sus diversas variantes como valueForKeyPath, etc.
También significa que cualquier objeto de identificación puede invocar el método setValue y sus diversas variantes también.
Ejemplo:
id obj = [[MyClass alloc] init]; id value = [obj valueForKey:@&amp;quot;myNumber&amp;quot;]; int myNumberAsInt = [value intValue]; myNumberAsInt = 53; [obj setValue:@(myNumberAsInt) forKey:@&amp;quot;myNumber&amp;quot;]; Excepciones:</description>
    </item>
    
    <item>
      <title>Clases y Objetos</title>
      <link>https://www.wikiod.com/es/objective-c/clases-y-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/clases-y-objetos/</guid>
      <description>Sintaxis # Gato *gato = [[Asignar gato] init]; // Crear un objeto gato de tipo Gato Perro *perro = [[Dog alloc] init]; // Crear objeto perro de tipo Perro NSObject *someObject = [NSObject alloc]; [iniciar algunObjeto]; // no hagas esto XYZObject *objeto = [XYZObject nuevo]; // Use new para crear objetos si NO se necesitan argumentos para la inicialización NSString *someString = @&amp;quot;¡Hola, mundo!&amp;quot;; // Creando un NSString con sintaxis literal NSNumber *myFloat = @3.</description>
    </item>
    
    <item>
      <title>NSURL</title>
      <link>https://www.wikiod.com/es/objective-c/nsurl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/objective-c/nsurl/</guid>
      <description>Crear # De NSString:
NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; También puede usar los siguientes métodos:
- initWithString: + URLWithString:relativeToURL: - initWithString:relativeToURL: + fileURLWithPath:isDirectory: - initFileURLWithPath:isDirectory: + fileURLWithPath: - initFileURLWithPath: Designated Initializer + fileURLWithPathComponents: + URLByResolvingAliasFileAtURL:options:error: + URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: - initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error: + fileURLWithFileSystemRepresentation:isDirectory:relativeToURL: - getFileSystemRepresentation:maxLength: - initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL: Comparar NSURL # NSString *urlString = @&amp;quot;https://www.stackoverflow.com&amp;quot;; NSURL *myUrl = [NSURL URLWithString: urlString]; NSURL *myUrl2 = [NSURL URLWithString: urlString]; if ([myUrl isEqual:myUrl2]) return YES; Modificación y conversión de la URL de un archivo con la eliminación y la adición de una ruta # 1.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de PowerShell on </title>
    <link>https://www.wikiod.com/es/docs/powershell/</link>
    <description>Recent content in Tutorial de PowerShell on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con PowerShell</title>
      <link>https://www.wikiod.com/es/powershell/primeros-pasos-con-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/primeros-pasos-con-powershell/</guid>
      <description>Permita que los scripts almacenados en su máquina se ejecuten sin firmar # Por razones de seguridad, PowerShell está configurado de forma predeterminada para permitir que solo se ejecuten scripts firmados. Ejecutar el siguiente comando le permitirá ejecutar scripts sin firmar (debe ejecutar PowerShell como administrador para hacer esto).
Set-ExecutionPolicy RemoteSigned Otra forma de ejecutar scripts de PowerShell es usar Bypass como ExecutionPolicy:
powershell.exe -ExecutionPolicy Bypass -File &amp;quot;c:\MyScript.ps1&amp;quot; O desde su consola PowerShell existente o sesión ISE ejecutando:</description>
    </item>
    
    <item>
      <title>Declaración de cambio</title>
      <link>https://www.wikiod.com/es/powershell/declaracion-de-cambio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/declaracion-de-cambio/</guid>
      <description>Una declaración de cambio permite probar la igualdad de una variable con una lista de valores. Cada valor se denomina caso, y la variable que se activa se comprueba para cada caso de cambio. Le permite escribir un script que puede elegir entre una serie de opciones, pero sin requerir que escriba una larga serie de declaraciones if.
Este tema documenta la sentencia de cambio utilizada para bifurcar el flujo del script.</description>
    </item>
    
    <item>
      <title>Codificacióndescodificación de URL</title>
      <link>https://www.wikiod.com/es/powershell/codificaciondescodificacion-de-url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/codificaciondescodificacion-de-url/</guid>
      <description>La expresión regular utilizada en los ejemplos de Decodificación de URL se tomó de RFC 2396, Apéndice B: Análisis de una referencia de URI con una expresión regular; para la posteridad, he aquí una cita:
La siguiente línea es la expresión regular para desglosar un URI referencia a sus componentes.
^(([^:/?#]+):)?(//([^/?#]))?([^?#])(?([^#]))? (#(.))? 12 3 4 5 6 7 8 9
Los números en la segunda línea anterior son solo para facilitar la lectura; indican los puntos de referencia para cada subexpresión (es decir, cada paréntesis emparejado).</description>
    </item>
    
    <item>
      <title>Bucles</title>
      <link>https://www.wikiod.com/es/powershell/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/bucles/</guid>
      <description>Un bucle es una secuencia de instrucciones que se repite continuamente hasta que se alcanza una determinada condición. Ser capaz de hacer que su programa ejecute repetidamente un bloque de código es una de las tareas más básicas pero útiles en la programación. Un ciclo le permite escribir una declaración muy simple para producir un resultado significativamente mayor simplemente por repetición. Si se ha alcanzado la condición, la siguiente instrucción &amp;ldquo;falla&amp;rdquo; a la siguiente instrucción secuencial o se bifurca fuera del ciclo.</description>
    </item>
    
    <item>
      <title>Trabajar con archivos XML</title>
      <link>https://www.wikiod.com/es/powershell/trabajar-con-archivos-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/trabajar-con-archivos-xml/</guid>
      <description>Acceso a un archivo XML # &amp;lt;!-- file.xml --&amp;gt; &amp;lt;people&amp;gt; &amp;lt;person id=&amp;quot;101&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Jon Lajoie&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;22&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;102&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Lord Gaben&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;65&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;person id=&amp;quot;103&amp;quot;&amp;gt; &amp;lt;name&amp;gt;Gordon Freeman&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;29&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt; &amp;lt;/people&amp;gt; Cargando un archivo XML
Para cargar un archivo XML, puede usar cualquiera de estos:
# First Method $xdoc = New-Object System.Xml.XmlDocument $file = Resolve-Path(&amp;quot;.\file.xml&amp;quot;) $xdoc.load($file) # Second Method [xml] $xdoc = Get-Content &amp;quot;.\file.xml&amp;quot; # Third Method $xdoc = [xml] (Get-Content &amp;quot;.\file.xml&amp;quot;) Acceso a XML como objetos</description>
    </item>
    
    <item>
      <title>Usando DeberíaProcesar</title>
      <link>https://www.wikiod.com/es/powershell/usando-deberiaprocesar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/usando-deberiaprocesar/</guid>
      <description>Sintaxis # $PSCmdlet.DeberíaProcesar(&amp;ldquo;Objetivo&amp;rdquo;) $PSCmdlet.ShouldProcess(&amp;ldquo;Objetivo&amp;rdquo;, &amp;ldquo;Acción&amp;rdquo;) Parámetros # Parámetro Detalles Objetivo El recurso que se está modificando. Acción La operación que se está realizando. El valor predeterminado es el nombre del cmdlet. $PSCmdlet.ShouldProcess() también escribirá automáticamente un mensaje en la salida detallada.
PS&amp;gt; Invoke-MyCmdlet -Verbose VERBOSE: Performing the operation &amp;quot;Invoke-MyCmdlet&amp;quot; on target &amp;quot;Target of action&amp;quot; Ejemplo de uso completo # Otros ejemplos no pudieron explicarme claramente cómo activar la lógica condicional.</description>
    </item>
    
    <item>
      <title>Funciones de PowerShell</title>
      <link>https://www.wikiod.com/es/powershell/funciones-de-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/funciones-de-powershell/</guid>
      <description>Una función es básicamente un bloque de código con nombre. Cuando llama al nombre de la función, se ejecuta el bloque de script dentro de esa función. Es una lista de declaraciones de PowerShell que tiene un nombre que usted asigna. Cuando ejecuta una función, escribe el nombre de la función. Es un método para ahorrar tiempo al abordar tareas repetitivas. Formatos de PowerShell en tres partes: la palabra clave &amp;lsquo;Función&amp;rsquo;, seguida de un Nombre, finalmente, la carga útil que contiene el bloque de script, que está encerrado entre corchetes de estilo curvo/paréntesis.</description>
    </item>
    
    <item>
      <title>Comunicación TCP con PowerShell</title>
      <link>https://www.wikiod.com/es/powershell/comunicacion-tcp-con-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/comunicacion-tcp-con-powershell/</guid>
      <description>Oyente TCP # Function Receive-TCPMessage { Param ( [Parameter(Mandatory=$true, Position=0)] [ValidateNotNullOrEmpty()] [int] $Port ) Process { Try { # Set up endpoint and start listening $endpoint = new-object System.Net.IPEndPoint([ipaddress]::any,$port) $listener = new-object System.Net.Sockets.TcpListener $EndPoint $listener.start() # Wait for an incoming connection $data = $listener.AcceptTcpClient() # Stream setup $stream = $data.GetStream() $bytes = New-Object System.Byte[] 1024 # Read data from stream and write it to host while (($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){ $EncodedText = New-Object System.</description>
    </item>
    
    <item>
      <title>Manejo de secretos y credenciales</title>
      <link>https://www.wikiod.com/es/powershell/manejo-de-secretos-y-credenciales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/manejo-de-secretos-y-credenciales/</guid>
      <description>En Powershell, para evitar almacenar la contraseña en texto claro, usamos diferentes métodos de encriptación y la almacenamos como una cadena segura. Cuando no está especificando una clave o una clave segura, esto solo funcionará para el mismo usuario en la misma computadora que podrá descifrar la cadena cifrada si no está usando Claves/SecureKeys. Cualquier proceso que se ejecute bajo esa misma cuenta de usuario podrá descifrar esa cadena cifrada en esa misma máquina.</description>
    </item>
    
    <item>
      <title>Línea de comandos de PowerShell.exe</title>
      <link>https://www.wikiod.com/es/powershell/linea-de-comandos-de-powershellexe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/powershell/linea-de-comandos-de-powershellexe/</guid>
      <description>Parámetros # Parámetro Descripción -Ayuda | -? | /? Muestra la ayuda -File &amp;lt;FilePath&amp;gt; [&amp;lt;Args&amp;gt;] Ruta al archivo de script que debe ejecutarse y argumentos (opcional) -Comando { - | &amp;lt;bloque-script&amp;gt; [-args &amp;lt;matriz-arg&amp;gt;] | &amp;lt;cadena&amp;gt; [&amp;lt;Parámetros de comando&amp;gt;] } Comandos a ejecutar seguidos de argumentos -EncodedCommand &amp;lt;Base64EncodedCommand&amp;gt; Comandos codificados en Base64 -Política de ejecución &amp;lt;Política de ejecución&amp;gt; Establece la política de ejecución solo para este proceso -InputFormat { Texto | XML} Establece el formato de entrada para los datos enviados al proceso.</description>
    </item>
    
  </channel>
</rss>

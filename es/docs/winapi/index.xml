<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de la API de Win32 on </title>
    <link>https://www.wikiod.com/es/docs/winapi/</link>
    <description>Recent content in Tutorial de la API de Win32 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/winapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con la API de Win32</title>
      <link>https://www.wikiod.com/es/winapi/primeros-pasos-con-la-api-de-win32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/primeros-pasos-con-la-api-de-win32/</guid>
      <description>Hola Mundo # Las aplicaciones de Microsoft Windows generalmente se escriben como una aplicación de consola o una aplicación de ventana (hay otros tipos, como servicios y complementos). La diferencia para el programador es la diferencia en la interfaz del punto de entrada principal para la fuente de la aplicación proporcionada por el programador.
Cuando se inicia una aplicación C o C++, el punto de entrada del ejecutable utilizado por el cargador de ejecutables es el tiempo de ejecución proporcionado por el compilador.</description>
    </item>
    
    <item>
      <title>Reporte y manejo de errores</title>
      <link>https://www.wikiod.com/es/winapi/reporte-y-manejo-de-errores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/reporte-y-manejo-de-errores/</guid>
      <description>Cada subproceso tendrá su propio código de último error. La API de Windows establecerá el último código de error en el hilo de llamada.
Siempre debe llamar a la función GetLastError inmediatamente después de verificar el valor de retorno de una función API de Windows.
La mayoría de las funciones de la API de Windows establecen el último código de error cuando fallan. Algunos también establecerán el último código de error cuando tengan éxito.</description>
    </item>
    
    <item>
      <title>Funciones de caracteres anchos y anchos</title>
      <link>https://www.wikiod.com/es/winapi/funciones-de-caracteres-anchos-y-anchos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/funciones-de-caracteres-anchos-y-anchos/</guid>
      <description>Introducción # La documentación de la API de Windows para las funciones que toman una o más cadenas como argumento generalmente se verá así:
BOOL WINAPI CopyFile( _In_ LPCTSTR lpExistingFileName, _In_ LPCTSTR lpNewFileName, _In_ BOOL bFailIfExists ); El tipo de datos para los dos parámetros de cadena se compone de varias partes:
LP = Puntero largo C = constante T = CHAR STR = cadena Ahora, ¿qué significa TCHAR? Esto depende de la plataforma elegida para la compilación del programa.</description>
    </item>
    
    <item>
      <title>Gestión de procesos y subprocesos</title>
      <link>https://www.wikiod.com/es/winapi/gestion-de-procesos-y-subprocesos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/gestion-de-procesos-y-subprocesos/</guid>
      <description>Crea un proceso y verifica su código de salida # Este ejemplo inicia el Bloc de notas, espera a que se cierre y luego obtiene su código de salida.
#include &amp;lt;Windows.h&amp;gt; int main() { STARTUPINFOW si = { 0 }; si.cb = sizeof(si); PROCESS_INFORMATION pi = { 0 }; // Create the child process BOOL success = CreateProcessW( L&amp;quot;C:\\Windows\\system32\\notepad.exe&amp;quot;, // Path to executable NULL, // Command line arguments NULL, // Process attributes NULL, // Thread attributes FALSE, // Inherit handles 0, // Creation flags NULL, // Environment NULL, // Working directory &amp;amp;si, // Startup info &amp;amp;pi); // Process information if (success) { // Wait for the process to exit WaitForSingleObject(pi.</description>
    </item>
    
    <item>
      <title>Subclases de Windows</title>
      <link>https://www.wikiod.com/es/winapi/subclases-de-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/subclases-de-windows/</guid>
      <description>La creación de subclases de ventana es una forma de conectarse al procedimiento de ventana estándar y de modificar o ampliar su comportamiento predeterminado. Una aplicación subclasifica una ventana reemplazando el procedimiento de ventana original de la ventana con un nuevo procedimiento de ventana. Este procedimiento de nueva ventana recibe todos los mensajes enviados o publicados en la ventana.
Sintaxis # BOOL SetWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DWORD_PTR RefData); BOOL RemoveWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId); BOOL GetWindowSubclass(HWND hWnd, SUBCLASSPROC SubclassProc, UINT_PTR SubclassId, DORD_PTR* RefData); LRESULT DefSubclassProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); Parámetros # Parámetro Detalle hWnd El manejador de la ventana a la subclase.</description>
    </item>
    
    <item>
      <title>Mensajes de ventana</title>
      <link>https://www.wikiod.com/es/winapi/mensajes-de-ventana/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/mensajes-de-ventana/</guid>
      <description>Sintaxis # #incluir &amp;lt;ventanas.h&amp;gt; BOOL WINAPI DestroyWindow(HWND hwnd); VOID WINAPI PostQuitMessage (código de salida int); BOOL WINAPI MoveWindow(HWND hwnd, int x, int y, int cx, int cy, BOOL bRepaint); WM_DESTROY # Este mensaje se envía a su procedimiento de ventana cuando se destruye una ventana. Se envía después de quitar la ventana de la pantalla. La mayoría de las aplicaciones liberan recursos, como memoria o identificadores, obtenidos en WM_CREATE. Si maneja este mensaje, devuelva 0.</description>
    </item>
    
    <item>
      <title>Tratando con las ventanas</title>
      <link>https://www.wikiod.com/es/winapi/tratando-con-las-ventanas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/tratando-con-las-ventanas/</guid>
      <description>Creando una ventana # #define UNICODE #define _UNICODE #include &amp;lt;windows.h&amp;gt; #include &amp;lt;tchar.h&amp;gt; const TCHAR CLSNAME[] = TEXT(&amp;quot;helloworldWClass&amp;quot;); LRESULT CALLBACK winproc(HWND hwnd, UINT wm, WPARAM wp, LPARAM lp); int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, PTSTR cmdline, int cmdshow) { WNDCLASSEX wc = { }; MSG msg; HWND hwnd; wc.cbSize = sizeof (wc); wc.style = 0; wc.lpfnWndProc = winproc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInst; wc.hIcon = LoadIcon (NULL, IDI_APPLICATION); wc.</description>
    </item>
    
    <item>
      <title>Gestión de archivos</title>
      <link>https://www.wikiod.com/es/winapi/gestion-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/gestion-de-archivos/</guid>
      <description>Crea un archivo y escribe en él # Este ejemplo crea un nuevo archivo llamado &amp;ldquo;NewFile.txt&amp;rdquo;, luego escribe &amp;ldquo;¡Hola mundo!&amp;rdquo; a su cuerpo. Si el archivo ya existe, CreateFile fallará y no se escribirán datos. Consulte el parámetro dwCreationDisposition en la documentación de CreateFile si no desea que la función falle si el archivo ya existe.
#include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; int main() { // Open a handle to the file HANDLE hFile = CreateFile( L&amp;quot;C:\\NewFile.</description>
    </item>
    
    <item>
      <title>Servicios de Windows</title>
      <link>https://www.wikiod.com/es/winapi/servicios-de-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/servicios-de-windows/</guid>
      <description>Comprobar si hay un servicio instalado # Este ejemplo muestra cómo puede verificar si un servicio ya existe (es decir, está instalado en la máquina) o no. Este código requiere solo los privilegios más bajos necesarios, por lo que cada proceso puede realizar la verificación, sin importar en qué nivel de seguridad se esté ejecutando.
#define UNICODE #define _UNICODE #include &amp;lt;Windows.h&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; enum Result { unknown, serviceManager_AccessDenied, serviceManager_DatabaseDoesNotExist, service_AccessDenied, service_InvalidServiceManagerHandle, service_InvalidServiceName, service_DoesNotExist, service_Exist }; Result ServiceExists(const std::wstring &amp;amp;serviceName) { Result r = unknown; // Get a handle to the SCM database SC_HANDLE manager = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, GENERIC_READ); if (manager == NULL) { DWORD lastError = GetLastError(); // At this point, we can return directly because no handles need to be closed.</description>
    </item>
    
    <item>
      <title>Utilizando la documentación de MSDN</title>
      <link>https://www.wikiod.com/es/winapi/utilizando-la-documentacion-de-msdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/winapi/utilizando-la-documentacion-de-msdn/</guid>
      <description>La API de Windows es amplia y contiene muchas características. El tamaño de la API es tal que nadie puede saberlo todo. Si bien hay muchos recursos como StackOverflow, no hay sustituto para la documentación oficial.
Ejemplos de Documentación:
Descripción general del tema: Consideraciones sobre el rendimiento y mejores prácticas del Administrador de ventanas de escritorio Ejemplos: Personalizar una miniatura icónica y un mapa de bits de vista previa en vivo Funciones: función DwmSetIconicThumbnail Tipos de Documentación Disponibles # La biblioteca de MSDN contiene varios tipos diferentes de documentación que se pueden usar para implementar funciones.</description>
    </item>
    
  </channel>
</rss>

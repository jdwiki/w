<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial SQL on </title>
    <link>https://www.wikiod.com/es/docs/sql/</link>
    <description>Recent content in Tutorial SQL on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con SQL</title>
      <link>https://www.wikiod.com/es/sql/comenzando-con-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/comenzando-con-sql/</guid>
      <description>Visión general # El lenguaje de consulta estructurado (SQL) es un lenguaje de programación de propósito especial diseñado para administrar datos almacenados en un sistema de administración de bases de datos relacionales (RDBMS). Los lenguajes similares a SQL también se pueden usar en sistemas de gestión de flujo de datos relacionales (RDSMS) o en bases de datos &amp;ldquo;no solo SQL&amp;rdquo; (NoSQL).
SQL se compone de 3 sublenguajes principales:
Lenguaje de definición de datos (DDL): para crear y modificar la estructura de la base de datos; Lenguaje de Manipulación de Datos (DML): para realizar operaciones de Lectura, Inserción, Actualización y Eliminación de los datos de la base de datos; Lenguaje de Control de Datos (DCL): para controlar el acceso de los datos almacenados en la base de datos.</description>
    </item>
    
    <item>
      <title>SELECCIONE</title>
      <link>https://www.wikiod.com/es/sql/seleccione/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/seleccione/</guid>
      <description>La declaración SELECT está en el corazón de la mayoría de las consultas SQL. Define qué conjunto de resultados debe devolver la consulta y casi siempre se usa junto con la cláusula FROM, que define qué partes de la base de datos deben consultarse.
Sintaxis # SELECCIONE [DISTINTO] [columna1] [, [columna2] &amp;hellip; ] DESDE [tabla] [Condición DONDE] [ AGRUPAR POR [columna1] [, [columna2] &amp;hellip; ] [ TENIENDO [columna1] [, [columna2] &amp;hellip; ]</description>
    </item>
    
    <item>
      <title>UNIRSE</title>
      <link>https://www.wikiod.com/es/sql/unirse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/unirse/</guid>
      <description>JOIN es un método para combinar (unir) información de dos tablas. El resultado es un conjunto unido de columnas de ambas tablas, definido por el tipo de combinación (INTERIOR/EXTERIOR/CRUZADO e IZQUIERDO/DERECHO/COMPLETO, explicado a continuación) y el criterio de combinación (cómo se relacionan las filas de ambas tablas).
Una mesa puede estar unida a sí misma oa cualquier otra mesa. Si se necesita acceder a la información de más de dos tablas, se pueden especificar varias uniones en una cláusula FROM.</description>
    </item>
    
    <item>
      <title>Ejemplos de bases de datos y tablas</title>
      <link>https://www.wikiod.com/es/sql/ejemplos-de-bases-de-datos-y-tablas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/ejemplos-de-bases-de-datos-y-tablas/</guid>
      <description>Base de datos del taller de automóviles # En el siguiente ejemplo: base de datos para un negocio de taller de automóviles, tenemos una lista de departamentos, empleados, clientes y automóviles de clientes. Estamos utilizando claves externas para crear relaciones entre las distintas tablas.
Ejemplo en vivo: violín SQL
Relaciones entre tablas # Cada Departamento puede tener 0 o más Empleados Cada Empleado puede tener 0 o 1 Gerente Cada Cliente puede tener 0 o más Autos Departamentos # identificación Nombre 1 RRHH 2 Ventas 3 Tecnología Sentencias SQL para crear la tabla:</description>
    </item>
    
    <item>
      <title>Funciones de cadena</title>
      <link>https://www.wikiod.com/es/sql/funciones-de-cadena/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/funciones-de-cadena/</guid>
      <description>Las funciones de cadena realizan operaciones en valores de cadena y devuelven valores numéricos o de cadena.
Con las funciones de cadena, puede, por ejemplo, combinar datos, extraer una subcadena, comparar cadenas o convertir una cadena a todos los caracteres en mayúsculas o minúsculas.
Sintaxis # CONCAT ( string_value1, string_value2 [, string_valueN ] ) LTRIM (caracter_expresión ) RTRIM (caracter_expresión ) SUBCADENA (expresión, inicio, longitud) ASCII (caracter_expresión) REPLICAR (expresión_cadena, expresión_entero) INVERSO ( expresión_cadena ) SUPERIOR (caracter_expresión) TRIM ([caracteres DE] cadena) STRING_SPLIT (cadena, separador) COSAS (caracter_expresión, inicio, longitud, reemplazar con_expresión) REEMPLAZAR (expresión_cadena, patrón_cadena, reemplazo_cadena) Referencia de funciones de cadena para Transact-SQL/Microsoft</description>
    </item>
    
    <item>
      <title>CASO</title>
      <link>https://www.wikiod.com/es/sql/caso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/caso/</guid>
      <description>La expresión CASE se utiliza para implementar la lógica si-entonces.
Sintaxis # CASE entrada_expresión CUANDO comparar1 ENTONCES resultado1 [CUANDO comparar2 ENTONCES resultado2]&amp;hellip; [ELSE resultadoX] FINAL CASO CUANDO condición1 ENTONCES resultado1 [CUANDO condición2 ENTONCES resultado2]&amp;hellip; [ELSE resultadoX] FINAL La expresión CASE simple devuelve el primer resultado cuyo valor compareX es igual a input_expression.
La expresión CASE buscada devuelve el primer resultado cuya condiciónX es verdadera.
Use CASE para CONTAR el número de filas en una columna que coincide con una condición.</description>
    </item>
    
    <item>
      <title>Filtre los resultados usando WHERE y HAVING</title>
      <link>https://www.wikiod.com/es/sql/filtre-los-resultados-usando-where-y-having/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/filtre-los-resultados-usando-where-y-having/</guid>
      <description>Sintaxis # SELECCIONE column_name DESDE table_name WHERE valor del operador nombre_columna SELECCIONE column_name, added_function (column_name) DESDE table_name AGRUPAR POR nombre_columna TENER el valor del operador de la función agregada (nombre de la columna) Usar ENTRE para filtrar resultados # Los siguientes ejemplos usan las bases de datos de muestra Item Sales y Customers.
Nota: El operador BETWEEN es inclusivo.
Usando el operador BETWEEN con Números:
SELECT * From ItemSales WHERE Quantity BETWEEN 10 AND 17 Esta consulta devolverá todos los registros de ItemSales que tengan una cantidad mayor o igual a 10 y menor o igual a 17.</description>
    </item>
    
    <item>
      <title>Inyección SQL</title>
      <link>https://www.wikiod.com/es/sql/inyeccion-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/inyeccion-sql/</guid>
      <description>La inyección de SQL es un intento de acceder a las tablas de la base de datos de un sitio web mediante la inyección de SQL en un campo de formulario. Si un servidor web no protege contra los ataques de inyección SQL, un pirata informático puede engañar a la base de datos para que ejecute el código SQL adicional. Al ejecutar su propio código SQL, los piratas informáticos pueden actualizar el acceso a su cuenta, ver la información privada de otra persona o realizar cualquier otra modificación en la base de datos.</description>
    </item>
    
    <item>
      <title>UNIÓN  UNIÓN TODOS</title>
      <link>https://www.wikiod.com/es/sql/union--union-todos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/union--union-todos/</guid>
      <description>La palabra clave UNION en SQL se usa para combinar los resultados de la instrucción SELECT sin ningún duplicado.
Para usar UNION y combinar resultados, ambas declaraciones SELECT deben tener el mismo número de columnas con el mismo tipo de datos en el mismo orden, pero la longitud de la columna puede ser diferente.
Sintaxis # SELECCIONE column_1 [, column_2 ] FROM table_1 [, table_2 ] [WHERE condition] ** UNIÓN | UNIÓN TODOS** SELECCIONE column_1 [, column_2] FROM table_1 [, table_2] [WHERE condition] Las cláusulas UNION y UNION ALL combinan el conjunto de resultados de dos o más sentencias SELECT estructuradas de forma idéntica en un único resultado/tabla.</description>
    </item>
    
    <item>
      <title>CREAR MESA</title>
      <link>https://www.wikiod.com/es/sql/crear-mesa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sql/crear-mesa/</guid>
      <description>La declaración CREATE TABLE se usa para crear una nueva tabla en la base de datos. Una definición de tabla consta de una lista de columnas, sus tipos y cualquier restricción de integridad.
Sintaxis # CREATE TABLE tableName( [ColumnName1] [datatype1] [, [ColumnName2] [datatype2] &amp;hellip;] ) Parámetros # Parámetro Detalles tableName El nombre de la tabla columnas Contiene una &amp;rsquo;enumeración&amp;rsquo; de todas las columnas que tiene la tabla. Consulte Crear una nueva tabla para obtener más detalles.</description>
    </item>
    
  </channel>
</rss>

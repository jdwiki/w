<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de bash on </title>
    <link>https://www.wikiod.com/es/docs/bash/</link>
    <description>Recent content in Tutorial de bash on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con Bash</title>
      <link>https://www.wikiod.com/es/bash/comenzando-con-bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/comenzando-con-bash/</guid>
      <description>Hola Mundo # Concha Interactiva # El shell Bash se usa comúnmente interactivamente: Le permite ingresar y editar comandos, luego los ejecuta cuando presiona la tecla Return. Muchos sistemas operativos basados ​​en Unix y similares a Unix usan Bash como su shell predeterminado (especialmente Linux y macOS). El terminal ingresa automáticamente a un proceso de shell Bash interactivo al iniciarse.
Muestra Hello World escribiendo lo siguiente:
echo &amp;quot;Hello World&amp;quot; #&amp;gt; Hello World # Output Example Notas # Puede cambiar el shell simplemente escribiendo el nombre del shell en la terminal.</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/bash/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/arreglos/</guid>
      <description>Asignaciones de matrices # Asignación de lista
Si está familiarizado con Perl, C o Java, podría pensar que Bash usaría comas para separar los elementos de la matriz, sin embargo, este no es el caso; en cambio, Bash usa espacios:
# Array in Perl my @array = (1, 2, 3, 4); # Array in Bash array=(1 2 3 4) Crea una matriz con nuevos elementos:
array=(&#39;first element&#39; &#39;second element&#39; &#39;third element&#39;) Asignación de subíndice</description>
    </item>
    
    <item>
      <title>Usar trap para reaccionar a señales y eventos del sistema</title>
      <link>https://www.wikiod.com/es/bash/usar-trap-para-reaccionar-a-senales-y-eventos-del-sistema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/usar-trap-para-reaccionar-a-senales-y-eventos-del-sistema/</guid>
      <description>Sintaxis # trap action sigspec&amp;hellip; # Ejecutar &amp;ldquo;action&amp;rdquo; en una lista de señales trap sigspec&amp;hellip; # Omitir la acción restablece las trampas para las señales Parámetros # Parámetro Significado -p Lista de trampas actualmente instaladas -l Lista de nombres de señales y números correspondientes La utilidad trampa es un shell especial incorporado. Está definido en POSIX, pero bash también agrega algunas extensiones útiles.
Los ejemplos que son compatibles con POSIX comienzan con #!</description>
    </item>
    
    <item>
      <title>Variables internas</title>
      <link>https://www.wikiod.com/es/bash/variables-internas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/variables-internas/</guid>
      <description>Una descripción general de las variables internas de Bash, dónde, cómo y cuándo usarlas.
Variables internas de Bash de un vistazo # variables Detalles $* / $@ Parámetros posicionales de función/script (argumentos). Expanda de la siguiente manera:
$* y $@ son lo mismo que $1 $2 ... (tenga en cuenta que generalmente no tiene sentido dejarlos sin comillas)
&amp;quot;$* &amp;quot; es lo mismo que &amp;quot;$1 $2 ...&amp;quot; 1 &amp;quot;$@&amp;quot; es lo mismo que &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot; .</description>
    </item>
    
    <item>
      <title>Expansión de parámetros de Bash</title>
      <link>https://www.wikiod.com/es/bash/expansion-de-parametros-de-bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/expansion-de-parametros-de-bash/</guid>
      <description>El carácter $ introduce la expansión de parámetros, la sustitución de comandos o la expansión aritmética. El nombre del parámetro o el símbolo que se va a expandir se puede encerrar entre llaves, que son opcionales pero sirven para proteger la variable que se va a expandir de los caracteres inmediatamente posteriores que podrían interpretarse como parte del nombre.
Lea más en el [Manual de usuario de Bash] (https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html).
Sintaxis # ${parameter:offset} # Subcadena que comienza en offset ${parámetro:desplazamiento:longitud} # Subcadena de longitud &amp;ldquo;longitud&amp;rdquo; comenzando en desplazamiento ${#parámetro} # Longitud del parámetro ${parámetro/patrón/cadena} # Reemplazar la primera aparición de patrón con cadena ${parámetro//patrón/cadena} # Reemplazar todas las apariciones de patrón con cadena ${parámetro/#patrón/cadena} # Reemplazar patrón con cadena si el patrón está al principio ${parámetro/%patrón/cadena} # Reemplazar patrón con cadena si el patrón está al final ${parámetro#patrón} # Elimina la coincidencia más corta del patrón desde el principio del parámetro ${parámetro##patrón} # Eliminar la coincidencia más larga del patrón desde el principio del parámetro ${parameter%pattern} # Eliminar la coincidencia más corta del patrón del final del parámetro ${parameter%%pattern} # Eliminar la coincidencia más larga del patrón del final del parámetro ${parámetro:-palabra} # Expandir a palabra si el parámetro no está definido/definido ${parámetro:=palabra} # Expandir a palabra si el parámetro no está establecido/indefinido y establece el parámetro ${parámetro:+palabra} # Expandir a palabra si el parámetro está establecido/definido Modificando las mayúsculas y minúsculas de los caracteres alfabéticos # A mayúsculas</description>
    </item>
    
    <item>
      <title>Redirección</title>
      <link>https://www.wikiod.com/es/bash/redireccion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/redireccion/</guid>
      <description>Sintaxis # comando &amp;lt;/ruta/al/archivo # Redirigir la entrada estándar al archivo comando &amp;gt;/ruta/al/archivo # Redirigir la salida estándar para volar comando file_descriptor&amp;gt;/ruta/al/archivo # Redirigir la salida de file_descriptor al archivo comando &amp;gt;&amp;amp;file_descriptor # Redirigir la salida a file_descriptor comando file_descriptor&amp;gt;&amp;amp;another_file_descriptor # Redirigir file_descriptor a another_file_descriptor comando &amp;lt;&amp;amp;file_descriptor # Redirigir file_descriptor a la entrada estándar comando &amp;amp;&amp;gt;/ruta/al/archivo # Redirigir la salida estándar y el error estándar al archivo Parámetros # Parámetro Detalles descriptor de archivo interno un entero dirección Uno de &amp;gt;, &amp;lt; o &amp;lt;&amp;gt; ruta o descriptor de archivo externo &amp;amp; seguido de un número entero para el descriptor de archivo o una ruta.</description>
    </item>
    
    <item>
      <title>Aquí documentos y aquí cadenas</title>
      <link>https://www.wikiod.com/es/bash/aqui-documentos-y-aqui-cadenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/aqui-documentos-y-aqui-cadenas/</guid>
      <description>Ejecutar comando con el documento aquí # ssh -p 21 example@example.com &amp;lt;&amp;lt;EOF echo &#39;printing pwd&#39; echo &amp;quot;\$(pwd)&amp;quot; ls -a find &#39;*.txt&#39; EOF $ se escapa porque no queremos que se expanda con el shell actual, es decir, $(pwd) debe ejecutarse en el shell remoto.
De otra manera:
ssh -p 21 example@example.com &amp;lt;&amp;lt;&#39;EOF&#39; echo &#39;printing pwd&#39; echo &amp;quot;$(pwd)&amp;quot; ls -a find &#39;*.txt&#39; EOF Nota: El EOF de cierre debe estar al comienzo de la línea (sin espacios en blanco antes).</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/bash/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/funciones/</guid>
      <description>Sintaxis # Defina una función con la palabra clave función:
function f { }
Definir una función con ():
f(){ }
Defina una función con la palabra clave function y ():
function f(){ }
Funciones con argumentos # En holaJohn.sh:
#!/bin/bash greet() { local name=&amp;quot;$1&amp;quot; echo &amp;quot;Hello, $name&amp;quot; } greet &amp;quot;John Doe&amp;quot; # running above script $ bash helloJohn.sh Hello, John Doe Si no modifica el argumento de ninguna manera, no hay necesidad de copiarlo a una variable local - simplemente echo &amp;quot;Hola, $1&amp;quot;.</description>
    </item>
    
    <item>
      <title>Listado de archivos</title>
      <link>https://www.wikiod.com/es/bash/listado-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/listado-de-archivos/</guid>
      <description>Sintaxis # ls [OPCIÓN]&amp;hellip; [ARCHIVO]&amp;hellip; Parámetros # Opción Descripción -a, --todo Enumere todas las entradas, incluidas las que comienzan con un punto -A, --casi-todo Listar todas las entradas excepto . y .. -c Ordenar archivos por tiempo de cambio -d, --directorio Listar entradas de directorio -h, --legible por humanos Mostrar tamaños en formato legible por humanos (es decir, K, M) -H Igual que arriba solo con potencias de 1000 en lugar de 1024 -l Mostrar contenidos en formato de lista larga -o Formato de lista larga sin información de grupo -r, --inverso Mostrar contenidos en orden inverso -s, --tamaño Tamaño de impresión de cada archivo en bloques -S Ordenar por tamaño de archivo --ordenar=PALABRA Ordenar contenidos por una palabra.</description>
    </item>
    
    <item>
      <title>Encontrar</title>
      <link>https://www.wikiod.com/es/bash/encontrar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/bash/encontrar/</guid>
      <description>find es un comando para buscar recursivamente en un directorio archivos (o directorios) que coincidan con un criterio y luego realizar alguna acción en los archivos seleccionados.
encontrar acción_criterios_selección_ruta_búsqueda
Sintaxis # buscar [-H] [-L] [-P] [-D debugopts] [-Olevel] [ruta&amp;hellip;] [expresión] Buscando un archivo por nombre o extensión # Para encontrar archivos/directorios con un nombre específico, relativo a pwd:
$ find . -name &amp;quot;myFile.txt&amp;quot; ./myFile.txt Para buscar archivos/directorios con una extensión específica, use un comodín:</description>
    </item>
    
  </channel>
</rss>

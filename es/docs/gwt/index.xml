<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/gwt/</link>
    <description>Recent content in Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/gwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con gwt</title>
      <link>https://www.wikiod.com/es/gwt/primeros-pasos-con-gwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gwt/primeros-pasos-con-gwt/</guid>
      <description>Instalación # Descargue y descomprima el GWT SDK. Este contiene las bibliotecas principales, el compilador y el servidor de desarrollo que necesita para escribir aplicaciones web.
En Windows, extraiga los archivos de la carpeta comprimida gwt-2.7.0.zip. En Mac o Linux, puede descomprimir el paquete con un comando como:
unzip gwt-2.7.0.zip El SDK de GWT no tiene una aplicación de instalación. Todos los archivos que necesita para ejecutar y usar el SDK se encuentran en el directorio extraído.</description>
    </item>
    
    <item>
      <title>Comunicación del lado del servidor con RestyGwt</title>
      <link>https://www.wikiod.com/es/gwt/comunicacion-del-lado-del-servidor-con-restygwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gwt/comunicacion-del-lado-del-servidor-con-restygwt/</guid>
      <description>Como RestyGWT es un generador de GWT, creará automáticamente la implementación de su interfaz de cliente. Bajo el capó, utilizará la clase RequestBuilder para implementar sus llamadas.
Definición y uso de su cliente REST # Ya debería tener disponible su recurso REST de back-end. En el lado del cliente (GWT) su necesidad de
Agregue la dependencia RestyGwt a su proyecto con maven
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.fusesource.restygwt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;restygwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Agregue la herencia a su archivo de módulo</description>
    </item>
    
    <item>
      <title>Uso de eventos con HandlerManager</title>
      <link>https://www.wikiod.com/es/gwt/uso-de-eventos-con-handlermanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/gwt/uso-de-eventos-con-handlermanager/</guid>
      <description>Sintaxis de uso de eventos simples y manejadores de eventos # HandlderManager proporcionando:
public class HandlerManagerProvider { private static HandlerManager handlerManager; private HandlerManagerProvider() { } public static HandlerManager get() { return handlerManager != null ? handlerManager : (handlerManager = new HandlerManager(null)); } } Controlador de eventos:
import com.google.gwt.event.shared.EventHandler; public interface CustomEventHandler extends EventHandler { void doMyAction(CustomEvent event); } Evento:
import com.google.gwt.event.shared.GwtEvent; public class CustomEvent extends GwtEvent&amp;lt;CustomEventHandler&amp;gt; { public static final Type&amp;lt;CustomEventHandler&amp;gt; TYPE = new Type&amp;lt;&amp;gt;(); @Override public Type&amp;lt;CustomEventHandler&amp;gt; getAssociatedType() { return TYPE; } @Override protected void dispatch(CustomEventHandler) { handler.</description>
    </item>
    
  </channel>
</rss>

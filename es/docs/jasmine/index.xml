<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial jazmin on </title>
    <link>https://www.wikiod.com/es/docs/jasmine/</link>
    <description>Recent content in tutorial jazmin on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/jasmine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con el jazmín</title>
      <link>https://www.wikiod.com/es/jasmine/empezando-con-el-jazmin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jasmine/empezando-con-el-jazmin/</guid>
      <description>Instalación o configuración # Instalación independiente de Jasmine
Descargue el último lanzamiento de Jasmine desde la página de lanzamiento de Jasmine:
Ejecutando Jasmine localmente
Ejecute Jasmine en el navegador descargando el archivo zip, extrayéndolo y haciendo referencia a los archivos de la siguiente manera:
Instalación de Jasmine usando npm (Administrador de paquetes de nodo)
Configurar el directorio del proyecto para Jasmine
Create a folder and run npm init this will create an empty package.</description>
    </item>
    
    <item>
      <title>espías</title>
      <link>https://www.wikiod.com/es/jasmine/espias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jasmine/espias/</guid>
      <description>Un espía se define como una función específica de prueba que intercepta las llamadas a una función subyacente en el código de la aplicación y envía su propia implementación cuando se llama a la función subyacente para probar la interfaz en lugar de la implementación.
Espiar una función existente # Jasmine puede espiar una función existente usando la función spyOn.
let calculator = { multiply: function(a, b) { return a * b; }, square: function(a) { return this.</description>
    </item>
    
    <item>
      <title>Emparejadores personalizados</title>
      <link>https://www.wikiod.com/es/jasmine/emparejadores-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jasmine/emparejadores-personalizados/</guid>
      <description>Adición de emparejadores personalizados # Se pueden agregar emparejadores personalizados en jasmine usando la sintaxis:
jasmine.addMatchers([ toMatch: function () { return { compare: function (actual, expected) { return { pass: actual===expected, message: &amp;quot;Expected actual to match expected } } } } ]); Este emparejador ahora se puede llamar con:
expected(actual).toMatch(expected); Coincidencias negativas # Los emparejadores personalizados verán negado su valor de pase cuando usen &amp;rsquo;no&amp;rsquo;. Los comparadores personalizados pueden tener un atributo de comparación negativo para manejar explícitamente los casos en los que se desea su negación:</description>
    </item>
    
    <item>
      <title>Atributos</title>
      <link>https://www.wikiod.com/es/jasmine/atributos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jasmine/atributos/</guid>
      <description>Hay algunos términos que debe tener en cuenta antes de escribir los casos de prueba de Jasmine.
Suites Un traje es el punto de partida de los casos de prueba de Jasmine, en realidad llama a la función global jasmine describe. Puede tener dos parámetros, un valor de cadena que describe el traje y una función que implementa el traje.
Especificaciones Al igual que las suites, una especificación comienza con una cadena que puede ser el título de la suite y una función donde escribimos las pruebas.</description>
    </item>
    
  </channel>
</rss>

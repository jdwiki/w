<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kit de reloj Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/watchkit/</link>
    <description>Recent content in Kit de reloj Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/watchkit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Watchkit</title>
      <link>https://www.wikiod.com/es/watchkit/primeros-pasos-con-watchkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/watchkit/primeros-pasos-con-watchkit/</guid>
      <description>Conectando el código con la interfaz de usuario # Al igual que iOS, donde usa @IBOutlet y @IBAction, aquí también podría usarlos.
Digamos que tenemos un botón que, cuando se hace clic, cambia el texto de la etiqueta a otra cosa.
Para empezar:
Agregue un WKInterfaceLabel y un WKInterfaceLabel al InterfaceController.
Presione Ctrl y arrastre desde WKInterfaceLabel hasta InterfaceController.swift e ingrese los detalles como se muestra en la siguiente imagen para agregar una propiedad de salida:</description>
    </item>
    
    <item>
      <title>Navegación</title>
      <link>https://www.wikiod.com/es/watchkit/navegacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/watchkit/navegacion/</guid>
      <description>Nota Importante # Apple ha desaconsejado encarecidamente el uso de ambos estilos de navegación en un controlador, y esto puede resultar en el rechazo de la aplicación.
Actualmente, la forma preferida es usar un estilo jerárquico en lugar de basado en páginas, como se usa en muchas más aplicaciones de Apple que antes.
Navegación basada en páginas # Muchas aplicaciones de watchOS (como Actividad) tienen varias páginas en las que simplemente puede desplazarse entre ellas, lo cual es una muy buena manera de usar Apple Watch.</description>
    </item>
    
    <item>
      <title>WatchConectividad</title>
      <link>https://www.wikiod.com/es/watchkit/watchconectividad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/watchkit/watchconectividad/</guid>
      <description>Conectar su aplicación WatchOS a su aplicación iOS puede ser una tarea para completar cuando nunca lo ha hecho antes. Este tutorial le mostrará los fundamentos básicos para realizar esta tarea tan importante.
Configuración de iOS # Aplicación para iPhone
Importe WatchConnectivity y cumpla con WCSessionDelegate. usa el delegado de sesión estática a través de WCSession.default(). Envíe datos a la aplicación Watch usando: WCSession.default().sendMessage(mensaje, controlador de respuesta:_ controlador de error:_) El objeto del mensaje debe ser un diccionario de tipo [String:Any] Si está buscando que se devuelvan datos desde la aplicación Watch, proporcione la lógica en un cierre definido en el controlador de respuesta; de lo contrario, pase en cero.</description>
    </item>
    
  </channel>
</rss>

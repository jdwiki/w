<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de datos básicos on </title>
    <link>https://www.wikiod.com/es/docs/core-data/</link>
    <description>Recent content in Tutorial de datos básicos on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/core-data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con datos básicos</title>
      <link>https://www.wikiod.com/es/core-data/primeros-pasos-con-datos-basicos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/primeros-pasos-con-datos-basicos/</guid>
      <description>Creando tu primer modelo # Seleccione el archivo .xcdatamodeld. Notarás que no tienes entidades. Tendrás que crear uno tú mismo. En el fondo de Xcode, notará un botón que dice &amp;ldquo;Agregar entidad&amp;rdquo;, haga clic en él y tendrá una nueva entidad con la que trabajar en el proyecto. En este paso hay algunos puntos a mencionar. Primero es que cambió el nombre de su entidad aquí, la entidad recibe el nombre Person.</description>
    </item>
    
    <item>
      <title>Pila de datos básicos</title>
      <link>https://www.wikiod.com/es/core-data/pila-de-datos-basicos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/pila-de-datos-basicos/</guid>
      <description>Esta es una implementación de Core Data Stack que se coloca inicialmente en el archivo AppDelegate si el proyecto se crea con Core Data cuando se crea el proyecto. Estas funciones también pueden implementarse en clases separadas para CoreDataStack.swift. Una de las funciones principales es obtener el NSManagedObjectContext.
C objetivo # - (NSManagedObjectContext *)managedObjectContext {...} Rápido 2 # lazy var managedObjectContext: NSManagedObjectContext = {...} Rápido 3 # lazy var persistentContainer: NSPersistentContainer = {.</description>
    </item>
    
    <item>
      <title>Creación de un modelo de datos central</title>
      <link>https://www.wikiod.com/es/core-data/creacion-de-un-modelo-de-datos-central/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/creacion-de-un-modelo-de-datos-central/</guid>
      <description>Los tipos de atributos incluyen: Indefinido, Entero 16, Entero 32, Integer 64, Decimal, Double, Float, String, Boolean, Date, Binary, Data, or Transformable
Al definir una &amp;lsquo;Entidad&amp;rsquo; como abstracta, no creará ninguna instancia de esa entidad. Por ejemplo, una Persona sería abstracta y un Empleado o Cliente serían subentidades concretas.
Los atributos &amp;rsquo;transitorios&amp;rsquo; son propiedades que define como parte del modelo, pero que no se guardan en el almacén persistente como parte de los datos de una instancia de entidad.</description>
    </item>
    
    <item>
      <title>Uso de predicados</title>
      <link>https://www.wikiod.com/es/core-data/uso-de-predicados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/uso-de-predicados/</guid>
      <description>Coincidencia de una cadena exacta # let fetchRequest = NSFetchRequest(entityName: &amp;quot;Foo&amp;quot;) var thePredicate: NSPredicate? thePredicate = NSPredicate(format: &amp;quot;message == &#39;example&#39;&amp;quot;) La entidad Foo tiene un atributo de cadena message
Sustituciones # En lugar de pasar una cadena estática como criterio de un predicado. Es posible sustituir valores utilizando especificadores de formato. Hay cinco especificadores de formato:
%K es una sustitución de var arg para una ruta de clave. %@ es una sustitución de var arg para un valor de objeto, a menudo una cadena, un número, una fecha o una matriz.</description>
    </item>
    
    <item>
      <title>NSFetchedResultsControllerNSFetchedResultsController</title>
      <link>https://www.wikiod.com/es/core-data/nsfetchedresultscontrollernsfetchedresultscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/nsfetchedresultscontrollernsfetchedresultscontroller/</guid>
      <description>NSFetchedResultsController es una conexión entre la tabla de datos centrales (entidad en datos centrales, tabla en sqlite) y UITableView. UITableView se puede adjuntar a cualquier entidad de datos centrales mediante NSFetchedResultsController y UITableView se actualizará a medida que los datos centrales actualicen esa entidad/tabla.
NSFetchedResultsController para UITableView # class ConversationsTableViewController: UITableViewController, NSFetchedResultsControllerDelegate { private var fetchedResultsController: NSFetchedResultsController&amp;lt;Conversation&amp;gt;! override func viewDidLoad() { super.viewDidLoad() initializeFetchedResultsController() } private func initializeFetchedResultsController() { let request = NSFetchRequest&amp;lt;Conversation&amp;gt;(entityName: &amp;quot;Conversation&amp;quot;) let timeSort = NSSortDescriptor(key: &amp;quot;lastMessageTime&amp;quot;, ascending: false) request.</description>
    </item>
    
    <item>
      <title>Ordenar descriptores</title>
      <link>https://www.wikiod.com/es/core-data/ordenar-descriptores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/core-data/ordenar-descriptores/</guid>
      <description>Datos de pedido devueltos por solicitudes de obtención # Establezca la propiedad NSFetchRequest sortDescriptors para determinar cómo se devuelven los datos.
let fetchRequest = NSFetchRequest(entityName: &amp;quot;NAME_OF_ENTITY&amp;quot;) let sortDescriptor = NSSortDescriptor(key: &amp;quot;NAME_OF_ATTRIBUTE&amp;quot;, ascending: true) fetchRequest.sortDescriptors = [sortDescriptor] Descriptores de clasificación múltiple # También puede establecer múltiples descriptores de ordenación, para ordenar por un atributo dentro de otro. Por ejemplo, devuelva todas las entradas ordenadas por fecha y por nombre dentro de cada fecha:</description>
    </item>
    
  </channel>
</rss>

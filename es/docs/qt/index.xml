<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial Qt on </title>
    <link>https://www.wikiod.com/es/docs/qt/</link>
    <description>Recent content in Tutorial Qt on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con Qt</title>
      <link>https://www.wikiod.com/es/qt/comenzando-con-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/comenzando-con-qt/</guid>
      <description>Instalación y configuración en Windows y Linux # Descargar Qt para la versión de código abierto de Linux
Vaya a https://www.qt.io/download-open-source/ y haga clic en Descargar ahora, asegúrese de descargar el instalador de Qt para Linux.
Se descargará un archivo con el nombre qt-unified-linux-x-online.run, luego se agregará el permiso exec
chmod +x qt-unified-linux-x-online.run Recuerde cambiar &amp;lsquo;x&amp;rsquo; por la versión actual del instalador. Luego ejecuta el instalador
./qt-unified-linux-x-online.run Descargar Qt para la versión de código abierto de Windows</description>
    </item>
    
    <item>
      <title>Señales y Tragamonedas</title>
      <link>https://www.wikiod.com/es/qt/senales-y-tragamonedas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/senales-y-tragamonedas/</guid>
      <description>Las señales y las ranuras se utilizan para la comunicación entre objetos. El mecanismo de señales y ranuras es una característica central de Qt.
En la programación de GUI, cuando cambiamos un widget, a menudo queremos que se notifique a otro widget. En términos más generales, queremos que los objetos de cualquier tipo puedan comunicarse entre sí.
Los objetos emiten señales cuando cambian su estado de una manera que puede ser interesante para otros objetos.</description>
    </item>
    
    <item>
      <title>CMakeLists.txt para su proyecto Qt</title>
      <link>https://www.wikiod.com/es/qt/cmakeliststxt-para-su-proyecto-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/cmakeliststxt-para-su-proyecto-qt/</guid>
      <description>CMakeLists.txt para Qt 5 # Un archivo de proyecto CMake mínimo que usa Qt5 puede ser:
cmake_minimum_required(VERSION 2.8.11) project(myproject) find_package(Qt5 5.7.0 REQUIRED COMPONENTS Core ) set(CMAKE_AUTOMOC ON) add_executable(${PROJECT_NAME} main.cpp ) target_link_libraries(${PROJECT_NAME} Qt5::Core ) Se llama a cmake_minimum_required para establecer la versión mínima requerida para CMake. La versión mínima requerida para que este ejemplo funcione es 2.8.11; las versiones anteriores de CMake necesitan código adicional para que un objetivo use Qt.</description>
    </item>
    
    <item>
      <title>qhacer</title>
      <link>https://www.wikiod.com/es/qt/qhacer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/qhacer/</guid>
      <description>Perfil por defecto. # qmake es una herramienta de automatización de compilación, que se envía con el marco Qt. Hace un trabajo similar al de herramientas como CMake o GNU Autotools, pero está diseñado para usarse específicamente con Qt. Como tal, está bien integrado con el ecosistema Qt, especialmente con el IDE de Qt Creator.
Si inicia Qt Creator y selecciona Archivo -&amp;gt; Nuevo archivo o proyecto -&amp;gt; Aplicación -&amp;gt; Aplicación Qt Widgets, Qt Creator generará un esqueleto de proyecto para usted junto con un archivo &amp;ldquo;pro&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Subprocesamiento y concurrencia</title>
      <link>https://www.wikiod.com/es/qt/subprocesamiento-y-concurrencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/subprocesamiento-y-concurrencia/</guid>
      <description>Algunas notas que ya se mencionan en los documentos oficiales aquí y [aquí](http://doc.qt. io/qt-5/qobject.html#moveToThread):
Si un objeto tiene un padre, tiene que estar en el mismo hilo que el principal, es decir, no se puede mover a un nuevo subproceso, ni puede establecer un elemento principal en un objeto si el elemento principal y el objeto viven en diferentes subprocesos Cuando un objeto se mueve a un nuevo hilo, todos sus hijos también se mueven al nuevo hilo Solo puedes empujar objetos a un nuevo hilo.</description>
    </item>
    
    <item>
      <title>QObjeto</title>
      <link>https://www.wikiod.com/es/qt/qobjeto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/qobjeto/</guid>
      <description>La clase QObject es la clase base para todos los objetos Qt.
qobject_cast # T qobject_cast(QObject *object) Una funcionalidad que se agrega al derivar de QObject y usar la macro Q_OBJECT es la capacidad de usar qobject_cast.
Ejemplo:
class myObject : public QObject { Q_OBJECT //... }; QObject* obj = new myObject(); Para verificar si obj es un tipo myObject y convertirlo en tal en C++, generalmente puede usar un [dynamic_cast] (https://www.</description>
    </item>
    
    <item>
      <title>Qt - Manejo de bases de datos</title>
      <link>https://www.wikiod.com/es/qt/qt---manejo-de-bases-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/qt---manejo-de-bases-de-datos/</guid>
      <description>Necesitará el complemento Qt SQL correspondiente al tipo dado a QSqlDatabase::addDatabase Si no tiene el complemento SQL requerido, Qt le advertirá que no puede encontrar el controlador solicitado Si no tiene el complemento SQL requerido, deberá compilarlos desde la fuente Qt Usar una base de datos en Qt # En el archivo Project.pro agregamos:
CONFIG += sql en MainWindow.h escribimos:
#include &amp;lt;QMainWindow&amp;gt; #include &amp;lt;QSql&amp;gt; #include &amp;lt;QDebug&amp;gt; namespace Ui { class MainWindow; } class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); private slots: private: Ui::MainWindow *ui; QSqlDatabase db; }; Ahora en MainWindow.</description>
    </item>
    
    <item>
      <title>Implementación de aplicaciones Qt</title>
      <link>https://www.wikiod.com/es/qt/implementacion-de-aplicaciones-qt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/implementacion-de-aplicaciones-qt/</guid>
      <description>Desplegando en Windows # Qt proporciona una herramienta de implementación para Windows: windeployqt. La herramienta inspecciona el ejecutable de una aplicación Qt en busca de sus dependencias con los módulos Qt y crea un directorio de implementación con los archivos Qt necesarios para ejecutar el ejecutable inspeccionado. Un posible script puede verse así:
set PATH=%PATH%;&amp;lt;qt_install_prefix&amp;gt;/bin windeployqt --dir /path/to/deployment/dir /path/to/qt/application.exe Se llama al comando set para agregar el directorio bin de Qt a la variable de entorno PATH.</description>
    </item>
    
    <item>
      <title>Comunicación entre QML y C&#43;&#43;</title>
      <link>https://www.wikiod.com/es/qt/comunicacion-entre-qml-y-c-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/comunicacion-entre-qml-y-c-/</guid>
      <description>Podemos usar QML para crear aplicaciones híbridas, ya que es mucho más fácil que C++. Entonces deberíamos saber cómo se comunican entre sí.
Llamar a C++ en QML # Registrar clases de C++ en QML
En el lado de C++, imagina que tenemos una clase llamada QmlCppBridge, implementa un método llamado printHello().
class QmlCppBridge : public QObject { Q_OBJECT public: Q_INVOKABLE static void printHello() { qDebug() &amp;lt;&amp;lt; &amp;quot;Hello, QML!&amp;quot;; } }; Queremos usarlo en el lado QML.</description>
    </item>
    
    <item>
      <title>ModeloVista</title>
      <link>https://www.wikiod.com/es/qt/modelovista/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/qt/modelovista/</guid>
      <description>Una tabla simple de solo lectura para ver datos de un modelo # Este es un ejemplo simple para mostrar datos de solo lectura que son tabulares por naturaleza usando Model/View Framework de Qt. Específicamente, se utilizan Qt Objects QAbstractTableModel (subclasificados en este ejemplo) y QTableView.
Se requieren implementaciones de los métodos rowCount(), columnCount(), data() y headerData() para darle al objeto QTableView un medio para obtener información sobre los datos contenidos en el objeto QAbstractTableModel.</description>
    </item>
    
  </channel>
</rss>

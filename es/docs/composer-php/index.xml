<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Composer-php Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/composer-php/</link>
    <description>Recent content in Composer-php Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/composer-php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con compositor-php</title>
      <link>https://www.wikiod.com/es/composer-php/comenzando-con-compositor-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/composer-php/comenzando-con-compositor-php/</guid>
      <description>Instalación de Composer en Ubuntu # Antes de descargar e instalar Composer, debemos asegurarnos de que nuestro servidor tenga todas las dependencias instaladas.
Primero, actualice el caché del administrador de paquetes ejecutando:
sudo apt-get update Ahora, instalemos las dependencias. Necesitaremos curl para descargar Composer y php5-cli para instalarlo y ejecutarlo. Composer utiliza git para descargar las dependencias del proyecto. Todo se puede instalar con el siguiente comando:
sudo apt-get install curl php5-cli git Ahora vamos a instalarlo:</description>
    </item>
    
    <item>
      <title>Carga automática con compositor</title>
      <link>https://www.wikiod.com/es/composer-php/carga-automatica-con-compositor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/composer-php/carga-automatica-con-compositor/</guid>
      <description>Carga automática # Para las bibliotecas que especifican información de carga automática, Composer genera un archivo vendor/autoload.php. Simplemente puede incluir este archivo y obtendrá la carga automática de forma gratuita.
require __DIR__ . &#39;/vendor/autoload.php&#39;; Esto hace que sea realmente fácil usar código de terceros. Por ejemplo: si su proyecto depende de Monolog, puede comenzar a usar clases de él y se cargarán automáticamente.
$log = new Monolog\Logger(&#39;name&#39;); $log-&amp;gt;pushHandler(new Monolog\Handler\StreamHandler(&#39;app.log&#39;, Monolog\Logger::WARNING)); $log-&amp;gt;addWarning(&#39;Foo&#39;); Incluso puede agregar su propio código al autocargador agregando un campo autoload a composer.</description>
    </item>
    
    <item>
      <title>Cómo usar repositorios privados con Composer</title>
      <link>https://www.wikiod.com/es/composer-php/como-usar-repositorios-privados-con-composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/composer-php/como-usar-repositorios-privados-con-composer/</guid>
      <description>Parámetros # Parámetros Detalles repositorios Le dice a Composer dónde puede descargar los paquetes necesarios. tipo: vcs Le dice a Composer cómo tratar el repositorio. URL: http://&amp;hellip; Le dice a Composer dónde está el repositorio. Use la sintaxis type: &amp;quot;vcs&amp;quot; para usar repositorios privados.
Para administrar el acceso al repositorio privado mientras se desarrolla en una máquina local, use un archivo auth.json y no lo confirme en el repositorio de su proyecto.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knockout.js Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/knockout-js/</link>
    <description>Recent content in Knockout.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/knockout-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con knockout.js</title>
      <link>https://www.wikiod.com/es/knockout-js/primeros-pasos-con-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/primeros-pasos-con-knockoutjs/</guid>
      <description>Primeros pasos: ¡Hola, mundo! # Creando un documento HTML y habilitando knockout.js # Cree un archivo HTML e incluya knockout.js a través de una etiqueta &amp;lt;script&amp;gt;.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello world! (knockout.js)&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-debug.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Agregue una segunda etiqueta &amp;lt;script&amp;gt; debajo del script de eliminación. En esta etiqueta de secuencia de comandos, inicializaremos un modelo de vista y aplicaremos enlaces de datos a nuestro documento.
&amp;lt;script&amp;gt; var ViewModel = function() { this.</description>
    </item>
    
    <item>
      <title>Encuadernaciones</title>
      <link>https://www.wikiod.com/es/knockout-js/encuadernaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/encuadernaciones/</guid>
      <description>Sintaxis # &amp;lt;!-- ko if:myObservable --&amp;gt;&amp;lt;!-- /ko --&amp;gt; &amp;lt;i data-bind=&amp;quot;if:myObservable&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Qué es un enlace # Esencialmente, un enlace o un enlace de datos es una forma de vincular sus ViewModels a sus Vistas (plantillas) y viceversa. KnockoutJS utiliza un enlace de datos bidireccional, lo que significa que los cambios en su ViewModel influyen en la Vista y los cambios en su Vista pueden influir en el ViewModel.
Debajo del capó (resumen breve) # Los enlaces son solo complementos (scripts) que le permiten resolver una tarea en particular.</description>
    </item>
    
    <item>
      <title>Enlace Href</title>
      <link>https://www.wikiod.com/es/knockout-js/enlace-href/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/enlace-href/</guid>
      <description>No hay vinculación href en la biblioteca principal de KnockoutJS, razón por la cual todos los ejemplos muestran otras características de la biblioteca para obtener el mismo efecto.
Consulte también [esta pregunta de desbordamiento de pila sobre el mismo tema] (http://stackoverflow.com/q/8123142/419956).
Uso del enlace attr # &amp;lt;a data-bind=&amp;quot;attr: { href: myUrl }&amp;quot;&amp;gt;link with dynamic href&amp;lt;/a&amp;gt; ko.applyBindings({ myUrl: ko.observable(&amp;quot;http://www.stackoverflow.com&amp;quot;) }); Dado que no hay un enlace href nativo en KnockoutJS, debe usar una función diferente para obtener enlaces dinámicos.</description>
    </item>
    
    <item>
      <title>Equivalentes de enlaces AngularJS</title>
      <link>https://www.wikiod.com/es/knockout-js/equivalentes-de-enlaces-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/equivalentes-de-enlaces-angularjs/</guid>
      <description>No todo en AngularJS tiene un equivalente de KnockoutJS (por ejemplo, ngCloack o ngSrc). Hay dos soluciones principales típicamente disponibles:
Utilice el enlace genérico attr o event en su lugar. Al igual que las directivas personalizadas en AngularJS, puede escribir su propio controlador de enlace personalizado si necesita algo que no está incluido en la biblioteca base. Si prefiere la sintaxis de vinculación de AngularJS, puede considerar el uso de Knockout.</description>
    </item>
    
    <item>
      <title>Depuración de una aplicación knockout.js</title>
      <link>https://www.wikiod.com/es/knockout-js/depuracion-de-una-aplicacion-knockoutjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/depuracion-de-una-aplicacion-knockoutjs/</guid>
      <description>Comprobando el contexto de enlace de un elemento DOM # Muchos errores en los enlaces de datos knockout son causados ​​por propiedades indefinidas en un modelo de vista. Knockout tiene dos métodos prácticos para recuperar el contexto vinculante de un elemento HTML:
// Returns the binding context to which an HTMLElement is bound ko.contextFor(element); // Returns the viewmodel to which an HTMLElement is bound // similar to: ko.contextFor(element).$data ko.dataFor(element); Para descubrir rápidamente el contexto vinculante de un elemento de la interfaz de usuario, aquí hay un truco útil:</description>
    </item>
    
    <item>
      <title>Solicitudes AJAX y vinculación</title>
      <link>https://www.wikiod.com/es/knockout-js/solicitudes-ajax-y-vinculacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/solicitudes-ajax-y-vinculacion/</guid>
      <description>Ejemplo de solicitud AJAX con enlace # Página.html
&amp;lt;div data-bind=&amp;quot;foreach: blogs&amp;quot;&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;text: entryPostedDate&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;a data-bind=&amp;quot;attr: { href: blogEntryLink }, text: title&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/h3&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;span data-bind=&amp;quot;html: body&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!--- include knockout and dependencies (Jquery) ---&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;blog.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; blog.js
function vm() { var self = this; // Properties self.blogs = ko.observableArray([]); // consists of entryPostedDate, blogEntryLink, title, body var blogApi = &amp;quot;/api/blog&amp;quot;; // Load data $.</description>
    </item>
    
    <item>
      <title>Encuadernaciones personalizadas</title>
      <link>https://www.wikiod.com/es/knockout-js/encuadernaciones-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/encuadernaciones-personalizadas/</guid>
      <description>Registro vinculante # Los enlaces personalizados deben registrarse extendiendo el objeto bindHandlers de eliminación actual.
Esto se hace agregando una nueva propiedad al objeto.
ko.bindingHandlers.newBinding = { init: function(element, valueAccessor, allBindings, viewModel, bindingContext) { }, update: function(element, valueAccessor, allBindings, viewModel, bindingContext) { } }; Encuadernación de visibilidad de entrada/salida personalizada # Este ejemplo implementa un enlace personalizado que alterna la visibilidad (similar al enlace visible) existente, pero utilizará la API de desvanecimiento de jQuery para animar la transición de visible a invisible.</description>
    </item>
    
    <item>
      <title>Introducción de componentes</title>
      <link>https://www.wikiod.com/es/knockout-js/introduccion-de-componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/introduccion-de-componentes/</guid>
      <description>Los componentes permiten controles/widgets reutilizables representados por su propia vista (plantilla) y modelo de vista. Se agregaron en Knockout 3.2. Inspirado en WebComponents, Knockout permite que los componentes se definan como elementos personalizados, lo que permite el uso de marcas que se explican por sí mismas.
Barra de progreso (Boostrap) # Definición de componente
ko.components.register(&#39;progress-bar&#39;, { viewModel: function(params) { var that = this; // progress is a numeric value between 0 and 100 that.</description>
    </item>
    
    <item>
      <title>observables</title>
      <link>https://www.wikiod.com/es/knockout-js/observables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/observables/</guid>
      <description>Suscripción explícita a Observables # var person = { name: ko.observable(&#39;John&#39;) }; console.log(person.name()); console.log(&#39;Update name&#39;); person.name.subscribe(function(newValue) { console.log(&amp;quot;Updated value is &amp;quot; + newValue); }); person.name(&#39;Jane&#39;); Creando un observable # JS
// data model var person = { name: ko.observable(&#39;Jack&#39;), age: ko.observable(29) }; ko.applyBindings(person); HTML
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Name: &amp;lt;input data-bind=&#39;value: name&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Age: &amp;lt;input data-bind=&#39;value: age&#39; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Hello, &amp;lt;span data-bind=&#39;text: name&#39;&amp;gt; &amp;lt;/span&amp;gt;!&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Trabajando con enlace foreach knockout con JSON</title>
      <link>https://www.wikiod.com/es/knockout-js/trabajando-con-enlace-foreach-knockout-con-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/knockout-js/trabajando-con-enlace-foreach-knockout-con-json/</guid>
      <description>Trabajar con bucles anidados # Aquí está la estructura JSON que vamos a usar.
{ &amp;quot;employees&amp;quot;: [ { &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Doe&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Anna&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;css&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 5 } ] }, { &amp;quot;firstName&amp;quot;: &amp;quot;Peter&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Jones&amp;quot;, &amp;quot;skills&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;html&amp;quot;, &amp;quot;rating&amp;quot;: 5 }, { &amp;quot;name&amp;quot;: &amp;quot;javascript&amp;quot;, &amp;quot;rating&amp;quot;: 3 } ] } ] }; Esta estructura json se puede asignar a una variable o puede ser una respuesta de cualquier api.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de archivos MAKE on </title>
    <link>https://www.wikiod.com/es/docs/makefile/</link>
    <description>Recent content in Tutorial de archivos MAKE on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/makefile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el archivo MAKE</title>
      <link>https://www.wikiod.com/es/makefile/primeros-pasos-con-el-archivo-make/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/makefile/primeros-pasos-con-el-archivo-make/</guid>
      <description>Makefile básico # Considere escribir un &amp;ldquo;¡Hola mundo!&amp;rdquo; programa en c. Digamos que nuestro código fuente está en un archivo llamado source.c, ahora para ejecutar nuestro programa necesitamos compilarlo, normalmente en Linux (usando gcc) necesitaríamos escribir $&amp;gt; gcc source.c -o output donde salida es el nombre del ejecutable que se generará. Para un programa básico, esto funciona bien, pero a medida que los programas se vuelven más complejos, nuestro comando de compilación también puede volverse más complejo.</description>
    </item>
    
    <item>
      <title>Makefile avanzado</title>
      <link>https://www.wikiod.com/es/makefile/makefile-avanzado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/makefile/makefile-avanzado/</guid>
      <description>Construcción desde diferentes carpetas de origen a diferentes carpetas de destino # Características principales de este Makefile:
Detección automática de fuentes C en carpetas específicas Múltiples carpetas de origen Múltiples carpetas de destino correspondientes para archivos de objetos y dependencias Generación automática de reglas para cada carpeta de destino Creación de carpetas de destino cuando no existen. Gestión de dependencias con gcc: compila solo lo necesario Funciona en sistemas Unix y DOS Escrito para GNU Make Este Makefile se puede usar para construir un proyecto con este tipo de estructura:</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/es/makefile/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/makefile/variables/</guid>
      <description>Asignación de variables condicionales # El operador ?= es una extensión que se comporta como =, excepto que la asignación solo ocurre si la variable no está configurada.
x = hello x ?= world # $(x) will yield &amp;quot;hello&amp;quot; Variables automáticas # Dentro del contexto de una regla individual, Make define automáticamente una serie de variables especiales. Estas variables pueden tener un valor diferente para cada regla en un archivo MAKE y están diseñadas para simplificar la escritura de reglas.</description>
    </item>
    
    <item>
      <title>Objetivo .PHONY</title>
      <link>https://www.wikiod.com/es/makefile/objetivo-phony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/makefile/objetivo-phony/</guid>
      <description>Uso de .PHONY para objetivos que no sean archivos # Utilice .PHONY para especificar los objetivos que no son archivos, por ejemplo, clean o mrproper.
Buen ejemplo
.PHONY: clean clean: rm *.o temp Mal ejemplo
clean: rm *.o temp En el buen ejemplo, make sabe que clean no es un archivo, por lo tanto, no buscará si está actualizado o no y ejecutará la receta.
En el mal ejemplo make buscará un archivo llamado clean.</description>
    </item>
    
    <item>
      <title>Reglas de patrones GNU</title>
      <link>https://www.wikiod.com/es/makefile/reglas-de-patrones-gnu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/makefile/reglas-de-patrones-gnu/</guid>
      <description>Objetivos que coinciden con varias reglas de patrón # Si un destino coincide con varias reglas de patrón, make utilizará aquella cuyos requisitos previos existan o puedan construirse. Por ejemplo:
%.o: %.c $(CC) $(CFLAGS) -c $&amp;lt; -o $@ %.o: %.s $(AS) $(ASFLAGS) $&amp;lt; -o $@ Compilará foo.c a foo.o o ensamblará foo.s a foo.o, dependiendo de cuál de foo.c o foo.s exista.
Si varias reglas tienen requisitos previos que existen o se pueden construir, make usará la regla que coincida con la raíz más corta.</description>
    </item>
    
  </channel>
</rss>

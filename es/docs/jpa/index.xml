<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/jpa/</link>
    <description>Recent content in jpa Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con jpa</title>
      <link>https://www.wikiod.com/es/jpa/comenzando-con-jpa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/comenzando-con-jpa/</guid>
      <description>Ejemplo de persistencia mínima.xml # Hibernate (y base de datos H2 integrada) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_1.xsd&amp;quot; version=&amp;quot;2.1&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;persistenceUnit&amp;quot;&amp;gt; &amp;lt;provider&amp;gt;org.hibernate.ejb.HibernatePersistence&amp;lt;/provider&amp;gt; &amp;lt;class&amp;gt;my.application.entities.MyEntity&amp;lt;/class&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.driver&amp;quot; value=&amp;quot;org.h2.Driver&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.url&amp;quot; value=&amp;quot;jdbc:h2:data/myDB.db&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.user&amp;quot; value=&amp;quot;sa&amp;quot; /&amp;gt; &amp;lt;!-- DDL change options --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot; value=&amp;quot;org.hibernate.dialect.H2Dialect&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.flushMode&amp;quot; value=&amp;quot;FLUSH_AUTO&amp;quot; /&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt; &amp;lt;/persistence&amp;gt; Eclipselink (y base de datos H2 integrada) # &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;persistence xmlns=&amp;quot;http://java.sun.com/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Mapeo básico</title>
      <link>https://www.wikiod.com/es/jpa/mapeo-basico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/mapeo-basico/</guid>
      <description>Parámetros # Anotación Detalles @Id Marca el campo/columna como la clave de la entidad @Básico Marca el campo solicitado para mapear como un tipo basic. Esto es aplicable a los tipos primitivos y sus contenedores, String, Date y Calendar. La anotación es en realidad opcional si no se proporcionan parámetros, pero un buen estilo dictaría que sus intenciones sean explícitas. @Transitorio Los campos marcados como transitorios no se consideran para la persistencia, al igual que la palabra clave &amp;ldquo;transitoria&amp;rdquo; para la serialización.</description>
    </item>
    
    <item>
      <title>Relación de uno a muchos</title>
      <link>https://www.wikiod.com/es/jpa/relacion-de-uno-a-muchos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/relacion-de-uno-a-muchos/</guid>
      <description>Parámetros # Anotación Propósito @TableGenerator Especifica el nombre del generador y el nombre de la tabla donde se puede encontrar el generador @ValorGenerado Especifica la estrategia de generación y hace referencia al nombre del generador @MuchosParaUno Especifica una relación de muchos a uno entre empleado y departamento @OneToMany(mappedBy=&amp;ldquo;departamento&amp;rdquo;) crea una relación bidireccional entre el empleado y el departamento simplemente haciendo referencia a la anotación @ManyToOne en la entidad Empleado Relación uno a muchos # El mapeo de uno a muchos es generalmente simplemente una relación bidireccional de mapeo de muchos a uno.</description>
    </item>
    
    <item>
      <title>Estrategia de herencia unida</title>
      <link>https://www.wikiod.com/es/jpa/estrategia-de-herencia-unida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/estrategia-de-herencia-unida/</guid>
      <description>Parámetros # Anotación Propósito @herencia Especifica el tipo de estrategia de herencia utilizada @ColumnaDiscriminadora Especifica una columna en la base de datos que se usará para identificar diferentes entidades en función de cierta ID asignada a cada entidad @MapeadoSuperClase Las superclases mapeadas no son persistentes y solo se usan para mantener el estado de sus subclases. Por lo general, las clases de Java abstractas se marcan con @MapperSuperClass Estrategia de herencia unida # Un diagrama de clase de muestra basado en el cual veremos la implementación de JPA.</description>
    </item>
    
    <item>
      <title>Mapeo uno a uno</title>
      <link>https://www.wikiod.com/es/jpa/mapeo-uno-a-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/mapeo-uno-a-uno/</guid>
      <description>Parámetros # Anotación Propósito @TableGenerator Especifica el nombre del generador y el nombre de la tabla donde se puede encontrar el generador @ValorGenerado Especifica la estrategia de generación y hace referencia al nombre del generador @OneToOne Especifica la relación uno a uno entre el empleado y el escritorio, aquí el empleado es el propietario de la relación asignado por Este elemento se proporciona en el reverso de la relación. Esto permite una relación bidireccional Relación uno a uno entre el empleado y el escritorio # Considere una relación bidireccional uno a uno entre el empleado y el escritorio.</description>
    </item>
    
    <item>
      <title>Relaciones entre entidades</title>
      <link>https://www.wikiod.com/es/jpa/relaciones-entre-entidades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/relaciones-entre-entidades/</guid>
      <description>Conceptos básicos de las relaciones entre entidades # Una clave externa puede ser una o más columnas que hacen referencia a una clave única, generalmente la clave principal, en otra tabla.
Una clave externa y la clave principal principal a la que hace referencia deben tener el mismo número y tipo de campos.
Las claves foráneas representan relaciones de una columna o columnas en una tabla a una columna o columnas en otra tabla.</description>
    </item>
    
    <item>
      <title>Mapeo de muchos a muchos</title>
      <link>https://www.wikiod.com/es/jpa/mapeo-de-muchos-a-muchos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/mapeo-de-muchos-a-muchos/</guid>
      <description>Un mapeo ManyToMany describe una relación entre entidades donde ambas pueden estar relacionadas con más de una instancia de cada una, y se define mediante la anotación @ManyToMany.
A diferencia de @OneToMany donde se puede usar una columna de clave foránea en la tabla de la entidad, ManyToMany requiere una tabla de unión, que asigna las entidades entre sí.
Parámetros # Anotación Propósito @TableGenerator Define un generador de clave principal al que se puede hacer referencia por su nombre cuando se especifica un elemento generador para la anotación GeneratedValue @GeneratedValue Proporciona la especificación de estrategias de generación para los valores de las claves primarias.</description>
    </item>
    
    <item>
      <title>Tabla por estrategia de herencia de clase concreta</title>
      <link>https://www.wikiod.com/es/jpa/tabla-por-estrategia-de-herencia-de-clase-concreta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/tabla-por-estrategia-de-herencia-de-clase-concreta/</guid>
      <description>Vehicle, TransportationVehicle y PassengerVehicle son abstractos clases y no tendrán una tabla separada en la base de datos. Truck, Car y Bike son clases concretas, por lo que se asignarán a tablas correspondientes. Estas tablas deben incluir todos los campos para clases anotadas con @MappedSuperClass porque no tienen tablas correspondientes en la base de datos. Entonces, la tabla Truck tendrá columnas para almacenar campos heredados de TransporteVehículo y Vehículo. De manera similar, Car and Bike tendrá columnas para almacenar campos heredados de PassengerVehicle y Vehicle.</description>
    </item>
    
    <item>
      <title>Estrategia de herencia de tabla única</title>
      <link>https://www.wikiod.com/es/jpa/estrategia-de-herencia-de-tabla-unica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/estrategia-de-herencia-de-tabla-unica/</guid>
      <description>Parámetros # Anotación Propósito @herencia Especifica el tipo de estrategia de herencia utilizada @ColumnaDiscriminadora Especifica una columna en la base de datos que se usará para identificar diferentes entidades en función de cierta ID asignada a cada entidad @MapeadoSuperClase Las superclases mapeadas no son persistentes y solo se usan para mantener el estado de sus subclases. Por lo general, las clases de Java abstractas se marcan con @MapperSuperClass @ValorDiscriminador Un valor especificado en la columna definida por @DiscriminatorColumn.</description>
    </item>
    
    <item>
      <title>Mapeo de muchos a uno</title>
      <link>https://www.wikiod.com/es/jpa/mapeo-de-muchos-a-uno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/jpa/mapeo-de-muchos-a-uno/</guid>
      <description>Parámetros # Columna Columna @TableGenerator Utiliza la estrategia del generador de tablas para la creación automática de ID @ValorGenerado Especifica que el valor aplicado a los campos es un valor generado @Id Anota el campo como identificador @MuchosParaUno Especifica la relación Muchos a Uno entre Empleado y Departamento. Esta anotación está marcada en muchos lados. es decir, varios empleados pertenecen a un solo departamento. Por lo tanto, el Departamento se anota con @ManyToOne en la entidad Empleado.</description>
    </item>
    
  </channel>
</rss>

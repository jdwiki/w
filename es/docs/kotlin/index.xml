<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Kotlin on </title>
    <link>https://www.wikiod.com/es/docs/kotlin/</link>
    <description>Recent content in Tutorial de Kotlin on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Kotlin</title>
      <link>https://www.wikiod.com/es/kotlin/primeros-pasos-con-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/primeros-pasos-con-kotlin/</guid>
      <description>Hola Mundo # Todos los programas de Kotlin comienzan en la función principal. Aquí hay un ejemplo de un programa simple de Kotlin &amp;ldquo;Hello World&amp;rdquo;:
package my.program fun main(args: Array&amp;lt;String&amp;gt;) { println(&amp;quot;Hello, world!&amp;quot;) } Coloque el código anterior en un archivo llamado Main.kt (este nombre de archivo es completamente arbitrario)
Al apuntar a la JVM, la función se compilará como un método estático en una clase con un nombre derivado del nombre del archivo.</description>
    </item>
    
    <item>
      <title>Bucles en Kotlin</title>
      <link>https://www.wikiod.com/es/kotlin/bucles-en-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/bucles-en-kotlin/</guid>
      <description>En Kotlin, los bucles se compilan en bucles optimizados siempre que sea posible. Por ejemplo, si itera sobre un rango de números, el código de bytes se compilará en un bucle correspondiente basado en valores int simples para evitar la sobrecarga de la creación de objetos.
Bucle sobre iterables # Puede recorrer cualquier iterable utilizando el bucle for estándar:
val list = listOf(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;, &amp;quot;!&amp;quot;) for(str in list) { print(str) } Muchas cosas en Kotlin son iterables, como rangos de números:</description>
    </item>
    
    <item>
      <title>Equivalentes de flujo de Java 8</title>
      <link>https://www.wikiod.com/es/kotlin/equivalentes-de-flujo-de-java-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/equivalentes-de-flujo-de-java-8/</guid>
      <description>Kotlin proporciona muchos métodos de extensión en colecciones e iterables para aplicar operaciones de estilo funcional. Un tipo de Secuencia dedicado permite la composición perezosa de varias operaciones de este tipo.
Sobre la pereza # Si desea realizar un proceso perezoso de una cadena, puede convertirla en una Secuencia usando asSequence() antes de la cadena. Al final de la cadena de funciones, generalmente terminas con una Secuencia también. Luego puede usar toList(), toSet(), toMap() o alguna otra función para materializar la Secuencia al final.</description>
    </item>
    
    <item>
      <title>enumeración</title>
      <link>https://www.wikiod.com/es/kotlin/enumeracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/enumeracion/</guid>
      <description>Al igual que en Java, las clases de enumeración en Kotlin tienen métodos sintéticos que permiten enumerar las constantes de enumeración definidas y obtener una constante de enumeración por su nombre. Las firmas de estos métodos son las siguientes (suponiendo que el nombre de la clase de enumeración sea EnumClass):
EnumClass.valueOf(value: String): EnumClass EnumClass.values(): Array&amp;lt;EnumClass&amp;gt; El método valueOf() lanza una IllegalArgumentException si el nombre especificado no coincide con ninguna de las constantes de enumeración definidas en la clase.</description>
    </item>
    
    <item>
      <title>Parámetros Vararg en Funciones</title>
      <link>https://www.wikiod.com/es/kotlin/parametros-vararg-en-funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/parametros-vararg-en-funciones/</guid>
      <description>Sintaxis # Palabra clave Vararg: vararg se usa en una declaración de método para indicar que se aceptará un número variable de parámetros. Operador de propagación: un asterisco (*) antes de una matriz que se usa en las llamadas a funciones para &amp;ldquo;desplegar&amp;rdquo; el contenido en parámetros individuales. Conceptos básicos: uso de la palabra clave vararg # Defina la función usando la palabra clave vararg.
fun printNumbers(vararg numbers: Int) { for (number in numbers) { println(number) } } Ahora puede pasar tantos parámetros (del tipo correcto) a la función como desee.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://www.wikiod.com/es/kotlin/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/interfaces/</guid>
      <description>Consulte también: Documentación de referencia de Kotlin para interfaces: Interfaces
Interfaz con implementaciones por defecto # Una interfaz en Kotlin puede tener implementaciones predeterminadas para funciones:
interface MyInterface { fun withImplementation() { print(&amp;quot;withImplementation() was called&amp;quot;) } } Las clases que implementen tales interfaces podrán usar esas funciones sin volver a implementar
class MyClass: MyInterface { // No need to reimplement here } val instance = MyClass() instance.withImplementation() Propiedades # Las implementaciones predeterminadas también funcionan para captadores y definidores de propiedades:</description>
    </item>
    
    <item>
      <title>Métodos de extensión</title>
      <link>https://www.wikiod.com/es/kotlin/metodos-de-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/metodos-de-extension/</guid>
      <description>Sintaxis # fun TypeName.extensionName(parámetros, &amp;hellip;) { /* cuerpo */ } // Declaración fun &amp;lt;T: Any&amp;gt; TypeNameWithGenerics&amp;lt;T&amp;gt;.extensionName(params, &amp;hellip;) { /* cuerpo */ } // Declaración con Genéricos myObj.extensionName(args, &amp;hellip;) // invocación Las extensiones se resuelven estáticamente. Esto significa que el método de extensión a utilizar está determinado por el tipo de referencia de la variable a la que accede; no importa cuál sea el tipo de variable en tiempo de ejecución, siempre se llamará al mismo método de extensión.</description>
    </item>
    
    <item>
      <title>Extensiones de Kotlin para Android</title>
      <link>https://www.wikiod.com/es/kotlin/extensiones-de-kotlin-para-android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/extensiones-de-kotlin-para-android/</guid>
      <description>Kotlin tiene una inyección de vista incorporada para Android, lo que permite omitir el enlace manual o la necesidad de marcos como ButterKnife. Algunas de las ventajas son una sintaxis más agradable, mejor escritura estática y, por lo tanto, menos propenso a errores.
Uso de vistas # Suponiendo que tenemos una actividad con un diseño de ejemplo llamado actividad_principal.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt; &amp;lt;Button android:id=&amp;quot;@+id/my_button&amp;quot; android:layout_width=&amp;quot;wrap_content&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:text=&amp;quot;My button&amp;quot;/&amp;gt; &amp;lt;/LinearLayout&amp;gt; Podemos usar las extensiones de Kotlin para llamar al botón sin ningún enlace adicional como este:</description>
    </item>
    
    <item>
      <title>Declaraciones condicionales</title>
      <link>https://www.wikiod.com/es/kotlin/declaraciones-condicionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/declaraciones-condicionales/</guid>
      <description>En contraste con el switch de Java, la declaración when no tiene un comportamiento fallido. Esto significa que si una rama coincide, el flujo de control regresa después de su ejecución y no se requiere una declaración de &amp;ldquo;ruptura&amp;rdquo;. Si desea combinar los comportamientos de varios argumentos, puede escribir varios argumentos separados por comas:
when (x) { &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; -&amp;gt; println(&amp;quot;either foo or bar&amp;quot;) else -&amp;gt; println(&amp;quot;didn&#39;t match anything&amp;quot;) } Coincidencia de argumentos de sentencia when # Cuando se le da un argumento, la declaración when compara el argumento con las ramas en secuencia.</description>
    </item>
    
    <item>
      <title>Excepciones</title>
      <link>https://www.wikiod.com/es/kotlin/excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/kotlin/excepciones/</guid>
      <description>Atrapar la excepción con try-catch-finally # La captura de excepciones en Kotlin se parece mucho a Java
try { doSomething() } catch(e: MyException) { handle(e) } finally { cleanup() } También puede capturar múltiples excepciones
try { doSomething() } catch(e: FileSystemException) { handle(e) } catch(e: NetworkException) { handle(e) } catch(e: MemoryException) { handle(e) } finally { cleanup() } try también es una expresión y puede devolver un valor
val s: String?</description>
    </item>
    
  </channel>
</rss>

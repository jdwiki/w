<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de scipy on </title>
    <link>https://www.wikiod.com/es/docs/scipy/</link>
    <description>Recent content in Tutorial de scipy on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con scipy</title>
      <link>https://www.wikiod.com/es/scipy/primeros-pasos-con-scipy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scipy/primeros-pasos-con-scipy/</guid>
      <description>Convierta una matriz dispersa en una matriz densa usando SciPy # from scipy.sparse import csr_matrix A = csr_matrix([[1,0,2],[0,3,0]]) &amp;gt;&amp;gt;&amp;gt;A &amp;lt;2x3 sparse matrix of type &#39;&amp;lt;type &#39;numpy.int64&#39;&amp;gt;&#39; with 3 stored elements in Compressed Sparse Row format&amp;gt; &amp;gt;&amp;gt;&amp;gt; A.todense() matrix([[1, 0, 2], [0, 3, 0]]) &amp;gt;&amp;gt;&amp;gt; A.toarray() array([[1, 0, 2], [0, 3, 0]]) Manipulación de imágenes con Scipy (cambio de tamaño de imagen básico) # SciPy proporciona funciones básicas de manipulación de imágenes.</description>
    </item>
    
    <item>
      <title>Suavizado de una señal</title>
      <link>https://www.wikiod.com/es/scipy/suavizado-de-una-senal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scipy/suavizado-de-una-senal/</guid>
      <description>Usando un filtro Savitzky-Golay # Dada una señal ruidosa:
import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 plt.plot(x,y) plt.show() uno puede usar un filtro Savitzky–Golay usando el [scipy.signal.savgol_filter()](http:/ /scipy .github.io/devdocs/generated/scipy.signal.saving_filter.html#scipy.signal.saving_filter) método:
import scipy.signal import numpy as np import matplotlib.pyplot as plt np.random.seed(1) x = np.linspace(0,2*np.pi,100) y = np.sin(x) + np.random.random(100) * 0.2 yhat = scipy.signal.savgol_filter(y, 51, 3) # window size 51, polynomial order 3 plt.</description>
    </item>
    
    <item>
      <title>Ajuste de funciones con scipy.optimize curve_fit</title>
      <link>https://www.wikiod.com/es/scipy/ajuste-de-funciones-con-scipyoptimize-curve_fit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scipy/ajuste-de-funciones-con-scipyoptimize-curve_fit/</guid>
      <description>En las aplicaciones científicas, a menudo se requiere ajustar una función que describa la ocurrencia esperada de puntos de datos en datos reales. Un posible optimizador para esta tarea es curve_fit de scipy.optimize. A continuación, se proporciona un ejemplo de aplicación de curve_fit.
Ajustar una función a los datos de un histograma # Supongamos que hay un pico de datos distribuidos normalmente (gaussianos) (media: 3,0, desviación estándar: 0,3) en un fondo que decae exponencialmente.</description>
    </item>
    
    <item>
      <title>Cómo escribir una función jacobiana para optimizar.minimizar</title>
      <link>https://www.wikiod.com/es/scipy/como-escribir-una-funcion-jacobiana-para-optimizarminimizar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scipy/como-escribir-una-funcion-jacobiana-para-optimizarminimizar/</guid>
      <description>Sintaxis # importar numpy como np desde scipy.optimize import _minimize del especial de importación scipy importar matplotlib.pyplot como plt Tenga en cuenta el guión bajo antes de &amp;lsquo;minimizar&amp;rsquo; al importar desde scipy.optimize; &amp;lsquo;_minimizar&amp;rsquo; Además, probé las funciones de este enlace antes de hacer esta sección, y descubrí que tenía menos problemas/funcionaba más rápido si importaba &amp;rsquo;especial&amp;rsquo; por separado. La función de Rosenbrock en la página vinculada era incorrecta: primero debe configurar la barra de colores; He publicado un código alternativo, pero creo que podría ser mejor.</description>
    </item>
    
    <item>
      <title>rv_continuous para Distribución con Parámetros</title>
      <link>https://www.wikiod.com/es/scipy/rv_continuous-para-distribucion-con-parametros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/scipy/rv_continuous-para-distribucion-con-parametros/</guid>
      <description>Binomial negativo sobre reales positivos # from scipy.stats import rv_continuous import numpy class Neg_exp(rv_continuous): def _cdf(self, x, lamda): return 1-numpy.exp(-lamda*x) neg_exp = Neg_exp(name=&amp;quot;Negative exponential&amp;quot;, a=0) print (neg_exp.pdf(0,.5)) print (neg_exp.pdf(5,.5)) print (neg_exp.cdf(5,.5)) print (neg_exp.stats(0.5)) print (neg_exp.rvs(0.5)) Es esencial definir _pdf o _cdf porque scipy infiere los parámetros de la otra función (que usted no define), y el orden de estos parámetros en cualquier llamada de función que realice, a partir de su definición.</description>
    </item>
    
  </channel>
</rss>

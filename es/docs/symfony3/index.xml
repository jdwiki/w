<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Symfony3 on </title>
    <link>https://www.wikiod.com/es/docs/symfony3/</link>
    <description>Recent content in Tutorial de Symfony3 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/symfony3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con Symfony3</title>
      <link>https://www.wikiod.com/es/symfony3/primeros-pasos-con-symfony3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/primeros-pasos-con-symfony3/</guid>
      <description>3. Sistemas Windows # Debe agregar php a su variable de entorno de ruta. Siga estos pasos:
Windows 7:
Haga clic derecho en un icono de Mi PC Haga clic en Propiedades Haga clic en Configuración avanzada del sistema en el panel de navegación izquierdo. Haga clic en la pestaña Avanzado Haga clic en el botón Variables de entorno En la sección Variables del sistema, seleccione Ruta (se distingue entre mayúsculas y minúsculas) y haga clic en el botón Editar Agregue un punto y coma (;) al final de la cadena, luego agregue la ruta completa del sistema de archivos de su instalación de PHP (por ejemplo, C:\Program Files\PHP) Siga haciendo clic en Aceptar, etc.</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/symfony3/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/enrutamiento/</guid>
      <description>Una ruta es como asignar una URL a una acción (función) en una clase de controlador. El siguiente tema se centrará en la creación de rutas, pasando parámetros a la clase Controller a través de una ruta, ya sea usando YAML o anotación.
Es útil ver lo que genera Symfony framework, este proporciona herramientas para ver todas las rutas de una aplicación específica.
Desde Symfony Doc, use (en un shell):</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/symfony3/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/pruebas/</guid>
      <description>Pruebas simples en Symfony3 # Prueba de unidad
Las pruebas unitarias se utilizan para garantizar que su código no tenga ningún error de sintaxis y para probar la lógica de su código para que funcione como esperaba. Ejemplo rápido:
src/AppBundle/Calculator/BillCalculator.php
&amp;lt;?php namespace AppBundle\Calculator; use AppBundle\Calculator\TaxCalculator; class BillCalculator { private $taxCalculator; public function __construct(TaxCalculator $taxCalculator) { $this-&amp;gt;taxCalculator = $taxCalculator; } public function calculate($products) { $totalPrice = 0; foreach ($products as $product) { $totalPrice += $product[&#39;price&#39;]; } $tax = $this-&amp;gt;taxCalculator-&amp;gt;calculate($totalPrice); return $totalPrice + $tax; } } src/AppBundle/Calculator/TaxCalculator.</description>
    </item>
    
    <item>
      <title>Trabajar con servicios web</title>
      <link>https://www.wikiod.com/es/symfony3/trabajar-con-servicios-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/trabajar-con-servicios-web/</guid>
      <description>API de descanso # Previamente escribí [documentación][1] en este sitio para describir cómo crear servicios web en Symfony
Volveré a escribir un tutorial para la versión symfony &amp;gt;= 3.
Creemos que tenemos un servidor web instalado en una versión configurada de [Symfony Framework][2]. También debe tener [compositor][3] (administrador de paquetes php) instalado.
Para simplificarlo, si tiene Composer instalado, escriba esto en una terminal/símbolo del sistema:
composer create-project symfony/framework-standard-edition example &amp;quot;3.1.*&amp;quot; Esto creará un nuevo directorio llamado &amp;ldquo;ejemplo&amp;rdquo; en el directorio actual, con una instalación estándar de Symfony Framework.</description>
    </item>
    
    <item>
      <title>Formas Dinámicas</title>
      <link>https://www.wikiod.com/es/symfony3/formas-dinamicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/formas-dinamicas/</guid>
      <description>Cómo extender ChoiceType, EntityType y DocumentType para cargar opciones con AJAX. # En Symfony, el ChoiceType integrado (y EntityType o DocumentType que lo amplía), básicamente funciona con una lista de opciones constante.
Si desea que funcione con llamadas ajax, debe cambiarlas para aceptar las opciones adicionales enviadas.
¿Cómo empezar con una lista de opciones vacía? Cuando construyas tu formulario, simplemente establece la opción choices en un array() vacío:
namespace AppBundle\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\Extension\Core\Type\ChoiceType; class FooType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -&amp;gt;add(&#39;tag&#39;, ChoiceType::class, array(&#39;choices&#39;=&amp;gt;array())); } } Entonces obtendrá una entrada de selección vacía, sin opciones.</description>
    </item>
    
    <item>
      <title>Despachador de eventos</title>
      <link>https://www.wikiod.com/es/symfony3/despachador-de-eventos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/despachador-de-eventos/</guid>
      <description>Sintaxis # $dispatcher-&amp;gt;dispatch(string $eventName, Event $event);
$dispatcher-&amp;gt;addListener(string $eventName, callable $listener, int $priority = 0);
$despachador-&amp;gt;addSubscriber(EventSubscriberInterface $suscriptor);
A menudo es mejor usar una única instancia de EventDispatcher en su aplicación que inyecta en los objetos que necesitan activar eventos.
Es una buena práctica tener una única ubicación donde administre la configuración y agregue detectores de eventos a su EventDispatcher. El marco de Symfony utiliza el contenedor de inyección de dependencia.
Estos patrones le permitirán cambiar fácilmente sus detectores de eventos sin necesidad de cambiar el código de ningún módulo que envíe eventos.</description>
    </item>
    
    <item>
      <title>Validación</title>
      <link>https://www.wikiod.com/es/symfony3/validacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/validacion/</guid>
      <description>De hecho, la validación de formularios se basa en un componente, denominado &amp;ldquo;Componente de validación&amp;rdquo;.
A menudo puede usar el servicio dedicado si no tiene que mostrar un formulario en una plantilla. Como las API. Puede validar los datos de la misma manera, así:
Por ejemplo, basado en el documento de Symfony :
$validator = $this-&amp;gt;get(&#39;validator&#39;); $errors = $validator-&amp;gt;validate($author); if (count($errors) &amp;gt; 0) { /* * Uses a __toString method on the $errors variable which is a * ConstraintViolationList object.</description>
    </item>
    
    <item>
      <title>Entidades declarantes</title>
      <link>https://www.wikiod.com/es/symfony3/entidades-declarantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/entidades-declarantes/</guid>
      <description>Declarar una entidad Symfony como YAML # AppBundle/Entidad/Persona.php
&lt;?php namespace AppBundle\Entity; /** * Person */ class Person { /** * @var int */ private $id; /** * @var string */ private $name; /** * @var int */ private $age; /** * Get id * * @return int */ public function getId() { return $this-&gt;id; } /** * Set name * * @param string $name * * @return Person */ public function setName($name) { $this-&gt;name = $name; return $this; } /** * Get name * * @return string */ public function getName() { return $this-&gt;name; } /** * Set age * * @param integer $age * * @return Person */ public function setAge($age) { $this-&gt;age = $age; return $this; } /** * Get age * * @return int */ public function getAge() { return $this-&gt;age; } } AppBundle/Resources/config/doctrine/Person.</description>
    </item>
    
    <item>
      <title>Gestión de activos con Assetic</title>
      <link>https://www.wikiod.com/es/symfony3/gestion-de-activos-con-assetic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/gestion-de-activos-con-assetic/</guid>
      <description>Al utilizar Assetic Bundle, de acuerdo con la documentación de Symfony, tenga en cuenta lo siguiente:
A partir de Symfony 2.8, Assetic ya no se incluye de forma predeterminada en Symfony Standard Edition. Antes de usar cualquiera de sus funciones, instala AsseticBundle ejecutando este comando de consola en tu proyecto:
$ compositor requiere symfony/assetic-bundle
Hay otros pasos que tienes que tomar. Para más información ir a: http://symfony.com/doc/current/assetic/asset_management.html
Parámetros # Nombre Ejemplo Camino &amp;lsquo;static/images/logo/logo-default.</description>
    </item>
    
    <item>
      <title>Configuración</title>
      <link>https://www.wikiod.com/es/symfony3/configuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/symfony3/configuracion/</guid>
      <description>Ejemplos y buenas prácticas para configurar tu aplicación Symfony que no están en la documentación oficial.
Use el nombre de clase completo (FQCN) como ID de servicio # En muchos ejemplos, encontrará una identificación de servicio como &amp;lsquo;acme.demo.service.id&amp;rsquo; (una cadena con puntos). Tu services.yml se verá así:
services: acme.demo.service.id: class: Acme\DemoBundle\Services\DemoService arguments: [&amp;quot;@doctrine.orm.default_entity_manager&amp;quot;, &amp;quot;@cache&amp;quot;] En su controlador, puede usar este servicio:
$service = $this-&amp;gt;get(&#39;acme.demo.service.id&#39;); Si bien no hay problema con esto, puede usar un Nombre de clase completamente calificado (FQCN) como ID de servicio:</description>
    </item>
    
  </channel>
</rss>

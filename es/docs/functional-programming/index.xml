<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de programación funcional on </title>
    <link>https://www.wikiod.com/es/docs/functional-programming/</link>
    <description>Recent content in Tutorial de programación funcional on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con la programación funcional</title>
      <link>https://www.wikiod.com/es/functional-programming/primeros-pasos-con-la-programacion-funcional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/functional-programming/primeros-pasos-con-la-programacion-funcional/</guid>
      <description>Funciones puras # Las funciones puras son independientes y no tienen efectos secundarios. Dado el mismo conjunto de entradas, una función pura siempre devolverá el mismo valor de salida.
La siguiente función es pura:
function pure(data) { return data.total + 3; } Sin embargo, esta función no es pura ya que modifica una variable externa:
function impure(data) { data.total += 3; return data.total; } Ejemplo:
data = { total: 6 }; pure(data); // outputs: 9 impure(data); // outputs: 9 (but now data.</description>
    </item>
    
    <item>
      <title>Bucles por funciones recursivas y recursivas de cola</title>
      <link>https://www.wikiod.com/es/functional-programming/bucles-por-funciones-recursivas-y-recursivas-de-cola/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/functional-programming/bucles-por-funciones-recursivas-y-recursivas-de-cola/</guid>
      <description>Como ya sabe, en aras de la inmutabilidad, no puede procesar datos utilizando bucles for y while. Así que tenemos funciones recursivas para rescatar.
no recursivo (donde la inmutabilidad no es una preocupación) # function sum(numbers) { var total = 0; for (var i = numbers.length - 1; i &amp;gt;= 0; i--) { total += numbers[i]; } return total; } Es un código de procedimiento con mutaciones (sobre total).
recursivo para rescatar # function sum(numbers) { if(numbers.</description>
    </item>
    
  </channel>
</rss>

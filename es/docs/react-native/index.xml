<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de reacción nativa on </title>
    <link>https://www.wikiod.com/es/docs/react-native/</link>
    <description>Recent content in Tutorial de reacción nativa on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/react-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con react-native</title>
      <link>https://www.wikiod.com/es/react-native/primeros-pasos-con-react-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/primeros-pasos-con-react-native/</guid>
      <description>Configuración para Mac # Instalando el administrador de paquetes Homebrew brew
Péguelo en un indicador de Terminal.
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Instalando el IDE de Xcode
Descárguelo usando el enlace a continuación o encuéntrelo en Mac App Store
https://developer.apple.com/download/
NOTA: Si tiene Xcode-beta.app instalado junto con la versión de producción de Xcode.app, asegúrese de estar usando la versión de producción de la herramienta xcodebuild. Puedes configurarlo con:
sudo xcode-select -switch /Aplicaciones/Xcode.</description>
    </item>
    
    <item>
      <title>Android - Botón Atrás de hardware</title>
      <link>https://www.wikiod.com/es/react-native/android---boton-atras-de-hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/android---boton-atras-de-hardware/</guid>
      <description>Detectar pulsaciones del botón Atrás de hardware en Android # BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() { if (!this.onMainScreen()) { this.goBack(); return true; } return false; }); Nota: this.onMainScreen() y this.goBack() no son funciones integradas, también debe implementarlas. (https://github.com/immidi/react-native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712)
Ejemplo de BackAndroid junto con Navigator # Este es un ejemplo de cómo usar BackAndroid de React Native junto con Navigator.
componentWillMount registra un detector de eventos para manejar los toques en el botón Atrás. Comprueba si hay otra vista en la pila de historial y, si la hay, vuelve; de ​​lo contrario, mantiene el comportamiento predeterminado.</description>
    </item>
    
    <item>
      <title>Fuentes personalizadas</title>
      <link>https://www.wikiod.com/es/react-native/fuentes-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/fuentes-personalizadas/</guid>
      <description>Fuentes personalizadas para Android e IOS # Cree una carpeta en la carpeta de su proyecto y agréguele sus fuentes. Ejemplo:
Ejemplo: Aquí agregamos una carpeta en la raíz llamada &amp;ldquo;mystuff&amp;rdquo;, luego &amp;ldquo;fonts&amp;rdquo;, y dentro de ella colocamos nuestras fuentes:
Agregue el siguiente código en package.json.
{ ... &amp;quot;rnpm&amp;quot;: { &amp;quot;assets&amp;quot;: [ &amp;quot;path/to/fontfolder&amp;quot; ] }, ... } Para el ejemplo anterior, nuestro paquete.json ahora tendría una ruta de &amp;ldquo;mis cosas/fuentes&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Accesorios</title>
      <link>https://www.wikiod.com/es/react-native/accesorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/accesorios/</guid>
      <description>Los accesorios, o propiedades, son datos que se pasan a componentes secundarios en una aplicación React. Los componentes de React representan elementos de la interfaz de usuario en función de sus accesorios y su estado interno. Los accesorios que toma (y usa) un componente definen cómo se puede controlar desde el exterior.
Tipos de propiedad # El paquete prop-types le permite agregar una verificación de tipos en tiempo de ejecución a su componente que garantiza que los tipos de accesorios pasados ​​al componente sean correctos.</description>
    </item>
    
    <item>
      <title>Solicitudes HTTP</title>
      <link>https://www.wikiod.com/es/react-native/solicitudes-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/solicitudes-http/</guid>
      <description>Sintaxis # buscar(url, opciones)[.entonces(&amp;hellip;)[.capturar(&amp;hellip;)]]
Fetch API es la API más utilizada para solicitudes HTTP. Es moderno, flexible y utiliza promesas.
La API XMLHttpRequest también se usa para solicitudes HTTP y se incluye principalmente para que los desarrolladores puedan usar sus bibliotecas existentes favoritas, como ApiSauce.
La API de Websocket se puede usar para datos &amp;ldquo;en vivo&amp;rdquo; en escenarios en tiempo real, como en aplicaciones de chat.
Usando Promises con la API fetch y Redux # Redux es la biblioteca de administración de estado más común utilizada con React-Native.</description>
    </item>
    
    <item>
      <title>RefreshControl con ListView</title>
      <link>https://www.wikiod.com/es/react-native/refreshcontrol-con-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/refreshcontrol-con-listview/</guid>
      <description>Referencias:
RefreshControl: https://facebook.github.io/react-native/docs/refreshcontrol.html
Vista de lista: https://facebook.github.io/react-native/docs/listview.html
Refresh Control con ListView Ejemplo completo # Control de actualización se usa dentro de ScrollView o ListView para agregar la funcionalidad de extracción para actualizar. en este ejemplo lo usaremos con ListView
&#39;use strict&#39; import React, { Component } from &#39;react&#39;; import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39; class RefreshControlExample extends Component { constructor () { super() this.state = { refreshing: false, dataSource: new ListView.</description>
    </item>
    
    <item>
      <title>Instrucciones de la línea de comandos</title>
      <link>https://www.wikiod.com/es/react-native/instrucciones-de-la-linea-de-comandos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/instrucciones-de-la-linea-de-comandos/</guid>
      <description>Comprobar la versión instalada # $ react-native -v Salida de ejemplo
react-native-cli: 0.2.0 react-native: n/a - not inside a React Native project directory //Output from different folder react-native: react-native: 0.30.0 // Output from the react native project directory Inicializar y comenzar con el proyecto React Native # Para inicializar
react-native init MyAwesomeProject Para inicializar con una versión específica de React Native
react-native init --version=&amp;quot;0.36.0&amp;quot; MyAwesomeProject Para ejecutar para Android
cd MyAwesomeProject react-native run-android Para ejecutar para iOS</description>
    </item>
    
    <item>
      <title>Prácticas recomendadas del navegador</title>
      <link>https://www.wikiod.com/es/react-native/practicas-recomendadas-del-navegador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/practicas-recomendadas-del-navegador/</guid>
      <description>Navegador # Navigator es el navegador predeterminado de React Native. Un componente Navigator gestiona una pila de objetos de ruta y proporciona métodos para gestionar esa pila.
&amp;lt;Navigator ref={(navigator) =&amp;gt; { this.navigator = navigator }} initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }} renderScene={this.renderScene.bind(this)} configureScene={(route) =&amp;gt; Navigator.SceneConfigs.FloatFromRight} style={{ flex: 1 }} navigationBar={ // see &amp;quot;Managing the Navigation Bar&amp;quot; below &amp;lt;Navigator.NavigationBar routeMapper={this.routeMapper} /&amp;gt; } /&amp;gt; Gestionar la pila de rutas
En primer lugar, observe la propiedad initialRoute.</description>
    </item>
    
    <item>
      <title>API de animación</title>
      <link>https://www.wikiod.com/es/react-native/api-de-animacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/api-de-animacion/</guid>
      <description>Animar una imagen # class AnimatedImage extends Component { constructor(props){ super(props) this.state = { logoMarginTop: new Animated.Value(200) } } componentDidMount(){ Animated.timing( this.state.logoMarginTop, { toValue: 100 } ).start() } render () { return ( &amp;lt;View&amp;gt; &amp;lt;Animated.Image source={require(&#39;../images/Logo.png&#39;)} style={[baseStyles.logo, { marginTop: this.state.logoMarginTop }]} /&amp;gt; &amp;lt;/View&amp;gt; ) } } Este ejemplo está animando la posición de la imagen cambiando el margen.</description>
    </item>
    
    <item>
      <title>Diseño</title>
      <link>https://www.wikiod.com/es/react-native/diseno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/react-native/diseno/</guid>
      <description>caja flexible # Flexbox es un modo de diseño que proporciona la disposición de los elementos en una página de modo que los elementos se comporten de manera predecible cuando el diseño de la página debe acomodar diferentes tamaños de pantalla y diferentes dispositivos de visualización. Por defecto, flexbox organiza a los niños en una columna. Pero puedes cambiarlo a fila usando flexDirection: &#39;row&#39;.
direcciónflexible # const Direction = (props)=&amp;gt;{ return ( &amp;lt;View style={styles.</description>
    </item>
    
  </channel>
</rss>

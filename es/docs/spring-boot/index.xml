<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de arranque de primavera on </title>
    <link>https://www.wikiod.com/es/docs/spring-boot/</link>
    <description>Recent content in Tutorial de arranque de primavera on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con spring-boot</title>
      <link>https://www.wikiod.com/es/spring-boot/primeros-pasos-con-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/primeros-pasos-con-spring-boot/</guid>
      <description>Instalación o Configuración # La configuración con Spring Boot por primera vez es bastante rápida gracias al arduo trabajo de la comunidad de Spring.
requisitos previos:
Java instalado Java IDE Recomendado no requerido (Intellij, Eclipse, Netbeans, etc.) No necesita tener instalado Maven y/o Gradle. Los proyectos generados por Spring Initializr vienen con un Maven Wrapper (comando mvnw) o Gradle Wrapper (comando gradlew).
Abra su navegador web en https://start.spring.io Esta es una plataforma de lanzamiento para crear nuevas aplicaciones de Spring Boot, por ahora iremos con lo mínimo.</description>
    </item>
    
    <item>
      <title>Creación y uso de múltiples archivos application.properties</title>
      <link>https://www.wikiod.com/es/spring-boot/creacion-y-uso-de-multiples-archivos-applicationproperties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/creacion-y-uso-de-multiples-archivos-applicationproperties/</guid>
      <description>Entorno de desarrollo y producción utilizando diferentes fuentes de datos # Después de configurar con éxito la aplicación Spring-Boot, toda la configuración se maneja en un archivo application.properties. Encontrará el archivo en src/main/resources/.
Normalmente existe la necesidad de tener una base de datos detrás de la aplicación. Para el desarrollo es bueno tener una configuración de entornos dev y prod. Usando múltiples archivos application.properties puede decirle a Spring-Boot con qué entorno debe iniciar la aplicación.</description>
    </item>
    
    <item>
      <title>Servicios REST</title>
      <link>https://www.wikiod.com/es/spring-boot/servicios-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/servicios-rest/</guid>
      <description>Parámetros # Anotación Columna @Controlador Indica que una clase anotada es un &amp;ldquo;Controlador&amp;rdquo; (controlador web). @RequestMapping Anotación para mapear solicitudes web en clases de controlador específicas (si usamos con clase) y/o métodos de controlador (si usamos con métodos). método = RequestMethod.GET Tipo de métodos de solicitud HTTP Cuerpo de respuesta Anotación que indica que el valor de retorno de un método debe vincularse al cuerpo de la respuesta web @RestController @Controlador + Cuerpo de respuesta @RespuestaEntidad Extensión de HttpEntity que agrega un código de estado HttpStatus, podemos controlar el código http de retorno Creación de un servicio REST # Cree un proyecto usando STS (Spring Starter Project) o Spring Initializr (en https://start.</description>
    </item>
    
    <item>
      <title>Escaneo de paquetes</title>
      <link>https://www.wikiod.com/es/spring-boot/escaneo-de-paquetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/escaneo-de-paquetes/</guid>
      <description>En este tema, revisaré el análisis del paquete Spring Boot.
Puede encontrar información básica en los documentos de Spring Boot en el siguiente enlace ([using-boot-structuring-your-code](http://docs.spring.io/spring-boot/docs/current/reference/html/using -boot-structuring-your-code.html)) pero intentaré proporcionar información más detallada.
Spring boot, y Spring en general, proporcionan una función para escanear paquetes automáticamente en busca de ciertas anotaciones para crear &amp;ldquo;beans&amp;rdquo; y &amp;ldquo;configuración&amp;rdquo;.
Parámetros # Anotación Detalles @SpringBootApplication Anotación de la aplicación de arranque de resorte principal. se usa una vez en la aplicación, contiene un método principal y actúa como paquete principal para escanear paquetes @SpringBootConfiguración Indica que una clase proporciona la aplicación Spring Boot.</description>
    </item>
    
    <item>
      <title>Pruebas en Spring Boot</title>
      <link>https://www.wikiod.com/es/spring-boot/pruebas-en-spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/pruebas-en-spring-boot/</guid>
      <description>Cómo probar una aplicación Spring Boot simple # Tenemos una aplicación Spring Boot de muestra que almacena datos de usuario en MongoDB y estamos utilizando los servicios Rest para recuperar datos.
Primero hay una clase de dominio, es decir, POJO
@Document public class User{ @Id private String id; private String name; } Un repositorio correspondiente basado en Spring Data MongoDB
public interface UserRepository extends MongoRepository&amp;lt;User, String&amp;gt; { } Entonces nuestro controlador de usuario</description>
    </item>
    
    <item>
      <title>Almacenamiento en caché con Redis usando Spring Boot para MongoDB</title>
      <link>https://www.wikiod.com/es/spring-boot/almacenamiento-en-cache-con-redis-usando-spring-boot-para-mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/almacenamiento-en-cache-con-redis-usando-spring-boot-para-mongodb/</guid>
      <description>¿Por qué almacenar en caché? # Hoy en día, el rendimiento es una de las métricas más importantes que debemos evaluar al desarrollar un servicio/aplicación web. Mantener a los clientes comprometidos es fundamental para cualquier producto y, por esta razón, es extremadamente importante mejorar el rendimiento y reducir los tiempos de carga de la página.
Cuando se ejecuta un servidor web que interactúa con una base de datos, sus operaciones pueden convertirse en un cuello de botella.</description>
    </item>
    
    <item>
      <title>Arranque de primavera &#43; JPA de datos de primavera</title>
      <link>https://www.wikiod.com/es/spring-boot/arranque-de-primavera--jpa-de-datos-de-primavera/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/arranque-de-primavera--jpa-de-datos-de-primavera/</guid>
      <description>Spring Boot facilita la creación de aplicaciones y servicios de grado de producción impulsados ​​por Spring con un mínimo esfuerzo. Favorece la convención sobre la configuración.
Spring Data JPA, parte de la familia Spring Data más grande, facilita la implementación de repositorios basados ​​en JPA. Facilita la creación de aplicaciones que utilizan tecnologías de acceso a datos.
Anotaciones # @Repository: indica que una clase anotada es un &amp;ldquo;repositorio&amp;rdquo;, un mecanismo para encapsular el comportamiento de almacenamiento, recuperación y búsqueda que emula una colección de objetos.</description>
    </item>
    
    <item>
      <title>Aplicación web Spring Boot con capacidad de respuesta completa con JHipster</title>
      <link>https://www.wikiod.com/es/spring-boot/aplicacion-web-spring-boot-con-capacidad-de-respuesta-completa-con-jhipster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/aplicacion-web-spring-boot-con-capacidad-de-respuesta-completa-con-jhipster/</guid>
      <description>Crear la aplicación Spring Boot usando jHipster en Mac OS # jHipster le permite iniciar una aplicación web Spring Boot con un back-end API REST y un front-end AngularJS y Twitter Bootstrap.
Más sobre jHipster aquí: Documentación de jHipster
Instalar preparación:
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; Vea información adicional sobre cómo instalar brew aquí: Instalar Brew
Instalar Gradle
Gradle es un sistema de construcción y gestión de dependencias.
brew install gradle Instalar Git</description>
    </item>
    
    <item>
      <title>Arranque de primavera &#43; JPA &#43; mongoDB</title>
      <link>https://www.wikiod.com/es/spring-boot/arranque-de-primavera--jpa--mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/arranque-de-primavera--jpa--mongodb/</guid>
      <description>Controlador del cliente # package org.bookmytickets.controller; import java.util.List; import org.bookmytickets.model.Customer; import org.bookmytickets.repository.CustomerRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = &amp;quot;/customer&amp;quot;) public class CustomerController { @Autowired private CustomerRepository repository; @GetMapping(&amp;quot;&amp;quot;) public List&amp;lt;Customer&amp;gt; selectAll(){ List&amp;lt;Customer&amp;gt; customerList = repository.findAll(); return customerList; } @GetMapping(&amp;quot;/{id}&amp;quot;) public List&amp;lt;Customer&amp;gt; getSpecificCustomer(@PathVariable String id){ return repository.findById(id); } @GetMapping(&amp;quot;/search/lastName/{lastName}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByLastName(@PathVariable String lastName){ return repository.findByLasttName(lastName); } @GetMapping(&amp;quot;/search/firstname/{firstname}&amp;quot;) public List&amp;lt;Customer&amp;gt; searchByFirstName(@PathVariable String firstName){ return repository.</description>
    </item>
    
    <item>
      <title>Spring boot &#43; Hibernate &#43; interfaz de usuario web (Thymeleaf)</title>
      <link>https://www.wikiod.com/es/spring-boot/spring-boot--hibernate--interfaz-de-usuario-web-thymeleaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/spring-boot/spring-boot--hibernate--interfaz-de-usuario-web-thymeleaf/</guid>
      <description>Este hilo se centra en cómo crear una aplicación Spring Boot con el motor de plantillas hibernate y thymyleaf.
Consulte también la [documentación de Thymeleaf] (https://www.wikiod.com/es/thymeleaf)
Configuración de hibernación # Primero, repasemos lo que necesitamos para configurar Hibernate correctamente.
@EnableTransactionManagement y @EnableJpaRepositories: queremos gestión transaccional y utilizar repositorios de datos Spring. DataSource: fuente de datos principal de la aplicación. utilizando h2 en memoria para este ejemplo. LocalContainerEntityManagerFactoryBean: fábrica de administradores de entidades de Spring que usa HibernateJpaVendorAdapter.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial plsql on </title>
    <link>https://www.wikiod.com/es/docs/plsql/</link>
    <description>Recent content in Tutorial plsql on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/plsql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con plsql</title>
      <link>https://www.wikiod.com/es/plsql/comenzando-con-plsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/comenzando-con-plsql/</guid>
      <description>Hola Mundo # set serveroutput on DECLARE message constant varchar2(32767):= &#39;Hello, World!&#39;; BEGIN dbms_output.put_line(message); END; / Se requiere el comando set serveroutput on en los clientes SQL*Plus y SQL Developer para habilitar la salida de dbms_output. Sin el comando no se muestra nada.
La línea end; señala el final del bloque PL/SQL anónimo. Para ejecutar el código desde la línea de comandos SQL, es posible que deba escribir / al comienzo de la primera línea en blanco después de la última línea del código.</description>
    </item>
    
    <item>
      <title>procedimiento PLSQL</title>
      <link>https://www.wikiod.com/es/plsql/procedimiento-plsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/procedimiento-plsql/</guid>
      <description>El procedimiento PLSQL es un grupo de declaraciones SQL almacenadas en el servidor para su reutilización. Aumenta el rendimiento porque las declaraciones SQL no tienen que volver a compilarse cada vez que se ejecuta.
Los procedimientos almacenados son útiles cuando varias aplicaciones requieren el mismo código. Tener procedimientos almacenados elimina la redundancia e introduce simplicidad en el código. Cuando se requiere la transferencia de datos entre el cliente y el servidor, los procedimientos pueden reducir el costo de comunicación en ciertas situaciones.</description>
    </item>
    
    <item>
      <title>Cursores</title>
      <link>https://www.wikiod.com/es/plsql/cursores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/cursores/</guid>
      <description>Sintaxis # Cursor cursor_name Is your_select_statement El cursor cursor_name(param TYPE) es your_select_statement_using_param FOR x en (your_select_statement) LOOP&amp;hellip; Los cursores declarados son difíciles de usar, y en la mayoría de los casos debería preferir bucles FOR. Lo que es muy interesante en los cursores en comparación con los bucles FOR simples, es que puedes parametrizarlos.
Es mejor evitar hacer bucles con PL/SQL y cursores en lugar de usar Oracle SQL de todos modos.</description>
    </item>
    
    <item>
      <title>Recogida a granel</title>
      <link>https://www.wikiod.com/es/plsql/recogida-a-granel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/recogida-a-granel/</guid>
      <description>Procesamiento masivo de datos # las colecciones locales no están permitidas en declaraciones seleccionadas. Por lo tanto, el primer paso es crear una colección de nivel de esquema. Si la colección no está a nivel de esquema y se usa en declaraciones SELECT, entonces causaría &amp;ldquo;PLS-00642: tipos de colección local no permitidos en declaraciones SQL&amp;rdquo;
CREATE OR REPLACE TYPE table1_t IS OBJECT ( a_1 INTEGER, a_2 VARCHAR2(10) ); &amp;ndash;Otorgar permisos en la colección para que pueda usarse públicamente en la base de datos</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/plsql/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/funciones/</guid>
      <description>Sintaxis # CREAR [O REEMPLAZAR] FUNCIÓN nombre_función [ (parámetro [,parámetro]) ]
RETURN return_datatype ES | COMO
[declaration_section] BEGIN sección_ejecutable
[EXCEPCIÓN excepción_sección]
FIN [nombre_función];
Funciones de llamada # Hay algunas maneras de usar las funciones.
Llamar a una función con una instrucción de asignación
DECLARE x NUMBER := functionName(); --functions can be called in declaration section BEGIN x := functionName(); END; Llamar a una función en la declaración IF
IF functionName() = 100 THEN Null; END IF; Llamar a una función en una instrucción SELECT</description>
    </item>
    
    <item>
      <title>Paquetes</title>
      <link>https://www.wikiod.com/es/plsql/paquetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/paquetes/</guid>
      <description>Sintaxis # CREAR [O REEMPLAZAR] PAQUETE nombre_paquete [AUTOID {CURRENT_USER | DEFINIR}]
{IS | AS} [PRAGMA EN SERIE_REUTILIZABLE;]
[colección_tipo_definición&amp;hellip;]
[record_type_definition&amp;hellip;]
[subtipo_definición&amp;hellip;]
[colección_declaración&amp;hellip;]
[declaración_constante&amp;hellip;]
[excepción_declaración&amp;hellip;]
[objeto_declaración&amp;hellip;]
[registro_declaración&amp;hellip;]
[variable_declaration&amp;hellip;]
[especificación_cursor &amp;hellip;]
[espec_función &amp;hellip;]
[especificación_procedimiento&amp;hellip;]
[espec_llamada &amp;hellip;]
[PRAGMA RESTRICT_REFERENCES(afirmaciones)&amp;hellip;]
FIN [nombre_paquete];
CREAR O REEMPLAZAR PAQUETE PackageName ES FUNCIÓN NombreFunción(parámetro1 EN VARCHAR2, parámetro2 EN NÚMERO) RETURN VARCHAR2;
END PackageName;
CREAR [O REEMPLAZAR] CUERPO DEL PAQUETE nombre_paquete {ES | COMO}
[PRAGMA EN SERIE_REUTILIZABLE;]
[colección_tipo_definición&amp;hellip;]
[record_type_definition&amp;hellip;]
[subtipo_definición&amp;hellip;]</description>
    </item>
    
    <item>
      <title>Declaración IF-THEN-ELSE</title>
      <link>https://www.wikiod.com/es/plsql/declaracion-if-then-else/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/declaracion-if-then-else/</guid>
      <description>Sintaxis # SI [condición 1] ENTONCES
[sentencias a ejecutar cuando la condición 1 es VERDADERA];
ELSIF [condición 2] ENTONCES
[sentencias a ejecutar cuando la condición 2 es VERDADERA];
MÁS
[sentencias a ejecutar cuando tanto la condición 1 como la condición 2 son FALSAS];
TERMINARA SI;
SI-ENTONCES # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 1; IF v_num1 &amp;gt; v_num2 THEN dbms_output.put_line(&#39;v_num1 is bigger than v_num2&#39;); END IF; END; SI-ENTONCES-OTRO # DECLARE v_num1 NUMBER(10); v_num2 NUMBER(10); BEGIN v_num1 := 2; v_num2 := 10; IF v_num1 &amp;gt; v_num2 THEN dbms_output.</description>
    </item>
    
    <item>
      <title>disparadores</title>
      <link>https://www.wikiod.com/es/plsql/disparadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/disparadores/</guid>
      <description>Introducción:
Los disparadores son un concepto útil en PL/SQL. Un disparador es un tipo especial de procedimiento almacenado que no requiere que el usuario lo llame explícitamente. Es un grupo de instrucciones, que se dispara automáticamente en respuesta a una acción de modificación de datos específica en una tabla o relación específica, o cuando se cumplen ciertas condiciones específicas. Los activadores ayudan a mantener la integridad y la seguridad de los datos.</description>
    </item>
    
    <item>
      <title>Círculo</title>
      <link>https://www.wikiod.com/es/plsql/circulo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/circulo/</guid>
      <description>Sintaxis # BUCLE [declaraciones]; SALIR CUANDO [condición para el bucle de salida]; BUCLE FINAL; Bucle sencillo # DECLARE v_counter NUMBER(2); BEGIN v_counter := 0; LOOP v_counter := v_counter + 1; dbms_output.put_line(&#39;Line number&#39; || v_counter); EXIT WHEN v_counter = 10; END LOOP; END; MIENTRAS Bucle # El bucle WHILE se ejecuta hasta que se cumple la condición de fin. Ejemplo sencillo:
DECLARE v_counter NUMBER(2); --declaration of counter variable BEGIN v_counter := 0; --point of start, first value of our iteration WHILE v_counter &amp;lt; 10 LOOP --exit condition dbms_output.</description>
    </item>
    
    <item>
      <title>Colecciones y Registros</title>
      <link>https://www.wikiod.com/es/plsql/colecciones-y-registros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/plsql/colecciones-y-registros/</guid>
      <description>Usar una colección como tipo de devolución para una función dividida # Es necesario declarar el tipo; aquí t_mi_lista; una colección es una TABLA DE algo
CREATE OR REPLACE TYPE t_my_list AS TABLE OF VARCHAR2(100); Aquí está la función. Observe el uso de () como una especie de constructor, y las palabras clave COUNT y EXTEND que lo ayudan a crear y hacer crecer su colección;
CREATE OR REPLACE FUNCTION cto_table(p_sep in Varchar2, p_list IN VARCHAR2) RETURN t_my_list AS --- this function takes a string list, element being separated by p_sep -- as separator l_string VARCHAR2(4000) := p_list || p_sep; l_sep_index PLS_INTEGER; l_index PLS_INTEGER := 1; l_tab t_my_list := t_my_list(); BEGIN LOOP l_sep_index := INSTR(l_string, p_sep, l_index); EXIT WHEN l_sep_index = 0; l_tab.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial brillante on </title>
    <link>https://www.wikiod.com/es/docs/shiny/</link>
    <description>Recent content in Tutorial brillante on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con brillante</title>
      <link>https://www.wikiod.com/es/shiny/comenzando-con-brillante/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shiny/comenzando-con-brillante/</guid>
      <description>Aplicación sencilla # Cada aplicación brillante contiene dos partes: una definición de interfaz de usuario (UI) y un script de servidor (servidor). Este ejemplo muestra cómo puede imprimir &amp;ldquo;Hola mundo&amp;rdquo; desde la interfaz de usuario o desde el servidor.
UI.R
En la interfaz de usuario, puede colocar algunos objetos de vista (div, entradas, botones, etc.).
library(shiny) # Define UI for application print &amp;quot;Hello world&amp;quot; shinyUI( # Create bootstrap page fluidPage( # Paragraph &amp;quot;Hello world&amp;quot; p(&amp;quot;Hello world&amp;quot;), # Create button to print &amp;quot;Hello world&amp;quot; from server actionButton(inputId = &amp;quot;Print_Hello&amp;quot;, label = &amp;quot;Print_Hello World&amp;quot;), # Create position for server side text textOutput(&amp;quot;Server_Hello&amp;quot;) ) ) Servidor.</description>
    </item>
    
    <item>
      <title>API de JavaScript</title>
      <link>https://www.wikiod.com/es/shiny/api-de-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shiny/api-de-javascript/</guid>
      <description>Sintaxis # session$sendCustomMessage(nombre,lista de parámetros) Shiny.addCustomMessageHandler(nombre, función JS que acepta lista de parámetros) Shiny.onInputChange(nombre,valor) Envío de datos del servidor al cliente # En muchos casos, querrá enviar datos desde el servidor R al cliente JS. Aquí hay un ejemplo muy simple:
library(shiny) runApp( list( ui = fluidPage( tags$script( &amp;quot;Shiny.addCustomMessageHandler(&#39;message&#39;, function(params) { alert(params); });&amp;quot; ), actionButton(&amp;quot;btn&amp;quot;,&amp;quot;Press Me&amp;quot;) ), server = function(input, output, session) { observeEvent(input$btn,{ randomNumber &amp;lt;- runif(1,0,100) session$sendCustomMessage(&amp;quot;message&amp;quot;,list(paste0(randomNumber,&amp;quot; is a random number!</description>
    </item>
    
    <item>
      <title>reactivo, valor reactivo y eventoReactivo, observar y observarEvento en Shiny</title>
      <link>https://www.wikiod.com/es/shiny/reactivo-valor-reactivo-y-eventoreactivo-observar-y-observarevento-en-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shiny/reactivo-valor-reactivo-y-eventoreactivo-observar-y-observarevento-en-shiny/</guid>
      <description>reactive, reactiveValue y eventReactive son varios tipos de expresiones reactivas en Shiny. Producen una salida que se puede usar como entrada en otras expresiones, que a su vez dependerán de la expresión reactiva.
observe y observeEvent son similares a las expresiones reactivas. La gran diferencia es que los observadores no generan ningún resultado y, por lo tanto, solo son útiles para sus efectos secundarios.
En este documento se dan ejemplos de su uso.</description>
    </item>
    
    <item>
      <title>Subir datos a shiny</title>
      <link>https://www.wikiod.com/es/shiny/subir-datos-a-shiny/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shiny/subir-datos-a-shiny/</guid>
      <description>Subiendo archivos csv a Shiny # También es posible que un usuario cargue csv en su aplicación Shiny. El siguiente código muestra un pequeño ejemplo de cómo se puede lograr esto. También incluye una entrada de botón de radio para que el usuario pueda elegir de forma interactiva el separador que se utilizará.
library(shiny) library(DT) # Define UI ui &amp;lt;- shinyUI(fluidPage( fileInput(&#39;target_upload&#39;, &#39;Choose file to upload&#39;, accept = c( &#39;text/csv&#39;, &#39;text/comma-separated-values&#39;, &#39;.</description>
    </item>
    
    <item>
      <title>Cómo escribir aplicaciones brillantes MCVE (ejemplo mínimo, completo y verificable)</title>
      <link>https://www.wikiod.com/es/shiny/como-escribir-aplicaciones-brillantes-mcve-ejemplo-minimo-completo-y-verificable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/shiny/como-escribir-aplicaciones-brillantes-mcve-ejemplo-minimo-completo-y-verificable/</guid>
      <description>Si tiene problemas con sus aplicaciones Shiny, es una buena práctica crear una aplicación que ilustre su punto. Esta aplicación debe ser lo más simple posible sin dejar de reflejar su problema. Esto significa usar conjuntos de datos simples, nombres que se explican por sí mismos (especialmente para ID de E/S) y reemplazar gráficos por otros más simples.
También es recomendable crear su MCVE de manera que se requiera la menor cantidad posible de bibliotecas no estándar.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django-formas Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/django-forms/</link>
    <description>Recent content in Django-formas Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/django-forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con las formas Django</title>
      <link>https://www.wikiod.com/es/django-forms/comenzando-con-las-formas-django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-forms/comenzando-con-las-formas-django/</guid>
      <description>Instalación o configuración # Instrucciones detalladas sobre cómo configurar o instalar Django-forms.</description>
    </item>
    
    <item>
      <title>Uso del formulario modelo</title>
      <link>https://www.wikiod.com/es/django-forms/uso-del-formulario-modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-forms/uso-del-formulario-modelo/</guid>
      <description>Django ModelForm permite la creación de una clase Form a partir de un modelo Django.
Hacer que los campos no sean editables # Django 1.9 agregó el atributo Field.disabled:
El argumento booleano disabled, cuando se establece en True, desactiva un campo de formulario usando el atributo HTML deshabilitado para que no sea editable por usuarios. Incluso si un usuario manipula el valor del campo enviado al servidor, será ignorado a favor del valor del formulario datos iniciales.</description>
    </item>
    
    <item>
      <title>Formularios incorporados de Django</title>
      <link>https://www.wikiod.com/es/django-forms/formularios-incorporados-de-django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-forms/formularios-incorporados-de-django/</guid>
      <description>Django se envía con varias vistas que requieren formularios. Estos formularios son, naturalmente, incorporados. Un buen ejemplo son los formularios integrados de autenticación.
Este tema pretende traer documentación sobre cómo trabajar con estos formularios.
Agregar clases CSS personalizadas # Los formularios incorporados son excelentes, pero a veces es necesario personalizarlos, agregar nuevos campos o simplemente cambiar los atributos CSS.
Este ejemplo es aplicable a varios casos de uso, pero aquí se presenta con respecto a PasswordChangeForm y su uso en un sitio web Bootstrap.</description>
    </item>
    
    <item>
      <title>Pruebas</title>
      <link>https://www.wikiod.com/es/django-forms/pruebas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/django-forms/pruebas/</guid>
      <description>Una característica central de Django son las pruebas unitarias.
Este tema tiene la intención de traer una documentación completa sobre cómo probar formularios.
Prueba sencilla # from django.test import TestCase from myapp.forms import MyForm class MyAppTests(TestCase): def test_forms(self): form_data = {&#39;field1&#39;: &#39;fieldvalue1&#39;} form = MyForm(data=form_data) self.assertTrue(form.is_valid()) </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Java on </title>
    <link>https://www.wikiod.com/es/docs/java/</link>
    <description>Recent content in Tutorial del lenguaje Java on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Java</title>
      <link>https://www.wikiod.com/es/java/primeros-pasos-con-el-lenguaje-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/primeros-pasos-con-el-lenguaje-java/</guid>
      <description>Creando tu primer programa Java # Cree un nuevo archivo en su editor de texto o IDE llamado HelloWorld.java. Luego pegue este bloque de código en el archivo y guárdelo:
public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;quot;Hello, World!&amp;quot;); } } [Ejecutar en vivo en Ideone] (https://ideone.com/rbWs4M)
Nota: Para que Java reconozca esto como una clase pública (y no arroje un [error de tiempo de compilación][3]), el nombre del archivo debe ser el mismo que el nombre de la clase (HelloWorld en este ejemplo) con una extensión .</description>
    </item>
    
    <item>
      <title>arreglos</title>
      <link>https://www.wikiod.com/es/java/arreglos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/arreglos/</guid>
      <description>Las matrices permiten el almacenamiento y la recuperación de una cantidad arbitraria de valores. Son análogos a los vectores en matemáticas. Los arreglos de arreglos son análogos a las matrices y actúan como arreglos multidimensionales. Las matrices pueden almacenar datos de cualquier tipo: primitivos como int o tipos de referencia como Object.
Sintaxis # ArrayType[] myArray; // Declaración de matrices ArrayType myArray[]; // Otra sintaxis válida (menos utilizada y desaconsejada) ArrayType[][][] myArray; // Declarar matrices irregulares multidimensionales (repetir []s) ArrayType myVar = myArray[index]; // Acceso (lectura) al elemento en el índice myArray[index] = value; // Asignar valor a la posición index de la matriz ArrayType[] myArray = new ArrayType[arrayLength]; // Sintaxis de inicialización de matriz int[] ints = {1, 2, 3}; // Sintaxis de inicialización de matriz con los valores proporcionados, la longitud se deduce del número de valores proporcionados: {[value1[, value2]*]} new int[]{4, -5, 6} // Puede usarse como argumento, sin una variable local int[] ints = new int[3]; // igual que {0, 0, 0} int[][] ints = {{1, 2}, {3}, null}; // Inicialización de matriz multidimensional.</description>
    </item>
    
    <item>
      <title>Corrientes</title>
      <link>https://www.wikiod.com/es/java/corrientes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/corrientes/</guid>
      <description>Un &amp;lsquo;Stream&amp;rsquo; representa una secuencia de elementos y admite diferentes tipos de operaciones para realizar cálculos sobre esos elementos. Con Java 8, la interfaz Collection tiene dos métodos para generar un Stream: stream() y parallelStream(). Las operaciones Stream son intermedias o terminales. Las operaciones intermedias devuelven un &amp;lsquo;Stream&amp;rsquo;, por lo que se pueden encadenar varias operaciones intermedias antes de que se cierre el &amp;lsquo;Stream&amp;rsquo;. Las operaciones de terminal son nulas o devuelven un resultado que no es de transmisión.</description>
    </item>
    
    <item>
      <title>Expresiones Lambda</title>
      <link>https://www.wikiod.com/es/java/expresiones-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/expresiones-lambda/</guid>
      <description>Las expresiones lambda proporcionan una forma clara y concisa de implementar una interfaz de método único mediante una expresión. Le permiten reducir la cantidad de código que tiene que crear y mantener. Si bien son similares a las clases anónimas, no tienen información de tipos por sí mismas. La inferencia de tipo debe ocurrir.
Las referencias a métodos implementan interfaces funcionales utilizando métodos existentes en lugar de expresiones. También pertenecen a la familia lambda.</description>
    </item>
    
    <item>
      <title>Errores comunes de Java</title>
      <link>https://www.wikiod.com/es/java/errores-comunes-de-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/errores-comunes-de-java/</guid>
      <description>Este tema describe algunos de los errores comunes que cometen los principiantes en Java.
Esto incluye cualquier error común en el uso del lenguaje Java o la comprensión del entorno de tiempo de ejecución.
Los errores asociados con API específicas se pueden describir en temas específicos de esas API. Las cadenas son un caso especial; están cubiertos en la especificación del lenguaje Java. Los detalles que no sean errores comunes se pueden describir [en este tema sobre cadenas] (https://www.</description>
    </item>
    
    <item>
      <title>Instrumentos de cuerda</title>
      <link>https://www.wikiod.com/es/java/instrumentos-de-cuerda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/instrumentos-de-cuerda/</guid>
      <description>Las cadenas (java.lang.String) son fragmentos de texto almacenados en su programa. Las cadenas no son un tipo de datos primitivo en Java, sin embargo, son muy comunes en los programas Java.
En Java, las cadenas son inmutables, lo que significa que no se pueden cambiar. (Haga clic aquí para obtener una explicación más completa de la inmutabilidad).
Dado que las cadenas de Java son [inmutables] (https://en.wikipedia.org/wiki/Immutable_object), todos los métodos que manipulan una String devolverán un nuevo objeto String.</description>
    </item>
    
    <item>
      <title>Genéricos</title>
      <link>https://www.wikiod.com/es/java/genericos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/genericos/</guid>
      <description>Genéricos son ​​una instalación de programación genérica que amplía el sistema de tipos de Java para permitir que un tipo o método opere en objetos de varios tipos mientras proporciona seguridad de tipos en tiempo de compilación. En particular, el marco de colecciones de Java admite genéricos para especificar el tipo de objetos almacenados en una instancia de colección.
Sintaxis # clase ArrayList&amp;lt;E&amp;gt; {} // una clase genérica con parámetro de tipo E clase HashMap&amp;lt;K, V&amp;gt; {} // una clase genérica con dos parámetros de tipo K y V &amp;lt;E&amp;gt; void print(E elemento) {} // un método genérico con parámetro de tipo E ArrayList&amp;lt;Cadena&amp;gt; nombres; // declaración de una clase genérica ArrayList&amp;lt;?</description>
    </item>
    
    <item>
      <title>Enumeraciones</title>
      <link>https://www.wikiod.com/es/java/enumeraciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/enumeraciones/</guid>
      <description>Las enumeraciones de Java (declaradas con la palabra clave enum) son una sintaxis abreviada para cantidades considerables de constantes de una sola clase.
Sintaxis # [público/protegido/privado] enum Enum_name { // Declarar una nueva enumeración. ENUM_CONSTANT_1[, ENUM_CONSTANT_2&amp;hellip;]; // Declarar las constantes de enumeración. Esta debe ser la primera línea dentro de la enumeración y debe estar separada por comas, con un punto y coma al final. ENUM_CONSTANT_1(parámetro)[, ENUM_CONSTANT_2(parámetro)&amp;hellip;]; // Declarar constantes de enumeración con parámetros.</description>
    </item>
    
    <item>
      <title>Excepciones y manejo de excepciones</title>
      <link>https://www.wikiod.com/es/java/excepciones-y-manejo-de-excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/excepciones-y-manejo-de-excepciones/</guid>
      <description>Los objetos de tipo Throwable y sus subtipos pueden enviarse a la pila con la palabra clave throw y capturarse con declaraciones try...catch.
Sintaxis # void someMethod() lanza SomeException { } //declaración de método, fuerza método personas que llaman para detectar si SomeException es un tipo de excepción verificado
probar {
someMethod(); //code that might throw an exception }
captura (AlgunaExcepción e) {
System.out.println(&amp;quot;SomeException was thrown!&amp;quot;); //code that will run if certain exception (SomeException) is thrown }</description>
    </item>
    
    <item>
      <title>Colecciones</title>
      <link>https://www.wikiod.com/es/java/colecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/java/colecciones/</guid>
      <description>El marco de las colecciones en java.util proporciona una serie de clases genéricas para conjuntos de datos con una funcionalidad que no pueden proporcionar las matrices regulares.
El marco de colecciones contiene interfaces para Collection&amp;lt;O&amp;gt;, con subinterfaces principales List&amp;lt;O&amp;gt; y Set&amp;lt;O&amp;gt;, y la colección de mapas Map&amp;lt;K,V&amp;gt;. Las colecciones son la interfaz raíz y están siendo implementadas por muchos otros marcos de colección.
Las colecciones son objetos que pueden almacenar colecciones de otros objetos dentro de ellos.</description>
    </item>
    
  </channel>
</rss>

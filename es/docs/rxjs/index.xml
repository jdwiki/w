<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de rxjs on </title>
    <link>https://www.wikiod.com/es/docs/rxjs/</link>
    <description>Recent content in Tutorial de rxjs on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/rxjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con rxjs</title>
      <link>https://www.wikiod.com/es/rxjs/comenzando-con-rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/comenzando-con-rxjs/</guid>
      <description>Instalación o configuración # Usando un CDN: # &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/rxjs/4.1.0/rx.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; // `Rx` is available var one$ = Rx.Observable.of(1); var onesub = one$.subscribe(function (one) { console.log(one); // 1 }); // alternatively: subscribe(console.log) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; CDN si usa [RxJS 5 (RC)] (https://github.com/ReactiveX/rxjs#rxjs-5-beta):
&amp;lt;script src=&amp;quot;https://npmcdn.com/@reactivex/rxjs@5.0.0-rc.1/dist/global/Rx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Usando un paquete: # Primero instálelo en el directorio de su proyecto con npm:
npm install rx O usando RxJS 5 (RC):</description>
    </item>
    
    <item>
      <title>recetas comunes</title>
      <link>https://www.wikiod.com/es/rxjs/recetas-comunes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/recetas-comunes/</guid>
      <description>Una colección de casos de uso comunes y su implementación en RxJS.
Almacenamiento en caché de respuestas HTTP # Un caso de uso típico para RxJS es crear solicitudes HTTP y almacenar en caché sus resultados durante un período de tiempo. Además, siempre queremos ejecutar solo una solicitud a la vez y compartir su respuesta.
Por ejemplo, el siguiente código almacena en caché 1 elemento para un máx. 1000ms:
var updateRequest = Observable.</description>
    </item>
    
    <item>
      <title>Operador PublishReplay</title>
      <link>https://www.wikiod.com/es/rxjs/operador-publishreplay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/operador-publishreplay/</guid>
      <description>¿Cómo funciona PublishReplay? # Internamente crea un ReplaySubject y lo hace compatible con multicast. El valor de reproducción mínimo de ReplaySubject es 1 emisión. Esto da como resultado lo siguiente:
La primera suscripción activará publishReplay(1) para suscribirse internamente al flujo de origen y canalizar todas las emisiones a través de ReplaySubject, almacenando efectivamente en caché las últimas n(=1) emisiones Si se inicia una segunda suscripción mientras la fuente aún está activa, multicast() nos conectará con el mismo replaySubject y recibiremos todas las próximas emisiones hasta que se complete la transmisión de la fuente.</description>
    </item>
    
    <item>
      <title>Mapa de operador  seleccionar</title>
      <link>https://www.wikiod.com/es/rxjs/mapa-de-operador--seleccionar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/mapa-de-operador--seleccionar/</guid>
      <description>Sintaxis # Rx.Observable.prototype.map(selector, [thisArg]) Rx.Observable.prototype.select(selector, [thisArg]) Parámetros # Parámetro, Tipo Detalles selector, Función u Objeto Función de transformación para aplicar a cada elemento de origen o un elemento para producir. Si selector es una función, se llama con la siguiente información: 1. el valor del elemento, 2. el índice del elemento, 3. el objeto Observable que se está suscribiendo. [esteArg], Cualquiera Objeto para usar como this al ejecutar el predicado. map y select son alias.</description>
    </item>
    
    <item>
      <title>Operadores Reintentar y ReintentarCuando</title>
      <link>https://www.wikiod.com/es/rxjs/operadores-reintentar-y-reintentarcuando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/operadores-reintentar-y-reintentarcuando/</guid>
      <description>Retry y RetryWhen se pueden usar para intentar recuperar Observables que pueden tener errores en su transmisión.
Sintaxis # .reintentar(n: número): Observable n: retry will attempt the source Observable this many times. .retryWhen(recibe: NotificationHandler, the: Scheduler): Observable receives: an Observable of notifications which the use can complete or error. If the &amp;lsquo;receives&amp;rsquo; Observable returns cleanly (completes) the source Observable will be reattempted. If the &amp;lsquo;receives&amp;rsquo; Observable returns an error, the source Observable is aborted.</description>
    </item>
    
    <item>
      <title>Tema</title>
      <link>https://www.wikiod.com/es/rxjs/tema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/tema/</guid>
      <description>Los sujetos son clases que se comportan como Observables y observadores al mismo tiempo.
http://reactivex.io/documentation/subject.html
Sujeto y su estado interno # En Rx Los sujetos tienen estados internos que pueden controlar su comportamiento.
Un formulario de caso de uso común Sujeto lo está suscribiendo a múltiples Observables. El siguiente ejemplo crea dos Observables diferentes y suscribe un Sujeto a ambos. Luego intenta imprimir todos los valores que pasaron:
let subject = new Subject(); subject.</description>
    </item>
    
    <item>
      <title>programador</title>
      <link>https://www.wikiod.com/es/rxjs/programador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/rxjs/programador/</guid>
      <description>Usando un TestScheduler para avanzar el tiempo manualmente # La mayoría de los operadores de Rx utilizan un programador opcional para programar sus iteraciones futuras. Si no se proporciona, utilizarán su programador configurado por defecto. Proporcionar un programador puede ser útil para fines de prueba en los que nos gusta hablar de tiempo virtual en lugar de tiempo real para la velocidad de ejecución de la prueba.
const scheduler = new Rx.</description>
    </item>
    
  </channel>
</rss>

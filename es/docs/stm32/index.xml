<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de stm32 on </title>
    <link>https://www.wikiod.com/es/docs/stm32/</link>
    <description>Recent content in Tutorial de stm32 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/stm32/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con stm32</title>
      <link>https://www.wikiod.com/es/stm32/primeros-pasos-con-stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/stm32/primeros-pasos-con-stm32/</guid>
      <description>Configuración por primera vez con ejemplo de LED parpadeante usando SW4STM32 y biblioteca HAL # (Nota: Hay muchos IDE, cadenas de herramientas y bibliotecas que están listos para usar con STM32. La siguiente configuración requiere un esfuerzo mínimo para que funcione, pero es solo una de muchas. Siéntase libre de explorar otras , el propósito de este ejemplo no es obligar a nadie a usar las herramientas que se usarán aquí).</description>
    </item>
    
    <item>
      <title>Entornos de desarrollo integrado (IDE)</title>
      <link>https://www.wikiod.com/es/stm32/entornos-de-desarrollo-integrado-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/stm32/entornos-de-desarrollo-integrado-ide/</guid>
      <description>El propósito de este tema es enumerar todos los entornos de desarrollo integrados (IDE) que se pueden usar para desarrollar software para microcontroladores STM32. Los ejemplos deben contener:
Lista de las principales características del IDE. Lista de los sistemas operativos soportados por el IDE. Proceso de instalación. Pasos de configuración adicionales (si los hay). IDE enumerados por ST Microelectronics:
Número de pieza Descripción General Estado de comercialización Proveedor Tipo de software CoIDE CooCox CoIDE, un entorno de desarrollo de software gratuito y altamente integrado para MCU ARM Cortex Activo CooCox Paquetes de desarrollo SW IDE Cósmico BRAZO Cósmico/Corteza &amp;quot;M&amp;quot; Herramientas de desarrollo cruzado para microcontrolador STM32 Activo cósmico Paquetes de desarrollo SW CrossWorks Rowley Associates CrossWorks, entorno de desarrollo integrado con descarga y depuración de JTAG Flash Activo Rowley Paquetes de desarrollo SW DS-5 ARM Development Studio 5 (DS-5) proporciona las mejores herramientas de su clase para la gama más amplia de plataformas basadas en procesadores ARM Activo BRAZO Paquetes de desarrollo SW EMP-Trueno Emprog ThunderBench, herramientas de desarrollo C/C++ totalmente integradas y bien diseñadas para ARM Cortex Activo emprog firmware Hitop5 Interfaz de usuario universal, IDE y depurador para todas las herramientas de desarrollo de Hitex Activo Hitex Paquetes de desarrollo SW IAR-EWARM IAR Entorno de desarrollo integrado y optimización del compilador C/C++ para ARM Cortex-M Activo IAR Paquetes de desarrollo SW [MDK-ARM-STM32][8] Entorno de desarrollo de software MDK-ARM para MCU basados ​​en Cortex-M Activo Keil Paquetes de desarrollo SW [MULTI][9] Entorno integrado de desarrollo y depuración de GreenHills para aplicaciones integradas que utilizan C y C++ Activo Software GreenHills Paquetes de desarrollo SW [Hombres-Núcleo-SF][10] Núcleo SmartFit para STM32 Activo Gráficos de mentores firmware [PER-Trazaalizador][11] Analizador de trazas en tiempo de ejecución Percepio para STM32 MCU Activo Percepio [PLSUDE-STM32][12] Plataforma de depuración y emulador con soporte optimizado de Trace y Flash para MCU basados ​​en STM32 Cortex-M por herramientas de desarrollo PLS Activo Por favor Paquetes de desarrollo SW [PASEO-STM32][13] Entorno de desarrollo integrado de la marca Raisonance para MCU STM32 Activo Razonamiento Paquetes de desarrollo SW [SOMN-DRT-IDE][14] SUEÑO DRT Cortex-M IDE Activo SUEÑO Paquetes de desarrollo SW [SW4STM32][15] System Workbench para STM32: IDE gratuito en Windows, Linux y OS X Activo AC6 Paquetes de desarrollo SW [TAREASVX-STM32][16] Compilador C/C++ de Altium y herramientas de depuración para MCU basadas en ARM Activo TAREAS firmware [TrueSTUDIO][17] La principal herramienta de desarrollo de C/C++ para el desarrollo de STM32, con su conjunto de características inigualable y su integración sin precedentes Activo Atolico Paquetes de desarrollo SW [iSYS-winIDEAOpen][18] La plataforma de desarrollo de software ilimitada y gratuita de iSYSTEM para todos los dispositivos basados ​​en STM32 Cortex-M Activo iSISTEMA Paquetes de desarrollo SW [mikroBasicPRO][19] Compilador básico con todas las funciones de MikroElektronika que hace que el desarrollo de STM32 sea adecuado para todos Activo Microelectrónica Paquetes de desarrollo SW [mikroCPRO][20] Compilador ANSI C con todas las funciones de MikroElektronika para dispositivos STM32.</description>
    </item>
    
    <item>
      <title>UART receptortransmisor asíncrono universal (comunicación en serie)</title>
      <link>https://www.wikiod.com/es/stm32/uart-receptortransmisor-asincrono-universal-comunicacion-en-serie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/stm32/uart-receptortransmisor-asincrono-universal-comunicacion-en-serie/</guid>
      <description>Este tema trata sobre la comunicación en serie mediante el periférico Universal Asynchronous Receiver/Transmitter (UART) de los microcontroladores STM32.
Aplicación Echo - Biblioteca HAL # En este ejemplo, el microcontrolador devuelve los bytes recibidos al remitente mediante la interrupción UART RX.
#include &amp;quot;stm32f4xx.h&amp;quot; UART_HandleTypeDef huart2; /* Single byte to store input */ uint8_t byte; void SystemClock_Config(void); /* UART2 Interrupt Service Routine */ void USART2_IRQHandler(void) { HAL_UART_IRQHandler(&amp;amp;huart2); } /* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */ void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { if (huart-&amp;gt;Instance == USART2) { /* Transmit one byte with 100 ms timeout */ HAL_UART_Transmit(&amp;amp;huart2, &amp;amp;byte, 1, 100); /* Receive one byte in interrupt mode */ HAL_UART_Receive_IT(&amp;amp;huart2, &amp;amp;byte, 1); } } void uart_gpio_init() { GPIO_InitTypeDef GPIO_InitStruct; __GPIOA_CLK_ENABLE(); /**USART2 GPIO Configuration PA2 ------&amp;gt; USART2_TX PA3 ------&amp;gt; USART2_RX */ GPIO_InitStruct.</description>
    </item>
    
  </channel>
</rss>

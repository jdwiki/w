<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de ceceo común on </title>
    <link>https://www.wikiod.com/es/docs/common-lisp/</link>
    <description>Recent content in Tutorial de ceceo común on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con common-lisp</title>
      <link>https://www.wikiod.com/es/common-lisp/comenzando-con-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/comenzando-con-common-lisp/</guid>
      <description>Recursos comunes de aprendizaje de Lisp # Libros en línea
Estos son libros que son de libre acceso en línea.
Practical Common Lisp de Peter Seibel es una buena introducción a CL para programadores experimentados, que intenta resaltar desde el principio lo que diferencia a CL de otros lenguajes. Common Lisp: Una introducción suave a la computación simbólica por David S. Touretzky es una buena introducción para las personas nuevas en la programación.</description>
    </item>
    
    <item>
      <title>ASDF otra función de definición de sistemas</title>
      <link>https://www.wikiod.com/es/common-lisp/asdf-otra-funcion-de-definicion-de-sistemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/asdf-otra-funcion-de-definicion-de-sistemas/</guid>
      <description>ASDF: otra función de definición del sistema
ASDF es una herramienta para especificar cómo los sistemas de software Common Lisp están formados por componentes (subsistemas y archivos), y cómo operar en estos componentes en el orden correcto para que puedan compilarse, cargarse, probarse, etc.
Sistema ASDF simple con una estructura de directorio plana # Considere este proyecto simple con una estructura de directorio plana:
example |-- example.asd |-- functions.lisp |-- main.</description>
    </item>
    
    <item>
      <title>ANSI Common Lisp, el lenguaje estándar y su documentación</title>
      <link>https://www.wikiod.com/es/common-lisp/ansi-common-lisp-el-lenguaje-estandar-y-su-documentacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/ansi-common-lisp-el-lenguaje-estandar-y-su-documentacion/</guid>
      <description>Hiperespecificación de Common Lisp # Common Lisp tiene un estándar, que se publicó inicialmente en 1994 como un estándar ANSI.
El Common Lisp HyperSpec, abreviado CLHS, proporcionado por LispWorks es una documentación HTML de uso frecuente, que se deriva del documento estándar. La HyperSpec también se puede descargar y usar localmente.
Los entornos de desarrollo comunes de Lisp generalmente permiten la búsqueda de símbolos Lisp en la documentación de HyperSpec.</description>
    </item>
    
    <item>
      <title>macros</title>
      <link>https://www.wikiod.com/es/common-lisp/macros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/macros/</guid>
      <description>El Propósito de las Macros # Las macros están destinadas a generar código, transformar código y proporcionar nuevas notaciones. Estas nuevas notaciones pueden ser más adecuadas para expresar mejor el programa, por ejemplo, proporcionando construcciones a nivel de dominio o lenguajes incrustados completamente nuevos.
Las macros pueden hacer que el código fuente se explique por sí mismo, pero la depuración puede resultar más difícil. Como regla general, uno no debe usar macros cuando una función regular es suficiente.</description>
    </item>
    
    <item>
      <title>CLOS - el sistema de objetos Common Lisp</title>
      <link>https://www.wikiod.com/es/common-lisp/clos---el-sistema-de-objetos-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/clos---el-sistema-de-objetos-common-lisp/</guid>
      <description>Mezclas e interfaces # Common Lisp no tiene interfaces en el sentido en que algunos lenguajes (por ejemplo, Java) las tienen, y hay menos necesidad de ese tipo de interfaz dado que Common Lisp admite múltiples funciones genéricas y de herencia. Sin embargo, el mismo tipo de patrones se puede realizar fácilmente usando clases mixtas. Este ejemplo muestra la especificación de una interfaz de colección con varias funciones genéricas correspondientes.</description>
    </item>
    
    <item>
      <title>Trabajando con SLIME</title>
      <link>https://www.wikiod.com/es/common-lisp/trabajando-con-slime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/trabajando-con-slime/</guid>
      <description>Uso de REPL # CL-USER&amp;gt; (+ 2 3) 5 CL-USER&amp;gt; (sin 1.5) 0.997495 CL-USER&amp;gt; (mapcar (lambda (x) (+ x 2)) &#39;(1 2 3)) (3 4 5) El resultado que se imprime después de la evaluación no es solo una cadena: hay un objeto Lisp completo detrás que se puede inspeccionar haciendo clic derecho sobre él y seleccionando Inspeccionar.
También es posible la entrada de varias líneas: use C-j para poner una nueva línea.</description>
    </item>
    
    <item>
      <title>formato</title>
      <link>https://www.wikiod.com/es/common-lisp/formato/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/formato/</guid>
      <description>Parámetros # Lista Lambda (formato DESTINATION CONTROL-STRING &amp;amp;REST FORMAT-ARGUMENTS) DESTINO la cosa para escribir. Puede ser un flujo de salida, t (abreviatura de *estándar-salida*), o nil (que crea una cadena para escribir) CADENA DE CONTROL la cadena de la plantilla. Puede ser una cadena primitiva, o puede contener directivas de comando con prefijo de tilde que especifican y, de alguna manera, transforman argumentos adicionales. FORMATO-ARGUMENTOS posibles argumentos adicionales requeridos por la &amp;lsquo;CADENA DE CONTROL&amp;rsquo; dada.</description>
    </item>
    
    <item>
      <title>LOOP, una macro de Common Lisp para iteración</title>
      <link>https://www.wikiod.com/es/common-lisp/loop-una-macro-de-common-lisp-para-iteracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/loop-una-macro-de-common-lisp-para-iteracion/</guid>
      <description>Iteración paralela # Se permiten múltiples cláusulas FOR en un LOOP. El ciclo termina cuando termina la primera de estas cláusulas:
(loop for a in &#39;(1 2 3 4 5) for b in &#39;(a b c) collect (list a b)) ;; Evaluates to: ((1 a) (2 b) (3 c)) Se pueden combinar otras cláusulas que determinan si el bucle debe continuar:
(loop for a in &#39;(1 2 3 4 5 6 7) while (&amp;lt; a 4) collect a) ;; Evaluates to: (1 2 3) (loop for a in &#39;(1 2 3 4 5 6 7) while (&amp;lt; a 4) repeat 1 collect a) ;; Evaluates to: (1) Determine qué lista es más larga, cortando la iteración tan pronto como se sepa la respuesta:</description>
    </item>
    
    <item>
      <title>Contras celdas y listas</title>
      <link>https://www.wikiod.com/es/common-lisp/contras-celdas-y-listas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/contras-celdas-y-listas/</guid>
      <description>¿Qué es una celda de contras? # Una celda contra, también conocida como par punteado (debido a su representación impresa), es simplemente un par de dos objetos. La función cons crea una celda contras y los elementos del par se extraen mediante las funciones car y cdr.
(cons &amp;quot;a&amp;quot; 4) Por ejemplo, esto devuelve un par cuyo primer elemento (que se puede extraer con car) es &amp;quot;a&amp;quot;, y cuyo segundo elemento (que se puede extraer con cdr), es 4.</description>
    </item>
    
    <item>
      <title>secuencia - cómo dividir una secuencia</title>
      <link>https://www.wikiod.com/es/common-lisp/secuencia---como-dividir-una-secuencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/common-lisp/secuencia---como-dividir-una-secuencia/</guid>
      <description>Sintaxis # split regex target-string &amp;amp;key start end limit with-registers-p omit-unmatched-p sharedp =&amp;gt; list lispworks:split-sequence separador-bolsa secuencia &amp;amp;key start end test key coalesce-separators =&amp;gt; secuencias delimitador de secuencia dividida secuencia &amp;amp; tecla inicio fin desde el final cuenta eliminar subsecuencias vacías prueba prueba no clave =&amp;gt; lista de subsecuencias Dividir cadenas usando expresiones regulares # La biblioteca CL-PPCRE proporciona la función split que nos permite dividir cadenas en subcadenas que coincidan con una expresión regular, descartando las partes de la cadena que no coincidan.</description>
    </item>
    
  </channel>
</rss>

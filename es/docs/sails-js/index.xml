<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Velas.js Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/sails-js/</link>
    <description>Recent content in Velas.js Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sails-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con sails.js</title>
      <link>https://www.wikiod.com/es/sails-js/primeros-pasos-con-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/primeros-pasos-con-sailsjs/</guid>
      <description>Creando un nuevo proyecto # Una vez que haya instalado Sails, simplemente escriba
$ sails new &amp;lt;project_name&amp;gt; Esto creará un proyecto básico de Sails en una nueva carpeta llamada &amp;lt;project_name&amp;gt;.
También puede crear un nuevo proyecto en una carpeta vacía escribiendo
$ sails new Ejecutar aplicación # Una vez que se haya creado su proyecto, puede iniciar la aplicación escribiendo
$ sails lift De manera predeterminada, puede acceder a la aplicación en el navegador en el puerto 1337.</description>
    </item>
    
    <item>
      <title>Autenticación de token web JSON con Sails</title>
      <link>https://www.wikiod.com/es/sails-js/autenticacion-de-token-web-json-con-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/autenticacion-de-token-web-json-con-sails/</guid>
      <description>Configuración # Paso uno # Necesitamos crear un servicio llamado jwToken. Vaya al directorio api/services y cree jwToken.js.
&#39;use strict&#39;; const jwt = require(&#39;jsonwebtoken&#39;), tokenSecret = &amp;quot;secretissecret&amp;quot;; module.exports = { // Generates a token from supplied payload issue(payload) { return jwt.sign( payload, tokenSecret, // Token Secret that we sign it with { expiresIn: &amp;quot;30 days&amp;quot; // Token Expire time }); }, // Verifies token on a request verify(token, callback) { return jwt.</description>
    </item>
    
    <item>
      <title>API de modelo</title>
      <link>https://www.wikiod.com/es/sails-js/api-de-modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/api-de-modelo/</guid>
      <description>¿Cómo funciona la API Blueprint? # Cuando Sails inicialmente comienza a usar sails lift, Sails mira para ver si tienes cualquier controlador definido. En nuestro ejemplo, tenemos un controlador, el Usuario controlador. Luego, Sails proporciona acceso a las acciones de blueprint para este usuario. controlador como si los construyéramos en el controlador nosotros mismos. Velas también crea automáticamente rutas blueprint en el momento de levantar el servidor. Aun asi si no se definen rutas en /config/routes.</description>
    </item>
    
    <item>
      <title>Configurando mysql con sails.js</title>
      <link>https://www.wikiod.com/es/sails-js/configurando-mysql-con-sailsjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/configurando-mysql-con-sailsjs/</guid>
      <description>Cómo configurar la conexión de la base de datos mysql en sails.js # Para hacer esto, primero ubique la carpeta de configuración en su raíz. Luego abra conexiones.js
Localizar
// someMysqlServer: { // adapter: &#39;sails-mysql&#39;, // host: &#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;, // user: &#39;YOUR_MYSQL_USER&#39;, //optional // password: &#39;YOUR_MYSQL_PASSWORD&#39;, //optional // database: &#39;YOUR_MYSQL_DB&#39; //optional // }, Descomenta estas líneas.
Proporcione un nombre adecuado para el conector como este someMysqlServer a mysql_connection o cualquier nombre que desee</description>
    </item>
    
    <item>
      <title>Enrutamiento</title>
      <link>https://www.wikiod.com/es/sails-js/enrutamiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/enrutamiento/</guid>
      <description>Las rutas son reglas que le dicen a Sails qué hacer cuando se enfrenta a una solicitud entrante.
Las rutas se definen en config/routes.js. El orden de las rutas es significativo, ya que las rutas se emparejan de arriba hacia abajo. Esto significa que si tiene una ruta específica que también podría coincidir con una ruta comodín, la ruta específica debe definirse por encima de la ruta comodín.
Cuando una solicitud ingresa a su aplicación, sails.</description>
    </item>
    
    <item>
      <title>Controladores</title>
      <link>https://www.wikiod.com/es/sails-js/controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/controladores/</guid>
      <description>Los controladores (la C en MVC) son los objetos principales de su aplicación Sails que son responsables de responder a las solicitudes de un navegador web, una aplicación móvil o cualquier otro sistema capaz de comunicarse con un servidor. A menudo actúan como intermediarios entre sus modelos y vistas. Para muchas aplicaciones, los controladores contendrán la mayor parte de la lógica comercial de su proyecto.
ES2015 Sintaxis # &#39;use strict&#39;; // This is an example of a /api/controllers/HomeController.</description>
    </item>
    
    <item>
      <title>Modelos</title>
      <link>https://www.wikiod.com/es/sails-js/modelos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/modelos/</guid>
      <description>Sails viene instalado con un poderoso ORM/ODM llamado Waterline, una herramienta independiente del almacén de datos que simplifica drásticamente la interacción con una o más bases de datos. Proporciona una capa de abstracción sobre la base de datos subyacente, lo que le permite consultar y manipular fácilmente sus datos sin escribir código de integración específico del proveedor.
Modelo basica # Este ejemplo muestra cómo definir un modelo simple en Sails.js</description>
    </item>
    
    <item>
      <title>Adaptador de base de datos PostgreSQL para Sails</title>
      <link>https://www.wikiod.com/es/sails-js/adaptador-de-base-de-datos-postgresql-para-sails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/adaptador-de-base-de-datos-postgresql-para-sails/</guid>
      <description>Instalar # Puede instalar el adaptador postgreSQL a través de NPM.
npm install sails-postgresql Configuración # Puede configurar los ajustes de la base de datos en config/connections.js.
Aquí hay un ejemplo:
postgresql: { database: &#39;databaseName&#39;, host: &#39;localhost&#39;, user: &#39;root&#39;, password: &#39;&#39;, port: 5432, poolSize: 10, ssl: false }; Alternativamente, puede proporcionar la información de conexión en formato de URL:
postgresql: { url: &#39;postgres://username:password@hostname:port/database&#39;, ssl: false }; </description>
    </item>
    
    <item>
      <title>Adaptador MongoDB para velas</title>
      <link>https://www.wikiod.com/es/sails-js/adaptador-mongodb-para-velas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sails-js/adaptador-mongodb-para-velas/</guid>
      <description>Configuración # Puede configurar los ajustes de la base de datos en config/connections.js.
Ejemplo:
someMongoDb: { adapter: &#39;sails-mongo&#39;, host: &#39;localhost&#39;, // defaults to `localhost` if omitted port: 27017, // defaults to 27017 if omitted user: &#39;username_here&#39;, // or omit if not relevant password: &#39;password_here&#39;, // or omit if not relevant database: &#39;database_name_here&#39; // or omit if not relevant } Alternativamente, puede especificar su configuración de Mongo como una URL
someMongoDb: { adapter: &#39;sails-mongo&#39;, url: mongodb://username:password@hostname:port/database } Instalación # Instalar desde NPM.</description>
    </item>
    
  </channel>
</rss>

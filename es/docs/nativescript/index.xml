<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de escritura nativa on </title>
    <link>https://www.wikiod.com/es/docs/nativescript/</link>
    <description>Recent content in Tutorial de escritura nativa on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/nativescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con script nativo</title>
      <link>https://www.wikiod.com/es/nativescript/primeros-pasos-con-script-nativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/primeros-pasos-con-script-nativo/</guid>
      <description>Ventanas # Asegúrese de tener instalado el último nodeJS LTS Abra el símbolo del sistema y escriba $ npm install -g nativescript En el símbolo del sistema, escriba $ @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://www.nativescript.org/setup/win&#39;))&amp;quot; - esto puede llevar un tiempo Para verificar que lo anterior haya funcionado, escriba $ tns doctor en el símbolo del sistema (su cmd) Si hay algún error, siga con la [guía de solución de problemas] (https://docs.</description>
    </item>
    
    <item>
      <title>Visualización de datos como lista (usando Repeater, ListView o *ngFor para aplicaciones {N}&#43;Angular-2)</title>
      <link>https://www.wikiod.com/es/nativescript/visualizacion-de-datos-como-lista-usando-repeater-listview-o-ngfor-para-aplicaciones-n-angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/visualizacion-de-datos-como-lista-usando-repeater-listview-o-ngfor-para-aplicaciones-n-angular-2/</guid>
      <description>Nota: ¡No use el repetidor en aplicaciones {N}+Angular-2! *ngRepeat es una directiva obsoleta en Angular-2. Cuando necesite mostrar patrones de elementos repetidos, use la directiva estructural ListView o *ngFor.
Usar *ngFor Structural Directive para mostrar datos (nativeScript + Angular-2) # ngfor.component.html
&amp;lt;StackLayout&amp;gt; &amp;lt;Label *ngFor=&amp;quot;let item of items&amp;quot; [text]=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/Label&amp;gt; &amp;lt;/StackLayout&amp;gt; ngfor.componente.ts
import { Component } from &amp;quot;@angular/core&amp;quot;; var dataItems = [&amp;quot;data-item 1&amp;quot;, &amp;quot;data-item 2&amp;quot;, &amp;quot;data-item 3&amp;quot;] @Component({ selector: &#39;ngfor-component&#39;, styleUrls:[&amp;quot;./ngfor.component.css&amp;quot;], templateUrl: &amp;quot;.</description>
    </item>
    
    <item>
      <title>Implementando Animaciones en Nativescript</title>
      <link>https://www.wikiod.com/es/nativescript/implementando-animaciones-en-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/implementando-animaciones-en-nativescript/</guid>
      <description>Uso de la función de tiempo de animación y propiedades de animación. # páginas/principal.componente.ts
import {Component, ElementRef, ViewChild} from &amp;quot;@angular/core&amp;quot;; import {View} from &amp;quot;ui/core/view&amp;quot;; import {AnimationCurve} from &amp;quot;ui/enums&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;Image #img src=&amp;quot;~/assets/images/user-shape.png&amp;quot;&amp;gt;&amp;lt;/Image&amp;gt; &amp;lt;Button text=&amp;quot;Apply Changes&amp;quot; (tap)=&amp;quot;animateImage()&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;], }) export class MainComponent { @ViewChild(&amp;quot;img&amp;quot;) img: ElementRef; animateImage() { let img = &amp;lt;View&amp;gt;this.img.nativeElement; img.animate({ translate: { x: 0, y: 120 }, duration: 2000, curve: AnimationCurve.</description>
    </item>
    
    <item>
      <title>Estilo de plantilla nativescript</title>
      <link>https://www.wikiod.com/es/nativescript/estilo-de-plantilla-nativescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/estilo-de-plantilla-nativescript/</guid>
      <description>Agregar un diseño de muestra en su aplicación # componente.principal.ts
import {Component} from &amp;quot;@angular/core&amp;quot;; @Component({ selector: &amp;quot;main&amp;quot;, template: ` &amp;lt;StackLayout&amp;gt; &amp;lt;TextField hint=&amp;quot;some text&amp;quot;&amp;gt;&amp;lt;/TextField&amp;gt; &amp;lt;Button text=&amp;quot;Click me&amp;quot; class=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt; &amp;lt;/StackLayout&amp;gt; `, styleUrls: [&amp;quot;pages/main/main-common.css&amp;quot;, &amp;quot;pages/main/main.css&amp;quot;] }) export class MainComponent { } Método 1: CSS global # app.css &amp;ndash; Se aplica globalmente a todos los diseños.
StackLayout { margin: 10; background-color: white; } .btn, TextField { margin-left: 16; margin-right: 16; } Método 2: CSS específico de la plataforma # platform.</description>
    </item>
    
    <item>
      <title>Acceso a APIs nativas</title>
      <link>https://www.wikiod.com/es/nativescript/acceso-a-apis-nativas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/acceso-a-apis-nativas/</guid>
      <description>Escribir código java en nativescript y usarlo directamente en javascript # Esta es la imagen de la estructura del proyecto en el estudio de Android:
Esta es la imagen de la estructura del proyecto del proyecto nativescript:
Como ves son iguales. para que podamos escribir código Java en nativescript mientras escribimos en Android Studio.
Queremos agregar Toast a la aplicación predeterminada de nativescript. después de crear un nuevo proyecto nativescript, cree un directorio en el directorio java/org/example como este:</description>
    </item>
    
    <item>
      <title>usando un widget nativo</title>
      <link>https://www.wikiod.com/es/nativescript/usando-un-widget-nativo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/usando-un-widget-nativo/</guid>
      <description>Uso de SurfaceView en ng2-TNS-Android: paso a paso # Por ejemplo, desea usar surfaceView en ng2-nativescript. Como no tenemos surfaceView en nativescript, deberíamos usar placeholder.
primero debemos importar los requisitos:
import {Component} from &amp;quot;@angular/core&amp;quot;; import placeholder = require(&amp;quot;ui/placeholder&amp;quot;); let application= require(&amp;quot;application&amp;quot;); luego agregue el marcador de posición a su archivo html:
&amp;lt;Marcador de posición (creandoVista)=&amp;quot;creandoVista($evento)&amp;quot;&amp;gt;&amp;lt;/Marcador de posición&amp;gt; Agrega este método a tu clase:
public creatingView(args: any) { var nativeView = new android.</description>
    </item>
    
    <item>
      <title>Barra de estado</title>
      <link>https://www.wikiod.com/es/nativescript/barra-de-estado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/barra-de-estado/</guid>
      <description>Ocultar/mostrar - android # Esta es una barra de estado que ve en la parte superior de su pantalla con íconos de batería, reloj&amp;hellip; . let frame = require(&amp;quot;ui/frame&amp;quot;); Ocultar:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN); Espectáculo:
frame.topmost().android.activity.getWindow(). getDecorView().setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_VISIBLE ); Hacer que la barra de estado sea transparente para Android # abra APP_Resources/values/styles.xml y agregue el
&amp;lt;item name=&amp;quot;android:windowTranslucentStatus&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
in the
&amp;lt;estilo nombre=&amp;quot;AppThemeBase&amp;quot; padre=&amp;quot;Tema.AppCompat.Light.NoActionBar&amp;quot;&amp;gt; &amp;lt;/estilo&amp;gt; section.</description>
    </item>
    
    <item>
      <title>Variables globales</title>
      <link>https://www.wikiod.com/es/nativescript/variables-globales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/variables-globales/</guid>
      <description>Consola # La variable consola global de NativeScript le permite imprimir valores en su terminal para la depuración. El uso más simple es pasar un valor a la función console.log():
console.log(&amp;quot;hello world&amp;quot;); El objeto console tiene varios otros métodos, incluidos dump(), trace(), assert() y [más] (https://docs.nativescript.org/cookbook/console).
// Prints the state of a full object. console.dump({ firstName: &amp;quot;Native&amp;quot;, lastName: &amp;quot;Script&amp;quot;}); // Prints the current stack trace console.trace(); // Asserts a boolean condition, and prints to the console if the assertion fails.</description>
    </item>
    
    <item>
      <title>implementar interfaz</title>
      <link>https://www.wikiod.com/es/nativescript/implementar-interfaz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/implementar-interfaz/</guid>
      <description>implementar View.OnLayoutChangeListener en Nativescript # let playerLayoutChangeListener = new android.view.View.OnLayoutChangeListener( { onLayoutChange : function ( v:View, left:number, top:number, right:number, bottom:number, oldLeft:number, oldTop:number, oldRight:number, oldBottom:number):any { if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) { console.log(&amp;quot;OnLayoutChangeListener&amp;quot;); __this.changeSurfaceLayout(); } } }); crear una vista de superficie https://www.wikiod.com/es/proposed
Añadir oyente:
surfaceView.addOnLayoutChangeListener(playerLayoutChangeListener); quitar oyente:
surfaceView.removeOnLayoutChangeListener(playerLayoutChangeListener); </description>
    </item>
    
    <item>
      <title>Modelo de subprocesos múltiples</title>
      <link>https://www.wikiod.com/es/nativescript/modelo-de-subprocesos-multiples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/nativescript/modelo-de-subprocesos-multiples/</guid>
      <description>El nuevo motor Chrome v8 es parcialmente compatible con ES7. Entonces, si agregamos &amp;quot;use strict&amp;quot;; en la parte superior de nuestro archivo (mecanografiado haga eso cuando transpila mecanografiado) tenemos que asegurarnos de que cualquier función que esté en el ámbito global esté realmente asignada al ámbito global. entonces deberíamos usar self.functionName o global.functionName.
usar trabajadores en el servicio angular2 # /app/services/saludo.service.ts:
import { Injectable } from &#39;@angular/core&#39;; import {greetingTypes,request,response} from &#39;.</description>
    </item>
    
  </channel>
</rss>

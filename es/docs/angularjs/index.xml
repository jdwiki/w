<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de AngularJS on </title>
    <link>https://www.wikiod.com/es/docs/angularjs/</link>
    <description>Recent content in Tutorial de AngularJS on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con AngularJS</title>
      <link>https://www.wikiod.com/es/angularjs/comenzando-con-angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/comenzando-con-angularjs/</guid>
      <description>Empezando # Cree un nuevo archivo HTML y pegue el siguiente contenido:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html ng-app&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Hello, Angular&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.angularjs.org/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-init=&amp;quot;name=&#39;World&#39;&amp;quot;&amp;gt; &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt; &amp;lt;input ng-model=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;span&amp;gt;Hello, {{ name }}!&amp;lt;/span&amp;gt; &amp;lt;p ng-bind=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Demostración en vivo
Cuando abra el archivo con un navegador, verá un campo de entrada seguido del texto ¡Hola, mundo!. La edición del valor en la entrada actualizará el texto en tiempo real, sin necesidad de actualizar toda la página.</description>
    </item>
    
    <item>
      <title>Perfilado y rendimiento</title>
      <link>https://www.wikiod.com/es/angularjs/perfilado-y-rendimiento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/perfilado-y-rendimiento/</guid>
      <description>7 mejoras de rendimiento simples # 1) Repetir con moderación
El uso de ng-repeat en las vistas generalmente da como resultado un rendimiento deficiente, particularmente cuando hay ng-repeat anidados.
** ¡Esto es súper lento! **
&amp;lt;div ng-repeat=&amp;quot;user in userCollection&amp;quot;&amp;gt; &amp;lt;div ng-repeat=&amp;quot;details in user&amp;quot;&amp;gt; {{details}} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Trate de evitar las repeticiones anidadas tanto como sea posible. Una forma de mejorar el rendimiento de ng-repeat es usar track by $index (o algún otro campo de identificación).</description>
    </item>
    
    <item>
      <title>Directivas personalizadas</title>
      <link>https://www.wikiod.com/es/angularjs/directivas-personalizadas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/directivas-personalizadas/</guid>
      <description>Aquí aprenderá sobre la función Directivas de AngularJS. A continuación encontrará información sobre qué son las directivas, así como ejemplos básicos y avanzados de cómo usarlas.
Parámetros # Parámetro Detalles alcance Propiedad para establecer el alcance de la directiva. Se puede configurar como falso, verdadero o como un ámbito aislado: { @, =, &amp;lt;, &amp;amp; }. alcance: falso La directiva utiliza el ámbito principal. No se ha creado ningún ámbito para la directiva.</description>
    </item>
    
    <item>
      <title>Directivas integradas</title>
      <link>https://www.wikiod.com/es/angularjs/directivas-integradas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/directivas-integradas/</guid>
      <description>Expresiones angulares - Texto vs. Número # Este ejemplo demuestra cómo se evalúan las expresiones angulares cuando se usa type=&amp;quot;text&amp;quot; y type=&amp;quot;number&amp;quot; para el elemento de entrada. Considere el siguiente controlador y vista:
Controlador
var app = angular.module(&#39;app&#39;, []); app.controller(&#39;ctrl&#39;, function($scope) { $scope.textInput = { value: &#39;5&#39; }; $scope.numberInput = { value: 5 }; }); Vista
&amp;lt;div ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;ctrl&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;textInput.value&amp;quot;&amp;gt; {{ textInput.value + 5 }} &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;numberInput.value&amp;quot;&amp;gt; {{ numberInput.</description>
    </item>
    
    <item>
      <title>Controladores</title>
      <link>https://www.wikiod.com/es/angularjs/controladores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/controladores/</guid>
      <description>Sintaxis # &amp;lt;htmlElemento de-controlador=&amp;ldquo;nombre del controlador&amp;rdquo;&amp;gt; &amp;hellip; &amp;lt;/htmlElemento&amp;gt; &amp;lt;script&amp;gt; app.controller(&amp;lsquo;controllerName&amp;rsquo;, controllerFunction); &amp;lt;/script&amp;gt; Tu primer controlador # Un controlador es una estructura básica utilizada en Angular para preservar el alcance y manejar ciertas acciones dentro de una página. Cada controlador está acoplado con una vista HTML.
A continuación se muestra un modelo básico para una aplicación Angular:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&#39;MyFirstApp&#39;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First App&amp;lt;/title&amp;gt; &amp;lt;!-- angular source --&amp;gt; &amp;lt;script src=&amp;quot;https://code.</description>
    </item>
    
    <item>
      <title>Componentes</title>
      <link>https://www.wikiod.com/es/angularjs/componentes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/componentes/</guid>
      <description>Parámetros # Parámetro Detalles = Para usar el enlace de datos bidireccional. Esto significa que si actualiza esa variable en el ámbito de su componente, el cambio se reflejará en el ámbito principal. *&amp;lt; Enlaces unidireccionales cuando solo queremos leer un valor de un ámbito principal y no actualizarlo. *@ Parámetros de cadena. &amp;amp; Para devoluciones de llamada en caso de que su componente necesite enviar algo a su alcance principal.</description>
    </item>
    
    <item>
      <title>Promesas angulares con servicio $q</title>
      <link>https://www.wikiod.com/es/angularjs/promesas-angulares-con-servicio-q/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/promesas-angulares-con-servicio-q/</guid>
      <description>Envuelve un valor simple en una promesa usando $q.when() # Si todo lo que necesita es envolver el valor en una promesa, no necesita usar la sintaxis larga como aquí:
//OVERLY VERBOSE var defer; defer = $q.defer(); defer.resolve([&#39;one&#39;, &#39;two&#39;]); return defer.promise; En este caso, simplemente puede escribir:
//BETTER return $q.when([&#39;one&#39;, &#39;two&#39;]); $q.when y su alias $q.resolve # Envuelve un objeto que podría ser un valor o una promesa (de un tercero) en una promesa de $q.</description>
    </item>
    
    <item>
      <title>Validación de formulario</title>
      <link>https://www.wikiod.com/es/angularjs/validacion-de-formulario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/validacion-de-formulario/</guid>
      <description>Forma y estados de entrada # Los formularios angulares y las entradas tienen varios estados que son útiles al validar el contenido
Estados de entrada
Estado Descripción $tocado Campo ha sido tocado $sin tocar El campo no ha sido tocado $prístino El campo no ha sido modificado $sucio El campo ha sido modificado $válido El contenido del campo es válido $inválido El contenido del campo no es válido Todos los estados anteriores son propiedades booleanas y pueden ser verdaderos o falsos.</description>
    </item>
    
    <item>
      <title>Pruebas unitarias</title>
      <link>https://www.wikiod.com/es/angularjs/pruebas-unitarias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/pruebas-unitarias/</guid>
      <description>Este tema proporciona ejemplos de pruebas unitarias de las diversas construcciones en AngularJS. Las pruebas unitarias a menudo se escriben utilizando [Jasmine] 1, un marco de prueba popular basado en el comportamiento. Cuando realice pruebas unitarias de construcciones angulares, deberá incluir ngMock como una dependencia al ejecutar las pruebas unitarias.
Prueba unitaria de un componente (1.5+) # Código de componente:
angular.module(&#39;myModule&#39;, []).component(&#39;myComponent&#39;, { bindings: { myValue: &#39;&amp;lt;&#39; }, controller: function(MyService) { this.</description>
    </item>
    
    <item>
      <title>Servicios</title>
      <link>https://www.wikiod.com/es/angularjs/servicios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/angularjs/servicios/</guid>
      <description>Creando un servicio usando angular.factory # Primero defina el servicio (en este caso usa el patrón de fábrica):
.factory(&#39;dataService&#39;, function() { var dataObject = {}; var service = { // define the getter method get data() { return dataObject; }, // define the setter method set data(value) { dataObject = value || {}; } }; // return the &amp;quot;service&amp;quot; object to expose the getter/setter return service; }) Ahora puede usar el servicio para compartir datos entre controladores:</description>
    </item>
    
  </channel>
</rss>

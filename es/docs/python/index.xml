<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Python on </title>
    <link>https://www.wikiod.com/es/docs/python/</link>
    <description>Recent content in Tutorial del lenguaje Python on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Python</title>
      <link>https://www.wikiod.com/es/python/primeros-pasos-con-el-lenguaje-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/primeros-pasos-con-el-lenguaje-python/</guid>
      <description>Empezando # Python es un lenguaje de programación de alto nivel ampliamente utilizado para la programación de propósito general, creado por Guido van Rossum y lanzado por primera vez en 1991. Python presenta un sistema de tipos dinámicos y administración automática de memoria y admite múltiples paradigmas de programación, incluidos los orientados a objetos, imperativo, programación funcional y estilos procedimentales. Tiene una biblioteca estándar grande y completa.
Dos versiones principales de Python están actualmente en uso activo:</description>
    </item>
    
    <item>
      <title>Incompatibilidades al pasar de Python 2 a Python 3</title>
      <link>https://www.wikiod.com/es/python/incompatibilidades-al-pasar-de-python-2-a-python-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/incompatibilidades-al-pasar-de-python-2-a-python-3/</guid>
      <description>A diferencia de la mayoría de los lenguajes, Python admite dos versiones principales. Desde 2008, cuando se lanzó Python 3, muchos han hecho la transición, mientras que otros no. Para comprender ambos, esta sección cubre las diferencias importantes entre Python 2 y Python 3.
Actualmente hay dos versiones compatibles de Python: 2.7 (Python 2) y 3.6 (Python 3). Además, las versiones 3.3 y 3.4 reciben actualizaciones de seguridad en formato fuente.</description>
    </item>
    
    <item>
      <title>Generadores</title>
      <link>https://www.wikiod.com/es/python/generadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/generadores/</guid>
      <description>Los generadores son iteradores perezosos creados por funciones de generador (usando yield) o expresiones de generador (usando (an_expression for x in an_iterator)).
Sintaxis # produce &amp;lt;expr&amp;gt; rendimiento de &amp;lt;expr&amp;gt; &amp;lt;var&amp;gt; = rendimiento &amp;lt;expr&amp;gt; siguiente(&amp;lt;itero&amp;gt;) Introducción # Las expresiones generadoras son similares a las comprensiones de listas, diccionarios y conjuntos, pero están encerradas entre paréntesis. Los paréntesis no tienen que estar presentes cuando se usan como único argumento para una llamada de función.</description>
    </item>
    
    <item>
      <title>Clases</title>
      <link>https://www.wikiod.com/es/python/clases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/clases/</guid>
      <description>Python se ofrece no solo como un lenguaje de secuencias de comandos popular, sino que también es compatible con el paradigma de programación orientada a objetos. Las clases describen datos y proporcionan métodos para manipular esos datos, todo incluido en un solo objeto. Además, las clases permiten la abstracción al separar los detalles de implementación concretos de las representaciones abstractas de datos.
El código que utiliza clases es generalmente más fácil de leer, comprender y mantener.</description>
    </item>
    
    <item>
      <title>Errores comunes</title>
      <link>https://www.wikiod.com/es/python/errores-comunes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/errores-comunes/</guid>
      <description>Python es un lenguaje destinado a ser claro y legible sin ambigüedades ni comportamientos inesperados. Desafortunadamente, estos objetivos no se pueden lograr en todos los casos, y es por eso que Python tiene algunos casos extremos en los que podría hacer algo diferente de lo que esperaba.
Esta sección le mostrará algunos problemas que puede encontrar al escribir código Python.
Multiplicación de listas y referencias comunes # Considere el caso de crear una estructura de lista anidada multiplicando:</description>
    </item>
    
    <item>
      <title>Formato de cadena</title>
      <link>https://www.wikiod.com/es/python/formato-de-cadena/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/formato-de-cadena/</guid>
      <description>Al almacenar y transformar datos para que los humanos los vean, el formato de cadenas puede volverse muy importante. Python ofrece una amplia variedad de métodos de formato de cadena que se describen en este tema.
Sintaxis # &amp;ldquo;{}&amp;quot;.formato(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0}&amp;quot;.formato(42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{0:.2f}&amp;quot;.formato(42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{0:.0f}&amp;rdquo;. formato (42.1234) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{respuesta}&amp;quot;.formato(no_answer=41, respuesta=42) ==&amp;gt; &amp;ldquo;42&amp;rdquo;
&amp;ldquo;{respuesta:.2f}&amp;quot;.formato(no_answer=41, respuesta=42) ==&amp;gt; &amp;ldquo;42.00&amp;rdquo;
&amp;ldquo;{[clave]}&amp;quot;.format({&amp;lsquo;clave&amp;rsquo;: &amp;lsquo;valor&amp;rsquo;}) ==&amp;gt; &amp;ldquo;valor&amp;rdquo;
&amp;ldquo;{1}&amp;quot;.format([&amp;lsquo;cero&amp;rsquo;, &amp;lsquo;uno&amp;rsquo;, &amp;lsquo;dos&amp;rsquo;]) ==&amp;gt; &amp;ldquo;uno&amp;rdquo;
&amp;ldquo;{respuesta} = {respuesta}&amp;quot;.</description>
    </item>
    
    <item>
      <title>Decoradores</title>
      <link>https://www.wikiod.com/es/python/decoradores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/decoradores/</guid>
      <description>Las funciones de decorador son patrones de diseño de software. Alteran dinámicamente la funcionalidad de una función, método o clase sin tener que usar subclases directamente o cambiar el código fuente de la función decorada. Cuando se usan correctamente, los decoradores pueden convertirse en herramientas poderosas en el proceso de desarrollo. Este tema cubre la implementación y las aplicaciones de las funciones de decorador en Python.
Sintaxis # def función_decorador(f): pase # define un decorador llamado función_decorador</description>
    </item>
    
    <item>
      <title>Lista de comprensiones</title>
      <link>https://www.wikiod.com/es/python/lista-de-comprensiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/lista-de-comprensiones/</guid>
      <description>Una lista por comprensión es una herramienta sintáctica para crear listas de forma natural y concisa, como se ilustra en el siguiente código para hacer una lista de cuadrados de los números del 1 al 10:
[i ** 2 para i en el rango (1,11)]
La &amp;lsquo;i&amp;rsquo; ficticia de una lista &amp;lsquo;rango&amp;rsquo; existente se usa para hacer un nuevo patrón de elementos. Se utiliza cuando sería necesario un bucle for en lenguajes menos expresivos.</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>https://www.wikiod.com/es/python/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/funciones/</guid>
      <description>Las funciones en Python proporcionan código organizado, reutilizable y modular para realizar un conjunto de acciones específicas. Las funciones simplifican el proceso de codificación, evitan la lógica redundante y facilitan el seguimiento del código. Este tema describe la declaración y utilización de funciones en Python.
Python tiene muchas funciones integradas como print(), input(), len(). Además de las funciones integradas, también puede crear sus propias funciones para realizar trabajos más específicos; estas se denominan funciones definidas por el usuario.</description>
    </item>
    
    <item>
      <title>Lista de desestructuración (también conocido como embalaje y desembalaje)</title>
      <link>https://www.wikiod.com/es/python/lista-de-desestructuracion-tambien-conocido-como-embalaje-y-desembalaje/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/python/lista-de-desestructuracion-tambien-conocido-como-embalaje-y-desembalaje/</guid>
      <description>Asignación de desestructuración # En las asignaciones, puede dividir un Iterable en valores utilizando la sintaxis de &amp;ldquo;desempaquetado&amp;rdquo;:
Desestructuración como valores # a, b = (1, 2) print(a) # Prints: 1 print(b) # Prints: 2 Si intenta desempaquetar más que la longitud del iterable, obtendrá un error:
a, b, c = [1] # Raises: ValueError: not enough values to unpack (expected 3, got 1) Desestructuración como lista # Puede desempaquetar una lista de longitud desconocida usando la siguiente sintaxis:</description>
    </item>
    
  </channel>
</rss>

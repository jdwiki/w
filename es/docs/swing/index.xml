<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de columpio on </title>
    <link>https://www.wikiod.com/es/docs/swing/</link>
    <description>Recent content in Tutorial de columpio on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/swing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con el swing</title>
      <link>https://www.wikiod.com/es/swing/comenzando-con-el-swing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/comenzando-con-el-swing/</guid>
      <description>Incrementando con un botón # import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; import javax.swing.WindowConstants; /** * A very simple Swing example. */ public class SwingExample { /** * The number of times the user has clicked the button. */ private long clickCount; /** * The main method: starting point of this application. * * @param arguments the unused command-line arguments. */ public static void main(final String[] arguments) { new SwingExample().</description>
    </item>
    
    <item>
      <title>Uso de Swing para interfaces gráficas de usuario</title>
      <link>https://www.wikiod.com/es/swing/uso-de-swing-para-interfaces-graficas-de-usuario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/uso-de-swing-para-interfaces-graficas-de-usuario/</guid>
      <description>Salir de la aplicación al cerrar la ventana # Es fácil olvidarse de salir de la aplicación cuando se cierra la ventana. Recuerda agregar la siguiente línea.
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //Quit the application when the JFrame is closed Crear una ventana vacía (JFrame) # Creando el JFrame # Crear una ventana es fácil. Solo tienes que crear un JFrame.
JFrame frame = new JFrame(); Titular la ventana # Es posible que desee darle un título a su ventana.</description>
    </item>
    
    <item>
      <title>Diseño de GridBag</title>
      <link>https://www.wikiod.com/es/swing/diseno-de-gridbag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/diseno-de-gridbag/</guid>
      <description>Sintaxis # frame.setLayout(nuevo GridBagLayout()); // Establecer GridBagLayout para marco panel.setLayout(nuevo GridBagLayout()); // Establecer GridBagLayout para Panel Panel JPanel = nuevo JPanel(nuevo GridBagLayout()); // Establecer GridBagLayout para Panel GridBagConstraints c = new GridBagConstraints() //Inicializa una GridBagConstraint ¿Cómo funciona GridBagLayout? # Los diseños se utilizan cuando desea que sus componentes no solo se muestren uno al lado del otro. El GridBagLayout es útil, ya que divide su ventana en filas y columnas, y usted decide en qué fila y columna colocar los componentes, así como cuántas filas y columnas tiene el componente.</description>
    </item>
    
    <item>
      <title>Diseño de cuadrícula</title>
      <link>https://www.wikiod.com/es/swing/diseno-de-cuadricula/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/diseno-de-cuadricula/</guid>
      <description>Cómo funciona GridLayout # Un GridLayout es un administrador de diseño que coloca componentes dentro de una cuadrícula con tamaños de celda iguales. Puede establecer el número de filas, columnas, el espacio horizontal y el espacio vertical utilizando los siguientes métodos:
setRows(int filas) setColumns(columnas int) setHgap(int hgap) setVgap(int vgap) o puede configurarlos con los siguientes constructores:
GridLayout(int filas, int columnas) GridLayout(int filas, int columnas, int hgap, int vgap) Si se desconoce el número de filas o columnas, puede establecer la variable respectiva en 0.</description>
    </item>
    
    <item>
      <title>Patrón MVP</title>
      <link>https://www.wikiod.com/es/swing/patron-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/patron-mvp/</guid>
      <description>Ejemplo de MVP simple # Para ilustrar un ejemplo simple de uso del patrón MVP, considere el siguiente código que crea una interfaz de usuario simple con solo un botón y una etiqueta. Cuando se hace clic en el botón, la etiqueta se actualiza con el número de veces que se ha hecho clic en el botón.
Tenemos 5 clases:
Modelo - El POJO para mantener el estado (M en MVP) Ver - La clase con código UI (V en MVP) ViewListener: interfaz que proporciona métodos para responder a las acciones en la vista Presentador: responde a la entrada y actualiza la vista (P en MVP) Aplicación: la clase &amp;ldquo;principal&amp;rdquo; para juntar todo e iniciar la aplicación Una clase de &amp;ldquo;modelo&amp;rdquo; mínima que solo mantiene una sola variable contar.</description>
    </item>
    
    <item>
      <title>Documento con estilo</title>
      <link>https://www.wikiod.com/es/swing/documento-con-estilo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/documento-con-estilo/</guid>
      <description>Sintaxis # doc.insertString(índice, texto, atributos); //los atributos deben ser un AttributeSet Creación de un documento con estilo predeterminado # Agregando StyledDocument a JTextPane # Copiar documento con estilo predeterminado # Serializar un documento con estilo predeterminado a RTF # </description>
    </item>
    
    <item>
      <title>Usando Mirar y Sentir</title>
      <link>https://www.wikiod.com/es/swing/usando-mirar-y-sentir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/usando-mirar-y-sentir/</guid>
      <description>Uso del sistema L&amp;amp;F # Swing admite bastantes L&amp;amp;F nativos.
Siempre puede instalar uno fácilmente sin llamar a una clase L&amp;amp;F específica:
public class SystemLookAndFeel { public static void main ( final String[] args ) { // L&amp;amp;F installation should be performed within EDT (Event Dispatch Thread) // This is important to avoid any UI issues, exceptions or even deadlocks SwingUtilities.invokeLater ( new Runnable () { @Override public void run () { // Process of L&amp;amp;F installation might throw multiple exceptions // It is always up to you whether to handle or ignore them // In most common cases you would never encounter any of those try { // Installing native L&amp;amp;F as a current application L&amp;amp;F // We do not know what exactly L&amp;amp;F class is, it is provided by the UIManager UIManager.</description>
    </item>
    
    <item>
      <title>Trabajadores Swing y la EDT</title>
      <link>https://www.wikiod.com/es/swing/trabajadores-swing-y-la-edt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/trabajadores-swing-y-la-edt/</guid>
      <description>Sintaxis # clase pública abstracta SwingWorker&amp;lt;T,V&amp;gt;
T - el tipo de resultado devuelto por los métodos doInBackground y get de este SwingWorker.
V - el tipo utilizado para llevar a cabo resultados intermedios por los métodos de publicación y proceso de este SwingWorker.
T doInBackground() - La función abstracta que debe anularse. El tipo de devolución es T.
Hilo principal y de envío de eventos # Como cualquier otro programa java, cada programa swing comienza con un método principal.</description>
    </item>
    
    <item>
      <title>Gráficos</title>
      <link>https://www.wikiod.com/es/swing/graficos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/graficos/</guid>
      <description>Usando la clase de Gráficos # Introducción # La clase Graphics le permite dibujar en componentes Java como Jpanel, se puede usar para dibujar cadenas, líneas, formas e imágenes. Esto se hace anulando el método paintComponent(Graphics g) del JComponent que está dibujando usando el objeto Graphics recibido como argumento para hacer el dibujo:
clase Tablero # import java.awt.*; import javax.swing.*; public class Board extends JPanel{ public Board() { setBackground(Color.WHITE); } @override public Dimension getPreferredSize() { return new Dimension(400, 400); } public void paintComponent(Graphics g) { super.</description>
    </item>
    
    <item>
      <title>MigLayout</title>
      <link>https://www.wikiod.com/es/swing/miglayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/swing/miglayout/</guid>
      <description>Elementos de envoltura # Este ejemplo demuestra cómo colocar 3 botones en total con 2 botones en la primera fila. Luego se produce un ajuste, por lo que el último botón está en una nueva fila.
Las restricciones son cadenas simples, en este caso &amp;ldquo;envolver&amp;rdquo; al colocar el componente.
public class ShowMigLayout { // Create the elements private final JFrame demo = new JFrame(); private final JPanel panel = new JPanel(); private final JButton button1 = new JButton(&amp;quot;First Button&amp;quot;); private final JButton button2 = new JButton(&amp;quot;Second Button&amp;quot;); private final JButton button3 = new JButton(&amp;quot;Third Button&amp;quot;); public static void main(String[] args) { ShowMigLayout showMigLayout = new ShowMigLayout(); SwingUtilities.</description>
    </item>
    
  </channel>
</rss>

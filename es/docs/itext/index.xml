<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de itexto on </title>
    <link>https://www.wikiod.com/es/docs/itext/</link>
    <description>Recent content in Tutorial de itexto on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/itext/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con itext</title>
      <link>https://www.wikiod.com/es/itext/comenzando-con-itext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/comenzando-con-itext/</guid>
      <description>Hola Mundo # Este es un programa muy simple para crear un PDF usando iText 7 / Java:
//Initialize writer PdfWriter writer = new PdfWriter(dest); //Initialize document PdfDocument pdfDoc = new PdfDocument(writer); Document doc = new Document(pdfDoc); //Add paragraph to the document doc.add(new Paragraph(&amp;quot;Hello World!&amp;quot;)); //Close document doc.close(); (Listado_01_01_HolaMundo.java)
Puede navegar a muchos otros ejemplos desde esa página.
Y este es un programa muy simple para crear un PDF usando el precursor iText 5.</description>
    </item>
    
    <item>
      <title>Texto a PDF iText 5 frente a iText 7</title>
      <link>https://www.wikiod.com/es/itext/texto-a-pdf-itext-5-frente-a-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/texto-a-pdf-itext-5-frente-a-itext-7/</guid>
      <description>El código para convertir un archivo de texto sin formato en un documento PDF es bastante simple, ya sea que use iText 5 o iText 7. En iText 7, tiene la ventaja de que puede definir la alineación a nivel del documento. En iText 5, debe establecer la alineación para cada objeto &amp;lsquo;Párrafo&amp;rsquo; separado.
Para comprender la diferencia real entre iText 5 e iText 7 en este par de ejemplos, tenemos que echar un vistazo al PDF resultante.</description>
    </item>
    
    <item>
      <title>Tablas iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/es/itext/tablas-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/tablas-itext-5-versus-itext-7/</guid>
      <description>Se eligieron los nombres de clase de iText 5 PdfPTable y PdfPCell porque ya teníamos clases llamadas Table y Cell para crear objetos de tabla y celda al más alto nivel de programación. También había una clase llamada PdfTable para ser utilizada internamente por iText. Esas clases tenían muchas fallas y quedaron en desuso en favor de PdfPTable y PdfPCell. Han sido eliminados hace mucho tiempo.
A lo largo de los años, PdfPTable y PdfPCell también recibieron algunas críticas por parte de los usuarios.</description>
    </item>
    
    <item>
      <title>Creación de PDF iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/es/itext/creacion-de-pdf-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/creacion-de-pdf-itext-5-versus-itext-7/</guid>
      <description>En el diseño original de iText, era posible crear un objeto &amp;lsquo;Documento&amp;rsquo; de alto nivel y luego tener diferentes objetos &amp;lsquo;DocListener&amp;rsquo; escuchando ese objeto &amp;lsquo;Documento&amp;rsquo;. Esto se logró mediante el uso de diferentes escritores: un PdfWriter, un HTMLWriter y un RtfWriter. Cuando se usaba un PdfWriter, se creaba internamente un PdfDocument. Esta clase de bajo nivel se encargó de todas las estructuras relacionadas con PDF. Más o menos lo mismo sucedió con los otros formatos.</description>
    </item>
    
    <item>
      <title>Formularios iText 5 frente a iText 7</title>
      <link>https://www.wikiod.com/es/itext/formularios-itext-5-frente-a-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/formularios-itext-5-frente-a-itext-7/</guid>
      <description>iText 5 es una biblioteca que ha crecido orgánicamente. Muchos desarrolladores contribuyeron con el código. Por ejemplo: un desarrollador aportó código para crear campos de formulario desde cero, utilizando clases como TextField y PdfFormField; otro desarrollador aportó código para cambiar los campos de formulario existentes, utilizando la clase AcroField y una serie de métodos setFieldProperty().
En iText 5, las clases que se usan para crear campos de formulario no se pueden usar para cambiar campos de formulario y viceversa.</description>
    </item>
    
    <item>
      <title>Fuentes iText 5 frente a iText 7</title>
      <link>https://www.wikiod.com/es/itext/fuentes-itext-5-frente-a-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/fuentes-itext-5-frente-a-itext-7/</guid>
      <description>En las primeras versiones de iText, solo había una clase de fuente: Fuente.
Con esta fuente, puede crear un objeto &amp;lsquo;Fuente&amp;rsquo; para catorce fuentes de cinco familias de fuentes: Helvetica (regular, negrita, oblicua, negrita-oblicua), Times Roman (regular, negrita, cursiva, negrita-cursiva), Courier (regular , negrita, oblicua, negrita-oblicua), Symbol y Zapf Dingbats.
Tal objeto Fuente se creó así:
Font font = new Font(FontFamily.TIMES_ROMAN); También tenías que definir el tamaño de la fuente, por ejemplo:</description>
    </item>
    
    <item>
      <title>Estilos iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/es/itext/estilos-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/estilos-itext-5-versus-itext-7/</guid>
      <description>Crear un documento en el que tengas que cambiar entre estilos con frecuencia tiende a ser tedioso en iText 5. Necesitas crear muchos objetos Chunk y siempre tienes que hacer un compromiso entre aplicar los estilos directamente a cada nuevo Chunk o crear un método auxiliar que cree el Chunk para usted.
Lo que arreglamos en iText 7:
Ahora es posible encadenar métodos. Los métodos setFont(), setFontSize(), addStyle() y otros métodos devuelven el objeto en el que se invocan.</description>
    </item>
    
    <item>
      <title>Eventos de página (iText 5) versus controladores de eventos y renderizadores (iText 7)</title>
      <link>https://www.wikiod.com/es/itext/eventos-de-pagina-itext-5-versus-controladores-de-eventos-y-renderizadores-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/eventos-de-pagina-itext-5-versus-controladores-de-eventos-y-renderizadores-itext-7/</guid>
      <description>En iText 5, presentamos el concepto de eventos de página para permitir a los desarrolladores agregar un comportamiento específico cuando se abre un documento, cuando se abre una página nueva, cuando finaliza una página y cuando se cierra un documento.
En la documentación, dejamos muy claro que estaba prohibido agregar contenido en el método onStartPage(); el contenido solo se puede agregar en el método onEndPage(). También dejamos muy claro que el objeto Documento pasado a los métodos de eventos de la página se pasó solo para propósitos de lectura únicamente.</description>
    </item>
    
    <item>
      <title>Columnas iText 5 versus iText 7</title>
      <link>https://www.wikiod.com/es/itext/columnas-itext-5-versus-itext-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/columnas-itext-5-versus-itext-7/</guid>
      <description>En iText 5, no puede usar el método add() para agregar un Párrafo a un Documento si desea organizar el contenido en columnas. No podemos reutilizar el código del ejemplo https://www.wikiod.com/es/itext/texto-a-pdf-itext-5-frente-a-itext-7#Texto2Pdf.java (iText 5)
En su lugar, tenemos que crear un objeto ColumnText, tenemos que agregar todos los objetos Paragraph a este objeto, y una vez que hayamos terminado de agregar todo el contenido, podemos comenzar a representar ese contenido usando el método go().</description>
    </item>
    
    <item>
      <title>Preguntas y respuestas sobre las versiones</title>
      <link>https://www.wikiod.com/es/itext/preguntas-y-respuestas-sobre-las-versiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/itext/preguntas-y-respuestas-sobre-las-versiones/</guid>
      <description>Algunas preguntas frecuentes sobre los números de versión en iText.
¿Por qué los números de versión saltan del 2 al 5 y del 5 al 7? Hay varias razones para omitir los números de versión. En 2009, el número de versión de iText (Java) e iTextSharp (C#) no estaban sincronizados. La versión de Java estaba en la versión 2.1.7; la versión de C# estaba en la versión 4.1.6. Se tomó la decisión de pasar a Java 5 para la versión de Java y armonizar los números de versión de iText e iTextSharp.</description>
    </item>
    
  </channel>
</rss>

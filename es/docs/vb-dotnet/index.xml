<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Visual Basic .NET on </title>
    <link>https://www.wikiod.com/es/docs/vb-dotnet/</link>
    <description>Recent content in Tutorial del lenguaje Visual Basic .NET on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/vb-dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducción al lenguaje Visual Basic .NET</title>
      <link>https://www.wikiod.com/es/vb-dotnet/introduccion-al-lenguaje-visual-basic-net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/introduccion-al-lenguaje-visual-basic-net/</guid>
      <description>Hola Mundo # Primero, instale una versión de Microsoft Visual Studio, incluida la edición Community gratuita. Luego, cree un proyecto de aplicación de consola de Visual Basic de tipo Aplicación de consola, y el siguiente código imprimirá la cadena &#39;Hello World&#39; en la consola:
Module Module1 Sub Main() Console.WriteLine(&amp;quot;Hello World&amp;quot;) End Sub End Module Luego, guarde y presione F5 en el teclado (o vaya al menú Depurar, luego haga clic en Ejecutar sin depurar o Ejecutar) para compilar y ejecutar el programa.</description>
    </item>
    
    <item>
      <title>Características de Visual Basic 14.0</title>
      <link>https://www.wikiod.com/es/vb-dotnet/caracteristicas-de-visual-basic-140/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/caracteristicas-de-visual-basic-140/</guid>
      <description>Visual Basic 14 es la versión de Visual Basic que se envió como parte de Visual Studio 2015.
Esta versión fue reescrita desde cero en alrededor de 1,3 millones de líneas de VB. Se agregaron muchas funciones para eliminar irritaciones comunes y hacer que los patrones de codificación comunes sean más limpios.
El número de versión de Visual Basic pasó directamente de 12 a 14, omitiendo 13. Esto se hizo para mantener VB en línea con la numeración de versiones de Visual Studio.</description>
    </item>
    
    <item>
      <title>Formación</title>
      <link>https://www.wikiod.com/es/vb-dotnet/formacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/formacion/</guid>
      <description>Dim myArray(2) As Integer someFunc(myArray) Una matriz es una colección de objetos ordenada por índice. El tipo de objeto se define por el tipo dado en la declaración de la matriz.
Las matrices en Visual Basic .NET se basan más comúnmente (y de forma predeterminada) en cero (0), lo que significa que el primer índice es 0. Una matriz de 10 elementos tendrá un rango de índice de 0-9. Al acceder a los elementos de la matriz, el índice máximo accesible es uno menos que el número total de elementos.</description>
    </item>
    
    <item>
      <title>Bucle</title>
      <link>https://www.wikiod.com/es/vb-dotnet/bucle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/bucle/</guid>
      <description>Para&amp;hellip; Siguiente # El bucle For&amp;hellip;Next se utiliza para repetir la misma acción un número finito de veces. Las declaraciones dentro del siguiente bucle se ejecutarán 11 veces. La primera vez, i tendrá el valor 0, la segunda vez tendrá el valor 1, la última vez tendrá el valor 10.
For i As Integer = 0 To 10 &#39;Execute the action Console.Writeline(i.ToString) Next Se puede utilizar cualquier expresión entera para parametrizar el bucle.</description>
    </item>
    
    <item>
      <title>enumeración</title>
      <link>https://www.wikiod.com/es/vb-dotnet/enumeracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/enumeracion/</guid>
      <description>ObtenerNombres() # Devuelve los nombres de las constantes en el Enum especificado como una matriz de cadenas:
Module Module1 Enum Size Small Medium Large End Enum Sub Main() Dim sizes = [Enum].GetNames(GetType(Size)) For Each size In sizes Console.WriteLine(size) Next End Sub End Module Producción:
Pequeño
Medio
Grande
Tiene Bandera() # El método HasFlag() se puede utilizar para comprobar si se ha establecido una bandera.
Module Module1 &amp;lt;Flags&amp;gt; Enum Material Wood = 1 Plastic = 2 Metal = 4 Stone = 8 End Enum Sub Main() Dim houseMaterials As Material = Material.</description>
    </item>
    
    <item>
      <title>Opción estricta</title>
      <link>https://www.wikiod.com/es/vb-dotnet/opcion-estricta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/opcion-estricta/</guid>
      <description>Sintaxis # Opción estricta { On | Apagado } Option Strict On es una buena práctica recomendada con Visual Basic .Net. Le ayuda como desarrollador a producir un código más limpio, más estable, más libre de errores y más fácil de mantener. En algunos casos, también puede ayudarlo a escribir programas con un mejor rendimiento, evitando cosas como la conversión implícita.
On no es la configuración predeterminada para una nueva instalación de Visual Studio.</description>
    </item>
    
    <item>
      <title>Palabras clave orientadas a objetos</title>
      <link>https://www.wikiod.com/es/vb-dotnet/palabras-clave-orientadas-a-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/palabras-clave-orientadas-a-objetos/</guid>
      <description>Definiendo una clase # Las clases son aspectos vitales de la programación orientada a objetos. Una clase es como el &amp;ldquo;plano&amp;rdquo; de un objeto. Un objeto tiene las propiedades de una clase, pero las características no están definidas dentro de la propia clase. Como cada objeto puede ser diferente, definen sus propias características.
Public Class Person End Class Public Class Customer End Class Una clase también puede contener subclases. Una subclase hereda las mismas propiedades y comportamientos que su clase principal, pero puede tener sus propias propiedades y clases únicas.</description>
    </item>
    
    <item>
      <title>Introducción a la sintaxis</title>
      <link>https://www.wikiod.com/es/vb-dotnet/introduccion-a-la-sintaxis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/introduccion-a-la-sintaxis/</guid>
      <description>Ayudante Intellisense # Una cosa interesante es la capacidad de agregar sus propios comentarios en Visual Studio Intellisense. Por lo tanto, puede hacer que sus propias funciones y clases escritas se expliquen por sí mismas. Para hacerlo, debe escribir el símbolo de comentario tres veces en la línea sobre su función.
Una vez hecho esto, Visual Studio agregará automáticamente una documentación XML:
&#39;&#39;&#39; &amp;lt;summary&amp;gt; &#39;&#39;&#39; This function returns a hello to your name &#39;&#39;&#39; &amp;lt;/summary&amp;gt; &#39;&#39;&#39; &amp;lt;param name=&amp;quot;Name&amp;quot;&amp;gt;Your Name&amp;lt;/param&amp;gt; &#39;&#39;&#39; &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; &#39;&#39;&#39; &amp;lt;remarks&amp;gt;&amp;lt;/remarks&amp;gt; Public Function Test(Name As String) As String Return &amp;quot;Hello &amp;quot; &amp;amp; Name End Function Después de eso, si escribe su función de prueba en algún lugar de su código, aparecerá esta pequeña ayuda:</description>
    </item>
    
    <item>
      <title>enhebrar</title>
      <link>https://www.wikiod.com/es/vb-dotnet/enhebrar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/enhebrar/</guid>
      <description>Realización de llamadas seguras para subprocesos mediante Control.Invoke() # Usando el método Control.Invoke(), puede mover la ejecución de un método o función desde un subproceso en segundo plano al subproceso en el que se creó el control, que generalmente es el subproceso UI (interfaz de usuario). Al hacerlo, su código se pondrá en cola para ejecutarse en el subproceso del control, lo que elimina la posibilidad de concurrencia.
La propiedad Control.</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/es/vb-dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/vb-dotnet/linq/</guid>
      <description>LINQ (Language Integrated Query) es una expresión que recupera datos de una fuente de datos. LINQ simplifica esta situación al ofrecer un modelo consistente para trabajar con datos en varios tipos de fuentes y formatos de datos. En una consulta LINQ, siempre está trabajando con objetos. Utiliza los mismos patrones de codificación básicos para consultar y transformar datos en documentos XML, bases de datos SQL, conjuntos de datos ADO.NET, colecciones .</description>
    </item>
    
  </channel>
</rss>

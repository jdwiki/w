<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial de meteoros on </title>
    <link>https://www.wikiod.com/es/docs/meteor/</link>
    <description>Recent content in tutorial de meteoros on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/meteor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con el meteorito</title>
      <link>https://www.wikiod.com/es/meteor/comenzando-con-el-meteorito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/comenzando-con-el-meteorito/</guid>
      <description>Empezando # Instalar meteorito # En OS X y Linux # Instala la última versión oficial de Meteor desde tu terminal:
$ curl https://install.meteor.com/ | sh En Windows # [Descargue el instalador oficial de Meteor aquí] (https://install.meteor.com/windows).
Crea tu aplicación # Una vez que hayas instalado Meteor, crea un proyecto:
$ meteor create myapp Ejecutarlo # Ejecutarlo localmente:
$ cd myapp $ meteor npm install $ meteor Nota: Servidor Meteor ejecutándose en: http://localhost:3000/</description>
    </item>
    
    <item>
      <title>Publicación de datos</title>
      <link>https://www.wikiod.com/es/meteor/publicacion-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/publicacion-de-datos/</guid>
      <description>Dentro del subsistema de datos de Meteor, una publicación de servidor y sus correspondientes suscripciones de clientes son los principales mecanismos de transporte de datos reactivos y en vivo donde los datos subyacentes se sincronizan constantemente entre el servidor y el cliente.
Publicaciones globales # Una publicación global no posee un nombre y no requiere una suscripción del cliente conectado y, por lo tanto, está disponible para el cliente conectado tan pronto como el cliente se conecta al servidor.</description>
    </item>
    
    <item>
      <title>Estructura de directorios</title>
      <link>https://www.wikiod.com/es/meteor/estructura-de-directorios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/estructura-de-directorios/</guid>
      <description>Antes del lanzamiento de Meteor 1.3, los desarrolladores de Meteor estaban frustrados con el manejo de dependencias de archivos y variables globales de Meteor.js. En respuesta, Meteor estableció nuevos estándares para las estructuras de los proyectos con el fin de optimizar el sistema de dependencia del proyecto. Este tema explica la estructura del proyecto estandarizado y los principios detrás de él.
cliente Todo el código en el directorio del cliente se ejecuta solo en el lado del cliente o en el navegador web.</description>
    </item>
    
    <item>
      <title>Guía para principiantes sobre la instalación de Meteor 1.4 en AWS EC2</title>
      <link>https://www.wikiod.com/es/meteor/guia-para-principiantes-sobre-la-instalacion-de-meteor-14-en-aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/guia-para-principiantes-sobre-la-instalacion-de-meteor-14-en-aws-ec2/</guid>
      <description>Regístrese en el servicio de AWS # Dado que muchos principiantes están confundidos acerca del alojamiento en la nube, estoy escribiendo esta guía para recorrer la configuración de meteoritos en aws con ubuntu os. Si ya tiene su instancia ejecutándose, no dude en omitir este paso e ir directamente a instalar Meteor en AWS.
Inicie sesión en la consola de AWS. Seleccione EC2. Vaya al panel EC2. En Crear instancia, haga clic en iniciar instancia.</description>
    </item>
    
    <item>
      <title>Meteorito &#43; Reaccionar</title>
      <link>https://www.wikiod.com/es/meteor/meteorito--reaccionar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/meteorito--reaccionar/</guid>
      <description>React es una biblioteca de JavaScript para crear interfaces de usuario. Es código abierto, desarrollado y mantenido por Facebook. Meteor tiene soporte listo para producción para React.
Recursos:
Tutorial de reacción [Tutorial de Meteor + React] (https://www.meteor.com/tutorials/react/creating-an-app) Configuración y &amp;ldquo;Hola Mundo&amp;rdquo; # Agregue React a su proyecto:
meteor npm install --save react react-dom react-mounter Cree el archivo client/helloworld.jsx para mostrar un componente React simple:
import React, { Component } from &#39;react&#39;; import { mount } from &#39;react-mounter&#39;; // This component only renders a paragraph containing &amp;quot;Hello World!</description>
    </item>
    
    <item>
      <title>Uso de Meteor con un servidor proxy</title>
      <link>https://www.wikiod.com/es/meteor/uso-de-meteor-con-un-servidor-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/uso-de-meteor-con-un-servidor-proxy/</guid>
      <description>Uso de la variable de entorno HTTP[S]_PROXY # Esta página describe cómo usar la herramienta de línea de comandos Meteor (por ejemplo, al descargar paquetes, implementar su aplicación, etc.) detrás de un servidor proxy.
Como muchos otros programas de línea de comandos, la herramienta Meteor lee la configuración del proxy de las variables de entorno HTTP_PROXY y HTTPS_PROXY (las variantes en minúsculas también funcionan). Ejemplos de ejecutar Meteor detrás de un proxy:</description>
    </item>
    
    <item>
      <title>Electrify Compilación de Meteor como una aplicación instalable localmente</title>
      <link>https://www.wikiod.com/es/meteor/electrify-compilacion-de-meteor-como-una-aplicacion-instalable-localmente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/electrify-compilacion-de-meteor-como-una-aplicacion-instalable-localmente/</guid>
      <description>Instalación de Electrify para una aplicación Meteor # Electron transfiere aplicaciones web HTML a aplicaciones nativas para una variedad de dispositivos, incluida la creación de aplicaciones de escritorio nativas. ¡También es muy fácil comenzar!
Para empezar, debemos tener electron, nodejs, npm, git y meteor instalados. La familiaridad con estas herramientas es vital para trabajar con Meteor, así que asegúrese de conocer estas cosas primero.
Electrón
npm install -g electrify ¡electron es lo que estamos usando!</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.wikiod.com/es/meteor/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/mongodb/</guid>
      <description>MongoDB es un programa de base de datos orientado a documentos multiplataforma gratuito y de código abierto. A diferencia de las bases de datos SQL clásicas, MongoDB usa BSON (como JSON) para almacenar datos. Meteor fue diseñado para usar MongoDB para el almacenamiento de bases de datos y este tema explica cómo implementar el almacenamiento de MongoDB en las aplicaciones de Meteor.
Exportar una base de datos remota de Mongo, importar a una base de datos local de Meteor Mongo # Útil cuando desea obtener una copia de una base de datos de producción para jugar localmente.</description>
    </item>
    
    <item>
      <title>Plantillas Blaze</title>
      <link>https://www.wikiod.com/es/meteor/plantillas-blaze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/plantillas-blaze/</guid>
      <description>Blaze es una poderosa biblioteca para crear interfaces de usuario escribiendo plantillas HTML dinámicas y reactivas. Las plantillas de Blaze permiten que los bucles y la lógica condicional se utilicen directamente en el marcado HTML. Esta sección explica y demuestra el uso correcto de las plantillas en Meteor.js con Blaze.
Rellenar una plantilla a partir de una llamada de método # &amp;lt;template name=&amp;quot;myTemplate&amp;quot;&amp;gt; {{#each results}} &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;{{name}}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;{{age}}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt; {{/each}} &amp;lt;/template&amp;gt; Template.myTemplate.onCreated(function() { this.</description>
    </item>
    
    <item>
      <title>Recuperación de datos de un Meteor.call</title>
      <link>https://www.wikiod.com/es/meteor/recuperacion-de-datos-de-un-meteorcall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/meteor/recuperacion-de-datos-de-un-meteorcall/</guid>
      <description>Los fundamentos de Meteor.call # Meteor.call(name, [arg1, arg2...], [asyncCallback]) (1) cadena de nombre (2) Nombre del método a invocar (3) arg1, arg2&amp;hellip; Objeto compatible con EJSON [Opcional]
(4) Función asyncCallback [Opcional]
Por un lado, puedes hacer: (vía Sesión variable, o vía ReactiveVar)
var syncCall = Meteor.call(&amp;quot;mymethod&amp;quot;) // Sync call Significa que si haces algo como esto, del lado del servidor harás:
Meteor.methods({ mymethod: function() { let asyncToSync = Meteor.wrapAsync(asynchronousCall); // do something with the result; return asyncToSync; } }); Por otro lado, a veces querrá mantenerlo a través del resultado de la devolución de llamada.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de Linq on </title>
    <link>https://www.wikiod.com/es/docs/linq/</link>
    <description>Recent content in Tutorial de Linq on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/linq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empezando con linq</title>
      <link>https://www.wikiod.com/es/linq/empezando-con-linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/linq/empezando-con-linq/</guid>
      <description>Configuración # LINQ requiere .NET 3.5 o superior (o .NET 2.0 usando LINQBridge).
Agregue una referencia a System.Core, si aún no se ha agregado.
En la parte superior del archivo, importe el espacio de nombres:
C# using System; using System.Linq; VB.NET Imports System.Linq Las diferentes uniones en LINQ # En los siguientes ejemplos, usaremos las siguientes muestras:
List&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;() { new Product() { ProductId = 1, Name = &amp;quot;Book nr 1&amp;quot;, Price = 25 }, new Product() { ProductId = 2, Name = &amp;quot;Book nr 2&amp;quot;, Price = 15 }, new Product() { ProductId = 3, Name = &amp;quot;Book nr 3&amp;quot;, Price = 20 }, }; List&amp;lt;Order&amp;gt; Orders = new List&amp;lt;Order&amp;gt;() { new Order() { OrderId = 1, ProductId = 1, }, new Order() { OrderId = 2, ProductId = 1, }, new Order() { OrderId = 3, ProductId = 2, }, new Order() { OrderId = 4, ProductId = NULL, }, }; UNIR INTERNAMENTE Sintaxis de consulta</description>
    </item>
    
    <item>
      <title>Operadores de consulta estándar</title>
      <link>https://www.wikiod.com/es/linq/operadores-de-consulta-estandar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/linq/operadores-de-consulta-estandar/</guid>
      <description>Las consultas de Linq se escriben usando los Operadores de consulta estándar (que son un conjunto de métodos de extensión que operan principalmente en objetos de tipo IEnumerable&amp;lt;T&amp;gt; e IQueryable&amp;lt;T&amp;gt;) o usando Expresiones de consulta (que, en tiempo de compilación, se convierten en llamadas de método de operador de consulta estándar).
Los operadores de consulta brindan capacidades de consulta que incluyen filtrado, proyección, agregación, clasificación y más.
Operaciones de agregación # Las operaciones de agregación calculan un solo valor de una colección de valores.</description>
    </item>
    
    <item>
      <title>Modos de ejecución de métodos transmisión inmediata, diferida, sin transmisión diferida</title>
      <link>https://www.wikiod.com/es/linq/modos-de-ejecucion-de-metodos-transmision-inmediata-diferida-sin-transmision-diferida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/linq/modos-de-ejecucion-de-metodos-transmision-inmediata-diferida-sin-transmision-diferida/</guid>
      <description>Ejecución diferida vs ejecución inmediata # Algunos métodos LINQ devuelven un objeto de consulta. Este objeto no contiene los resultados de la consulta; en cambio, tiene toda la información necesaria para generar esos resultados:
var list = new List&amp;lt;int&amp;gt;() {1, 2, 3, 4, 5}; var query = list.Select(x =&amp;gt; { Console.Write($&amp;quot;{x} &amp;quot;); return x; }); La consulta contiene una llamada a Console.Write, pero no se ha enviado nada a la consola.</description>
    </item>
    
    <item>
      <title>Linq usando Take while y Skip while</title>
      <link>https://www.wikiod.com/es/linq/linq-usando-take-while-y-skip-while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/linq/linq-usando-take-while-y-skip-while/</guid>
      <description>Take, Skip, TakeWhile y SkipWhile se denominan operadores de particionamiento, ya que obtienen una sección de una secuencia de entrada determinada por una condición dada. Analicemos estos operadores.
Tomar método # El método Take Toma elementos hasta una posición específica a partir del primer elemento de una secuencia. Firma de Toma:
Public static IEnumerable&amp;lt;TSource&amp;gt; Take&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source,int count); Ejemplo:
int[] numbers = { 1, 5, 8, 4, 9, 3, 6, 7, 2, 0 }; var TakeFirstFiveElement = numbers.</description>
    </item>
    
  </channel>
</rss>

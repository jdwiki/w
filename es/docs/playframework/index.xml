<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Estructura de juego Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/playframework/</link>
    <description>Recent content in Estructura de juego Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/playframework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el marco de juego</title>
      <link>https://www.wikiod.com/es/playframework/primeros-pasos-con-el-marco-de-juego/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/primeros-pasos-con-el-marco-de-juego/</guid>
      <description>Primeros pasos con Play 2.4.x/2.5.x - Windows, Java # Instalaciones # Descargar e instalar:
Java 8: descargue la instalación correspondiente del sitio de Oracle.
Activador: descargue el archivo zip de www.playframework.com/download y extraiga los archivos a la carpeta Play de destino, por ejemplo para:
c:\Play-2.4.2\activator-dist-1.3.5 sbt: descarga desde www.scala-sbt.org.
Definir variables de entorno:
JAVA_HOME, por ejemplo:
c:\Program Files\Java\jdk1.8.0_45 PLAY_HOME, por ejemplo:
c:\Play-2.4.2\activator-dist-1.3.5; SBT_HOME por ejemplo:
c:\Program Files (x86)\sbt\bin; Agregue la ruta a los tres programas instalados a las variables de ruta:</description>
    </item>
    
    <item>
      <title>Inyección de dependencia - Java</title>
      <link>https://www.wikiod.com/es/playframework/inyeccion-de-dependencia---java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/inyeccion-de-dependencia---java/</guid>
      <description>Inyección de dependencia con Guice - Play 2.4, 2.5 # Guice es el marco de inyección de dependencia predeterminado (más DI) de Play. También se pueden usar otros marcos, pero el uso de Guice facilita los esfuerzos de desarrollo, ya que Play se encarga de las cosas ocultas.
Inyección de Play API-s # A partir de Play 2.5, varias API, que eran estáticas en las versiones anteriores, deberían crearse con DI.</description>
    </item>
    
    <item>
      <title>Configuración de su IDE preferido</title>
      <link>https://www.wikiod.com/es/playframework/configuracion-de-su-ide-preferido/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/configuracion-de-su-ide-preferido/</guid>
      <description>IDEA IntelliJ # requisitos previos # Intellij IDEA instalado (edición Community o Ultimate) Complemento Scala instalado en IntelliJ Un proyecto estándar de Play, creado por ejemplo con Activator (activator new [nombre del proyecto] play-scala). Abriendo el proyecto # Abra IntelliJ IDEA Vaya al menú Archivo &amp;gt; Abrir... &amp;gt; haga clic en toda la carpeta [nombre del proyecto] &amp;gt; Aceptar Se abre una ventana emergente con algunas opciones. Los valores predeterminados son lo suficientemente buenos en la mayoría de los casos, y si no le gustan, puede cambiarlos en otro lugar más adelante.</description>
    </item>
    
    <item>
      <title>Examen de la unidad</title>
      <link>https://www.wikiod.com/es/playframework/examen-de-la-unidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/examen-de-la-unidad/</guid>
      <description>Pruebas unitarias - Java, Play 2.4,2.5 # Ayudantes y aplicación falsa # La clase Helpers se usa mucho para pruebas unitarias. Imita una aplicación Play, falsifica solicitudes y respuestas HTTP, sesión, cookies, todo lo que pueda ser necesario para las pruebas. Un controlador bajo la prueba debe ejecutarse en un contexto de una aplicación Play. El método Helpers fakeApplication proporciona una aplicación para ejecutar pruebas. Para usar Helpers y fakeApplication, una clase de prueba debe derivar de WithApplication.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia - Scala</title>
      <link>https://www.wikiod.com/es/playframework/inyeccion-de-dependencia---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/inyeccion-de-dependencia---scala/</guid>
      <description>Sintaxis # class MyClassUsingAnother @Inject() (myOtherClassInjected: MyOtherClass) { (&amp;hellip;) } Clase @Singleton MiClaseQueDeberíaSerASingleton (&amp;hellip;) Uso básico # Una clase singleton típica:
import javax.inject._ @Singleton class BurgersRepository { // implementation goes here } Otra clase, que requiere acceso a la primera.
import javax.inject._ class FastFoodService @Inject() (burgersRepository: BurgersRepository){ // implementation goes here // burgersRepository can be used } Finalmente un controlador usando el último. Tenga en cuenta que, dado que no marcamos FastFoodService como singleton, se crea una nueva instancia cada vez que se inyecta.</description>
    </item>
    
    <item>
      <title>Uso del servicio web con play WSClient</title>
      <link>https://www.wikiod.com/es/playframework/uso-del-servicio-web-con-play-wsclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/uso-del-servicio-web-con-play-wsclient/</guid>
      <description>Enlace a la documentación oficial: https://www.playframework.com/documentation/2.5.x/ScalaWS
Uso básico (Scala) # Las solicitudes HTTP se realizan a través de la clase WSClient, que puede usar como un parámetro inyectado en sus propias clases.
import javax.inject.Inject import play.api.libs.ws.WSClient import scala.concurrent.{ExecutionContext, Future} class MyClass @Inject() ( wsClient: WSClient )(implicit ec: ExecutionContext){ def doGetRequest(): Future[String] = { wsClient .url(&amp;quot;http://www.google.com&amp;quot;) .get() .map { response =&amp;gt; // Play won&#39;t check the response status, // you have to do it manually if ((200 to 299).</description>
    </item>
    
    <item>
      <title>Java - Hola mundo</title>
      <link>https://www.wikiod.com/es/playframework/java---hola-mundo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/java---hola-mundo/</guid>
      <description>Este tutorial está diseñado para ejecutar Play en un sistema Linux/MacOS Crea tu primer proyecto # Para crear un nuevo proyecto, use el siguiente comando (HelloWorld es el nombre del proyecto y play-java es la plantilla)
$ ~/activator-1.3.10-minimal/bin/activator new HelloWorld play-java Debería obtener una salida similar a esta
Fetching the latest list of templates... OK, application &amp;quot;HelloWorld&amp;quot; is being created using the &amp;quot;play-java&amp;quot; template. To run &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator run To run the test for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator test To run the Activator UI for &amp;quot;HelloWorld&amp;quot; from the command line, &amp;quot;cd HelloWorld&amp;quot; then: /home/YourUserName/HelloWorld/activator ui El proyecto se creará en el directorio actual (en este caso era mi carpeta de inicio)</description>
    </item>
    
    <item>
      <title>Trabajando con JSON - Scala</title>
      <link>https://www.wikiod.com/es/playframework/trabajando-con-json---scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/trabajando-con-json---scala/</guid>
      <description>Documentación oficial Documentación del paquete
Puede usar el paquete play json independientemente de Play al incluir
&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;play-json_2.11&amp;quot; % &amp;quot;2.5.3&amp;quot; en su build.sbt, consulte
https://mvnrepository.com/artifact/com.typesafe.play/play-json_2.11 http://stackoverflow.com/questions/19436069/adding-play-json-library-to-sbt Creando un JSON manualmente # Puede construir un árbol de objetos JSON (un JsValue) manualmente
import play.api.libs.json._ val json = JsObject(Map( &amp;quot;name&amp;quot; -&amp;gt; JsString(&amp;quot;Jsony McJsonface&amp;quot;), &amp;quot;age&amp;quot; -&amp;gt; JsNumber(18), &amp;quot;hobbies&amp;quot; -&amp;gt; JsArray(Seq( JsString(&amp;quot;Fishing&amp;quot;), JsString(&amp;quot;Hunting&amp;quot;), JsString(&amp;quot;Camping&amp;quot;) )) )) O con la sintaxis equivalente más corta, basada en algunas conversiones implícitas:</description>
    </item>
    
    <item>
      <title>Resbaloso</title>
      <link>https://www.wikiod.com/es/playframework/resbaloso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/resbaloso/</guid>
      <description>Código de inicio rápido # En build.sbt, asegúrese de incluir (aquí para Mysql y PostGreSQL):
&amp;quot;mysql&amp;quot; % &amp;quot;mysql-connector-java&amp;quot; % &amp;quot;5.1.20&amp;quot;, &amp;quot;org.postgresql&amp;quot; % &amp;quot;postgresql&amp;quot; % &amp;quot;9.3-1100-jdbc4&amp;quot;, &amp;quot;com.typesafe.slick&amp;quot; %% &amp;quot;slick&amp;quot; % &amp;quot;3.1.1&amp;quot;, &amp;quot;com.typesafe.play&amp;quot; %% &amp;quot;play-slick&amp;quot; % &amp;quot;1.1.1&amp;quot; En su application.conf, agregue:
mydb.driverjava=&amp;quot;slick.driver.MySQLDriver$&amp;quot; mydb.driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot; mydb.url=&amp;quot;jdbc:mysql://hostaddress:3306/dbname?zeroDateTimeBehavior=convertToNull&amp;quot; mydb.user=&amp;quot;username&amp;quot; mydb.password=&amp;quot;password&amp;quot; Para tener una arquitectura independiente de RDBMS, cree un objeto como el siguiente
package mypackage import slick.driver.MySQLDriver import slick.driver.PostgresDriver object SlickDBDriver{ val env = &amp;quot;something here&amp;quot; val driver = env match{ case &amp;quot;postGreCondition&amp;quot; =&amp;gt; PostgresDriver case _ =&amp;gt; MySQLDriver } } al crear un nuevo modelo nuevo:</description>
    </item>
    
    <item>
      <title>Java - Trabajar con JSON</title>
      <link>https://www.wikiod.com/es/playframework/java---trabajar-con-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/playframework/java---trabajar-con-json/</guid>
      <description>Documentación de reproducción: https://www.playframework.com/documentation/2.5.x/JavaJsonActions
Creación manual de JSON # import play.libs.Json; public JsonNode createJson() { // {&amp;quot;id&amp;quot;: 33, &amp;quot;values&amp;quot;: [3, 4, 5]} ObjectNode rootNode = Json.newObject(); ArrayNode listNode = Json.newArray(); long values[] = {3, 4, 5}; for (long val: values) { listNode.add(val); } rootNode.put(&amp;quot;id&amp;quot;, 33); rootNode.set(&amp;quot;values&amp;quot;, listNode); return rootNode; } Cargando json desde cadena/archivo # import play.libs.Json; // (...) Cargando un archivo desde su carpeta pública # // Note: &amp;quot;app&amp;quot; is an play.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Erlang on </title>
    <link>https://www.wikiod.com/es/docs/erlang/</link>
    <description>Recent content in Tutorial del lenguaje Erlang on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Erlang</title>
      <link>https://www.wikiod.com/es/erlang/primeros-pasos-con-el-lenguaje-erlang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/primeros-pasos-con-el-lenguaje-erlang/</guid>
      <description>Hola Mundo # Hay dos cosas que deberá saber al escribir una aplicación &amp;ldquo;hola mundo&amp;rdquo; en Erlang:
El código fuente está escrito en lenguaje de programación erlang utilizando el editor de texto de su elección A continuación, la aplicación se ejecuta en la máquina virtual erlang. En este ejemplo, interactuaremos con la máquina virtual de erlang a través del shell de erlang. Primero el código fuente de la aplicación: # Cree un nuevo archivo hello.</description>
    </item>
    
    <item>
      <title>Instalación</title>
      <link>https://www.wikiod.com/es/erlang/instalacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/instalacion/</guid>
      <description>Compile e instale Erlang/OTP en FreeBSD # Los siguientes ejemplos muestran 3 métodos principales para instalar Erlang/OTP en FreeBSD.
Método 1 - Paquete binario preconstruido # Use pkg para instalar el paquete binario preconstruido:
$ pkg install erlang Pruebe su nueva instalación:
$ erl Erlang/OTP 18 [erts-7.3.1] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false] Eshell V7.3.1 (abort with ^G) Método 2: construya e instale usando la colección de puertos (recomendado) # Cree e instale el puerto como de costumbre:</description>
    </item>
    
    <item>
      <title>Tipos de datos</title>
      <link>https://www.wikiod.com/es/erlang/tipos-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/tipos-de-datos/</guid>
      <description>Cada tipo de datos en erlang se llama Término. Es un nombre genérico que significa cualquier tipo de dato.
Números # En Erlang, los números son enteros o flotantes. Erlang usa precisión arbitraria para números enteros (bignums), por lo que sus valores están limitados solo por el tamaño de la memoria de su sistema.
1&amp;gt; 11. 11 2&amp;gt; -44. -44 3&amp;gt; 0.1. 0.1 4&amp;gt; 5.1e-3. 0.0051 5&amp;gt; 5.2e2. 520.0 Los números se pueden utilizar en varias bases:</description>
    </item>
    
    <item>
      <title>Procesos</title>
      <link>https://www.wikiod.com/es/erlang/procesos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/procesos/</guid>
      <description>Creando Procesos # Creamos un nuevo proceso concurrente llamando a la función spawn. La función spawn tendrá como parámetro una función Fun que el proceso evaluará. El valor de retorno de la función spawn es el identificador del proceso creado (pid).
1&amp;gt; Fun = fun() -&amp;gt; 2+2 end. #Fun&amp;lt;erl_eval.20.52032458&amp;gt; 2&amp;gt; Pid = spawn(Fun). &amp;lt;0.60.0&amp;gt; También puedes usar spawn/3 para iniciar un proceso que ejecutará una función específica desde un módulo: spawn(Module, Function, Args).</description>
    </item>
    
    <item>
      <title>Rebar3</title>
      <link>https://www.wikiod.com/es/erlang/rebar3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/rebar3/</guid>
      <description>Instalación de Rebar3 # Rebar3 está escrito en Erlang, por lo que necesita Erlang para ejecutarlo. Está disponible como un binario que puede descargar y ejecutar. Solo busca la compilación nocturna y dale permisos de ejecución:
$ wget https://s3.amazonaws.com/rebar3/rebar3 &amp;amp;&amp;amp; chmod +x rebar3 Coloque este binario en un lugar conveniente y agréguelo a su ruta. Por ejemplo, en un directorio bin en su casa:
$ mkdir ~/bin &amp;amp;&amp;amp; mv rebar3 ~/bin $ export PATH=~/bin:$PATH Esta última línea debe colocarse en su .</description>
    </item>
    
    <item>
      <title>Comportamientos</title>
      <link>https://www.wikiod.com/es/erlang/comportamientos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/comportamientos/</guid>
      <description>Definiendo un comportamiento # Puede definir su propio comportamiento agregando directivas -callback en su módulo. Por ejemplo, si los módulos que implementan su comportamiento necesitan tener una función foo que tome un número entero y devuelva un átomo:
-module(my_behaviour). -callback foo(integer()) -&amp;gt; atom(). Si usa este comportamiento en otro módulo, el compilador le advertirá si no exporta foo/1, y Dialyzer le advertirá si los tipos no son correctos. Con este módulo:</description>
    </item>
    
    <item>
      <title>Cadenas de formato</title>
      <link>https://www.wikiod.com/es/erlang/cadenas-de-formato/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/cadenas-de-formato/</guid>
      <description>Sintaxis # io:format(FormatString, Args) % escribe en la salida estándar io:format(standard_error, FormatString, Args) % escribe en error estándar io:format(F, FormatString, Args) % escritura para abrir archivo io_lib:format(FormatString, Args) % devuelve un iolist Secuencias de control comunes en cadenas de formato # Aunque hay muchas secuencias de control diferentes para io:format y io_lib:format, la mayoría de las veces use solo tres diferentes: ~s, ~p y ~w.
~s # El ~s es para cadenas.</description>
    </item>
    
    <item>
      <title>iolistas</title>
      <link>https://www.wikiod.com/es/erlang/iolistas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/iolistas/</guid>
      <description>Mientras que una cadena Erlang es una lista de enteros, una &amp;ldquo;iolista&amp;rdquo; es una lista cuyos elementos son enteros, binarios u otras iolistas, p. [&amp;quot;foo&amp;quot;, $b, $a, $r, &amp;lt;&amp;lt;&amp;quot;baz&amp;quot;&amp;gt;&amp;gt;]. Ese iolist representa la cadena &amp;quot;foobarbaz&amp;quot;.
Si bien puede convertir un iolist a binario con iolist_to_binary/1, a menudo no es necesario, ya que las funciones de la biblioteca Erlang como file:write_file/2 y gen_tcp:send/2 aceptan iolists así como cadenas y binarios.
Sintaxis # -type iolist() :: may_improper_list(byte() | binary() | iolist(), binary() | []).</description>
    </item>
    
    <item>
      <title>comportamiento del servidor gen</title>
      <link>https://www.wikiod.com/es/erlang/comportamiento-del-servidor-gen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/comportamiento-del-servidor-gen/</guid>
      <description>gen_server es una característica importante de Erlang y requiere algunos requisitos previos para comprender todos los aspectos de esta funcionalidad:
Bucle, recursividad y estado Procesos de desove Paso de mensaje Principios de la OTP Una buena forma de obtener más información sobre una característica de Erlang es leer directamente el código fuente del repositorio oficial de github. El comportamiento de gen_server incorpora mucha información útil y una estructura interesante en su núcleo.</description>
    </item>
    
    <item>
      <title>NIF</title>
      <link>https://www.wikiod.com/es/erlang/nif/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/erlang/nif/</guid>
      <description>Ejemplo: hora actual de UNIX # Aquí hay un ejemplo muy simple para ilustrar cómo escribir un NIF.
Estructura de directorios:
nif_test ├── c_src │ ├── Makefile │ └── nif_test.c ├── rebar.config └── src ├── nif_test.app.src └── nif_test.erl Esta estructura se puede inicializar fácilmente usando Rebar3:
$ rebar3 new lib nif_test &amp;amp;&amp;amp; cd nif_test &amp;amp;&amp;amp; rebar3 new cmake Contenido de nif_test.c:
#include &amp;quot;erl_nif.h&amp;quot; #include &amp;quot;time.h&amp;quot; static ERL_NIF_TERM now(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_int(env, time(0)); } static ErlNifFunc nif_funcs[] = { {&amp;quot;now&amp;quot;, 0, now} }; ERL_NIF_INIT(nif_test,nif_funcs,NULL,NULL,NULL,NULL); Contenido de nif_test.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de espera asincrónica on </title>
    <link>https://www.wikiod.com/es/docs/async-await/</link>
    <description>Recent content in Tutorial de espera asincrónica on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/async-await/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con async-await</title>
      <link>https://www.wikiod.com/es/async-await/primeros-pasos-con-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/async-await/primeros-pasos-con-async-await/</guid>
      <description>vacío asíncrono # Puede usar void (en lugar de Task) como tipo de retorno de un método asíncrono. Esto resultará en una acción de &amp;ldquo;disparar y olvidar&amp;rdquo;:
public void DoStuff() { FireAndForgetAsync(); } private async void FireAndForgetAsync() { await Task.Delay(1000); throw new Exception(); //will be swallowed } Como está devolviendo void, no puede await FireAndForgetAsync. No podrá saber cuándo finaliza el método, y cualquier excepción generada dentro del método async void será procesada.</description>
    </item>
    
    <item>
      <title>Mejores prácticas</title>
      <link>https://www.wikiod.com/es/async-await/mejores-practicas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/async-await/mejores-practicas/</guid>
      <description>Evite el vacío asíncrono # El único lugar donde puede usar async void de forma segura es en los controladores de eventos. Considere el siguiente código:
private async Task&amp;lt;bool&amp;gt; SomeFuncAsync() { ... await ... } public void button1_Click(object sender, EventArgs e) { var result = SomeFuncAsync().Result; SomeOtherFunc(); } Una vez que se completa la llamada async, espera a que SynchronizationContext esté disponible. Sin embargo, el controlador de eventos conserva SynchronizationContext mientras espera que se complete el método SomeFuncAsync; provocando así una espera circular (interbloqueo).</description>
    </item>
    
  </channel>
</rss>

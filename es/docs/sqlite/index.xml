<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de sqlite on </title>
    <link>https://www.wikiod.com/es/docs/sqlite/</link>
    <description>Recent content in Tutorial de sqlite on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/sqlite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comenzando con sqlite</title>
      <link>https://www.wikiod.com/es/sqlite/comenzando-con-sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sqlite/comenzando-con-sqlite/</guid>
      <description>Instalación # SQLite es una biblioteca C que normalmente se compila directamente en la aplicación [descargando](http://www.sqlite.org/ download.html) el código fuente de la última versión y agregando el archivo sqlite3.c al proyecto.
Muchos lenguajes de script (p. ej., Perl, Python, Ruby, etc.) y marcos (p. ej., Android) son compatibles con SQLite; esto se hace con una copia integrada de la biblioteca SQLite, que no necesita instalarse por separado.
Para probar SQL, podría ser útil usar el shell de línea de comandos (sqlite3 o sqlite3.</description>
    </item>
    
    <item>
      <title>Declaración preparada de sqlite3_stmt (API de C)</title>
      <link>https://www.wikiod.com/es/sqlite/declaracion-preparada-de-sqlite3_stmt-api-de-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sqlite/declaracion-preparada-de-sqlite3_stmt-api-de-c/</guid>
      <description>documentación oficial: [Objeto de declaración preparada] (http://www.sqlite.org/c3ref/stmt.html)
Ejecutar una declaración # Una declaración se construye con una función como sqlite3_prepare_v2().
Un objeto de declaración preparado debe limpiarse con sqlite3_finalize(). No olvide esto en caso de error.
Si se utilizan parámetros, establezca sus valores con las [funciones sqlite3_bind_xxx()](http://www.sqlite.org/c3ref/bind_blob. html).
La ejecución real ocurre cuando se llama a sqlite3_step().
const char *sql = &amp;quot;INSERT INTO MyTable(ID, Name) VALUES (?, ?)&amp;quot;; sqlite3_stmt *stmt; int err; err = sqlite3_prepare_v2(db, sql, -1, &amp;amp;stmt, NULL); if (err !</description>
    </item>
    
    <item>
      <title>Declaraciones PRAGMA</title>
      <link>https://www.wikiod.com/es/sqlite/declaraciones-pragma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sqlite/declaraciones-pragma/</guid>
      <description>La documentación de SQLite tiene una [referencia de todas las declaraciones de PRAGMA] (http://www.sqlite.org/pragma.html).
##PRAGMAs con efectos permanentes La mayoría de las declaraciones de PRAGMA afectan solo a la conexión actual de la base de datos, lo que significa que deben volver a aplicarse cada vez que se abre la base de datos.
Sin embargo, los siguientes PRAGMA escriben en el archivo de la base de datos y se pueden ejecutar en cualquier momento (pero en algunos casos, no dentro de una transacción):</description>
    </item>
    
    <item>
      <title>Tipos de datos</title>
      <link>https://www.wikiod.com/es/sqlite/tipos-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sqlite/tipos-de-datos/</guid>
      <description>documentación oficial: [Tipos de datos en SQLite versión 3] (http://www.sqlite.org/datatype3.html)
Tipos de fecha/hora # SQLite no tiene un tipo de datos separado para valores de fecha u hora.
Cuerdas ISO8601 # Las palabras clave integradas CURRENT_DATE, CURRENT_TIME y CURRENT_TIMESTAMP devuelven cadenas en formato ISO8601:
&amp;gt; SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP; CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP ------------ ------------ ------------------- 2016-07-08 12:34:56 2016-07-08 12:34:56 Dichos valores también son entendidos por todas las [funciones de fecha/hora integradas] (https://www.</description>
    </item>
    
    <item>
      <title>Comandos de punto de línea de comando</title>
      <link>https://www.wikiod.com/es/sqlite/comandos-de-punto-de-linea-de-comando/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/sqlite/comandos-de-punto-de-linea-de-comando/</guid>
      <description>El shell de línea de comandos sqlite3 implementa un conjunto adicional de comandos (que no están disponibles en los programas que usan la biblioteca SQLite).
Documentación oficial: Comandos especiales para sqlite3
Exportando e importando una tabla como un script SQL # Exportar una base de datos es un proceso simple de dos pasos:
sqlite&amp;gt; .output mydatabase_dump.sql sqlite&amp;gt; .dump Exportar una tabla es bastante similar:
sqlite&amp;gt; .output mytable_dump.sql sqlite&amp;gt; .dump mytable El archivo de salida debe definirse con .</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de xml on </title>
    <link>https://www.wikiod.com/es/docs/xaml/</link>
    <description>Recent content in Tutorial de xml on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/xaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con xaml</title>
      <link>https://www.wikiod.com/es/xaml/primeros-pasos-con-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/primeros-pasos-con-xaml/</guid>
      <description>Instalación o Configuración # La forma más fácil de escribir tu primer XAML es instalar Microsoft Visual Studio. Esto está disponible gratis de Microsoft.
Una vez instalado, puede crear un nuevo proyecto, de tipo Aplicación WPF, ya sea con un código VB.NET o C#.
Esto es similar a los formularios de Windows en el sentido de que tiene una serie de ventanas, la principal diferencia es que estas ventanas están escritas en XAML y responden mucho mejor a diferentes dispositivos.</description>
    </item>
    
    <item>
      <title>Convertidores</title>
      <link>https://www.wikiod.com/es/xaml/convertidores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/convertidores/</guid>
      <description>Parámetros # Parámetro Detalles valor El valor a convertir de tipo de destino El tipo que se convierte a parámetro Valor opcional para controlar cómo funciona la conversión cultura Objeto CultureInfo: obligatorio si se necesita localización El método Convert convierte el valor del origen (generalmente el modelo de vista) al destino (generalmente una propiedad de un control).
El método ConvertBack convierte el valor del destino al origen. Solo es necesario si el enlace es TwoWay o OneWayToSource.</description>
    </item>
    
    <item>
      <title>Diferencias en los diversos dialectos XAML</title>
      <link>https://www.wikiod.com/es/xaml/diferencias-en-los-diversos-dialectos-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/diferencias-en-los-diversos-dialectos-xaml/</guid>
      <description>XAML se usa en aplicaciones Silverlight, Windows Phone, Windows RT y UWP. Compartir código o convertir código entre estos a veces es más difícil de lo deseable debido a las sutiles diferencias entre los distintos dialectos XAML. Este tema se esfuerza por dar una visión general de estas diferencias con una breve explicación.
Enlaces de datos compilados: la extensión de marcado {x:Bind} # Los databings son esenciales para trabajar con XAML.</description>
    </item>
    
    <item>
      <title>El enlace de datos</title>
      <link>https://www.wikiod.com/es/xaml/el-enlace-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/el-enlace-de-datos/</guid>
      <description>Sintaxis # &amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt;
&amp;lt;TextBlock Text=&amp;quot;{Binding Path=Title}&amp;quot;/&amp;gt;
&amp;lt;Bloque de texto&amp;gt; &amp;lt;TextBlock.Text&amp;gt; &amp;lt;Binding Path=&amp;quot;Title&amp;quot;/&amp;gt; &amp;lt;/TextBlock.Text&amp;gt; &amp;lt;/TextBlock&amp;gt;
Todas estas etiquetas producen el mismo resultado.
Cadena de enlace a la propiedad de texto # Para cambiar el contenido de la interfaz de usuario en tiempo de ejecución, puede usar Binding. Cuando se cambia la propiedad enlazada del código, se mostrará en la interfaz de usuario.
&amp;lt;TextBlock Text=&amp;quot;{Binding Title}&amp;quot;/&amp;gt; Para notificar a la interfaz de usuario sobre los cambios, la propiedad debe generar el evento PropertyChanged desde la interfaz INotifyPropertyChanged o puede usar Dependency Property.</description>
    </item>
    
    <item>
      <title>Controles de diseño</title>
      <link>https://www.wikiod.com/es/xaml/controles-de-diseno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/controles-de-diseno/</guid>
      <description>Cuadrícula # Cuadrícula se utiliza para crear diseños de tablas.
Definiciones básicas de filas y columnas # &amp;lt;Grid&amp;gt; &amp;lt;!-- Define 3 columns with width of 100 --&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;!-- Define 3 rows with height of 50 --&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;RowDefinition Height=&amp;quot;50&amp;quot;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- This is placed at the top left (first row, first column) --&amp;gt; &amp;lt;Button Grid.Column=&amp;quot;0&amp;quot; Grid.Row=&amp;quot;0&amp;quot; Content=&amp;quot;Top Left&amp;quot;/&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Plantillas de datos</title>
      <link>https://www.wikiod.com/es/xaml/plantillas-de-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/plantillas-de-datos/</guid>
      <description>Usando DataTemplate en un ListBox # Supongamos que tenemos el siguiente fragmento de XAML:
&amp;lt;ListBox x:Name=&amp;quot;MyListBox&amp;quot; /&amp;gt; Luego, en el código subyacente de este archivo XAML, escribimos lo siguiente en el constructor:
MyListBox.ItemsSource = new[] { 1, 2, 3, 4, 5 }; Al ejecutar la aplicación, obtenemos una lista de los números que ingresamos.
Sin embargo, si tratamos de mostrar una lista de objetos de un tipo personalizado, como este</description>
    </item>
    
    <item>
      <title>Herramientas de desarrollo XAML</title>
      <link>https://www.wikiod.com/es/xaml/herramientas-de-desarrollo-xaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/herramientas-de-desarrollo-xaml/</guid>
      <description>##Microsoft Visual Studio y Microsoft Expression Blend Cree atractivas interfaces de usuario para aplicaciones de escritorio de Windows con Blend para Visual Studio, la principal herramienta de diseño profesional para aplicaciones XAML. Cree bellas transiciones y visualizaciones utilizando el conjunto completo de herramientas de dibujo vectorial de Blend, potentes funciones de edición de plantillas, animación en tiempo real, gestión de estado visual y más.
Descargar Visual Studio
Inspector de WPF # WPF Inspector es una utilidad que se adjunta a una aplicación WPF en ejecución para solucionar problemas comunes con el diseño, el enlace de datos o el estilo.</description>
    </item>
    
    <item>
      <title>Trabajar con archivos XAML personalizados</title>
      <link>https://www.wikiod.com/es/xaml/trabajar-con-archivos-xaml-personalizados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/trabajar-con-archivos-xaml-personalizados/</guid>
      <description>Leer un objeto desde XAML # Considere que se debe construir una estructura de las siguientes clases en XAML y luego leerlas en un objeto CLR:
namespace CustomXaml { public class Test { public string Value { get; set; } public List&amp;lt;TestChild&amp;gt; Children { get; set; } = new List&amp;lt;TestChild&amp;gt;(); } public class TestChild { public string StringValue { get; set; } public int IntValue { get; set; } } } Las clases no deben tener un constructor explícito o proporcionar uno vacío.</description>
    </item>
    
    <item>
      <title>Plantillas de control</title>
      <link>https://www.wikiod.com/es/xaml/plantillas-de-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/xaml/plantillas-de-control/</guid>
      <description>Plantillas de control # Las interfaces de usuario predeterminadas para los controles WPF generalmente se construyen a partir de otros controles y formas. Por ejemplo, un botón se compone de los controles ButtonChrome y ContentPresenter. ButtonChrome proporciona la apariencia estándar del botón, mientras que ContentPresenter muestra el contenido del botón, según lo especificado por la propiedad Content. A veces, la apariencia predeterminada de un control puede ser incongruente con la apariencia general de una aplicación.</description>
    </item>
    
  </channel>
</rss>

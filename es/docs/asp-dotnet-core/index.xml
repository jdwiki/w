<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-core Tutorial on </title>
    <link>https://www.wikiod.com/es/docs/asp-dotnet-core/</link>
    <description>Recent content in asp.net-core Tutorial on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/asp-dotnet-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con asp.net-core</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/primeros-pasos-con-aspnet-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/primeros-pasos-con-aspnet-core/</guid>
      <description>Instalación y configuración # Instalación de Visual Studio # Si no tiene instalado Visual Studio, puede descargar la edición gratuita de Visual Studio Community Edition aquí. Si ya lo tiene instalado, puede continuar con el siguiente paso.
Creación de una aplicación ASP.NET Core MVC. # Abrir Visual Studio. Seleccione Archivo &amp;gt; Nuevo Proyecto. Seleccione Web en el idioma de su elección dentro de la sección Plantillas a la izquierda. Elija un tipo de proyecto preferido dentro del cuadro de diálogo.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/inyeccion-de-dependencia/</guid>
      <description>El núcleo de Aspnet está construido con inyección de dependencia como uno de sus conceptos básicos clave. Introduce una abstracción de contenedor compatible para que pueda reemplazar el integrado con un contenedor de terceros de su elección.
Sintaxis # IServiceCollection.Add(elemento ServiceDescriptor); IServiceCollection.AddScoped(Type serviceType); IServiceCollection.AddScoped(Type serviceType, Type deploymentType); IServiceCollection.AddScoped(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; deploymentFactory); IServiceCollection.AddScoped&amp;lt;TService&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService&amp;gt;(Func&amp;lt;IServiceProvider, TService&amp;gt; deploymentFactory) IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;() IServiceCollection.AddScoped&amp;lt;TService, TImplementation&amp;gt;(Func&amp;lt;IServiceProvider, TImplementation&amp;gt; deploymentFactory) IServiceCollection.AddSingleton(Type serviceType); IServiceCollection.AddSingleton(Type serviceType, Func&amp;lt;IServiceProvider, object&amp;gt; deploymentFactory); IServiceCollection.AddSingleton(Type serviceType, Type deploymentType); IServiceCollection.</description>
    </item>
    
    <item>
      <title>Limitación de velocidad</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/limitacion-de-velocidad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/limitacion-de-velocidad/</guid>
      <description>AspNetCoreRateLimit es una solución de limitación de tasa de ASP.NET Core de código abierto diseñada para controlar la tasa de solicitudes que los clientes pueden realizar a una API web o una aplicación MVC en función de la dirección IP o la identificación del cliente.
Límite de velocidad basado en la identificación del cliente # Con el middleware ClientRateLimit, puede establecer múltiples límites para diferentes escenarios, como permitir que un Cliente realice una cantidad máxima de llamadas en un intervalo de tiempo como por segundo, 15 minutos, etc.</description>
    </item>
    
    <item>
      <title>ASP.NET Core registro de solicitudes y respuestas mediante middleware</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/aspnet-core-registro-de-solicitudes-y-respuestas-mediante-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/aspnet-core-registro-de-solicitudes-y-respuestas-mediante-middleware/</guid>
      <description>Durante algún tiempo he buscado la mejor manera de registrar solicitudes y respuestas en un ASP.Net Core. Estaba desarrollando servicios y uno de los requisitos era registrar la solicitud con su respuesta en un registro de la base de datos. Hay tantos temas por ahí, pero ninguno funcionó para mí. es solo para solicitud, solo para respuesta o simplemente no funcionó. Cuando finalmente pude hacerlo, y había evolucionado durante mi proyecto a un mejor manejo de errores y registro de excepciones, pensé en compartir.</description>
    </item>
    
    <item>
      <title>Agrupación y Minificación</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/agrupacion-y-minificacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/agrupacion-y-minificacion/</guid>
      <description>Extensión de empaquetador y minificador # Visual Studio también cuenta con una [extensión de empaquetador y minificador] disponible (https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40) que es capaz de manejar este proceso por usted. La extensión le permite seleccionar y agrupar fácilmente los archivos que necesita sin escribir una línea de código.
Construyendo tus paquetes # Después de instalar la extensión, selecciona todos los archivos específicos que desea incluir dentro de un paquete y usa la opción Agrupar y Minimizar Archivos de la extensión:</description>
    </item>
    
    <item>
      <title>Angular2 y .Net Core</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/angular2-y-net-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/angular2-y-net-core/</guid>
      <description>¡Tutorial rápido para un Angular 2 Hello World! Aplicación con .Net Core en Visual Studio 2015 # Pasos:
Cree una aplicación web .Net Core vacía: Vaya a wwwroot y cree una página html normal llamada Index.html: Configure Startup.cs para aceptar archivos estáticos (esto requerirá agregar la biblioteca &amp;ldquo;Microsoft.AspNetCore.StaticFiles&amp;rdquo;: &amp;ldquo;1.0.0&amp;rdquo; en el archivo &amp;ldquo;project.json&amp;rdquo;): Agregar archivo NPN:
Right click the WebUi project and add NPN Configuration File (package.json): Verify the last versions of the packages: Note: If visual studio does not detect the versions of the packages (Check all packages, because some of them does show the version, and some others don&amp;rsquo;t), it might be because the Node version coming in visual studio is not working correctly, so it will probably require to install node js externally and then link that installation with visual studio.</description>
    </item>
    
    <item>
      <title>Configuración de varios entornos</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/configuracion-de-varios-entornos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/configuracion-de-varios-entornos/</guid>
      <description>Tener ajustes de aplicaciones por entorno # Para cada entorno, debe crear archivos appsettings.{EnvironmentName}.json independientes:
appsettings.Desarrollo.json appsettings.Puesta en escena.json appsettings.Producción.json Luego abra el archivo project.json e inclúyalos en &amp;ldquo;incluir&amp;rdquo; en la sección &amp;ldquo;publishOptions&amp;rdquo;. Aquí se enumeran todos los archivos y carpetas que se incluirán cuando publique:
&amp;quot;publishOptions&amp;quot;: { &amp;quot;include&amp;quot;: [ &amp;quot;appsettings.Development.json&amp;quot;, &amp;quot;appsettings.Staging.json&amp;quot;, &amp;quot;appsettings.Production.json&amp;quot; ... ] } El último paso. En su clase de inicio agregue:
.AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true); en el constructor donde configura las fuentes de configuración:</description>
    </item>
    
    <item>
      <title>Localización</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/localizacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/localizacion/</guid>
      <description>Localización usando recursos de lenguaje JSON # En ASP.NET Core, hay varias formas diferentes de localizar/globalizar nuestra aplicación. Es importante elegir una forma que se adapte a sus necesidades. En este ejemplo, verá cómo podemos crear una aplicación ASP.NET Core multilingüe que lea cadenas específicas de idioma de archivos .json y las almacene en la memoria para proporcionar localización en todas las secciones de la aplicación y mantener un alto rendimiento.</description>
    </item>
    
    <item>
      <title>Inicio sesión</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/inicio-sesion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/inicio-sesion/</guid>
      <description>Agregar registrador al controlador # En lugar de solicitar un ILoggerFactory y crear una instancia de ILogger explícitamente, puede solicitar un ILogger (donde T es la clase que solicita el registrador).
public class TodoController : Controller { private readonly ILogger _logger; public TodoController(ILogger&amp;lt;TodoController&amp;gt; logger) { _logger = logger; } } Uso del registrador NLog # NLog.Extensions.Logging es el proveedor oficial de NLog para Microsoft en .NET Core y ASP.NET Core. Aquí y aquí son ​​instrucciones y ejemplos respectivamente.</description>
    </item>
    
    <item>
      <title>Envío de correo electrónico en aplicaciones .Net Core usando MailKit</title>
      <link>https://www.wikiod.com/es/asp-dotnet-core/envio-de-correo-electronico-en-aplicaciones-net-core-usando-mailkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/asp-dotnet-core/envio-de-correo-electronico-en-aplicaciones-net-core-usando-mailkit/</guid>
      <description>Actualmente, .Net Core no incluye soporte para enviar correos electrónicos como System.Net.Mail desde .Net. Proyecto MailKit (que está disponible en nuget) es una buena biblioteca para este propósito.
Implementación simple para enviar correos electrónicos # using MailKit.Net.Smtp; using MimeKit; using MimeKit.Text; using System.Threading.Tasks; namespace Project.Services { /// Using a static class to store sensitive credentials /// for simplicity. Ideally these should be stored in /// configuration files public static class Constants { public static string SenderName =&amp;gt; &amp;quot;&amp;lt;sender_name&amp;gt;&amp;quot;; public static string SenderEmail =&amp;gt; &amp;quot;&amp;lt;sender_email&amp;gt;&amp;quot;; public static string EmailPassword =&amp;gt; &amp;quot;email_password&amp;quot;; public static string SmtpHost =&amp;gt; &amp;quot;&amp;lt;smtp_host&amp;gt;&amp;quot;; public static int SmtpPort =&amp;gt; &amp;quot;smtp_port&amp;quot;; } public class EmailService : IEmailSender { public Task SendEmailAsync(string recipientEmail, string subject, string message) { MimeMessage mimeMessage = new MimeMessage(); mimeMessage.</description>
    </item>
    
  </channel>
</rss>

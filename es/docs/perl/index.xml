<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial del lenguaje Perl on </title>
    <link>https://www.wikiod.com/es/docs/perl/</link>
    <description>Recent content in Tutorial del lenguaje Perl on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con el lenguaje Perl</title>
      <link>https://www.wikiod.com/es/perl/primeros-pasos-con-el-lenguaje-perl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/primeros-pasos-con-el-lenguaje-perl/</guid>
      <description>Primeros pasos con Perl # Perl intenta hacer lo que quieres decir:
print &amp;quot;Hello World\n&amp;quot;; Los dos bits complicados son el punto y coma al final de la línea y el \n, que agrega una nueva línea (salto de línea). Si tiene una versión relativamente nueva de perl, puede usar say en lugar de print para que el retorno de carro se agregue automáticamente:
use feature &#39;say&#39;; say &amp;quot;Hello World&amp;quot;; La función decir también se habilita automáticamente con una declaración use v5.</description>
    </item>
    
    <item>
      <title>ES de archivo (lectura y escritura de archivos)</title>
      <link>https://www.wikiod.com/es/perl/es-de-archivo-lectura-y-escritura-de-archivos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/es-de-archivo-lectura-y-escritura-de-archivos/</guid>
      <description>Parámetros # Modo Explicación &amp;gt; Escribir (trunc). Sobrescribirá los archivos existentes. Crea un nuevo archivo si no se encuentra ningún archivo &amp;gt;&amp;gt; Escribir (adjuntar). No sobrescribirá los archivos, sino que agregará contenido nuevo al final. También creará un archivo si se usa para abrir un archivo no existente. &amp;lt; Leer. Abre el archivo en modo de solo lectura. +&amp;lt; Leer escribir. No creará ni truncará el archivo. +&amp;gt; Leer/Escribir (trunc). Creará y truncará el archivo.</description>
    </item>
    
    <item>
      <title>Leer el contenido de un archivo en una variable</title>
      <link>https://www.wikiod.com/es/perl/leer-el-contenido-de-un-archivo-en-una-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/leer-el-contenido-de-un-archivo-en-una-variable/</guid>
      <description>Ruta::Pequeña # Usando la expresión de [The Manual Way](https://www.wikiod.com/es/perl/leer-el-contenido-de-un-archivo-en-una-variable#la manera manual) varias veces en una secuencia de comandos pronto se vuelve tedioso, por lo que es posible que desee probar un módulo.
use Path::Tiny; my $contents = path($filename)-&amp;gt;slurp; Puede pasar una opción binmode si necesita controlar la codificación de archivos, finales de línea, etc. - vea man perlio:
my $contents = path($filename)-&amp;gt;slurp( {binmode =&amp;gt; &amp;quot;:encoding(UTF-8)&amp;quot;} ); Path::Tiny también tiene muchas otras funciones para manejar archivos, por lo que puede ser una buena elección.</description>
    </item>
    
    <item>
      <title>Perl orientado a objetos</title>
      <link>https://www.wikiod.com/es/perl/perl-orientado-a-objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/perl-orientado-a-objetos/</guid>
      <description>Definición de clases en Perl moderno # Aunque está disponible, no se recomienda definir una clase [desde cero] (https://www.wikiod.com/es/perl/perl-orientado-a-objetos#Definición de clases) en Perl moderno. Utilice uno de los sistemas auxiliares OO que brindan más funciones y conveniencia. Entre estos sistemas se encuentran:
Moose - inspirado en el diseño OO de Perl 6
Class::Accessor - una alternativa ligera a Moose
Class::Tiny - creador de clases realmente mínimo
Alce
package Foo; use Moose; has bar =&amp;gt; (is =&amp;gt; &#39;ro&#39;); # a read-only property has baz =&amp;gt; (is =&amp;gt; &#39;rw&#39;, isa =&amp;gt; &#39;Bool&#39;); # a read-write boolean property sub qux { my $self = shift; my $barIsBaz = $self-&amp;gt;bar eq &#39;baz&#39;; # property getter $self-&amp;gt;baz($barIsBaz); # property setter } Clase::Accesor (sintaxis Moose)</description>
    </item>
    
    <item>
      <title>Liza</title>
      <link>https://www.wikiod.com/es/perl/liza/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/liza/</guid>
      <description>Matriz como lista # La matriz es uno de los tipos de variables básicas de Perl. Contiene una lista, que es una secuencia ordenada de cero o más escalares. La matriz es la variable que contiene (y brinda acceso) a los datos de la lista, como se documenta en perldata.
Puede asignar una lista a una matriz:
my @foo = ( 4, 5, 6 ); Puede usar una matriz donde se espera una lista:</description>
    </item>
    
    <item>
      <title>Salida de depuración</title>
      <link>https://www.wikiod.com/es/perl/salida-de-depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/salida-de-depuracion/</guid>
      <description>Dumping con estilo # A veces Data::Dumper no es suficiente. ¿Tienes un objeto Moose que quieres inspeccionar? ¿Enormes números de la misma estructura? ¿Quieres cosas ordenadas? ¿De colores? Data::Printer es tu amigo.
use Data::Printer; p $data_structure; Data::Printer escribe en STDERR, como warn. Eso hace que sea más fácil encontrar la salida. De forma predeterminada, ordena las claves hash y examina los objetos.
use Data::Printer; use LWP::UserAgent; my $ua = LWP::UserAgent-&amp;gt;new; p $ua; Examinará todos los métodos del objeto y también enumerará los elementos internos.</description>
    </item>
    
    <item>
      <title>Verdadero y falso</title>
      <link>https://www.wikiod.com/es/perl/verdadero-y-falso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/verdadero-y-falso/</guid>
      <description>Sintaxis # undef # Falso &amp;rsquo;&amp;rsquo; # Definido, Falso 0 # Definido, Tiene Longitud, Falso &amp;lsquo;0&amp;rsquo; # Definido, Tiene Longitud, Falso Perl no tiene un tipo de datos booleano, ni tiene palabras clave &amp;ldquo;verdadero&amp;rdquo; y &amp;ldquo;falso&amp;rdquo; como muchos otros lenguajes. Sin embargo, cada valor escalar se evaluará como verdadero o falso cuando se evalúe en un contexto booleano (la condición en una declaración if o un ciclo while, por ejemplo).</description>
    </item>
    
    <item>
      <title>Paquetes y módulos</title>
      <link>https://www.wikiod.com/es/perl/paquetes-y-modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/paquetes-y-modulos/</guid>
      <description>Sintaxis # requiere Módulo::Nombre; # Requerir por nombre de @INC requiere &amp;ldquo;ruta/al/archivo.pm&amp;rdquo;; # Requerir por ruta relativa desde @INC use Módulo::Nombre; # Requerir e importar por defecto al COMENZAR use Módulo::Nombre (); # requiere y no importa al BEGIN use Módulo::Nombre (@ARGS); # requiere e importa con argumentos en BEGIN use Módulo::Nombre VERSIÓN; # requiere, verificación de versión e importación predeterminada al COMENZAR use Módulo::Nombre VERSIÓN (); # Requerir, verificar la versión y no importar al COMENZAR use Módulo::Nombre VERSIÓN (@ARGS); # requiere, verificación de versión, importación con argumentos en BEGIN hacer &amp;ldquo;ruta/al/archivo.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.wikiod.com/es/perl/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/variables/</guid>
      <description>Sintaxis # mi # declaración léxica nuestra declaración # Global $foo # Escalar @foo # Matriz $#foo # Último índice de la matriz %foo # hash ${$foo} # Desreferencia escalar @{$foo} # Matriz de referencia $#{$foo} # Array-DeRef Último índice %{$foo} # Desreferencia de hash $foo[$index] # Se indexa la matriz ${$foo}[$index] # Array De-Reference and get indexed. $foo-&amp;gt;[$index] # Array De-Reference and get indexed (simplificado) $foo{$key} # Hash obtiene el valor de la clave ${$foo}{$key} # Hash Dereference y obtener el valor de la clave $foo-&amp;gt;{$key} # Hash Dereference y obtener el valor de la clave (simplificado) \$x # Referencia a escalar \@x # Referencia a la matriz \%x # Referencia a hash = # Referencia a matriz anónima (en línea) ={ } # Referencia a hash anónimo (en línea) Escalares # Los escalares son el tipo de datos más básico de Perl.</description>
    </item>
    
    <item>
      <title>subrutinas</title>
      <link>https://www.wikiod.com/es/perl/subrutinas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/perl/subrutinas/</guid>
      <description>Las subrutinas obtienen sus argumentos de la variable mágica llamada @_. Si bien no es necesario descomprimirlo, se recomienda, ya que ayuda a la legibilidad y evita cambios accidentales, ya que los argumentos de @_ se pasan por referencia (se pueden modificar).
Creando subrutinas # Las subrutinas se crean utilizando la palabra clave sub seguida de un identificador y un bloque de código encerrado entre llaves.
Puede acceder a los argumentos usando la variable especial @_, que contiene todos los argumentos como una matriz.</description>
    </item>
    
  </channel>
</rss>

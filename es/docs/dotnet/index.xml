<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de .NET Framework on </title>
    <link>https://www.wikiod.com/es/docs/dotnet/</link>
    <description>Recent content in Tutorial de .NET Framework on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con .NET Framework</title>
      <link>https://www.wikiod.com/es/dotnet/primeros-pasos-con-net-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/primeros-pasos-con-net-framework/</guid>
      <description>Hola Mundo en C# # using System; class Program { // The Main() function is the first function to be executed in a program static void Main() { // Write the string &amp;quot;Hello World to the standard out Console.WriteLine(&amp;quot;Hello World&amp;quot;); } } Console.WriteLine tiene varias sobrecargas. En este caso, la cadena &amp;ldquo;Hello World&amp;rdquo; es el parámetro y generará &amp;ldquo;Hello World&amp;rdquo; en el flujo de salida estándar durante la ejecución. Otras sobrecargas pueden llamar a .</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>https://www.wikiod.com/es/dotnet/linq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/linq/</guid>
      <description>LINQ (Language Integrated Query) es una expresión que recupera datos de una fuente de datos. LINQ simplifica esta situación al ofrecer un modelo consistente para trabajar con datos en varios tipos de fuentes y formatos de datos. En una consulta LINQ, siempre está trabajando con objetos. Utiliza los mismos patrones de codificación básicos para consultar y transformar datos en documentos XML, bases de datos SQL, conjuntos de datos ADO.NET, colecciones .</description>
    </item>
    
    <item>
      <title>Serialización JSON</title>
      <link>https://www.wikiod.com/es/dotnet/serializacion-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/serializacion-json/</guid>
      <description>JavaScriptSerializer frente a Json.NET
La clase JavaScriptSerializer se introdujo en .NET 3.5 y es utilizado internamente por la capa de comunicación asíncrona de .NET para aplicaciones habilitadas para AJAX. Se puede usar para trabajar con JSON en código administrado.
A pesar de la existencia de la clase JavaScriptSerializer, Microsoft recomienda usar la [biblioteca Json.NET] de código abierto (http://www.newtonsoft.com/json) para la serialización y deserialización. Json.NET ofrece un mejor rendimiento y una interfaz más amigable para asignar JSON a clases personalizadas (un [objeto JavaScriptConverter personalizado] (https://msdn.</description>
    </item>
    
    <item>
      <title>Biblioteca paralela de tareas (TPL)</title>
      <link>https://www.wikiod.com/es/dotnet/biblioteca-paralela-de-tareas-tpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/biblioteca-paralela-de-tareas-tpl/</guid>
      <description>Propósito y casos de uso # El propósito de Task Parallel Library es simplificar el proceso de escritura y mantenimiento de código multiproceso y paralelo.
Algunos casos de uso*:
Mantener una interfaz de usuario receptiva ejecutando trabajo en segundo plano en una tarea separada Distribuir la carga de trabajo Permitir que una aplicación cliente envíe y reciba solicitudes al mismo tiempo (descanso, TCP/UDP, etc.) Leer y/o escribir varios archivos a la vez *El código debe considerarse caso por caso para subprocesos múltiples.</description>
    </item>
    
    <item>
      <title>Excepciones</title>
      <link>https://www.wikiod.com/es/dotnet/excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/excepciones/</guid>
      <description>Relacionado:
MSDN: Excepciones y manejo de excepciones (Guía de programación de C#) MSDN: manejo y generación de excepciones MSDN: CA1031: No detectar tipos de excepciones generales MSDN: Try-catch (Referencia de C#) Atrapar y volver a lanzar excepciones atrapadas # Cuando desea detectar una excepción y hacer algo, pero no puede continuar con la ejecución del bloque de código actual debido a la excepción, es posible que desee volver a generar la excepción al siguiente controlador de excepciones en la pila de llamadas.</description>
    </item>
    
    <item>
      <title>Análisis de fecha y hora</title>
      <link>https://www.wikiod.com/es/dotnet/analisis-de-fecha-y-hora/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/analisis-de-fecha-y-hora/</guid>
      <description>Análisis exacto # var dateString = &amp;quot;2015-11-24&amp;quot;; var date = DateTime.ParseExact(dateString, &amp;quot;yyyy-MM-dd&amp;quot;, null); Console.WriteLine(date); 24/11/2015 00:00:00
Tenga en cuenta que pasar CultureInfo.CurrentCulture como tercer parámetro es idéntico a pasar null. O bien, puede pasar una cultura específica.
Cadenas de formato
La cadena de entrada puede estar en cualquier formato que coincida con la cadena de formato
var date = DateTime.ParseExact(&amp;quot;24|201511&amp;quot;, &amp;quot;dd|yyyyMM&amp;quot;, null); Console.WriteLine(date); 24/11/2015 00:00:00
Los caracteres que no son especificadores de formato se tratan como literales</description>
    </item>
    
    <item>
      <title>Diccionarios</title>
      <link>https://www.wikiod.com/es/dotnet/diccionarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/diccionarios/</guid>
      <description>Inicializar un diccionario con un inicializador de colección # // Translates to `dict.Add(1, &amp;quot;First&amp;quot;)` etc. var dict = new Dictionary&amp;lt;int, string&amp;gt;() { { 1, &amp;quot;First&amp;quot; }, { 2, &amp;quot;Second&amp;quot; }, { 3, &amp;quot;Third&amp;quot; } }; // Translates to `dict[1] = &amp;quot;First&amp;quot;` etc. // Works in C# 6.0. var dict = new Dictionary&amp;lt;int, string&amp;gt;() { [1] = &amp;quot;First&amp;quot;, [2] = &amp;quot;Second&amp;quot;, [3] = &amp;quot;Third&amp;quot; }; Agregar a un diccionario # Dictionary&amp;lt;int, string&amp;gt; dict = new Dictionary&amp;lt;int, string&amp;gt;(); dict.</description>
    </item>
    
    <item>
      <title>Inyección de dependencia</title>
      <link>https://www.wikiod.com/es/dotnet/inyeccion-de-dependencia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/inyeccion-de-dependencia/</guid>
      <description>Problemas resueltos por inyección de dependencia
Si no usáramos la inyección de dependencia, la clase Greeter se parecería más a esto:
public class ControlFreakGreeter { public void Greet() { var greetingProvider = new SqlGreetingProvider( ConfigurationManager.ConnectionStrings[&amp;quot;myConnectionString&amp;quot;].ConnectionString); var greeting = greetingProvider.GetGreeting(); Console.WriteLine(greeting); } } Es un &amp;ldquo;fanático del control&amp;rdquo; porque controla la creación de la clase que proporciona el saludo, controla de dónde proviene la cadena de conexión SQL y controla la salida.</description>
    </item>
    
    <item>
      <title>ADO.NET</title>
      <link>https://www.wikiod.com/es/dotnet/adonet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/adonet/</guid>
      <description>ADO (ActiveX Data Objects).Net es una herramienta proporcionada por Microsoft que brinda acceso a fuentes de datos como SQL Server, Oracle y XML a través de sus componentes. Las aplicaciones front-end .Net pueden recuperar, crear y manipular datos, una vez que están conectadas a una fuente de datos a través de ADO.Net con los privilegios apropiados.
ADO.Net proporciona una arquitectura sin conexión. Es un método seguro para interactuar con una base de datos, ya que no es necesario mantener la conexión durante toda la sesión.</description>
    </item>
    
    <item>
      <title>clientes HTTP</title>
      <link>https://www.wikiod.com/es/dotnet/clientes-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/dotnet/clientes-http/</guid>
      <description>Los RFC de HTTP/1.1 actualmente relevantes son:
[7230: sintaxis y enrutamiento de mensajes] (https://tools.ietf.org/html/rfc7230) 7231: Semántica y Contenido 7232: Solicitudes condicionales 7233: Solicitudes de rango [7234: almacenamiento en caché] (https://tools.ietf.org/html/rfc7234) 7235: Autenticación 7239: Extensión HTTP reenviada 7240: Preferir encabezado para HTTP También hay los siguientes RFC informativos:
[7236: Registros del esquema de autenticación] (https://tools.ietf.org/html/rfc7236) 7237: Registros de métodos Y el RFC experimental:
[7238: el código de estado del protocolo de transferencia de hipertexto 308 (redireccionamiento permanente)] (https://tools.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial de backbone.js on </title>
    <link>https://www.wikiod.com/es/docs/backbone-js/</link>
    <description>Recent content in Tutorial de backbone.js on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.wikiod.com/es/docs/backbone-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Primeros pasos con backbone.js</title>
      <link>https://www.wikiod.com/es/backbone-js/primeros-pasos-con-backbonejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/primeros-pasos-con-backbonejs/</guid>
      <description>Configuración básica # Backbone requiere Underscore y (opcionalmente) jQuery - para la manipulación DOM (usando Backbone.View) y persistencia RESTful.
La forma más rápida de empezar a trabajar con Backbone es crear un archivo index.html con etiquetas de script simples en el &amp;lt;head&amp;gt; HTML:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Backbone ya está disponible para su uso en la página.
Ejemplo de uso de Backbone (Principalmente Backbone.</description>
    </item>
    
    <item>
      <title>Vista</title>
      <link>https://www.wikiod.com/es/backbone-js/vista/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/vista/</guid>
      <description>Sintaxis # Crear: var View = Backbone.View.extend( { /* propiedades */ } ); Construir: var myView = new View( /* opciones */ ); initialize: método llamado automáticamente después de la construcción render: método usado para actualizar this.el con nuevo contenido Una vista vinculada a HTML existente # Asumiendo este HTML en la página:
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;myPage&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; Una vista puede vincularse a ella con:
var MyPageView = Backbone.View.extend( { &amp;quot;el&amp;quot;: &amp;quot;#myPage&amp;quot;, &amp;quot;template&amp;quot;: _.</description>
    </item>
    
    <item>
      <title>enrutador</title>
      <link>https://www.wikiod.com/es/backbone-js/enrutador/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/enrutador/</guid>
      <description>Creando un enrutador # El servidor web atiende al usuario en función de la solicitud enviada por el navegador, pero cómo el usuario le dirá al navegador lo que está buscando, ahí es cuando necesitamos la URL. Cada página web en Internet tiene una URL que se puede marcar, copiar, compartir y guardar para referencia futura. En la aplicación Backbone de una sola página, todo lo que vemos es una vista, las vistas se forman y representan para mostrar una página específica, pero ¿qué pasa si el usuario quiere ver la misma información nuevamente?</description>
    </item>
    
    <item>
      <title>Modelo</title>
      <link>https://www.wikiod.com/es/backbone-js/modelo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/modelo/</guid>
      <description>Sintaxis # var MyModel = Backbone.Model.extend(propiedades, [propiedadesdeclase]); // Crear un modelo personalizado var model = new Backbone.Model([atributos], [opciones]); // Instanciar un objeto modelo Parámetros # Parámetro Detalles propiedades Propiedades de instancia. propiedades de clase Opcional. Propiedades que existen y se comparten con cada instancia de modelo de este tipo. atributos Opcional. Valores iniciales de los atributos del modelo. Si se omite este parámetro, el modelo se inicializará con los valores especificados por la propiedad predeterminada del modelo.</description>
    </item>
    
    <item>
      <title>Recopilación</title>
      <link>https://www.wikiod.com/es/backbone-js/recopilacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/recopilacion/</guid>
      <description>Sintaxis # // Nueva colección personalizada var MyCollection = Backbone.Collection.extend(propiedades, [propiedadesdeclase]); // Nueva instancia de colección var colección = new Backbone.Collection([modelos], [opciones]); Parámetros # Parámetro Detalles propiedades Propiedades de instancia. propiedades de clase Opcional. Propiedades que existen y se comparten con cada instancia de colección de este tipo. modelos Opcional. La matriz inicial de modelos (u objetos). Si se omite este parámetro, la colección estará vacía. opciones Opcional. Objeto que sirve para configurar la colección y luego se pasa a la función inicializar.</description>
    </item>
    
    <item>
      <title>sincronizar</title>
      <link>https://www.wikiod.com/es/backbone-js/sincronizar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/sincronizar/</guid>
      <description>sync es una función que utiliza Backbone para manejar todo el envío o recepción de datos hacia/desde un servidor remoto. La implementación predeterminada usa jQuery (o Zepto) para realizar operaciones AJAX cuando se sincronizan los datos. Sin embargo, este método se puede anular para aplicar un comportamiento de sincronización diferente, como:
Uso de setTimeout para agrupar múltiples actualizaciones en una sola solicitud Envío de datos del modelo como XML en lugar de JSON Uso de WebSockets en lugar de Ajax Sintaxis # sincronización (método, modelo, opciones) Parámetros # parámetro detalles método crear, leer, actualizar, eliminar modelo el modelo a guardar (o colección a leer) opciones devoluciones de llamada de éxito y error, y todas las demás opciones de solicitud de jQuery Ejemplo básico # El método sync() lee y obtiene los datos del modelo</description>
    </item>
    
    <item>
      <title>URL y raíz de URL</title>
      <link>https://www.wikiod.com/es/backbone-js/url-y-raiz-de-url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.wikiod.com/es/backbone-js/url-y-raiz-de-url/</guid>
      <description>Modificando Modelo.url() # Model.url y Collection.url solo se usan internamente por el método predeterminado Backbone.sync. El método predeterminado asume que está vinculado a una API RESTful. Si está utilizando un diseño de punto final diferente, querrá anular el método sync y puede utilizar el método url.
var Model = Backbone.Model.extend({ urlRoot: &#39;/path-to-model&#39;, url: function (path) { var url = this.urlRoot + &#39;/&#39; + path; if (this.isNew()) { return url; } return url + &#39;/&#39; + this.</description>
    </item>
    
  </channel>
</rss>
